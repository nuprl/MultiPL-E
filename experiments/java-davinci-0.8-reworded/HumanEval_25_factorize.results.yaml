language: java
name: HumanEval_25_factorize
results:
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long d\
    \ = 2; d*d <= n; d++) {\n            while (n % d == 0) {\n                factors.add(d);\n\
    \                n /= d;\n            }\n        }\n        if (n > 1)\n     \
    \       factors.add(n);\n        return factors;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011282
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        if (n == 1)\
    \ {\n            factors.add(n);\n            return factors;\n        }\n   \
    \     for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         factors.add(i);\n                return factors;\n            }\n  \
    \      }\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy33taz83.java:34)\n"
  stdout: ''
  timestamp: 1660011282
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> out = new ArrayList<Long>();\n        while (n % 2 ==\
    \ 0) {\n            out.add((long)2l);\n            n /= 2;\n        }\n     \
    \   for (long i = 3; i * i <= n; i += 2) {\n            while (n % i == 0) {\n\
    \                out.add(i);\n                n /= i;\n            }\n       \
    \ }\n        if (n > 2) {\n            out.add(n);\n        }\n        return\
    \ out;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011282
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        while (n >\
    \ 1) {\n            for (long i = 2; i <= n; i++) {\n                if (n % i\
    \ == 0) {\n                    factors.add(i);\n                    n /= i;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return factors;\n    }\n    public static void main(String[] args) {\n \
    \   assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011282
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> ans = new ArrayList<Long>();\n        long d = 2;\n \
    \       while (n > 1) {\n            while (n % d == 0) {\n                ans.add(d);\n\
    \                n /= d;\n            }\n            d += 1;\n        }\n    \
    \    return ans;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011282
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> ret = new ArrayList<Long>();\n        for (long i = 2;\
    \ i * i <= n; i++) {\n            while (n % i == 0) {\n                ret.add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 1)\n     \
    \       ret.add(n);\n        return ret;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011282
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n >= i) {\n            if (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            } else {\n                i++;\n       \
    \     }\n        }\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011282
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                result.add(i);\n\
    \                n /= i;\n            }\n        }\n        return result;\n \
    \   }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011282
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> list = new ArrayList<Long>();\n        while(n % 2 ==\
    \ 0) {\n            list.add((long)2l);\n            n /= 2;\n        }\n    \
    \    for(long i = 3; i <= Math.sqrt(n); i += 2) {\n            while(n % i ==\
    \ 0) {\n                list.add(i);\n                n /= i;\n            }\n\
    \        }\n        if(n > 2) {\n            list.add(n);\n        }\n       \
    \ return list;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011282
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> res = new ArrayList<Long>();\n        for (long i = 2;\
    \ i * i <= n; i++) {\n            while (n % i == 0) {\n                res.add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 1)\n     \
    \       res.add(n);\n        return res;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011282
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; ++i) {\n            if (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n                --i;\n            }\n        }\n   \
    \     return factors;\n    }\n    public static void main(String[] args) {\n \
    \   assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011282
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> r = new ArrayList<Long>();\n        long d = 2;\n   \
    \     while (n > 1) {\n            while (n % d == 0) {\n                r.add(d);\n\
    \                n /= d;\n            }\n            d++;\n        }\n       \
    \ return r;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011282
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> al = new ArrayList<Long>();\n        for (long i = 2;\
    \ i < n / 2 + 1; i++) {\n            if (n % i == 0) {\n                al.add(i);\n\
    \                n /= i;\n                i = 1;\n            }\n        }\n \
    \       al.add(n);\n        return al;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011282
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        long m = n;\n        ArrayList<Long> factors = new ArrayList<Long>();\n\
    \        while (m % 2 == 0) {\n            factors.add(2l);\n            m /=\
    \ 2;\n        }\n        long sqrt = (long)Math.sqrt(m);\n        long i = 3;\n\
    \        while (i <= sqrt) {\n            while (m % i == 0) {\n             \
    \   factors.add(i);\n                m /= i;\n            }\n            i +=\
    \ 2;\n        }\n        if (m > 1) {\n            factors.add(m);\n        }\n\
    \        return factors;\n    }\n    public static void main(String[] args) {\n\
    \    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011282
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        return _factorize(n, 0l);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzq3mqz6v.java:19: error: cannot find symbol\n        return _factorize(n,\
    \ 0l);\n               ^\n  symbol:   method _factorize(long,long)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011282
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                result.add(i);\n\
    \                n /= i;\n            }\n        }\n        return result;\n \
    \   }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011282
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> ret = new ArrayList<Long>();\n        if (n <= 1) {\n\
    \            return ret;\n        }\n        long i = 2;\n        while (i <=\
    \ n) {\n            if (n % i == 0) {\n                ret.add(i);\n         \
    \       n /= i;\n            } else {\n                i++;\n            }\n \
    \       }\n        return ret;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011282
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 1)\
    \ {\n            result.add(n);\n            return result;\n        }\n     \
    \   for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n          \
    \      ArrayList<Long> temp = factorize(n / i);\n                temp.add(i);\n\
    \                return temp;\n            }\n        }\n        result.add(n);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuqreu7rz.java:38)\n"
  stdout: ''
  timestamp: 1660011282
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long ogN =\
    \ n;\n        long pf = 2;\n        while (n > 1 && pf <= n) {\n            if\
    \ (n % pf == 0) {\n                factors.add(pf);\n                n /= pf;\n\
    \            } else {\n                pf += 1;\n            }\n        }\n  \
    \      return factors;\n    }\n    public static void main(String[] args) {\n\
    \    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011282
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long prime\
    \ = 2;\n        while (n > 1) {\n            while (n % prime == 0) {\n      \
    \          factors.add(prime);\n                n /= prime;\n            }\n \
    \           prime++;\n        }\n        return factors;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011282
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        while (n %\
    \ 2 == 0) {\n            factors.add(2l);\n            n /= 2;\n        }\n  \
    \      for (long p = 3; p <= Math.sqrt(n); p += 2) {\n            while (n % p\
    \ == 0) {\n                factors.add(p);\n                n /= p;\n        \
    \    }\n        }\n        if (n > 2) {\n            factors.add(n);\n       \
    \ }\n        return factors;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011282
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> r = new ArrayList<Long>();\n        for (long i = 2;\
    \ i <= n; i++) {\n            while (n % i == 0) {\n                r.add(i);\n\
    \                n /= i;\n            }\n        }\n        return r;\n    }\n\
    \    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011282
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long x = n;\n\
    \        while(x != 1) {\n            long f = findFactor(x);\n            factors.add(f);\n\
    \            x /= f;\n        }\n        return factors;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmplm2l1syv.java:22: error: cannot find symbol\n            long f\
    \ = findFactor(x);\n                     ^\n  symbol:   method findFactor(long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011282
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 1) {\n   \
    \         factors.add(n);\n        }\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011282
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long current_num\
    \ = n;\n        while (current_num % 2 == 0) {\n            factors.add((long)2l);\n\
    \            current_num /= 2;\n        }\n        for (long i = 3l; i <= current_num;\
    \ i+=2) {\n            while (current_num % i == 0) {\n                factors.add(i);\n\
    \                current_num /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011284
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        // Fill this in.\n    }\n    public static void main(String[] args) {\n\
    \    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp7p01wd43.java:20: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011283
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> res = new ArrayList<Long>();\n        for (long i = 2;\
    \ i <= n; ++i) {\n            while (n % i == 0) {\n                res.add(i);\n\
    \                n /= i;\n            }\n        }\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011284
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> ans = new ArrayList<Long>();\n        if (n % 2 == 0)\
    \ {\n            ans.add((long)2l);\n            while (n % 2 == 0) {\n      \
    \          n /= 2;\n            }\n        }\n        long i = 3;\n        while\
    \ (i * i <= n) {\n            if (n % i == 0) {\n                ans.add(i);\n\
    \                while (n % i == 0) {\n                    n /= i;\n         \
    \       }\n            }\n            i += 2;\n        }\n        if (n > 1) {\n\
    \            ans.add(n);\n        }\n        return ans;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw5_85l1j.java:43)\n"
  stdout: ''
  timestamp: 1660011284
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long factor\
    \ = 2;\n        while (n > 1) {\n            if (n % factor == 0) {\n        \
    \        factors.add(factor);\n                n /= factor;\n            } else\
    \ {\n                factor++;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011284
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> res = new ArrayList<Long>();\n        if (n % 2 == 0)\
    \ {\n            res.add((long)2l);\n            n /= 2;\n        }\n        if\
    \ (n % 3 == 0) {\n            res.add((long)3l);\n            n /= 3;\n      \
    \  }\n        if (n % 5 == 0) {\n            res.add((long)5l);\n            n\
    \ /= 5;\n        }\n        for (long i = 7l; i < n; i += 2l) {\n            if\
    \ (n % i == 0) {\n                res.add(i);\n                n /= i;\n     \
    \       }\n        }\n        if (n > 1) {\n            res.add(n);\n        }\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwj8tylym.java:46)\n"
  stdout: ''
  timestamp: 1660011284
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> primes = new ArrayList<Long>();\n        long m = n;\n\
    \        for (long i = 2; i <= n / i; i++) {\n            while (m % i == 0) {\n\
    \                primes.add(i);\n                m /= i;\n            }\n    \
    \    }\n        if (m > 1) {\n            primes.add(m);\n        }\n        return\
    \ primes;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011284
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        return null;\n    }\n    public static void main(String[] args) {\n \
    \   assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.factorize(long)\"\
    \ is null\n\tat Problem.main(tmp_u62qsu9.java:22)\n"
  stdout: ''
  timestamp: 1660011284
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011284
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        if (n <= 1) {\n            return new ArrayList<Long>();\n        }\n\
    \        ArrayList<Long> output = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            if (i * i > n) {\n                output.add(n);\n\
    \                break;\n            }\n            if (n % i == 0) {\n      \
    \          output.add(i);\n                ArrayList<Long> otherOutput = factorize(n\
    \ / i);\n                for (long j : otherOutput) {\n                    output.add(j);\n\
    \                }\n                break;\n            }\n        }\n       \
    \ return output;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011284
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011284
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factorization = new ArrayList<Long>();\n        if (n\
    \ % 2 == 0) {\n            factorization.add((long)2l);\n            factorization.addAll(factorize(n\
    \ / 2));\n        } else {\n            long factor = 3;\n            while (factor\
    \ * factor <= n) {\n                if (n % factor == 0) {\n                 \
    \   factorization.add(factor);\n                    factorization.addAll(factorize(n\
    \ / factor));\n                    break;\n                }\n               \
    \ factor += 2;\n            }\n            if (factor * factor > n) {\n      \
    \          factorization.add(n);\n            }\n        }\n        return factorization;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2xhq6_94.java:40)\n"
  stdout: ''
  timestamp: 1660011284
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> res = new ArrayList<Long>();\n        while (n % 2 ==\
    \ 0) {\n            res.add(2l);\n            n /= 2;\n        }\n        for\
    \ (long i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n\
    \                res.add(i);\n                n /= i;\n            }\n       \
    \ }\n        if (n > 2) {\n            res.add(n);\n        }\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011284
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        if (n <= 1) {\n            return new ArrayList<Long>();\n        }\n\
    \        else {\n            // return (\n            //     (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))\n            // );\n            ArrayList<Long> factors\
    \ = new ArrayList<Long>();\n            for (long i = 2; i <= n; i++) {\n    \
    \            // System.out.println(\"i = \" + i);\n                // System.out.println(\"\
    n = \" + n);\n                // System.out.println(\"n % i = \" + (n % i));\n\
    \                if (n % i == 0) {\n                    factors.add(i);\n    \
    \                // System.out.println(\"factors = \" + factors);\n          \
    \          // System.out.println(\"\");\n                    return concat(factors,\
    \ factorize(n / i));\n                }\n            }\n            return factors;\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7p539gbl.java:35: error: cannot find symbol\n                 \
    \   return concat(factors, factorize(n / i));\n                           ^\n\
    \  symbol:   method concat(ArrayList<Long>,ArrayList<Long>)\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011284
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> ret = new ArrayList<Long>();\n        for (long i = 2;\
    \ i <= n; i++) {\n            while (n % i == 0) {\n                ret.add(i);\n\
    \                n /= i;\n            }\n        }\n        return ret;\n    }\n\
    \    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011284
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> res = new ArrayList<Long>();\n        if (n <= 1) {\n\
    \            return res;\n        }\n        long cur = n;\n        for (long\
    \ i = 2; i <= Math.sqrt(n); i++) {\n            while (cur % i == 0) {\n     \
    \           res.add(i);\n                cur /= i;\n            }\n        }\n\
    \        if (cur != 1) {\n            res.add(cur);\n        }\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011284
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        assert (n > 0l);\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        long d = 2l;\n        while (n != 1l) {\n            while (n % d ==\
    \ 0l) {\n                res.add(d);\n                n /= d;\n            }\n\
    \            d++;\n        }\n        return res;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011284
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long f\
    \ = 2; f <= n; f++) {\n            while (n % f == 0) {\n                factors.add(f);\n\
    \                n /= f;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011284
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> ret = new ArrayList<Long>();\n        if (n == 1) return\
    \ ret;\n        long div = 2;\n        while (div*div <= n) {\n            if\
    \ (n % div == 0) {\n                ret.add(div);\n                n /= div;\n\
    \            } else {\n                div++;\n            }\n        }\n    \
    \    ret.add(n);\n        return ret;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011284
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        return factorize(n, 2l);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp128oh62p.java:19: error: method factorize in class Problem cannot\
    \ be applied to given types;\n        return factorize(n, 2l);\n             \
    \  ^\n  required: long\n  found:    long,long\n  reason: actual and formal argument\
    \ lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011284
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        // Write your code here\n        return null;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.factorize(long)\"\
    \ is null\n\tat Problem.main(tmpit5x9dm6.java:23)\n"
  stdout: ''
  timestamp: 1660011284
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        if (n < 2)\
    \ return factors;\n        while (n % 2 == 0) {\n            factors.add(2l);\n\
    \            n /= 2;\n        }\n        long divisor = 3;\n        while (n >\
    \ 1) {\n            while (n % divisor == 0) {\n                factors.add(divisor);\n\
    \                n /= divisor;\n            }\n            divisor += 2;\n   \
    \     }\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011284
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        throw new RuntimeException(\"Not implemented\");\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not implemented\n\
    \tat Problem.factorize(tmpihsd0rzh.java:19)\n\tat Problem.main(tmpihsd0rzh.java:22)\n"
  stdout: ''
  timestamp: 1660011284
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        // if number is even \n        if (n%2==0) {\n            ArrayList<Long>\
    \ l = new ArrayList<Long>();\n            l.add((long)2);\n            return\
    \ l;\n        }\n        else {\n            // start with 3\n            ArrayList<Long>\
    \ l = new ArrayList<Long>();\n            l.add((long)2);\n            l.add((long)2);\n\
    \            l.add((long)2);\n            return l;\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5r6naumi.java:36)\n"
  stdout: ''
  timestamp: 1660011284
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> primeFactors = new ArrayList<Long>();\n        long number\
    \ = n;\n        while (number % 2 == 0) {\n            primeFactors.add((long)2l);\n\
    \            number /= 2;\n        }\n        for (long i = 3l; i <= Math.sqrt(number);\
    \ i += 2l) {\n            while (number % i == 0) {\n                primeFactors.add(i);\n\
    \                number /= i;\n            }\n        }\n        if (number >\
    \ 2l) {\n            primeFactors.add(number);\n        }\n        return primeFactors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011285
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long factor\
    \ = 2; factor <= n; factor++) {\n            while (n % factor == 0) {\n     \
    \           factors.add(factor);\n                n /= factor;\n            }\n\
    \        }\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011285
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> result = new ArrayList<Long>();\n        while (n % 2\
    \ == 0) {\n            result.add(2l);\n            n /= 2;\n        }\n     \
    \   long i = 3;\n        while (i <= n) {\n            if (n % i == 0) {\n   \
    \             result.add(i);\n                n /= i;\n            } else {\n\
    \                i += 2;\n            }\n        }\n        return result;\n \
    \   }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011285
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        BigInteger p = BigInteger.valueOf(2);\n        int i = 2;\n        ArrayList<Long>\
    \ factorization = new ArrayList<Long>();\n        while (n > 1 && !BigInteger.valueOf(n).isProbablePrime(100))\
    \ {\n            while (n % i == 0) {\n                factorization.add((long)i);\n\
    \                n /= i;\n            }\n            i += 1;\n        }\n    \
    \    factorization.add((long)n);\n        return factorization;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp28kwtz_.java:34)\n"
  stdout: ''
  timestamp: 1660011285
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        // >>> your code should start here <<<\n        ArrayList<Long> factors\
    \ = new ArrayList<Long>();\n        while (n % 2 == 0) {\n            factors.add(2l);\n\
    \            n /= 2;\n        }\n        for (long i = 3; i * i <= n; i += 2)\
    \ {\n            while (n % i == 0) {\n                factors.add(i);\n     \
    \           n /= i;\n            }\n        }\n        if (n > 2) {\n        \
    \    factors.add(n);\n        }\n        return factors;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011285
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long div =\
    \ 2;\n        while (n > 1) {\n            while (n % div == 0) {\n          \
    \      factors.add(div);\n                n /= div;\n            }\n         \
    \   div++;\n        }\n        return factors;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011285
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> ans = new ArrayList<Long>();\n        while (n % 2 ==\
    \ 0) {\n            ans.add((long)2l);\n            n /= 2;\n        }\n     \
    \   int i = 3;\n        while (i <= Math.sqrt(n)) {\n            while (n % i\
    \ == 0) {\n                ans.add((long)i);\n                n /= i;\n      \
    \      }\n            i += 2;\n        }\n        if (n > 2) ans.add(n);\n   \
    \     return ans;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011285
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        int limit = (int) Math.sqrt(n);\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        while (n % 2 == 0) {\n            res.add(2l);\n            n /= 2;\n\
    \        }\n        for (int i = 3; i <= limit; i += 2) {\n            while (n\
    \ % i == 0) {\n                res.add((long) i);\n                n /= i;\n \
    \           }\n        }\n        if (n > 2)\n            res.add(n);\n      \
    \  return res;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011285
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long c = n;\n\
    \        for (long i = 2; i <= c; i++) {\n            while (c % i == 0) {\n \
    \               factors.add(i);\n                c /= i;\n            }\n    \
    \    }\n        return factors;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011285
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> f = new ArrayList<Long>();\n        int p = 2;\n    \
    \    while (n > 1) {\n            while (n % p == 0) {\n                f.add((long)p);\n\
    \                n /= p;\n            }\n            p++;\n        }\n       \
    \ return f;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011285
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        // Check if prime\n        if (isPrime(n)) {\n            return new\
    \ ArrayList<Long>(Arrays.asList(n));\n        }\n\n        // Prime factors\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n\n        // Check\
    \ if even\n        if (n % 2 == 0) {\n            factors.add(2l);\n         \
    \   long number = n / 2;\n            while (number % 2 == 0) {\n            \
    \    factors.add(2l);\n                number /= 2;\n            }\n         \
    \   factors.addAll(factorize(number));\n            return factors;\n        }\n\
    \n        // Do while n is not a prime\n        long temp = n;\n        while\
    \ (!isPrime(temp)) {\n            for (long factor = 3; factor < temp; factor\
    \ += 2) {\n                if (temp % factor == 0) {\n                    factors.add(factor);\n\
    \                    temp /= factor;\n                    break;\n           \
    \     }\n            }\n        }\n        factors.add(temp);\n        return\
    \ factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpec371xpq.java:20: error: cannot find symbol\n        if (isPrime(n))\
    \ {\n            ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    /tmp/tmpec371xpq.java:41: error: cannot find symbol\n        while (!isPrime(temp))\
    \ {\n                ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660011285
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        int i = 2;\n        ArrayList<Long> ret = new ArrayList<Long>();\n  \
    \      while (n > 1) {\n            if (n % i == 0) {\n                ret.add((long)i);\n\
    \                n /= i;\n            } else {\n                i++;\n       \
    \     }\n        }\n        return ret;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011285
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        if (n <= 1) {\n            throw new RuntimeException(\"Invalid input\
    \ n <= 1: \" + n);\n        }\n        ArrayList<Long> factors = new ArrayList<Long>();\n\
    \        while (n % 2 == 0) {\n            factors.add(2l);\n            n /=\
    \ 2;\n        }\n        for (long i = 3; i <= Math.sqrt(n); i += 2) {\n     \
    \       while (n % i == 0) {\n                factors.add(i);\n              \
    \  n /= i;\n            }\n        }\n        if (n > 2) {\n            factors.add(n);\n\
    \        }\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011285
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        if (n < 2)\
    \ {\n            return factors;\n        } else {\n            // Start at 2\
    \ and go up to the square root.\n            long sqrtN = (long)Math.sqrt(n);\n\
    \            for (long i = 2; i <= sqrtN; i++) {\n                while (n % i\
    \ == 0) {\n                    factors.add(i);\n                    n /= i;\n\
    \                }\n            }\n            // If n is not 1, it is a prime\
    \ number greater than sqrt(n).\n            if (n != 1) {\n                factors.add(n);\n\
    \            }\n            return factors;\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011285
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i < n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 1) {\n   \
    \         factors.add(n);\n        }\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011285
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long d\
    \ = 2; d*d <= n; d++) {\n            while (n % d == 0) {\n                factors.add(d);\n\
    \                n /= d;\n            }\n        }\n        if (n > 1) {\n   \
    \         factors.add(n);\n        }\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011285
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        if (n <= 1)\n            return new ArrayList<Long>();\n        ArrayList<Long>\
    \ ans = new ArrayList<Long>();\n        while (n % 2 == 0) {\n            ans.add(2l);\n\
    \            n /= 2;\n        }\n        long d = 3;\n        while (d <= n) {\n\
    \            if (n % d == 0) {\n                ans.add(d);\n                n\
    \ /= d;\n            } else {\n                d += 2;\n            }\n      \
    \  }\n        return ans;\n    }\n    public static void main(String[] args) {\n\
    \    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011286
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> ret = new ArrayList<Long>();\n        while (n % 2 ==\
    \ 0) {\n            ret.add(2l);\n            n /= 2;\n        }\n        while\
    \ (n % 3 == 0) {\n            ret.add(3l);\n            n /= 3;\n        }\n \
    \       long i = 5;\n        while (i * i <= n) {\n            while (n % i ==\
    \ 0) {\n                ret.add(i);\n                n /= i;\n            }\n\
    \            i += 2;\n        }\n        if (n > 1) {\n            ret.add(n);\n\
    \        }\n        return ret;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011285
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        // Type your solution here.\n        return null;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.factorize(long)\"\
    \ is null\n\tat Problem.main(tmp6a4obccn.java:23)\n"
  stdout: ''
  timestamp: 1660011285
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        // add prime\
    \ factors\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1wcfubsu.java:24)\n"
  stdout: ''
  timestamp: 1660011285
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \tArrayList<Long> res = new ArrayList<Long>();\n\tlong factor = 2;\n\twhile (n\
    \ > 1) {\n\t    while (n % factor == 0) {\n\t\tres.add(factor);\n\t\tn /= factor;\n\
    \t    }\n\t    factor++;\n\t}\n\treturn res;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011286
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> ans = new ArrayList<Long>();\n        long nn = n;\n\
    \        long d = 2;\n        while (d * d <= nn) {\n            int cnt = 0;\n\
    \            while (nn % d == 0) {\n                nn /= d;\n               \
    \ ++cnt;\n            }\n            for (int i = 0; i < cnt; ++i) {\n       \
    \         ans.add(d);\n            }\n            ++d;\n        }\n        if\
    \ (nn > 1) {\n            ans.add(nn);\n        }\n        return ans;\n    }\n\
    \    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011285
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> res = new ArrayList<Long>();\n        for (long i = 2;\
    \ i <= n; i++) {\n            while (n % i == 0) {\n                res.add(i);\n\
    \                n /= i;\n            }\n        }\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011285
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        // Complete this function for part 1\n        return null;\n    }\n \
    \   public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.factorize(long)\"\
    \ is null\n\tat Problem.main(tmpi8d_qvjy.java:23)\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> out = new ArrayList<Long>();\n        for (long x = 2;\
    \ x <= n; x++) {\n            while (n % x == 0) {\n                out.add(x);\n\
    \                n /= x;\n            }\n        }\n        return out;\n    }\n\
    \    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        // Fill in the code here\n        // You may introduce new function if\
    \ needed\n        long currentN = n;\n        ArrayList<Long> list = new ArrayList<Long>();\n\
    \        long i = 2l;\n        while (currentN > 1) {\n            if (currentN\
    \ % i == 0) {\n                list.add(i);\n                currentN /= i;\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return list;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        return (ArrayList<Long>)f.call(n);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2vsctz0u.java:19: error: cannot find symbol\n        return (ArrayList<Long>)f.call(n);\n\
    \                                ^\n  symbol:   variable f\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011286
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> res = new ArrayList<Long>();\n        if(n == 1) {\n\
    \            res.add((long)1l);\n            return res;\n        }\n        while(n\
    \ % 2 == 0) {\n            res.add((long)2l);\n            n /= 2;\n        }\n\
    \        long largestFactor = 1;\n        while(largestFactor * largestFactor\
    \ <= n) {\n            if(n % largestFactor == 0) {\n                res.add(largestFactor);\n\
    \                n /= largestFactor;\n            } else {\n                largestFactor\
    \ += 2;\n            }\n        }\n        if(n > 1) {\n            res.add(n);\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011292
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long p = 2;\n\
    \        while (n != 1) {\n            if (n % p == 0) {\n                factors.add(p);\n\
    \                n /= p;\n            } else {\n                p += 1;\n    \
    \        }\n        }\n        return factors;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        // write code here\n        ArrayList<Long> arr = new ArrayList<Long>();\n\
    \        while(n%2==0){\n            arr.add(2l);\n            n = n/2;\n    \
    \    }\n        for(long i=3;i<=Math.sqrt(n);i+=2){\n            while(n%i==0){\n\
    \                arr.add(i);\n                n = n/i;\n            }\n      \
    \  }\n        if(n>2){\n            arr.add(n);\n        }\n        return arr;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> res = new ArrayList<Long>();\n        while(n % 2 ==\
    \ 0) {\n            res.add((long)2l);\n            n /= 2;\n        }\n     \
    \   for(long i = 3; i * i <= n; i += 2) {\n            while(n % i == 0) {\n \
    \               res.add(i);\n                n /= i;\n            }\n        }\n\
    \        if(n > 2) {\n            res.add(n);\n        }\n        return res;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long x\
    \ = 2; x * x <= n; x++) {\n            while (n % x == 0) {\n                factors.add(x);\n\
    \                n /= x;\n            }\n        }\n        if (n > 1)\n     \
    \       factors.add(n);\n        return factors;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> out = new ArrayList<Long>();\n        long i = 2;\n \
    \       while (n > 1) {\n            while (n % i == 0) {\n                out.add(i);\n\
    \                n /= i;\n            }\n            i += 1;\n        }\n    \
    \    return out;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> ret = new ArrayList<Long>();\n        while (n % 2 ==\
    \ 0) {\n            ret.add(2l);\n            n /= 2;\n        }\n        for\
    \ (long i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n\
    \                ret.add(i);\n                n /= i;\n            }\n       \
    \ }\n        if (n > 2) {\n            ret.add(n);\n        }\n        return\
    \ ret;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> ret = new ArrayList<Long>();\n        for (long div =\
    \ 2; div * div <= n; div++) {\n            while (n % div == 0) {\n          \
    \      ret.add(div);\n                n /= div;\n            }\n        }\n  \
    \      if (n > 1) ret.add(n);\n        return ret;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long max_factor\
    \ = n;\n        long divisor = 2;\n        while (divisor <= max_factor) {\n \
    \           if (n % divisor == 0) {\n                max_factor = n / divisor;\n\
    \                factors.add(divisor);\n                n = max_factor;\n    \
    \        } else {\n                divisor += 1;\n            }\n        }\n \
    \       return factors;\n    }\n    public static void main(String[] args) {\n\
    \    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long factor\
    \ = 2;\n        while (n > 1) {\n            while (n % factor == 0) {\n     \
    \           factors.add(factor);\n                n /= factor;\n            }\n\
    \            factor++;\n        }\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> ret = new ArrayList<Long>();\n        if (n<=1) {\n \
    \           return ret;\n        }\n        int i=2;\n        while (i*i<=n) {\n\
    \            while (n%i==0) {\n                ret.add((long)i);\n           \
    \     n /= i;\n            }\n            i += 1;\n        }\n        if (n>1)\
    \ {\n            ret.add(n);\n        }\n        return ret;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        if (n > 0)\
    \ {\n            while (n % 2 == 0) {\n                factors.add(2l);\n    \
    \            n /= 2;\n            }\n            for (long i = 3; i <= Math.sqrt(n);\
    \ i += 2) {\n                while (n % i == 0) {\n                    factors.add(i);\n\
    \                    n /= i;\n                }\n            }\n            if\
    \ (n > 2) {\n                factors.add(n);\n            }\n        }\n     \
    \   return factors;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> ret = new ArrayList<Long>();\n        while (n > 1) {\n\
    \            for (long i = 2; i < n; i++) {\n                if (n % i == 0) {\n\
    \                    ret.add(i);\n                    n /= i;\n              \
    \      break;\n                }\n            }\n        }\n        return ret;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011292
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        // Your code here\n        ArrayList<Long> ret = new ArrayList<Long>();\n\
    \        for (long i = 2; i <= n; i++) {\n            while (n % i == 0) {\n \
    \               ret.add(i);\n                n /= i;\n            }\n        }\n\
    \        return ret;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        if (n <= 1) return new ArrayList<Long>();\n        if (n == 2) return\
    \ new ArrayList<Long>(Arrays.asList((long)2l));\n        ArrayList<Long> factors\
    \ = new ArrayList<Long>();\n        for (long i = 2; i * i <= n; i++) {\n    \
    \        while (n % i == 0) {\n                factors.add(i);\n             \
    \   n /= i;\n            }\n        }\n        if (n > 1) factors.add(n);\n  \
    \      return factors;\n    }\n    public static void main(String[] args) {\n\
    \    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        if (n == 0) {\n            return new ArrayList<Long>();\n        }\n\
    \        ArrayList<Long> res = new ArrayList<Long>();\n        while (n % 2 ==\
    \ 0) {\n            res.add(2l);\n            n /= 2;\n        }\n        long\
    \ factor = 3;\n        while (factor * factor <= n) {\n            if (n % factor\
    \ == 0) {\n                res.add(factor);\n                n /= factor;\n  \
    \          } else {\n                factor += 2;\n            }\n        }\n\
    \        if (n > 1) {\n            res.add(n);\n        }\n        return res;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        if (n <= 2) {\n            return new ArrayList<Long>(Arrays.asList(n));\n\
    \        }\n        ArrayList<Long> out = new ArrayList<Long>();\n        Long\
    \ cur = 2l;\n        while (n > 1) {\n            if (n % cur == 0) {\n      \
    \          out.add(cur);\n                n /= cur;\n            } else {\n  \
    \              cur += 1;\n            }\n        }\n        return out;\n    }\n\
    \    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011284
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        long a = 2;\n        ArrayList<Long> factors = new ArrayList<Long>();\n\
    \        while (n > 1) {\n            while (n % a == 0) {\n                factors.add(a);\n\
    \                n /= a;\n            }\n            a += 1;\n        }\n    \
    \    return factors;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> f = new ArrayList<Long>();\n        if(n == 1)\n    \
    \        return f;\n        for(long i = 2; i <= Math.sqrt(n); i++) {\n      \
    \      if(n % i == 0) {\n                f.add(i);\n                f.addAll(factorize(n\
    \ / i));\n                return f;\n            }\n        }\n        f.add(n);\n\
    \        return f;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011288
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> r = new ArrayList<Long>();\n        for (long p = 2;\
    \ p * p <= n; p++) {\n            while (n % p == 0) {\n                r.add(p);\n\
    \                n /= p;\n            }\n        }\n        if (n > 1) {\n   \
    \         r.add(n);\n        }\n        return r;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011288
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 1)\n     \
    \       factors.add(n);\n        return factors;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011288
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        if (n < 0)\
    \ {\n            factors.add((long) -1l);\n            n = -n;\n        }\n  \
    \      int root = (int) Math.sqrt(n);\n        for (int i = 2; i <= root; i++)\
    \ {\n            while (n % i == 0) {\n                factors.add((long) i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 1) {\n   \
    \         factors.add(n);\n        }\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011288
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        while(n % 2\
    \ == 0) {\n            factors.add(2l);\n            n /= 2;\n        }\n    \
    \    for(long i = 3; i <= Math.sqrt(n); i += 2) {\n            while(n % i ==\
    \ 0) {\n                factors.add(i);\n                n /= i;\n           \
    \ }\n        }\n        if(n > 2) factors.add(n);\n        return factors;\n \
    \   }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011288
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        while (n >\
    \ 1) {\n            long f = findSmallestPrimeFactor(n);\n            n /= f;\n\
    \            factors.add(f);\n        }\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpwtd0pw28.java:21: error: cannot find symbol\n            long f\
    \ = findSmallestPrimeFactor(n);\n                     ^\n  symbol:   method findSmallestPrimeFactor(long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011288
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> ret = new ArrayList<Long>();\n        long d = 2;\n \
    \       while (n > 1) {\n            while (n % d == 0) {\n                ret.add(d);\n\
    \                n /= d;\n            }\n            d++;\n        }\n       \
    \ return ret;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011288
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011284
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> a = new ArrayList<Long>();\n        long i = 2;\n   \
    \     while (n > 1) {\n            while (n % i == 0) {\n                a.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return a;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011288
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> p = new ArrayList<Long>();\n        long x = n;\n   \
    \     for (long i = 2; i <= n; i++) {\n            while (x % i == 0) {\n    \
    \            p.add(i);\n                x /= i;\n            }\n        }\n  \
    \      return p;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011289
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long ncopy\
    \ = n;\n        long i = 2;\n        while (ncopy > 1) {\n            while (ncopy\
    \ % i == 0) {\n                factors.add(i);\n                ncopy /= i;\n\
    \            }\n            i++;\n        }\n        return factors;\n    }\n\
    \    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011288
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> res = new ArrayList<Long>();\n        long d = 2;\n \
    \       while (n > 1) {\n            while (n % d == 0) {\n                res.add(d);\n\
    \                n /= d;\n            }\n            d++;\n        }\n       \
    \ return res;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011289
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> res = new ArrayList<Long>();\n        long a = 2;\n \
    \       while (n > 1) {\n            while (n % a == 0) {\n                res.add(a);\n\
    \                n /= a;\n            }\n            a++;\n        }\n       \
    \ return res;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011289
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        // Remove the following line once you finish writing this function\n\
    \        return new ArrayList<Long>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3z4058bi.java:23)\n"
  stdout: ''
  timestamp: 1660011289
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> res = new ArrayList<Long>();\n        while(n > 1) {\n\
    \            long i = 2;\n            while(i <= n) {\n                if(n %\
    \ i == 0) {\n                    res.add(i);\n                    n /= i;\n  \
    \                  break;\n                }\n                i += 1;\n      \
    \      }\n        }\n        return res;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011289
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long lim =\
    \ (long)Math.sqrt(n) + 1;\n        for (long i = 2; i <= lim; i++) {\n       \
    \     while (n % i == 0) {\n                factors.add(i);\n                n\
    \ /= i;\n            }\n        }\n        if (n > 1) factors.add(n);\n      \
    \  return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011288
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        // List of factors\n        ArrayList<Long> factors = new ArrayList<Long>();\n\
    \        // Keep dividing by 2 until it is not divisible by 2\n        while (n\
    \ % 2 == 0) {\n            factors.add((long)2l);\n            n /= 2;\n     \
    \   }\n        // A number is either divisible by 2 or an odd number\n       \
    \ // So we consider only odd numbers starting from 3\n        // Till the sqrt\
    \ of n because n = a * b, thus a, b <= sqrt(n)\n        for (long i = 3; i <=\
    \ Math.sqrt(n); i += 2) {\n            // Keep dividing by i until it is not divisible\
    \ by i\n            while (n % i == 0) {\n                factors.add(i);\n  \
    \              n /= i;\n            }\n        }\n        // If there is still\
    \ a number in n left it means it was prime\n        if (n > 2) {\n           \
    \ factors.add(n);\n        }\n        return factors;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011289
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> primes = new ArrayList<Long>();\n        while(n%2 ==\
    \ 0) {\n            primes.add((long)2l);\n            n = n/2;\n        }\n \
    \       for(long i = 3; i <= Math.sqrt(n); i+=2) {\n            while(n%i == 0)\
    \ {\n                primes.add(i);\n                n = n/i;\n            }\n\
    \        }\n        if(n > 2) {\n            primes.add(n);\n        }\n     \
    \   return primes;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011289
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        while (n %\
    \ 2 == 0) {\n            factors.add(2l);\n            n /= 2;\n        }\n  \
    \      // n must be odd at this point.  So we can skip one element (Note i = i\
    \ +2)\n        for (long i = 3; i <= Math.sqrt(n); i += 2) {\n            // While\
    \ i divides n, print i and divide n\n            while (n % i == 0) {\n      \
    \          factors.add(i);\n                n /= i;\n            }\n        }\n\
    \        // This condition is to handle the case when n is a prime number greater\
    \ than 2\n        if (n > 2) {\n            factors.add(n);\n        }\n     \
    \   return factors;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011289
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                result.add(i);\n\
    \                n /= i;\n            }\n        }\n        return result;\n \
    \   }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011282
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> ret = new ArrayList<Long>();\n        while (n % 2 ==\
    \ 0) {\n            ret.add(2l);\n            n /= 2;\n        }\n        for\
    \ (long x = 3; x * x <= n; x += 2) {\n            while (n % x == 0) {\n     \
    \           ret.add(x);\n                n /= x;\n            }\n        }\n \
    \       if (n > 1) {\n            ret.add(n);\n        }\n        return ret;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011289
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        while (n %\
    \ 2 == 0) {\n            factors.add(2l);\n            n /= 2;\n        }\n  \
    \      for (long i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i\
    \ == 0) {\n                factors.add(i);\n                n /= i;\n        \
    \    }\n        }\n        if (n > 2) {\n            factors.add(n);\n       \
    \ }\n        return factors;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011289
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        while (n >\
    \ 1) {\n            for (long i = 2; i <= n; i++) {\n                if (n % i\
    \ == 0) {\n                    factors.add(i);\n                    n /= i;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return factors;\n    }\n    public static void main(String[] args) {\n \
    \   assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011282
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long factor\
    \ = 2; factor <= n; factor++) {\n            while (n % factor == 0) {\n     \
    \           factors.add(factor);\n                n /= factor;\n            }\n\
    \        }\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011285
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> ret = new ArrayList<Long>();\n        long m = n;\n \
    \       for (long i = 2; i * i <= m; i++) {\n            if (m % i == 0) {\n \
    \               int cnt = 0;\n                while (m % i == 0) {\n         \
    \           m /= i;\n                    cnt++;\n                }\n         \
    \       while (cnt > 0) {\n                    ret.add(i);\n                 \
    \   cnt--;\n                }\n            }\n        }\n        if (m > 1) {\n\
    \            ret.add(m);\n        }\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011289
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> out = new ArrayList<Long>();\n        while (n > 1) {\n\
    \            long divisor = 2;\n            while (n % divisor != 0) divisor++;\n\
    \            out.add(divisor);\n            n /= divisor;\n        }\n       \
    \ return out;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011289
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> res = new ArrayList<Long>();\n        for (long i = 2;\
    \ i <= n; i++) {\n            while (n % i == 0) {\n                res.add(i);\n\
    \                n /= i;\n            }\n        }\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011285
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> res = new ArrayList<Long>();\n        if (n == 1) {\n\
    \            res.add(1l);\n            return res;\n        }\n        long d\
    \ = 2;\n        while (n > 1) {\n            while (n % d == 0) {\n          \
    \      res.add(d);\n                n /= d;\n            }\n            d += 1;\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011290
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        long left_to_test = n;\n        long current_prime = 2;\n        ArrayList<Long>\
    \ prime_factors = new ArrayList<Long>();\n        while (left_to_test > 1) {\n\
    \            if (left_to_test % current_prime == 0) {\n                prime_factors.add(current_prime);\n\
    \                left_to_test /= current_prime;\n            } else {\n      \
    \          current_prime += 1;\n            }\n        }\n        return prime_factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011290
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        if (n <= 1) {\n            throw new IllegalArgumentException(\"Only\
    \ positive integers can be factorized\");\n        }\n        // build a list\
    \ of factors in the right order\n        // we stop at sqrt(n) as all factors\
    \ beyond that point are accounted for by the smaller factors\n        List<Long>\
    \ factors = new ArrayList<Long>();\n        for (long i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        // n is now the largest\
    \ prime factor, because if n was not prime, then it would have been broken down\
    \ into smaller factors by the loop above\n        factors.add(n);\n        return\
    \ new ArrayList<Long>(factors);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmlxjdikp.java:37)\n"
  stdout: ''
  timestamp: 1660011290
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> primeFactors = new ArrayList<Long>();\n        for (long\
    \ i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                primeFactors.add(i);\n\
    \                n /= i;\n                i--;\n            }\n        }\n   \
    \     if (n > 1) {\n            primeFactors.add(n);\n        }\n        return\
    \ primeFactors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011290
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        // your code here\n        ArrayList<Long> factors = new ArrayList<Long>();\n\
    \        while (n > 1) {\n            int count = 0;\n            for (long i\
    \ = 2; i <= n; i++) {\n                if (n % i == 0) {\n                   \
    \ n /= i;\n                    count++;\n                }\n            }\n  \
    \          factors.add((long)count);\n        }\n        return factors;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprcvmw_i0.java:34)\n"
  stdout: ''
  timestamp: 1660011290
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        return new ArrayList<Long>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprpt_s5q6.java:22)\n"
  stdout: ''
  timestamp: 1660011290
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        while (n %\
    \ 2 == 0) {\n            factors.add(2l);\n            n /= 2;\n        }\n  \
    \      for (long i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i\
    \ == 0) {\n                factors.add(i);\n                n /= i;\n        \
    \    }\n        }\n        if (n > 2)\n            factors.add(n);\n        return\
    \ factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011290
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        return new ArrayList<Long>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprpt_s5q6.java:22)\n"
  stdout: ''
  timestamp: 1660011290
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        if (n==1) {\n            return new ArrayList<Long>();\n        }\n \
    \       ArrayList<Long> factors = new ArrayList<Long>();\n        long x = n;\n\
    \        for (long i=2; i*i<=x; i++) {\n            while (x%i==0) {\n       \
    \         factors.add(i);\n                x = x/i;\n            }\n        }\n\
    \        if (x>1) {\n            factors.add(x);\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011290
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011284
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        return null;\n    }\n    public static void main(String[] args) {\n \
    \   assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.factorize(long)\"\
    \ is null\n\tat Problem.main(tmp_u62qsu9.java:22)\n"
  stdout: ''
  timestamp: 1660011284
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        if (n <= 1) {\n            return new ArrayList<Long>();\n        }\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long d = 2;\n\
    \        while (n > 1) {\n            while (n % d == 0) {\n                factors.add(d);\n\
    \                n /= d;\n            }\n            d += 1;\n        }\n    \
    \    return factors;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011290
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011284
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        if (n < 2)\
    \ {\n            return factors;\n        }\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                factors.add(i);\n   \
    \             n /= i;\n                i = 1;\n            }\n        }\n    \
    \    return factors;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011290
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> result = new ArrayList<Long>();\n        for (long d\
    \ = 2; d * d <= n; d++) {\n            while (n % d == 0) {\n                result.add(d);\n\
    \                n /= d;\n            }\n        }\n        if (n > 1) {\n   \
    \         result.add(n);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011290
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> res = new ArrayList<Long>();\n        while (n%2 == 0)\
    \ {\n            res.add((long)2l);\n            n /= 2;\n        }\n        for\
    \ (long i = 3; i*i <= n; i += 2) {\n            while (n%i == 0) {\n         \
    \       res.add(i);\n                n /= i;\n            }\n        }\n     \
    \   if (n > 2) {\n            res.add(n);\n        }\n        return res;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011290
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> result = new ArrayList<Long>();\n        while (n % 2\
    \ == 0) {\n            result.add(2l);\n            n /= 2;\n        }\n     \
    \   for (long i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i ==\
    \ 0) {\n                result.add(i);\n                n /= i;\n            }\n\
    \        }\n        if (n > 2) {\n            result.add(n);\n        }\n    \
    \    return result;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011290
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        if (n == 1) {\n            return new ArrayList<Long>();\n        }\n\
    \        if (n % 2 == 0) {\n            ArrayList<Long> ret = factorize(n / 2);\n\
    \            ret.add((long)2l);\n            return ret;\n        }\n        for\
    \ (long i = 3; i <= Math.floor(Math.sqrt(n)); i += 2) {\n            if (n % i\
    \ == 0) {\n                ArrayList<Long> ret = factorize(n / i);\n         \
    \       ret.add(i);\n                return ret;\n            }\n        }\n \
    \       ArrayList<Long> ret = new ArrayList<Long>();\n        ret.add(n);\n  \
    \      return ret;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp70uty8s7.java:42)\n"
  stdout: ''
  timestamp: 1660011290
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> res = new ArrayList<Long>();\n        while (n % 2 ==\
    \ 0) {\n            res.add(2l);\n            n /= 2;\n        }\n        int\
    \ i = 3;\n        while (i <= Math.sqrt(n)) {\n            while (n % i == 0)\
    \ {\n                res.add((long)i);\n                n /= i;\n            }\n\
    \            i += 2;\n        }\n        if (n > 2) {\n            res.add(n);\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011290
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> ret = new ArrayList<Long>();\n        for (long i = 2;\
    \ i <= n; i++) {\n            while (n % i == 0) {\n                ret.add(i);\n\
    \                n /= i;\n            }\n        }\n        return ret;\n    }\n\
    \    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011284
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> result = new ArrayList<Long>();\n        long cn = n;\n\
    \        for (long i = 2; i <= cn; ++i) {\n            while (cn % i == 0) {\n\
    \                result.add(i);\n                cn /= i;\n            }\n   \
    \     }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011290
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> result = new ArrayList<Long>();\n        long temp =\
    \ n;\n        while (temp % 2 == 0) {\n            result.add((long)2l);\n   \
    \         temp /= 2;\n        }\n        for (long i = 3; i <= Math.sqrt(temp);\
    \ i += 2) {\n            while (temp % i == 0) {\n                result.add(i);\n\
    \                temp /= i;\n            }\n        }\n        if (temp > 2) {\n\
    \            result.add(temp);\n        }\n        return result;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011290
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factored = new ArrayList<Long>();\n        long m = n;\n\
    \        while (m % 2 == 0) {\n            factored.add(2l);\n            m /=\
    \ 2;\n        }\n        for (long i = 3; i <= Math.sqrt(m); i += 2) {\n     \
    \       while (m % i == 0) {\n                factored.add(i);\n             \
    \   m /= i;\n            }\n        }\n        if (m > 2) {\n            factored.add(m);\n\
    \        }\n        return factored;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011290
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        // Add your\
    \ code here\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg150cg25.java:24)\n"
  stdout: ''
  timestamp: 1660011290
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> res = new ArrayList<Long>();\n        for (long f = 2;\
    \ f * f <= n; f++) {\n            while (n % f == 0) {\n                res.add(f);\n\
    \                n /= f;\n            }\n        }\n        if (n > 1) {\n   \
    \         res.add(n);\n        }\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011290
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        return new ArrayList<Long>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprpt_s5q6.java:22)\n"
  stdout: ''
  timestamp: 1660011290
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 1) {\n   \
    \         factors.add(n);\n        }\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011282
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        throw new UnsupportedOperationException(\"Problem factorize is not yet\
    \ implemented\");\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Problem\
    \ factorize is not yet implemented\n\tat Problem.factorize(tmp4nq2mt2n.java:19)\n\
    \tat Problem.main(tmp4nq2mt2n.java:22)\n"
  stdout: ''
  timestamp: 1660011291
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        Long copy =\
    \ new Long(n);\n        for (long i = 2; i <= copy; i++) {\n            while\
    \ (copy % i == 0) {\n                factors.add(i);\n                copy /=\
    \ i;\n            }\n        }\n        return factors;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011291
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> res = new ArrayList<Long>();\n        while(n % 2 ==\
    \ 0) {\n            res.add((long)2l);\n            n /= 2;\n        }\n     \
    \   for(long i = 3; i <= Math.sqrt(n); i += 2) {\n            while(n % i == 0)\
    \ {\n                res.add(i);\n                n /= i;\n            }\n   \
    \     }\n        if(n > 2) {\n            res.add(n);\n        }\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011291
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        if (n <= 1)\
    \ {\n            return factors;\n        }\n        long i = 2;\n        while\
    \ (n != 1) {\n            if (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            } else {\n                i++;\n       \
    \     }\n        }\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011291
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        return factorizeHelper(n, (long)2l);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpgrtuyxbo.java:19: error: cannot find symbol\n        return factorizeHelper(n,\
    \ (long)2l);\n               ^\n  symbol:   method factorizeHelper(long,long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011291
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        if (n <= 1) {\n            return new ArrayList<Long>();\n        }\n\
    \        ArrayList<Long> res = new ArrayList<Long>();\n        for (long i = 2;\
    \ i <= n; i++) {\n            while (n % i == 0) {\n                res.add(i);\n\
    \                n /= i;\n            }\n        }\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011291
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        long num = n;\n        ArrayList<Long> factors = new ArrayList<Long>();\n\
    \        for (long d = 2; d <= num; d++) {\n            while (num % d == 0) {\n\
    \                factors.add(d);\n                num /= d;\n            }\n \
    \       }\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011291
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> ans = new ArrayList<Long>();\n        while (n % 2 ==\
    \ 0) {\n            ans.add((long)2l);\n            n /= 2;\n        }\n     \
    \   long i = 3;\n        while (i * i <= n) {\n            while (n % i == 0)\
    \ {\n                ans.add(i);\n                n /= i;\n            }\n   \
    \         i += 2;\n        }\n        if (n > 1) {\n            ans.add(n);\n\
    \        }\n        return ans;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011291
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011284
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> ret = new ArrayList<Long>();\n        for (long i = 2;\
    \ i <= n; ++i) {\n            long cur = i;\n            for (long j = 2; j <=\
    \ cur; ++j) {\n                if (cur % j == 0) {\n                    while\
    \ (cur % j == 0) {\n                        cur /= j;\n                      \
    \  ret.add(j);\n                    }\n                }\n            }\n    \
    \    }\n        return ret;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw3jf0xyc.java:35)\n"
  stdout: ''
  timestamp: 1660011292
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        while (n %\
    \ 2 == 0) {\n            factors.add(2l);\n            n /= 2;\n        }\n  \
    \      for (long i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i\
    \ == 0) {\n                factors.add(i);\n                n /= i;\n        \
    \    }\n        }\n        if (n > 2) {\n            factors.add(n);\n       \
    \ }\n        return factors;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011289
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long p\
    \ = 2; p*p <= n; p++) {\n            while (n % p == 0) {\n                factors.add(p);\n\
    \                n /= p;\n            }\n        }\n        if (n > 1) {\n   \
    \         factors.add(n);\n        }\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011292
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> res = new ArrayList<Long>();\n        while (n % 2 ==\
    \ 0) {\n            res.add(2l);\n            n /= 2;\n        }\n        while\
    \ (n % 3 == 0) {\n            res.add(3l);\n            n /= 3;\n        }\n \
    \       while (n % 5 == 0) {\n            res.add(5l);\n            n /= 5;\n\
    \        }\n        for (long p = 7; p <= n; p += 2) {\n            if (isPrime(p))\
    \ {\n                while (n % p == 0) {\n                    res.add(p);\n \
    \                   n /= p;\n                }\n            }\n        }\n   \
    \     return res;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkuux_50y.java:33: error: cannot find symbol\n            if (isPrime(p))\
    \ {\n                ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011291
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> res = new ArrayList<Long>();\n        for (long i = 2;\
    \ i * i <= n; i++) {\n            while (n % i == 0) {\n                res.add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 1)\n     \
    \       res.add(n);\n        return res;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011282
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factorization = new ArrayList<Long>();\n        for (long\
    \ i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factorization.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factorization;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011292
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        while (n%2\
    \ == 0) {\n            factors.add(2l);\n            n = n/2;\n        }\n   \
    \     for (long i = 3; i <= Math.sqrt(n); i+=2) {\n            while (n%i == 0)\
    \ {\n                factors.add(i);\n                n = n/i;\n            }\n\
    \        }\n        if (n > 2) {\n            factors.add(n);\n        }\n   \
    \     return factors;\n    }\n    public static void main(String[] args) {\n \
    \   assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011292
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        // You code here\n        return null;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.factorize(long)\"\
    \ is null\n\tat Problem.main(tmpvf8h_9rk.java:23)\n"
  stdout: ''
  timestamp: 1660011292
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> res = new ArrayList<Long>();\n        while (n % 2 ==\
    \ 0) {\n            res.add(2l);\n            n /= 2;\n        }\n        for\
    \ (long i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n\
    \                res.add(i);\n                n /= i;\n            }\n       \
    \ }\n        if (n > 2) {\n            res.add(n);\n        }\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011284
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        if (n < 1)\
    \ {\n            throw new ArithmeticException(\"Cannot factorize negative numbers\
    \ or zero\");\n        }\n        // create a copy of number, because we will\
    \ mutate it\n        long m = n;\n        for (long i = 2; i * i <= m; i++) {\n\
    \            while (m % i == 0) {\n                factors.add(i);\n         \
    \       m /= i;\n            }\n        }\n        if (m > 1) {\n            factors.add(m);\n\
    \        }\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011292
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> list = new ArrayList<Long>();\n        for (long i =\
    \ 2; i*i <= n; i++) {\n            while (n % i == 0) {\n                list.add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 1) {\n   \
    \         list.add(n);\n        }\n        return list;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011292
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> ret = new ArrayList<Long>();\n        long i = 2;\n \
    \       while (n > 1) {\n            while (n % i == 0) {\n                ret.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return ret;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011292
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        return null;\n    }\n    public static void main(String[] args) {\n \
    \   assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.factorize(long)\"\
    \ is null\n\tat Problem.main(tmp_u62qsu9.java:22)\n"
  stdout: ''
  timestamp: 1660011284
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        // Write your code here.\n        ArrayList<Long> factors = new ArrayList<Long>();\n\
    \        if (n < 2) {\n            return factors;\n        }\n        while (n\
    \ % 2 == 0) {\n            factors.add(2l);\n            n /= 2;\n        }\n\
    \        long limit = (long)Math.sqrt(n);\n        for (long i = 3; i <= limit;\
    \ i += 2) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 2) {\n   \
    \         factors.add(n);\n        }\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011292
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011284
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> res = new ArrayList<Long>();\n        while (n % 2 ==\
    \ 0) {\n            res.add(2l);\n            n /= 2;\n        }\n        for\
    \ (long i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n\
    \                res.add(i);\n                n /= i;\n            }\n       \
    \ }\n        if (n > 2)\n            res.add(n);\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011292
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long last =\
    \ 1;\n        while (last != n) {\n            last = n;\n            for (long\
    \ d = 2; d <= n; d++) {\n                if (n % d == 0) {\n                 \
    \   factors.add(d);\n                    n /= d;\n                    break;\n\
    \                }\n            }\n        }\n        return factors;\n    }\n\
    \    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011292
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long d = 2;\n\
    \        while (n > 1) {\n            while (n % d == 0) {\n                factors.add(d);\n\
    \                n /= d;\n            }\n            d += 1;\n        }\n    \
    \    return factors;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011292
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> l = new ArrayList<Long>();\n        for (long d = 2;\
    \ d * d <= n; d++) {\n            while (n % d == 0) {\n                l.add(d);\n\
    \                n /= d;\n            }\n        }\n        if (n > 1) {\n   \
    \         l.add(n);\n        }\n        return l;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011292
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factorization = new ArrayList<Long>();\n        for (long\
    \ i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factorization.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factorization;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011292
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long p = 2;\n\
    \        while (n > 1) {\n            while (n % p == 0) {\n                factors.add(p);\n\
    \                n /= p;\n            }\n            p++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011292
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> result = new ArrayList<Long>();\n        while (n%2==0)\
    \ {result.add(2l); n /= 2;}\n        while (n%3==0) {result.add(3l); n /= 3;}\n\
    \        while (n%5==0) {result.add(5l); n /= 5;}\n        for (long p = 7; p*p\
    \ <= n; p += 2) {\n            while (n%p==0) {result.add(p); n /= p;}\n     \
    \   }\n        if (n > 1) result.add(n);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011293
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long orig =\
    \ n;\n        for (long i = 2; i * i <= n; i++) {\n            int count = 0;\n\
    \            while (n % i == 0) {\n                count++;\n                n\
    \ /= i;\n            }\n            if (count > 0) {\n                for (int\
    \ j = 0; j < count; j++) {\n                    factors.add(i);\n            \
    \    }\n            }\n        }\n        if (n > 1) {\n            factors.add(n);\n\
    \        }\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011293
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> answer = new ArrayList<Long>();\n        for (long i\
    \ = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n                answer.add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 1) {\n   \
    \         answer.add(n);\n        }\n        return answer;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011293
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> result = new ArrayList<Long>();\n        while (n % 2\
    \ == 0) {\n            result.add(2l);\n            n /= 2;\n        }\n     \
    \   for (long i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i ==\
    \ 0) {\n                result.add(i);\n                n /= i;\n            }\n\
    \        }\n        if (n > 2) {\n            result.add(n);\n        }\n    \
    \    return result;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011290
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> r = new ArrayList<Long>();\n        for (long p : primes(n))\
    \ {\n            while (n % p == 0) {\n                r.add(p);\n           \
    \     n /= p;\n            }\n        }\n        return r;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpgf4759vh.java:20: error: cannot find symbol\n        for (long\
    \ p : primes(n)) {\n                      ^\n  symbol:   method primes(long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011293
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> result = new ArrayList<Long>();\n        while (n % 2\
    \ == 0) {\n            result.add(2l);\n            n /= 2;\n        }\n     \
    \   for (long i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i ==\
    \ 0) {\n                result.add(i);\n                n /= i;\n            }\n\
    \        }\n        if (n > 2) {\n            result.add(n);\n        }\n    \
    \    return result;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011290
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        while (n %\
    \ 2 == 0) {\n            factors.add(2l);\n            n /= 2;\n        }\n  \
    \      for (long i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i\
    \ == 0) {\n                factors.add(i);\n                n /= i;\n        \
    \    }\n        }\n        if (n > 2) {\n            factors.add(n);\n       \
    \ }\n        return factors;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011289
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> ret = new ArrayList<Long>();\n        for (long i = 2;\
    \ i * i <= n; i++) {\n            while (n % i == 0) {\n                ret.add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 1)\n     \
    \       ret.add(n);\n        return ret;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011282
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long x = 2;\n\
    \        while (n > 1) {\n            if (n % x == 0) {\n                factors.add(x);\n\
    \                n /= x;\n            } else {\n                x++;\n       \
    \     }\n        }\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011293
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        if (n == 0)\
    \ {\n            return factors;\n        }\n        for (long i = 2; i <= n;\
    \ i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011293
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> res = new ArrayList<Long>();\n        for (long p : primes)\
    \ {\n            while (n % p == 0) {\n                res.add(p);\n         \
    \       n /= p;\n            }\n        }\n        return res;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpoo8yltyd.java:20: error: cannot find symbol\n        for (long\
    \ p : primes) {\n                      ^\n  symbol:   variable primes\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011293
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> ans = new ArrayList<Long>();\n        if(n==1) ans.add(1l);\n\
    \        for(long i=2;i<=n;i++) {\n            if(n%i==0) {\n                ans.add(i);\n\
    \                return ArrayUtils.concat(ans, factorize(n/i));\n            }\n\
    \        }\n        return ans;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmprpdj5usy.java:24: error: cannot find symbol\n                return\
    \ ArrayUtils.concat(ans, factorize(n/i));\n                       ^\n  symbol:\
    \   variable ArrayUtils\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011293
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011284
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long copyOfInput\
    \ = n;\n        for (long i = 2; i <= copyOfInput; i++) {\n            if (copyOfInput\
    \ % i == 0) {\n                factors.add(i);\n                copyOfInput /=\
    \ i;\n                i--;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011293
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> res = new ArrayList<Long>();\n        for (long f = 2;\
    \ f * f <= n; f++) {\n            if (n % f == 0) {\n                while (n\
    \ % f == 0) {\n                    res.add(f);\n                    n /= f;\n\
    \                }\n            }\n        }\n        if (n > 1) {\n         \
    \   res.add(n);\n        }\n        return res;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011293
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        int cnt = 0;\n\
    \        while (n % 2 == 0) {\n            cnt++;\n            n /= 2;\n     \
    \   }\n        for (int i = 0; i < cnt; i++) {\n            factors.add(2l);\n\
    \        }\n        for (long i = 3; i * i <= n; i += 2) {\n            cnt =\
    \ 0;\n            while (n % i == 0) {\n                cnt++;\n             \
    \   n /= i;\n            }\n            for (int j = 0; j < cnt; j++) {\n    \
    \            factors.add(i);\n            }\n        }\n        if (n > 2) {\n\
    \            factors.add(n);\n        }\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011293
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> res = new ArrayList<Long>();\n        long d = 2;\n \
    \       while (n > 1) {\n            while (n % d == 0) {\n                res.add(d);\n\
    \                n /= d;\n            }\n            d += 1;\n        }\n    \
    \    return res;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011293
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> result = new ArrayList<Long>();\n        for (long d\
    \ = 2; d <= n; d++) {\n            while (n % d == 0) {\n                result.add(d);\n\
    \                n /= d;\n            }\n        }\n        return result;\n \
    \   }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011293
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> results = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                results.add(i);\n\
    \                n /= i;\n            }\n        }\n        return results;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011293
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i\
    \ = 2; i*i <= n; i++) {\n            while (n % i == 0) {\n                result.add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 1) {\n   \
    \         result.add(n);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011293
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> ans = new ArrayList<Long>();\n        while (n % 2 ==\
    \ 0) {\n            ans.add(2l);\n            n /= 2;\n        }\n        for\
    \ (long i = 3; i * i <= n; i += 2) {\n            while (n % i == 0) {\n     \
    \           ans.add(i);\n                n /= i;\n            }\n        }\n \
    \       if (n > 2) {\n            ans.add(n);\n        }\n        return ans;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011293
