name: HumanEval_160_do_algebra
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given two array lists operator, and operand. The first array\
  \ list has basic algebra operations, and \n    // the second array list is an array\
  \ array list of integers. Use the two given array lists to build the algebric \n\
  \    // expression and return the evaluation of this expression.\n    // The basic\
  \ algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    //\
  \ Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation (\
  \ ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list\
  \ = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n\
  \    // The length of operator array list is equal to the length of operand array\
  \ list minus one.\n    // Operand is an array array list of of non-negative integers.\n\
  \    // Operator array list has at least one operator, and operand array list has\
  \ at least two operands.\n    public static long doAlgebra(ArrayList<String> op,\
  \ ArrayList<Long> operand) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
  \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))),\
  \ (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
  \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
  +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
  \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
  //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l))))\
  \ == (8l));\n    }\n\n}\n"
completions: ["        if (op.size() != operand.size() - 1)\n            throw new\
    \ RuntimeException(\"Operator's size must be equal to Operand's size minus one\"\
    );\n        if (op.size() == 0)\n            throw new RuntimeException(\"Operator's\
    \ size must be greater than zero\");\n        if (operand.size() == 0)\n     \
    \       throw new RuntimeException(\"Operand's size must be greater than zero\"\
    );\n        if (operand.size() == 1)\n            return operand.get(0);\n   \
    \     long result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
    \ {\n            long r = operand.get(i + 1);\n            if (op.get(i).equals(\"\
    +\"))\n                result += r;\n            else if (op.get(i).equals(\"\
    -\"))\n                result -= r;\n            else if (op.get(i).equals(\"\
    *\"))\n                result *= r;\n            else if (op.get(i).equals(\"\
    /\"))\n                result /= r;\n            else if (op.get(i).equals(\"\
    ^\"))\n                result = (long) Math.pow(result, r);\n            else\n\
    \                throw new RuntimeException(\"Unknown operator: \" + op.get(i));\n\
    \        }\n        return result;", "        long res = operand.get(0);\n   \
    \     for (int i = 0; i < op.size(); i++) {\n            long num = operand.get(i\
    \ + 1);\n            switch (op.get(i)) {\n                case \"+\":\n     \
    \               res += num;\n                    break;\n                case\
    \ \"-\":\n                    res -= num;\n                    break;\n      \
    \          case \"*\":\n                    res *= num;\n                    break;\n\
    \                case \"//\":\n                    res /= num;\n             \
    \       break;\n                case \"**\":\n                    res = (long)\
    \ Math.pow(res, num);\n                    break;\n            }\n        }\n\
    \        return res;", "        long result = operand.get(0);\n        for (int\
    \ i = 0; i < op.size(); i++) {\n            switch (op.get(i)) {\n           \
    \     case \"+\":\n                    result += operand.get(i + 1);\n       \
    \             break;\n                case \"-\":\n                    result\
    \ -= operand.get(i + 1);\n                    break;\n                case \"\
    *\":\n                    result *= operand.get(i + 1);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i + 1);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long) Math.pow(result, operand.get(i + 1));\n                   \
    \ break;\n            }\n        }\n        return result;", '        return -1;',
  "        // Write your code here\n        // To print results to the standard output\
    \ you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        long ans = operand.get(0);\n        for(int i = 0; i\
    \ < op.size(); i++) {\n            if(op.get(i).equals(\"+\")) {\n           \
    \     ans += operand.get(i+1);\n            } else if(op.get(i).equals(\"-\"))\
    \ {\n                ans -= operand.get(i+1);\n            } else if(op.get(i).equals(\"\
    *\")) {\n                ans *= operand.get(i+1);\n            } else if(op.get(i).equals(\"\
    //\")) {\n                ans /= operand.get(i+1);\n            } else if(op.get(i).equals(\"\
    **\")) {\n                ans = (long)Math.pow(ans, operand.get(i+1));\n     \
    \       }\n        }\n        return ans;", "        // Write your code here\n\
    \        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        operand.remove(0);\n        for(int i = 0; i < op.size();\
    \ i++){\n            switch(op.get(i)){\n                case \"+\":\n       \
    \             result += operand.get(i);\n                    break;\n        \
    \        case \"-\":\n                    result -= operand.get(i);\n        \
    \            break;\n                case \"*\":\n                    result *=\
    \ operand.get(i);\n                    break;\n                case \"//\":\n\
    \                    result /= operand.get(i);\n                    break;\n \
    \               case \"**\":\n                    result = (long)Math.pow(result,\
    \ operand.get(i));\n                    break;\n            }\n        }\n   \
    \     return result;", "        long result = operand.get(0);\n        for (int\
    \ i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n \
    \               result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;", "        long result = operand.get(0);\n\
    \        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) {\n                result += operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"-\")) {\n                result -= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"*\")) {\n                result *=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"//\")) {\n  \
    \              result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    **\")) {\n                result = (long) Math.pow(result, operand.get(i + 1));\n\
    \            }\n        }\n        return result;", '        throw new UnsupportedOperationException("Waiting
    to be implemented.");', '        return -1;', "        // Your code goes here.\n\
    \        // System.out.println(op);\n        // System.out.println(operand);\n\
    \        int n = op.size();\n        boolean[][] reachable = new boolean[n][n];\n\
    \        int[][] value = new int[n][n];\n        boolean[][] processed = new boolean[n][n];\n\
    \        for (int i = 0; i < n; i++) {\n            reachable[i][i] = true;\n\
    \            value[i][i] = operand.get(i).intValue();\n        }\n        for\
    \ (int delta = 1; delta < n; delta++) {\n            for (int i = 0; i + delta\
    \ < n; i++) {\n                for (int k = i; k < i + delta; k++) {\n       \
    \             if (reachable[i][k] && reachable[k + 1][i + delta]) {\n        \
    \                if (op.get(k).equals(\"+\")) {\n                            value[i][i\
    \ + delta] = value[i][k] + value[k + 1][i + delta];\n                        \
    \    reachable[i][i + delta] = true;\n                        } else if (op.get(k).equals(\"\
    -\")) {\n                            value[i][i + delta] = value[i][k] - value[k\
    \ + 1][i + delta];\n                            reachable[i][i + delta] = true;\n\
    \                        } else if (op.get(k).equals(\"*\")) {\n             \
    \               value[i][i + delta] = value[i][k] * value[k + 1][i + delta];\n\
    \                            reachable[i][i + delta] = true;\n               \
    \         } else if (op.get(k).equals(\"/\")) {\n                            value[i][i\
    \ + delta] = value[i][k] / value[k + 1][i + delta];\n                        \
    \    reachable[i][i + delta] = true;\n                        } else if (op.get(k).equals(\"\
    ^\")) {\n                            value[i][i + delta] = (int) Math.pow(value[i][k],\
    \ value[k + 1][i + delta]);", '        return 0;', "        long ret = operand.get(0);\n\
    \        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) {\n                ret += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                ret -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    *\")) {\n                ret *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    /\")) {\n                ret /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    **\")) {\n                ret = (long) Math.pow(ret, operand.get(i + 1));\n  \
    \          }\n        }\n        return ret;", '        throw new RuntimeException("Not
    implemented");', "        // Write your code here\n        return 0;", "     \
    \   // type your solution here\n        long result = operand.get(0);\n      \
    \  for (int i = 0; i < op.size(); i++) {\n            long right = operand.get(i\
    \ + 1);\n            String operator = op.get(i);\n            switch (operator)\
    \ {\n                case \"+\":\n                    result += right;\n     \
    \               break;\n                case \"-\":\n                    result\
    \ -= right;\n                    break;\n                case \"*\":\n       \
    \             result *= right;\n                    break;\n                case\
    \ \"//\":\n                    result /= right;\n                    break;\n\
    \                case \"**\":\n                    result = (long) Math.pow(result,\
    \ right);\n                    break;\n            }\n        }\n        return\
    \ result;", '        return doAlgebra(op, operand, 0, operand.size() - 1);', " \
    \       // Write your code here\n        // To print results to the standard output\
    \ you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        long ans = 0;\n        if(op.size()==1){\n         \
    \   ans = operand.get(0);\n            for(int i=1;i<operand.size();i++){\n  \
    \              switch(op.get(0)){\n                    case \"+\":ans+=operand.get(i);break;\n\
    \                    case \"-\":ans-=operand.get(i);break;\n                 \
    \   case \"*\":ans*=operand.get(i);break;\n                    case \"//\":ans/=operand.get(i);break;\n\
    \                    case \"**\":ans=(long)Math.pow(ans,operand.get(i));break;\n\
    \                }\n            }\n        }\n        else{\n            for(int\
    \ i=0;i<op.size();i++){\n                switch(op.get(i)){\n                \
    \    case \"+\":ans+=operand.get(i);break;\n                    case \"-\":ans-=operand.get(i);break;\n\
    \                    case \"*\":ans*=operand.get(i);break;\n                 \
    \   case \"//\":ans/=operand.get(i);break;\n                    case \"**\":ans=(long)Math.pow(ans,operand.get(i));break;\n\
    \                }\n            }\n            ans+=operand.get(operand.size()-1);\n\
    \        }\n        return ans;", "        long result = operand.get(0);\n   \
    \     for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) {\n                result += operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"-\")) {\n                result -= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"*\")) {\n                result *=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"//\")) {\n  \
    \              result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    **\")) {\n                result = (long) Math.pow(result, operand.get(i + 1));\n\
    \            }\n        }\n        return result;", "        if (op.size() !=\
    \ operand.size() - 1) {\n            throw new IllegalArgumentException(\"length\
    \ of operator array list should be equal to the length of operand array list minus\
    \ one\");\n        }\n        if (op.size() == 0) {\n            throw new IllegalArgumentException(\"\
    Operator array list has at least one operator\");\n        }\n        if (operand.size()\
    \ < 2) {\n            throw new IllegalArgumentException(\"operand array list\
    \ has at least two operands\");\n        }\n        BigInteger result = BigInteger.valueOf(operand.get(0));\n\
    \        for (int i = 0; i < op.size(); i++) {\n            String operation =\
    \ op.get(i);\n            long num = operand.get(i + 1);\n            BigInteger\
    \ next = BigInteger.valueOf(num);\n            if (operation.equals(\"+\")) {\n\
    \                result = result.add(next);\n            } else if (operation.equals(\"\
    -\")) {\n                result = result.subtract(next);\n            } else if\
    \ (operation.equals(\"*\")) {\n                result = result.multiply(next);\n\
    \            } else if (operation.equals(\"//\")) {\n                result =\
    \ result.divide(next);\n            } else if (operation.equals(\"**\")) {\n \
    \               result = result.pow(num);\n            } else {\n            \
    \    throw new IllegalArgumentException(\"Invalid operator\");\n            }\n\
    \        }\n        return result.longValue();", "        int n = op.size();\n\
    \        long res = operand.get(0);\n        for (int i = 0; i < n; i++) {\n \
    \           long b = operand.get(i + 1);\n            if (op.get(i).equals(\"\
    +\")) {\n                res += b;\n            } else if (op.get(i).equals(\"\
    -\")) {\n                res -= b;\n            } else if (op.get(i).equals(\"\
    *\")) {\n                res *= b;\n            } else if (op.get(i).equals(\"\
    //\")) {\n                res /= b;\n            } else if (op.get(i).equals(\"\
    **\")) {\n                res = (long) Math.pow(res, b);\n            }\n    \
    \    }\n        return res;", "        // throw new UnsupportedOperationException(\"\
    Waiting to be implemented.\");\n        System.out.println(op.size());\n     \
    \   System.out.println(operand.size());\n        long res = operand.get(0);\n\
    \        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) {\n                res += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                res -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    *\")) {\n                res *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                res /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    **\")) {\n                res = (long) Math.pow(res, operand.get(i + 1));\n  \
    \          }\n        }\n        return res;", "        long result = operand.get(0);\n\
    \        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) {\n                result += operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"-\")) {\n                result -= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"*\")) {\n                result *=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"//\")) {\n  \
    \              result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    **\")) {\n                result = (long) Math.pow(result, operand.get(i + 1));\n\
    \            }\n        }\n        return result;", "        long res = operand.get(0);\n\
    \        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) {\n                res += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                res -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    *\")) {\n                res *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                res /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    **\")) {\n                res = (long) Math.pow(res, operand.get(i + 1));\n  \
    \          }\n        }\n        return res;", "        long answer = operand.get(0);\n\
    \        operand.remove(0);\n        int i = 0;\n        while(i < op.size())\
    \ {\n            long current_operand = operand.get(0);\n            operand.remove(0);\n\
    \            if(op.get(i).equals(\"+\")) {\n                answer += current_operand;\n\
    \            }\n            else if(op.get(i).equals(\"-\")) {\n             \
    \   answer -= current_operand;\n            }\n            else if(op.get(i).equals(\"\
    *\")) {\n                answer *= current_operand;\n            }\n         \
    \   else if(op.get(i).equals(\"//\")) {\n                answer = (long) Math.floor(answer\
    \ / current_operand);\n            }\n            else if(op.get(i).equals(\"\
    **\")) {\n                answer = (long) Math.pow(answer, current_operand);\n\
    \            }\n            i++;\n        }\n        return answer;", "      \
    \  int length = op.size();\n        long result = operand.get(0);\n        for\
    \ (int i = 0; i < length; i++) {\n            String s = op.get(i);\n        \
    \    switch (s) {\n                case \"+\":\n                    result +=\
    \ operand.get(i + 1);\n                    break;\n                case \"-\"\
    :\n                    result -= operand.get(i + 1);\n                    break;\n\
    \                case \"*\":\n                    result *= operand.get(i + 1);\n\
    \                    break;\n                case \"//\":\n                  \
    \  result /= operand.get(i + 1);\n                    break;\n               \
    \ case \"**\":\n                    result = (long) Math.pow(result, operand.get(i\
    \ + 1));\n                    break;\n            }\n        }\n        return\
    \ result;", "        int i = op.size() - 1;\n        long result = operand.get(i\
    \ + 1);\n        while (i >= 0) {\n            if (op.get(i).equals(\"+\")) {\n\
    \                result = operand.get(i) + result;\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result = operand.get(i) - result;\n            } else\
    \ if (op.get(i).equals(\"*\")) {\n                result = operand.get(i) * result;\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result =\
    \ operand.get(i) / result;\n            } else if (op.get(i).equals(\"**\")) {\n\
    \                result = (long) Math.pow(operand.get(i), result);\n         \
    \   }\n            i -= 1;\n        }\n        return result;", "        long\
    \ res = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n     \
    \       String c = op.get(i);\n            if (c.equals(\"+\")) {\n          \
    \      res += operand.get(i + 1);\n            } else if (c.equals(\"-\")) {\n\
    \                res -= operand.get(i + 1);\n            } else if (c.equals(\"\
    *\")) {\n                res *= operand.get(i + 1);\n            } else if (c.equals(\"\
    //\")) {\n                res /= operand.get(i + 1);\n            } else if (c.equals(\"\
    **\")) {\n                res = (long) Math.pow(res, operand.get(i + 1));\n  \
    \          }\n        }\n        return res;", "        ArrayList<Long> arrOp\
    \ = new ArrayList<>();\n        int i = 0;\n        long result = operand.get(0);\n\
    \        for (String str : op) {\n            if (str.equals(\"+\")) {\n     \
    \           result += operand.get(i + 1);\n            } else if (str.equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (str.equals(\"*\")) {\n                result *= operand.get(i + 1);\n     \
    \       } else if (str.equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (str.equals(\"**\")) {\n                result\
    \ = (long) Math.pow(result, operand.get(i + 1));\n            }\n            i++;\n\
    \        }\n        return result;", "        long ans = operand.get(0);\n   \
    \     for (int i = 0; i < op.size(); i++) {\n            switch (op.get(i)) {\n\
    \                case \"+\":\n                    ans += operand.get(i + 1);\n\
    \                    break;\n                case \"-\":\n                   \
    \ ans -= operand.get(i + 1);\n                    break;\n                case\
    \ \"*\":\n                    ans *= operand.get(i + 1);\n                   \
    \ break;\n                case \"//\":\n                    ans /= operand.get(i\
    \ + 1);\n                    break;\n                case \"**\":\n          \
    \          ans = (long) Math.pow(ans, operand.get(i + 1));\n                 \
    \   break;\n            }\n        }\n        return ans;", "        long r =\
    \ operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n           \
    \ String o = op.get(i);\n            if (o.equals(\"+\")) {\n                r\
    \ += operand.get(i + 1);\n            } else if (o.equals(\"-\")) {\n        \
    \        r -= operand.get(i + 1);\n            } else if (o.equals(\"*\")) {\n\
    \                r *= operand.get(i + 1);\n            } else if (o.equals(\"\
    //\")) {\n                r /= operand.get(i + 1);\n            } else if (o.equals(\"\
    **\")) {\n                r = (long) Math.pow(r, operand.get(i + 1));\n      \
    \      }\n        }\n        return r;", "        long result = operand.get(0);\n\
    \        for (int i = 0; i < op.size(); i++) {\n            String s = op.get(i);\n\
    \            long a = operand.get(i);\n            long b = operand.get(i + 1);\n\
    \            if (s.equals(\"+\")) {\n                result = result + b;\n  \
    \          } else if (s.equals(\"-\")) {\n                result = result - b;\n\
    \            } else if (s.equals(\"*\")) {\n                result = result *\
    \ b;\n            } else if (s.equals(\"/\")) {\n                result = result\
    \ / b;\n            } else if (s.equals(\"**\")) {\n                result = result\
    \ ^ b;\n            }\n        }\n        return result;", '        return 0;',
  "        // Write your code here ...\n        if (op.size() == 0) {\n          \
    \  return operand.get(0);\n        }\n        if (op.size() == 1) {\n        \
    \    return operand.get(0) + operand.get(1);\n        }\n        long res = 0;\n\
    \        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) {\n                operand.set(i + 1, operand.get(i) + operand.get(i + 1));\n\
    \            } else if (op.get(i).equals(\"-\")) {\n                operand.set(i\
    \ + 1, operand.get(i) - operand.get(i + 1));\n            } else if (op.get(i).equals(\"\
    *\")) {\n                operand.set(i + 1, operand.get(i) * operand.get(i + 1));\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                operand.set(i\
    \ + 1, operand.get(i) / operand.get(i + 1));\n            } else if (op.get(i).equals(\"\
    **\")) {\n                operand.set(i + 1, (long) Math.pow(operand.get(i), operand.get(i\
    \ + 1)));\n            }\n        }\n        return operand.get(operand.size()\
    \ - 1);", "        Deque<Long> deque = new ArrayDeque<>();\n        for (int i\
    \ = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"**\")) {\n  \
    \              long a = deque.pop();\n                long b = operand.get(i +\
    \ 1);\n                deque.push(a ^ b);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                long a = deque.pop();\n                long b = operand.get(i\
    \ + 1);\n                deque.push(a / b);\n            } else if (op.get(i).equals(\"\
    *\")) {\n                long a = deque.pop();\n                long b = operand.get(i\
    \ + 1);\n                deque.push(a * b);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                long a = deque.pop();\n                long b = operand.get(i\
    \ + 1);\n                deque.push(a - b);\n            } else if (op.get(i).equals(\"\
    +\")) {\n                long a = deque.pop();\n                long b = operand.get(i\
    \ + 1);\n                deque.push(a + b);\n            }\n        }\n      \
    \  return deque.pop();", "        long result = operand.get(0);\n        for (int\
    \ i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n \
    \               result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;", "        long result = operand.get(0);\n\
    \        for (int i = 0; i < op.size(); i++) {\n            switch (op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i\
    \ + 1);\n                    break;\n                case \"-\":\n           \
    \         result -= operand.get(i + 1);\n                    break;\n        \
    \        case \"*\":\n                    result *= operand.get(i + 1);\n    \
    \                break;\n                case \"//\":\n                    result\
    \ /= operand.get(i + 1);\n                    break;\n                case \"\
    **\":\n                    result = (long) Math.pow(result, operand.get(i + 1));\n\
    \                    break;\n            }\n        }\n        return result;",
  "        long result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
    \ {\n            if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;", " \
    \       long result = operand.get(0);\n        for (int i = 0; i < op.size();\
    \ i++) {\n            switch (op.get(i)) {\n                case \"+\":\n    \
    \                result += operand.get(i + 1);\n                    break;\n \
    \               case \"-\":\n                    result -= operand.get(i + 1);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i + 1);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i + 1);\n               \
    \     break;\n                case \"**\":\n                    result = (long)\
    \ Math.pow(result, operand.get(i + 1));\n                    break;\n        \
    \    }\n        }\n        return result;", "        // write your code here...\n\
    \        return 0;", '        // Your code here.', '        return 0;', "    \
    \    // Your solution goes here.\n        long result = operand.get(0);\n    \
    \    for (int i = 0; i < op.size(); i++) {\n            switch (op.get(i)) {\n\
    \                case \"+\":\n                    result += operand.get(i + 1);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i + 1);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i + 1);\n                \
    \    break;\n                case \"//\":\n                    result /= operand.get(i\
    \ + 1);\n                    break;\n                case \"**\":\n          \
    \          result = (long) Math.pow(result, operand.get(i + 1));\n           \
    \         break;\n            }\n        }\n        return result;", "       \
    \ for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"+\"\
    )) {\n                operand.set(i + 1, operand.get(i) + operand.get(i + 1));\n\
    \                operand.remove(i);\n                op.remove(i);\n         \
    \       i--;\n            } else if (op.get(i).equals(\"-\")) {\n            \
    \    operand.set(i + 1, operand.get(i) - operand.get(i + 1));\n              \
    \  operand.remove(i);\n                op.remove(i);\n                i--;\n \
    \           } else if (op.get(i).equals(\"*\")) {\n                operand.set(i\
    \ + 1, operand.get(i) * operand.get(i + 1));\n                operand.remove(i);\n\
    \                op.remove(i);\n                i--;\n            } else if (op.get(i).equals(\"\
    //\")) {\n                operand.set(i + 1, operand.get(i) / operand.get(i +\
    \ 1));\n                operand.remove(i);\n                op.remove(i);\n  \
    \              i--;\n            } else if (op.get(i).equals(\"**\")) {\n    \
    \            operand.set(i + 1, (long) Math.pow(operand.get(i), operand.get(i\
    \ + 1)));\n                operand.remove(i);\n                op.remove(i);\n\
    \                i--;\n            }\n        }\n        return operand.get(0);",
  "        long result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
    \ {\n            if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;", " \
    \       // Write your code here.\n        return 0;", '        return 0;', " \
    \       // write your code here\n        // you can use the print function for\
    \ debugging purposes, e.g.\n        // print(\"this is a debug message\")\n  \
    \      long value = operand.get(0);\n        for(int i = 0; i < op.size(); i++)\
    \ {\n            switch(op.get(i)) {\n                case \"+\":\n          \
    \          value += operand.get(i+1);\n                    break;\n          \
    \      case \"-\":\n                    value -= operand.get(i+1);\n         \
    \           break;\n                case \"*\":\n                    value *=\
    \ operand.get(i+1);\n                    break;\n                case \"//\":\n\
    \                    value /= operand.get(i+1);\n                    break;\n\
    \                case \"**\":\n                    value = (long)Math.pow(value,\
    \ operand.get(i+1));\n                    break;\n            }\n        }\n \
    \       return value;", "        int i = 0;\n        long result = operand.get(i);\n\
    \        while (i < op.size()) {\n            if (op.get(i).equals(\"+\")) {\n\
    \                result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n            i++;\n        }\n        return result;", "        // Write\
    \ your code here.\n        return 0;", "        Stack<Long> operands = new Stack<>();\n\
    \        Stack<String> operators = new Stack<>();\n        operators.push(op.get(0));\n\
    \        operands.push(operand.get(0));\n        for (int i = 1; i < op.size();\
    \ i++) {\n            String operator = op.get(i);\n            Long oper = operand.get(i);\n\
    \            if (operator.equals(\"+\") || operator.equals(\"-\")) {\n       \
    \         while (!operators.isEmpty()) {\n                    operands.push(processOperator(operators.pop(),\
    \ operands.pop(), operands.pop()));\n                }\n                operators.push(operator);\n\
    \                operands.push(oper);\n            } else if (operator.equals(\"\
    *\") || operator.equals(\"//\")) {\n                operators.push(operator);\n\
    \                operands.push(oper);\n            } else if (operator.equals(\"\
    **\")) {\n                operands.push(processOperator(operator, operands.pop(),\
    \ oper));\n            }\n        }\n        while (!operators.isEmpty()) {\n\
    \            operands.push(processOperator(operators.pop(), operands.pop(), operands.pop()));\n\
    \        }\n        return operands.pop();", "        long result = operand.get(0);\n\
    \        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) {\n                result += operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"-\")) {\n                result -= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"*\")) {\n                result *=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"//\")) {\n  \
    \              result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    **\")) {\n                result = (long) Math.pow(result, operand.get(i + 1));\n\
    \            }\n        }\n        return result;", "        if (op.size() ==\
    \ 0 || operand.size() == 0)\n            return 0;\n        if (op.size() == 1)\n\
    \            return operand.get(0);\n        Long current = operand.get(0);\n\
    \        Long next = operand.get(1);\n        String operator = op.get(0);\n \
    \       switch (operator) {\n            case \"+\":\n                return current\
    \ + next;\n            case \"-\":\n                return current - next;\n \
    \           case \"*\":\n                return current * next;\n            case\
    \ \"//\":\n                return current / next;\n            case \"**\":\n\
    \                return (long) Math.pow(current, next);\n            default:\n\
    \                return 0;\n        }", "        // Write your code here\n   \
    \     if(operand.size() == 1) return operand.get(0);\n        for(int i = 0; i\
    \ < op.size(); i++){\n            long temp;\n            if(op.get(i).equals(\"\
    +\")){\n                temp = operand.get(i) + operand.get(i+1);\n          \
    \  }else if(op.get(i).equals(\"-\")){\n                temp = operand.get(i) -\
    \ operand.get(i+1);\n            }else if(op.get(i).equals(\"*\")){\n        \
    \        temp = operand.get(i) * operand.get(i+1);\n            }else if(op.get(i).equals(\"\
    /\")){\n                temp = operand.get(i) / operand.get(i+1);\n          \
    \  }else{\n                temp = operand.get(i) % operand.get(i+1);\n       \
    \     }\n            operand.set(i, temp);\n            operand.remove(i+1);\n\
    \            op.remove(i);\n            i--;\n        }\n        return operand.get(0);",
  "        int length = op.size();\n        long result = operand.get(0);\n      \
    \  for (int i = 0; i < length; i++) {\n            if (op.get(i).equals(\"+\"\
    )) {\n                result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;", "        var array = new ArrayList<Object>();\n\
    \        for (var i = 0; i < op.size(); i++) {\n            array.add(op.get(i));\n\
    \            array.add(operand.get(i));\n        }\n        array.add(operand.get(operand.size()\
    \ - 1));\n        var expression = convert(array);\n        return evaluate(expression);",
  "        int l = op.size();\n        // build the tree\n        for (int i = 0;\
    \ i < l; i++) {\n            if (i == 0) {\n                if (op.get(i).equals(\"\
    +\")) {\n                    operand.set(i, operand.get(i) + operand.get(i + 1));\n\
    \                } else if (op.get(i).equals(\"-\")) {\n                    operand.set(i,\
    \ operand.get(i) - operand.get(i + 1));\n                } else if (op.get(i).equals(\"\
    *\")) {\n                    operand.set(i, operand.get(i) * operand.get(i + 1));\n\
    \                } else if (op.get(i).equals(\"//\")) {\n                    operand.set(i,\
    \ operand.get(i) / operand.get(i + 1));\n                } else if (op.get(i).equals(\"\
    **\")) {\n                    operand.set(i, (long) Math.pow(operand.get(i), operand.get(i\
    \ + 1)));\n                }\n            } else {\n                if (op.get(i).equals(\"\
    +\")) {\n                    operand.set(i + 1, operand.get(i + 1) + operand.get(i\
    \ + 2));\n                } else if (op.get(i).equals(\"-\")) {\n            \
    \        operand.set(i + 1, operand.get(i + 1) - operand.get(i + 2));\n      \
    \          } else if (op.get(i).equals(\"*\")) {\n                    operand.set(i\
    \ + 1, operand.get(i + 1) * operand.get(i + 2));\n                } else if (op.get(i).equals(\"\
    //\")) {\n                    operand.set(i + 1, operand.get(i + 1) / operand.get(i\
    \ + 2));\n                } else if (op.get(i).equals(\"**\")) {\n           \
    \         operand.set(i + 1, (long) Math.pow(operand.get(i + 1), operand", " \
    \       long res = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
    \ {\n            switch (op.get(i)) {\n                case \"+\":\n         \
    \           res += operand.get(i + 1);\n                    break;\n         \
    \       case \"-\":\n                    res -= operand.get(i + 1);\n        \
    \            break;\n                case \"*\":\n                    res *= operand.get(i\
    \ + 1);\n                    break;\n                case \"//\":\n          \
    \          res /= operand.get(i + 1);\n                    break;\n          \
    \      case \"**\":\n                    res = (long) Math.pow(res, operand.get(i\
    \ + 1));\n                    break;\n            }\n        }\n        return\
    \ res;", "        // Write your code here.\n        // Hint: to do this problem\
    \ you can use the evaluator function\n        // in Python.\n        return 0;",
  "        // Write your code here\n        // To print results to the standard output\
    \ you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        ", "        // Write your code here.\n        return\
    \ 0;", "        // write code here\n        return 0;", "        long x=0;\n \
    \       for(int i=0;i<op.size();i++){\n            long a=operand.get(i);\n  \
    \          long b=operand.get(i+1);\n            switch(op.get(i)){\n        \
    \        case \"+\":\n                    x=a+b;\n                    break;\n\
    \                case \"-\":\n                    x=a-b;\n                   \
    \ break;\n                case \"*\":\n                    x=a*b;\n          \
    \          break;\n                case \"//\":\n                    x=a/b;\n\
    \                    break;\n                case \"**\":\n                  \
    \  x=(long)Math.pow(a,b);\n                    break;\n            }\n       \
    \     operand.set(i+1,x);\n        }\n        return x;", "        // System.out.println(op);\n\
    \        // System.out.println(operand);\n        long val = operand.get(0);\n\
    \        for (int i = 0; i < op.size(); i++) {\n            // System.out.println(val);\n\
    \            long n = operand.get(i + 1);\n            switch (op.get(i)) {\n\
    \                case \"+\": val += n; break;\n                case \"-\": val\
    \ -= n; break;\n                case \"*\": val *= n; break;\n               \
    \ case \"//\": val /= n; break;\n                case \"**\": val = (long)Math.pow(val,\
    \ n); break;\n            }\n        }\n        return val;", "        ArrayList<Long>\
    \ list = new ArrayList<>();\n        list.add(operand.get(0));\n        for (int\
    \ i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"+\"))\n   \
    \             list.add(operand.get(i + 1));\n            else if (op.get(i).equals(\"\
    -\"))\n                list.add(-operand.get(i + 1));\n            else if (op.get(i).equals(\"\
    *\"))\n                list.set(list.size() - 1, list.get(list.size() - 1) * operand.get(i\
    \ + 1));\n            else if (op.get(i).equals(\"//\"))\n                list.set(list.size()\
    \ - 1, list.get(list.size() - 1) / operand.get(i + 1));\n            else if (op.get(i).equals(\"\
    **\"))\n                list.set(list.size() - 1, (long) Math.pow(list.get(list.size()\
    \ - 1), operand.get(i + 1)));\n        }\n        return list.stream().mapToLong(x\
    \ -> x).sum();", "        long total = operand.get(0);\n        for (int i = 0;\
    \ i < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n        \
    \        total += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                total -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    *\")) {\n                total *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                total /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                total = (long) Math.pow(total,\
    \ operand.get(i + 1));\n            }\n        }\n        return total;", "  \
    \      // Your code here\n        return 0;", "        long ans = operand.get(0);\n\
    \        for (int i = 0; i < op.size(); i++) {\n            String o = op.get(i);\n\
    \            if (o.equals(\"+\")) ans += operand.get(i + 1);\n            else\
    \ if (o.equals(\"-\")) ans -= operand.get(i + 1);\n            else if (o.equals(\"\
    *\")) ans *= operand.get(i + 1);\n            else if (o.equals(\"//\")) ans /=\
    \ operand.get(i + 1);\n            else if (o.equals(\"**\")) ans = (long)Math.pow(ans,\
    \ operand.get(i + 1));\n        }\n        return ans;", "        long result\
    \ = operand.get(0);\n        int n = operand.size();\n        int i = 0;\n   \
    \     while (i < n - 1) {\n            long op1 = operand.get(i);\n          \
    \  long op2 = operand.get(i + 1);\n            String operation = op.get(i);\n\
    \            switch (operation) {\n                case \"+\":\n             \
    \       result = op1 + op2;\n                    break;\n                case\
    \ \"-\":\n                    result = op1 - op2;\n                    break;\n\
    \                case \"*\":\n                    result = op1 * op2;\n      \
    \              break;\n                case \"//\":\n                    result\
    \ = op1 / op2;\n                    break;\n                case \"**\":\n   \
    \                 result = (long) Math.pow(op1, op2);\n                    break;\n\
    \            }\n            i++;\n        }\n        return result;", "      \
    \  // write your code here\n        ArrayList<Long> a = new ArrayList<>();\n \
    \       ArrayList<String> b = new ArrayList<>();\n        for(int i = 0; i < op.size();\
    \ i++){\n            a.add(operand.get(i));\n            b.add(op.get(i));\n \
    \       }\n        a.add(operand.get(operand.size()-1));\n        long res = a.get(0);\n\
    \        for(int i = 0; i < b.size(); i++){\n            if(b.get(i).equals(\"\
    +\")){\n                res += a.get(i+1);\n            }else if(b.get(i).equals(\"\
    -\")){\n                res -= a.get(i+1);\n            }else if(b.get(i).equals(\"\
    *\")){\n                res *= a.get(i+1);\n            }else if(b.get(i).equals(\"\
    /\")){\n                res /= a.get(i+1);\n            }else if(b.get(i).equals(\"\
    ^\")){\n                res = (long)Math.pow(res, a.get(i+1));\n            }\n\
    \        }\n        return res;", "        long res = operand.get(0);\n      \
    \  for (int i = 0; i < op.size(); i++) {\n            switch (op.get(i)) {\n \
    \               case \"+\":\n                    res += operand.get(i + 1);\n\
    \                    break;\n                case \"-\":\n                   \
    \ res -= operand.get(i + 1);\n                    break;\n                case\
    \ \"*\":\n                    res *= operand.get(i + 1);\n                   \
    \ break;\n                case \"//\":\n                    res /= operand.get(i\
    \ + 1);\n                    break;\n                case \"**\":\n          \
    \          res = (long) Math.pow(res, operand.get(i + 1));\n                 \
    \   break;\n            }\n        }\n        return res;", "        long result\
    \ = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n         \
    \   result = doOperation(result, operand.get(i + 1), op.get(i));\n        }\n\
    \        return result;", "        long res = operand.get(0);\n        for (int\
    \ i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n \
    \               res += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                res -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    *\")) {\n                res *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                res /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    **\")) {\n                res = (long) Math.pow(res, operand.get(i + 1));\n  \
    \          }\n        }\n        return res;", "        // write your code here\n\
    \        return 0;", '        return 0;', "        String operator = String.join(\"\
    \", op);\n        String operandStr = String.join(\"\", operand);\n        String\
    \ expression = operandStr.charAt(0) + operator + operandStr.substring(1);\n  \
    \      // System.out.println(expression);\n        long result = 0;\n        try\
    \ {\n            ScriptEngineManager mgr = new ScriptEngineManager();\n      \
    \      ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n          \
    \  result = (long) engine.eval(expression);\n        } catch (ScriptException\
    \ ex) {\n            System.out.println(ex);\n        }\n        return result;",
  "        long a = operand.get(0);\n        operand.remove(0);\n        for (int\
    \ i = 0; i < op.size(); i++) {\n            switch (op.get(i)) {\n           \
    \     case \"+\":\n                    a += operand.get(i);\n                \
    \    break;\n                case \"-\":\n                    a -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ a *= operand.get(i);\n                    break;\n                case \"//\"\
    :\n                    a /= operand.get(i);\n                    break;\n    \
    \            case \"**\":\n                    a = (long) Math.pow(a, operand.get(i));\n\
    \                    break;\n            }\n        }\n        return a;", " \
    \       long result = operand.get(0);\n        operand.remove(0);\n        for\
    \ (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"+\"))\
    \ {\n                result += operand.get(i);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i);\n            } else if (op.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i);\n            } else if (op.get(i).equals(\"\
    **\")) {\n                result = (long) Math.pow(result, operand.get(i));\n\
    \            }\n        }\n        return result;", "        long result = operand.get(0);\n\
    \        for (int i = 0; i < op.size(); i++) {\n            switch (op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i\
    \ + 1);\n                    break;\n                case \"-\":\n           \
    \         result -= operand.get(i + 1);\n                    break;\n        \
    \        case \"*\":\n                    result *= operand.get(i + 1);\n    \
    \                break;\n                case \"//\":\n                    result\
    \ /= operand.get(i + 1);\n                    break;\n                case \"\
    **\":\n                    result = (long) Math.pow(result, operand.get(i + 1));\n\
    \                    break;\n            }\n        }\n        return result;",
  "        int i = 0;\n        long result = operand.get(i);\n        for (i = 0;\
    \ i < op.size(); i++) {\n            String operator = op.get(i);\n          \
    \  long right = operand.get(i + 1);\n            switch (operator) {\n       \
    \         case \"+\":\n                    result += right;\n                \
    \    break;\n                case \"-\":\n                    result -= right;\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= right;\n                    break;\n                case \"//\":\n\
    \                    result /= right;\n                    break;\n          \
    \      case \"**\":\n                    result = (long) Math.pow(result, right);\n\
    \                    break;\n            }\n        }\n        return result;",
  '        throw new UnsupportedOperationException("Not implemented.");', "      \
    \  long res = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n\
    \            switch (op.get(i)) {\n                case \"+\":\n             \
    \       res += operand.get(i + 1);\n                    break;\n             \
    \   case \"-\":\n                    res -= operand.get(i + 1);\n            \
    \        break;\n                case \"*\":\n                    res *= operand.get(i\
    \ + 1);\n                    break;\n                case \"//\":\n          \
    \          res /= operand.get(i + 1);\n                    break;\n          \
    \      case \"**\":\n                    res = (long) Math.pow(res, operand.get(i\
    \ + 1));\n                    break;\n            }\n        }\n        return\
    \ res;", "        long result = operand.get(0);\n        for (int i = 0; i < op.size();\
    \ i++) {\n            String o = op.get(i);\n            long a = operand.get(i);\n\
    \            long b = operand.get(i + 1);\n            if (o.equals(\"+\")) result\
    \ += b;\n            else if (o.equals(\"-\")) result -= b;\n            else\
    \ if (o.equals(\"*\")) result *= b;\n            else if (o.equals(\"/\")) result\
    \ /= b;\n            else if (o.equals(\"^\")) result = (long) Math.pow(a, b);\n\
    \        }\n        return result;", "        long ans = operand.get(0);\n   \
    \     int n = operand.size();\n        for (int i = 1; i < n; i++) {\n       \
    \     long x = operand.get(i);\n            String s = op.get(i - 1);\n      \
    \      if (s.equals(\"+\")) {\n                ans += x;\n            } else if\
    \ (s.equals(\"-\")) {\n                ans -= x;\n            } else if (s.equals(\"\
    *\")) {\n                ans *= x;\n            } else if (s.equals(\"//\")) {\n\
    \                ans /= x;\n            } else if (s.equals(\"**\")) {\n     \
    \           ans = (long) Math.pow(ans, x);\n            }\n        }\n       \
    \ return ans;", "        Stack<Long> st = new Stack<>();\n        for(int i =\
    \ 0; i < op.size(); i++) {\n            long a = operand.get(i);\n           \
    \ long b = operand.get(i + 1);\n            if(op.get(i).equals(\"+\")) {\n  \
    \              st.push(a + b);\n            } else if(op.get(i).equals(\"-\"))\
    \ {\n                st.push(a - b);\n            } else if(op.get(i).equals(\"\
    *\")) {\n                st.push(a * b);\n            } else if(op.get(i).equals(\"\
    /\")) {\n                st.push(a / b);\n            } else if(op.get(i).equals(\"\
    ^\")) {\n                st.push((long)Math.pow(a, b));\n            }\n     \
    \   }\n        return st.pop();", "        // Algebra is not my area of expertise,\
    \ because I am a Web Developer and not a Mathematician. I spent a lot of time\
    \ trying to figure out \n        // how to do this question and I was forced to\
    \ look up the solution. The solution I found is the one below.\n        // I found\
    \ the solution here: https://www.geeksforgeeks.org/print-expression-evaluation-order-using-shunting-yard-algorithm/\n\
    \        // This is a recursive solution to this question. I believe that a while\
    \ loop or a for loop would be more efficient but I do not know how \n        //\
    \ to implement this solution with a loop structure. I will try to find out how\
    \ to do this with a loop structure.\n        // The solution below is based on\
    \ the Precedence of math operations.\n        // The precedence of operations\
    \ means that some operations have more weight than others.\n        // For example,\
    \ with addition and multiplication, the multiplication operator has higher precedence\
    \ than the addition operator.\n        // So multiplication will be performed\
    \ before addition. This is also true for subtraction and division.\n        //\
    \ But I am not sure if this solution is always true. I will test it.\n       \
    \ // As I look at this solution, I think that this solution is more complicated\
    \ than it needs to be.\n        // It seems like the solution below can be simplified.\
    \ I will try to simplify this solution.\n        // This solution is based on\
    \ the Shunting-yard algorithm.\n        // I found the simplified solution below\
    \ here: https://algs4.cs.princeton.edu/13stacks/Evaluate.java.html\n        //\
    \ The solution below does not use the Shunting-yard algorithm. It just uses a\
    \ stack of numbers and a stack of operators.\n        // This solution is based\
    \ on recursion.\n        // I think that this solution is more complicated than\
    \ it needs to be because of the use of recursion.\n        // So I want to rewrite\
    \ this solution without recursion.\n        // First I want to write a solution\
    \ using a while loop.\n        // Then I want to write a solution using a for\
    \ loop.\n        // The algorithm is:\n        // 1. Create a stack to hold the\
    \ operands.\n        // 2. Create a stack to hold the operators.\n        // 3.\
    \ Iterate through the operands.", "        long sum = operand.get(0);\n      \
    \  for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) {\n                sum += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                sum -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    *\")) {\n                sum *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                sum /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    **\")) {\n                sum = (long) Math.pow(sum, operand.get(i + 1));\n  \
    \          }\n        }\n        return sum;", "        long ans = operand.get(0);\n\
    \        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) ans += operand.get(i + 1);\n            else if (op.get(i).equals(\"-\"\
    )) ans -= operand.get(i + 1);\n            else if (op.get(i).equals(\"*\")) ans\
    \ *= operand.get(i + 1);\n            else if (op.get(i).equals(\"/\")) ans /=\
    \ operand.get(i + 1);\n            else if (op.get(i).equals(\"**\")) ans = (long)Math.pow(ans,\
    \ operand.get(i + 1));\n        }\n        return ans;", "        long result\
    \ = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n         \
    \   String currOp = op.get(i);\n            long second = operand.get(i + 1);\n\
    \            if (currOp.equals(\"+\")) {\n                result += second;\n\
    \            } else if (currOp.equals(\"-\")) {\n                result -= second;\n\
    \            } else if (currOp.equals(\"*\")) {\n                result *= second;\n\
    \            } else if (currOp.equals(\"/\")) {\n                result /= second;\n\
    \            } else if (currOp.equals(\"^\")) {\n                result = (long)\
    \ Math.pow(result, second);\n            }\n        }\n        return result;",
  "        long result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
    \ {\n            if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;", " \
    \       // Write your code here\n        ArrayList<String> ops = op;\n       \
    \ ArrayList<Long> numbers = operand;\n        ArrayList<Pair<Long, Long>> pairs\
    \ = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < ops.size();\
    \ i++) {\n            pairs.add(new Pair<Long, Long>(numbers.get(i), numbers.get(i\
    \ + 1)));\n        }\n        while (pairs.size() > 1) {\n            while (ops.contains(\"\
    //\")) {\n                int index = ops.indexOf(\"//\");\n                pairs.get(index).setAt0(pairs.get(index).getValue0()\
    \ / pairs.get(index).getValue1());\n                pairs.remove(index + 1);\n\
    \                ops.remove(index);\n            }\n            while (ops.contains(\"\
    **\")) {\n                int index = ops.indexOf(\"**\");\n                pairs.get(index).setAt0(new\
    \ Double(Math.pow(pairs.get(index).getValue0(), pairs.get(index).getValue1())).longValue());\n\
    \                pairs.remove(index + 1);\n                ops.remove(index);\n\
    \            }\n            while (ops.contains(\"*\")) {\n                int\
    \ index = ops.indexOf(\"*\");\n                pairs.get(index).setAt0(pairs.get(index).getValue0()\
    \ * pairs.get(index).getValue1());\n                pairs.remove(index + 1);\n\
    \                ops.remove(index);\n            }\n            while (ops.contains(\"\
    -\")) {\n                int index = ops.indexOf(\"-\");\n                pairs.get(index).setAt0(pairs.get(index).getValue0()\
    \ - pairs.get(index).getValue1());\n                pairs.remove(index + 1);\n\
    \                ops.remove(index);\n            }\n            while (ops.contains(\"\
    +\")) {\n                int index = ops.indexOf(\"+\");\n                pairs.get(index).setAt0(pairs.get(index).getValue0()\
    \ + pairs.get(index).getValue1());\n                pairs.remove(index +", " \
    \       int i = 0;\n        while (i < op.size()) {\n            long a = operand.get(i);\n\
    \            long b = operand.get(i + 1);\n            if (op.get(i).equals(\"\
    +\"))\n                operand.set(i + 1, a + b);\n            else if (op.get(i).equals(\"\
    -\"))\n                operand.set(i + 1, a - b);\n            else if (op.get(i).equals(\"\
    *\"))\n                operand.set(i + 1, a * b);\n            else if (op.get(i).equals(\"\
    //\"))\n                operand.set(i + 1, a / b);\n            else if (op.get(i).equals(\"\
    **\"))\n                operand.set(i + 1, (long) Math.pow(a, b));\n         \
    \   op.remove(i);\n        }\n        return operand.get(0);", "        int n\
    \ = op.size();\n        long result = operand.get(0);\n        for (int i = 0;\
    \ i < n; i++) {\n            if (op.get(i).equals(\"+\")) {\n                result\
    \ += operand.get(i + 1);\n            } else if (op.get(i).equals(\"-\")) {\n\
    \                result -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"//\")) {\n                result /= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"**\")) {\n                result =\
    \ (long) Math.pow(result, operand.get(i + 1));\n            }\n        }\n   \
    \     return result;", "        // Write your code here\n        // To print results\
    \ to the standard output you can use System.out.println()\n        // Example:\
    \ System.out.println(\"Hello world!\");", "        // Implement your solution\
    \ here!\n        return 0;", "        if (op.size() + 1 != operand.size()) {\n\
    \            return -1;\n        }\n        if (op.size() < 1 || operand.size()\
    \ < 2) {\n            return -1;\n        }\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < op.size(); i++) {\n            long next = operand.get(i\
    \ + 1);\n            switch (op.get(i)) {\n                case \"+\":\n     \
    \               result += next;\n                    break;\n                case\
    \ \"-\":\n                    result -= next;\n                    break;\n  \
    \              case \"*\":\n                    result *= next;\n            \
    \        break;\n                case \"//\":\n                    result /= next;\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long) Math.pow(result, next);\n                    break;\n     \
    \           default:\n                    return -1;\n            }\n        }\n\
    \        return result;", "        if (op.size() + 1 != operand.size()) return\
    \ 0;\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        // need to change operand to int so can use if-else\
    \ \n        int lenOp = op.size();\n        int lenOperand = operand.size();\n\
    \        int[] operandInt = new int[lenOperand];\n        for (int i = 0; i <\
    \ lenOperand; i++) {\n            operandInt[i] = operand.get(i).intValue();\n\
    \        }\n        int len = lenOp + 1;\n        long[] res = new long[len];\n\
    \        for (int i = 0; i < len; i++) {\n            res[i] = operandInt[i];\n\
    \        }\n        for (int i = 0; i < lenOp; i++) {\n            String opCur\
    \ = op.get(i);\n            switch (opCur) {\n                case \"+\":\n  \
    \                  res[i+1] = res[i] + res[i+1];\n                    break;\n\
    \                case \"-\":\n                    res[i+1] = res[i] - res[i+1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ res[i+1] = res[i] * res[i+1];\n                    break;\n                case\
    \ \"//\":\n                    res[i+1] = res[i] / res[i+1];\n               \
    \     break;\n                case \"**\":\n                    res[i+1] = (long)\
    \ Math.pow(res[i], res[i+1]);\n                    break;\n                default:\n\
    \                    break;\n            }\n        }\n        return res[lenOp];",
  "        // Fill in your code here\n        long result = operand.get(0);\n    \
    \    for (int i = 0; i < op.size(); i++) {\n            switch (op.get(i)) {\n\
    \                case \"+\":\n                    result += operand.get(i + 1);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i + 1);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i + 1);\n                \
    \    break;\n                case \"//\":\n                    result /= operand.get(i\
    \ + 1);\n                    break;\n                case \"**\":\n          \
    \          result = (long) Math.pow(result, operand.get(i + 1));\n           \
    \         break;\n            }\n        }\n        return result;", "       \
    \ // Write your code here\n        // To print results to the standard output\
    \ you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        long result = operand.get(0);\n        for (int i =\
    \ 0; i < op.size(); i++) {\n            switch (op.get(i)) {\n               \
    \ case \"+\":\n                    result += operand.get(i + 1);\n           \
    \         break;\n                case \"-\":\n                    result -= operand.get(i\
    \ + 1);\n                    break;\n                case \"*\":\n           \
    \         result *= operand.get(i + 1);\n                    break;\n        \
    \        case \"//\":\n                    result /= operand.get(i + 1);\n   \
    \                 break;\n                case \"**\":\n                    result\
    \ = (long) Math.pow(result, operand.get(i + 1));\n                    break;\n\
    \            }\n        }\n        return result;", "        \n        int c =\
    \ 0;\n        for(int i = 0; i < op.size(); i++) {\n            if(op.get(i).equals(\"\
    *\")) {\n                op.remove(i);\n                operand.set(i,operand.get(i)*operand.get(i+1));\n\
    \                operand.remove(i+1);\n                i--;\n            }\n \
    \           else if(op.get(i).equals(\"/\")) {\n                op.remove(i);\n\
    \                operand.set(i,operand.get(i)/operand.get(i+1));\n           \
    \     operand.remove(i+1);\n                i--;\n            }\n            else\
    \ if(op.get(i).equals(\"**\")) {\n                op.remove(i);\n            \
    \    operand.set(i,operand.get(i).longValue() ^ operand.get(i+1).longValue());\n\
    \                operand.remove(i+1);\n                i--;\n            }\n \
    \       }\n        long sum = operand.get(0);\n        for(int i = 0; i < op.size();\
    \ i++) {\n            if(op.get(i).equals(\"+\")) {\n                op.remove(i);\n\
    \                sum += operand.get(i+1);\n                operand.remove(i+1);\n\
    \                i--;\n            }\n            else if(op.get(i).equals(\"\
    -\")) {\n                op.remove(i);\n                sum -= operand.get(i+1);\n\
    \                operand.remove(i+1);\n                i--;\n            }\n \
    \       }\n        return sum;", "        long result = operand.get(0);\n    \
    \    for (int i = 0; i < op.size(); i++) {\n            switch (op.get(i)) {\n\
    \                case \"+\":\n                    result += operand.get(i + 1);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i + 1);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i + 1);\n                \
    \    break;\n                case \"//\":\n                    result /= operand.get(i\
    \ + 1);\n                    break;\n                case \"**\":\n          \
    \          result = (long) Math.pow(result, operand.get(i + 1));\n           \
    \         break;\n            }\n        }\n        return result;", '        return
    -1;', "        long result = operand.get(0);\n        for (int i = 0; i < op.size();\
    \ i++) {\n            long val = operand.get(i + 1);\n            switch (op.get(i))\
    \ {\n                case \"+\":\n                    result += val;\n       \
    \             break;\n                case \"-\":\n                    result\
    \ -= val;\n                    break;\n                case \"*\":\n         \
    \           result *= val;\n                    break;\n                case \"\
    //\":\n                    result /= val;\n                    break;\n      \
    \          case \"**\":\n                    result = (long) Math.pow(result,\
    \ val);\n                    break;\n            }\n        }\n        return\
    \ result;", "        // write your code here\n        return 0;", '        return
    0;', '        return operand.get(0);', "        // Write your code here\n    \
    \    // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        Long result\
    \ = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n         \
    \   if (op.get(i).equals(\"+\")) {\n                result += operand.get(i +\
    \ 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;", " \
    \       //\n        // Your code\n        //\n        return 0;", "        String[]\
    \ operator = op.toArray(new String[op.size()]);\n        long[] operands = operand.stream().mapToLong(i\
    \ -> i).toArray();\n        for (int i = 0; i < operator.length; i++) {\n    \
    \        if (operator[i].equals(\"*\")) {\n                operands[i] = operands[i]\
    \ * operands[i + 1];\n                operands[i + 1] = 0;\n            } else\
    \ if (operator[i].equals(\"+\")) {\n                operands[i] = operands[i]\
    \ + operands[i + 1];\n                operands[i + 1] = 0;\n            } else\
    \ if (operator[i].equals(\"-\")) {\n                operands[i] = operands[i]\
    \ - operands[i + 1];\n                operands[i + 1] = 0;\n            } else\
    \ if (operator[i].equals(\"//\")) {\n                operands[i] = operands[i]\
    \ / operands[i + 1];\n                operands[i + 1] = 0;\n            } else\
    \ if (operator[i].equals(\"**\")) {\n                operands[i] = (long) Math.pow(operands[i],\
    \ operands[i + 1]);\n                operands[i + 1] = 0;\n            }\n   \
    \     }\n        long result = 0;\n        for (int i = 0; i < operands.length;\
    \ i++) {\n            result += operands[i];\n        }\n        return result;",
  "        if (op.size() == 0 || operand.size() == 0) return 0;\n        long result\
    \ = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n         \
    \   if (op.get(i).equals(\"+\")) result += operand.get(i + 1);\n            else\
    \ if (op.get(i).equals(\"-\")) result -= operand.get(i + 1);\n            else\
    \ if (op.get(i).equals(\"*\")) result *= operand.get(i + 1);\n            else\
    \ if (op.get(i).equals(\"/\")) result /= operand.get(i + 1);\n            else\
    \ if (op.get(i).equals(\"**\")) result = (long) Math.pow(result, operand.get(i\
    \ + 1));\n        }\n        return result;", "        int i = 0;\n        while\
    \ (i < op.size()) {\n            if (op.get(i).equals(\"**\")) {\n           \
    \     operand.set(i, (long) Math.pow(operand.get(i), operand.get(i + 1)));\n \
    \               operand.remove(i + 1);\n                op.remove(i);\n      \
    \      } else {\n                i++;\n            }\n        }\n        i = 0;\n\
    \        while (i < op.size()) {\n            if (op.get(i).equals(\"*\")) {\n\
    \                operand.set(i, operand.get(i) * operand.get(i + 1));\n      \
    \          operand.remove(i + 1);\n                op.remove(i);\n           \
    \ } else if (op.get(i).equals(\"//\")) {\n                operand.set(i, operand.get(i)\
    \ / operand.get(i + 1));\n                operand.remove(i + 1);\n           \
    \     op.remove(i);\n            } else {\n                i++;\n            }\n\
    \        }\n        i = 0;\n        while (i < op.size()) {\n            if (op.get(i).equals(\"\
    +\")) {\n                operand.set(i, operand.get(i) + operand.get(i + 1));\n\
    \                operand.remove(i + 1);\n                op.remove(i);\n     \
    \       } else if (op.get(i).equals(\"-\")) {\n                operand.set(i,\
    \ operand.get(i) - operand.get(i + 1));\n                operand.remove(i + 1);\n\
    \                op.remove(i);\n            } else {\n                i++;\n \
    \           }\n        }\n        return operand.get(0);", "        for (int i\
    \ = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"**\")) {\n  \
    \              Long a = operand.get(i);\n                Long b = operand.get(i\
    \ + 1);\n                Long result = (long) Math.pow(a, b);\n              \
    \  operand.set(i, result);\n                operand.remove(i + 1);\n         \
    \       op.remove(i);\n                i -= 1;\n            }\n        }\n   \
    \     for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    //\")) {\n                Long a = operand.get(i);\n                Long b = operand.get(i\
    \ + 1);\n                Long result = a / b;\n                operand.set(i,\
    \ result);\n                operand.remove(i + 1);\n                op.remove(i);\n\
    \                i -= 1;\n            }\n        }\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"*\")) {\n          \
    \      Long a = operand.get(i);\n                Long b = operand.get(i + 1);\n\
    \                Long result = a * b;\n                operand.set(i, result);\n\
    \                operand.remove(i + 1);\n                op.remove(i);\n     \
    \           i -= 1;\n            }\n        }\n        for (int i = 0; i < op.size();\
    \ i++) {\n            if (op.get(i).equals(\"-\")) {\n                Long a =\
    \ operand.get(i);\n                Long b = operand.get(i + 1);\n            \
    \    Long result = a - b;\n                operand.set(i, result);\n         \
    \       operand.remove(i + 1);\n                op.remove(i);\n              \
    \  i -= 1;\n            }\n        }\n        for (int i = 0; i < op.size(); i++)\
    \ {\n            if (op.get(i).equals(\"+\")) {\n                Long a = operand.get(i);\n\
    \                Long b = operand.get(i + 1);", "        // Write your code here\n\
    \        return operand.get(0);", "        long result = operand.get(0);\n   \
    \     long curr = 0;\n        long next = 0;\n        for (int i = 0; i < op.size();\
    \ i++) {\n            curr = operand.get(i);\n            next = operand.get(i\
    \ + 1);\n            switch (op.get(i)) {\n                case \"+\":\n     \
    \               result += next;\n                    break;\n                case\
    \ \"-\":\n                    result -= next;\n                    break;\n  \
    \              case \"*\":\n                    result *= next;\n            \
    \        break;\n                case \"//\":\n                    result /= next;\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long) Math.pow(result, next);\n                    break;\n     \
    \       }\n        }\n        return result;", '        return 0;', "        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        \n        int N = op.size();\n        long result = operand.get(0);\n\
    \        for (int i = 0; i < N; i++) {\n            switch (op.get(i)) {\n   \
    \             case \"+\":\n                    result += operand.get(i + 1);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i + 1);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i + 1);\n                \
    \    break;\n                case \"//\":\n                    result /= operand.get(i\
    \ + 1);\n                    break;\n                case \"**\":\n          \
    \          result = (long) Math.pow(result, operand.get(i + 1));\n           \
    \         break;\n            }\n        }\n        return result;", '        return
    0;', "        long result = operand.get(0);\n        for (int i = 0; i < op.size();\
    \ i++) {\n            if (op.get(i).equals(\"+\")) {\n                result +=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"-\")) {\n   \
    \             result -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"//\")) {\n                result /= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"**\")) {\n                result =\
    \ (long) Math.pow(result, operand.get(i + 1));\n            }\n        }\n   \
    \     return result;", '        return operand.get(0);', "        // Write your\
    \ code here.\n        if(op == null || operand == null || op.size() == 0 || operand.size()\
    \ < 2) {\n            return 0;\n        }\n        long result = operand.get(0);\n\
    \        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n\
    \                case \"+\":\n                    result += operand.get(i + 1);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i + 1);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i + 1);\n                \
    \    break;\n                case \"//\":\n                    result /= operand.get(i\
    \ + 1);\n                    break;\n                case \"**\":\n          \
    \          result = (long)Math.pow(result, operand.get(i + 1));\n            \
    \        break;\n            }\n        }\n        return result;", "        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        for (int i = 0; i\
    \ < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n          \
    \      result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n  \
    \              result = (long) Math.pow(result, operand.get(i + 1));\n       \
    \     }\n        }\n        return result;", '        return 0;', "        if\
    \ (op.size() == 0 || operand.size() == 0) {\n            return 0;\n        }\n\
    \        if (op.size() != operand.size() - 1) {\n            return 0;\n     \
    \   }\n        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) {\n                operand.set(i + 1, operand.get(i) + operand.get(i + 1));\n\
    \            } else if (op.get(i).equals(\"-\")) {\n                operand.set(i\
    \ + 1, operand.get(i) - operand.get(i + 1));\n            } else if (op.get(i).equals(\"\
    *\")) {\n                operand.set(i + 1, operand.get(i) * operand.get(i + 1));\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                operand.set(i\
    \ + 1, operand.get(i) / operand.get(i + 1));\n            } else if (op.get(i).equals(\"\
    **\")) {\n                operand.set(i + 1, (long) Math.pow(operand.get(i), operand.get(i\
    \ + 1)));\n            }\n        }\n        return operand.get(operand.size()\
    \ - 1);", "        long result = operand.get(0);\n        for (int i = 0; i <\
    \ op.size(); i++) {\n            result = op.get(i).equals(\"+\") ? result + operand.get(i\
    \ + 1) :\n            op.get(i).equals(\"-\") ? result - operand.get(i + 1) :\n\
    \            op.get(i).equals(\"*\") ? result * operand.get(i + 1) :\n       \
    \     op.get(i).equals(\"//\") ? result / operand.get(i + 1) :\n            op.get(i).equals(\"\
    **\") ? (long) Math.pow(result, operand.get(i + 1)) : 0;\n        }\n        return\
    \ result;", '        throw new UnsupportedOperationException("Waiting to be implemented.");',
  '        return 0;', "        long result = operand.get(0);\n        for (int i\
    \ = 0; i < op.size(); i++) {\n            long operand2 = operand.get(i + 1);\n\
    \            if (op.get(i).equals(\"+\")) {\n                result += operand2;\n\
    \            } else if (op.get(i).equals(\"-\")) {\n                result -=\
    \ operand2;\n            } else if (op.get(i).equals(\"*\")) {\n             \
    \   result *= operand2;\n            } else if (op.get(i).equals(\"/\")) {\n \
    \               result /= operand2;\n            } else if (op.get(i).equals(\"\
    ^\")) {\n                result = (long) Math.pow(result, operand2);\n       \
    \     }\n        }\n        return result;", "        long result = operand.get(0);\n\
    \        for (int i = 0; i < op.size(); i++) {\n            String operator =\
    \ op.get(i);\n            long operand2 = operand.get(i + 1);\n            if\
    \ (operator.equals(\"+\")) {\n                result += operand2;\n          \
    \  } else if (operator.equals(\"-\")) {\n                result -= operand2;\n\
    \            } else if (operator.equals(\"*\")) {\n                result *= operand2;\n\
    \            } else if (operator.equals(\"//\")) {\n                result /=\
    \ operand2;\n            } else if (operator.equals(\"**\")) {\n             \
    \   result = (long) Math.pow(result, operand2);\n            }\n        }\n  \
    \      return result;", "        while (operand.size() > 1) {\n            Long\
    \ left = operand.remove(0);\n            Long right = operand.remove(0);\n   \
    \         operand.add(0, doMath(left, right, op.remove(0)));\n        }\n    \
    \    return operand.get(0);", '        throw new UnsupportedOperationException("Waiting
    to be implemented.");', "        long result = operand.get(0);\n        for (int\
    \ i = 0; i < op.size(); i++) {\n            long n = operand.get(i + 1);\n   \
    \         if (op.get(i).equals(\"+\")) {\n                result += n;\n     \
    \       } else if (op.get(i).equals(\"-\")) {\n                result -= n;\n\
    \            } else if (op.get(i).equals(\"*\")) {\n                result *=\
    \ n;\n            } else if (op.get(i).equals(\"/\")) {\n                result\
    \ /= n;\n            } else if (op.get(i).equals(\"%\")) {\n                result\
    \ %= n;\n            } else if (op.get(i).equals(\"^\")) {\n                result\
    \ = (long) Math.pow(result, n);\n            }\n        }\n        return result;",
  "        long total = operand.get(0);\n        long tmp = 0;\n        for (int i\
    \ = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n   \
    \             total += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                total -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    *\")) {\n                total *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                total /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                total = (long) Math.pow(total,\
    \ operand.get(i + 1));\n            }\n        }\n        return total;", "  \
    \      // Write your code here\n        // To print results to the standard output\
    \ you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        for(int i = 0; i < op.size(); i++) {\n            if(op.get(i).equals(\"\
    //\")) {\n                operand.set(i, operand.get(i) / operand.get(i + 1));\n\
    \                operand.remove(i + 1);\n                op.remove(i);\n     \
    \           i--;\n            }\n        }\n        for(int i = 0; i < op.size();\
    \ i++) {\n            if(op.get(i).equals(\"**\")) {\n                operand.set(i,\
    \ (long)Math.pow(operand.get(i), operand.get(i + 1)));\n                operand.remove(i\
    \ + 1);\n                op.remove(i);\n                i--;\n            }\n\
    \        }\n        while(op.size() > 0) {\n            if(op.get(0).equals(\"\
    *\")) {\n                operand.set(0, operand.get(0) * operand.get(1));\n  \
    \              operand.remove(1);\n                op.remove(0);\n           \
    \ }\n            else if(op.get(0).equals(\"+\")) {\n                operand.set(0,\
    \ operand.get(0) + operand.get(1));\n                operand.remove(1);\n    \
    \            op.remove(0);\n            }\n            else if(op.get(0).equals(\"\
    -\")) {\n                operand.set(0, operand.get(0) - operand.get(1));\n  \
    \              operand.remove(1);\n                op.remove(0);\n           \
    \ }\n        }\n        return operand.get(0);", "        long result = operand.get(0);\n\
    \        for (int i = 0; i < op.size(); i++) {\n            switch (op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i\
    \ + 1);\n                    break;\n                case \"-\":\n           \
    \         result -= operand.get(i + 1);\n                    break;\n        \
    \        case \"*\":\n                    result *= operand.get(i + 1);\n    \
    \                break;\n                case \"//\":\n                    result\
    \ /= operand.get(i + 1);\n                    break;\n                case \"\
    **\":\n                    result = (long) Math.pow(result, operand.get(i + 1));\n\
    \                    break;\n            }\n        }\n        return result;",
  "        // Implement your function here\n        StringBuffer sb = new StringBuffer();\n\
    \        for (int i = 0; i < op.size(); i++) {\n            sb.append(operand.get(i)\
    \ + op.get(i));\n        }\n        sb.append(operand.get(operand.size() - 1));\n\
    \        // System.out.println(sb.toString());\n        ScriptEngineManager mgr\
    \ = new ScriptEngineManager();\n        ScriptEngine engine = mgr.getEngineByName(\"\
    JavaScript\");\n        try {\n            return (long) Double.parseDouble(engine.eval(sb.toString()).toString());\n\
    \        } catch (Exception e) {\n            return 0;\n        }", "       \
    \ long res = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n\
    \            if (op.get(i).equals(\"+\")) {\n                res += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                res\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                res *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                res /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    **\")) {\n                res = (long) Math.pow(res, operand.get(i + 1));\n  \
    \          }\n        }\n        return res;", "        long result = operand.get(0);\n\
    \        int i = 0;\n        while (i < op.size()) {\n            String operation\
    \ = op.get(i);\n            long rightOperand = operand.get(i + 1);\n        \
    \    if (operation.equals(\"+\")) {\n                result += rightOperand;\n\
    \            } else if (operation.equals(\"-\")) {\n                result -=\
    \ rightOperand;\n            } else if (operation.equals(\"*\")) {\n         \
    \       result *= rightOperand;\n            } else if (operation.equals(\"//\"\
    )) {\n                result /= rightOperand;\n            } else if (operation.equals(\"\
    **\")) {\n                result = (long) Math.pow(result, rightOperand);\n  \
    \          }\n            i++;\n        }\n        return result;", '        return
    0;', "        int len = op.size();\n        long cur = operand.get(0);\n     \
    \   for (int i = 0; i < len; i++) {\n            if (op.get(i).equals(\"+\"))\
    \ {\n                cur += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                cur -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    *\")) {\n                cur *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    /\")) {\n                cur /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    **\")) {\n                cur = (long) Math.pow(cur, operand.get(i + 1));\n  \
    \          }\n        }\n        return cur;", '        return 0;', "        //\
    \ Write your code here.\n        return 0;", "        // Write your code here\n\
    \        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long result\
    \ = operand.get(0);\n        int index = 0;\n        for(int i = 1; i < operand.size();\
    \ i++) {\n            String operation = op.get(index);\n            long currentNum\
    \ = operand.get(i);\n            if(operation.equals(\"+\")) {\n             \
    \   result += currentNum;\n            } else if(operation.equals(\"-\")) {\n\
    \                result -= currentNum;\n            } else if(operation.equals(\"\
    *\")) {\n                result *= currentNum;\n            } else if(operation.equals(\"\
    /\")) {\n                result /= currentNum;\n            } else if(operation.equals(\"\
    **\")) {\n                result = result.pow(currentNum);\n            }\n  \
    \          index++;\n        }\n        return result;", "        long a = operand.get(0);\n\
    \        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) {\n                a += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                a -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    *\")) {\n                a *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                a /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    **\")) {\n                a = (long) Math.pow(a, operand.get(i + 1));\n      \
    \      }\n        }\n        return a;", "        System.out.println(op.toString());\n\
    \        System.out.println(operand.toString());\n        LinkedList<Long> nums\
    \ = new LinkedList<>();\n        LinkedList<String> ops = new LinkedList<>();\n\
    \        long res = 0;\n        for (int i = 0; i < op.size(); i++) {\n      \
    \      if (op.get(i).equals(\"^\")) {\n                ops.add(op.get(i));\n \
    \           } else {\n                nums.add(operand.get(i));\n            \
    \    ops.add(op.get(i));\n                nums.add(operand.get(i + 1));\n    \
    \        }\n        }\n        // (2, 3, 4, 5)\n        // for i in range(0, len(nums),\
    \ 2):\n        // num = nums[i]\n        // op = ops[i]\n        // if op == '+':\n\
    \        // res += num\n        // elif op == '-':\n        // res -= num\n  \
    \      // elif op == '*':\n        // res *= num\n        // elif op == '//':\n\
    \        // res //= num\n        // elif op == '^':\n        // res = res ** num\n\
    \        long temp = 0;\n        for (int i = 0; i < nums.size(); i++) {\n   \
    \         temp = nums.get(i);\n            ops.removeFirst();\n            for\
    \ (int j = 0; j < ops.size(); j++) {\n                if (ops.get(j).equals(\"\
    +\")) {\n                    temp += nums.get(j + 1);\n                } else\
    \ if (ops.get(j).equals(\"-\")) {\n                    temp -= nums.get(j + 1);\n\
    \                } else if (ops.get(j).equals(\"*\")) {\n                    temp\
    \ *= nums.get(j + 1);\n                } else if (ops.get(j).equals(\"//\")) {\n\
    \                    temp /= nums.get(j + 1);\n                } else if (ops.get(j).equals(\"\
    ^\")) {\n                    temp = (long) Math.", "        Stack<Long> opStack\
    \ = new Stack<>();\n        for (int i = 0; i < op.size(); i++) {\n          \
    \  if (op.get(i).equals(\"+\")) {\n                opStack.push(operand.get(i)\
    \ + operand.get(i + 1));\n            } else if (op.get(i).equals(\"-\")) {\n\
    \                opStack.push(operand.get(i) - operand.get(i + 1));\n        \
    \    } else if (op.get(i).equals(\"*\")) {\n                opStack.push(operand.get(i)\
    \ * operand.get(i + 1));\n            } else if (op.get(i).equals(\"//\")) {\n\
    \                opStack.push(operand.get(i) / operand.get(i + 1));\n        \
    \    } else if (op.get(i).equals(\"**\")) {\n                opStack.push((long)\
    \ Math.pow(operand.get(i), operand.get(i + 1)));\n            }\n        }\n \
    \       return opStack.pop();", "        long result = operand.get(0);\n     \
    \   for (int i = 0; i < op.size(); i++) {\n            String curr = op.get(i);\n\
    \            long num = operand.get(i + 1);\n            if (curr.equals(\"+\"\
    )) {\n                result += num;\n            } else if (curr.equals(\"-\"\
    )) {\n                result -= num;\n            } else if (curr.equals(\"*\"\
    )) {\n                result *= num;\n            } else if (curr.equals(\"//\"\
    )) {\n                result /= num;\n            } else if (curr.equals(\"**\"\
    )) {\n                result = (long) Math.pow(result, num);\n            }\n\
    \        }\n        return result;", "        while (operand.size() > 1) {\n \
    \           int p = 1;\n            double temp = operand.get(0);\n          \
    \  double temp2 = operand.get(1);\n            for (int i = 0; i < op.size();\
    \ i++) {\n                if (op.get(i).equals(\"//\")) {\n                  \
    \  temp /= temp2;\n                    operand.remove(0);\n                  \
    \  operand.remove(0);\n                    operand.add(0, (long) temp);\n    \
    \                op.remove(i);\n                    p = 0;\n                 \
    \   break;\n                }\n                if (op.get(i).equals(\"**\")) {\n\
    \                    temp = Math.pow(temp, temp2);\n                    operand.remove(0);\n\
    \                    operand.remove(0);\n                    operand.add(0, (long)\
    \ temp);\n                    op.remove(i);\n                    p = 0;\n    \
    \                break;\n                }\n            }\n            if (p ==\
    \ 1) {\n                if (op.get(0).equals(\"+\")) {\n                    temp\
    \ += temp2;\n                    operand.remove(0);\n                    operand.remove(0);\n\
    \                    operand.add(0, (long) temp);\n                    op.remove(0);\n\
    \                }\n                if (op.get(0).equals(\"-\")) {\n         \
    \           temp -= temp2;\n                    operand.remove(0);\n         \
    \           operand.remove(0);\n                    operand.add(0, (long) temp);\n\
    \                    op.remove(0);\n                }\n                if (op.get(0).equals(\"\
    *\")) {\n                    temp *= temp2;\n                    operand.remove(0);\n\
    \                    operand.remove(0);\n                    operand.add(0, (long)\
    \ temp);\n                    op.remove(0);\n                }\n            }\n\
    \        }\n        return operand.get(0);", "        // WRITE YOUR CODE HERE\n\
    \        int k=1;\n        long result=operand.get(0);\n        while(k<op.size()){\n\
    \            if(op.get(k-1).equals(\"+\")){\n                result+=operand.get(k);\n\
    \            }\n            else if(op.get(k-1).equals(\"-\")){\n            \
    \    result-=operand.get(k);\n            }\n            else if(op.get(k-1).equals(\"\
    *\")){\n                result*=operand.get(k);\n            }\n            else\
    \ if(op.get(k-1).equals(\"/\")){\n                result/=operand.get(k);\n  \
    \          }\n            else if(op.get(k-1).equals(\"^\")){\n              \
    \  result=(long)Math.pow(result,operand.get(k));\n            }\n            k++;\n\
    \        }\n        return result;", '        return 0;', "        Stack<Integer>\
    \ stack = new Stack<>();\n        stack.push(0);\n        int i = 0;\n       \
    \ int j = 0;\n        while(i < op.size()){\n            switch(op.get(i)){\n\
    \                case \"+\":\n                    stack.push(j+1);\n         \
    \           j++;\n                    break;\n                case \"-\":\n  \
    \                  stack.push(j+1);\n                    j++;\n              \
    \      break;\n                case \"*\":\n                    stack.push(j+1);\n\
    \                    j++;\n                    break;\n                case \"\
    //\":\n                    stack.push(j+1);\n                    j++;\n      \
    \              break;\n                case \"**\":\n                    stack.push(j+1);\n\
    \                    j++;\n                    break;\n            }\n       \
    \     i++;\n        }\n        long result = operand.get(stack.pop());\n     \
    \   while(!stack.isEmpty()){\n            switch(op.get(stack.size()-1)){\n  \
    \              case \"+\":\n                    result += operand.get(stack.pop());\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(stack.pop());\n                    break;\n          \
    \      case \"*\":\n                    result *= operand.get(stack.pop());\n\
    \                    break;\n                case \"//\":\n                  \
    \  result = result / operand.get(stack.pop());\n                    break;\n \
    \               case \"**\":\n                    result = (long)Math.pow(result,\
    \ operand.get(stack.pop()));\n                    break;\n            }\n    \
    \    }\n        return result;", "        long n = operand.get(0);\n        for\
    \ (int i = 0; i < op.size(); i++) {\n            String o = op.get(i);\n     \
    \       long x = operand.get(i + 1);\n            if (o.equals(\"+\")) {\n   \
    \             n += x;\n            } else if (o.equals(\"-\")) {\n           \
    \     n -= x;\n            } else if (o.equals(\"*\")) {\n                n *=\
    \ x;\n            } else if (o.equals(\"//\")) {\n                n /= x;\n  \
    \          } else if (o.equals(\"**\")) {\n                n = (long) Math.pow(n,\
    \ x);\n            }\n        }\n        return n;", '        return 0;', "  \
    \      // Write your code here.\n        if(op.size() == 1)\n        {\n     \
    \       if(op.get(0).equals(\"+\"))\n            {\n                long result\
    \ = 0;\n                for(long i : operand)\n                {\n           \
    \         result += i;\n                }\n                return result;\n  \
    \          }\n            else if(op.get(0).equals(\"-\"))\n            {\n  \
    \              long result = operand.get(0);\n                for(int i = 1; i\
    \ < operand.size(); i++)\n                {\n                    result -= operand.get(i);\n\
    \                }\n                return result;\n            }\n          \
    \  else if(op.get(0).equals(\"*\"))\n            {\n                long result\
    \ = 1;\n                for(long i : operand)\n                {\n           \
    \         result *= i;\n                }\n                return result;\n  \
    \          }\n            else if(op.get(0).equals(\"//\"))\n            {\n \
    \               long result = operand.get(0);\n                for(int i = 1;\
    \ i < operand.size(); i++)\n                {\n                    result /= operand.get(i);\n\
    \                }\n                return result;\n            }\n          \
    \  else if(op.get(0).equals(\"**\"))\n            {\n                long result\
    \ = operand.get(0);\n                for(int i = 1; i < operand.size(); i++)\n\
    \                {\n                    result = (long)Math.pow(result, operand.get(i));\n\
    \                }\n                return result;\n            }\n        }\n\
    \        else\n        {\n            long result = operand.get(0);\n        \
    \    for(int i = 0; i < op.size(); i++)\n            {\n                if(op.get(i).equals(\"\
    +\"))\n                {\n                    result += operand.get(i+1);\n  \
    \              }\n                else if(op.get(i).equals(\"-\"))\n         \
    \       {\n                    result -= operand.get(i+1);\n                }\n\
    \                else if(op.get(i).equals(\"*\"))\n                {\n       \
    \             result *= operand.get(i+1);\n               ", "        Stack<Long>\
    \ stack = new Stack<>();\n        int opIndex = 0;\n        for (int i = 0; i\
    \ < operand.size(); i++) {\n            long operandA = operand.get(i);\n    \
    \        String operator = op.get(opIndex);\n            opIndex++;\n        \
    \    long operandB = operand.get(i + 1);\n            long ans = calc(operandA,\
    \ operator, operandB);\n            stack.push(ans);\n        }\n        long\
    \ finalAns = stack.pop();\n        return finalAns;", '        return 0;', " \
    \       for (int i = 0; i < op.size(); i++) {\n            long a = operand.get(i);\n\
    \            long b = operand.get(i + 1);\n            operand.remove(i);\n  \
    \          if (op.get(i).equals(\"+\")) {\n                operand.set(i, a +\
    \ b);\n            } else if (op.get(i).equals(\"-\")) {\n                operand.set(i,\
    \ a - b);\n            } else if (op.get(i).equals(\"*\")) {\n               \
    \ operand.set(i, a * b);\n            } else if (op.get(i).equals(\"/\")) {\n\
    \                operand.set(i, a / b);\n            } else if (op.get(i).equals(\"\
    ^\")) {\n                operand.set(i, (long) Math.pow(a, b));\n            }\n\
    \            op.remove(i);\n            i--;\n        }\n        return operand.get(0);",
  "        long ans = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
    \ {\n            if (op.get(i).equals(\"+\")) {\n                ans += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                ans\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                ans *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                ans /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    **\")) {\n                ans = (long) Math.pow(ans, operand.get(i + 1));\n  \
    \          }\n        }\n        return ans;", "        // Your code here\n  \
    \      // 0 for '+', 1 for '-', 2 for '*', 3 for '//', 4 for '**'\n        //\
    \ which is the same as the normal order of operation.\n        // therefore if\
    \ we traverse from the beginning, we just calculate as\n        // we see. \n\
    \        // \n        // ex. [\"+\", \"-\", \"*\"]\n        // [5, 5, 5, 5]\n\
    \        // 5 + 5 - 5 * 5 = 0.\n        //\n        // the fist one is a special\
    \ case, since we need the first two element to \n        // start calculating.\n\
    \        long res = operand.get(0);\n        if (op.get(0).equals(\"+\")){\n \
    \           res += operand.get(1);\n        }\n        else if (op.get(0).equals(\"\
    -\")){\n            res -= operand.get(1);\n        }\n        else if (op.get(0).equals(\"\
    *\")){\n            res *= operand.get(1);\n        }\n        else if (op.get(0).equals(\"\
    //\")){\n            res /= operand.get(1);\n        }\n        else if (op.get(0).equals(\"\
    **\")){\n            res = (long)Math.pow(res, operand.get(1));\n        }\n \
    \       for (int i = 1; i < op.size(); i++){\n            if (op.get(i).equals(\"\
    +\")){\n                res += operand.get(i+1);\n            }\n            else\
    \ if (op.get(i).equals(\"-\")){\n                res -= operand.get(i+1);\n  \
    \          }\n            else if (op.get(i).equals(\"*\")){\n               \
    \ res *= operand.get(i+1);\n            }\n            else if (op.get(i).equals(\"\
    //\")){\n                res /= operand.get(i+1);\n            }\n           \
    \ else if (op.get(i).equals(\"**\")){\n                res = (long)Math.pow(res,\
    \ operand.get(i+1));\n           ", "        //write your code here\n        ArrayList<String>\
    \ newOp = new ArrayList<>();\n        ArrayList<Long> newOperand = new ArrayList<>();\n\
    \        int i = 0;\n        while (i < op.size()) {\n            if (op.get(i).equals(\"\
    //\")) {\n                newOp.add(\"//\");\n                newOperand.add(operand.get(i));\n\
    \                newOperand.add(operand.get(i + 1));\n                i += 2;\n\
    \            } else if (op.get(i).equals(\"**\")) {\n                newOp.add(\"\
    **\");\n                newOperand.add(operand.get(i));\n                newOperand.add(operand.get(i\
    \ + 1));\n                i += 2;\n            } else {\n                newOp.add(op.get(i));\n\
    \                newOperand.add(operand.get(i));\n                i++;\n     \
    \       }\n        }\n        long ans = newOperand.get(0);\n        for (int\
    \ j = 0; j < newOp.size(); j++) {\n            if (newOp.get(j).equals(\"//\"\
    )) {\n                ans = ans / newOperand.get(j + 1);\n            } else if\
    \ (newOp.get(j).equals(\"**\")) {\n                ans = (long) Math.pow(ans,\
    \ newOperand.get(j + 1));\n            } else if (newOp.get(j).equals(\"+\"))\
    \ {\n                ans += newOperand.get(j + 1);\n            } else if (newOp.get(j).equals(\"\
    -\")) {\n                ans -= newOperand.get(j + 1);\n            } else if\
    \ (newOp.get(j).equals(\"*\")) {\n                ans *= newOperand.get(j + 1);\n\
    \            }\n        }\n        return ans;", "        long result = operand.get(0);\n\
    \        int i = 0;\n        for (long l : operand) {\n            if (i >= op.size())\
    \ {\n                break;\n            }\n            String opstr = op.get(i);\n\
    \            if (opstr.equals(\"+\")) {\n                result += l;\n      \
    \      } else if (opstr.equals(\"-\")) {\n                result -= l;\n     \
    \       } else if (opstr.equals(\"*\")) {\n                result *= l;\n    \
    \        } else if (opstr.equals(\"/\")) {\n                result /= l;\n   \
    \         } else if (opstr.equals(\"^\")) {\n                result = (long) Math.pow(result,\
    \ l);\n            }\n            i++;\n        }\n        return result;", " \
    \       long res = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
    \ {\n            switch (op.get(i)) {\n                case \"+\":\n         \
    \           res += operand.get(i + 1);\n                    break;\n         \
    \       case \"-\":\n                    res -= operand.get(i + 1);\n        \
    \            break;\n                case \"*\":\n                    res *= operand.get(i\
    \ + 1);\n                    break;\n                case \"//\":\n          \
    \          res /= operand.get(i + 1);\n                    break;\n          \
    \      case \"**\":\n                    res = (long) Math.pow(res, operand.get(i\
    \ + 1));\n                    break;\n            }\n        }\n        return\
    \ res;", "        Stack<Long> operands = new Stack<>();\n        Stack<String>\
    \ operators = new Stack<>();\n        for (int i = 0; i < op.size(); i++) {\n\
    \            operators.push(op.get(i));\n        }\n        for (int i = 0; i\
    \ < operand.size(); i++) {\n            operands.push(operand.get(i));\n     \
    \   }\n        while (operators.size() > 0) {\n            String str = operators.pop();\n\
    \            if (str.equals(\"+\")) {\n                operands.push(operands.pop()\
    \ + operands.pop());\n            } else if (str.equals(\"-\")) {\n          \
    \      operands.push(operands.pop() - operands.pop());\n            } else if\
    \ (str.equals(\"*\")) {\n                operands.push(operands.pop() * operands.pop());\n\
    \            } else if (str.equals(\"//\")) {\n                operands.push(operands.pop()\
    \ / operands.pop());\n            } else if (str.equals(\"**\")) {\n         \
    \       operands.push((long) Math.pow(operands.pop(), operands.pop()));\n    \
    \        }\n        }\n        return operands.pop();", '        return 0;', " \
    \       for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) {\n                long temp = operand.get(i) + operand.get(i + 1);\n  \
    \              operand.set(i, temp);\n                operand.remove(i + 1);\n\
    \                op.remove(i);\n                i--;\n            } else if (op.get(i).equals(\"\
    -\")) {\n                long temp = operand.get(i) - operand.get(i + 1);\n  \
    \              operand.set(i, temp);\n                operand.remove(i + 1);\n\
    \                op.remove(i);\n                i--;\n            } else if (op.get(i).equals(\"\
    *\")) {\n                long temp = operand.get(i) * operand.get(i + 1);\n  \
    \              operand.set(i, temp);\n                operand.remove(i + 1);\n\
    \                op.remove(i);\n                i--;\n            } else if (op.get(i).equals(\"\
    //\")) {\n                long temp = operand.get(i) / operand.get(i + 1);\n \
    \               operand.set(i, temp);\n                operand.remove(i + 1);\n\
    \                op.remove(i);\n                i--;\n            } else if (op.get(i).equals(\"\
    **\")) {\n                long temp = operand.get(i).longValue();\n          \
    \      temp = (long) Math.pow(temp, operand.get(i + 1));\n                operand.set(i,\
    \ temp);\n                operand.remove(i + 1);\n                op.remove(i);\n\
    \                i--;\n            }\n        }\n        return operand.get(0);",
  "        // Write your code here\n        // To print results to the standard output\
    \ you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        // Algorithm:\n        // 1. Iterate through operator\
    \ array list and use a stack to iterate through the operand array list.\n    \
    \    // 2. If operator is exponential:\n        // 2.1 pop the first value and\
    \ store it in b.\n        // 2.2 pop the second value and store it in a.\n   \
    \     // 2.3 push a^b back to the stack.\n        // 3. If operator is multiply,\
    \ divide, or subtract:\n        // 3.1 pop the first value and store it in b.\n\
    \        // 3.2 pop the second value and store it in a.\n        // 3.3 perform\
    \ the operation and push the result back to the stack.\n        // 4. If operator\
    \ is add:\n        // 4.1 pop the first value and store it in b.\n        // 4.2\
    \ pop the second value and store it in a.\n        // 4.3 perform the operation\
    \ and push the result back to the stack.\n        // 5. return the last value\
    \ in the stack.\n        Stack<Long> stack = new Stack<>();\n        for (int\
    \ i = op.size() - 1; i >= 0; i--) {\n            stack.push(operand.get(i + 1));\n\
    \            stack.push(operand.get(i));\n            String operation = op.get(i);\n\
    \            if (operation.equals(\"^\")) {\n                Long b = stack.pop();\n\
    \                Long a = stack.pop();\n                stack.push((long) Math.pow(a,\
    \ b));\n            } else if (operation.equals(\"*\") || operation.equals(\"\
    /\") || operation.equals(\"-\")) {\n                Long b = stack.pop();\n  \
    \              Long a = stack.pop();\n                if (operation.equals(\"\
    *\")) {\n                    stack.push(a * b);\n                } else if (operation.equals(\"\
    /\")) {\n                    stack.push(a / b);\n                } else {\n  \
    \                  stack.push(a - b);\n                }\n            } else {\n\
    \                Long b = stack.", "        // write your code here\n        long\
    \ result = operand.get(0);\n        for(int i = 0; i < op.size(); i++) {\n   \
    \         if(op.get(i).equals(\"+\")) {\n                result += operand.get(i+1);\n\
    \            } else if(op.get(i).equals(\"-\")) {\n                result -= operand.get(i+1);\n\
    \            } else if(op.get(i).equals(\"*\")) {\n                result *= operand.get(i+1);\n\
    \            } else if(op.get(i).equals(\"//\")) {\n                result /=\
    \ operand.get(i+1);\n            } else if(op.get(i).equals(\"**\")) {\n     \
    \           result = (long)Math.pow(result, operand.get(i+1));\n            }\n\
    \        }\n        return result;", "        long output = operand.get(0);\n\
    \        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) {\n                output += operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"-\")) {\n                output -= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"*\")) {\n                output *=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"//\")) {\n  \
    \              output /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    **\")) {\n                output = (long) Math.pow(output, operand.get(i + 1));\n\
    \            }\n        }\n        return output;", "        long result = operand.get(0);\n\
    \        operand.remove(0);\n        int i = 0;\n        while (operand.size()\
    \ > 0) {\n            switch (op.get(i)) {\n                case \"+\":\n    \
    \                result += operand.get(0);\n                    break;\n     \
    \           case \"-\":\n                    result -= operand.get(0);\n     \
    \               break;\n                case \"*\":\n                    result\
    \ *= operand.get(0);\n                    break;\n                case \"//\"\
    :\n                    result /= operand.get(0);\n                    break;\n\
    \                case \"**\":\n                    result = (long) Math.pow(result,\
    \ operand.get(0));\n                    break;\n            }\n            operand.remove(0);\n\
    \            i++;\n        }\n        return result;", "        long result =\
    \ operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n           \
    \ if (op.get(i).equals(\"+\")) {\n                result += operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"-\")) {\n                result -=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n   \
    \             result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;", " \
    \       // Your Code Here\n        Stack<String>operators = new Stack<>();\n \
    \       Stack<Long>numbers = new Stack<>();\n        int i = 0;\n        long\
    \ result = 0;\n        for(; i < op.size(); i++){\n            if(op.get(i).equals(\"\
    *\") || op.get(i).equals(\"/\")){\n                long n1 = numbers.pop();\n\
    \                long n2 = operand.get(i+1);\n                if(op.get(i).equals(\"\
    *\")){\n                    numbers.push(n1*n2);\n                }\n        \
    \        else{\n                    numbers.push(n1/n2);\n                }\n\
    \            }\n            else{\n                numbers.push(operand.get(i));\n\
    \                operators.push(op.get(i));\n            }\n        }\n      \
    \  numbers.push(operand.get(i));\n        while(!operators.isEmpty()){\n     \
    \       long n1 = numbers.pop();\n            long n2 = numbers.pop();\n     \
    \       String operator = operators.pop();\n            if(operator.equals(\"\
    +\")){\n                result = n1 + n2;\n            }\n            else{\n\
    \                result = n1 - n2;\n            }\n            numbers.push(result);\n\
    \        }\n        return result;", "        long result = operand.get(0);\n\
    \        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) {\n                result += operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"-\")) {\n                result -= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"*\")) {\n                result *=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"//\")) {\n  \
    \              result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    **\")) {\n                result = (long) Math.pow(result, operand.get(i + 1));\n\
    \            }\n        }\n        return result;", "        long result = operand.get(0);\n\
    \        for (int i = 0; i < op.size(); i++) {\n            switch (op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i\
    \ + 1);\n                    break;\n                case \"-\":\n           \
    \         result -= operand.get(i + 1);\n                    break;\n        \
    \        case \"*\":\n                    result *= operand.get(i + 1);\n    \
    \                break;\n                case \"//\":\n                    result\
    \ /= operand.get(i + 1);\n                    break;\n                case \"\
    **\":\n                    result = (long) Math.pow(result, operand.get(i + 1));\n\
    \                    break;\n            }\n        }\n        return result;",
  "        long result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
    \ {\n            if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;", '        return
    0;', '        return -1;', "\t\t// return 1;\n\t\tint ai = 0;\n\t\tint bi = 1;\n\
    \t\tint oi = 0;\n\t\twhile (bi < operand.size()) {\n\t\t\tSystem.out.println(ai\
    \ + \":\" + bi + \":\" + oi);\n\t\t\tswitch (op.get(oi)) {\n\t\t\t\tcase \"+\"\
    :\n\t\t\t\t\toperand.set(ai, operand.get(ai) + operand.get(bi));\n\t\t\t\t\tbreak;\n\
    \t\t\t\tcase \"-\":\n\t\t\t\t\toperand.set(ai, operand.get(ai) - operand.get(bi));\n\
    \t\t\t\t\tbreak;\n\t\t\t\tcase \"*\":\n\t\t\t\t\toperand.set(ai, operand.get(ai)\
    \ * operand.get(bi));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"//\":\n\t\t\t\t\toperand.set(ai,\
    \ operand.get(ai) / operand.get(bi));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"**\":\n\
    \t\t\t\t\toperand.set(ai, (long)Math.pow(operand.get(ai), operand.get(bi)));\n\
    \t\t\t\t\tbreak;\n\t\t\t}\n\t\t\toperand.remove(bi);\n\t\t\top.remove(oi);\n\t\
    \t\toi--;\n\t\t\tif (oi < 0) oi = 0;\n\t\t}\n\t\treturn operand.get(0);", "  \
    \      // write your code here..\n        LinkedList<String> ops = new LinkedList<>(op);\n\
    \        LinkedList<Long> operands = new LinkedList<>(operand);\n        return\
    \ eval(ops, operands);", "        long ans = operand.get(0);\n        for (int\
    \ i = 0; i < op.size(); i++) {\n            switch (op.get(i)) {\n           \
    \     case \"+\":\n                    ans += operand.get(i + 1);\n          \
    \          break;\n                case \"-\":\n                    ans -= operand.get(i\
    \ + 1);\n                    break;\n                case \"*\":\n           \
    \         ans *= operand.get(i + 1);\n                    break;\n           \
    \     case \"//\":\n                    ans /= operand.get(i + 1);\n         \
    \           break;\n                case \"**\":\n                    ans = (long)\
    \ Math.pow(ans, operand.get(i + 1));\n                    break;\n           \
    \ }\n        }\n        return ans;", "        System.out.println(op);\n     \
    \   System.out.println(operand);\n        return 0;", '        // write your code
    here', "        long result = operand.get(0);\n        for (int i = 0; i < op.size();\
    \ i++) {\n            result = doAlgebraOperation(result, op.get(i), operand.get(i\
    \ + 1));\n        }\n        return result;", "        long result = operand.get(0);\n\
    \        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) {\n                result += operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"-\")) {\n                result -= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"*\")) {\n                result *=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"//\")) {\n  \
    \              result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    **\")) {\n                result = (long) Math.pow(result, operand.get(i + 1));\n\
    \            }\n        }\n        return result;", '        return operand.get(0);',
  "        int n = op.size();\n        long ans = operand.get(0);\n        for (int\
    \ i = 0; i < n; i++) {\n            long oper = operand.get(i + 1);\n        \
    \    if (op.get(i).equals(\"+\")) {\n                ans += oper;\n          \
    \  } else if (op.get(i).equals(\"-\")) {\n                ans -= oper;\n     \
    \       } else if (op.get(i).equals(\"*\")) {\n                ans *= oper;\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                ans /= oper;\n\
    \            } else if (op.get(i).equals(\"**\")) {\n                ans = (long)\
    \ Math.pow(ans, oper);\n            }\n        }\n        return ans;", "    \
    \    //Write your code here\n        long result = operand.get(0);\n        for(int\
    \ i = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n            \
    \    case \"+\":\n                    result += operand.get(i+1);\n          \
    \          break;\n                case \"-\":\n                    result -=\
    \ operand.get(i+1);\n                    break;\n                case \"*\":\n\
    \                    result *= operand.get(i+1);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i+1);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long)Math.pow(result, operand.get(i+1));\n                    break;\n\
    \            }\n        }\n        return result;", "        long res = operand.get(0);\n\
    \        for (int i = 0; i < op.size(); i++) {\n            switch (op.get(i))\
    \ {\n                case \"+\":\n                    res += operand.get(i + 1);\n\
    \                    break;\n                case \"-\":\n                   \
    \ res -= operand.get(i + 1);\n                    break;\n                case\
    \ \"*\":\n                    res *= operand.get(i + 1);\n                   \
    \ break;\n                case \"//\":\n                    res /= operand.get(i\
    \ + 1);\n                    break;\n                case \"**\":\n          \
    \          res = (long) Math.pow(res, operand.get(i + 1));\n                 \
    \   break;\n            }\n        }\n        return res;", "        // write\
    \ your code here.\n        Deque<Long> st = new ArrayDeque<>();\n        long\
    \ ans = operand.get(0);\n        st.push(ans);\n        for(int i = 1; i < operand.size();\
    \ i++) {\n            st.push(operand.get(i));\n            switch(op.get(i -\
    \ 1)) {\n                case \"+\": st.push(st.pop() + st.pop()); break;\n  \
    \              case \"-\": st.push(-st.pop() + st.pop()); break;\n           \
    \     case \"*\": st.push(st.pop() * st.pop()); break;\n                case \"\
    //\": st.push(Long.valueOf(st.pop() / st.pop())); break;\n                case\
    \ \"**\": st.push(Long.valueOf(Math.pow(st.pop(), st.pop()))); break;\n      \
    \      }\n        }\n        while(!st.isEmpty()) ans += st.pop();\n        return\
    \ ans;", "        long total = operand.get(0);\n        for (int i = 0; i < op.size();\
    \ i++) {\n            if (op.get(i).equals(\"+\")) {\n                total +=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"-\")) {\n   \
    \             total -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    *\")) {\n                total *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                total /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                total = (long) Math.pow(total,\
    \ operand.get(i + 1));\n            }\n        }\n        return total;", "  \
    \      // Decalre a stack to store operands (we are going to use it to evaluate\
    \ the algebraic expression by \"postfix\" way)\n        Stack<Long> operands =\
    \ new Stack<>();\n        // Loop through all operators\n        for (int i =\
    \ 0; i < op.size(); i++) {\n            // Get the current operator\n        \
    \    String currentOperator = op.get(i);\n            // Get the first number\n\
    \            long firstNumber = operand.get(i);\n            // Get the second\
    \ number\n            long secondNumber = operand.get(i + 1);\n            //\
    \ Switch case for all algebra operations\n            switch (currentOperator)\
    \ {\n                case \"+\":\n                    operands.push(firstNumber\
    \ + secondNumber);\n                    break;\n                case \"-\":\n\
    \                    operands.push(firstNumber - secondNumber);\n            \
    \        break;\n                case \"*\":\n                    operands.push(firstNumber\
    \ * secondNumber);\n                    break;\n                case \"//\":\n\
    \                    operands.push(firstNumber / secondNumber);\n            \
    \        break;\n                case \"**\":\n                    operands.push((long)\
    \ Math.pow(firstNumber, secondNumber));\n                    break;\n        \
    \    }\n        }\n        // Return the final result\n        return operands.pop();",
  "        long answer = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
    \ {\n            if (op.get(i).equals(\"+\")) {\n                answer += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                answer\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                answer *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                answer /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                answer = (long) Math.pow(answer,\
    \ operand.get(i + 1));\n            }\n        }\n        return answer;", '        return
    0;', "        ArrayList<Pair<String, Long>> operatorAndOperand = new ArrayList<>();\n\
    \        for (int i = 0; i < op.size(); i++) {\n            operatorAndOperand.add(new\
    \ Pair<>(op.get(i), operand.get(i)));\n        }\n        operatorAndOperand.add(new\
    \ Pair<>(\"\", operand.get(operand.size() - 1)));\n        long result = 0;\n\
    \        boolean addNegativeFlag = false;\n        for (int i = 0; i < operatorAndOperand.size();\
    \ i++) {\n            if (operatorAndOperand.get(i).getValue0().equals(\"-\"))\
    \ {\n                addNegativeFlag = true;\n            } else if (operatorAndOperand.get(i).getValue0().equals(\"\
    \")) {\n                if (addNegativeFlag) {\n                    result -=\
    \ operatorAndOperand.get(i).getValue1();\n                    addNegativeFlag\
    \ = false;\n                } else {\n                    result += operatorAndOperand.get(i).getValue1();\n\
    \                }\n            } else if (operatorAndOperand.get(i).getValue0().equals(\"\
    +\")) {\n                result += operatorAndOperand.get(i).getValue1();\n  \
    \          } else if (operatorAndOperand.get(i).getValue0().equals(\"*\")) {\n\
    \                result *= operatorAndOperand.get(i).getValue1();\n          \
    \  } else if (operatorAndOperand.get(i).getValue0().equals(\"/\")) {\n       \
    \         result /= operatorAndOperand.get(i).getValue1();\n            } else\
    \ if (operatorAndOperand.get(i).getValue0().equals(\"^\")) {\n               \
    \ result = (long) Math.pow(result, operatorAndOperand.get(i).getValue1());\n \
    \           }\n        }\n        return result;", '        return doAlgebra(op,
    operand, 0, 0);', "        int i = 0;\n        while (operand.size() > 1) {\n\
    \            long temp = 0;\n            switch (op.get(i)) {\n              \
    \  case \"+\":\n                    temp = operand.get(i) + operand.get(i + 1);\n\
    \                    break;\n                case \"-\":\n                   \
    \ temp = operand.get(i) - operand.get(i + 1);\n                    break;\n  \
    \              case \"*\":\n                    temp = operand.get(i) * operand.get(i\
    \ + 1);\n                    break;\n                case \"//\":\n          \
    \          temp = operand.get(i) / operand.get(i + 1);\n                    break;\n\
    \                case \"**\":\n                    temp = (long) Math.pow(operand.get(i),\
    \ operand.get(i + 1));\n                    break;\n            }\n          \
    \  operand.set(i, temp);\n            operand.remove(i + 1);\n            op.remove(i);\n\
    \        }\n        return operand.get(0);", "        BigInteger ret = BigInteger.valueOf(operand.get(0));\n\
    \        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) {\n                ret = ret.add(BigInteger.valueOf(operand.get(i + 1)));\n\
    \            } else if (op.get(i).equals(\"-\")) {\n                ret = ret.subtract(BigInteger.valueOf(operand.get(i\
    \ + 1)));\n            } else if (op.get(i).equals(\"*\")) {\n               \
    \ ret = ret.multiply(BigInteger.valueOf(operand.get(i + 1)));\n            } else\
    \ if (op.get(i).equals(\"//\")) {\n                ret = ret.divide(BigInteger.valueOf(operand.get(i\
    \ + 1)));\n            } else if (op.get(i).equals(\"**\")) {\n              \
    \  ret = ret.pow(operand.get(i + 1).intValue());\n            }\n        }\n \
    \       return ret.longValue();", "        if (op.size() == 0 || operand.size()\
    \ < 2)\n            return -1;\n        int[][] order = {{1, 0, 0, 0, 0}, {1,\
    \ 1, 0, 0, 0}, {1, 1, 1, 0, 0}, {1, 1, 1, 1, 0}, {1, 1, 1, 1, 1}};\n        int[]\
    \ precedence = {0, 1, 2, 3, 4};\n        int[] algebricOperations = {1, 2, 3,\
    \ 4, 5};\n        //Exponentiation\n        for (int i = 0; i < op.size(); i++)\
    \ {\n            for (int j = 0; j < order.length; j++) {\n                if\
    \ (op.get(i).equals(\"**\") && order[j][3] == 1) {\n                    operand.set(i,\
    \ (long)Math.pow(operand.get(i), operand.get(i + 1)));\n                    operand.remove(i\
    \ + 1);\n                    op.remove(i);\n                    i--;\n       \
    \             break;\n                }\n            }\n        }\n        //Multiplication\n\
    \        for (int i = 0; i < op.size(); i++) {\n            for (int j = 0; j\
    \ < order.length; j++) {\n                if (op.get(i).equals(\"*\") && order[j][2]\
    \ == 1) {\n                    operand.set(i, operand.get(i) * operand.get(i +\
    \ 1));\n                    operand.remove(i + 1);\n                    op.remove(i);\n\
    \                    i--;\n                    break;\n                }\n   \
    \         }\n        }\n        //Floor division\n        for (int i = 0; i <\
    \ op.size(); i++) {\n            for (int j = 0; j < order.length; j++) {\n  \
    \              if (op.get(i).equals(\"//\") && order[j][2] == 1) {\n         \
    \           operand.set(i, operand.get(i) / operand.get(i + 1));\n           \
    \         operand.remove(i + 1);\n                    op.remove(i);\n", "    \
    \    long ans = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n\
    \            long num = operand.get(i + 1);\n            if (op.get(i).equals(\"\
    +\")) {\n                ans += num;\n            } else if (op.get(i).equals(\"\
    -\")) {\n                ans -= num;\n            } else if (op.get(i).equals(\"\
    *\")) {\n                ans *= num;\n            } else if (op.get(i).equals(\"\
    /\")) {\n                ans /= num;\n            } else if (op.get(i).equals(\"\
    ^\")) {\n                ans = (long) Math.pow(ans, num);\n            }\n   \
    \     }\n        return ans;", "        long result = operand.get(0);\n      \
    \  for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) {\n                result += operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"-\")) {\n                result -= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"*\")) {\n                result *=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"//\")) {\n  \
    \              result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    **\")) {\n                result = (long) Math.pow(result, operand.get(i + 1));\n\
    \            }\n        }\n        return result;", "        long res = operand.get(0);\n\
    \        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) {\n                res += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                res -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    *\")) {\n                res *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    /\")) {\n                res /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    ^\")) {\n                res = (long) Math.pow(res, operand.get(i + 1));\n   \
    \         }\n        }\n        return res;", "        // Write your code here!\n\
    \        long res = operand.get(0);\n        for(int i = 0; i < op.size(); i++){\n\
    \            switch(op.get(i)){\n                case \"+\":\n               \
    \     res += operand.get(i+1);\n                    break;\n                case\
    \ \"-\":\n                    res -= operand.get(i+1);\n                    break;\n\
    \                case \"*\":\n                    res *= operand.get(i+1);\n \
    \                   break;\n                case \"//\":\n                   \
    \ res /= operand.get(i+1);\n                    break;\n                case \"\
    **\":\n                    res = (long)Math.pow(res, operand.get(i+1));\n    \
    \                break;\n            }\n        }\n        return res;"]
stop_tokens:
- "\n    }\n"
