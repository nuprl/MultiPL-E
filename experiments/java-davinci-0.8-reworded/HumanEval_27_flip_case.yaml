name: HumanEval_27_flip_case
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // For a given string, flip lowercase characters to uppercase\
  \ and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\"\
  )\n    public static String flipCase(String string) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(flipCase((\"\
  \")).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n\
  \    assert(flipCase((\"These violent delights have violent ends\")).equals((\"\
  tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
completions: ["        String answer = \"\";\n        for (int i = 0; i < string.length();\
    \ i++) {\n            if (Character.isLowerCase(string.charAt(i))) {\n       \
    \         answer += Character.toUpperCase(string.charAt(i));\n            } else\
    \ {\n                answer += Character.toLowerCase(string.charAt(i));\n    \
    \        }\n        }\n        return answer;", "        return string.chars()\n\
    \            .mapToObj(c -> Character.isLetter(c) ?\n                       (Character.isUpperCase(c)\
    \ ?\n                        Character.toLowerCase(c) :\n                    \
    \    Character.toUpperCase(c)) :\n                       Character.toString((char)\
    \ c))\n            .collect(Collectors.joining());", "        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", '        return null;', '        return
    null;', '        return null;', "        StringBuilder ret = new StringBuilder();\n\
    \        string.chars().forEach(c -> {\n            if (Character.isLowerCase(c))\
    \ {\n                ret.append(Character.toUpperCase(c));\n            } else\
    \ {\n                ret.append(Character.toLowerCase(c));\n            }\n  \
    \      });\n        return ret.toString();", '        return null;', "       \
    \ // write your code here\n        // >>> flipCase((\"hELLO\"))\n        // (\"\
    Hello\")\n        return null;", '        return null;', "        StringBuilder\
    \ sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n \
    \           if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();", '        return "";', '        return
    string.toLowerCase();', "        String result = \"\";\n        for (int i = 0;\
    \ i < string.length(); i++) {\n            if (Character.isLowerCase(string.charAt(i)))\
    \ {\n                result += Character.toUpperCase(string.charAt(i));\n    \
    \        } else {\n                result += Character.toLowerCase(string.charAt(i));\n\
    \            }\n        }\n        return result;", "        StringBuilder sb\
    \ = new StringBuilder();\n        for (char ch : string.toCharArray()) {\n   \
    \         if (Character.isUpperCase(ch)) {\n                sb.append(Character.toLowerCase(ch));\n\
    \            } else {\n                sb.append(Character.toUpperCase(ch));\n\
    \            }\n        }\n        return sb.toString();", "      char[] chars\
    \ = string.toCharArray();\n      for (int i = 0; i < chars.length; i++) {\n  \
    \      char c = chars[i];\n        chars[i] = Character.isUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.toUpperCase(c);\n      }\n      return new String(chars);", "  \
    \      StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray())\
    \ {\n            if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        return string.chars()\n\
    \        .mapToObj(c -> c >= 'a' && c <= 'z' ? (char) (c - 32) :\n           \
    \ c >= 'A' && c <= 'Z' ? (char) (c + 32) :\n            (char) c)\n        .collect(StringBuilder::new,\n\
    \            StringBuilder::append,\n            StringBuilder::append)\n    \
    \    .toString();", '        return string.toLowerCase();', '        return null;',
  "        String ans = \"\";\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char cur = string.charAt(i);\n            char flip = ' ';\n    \
    \        if (Character.isUpperCase(cur)) {\n                flip = Character.toLowerCase(cur);\n\
    \            } else {\n                flip = Character.toUpperCase(cur);\n  \
    \          }\n            ans += flip;\n        }\n        return ans;", "   \
    \     String result = \"\";\n        for (char c : string.toCharArray()) {\n \
    \           if (Character.isUpperCase(c)) {\n                result += Character.toLowerCase(c);\n\
    \            } else {\n                result += Character.toUpperCase(c);\n \
    \           }\n        }\n        return result;", "        StringBuilder sb =\
    \ new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();", '        return "";', "        char[]\
    \ answer = new char[string.length()];\n        for (int i = 0; i < string.length();\
    \ i++) {\n            if (Character.isUpperCase(string.charAt(i))) {\n       \
    \         answer[i] = Character.toLowerCase(string.charAt(i));\n            }\
    \ else {\n                answer[i] = Character.toUpperCase(string.charAt(i));\n\
    \            }\n        }\n        return new String(answer);", "        return\
    \ string.chars()\n            .mapToObj(c -> Character.isUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.toUpperCase(c))\n            .map(c -> Character.toString((char)\
    \ c))\n            .collect(Collectors.joining());", "        StringBuilder b\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isLowerCase(c)) {\n                b.append(Character.toUpperCase(c));\n\
    \            } else {\n                b.append(Character.toLowerCase(c));\n \
    \           }\n        }\n        return b.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        // Enter code here\n       \
    \ StringBuilder newString = new StringBuilder();\n        for (char c : string.toCharArray())\
    \ {\n            if (Character.isUpperCase(c)) {\n                newString.append(Character.toLowerCase(c));\n\
    \            } else {\n                newString.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return newString.toString();", "        char[]\
    \ chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++)\
    \ {\n            char c = chars[i];\n            if (Character.isUpperCase(c))\
    \ {\n                chars[i] = Character.toLowerCase(c);\n            } else\
    \ if (Character.isLowerCase(c)) {\n                chars[i] = Character.toUpperCase(c);\n\
    \            }\n        }\n        return new String(chars);", "        return\
    \ string.chars()\n            .mapToObj(i -> (char) i)\n            .map(\n  \
    \              ch -> {\n                    if (Character.isUpperCase(ch)) {\n\
    \                        return Character.toLowerCase(ch);\n                 \
    \   } else {\n                        return Character.toUpperCase(ch);\n    \
    \                }\n                }\n            )\n            .collect(Collectors.toList())\n\
    \            .stream()\n            .map(Object::toString)\n            .collect(Collectors.joining());",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            if (Character.isUpperCase(string.charAt(i))) {\n       \
    \         sb.append(Character.toLowerCase(string.charAt(i)));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(string.charAt(i)));\n   \
    \         }\n        }\n        return sb.toString();", "        return string.chars()\n\
    \        .mapToObj(x -> {\n            if (Character.isLowerCase(x))\n       \
    \         return Character.toUpperCase(x);\n            else if (Character.isUpperCase(x))\n\
    \                return Character.toLowerCase(x);\n            else\n        \
    \        return (char) x;\n        })\n        .map(x -> x.toString())\n     \
    \   .collect(Collectors.joining());", "        int len = string.length();\n  \
    \      char[] arr = new char[len];\n        for (int i = 0; i < len; i++) {\n\
    \            char ch = string.charAt(i);\n            if (Character.isUpperCase(ch))\
    \ {\n                arr[i] = Character.toLowerCase(ch);\n            } else {\n\
    \                arr[i] = Character.toUpperCase(ch);\n            }\n        }\n\
    \        return new String(arr);", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        StringBuilder\
    \ newString = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                newString.append(Character.toLowerCase(c));\n           \
    \ } else {\n                newString.append(Character.toUpperCase(c));\n    \
    \        }\n        }\n        return newString.toString();", "        int l =\
    \ string.length();\n        StringBuilder stringBuilder = new StringBuilder(l);\n\
    \        for (int i = 0; i < l; i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isUpperCase(c)) {\n                stringBuilder.append(Character.toLowerCase(c));\n\
    \            } else {\n                stringBuilder.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return stringBuilder.toString();", "      \
    \  return string.chars()\n            .mapToObj(c -> ((char) c))\n           \
    \ .map(c -> {\n                if (Character.isLowerCase(c)) {\n             \
    \       return Character.toUpperCase(c);\n                } else {\n         \
    \           return Character.toLowerCase(c);\n                }\n            })\n\
    \            .map(c -> c.toString())\n            .collect(Collectors.joining());",
  "        // // BEGIN SOLUTION (OK)\n        // return string.chars()\n        //\
    \     .map(c -> Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c))\n\
    \        //     .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)\n\
    \        //     .toString();\n        // // END SOLUTION (OK)\n        // // BEGIN\
    \ SOLUTION (OK)\n        // return string.chars()\n        //     .map(Character::isUpperCase)\n\
    \        //     .map(b -> b ? Character.toLowerCase(c) : Character.toUpperCase(c))\n\
    \        //     .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)\n\
    \        //     .toString();\n        // // END SOLUTION (OK)\n        // // BEGIN\
    \ SOLUTION (OK)\n        // return string.chars()\n        //     .map(c -> {\n\
    \        //         if (Character.isUpperCase(c)) return Character.toLowerCase(c);\n\
    \        //         if (Character.isLowerCase(c)) return Character.toUpperCase(c);\n\
    \        //         return c;\n        //     })\n        //     .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append)\n        //     .toString();\n\
    \        // // END SOLUTION (OK)\n        // // BEGIN SOLUTION (OK)\n        //\
    \ return string.chars()\n        //     .map(c -> Character.isUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.isLowerCase(c) ? Character.toUpperCase(c) : c)\n        //     .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append)\n        //     .toString();\n\
    \        // // END SOLUTION (OK)\n        // // BEGIN SOLUTION (OK)\n        //\
    \ return string.chars()\n        //     .map(c -> Character.isUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.isLowerCase(c) ? Character.toUpperCase(c", "      String result\
    \ = \"\";\n      for (int i = 0; i < string.length(); i++) {\n        if (Character.isUpperCase(string.charAt(i)))\
    \ {\n          result += Character.toLowerCase(string.charAt(i));\n        } else\
    \ {\n          result += Character.toUpperCase(string.charAt(i));\n        }\n\
    \      }\n      return result;", "        char[] chars = string.toCharArray();\n\
    \        for (int i = 0; i < chars.length; i++) {\n            if (Character.isUpperCase(chars[i]))\
    \ {\n                chars[i] = Character.toLowerCase(chars[i]);\n           \
    \ } else {\n                chars[i] = Character.toUpperCase(chars[i]);\n    \
    \        }\n        }\n        return new String(chars);", "        return string.chars()\n\
    \            .mapToObj(ch -> (char) ch)\n            .map(ch -> Character.isLowerCase(ch)\
    \ ? Character.toUpperCase(ch) : Character.toLowerCase(ch))\n            .collect(StringBuilder::new,\
    \ StringBuilder::append, StringBuilder::append)\n            .toString();", " \
    \       // This method is a stub and can be removed when you write your solution.\n\
    \        return \"\";", '        return "";', '        return string.toLowerCase();',
  "        return string.chars()\n            .mapToObj(c -> (char) c)\n         \
    \   .map(c -> Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c))\n\
    \            .collect(StringBuilder::new, StringBuilder::append, StringBuilder::append)\n\
    \            .toString();", '        return "";', "        return string.chars()\n\
    \            .mapToObj(ch -> (char) ch)\n            .map(Character::toLowerCase)\n\
    \            .map(Character::toUpperCase)\n            .map(String::valueOf)\n\
    \            .collect(Collectors.joining());", "        char[] letters = string.toCharArray();\n\
    \        for (int i = 0; i < letters.length; i++) {\n            if (Character.isLowerCase(letters[i]))\
    \ {\n                letters[i] = Character.toUpperCase(letters[i]);\n       \
    \     } else {\n                letters[i] = Character.toLowerCase(letters[i]);\n\
    \            }\n        }\n        return new String(letters);", '        return
    "";', "        StringBuilder builder = new StringBuilder();\n        for (int\
    \ i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLowerCase(c)) {\n                builder.append(Character.toUpperCase(c));\n\
    \            } else {\n                builder.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return builder.toString();", "        // YOUR\
    \ CODE HERE\n        return \"flipCase\";", "        // TODO: Write code here\n\
    \        return null;", '        return null;', "        StringBuilder sb = new\
    \ StringBuilder();\n        for (char c : string.toCharArray()) {\n          \
    \  if (Character.isUpperCase(c))\n                sb.append(Character.toLowerCase(c));\n\
    \            else\n                sb.append(Character.toUpperCase(c));\n    \
    \    }\n        return sb.toString();", "        String flippedString = \"\";\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isUpperCase(c))\n                flippedString += Character.toLowerCase(c);\n\
    \            else\n                flippedString += Character.toUpperCase(c);\n\
    \        }\n        return flippedString;", '        return null;', "        String\
    \ ret = \"\";\n        for (char c : string.toCharArray()) {\n            ret\
    \ += Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c);\n\
    \        }\n        return ret;", "        return new String(string.chars().map(c\
    \ -> Character.isUpperCase(c) ?\n                                            \
    \  Character.toLowerCase(c) :\n                                              Character.toUpperCase(c))\n\
    \                         .collect(StringBuilder::new, StringBuilder::appendCodePoint,\
    \ StringBuilder::append)\n                         .toString());", "        char[]\
    \ chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++)\
    \ {\n            if (Character.isUpperCase(chars[i])) {\n                chars[i]\
    \ = Character.toLowerCase(chars[i]);\n            } else {\n                chars[i]\
    \ = Character.toUpperCase(chars[i]);\n            }\n        }\n        return\
    \ new String(chars);", "        StringBuilder sb = new StringBuilder();\n    \
    \    for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            if (Character.isUpperCase(string.charAt(i)))\
    \ {\n                sb.append(Character.toLowerCase(string.charAt(i)));\n   \
    \         } else {\n                sb.append(Character.toUpperCase(string.charAt(i)));\n\
    \            }\n        }\n        return sb.toString();", "        // Write code\
    \ here and replace this return statement with the correct one\n        return\
    \ null;", "        String[] str = string.split(\"\");\n        String[] flipped\
    \ = new String[str.length];\n        for (int i = 0; i < str.length; i++) {\n\
    \            flipped[i] = new String();\n            if (Character.isUpperCase(str[i].charAt(0)))\
    \ {\n                flipped[i] = Character.toString(Character.toLowerCase(str[i].charAt(0)));\n\
    \            } else {\n                flipped[i] = Character.toString(Character.toUpperCase(str[i].charAt(0)));\n\
    \            }\n        }\n        return String.join(\"\", flipped);", "    \
    \    return string.chars()\n                .mapToObj(c -> (char) c)\n       \
    \         .map(c -> Character.isUpperCase(c) ?\n                        Character.toLowerCase(c)\
    \ :\n                        Character.toUpperCase(c))\n                .collect(Collectors.joining());",
  "        var result = new StringBuilder();\n        for (var character : string.toCharArray())\
    \ {\n            if (Character.isLowerCase(character)) {\n                result.append(Character.toUpperCase(character));\n\
    \            } else {\n                result.append(Character.toLowerCase(character));\n\
    \            }\n        }\n        return result.toString();", "        var chars\
    \ = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n\
    \            var c = chars[i];\n            if (Character.isUpperCase(c)) {\n\
    \                chars[i] = Character.toLowerCase(c);\n            } else if (Character.isLowerCase(c))\
    \ {\n                chars[i] = Character.toUpperCase(c);\n            }\n   \
    \     }\n        return new String(chars);", '        return string.toLowerCase();',
  "        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if (Character.isUpperCase(c))\
    \ {\n                chars[i] = Character.toLowerCase(c);\n            } else\
    \ if (Character.isLowerCase(c)) {\n                chars[i] = Character.toUpperCase(c);\n\
    \            }\n        }\n        return new String(chars);", "        char[]\
    \ stringChars = string.toCharArray();\n        for (int i = 0; i < stringChars.length;\
    \ i++) {\n            if (Character.isUpperCase(stringChars[i])) {\n         \
    \       stringChars[i] = Character.toLowerCase(stringChars[i]);\n            }\
    \ else {\n                stringChars[i] = Character.toUpperCase(stringChars[i]);\n\
    \            }\n        }\n        return new String(stringChars);", "       \
    \ return string.chars()\n        .mapToObj(c -> {\n            // Convert to char\n\
    \            char character = (char) c;\n            // Flip case\n          \
    \  if (Character.isLowerCase(character)) {\n                return Character.toUpperCase(character);\n\
    \            } else {\n                return Character.toLowerCase(character);\n\
    \            }\n        })\n        .collect(Collectors.joining());", '        return
    new StringBuilder(string).reverse().toString();', "        return string.chars()\n\
    \            .mapToObj(c -> (char) c)\n            .map(c -> Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c))\n            .collect(StringBuilder::new,\
    \ StringBuilder::append, StringBuilder::append)\n            .toString();", " \
    \       //return \"\";\n        return string.chars()\n                .mapToObj(c\
    \ -> Character.isLetter(c) ? (Character.isUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.toUpperCase(c)) : (char) c)\n                .map(c -> Character.toString(c))\n\
    \                .collect(Collectors.joining());", "        char[] newString =\
    \ string.toCharArray();\n        for (int i = 0; i < newString.length; i++) {\n\
    \            if (Character.isLowerCase(newString[i])) {\n                newString[i]\
    \ = Character.toUpperCase(newString[i]);\n            } else {\n             \
    \   newString[i] = Character.toLowerCase(newString[i]);\n            }\n     \
    \   }\n        return new String(newString);", "        StringBuilder stringBuilder\
    \ = new StringBuilder();\n        char currChar;\n        for (int i = 0; i <\
    \ string.length(); i++) {\n            currChar = string.charAt(i);\n        \
    \    if (Character.isLowerCase(currChar)) {\n                stringBuilder.append(Character.toUpperCase(currChar));\n\
    \            } else {\n                stringBuilder.append(Character.toLowerCase(currChar));\n\
    \            }\n        }\n        return stringBuilder.toString();", "      \
    \  return string.chars()\n            .mapToObj(c -> c >= 'a' && c <= 'z' ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c))\n            .map(c -> c.toString())\n         \
    \   .collect(Collectors.joining());", "        // Use StringBuilder to build the\
    \ result string.\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < string.length(); i++) {\n            char curr = string.charAt(i);\n\
    \            if (Character.isUpperCase(curr)) {\n                result.append(Character.toLowerCase(curr));\n\
    \            } else {\n                result.append(Character.toUpperCase(curr));\n\
    \            }\n        }\n        return result.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            if (Character.isUpperCase(string.charAt(i))) {\n            \
    \    sb.append(Character.toLowerCase(string.charAt(i)));\n            } else {\n\
    \                sb.append(Character.toUpperCase(string.charAt(i)));\n       \
    \     }\n        }\n        return sb.toString();", "        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", '        return null;',
  "        return string.chars()\n            .mapToObj(c -> \n                Character.isLowerCase(c)\
    \ ? \n                    (char)Character.toUpperCase(c) : \n                \
    \    (char)Character.toLowerCase(c))\n            .collect(StringBuilder::new,\
    \ StringBuilder::append, StringBuilder::append)\n            .toString();", " \
    \       StringBuilder flipped = new StringBuilder();\n        for (char c : string.toCharArray())\
    \ {\n            if (Character.isUpperCase(c)) {\n                flipped.append(Character.toLowerCase(c));\n\
    \            } else {\n                flipped.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return flipped.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n \
    \           if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n \
    \           if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        String result\
    \ = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            char\
    \ c = string.charAt(i);\n            if (Character.isLowerCase(c))\n         \
    \       result += Character.toUpperCase(c);\n            else if (Character.isUpperCase(c))\n\
    \                result += Character.toLowerCase(c);\n            else\n     \
    \           result += c;\n        }\n        return result;", "        // return\
    \ string.chars().map(Character::isUpperCase).map(i -> i ? Character.toLowerCase(i)\
    \ : Character.toUpperCase(i)).collect(StringBuilder::new, StringBuilder::appendCodePoint,\
    \ StringBuilder::append).toString();\n        // return null;\n        return\
    \ null;", '        return new StringBuilder(string).reverse().toString();', " \
    \       StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray())\
    \ {\n            if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        String out\
    \ = \"\";\n        for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c))\
    \ {\n                out += Character.toUpperCase(c);\n            } else {\n\
    \                out += Character.toLowerCase(c);\n            }\n        }\n\
    \        return out;", "        char[] chars = string.toCharArray();\n       \
    \ for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i]))\
    \ {\n                chars[i] = Character.toUpperCase(chars[i]);\n           \
    \ } else {\n                chars[i] = Character.toLowerCase(chars[i]);\n    \
    \        }\n        }\n        return new String(chars);", "        return string.chars()\n\
    \            .mapToObj(ch -> (char) ch)\n            .map(Character::toString)\n\
    \            .map(str -> str.matches(\"[a-z]\") ? str.toUpperCase() : str.toLowerCase())\n\
    \            .collect(Collectors.joining());", "        return string.chars()\n\
    \            .mapToObj(c -> {\n                char char1 = (char) c;\n      \
    \          if (Character.isUpperCase(char1)) {\n                    return Character.toLowerCase(char1);\n\
    \                } else {\n                    return Character.toUpperCase(char1);\n\
    \                }\n            })\n            .map(Object::toString)\n     \
    \       .collect(Collectors.joining());", '        return string.replaceAll(".",
    "$0");', "        StringBuilder sb = new StringBuilder();\n        for (char ch\
    \ : string.toCharArray()) {\n            if (Character.isUpperCase(ch)) {\n  \
    \              sb.append(Character.toLowerCase(ch));\n            } else {\n \
    \               sb.append(Character.toUpperCase(ch));\n            }\n       \
    \ }\n        return sb.toString();", "        return string.chars()\n        \
    \        .mapToObj(x -> (char) x)\n                .map(x -> Character.isUpperCase(x)\
    \ ? Character.toLowerCase(x) : Character.toUpperCase(x))\n                .map(x\
    \ -> x.toString())\n                .collect(Collectors.joining());", "      \
    \  char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if (Character.isUpperCase(c))\
    \ {\n                chars[i] = Character.toLowerCase(c);\n            } else\
    \ if (Character.isLowerCase(c)) {\n                chars[i] = Character.toUpperCase(c);\n\
    \            }\n        }\n        return new String(chars);", "        char[]\
    \ charArray = string.toCharArray();\n        for (int i = 0; i < charArray.length;\
    \ i++) {\n            if (Character.isUpperCase(charArray[i])) {\n           \
    \     charArray[i] = Character.toLowerCase(charArray[i]);\n            } else\
    \ {\n                charArray[i] = Character.toUpperCase(charArray[i]);\n   \
    \         }\n        }\n        return new String(charArray);", "        StringBuilder\
    \ newString = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            StringBuilder currentChar = new StringBuilder();\n     \
    \       currentChar.append(string.charAt(i));\n            if (currentChar.toString().equals(currentChar.toString().toUpperCase()))\
    \ {\n                newString.append(currentChar.toString().toLowerCase());\n\
    \            } else {\n                newString.append(currentChar.toString().toUpperCase());\n\
    \            }\n        }\n        return newString.toString();", "        String\
    \ result = \"\";\n        for (char c : string.toCharArray()) {\n            result\
    \ += Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c);\n\
    \        }\n        return result;", '        return string;', "        StringBuilder\
    \ stringBuilder = new StringBuilder();\n        string.chars().forEach(letter\
    \ -> {\n            if (Character.isUpperCase(letter)) {\n                stringBuilder.append(Character.toLowerCase(letter));\n\
    \            } else {\n                stringBuilder.append(Character.toUpperCase(letter));\n\
    \            }\n        });\n        return stringBuilder.toString();", '        return
    string.toLowerCase().replace("a", "A").replace("b", "B").replace("c", "C").replace("d",
    "D").replace("e", "E").replace("f", "F").replace("g", "G").replace("h", "H").replace("i",
    "I").replace("j", "J").replace("k", "K").replace("l", "L").replace("m", "M").replace("n",
    "N").replace("o", "O").replace("p", "P").replace("q", "Q").replace("r", "R").replace("s",
    "S").replace("t", "T").replace("u", "U").replace("v", "V").replace("w", "W").replace("x",
    "X").replace("y", "Y").replace("z", "Z");', "        StringBuilder sb = new StringBuilder();\n\
    \        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        StringBuilder stringBuilder\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            if (Character.isUpperCase(string.charAt(i))) {\n                stringBuilder.append(Character.toLowerCase(string.charAt(i)));\n\
    \            } else {\n                stringBuilder.append(Character.toUpperCase(string.charAt(i)));\n\
    \            }\n        }\n        return stringBuilder.toString();", "      \
    \  StringBuilder out = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            char flipped = Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c);\n            out.append(flipped);\n\
    \        }\n        return out.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char ch = string.charAt(i);\n\
    \            if (Character.isLowerCase(ch)) {\n                sb.append(Character.toUpperCase(ch));\n\
    \            } else {\n                sb.append(Character.toLowerCase(ch));\n\
    \            }\n        }\n        return sb.toString();", "        StringBuilder\
    \ flippedString = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                flippedString.append(Character.toLowerCase(c));\n       \
    \     } else {\n                flippedString.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return flippedString.toString();", '        return
    null;', "        var builder = new StringBuilder();\n        for (char c : string.toCharArray())\
    \ {\n            if (Character.isUpperCase(c)) {\n                builder.append(Character.toLowerCase(c));\n\
    \            } else {\n                builder.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return builder.toString();", "        String\
    \ result = \"\";\n        for (char c : string.toCharArray()) {\n            result\
    \ += (Character.isUpperCase(c)) ? Character.toLowerCase(c) : Character.toUpperCase(c);\n\
    \        }\n        return result;", "        // >>>Your code goes here.\n   \
    \     String x = \"\";\n        for (int i = 0; i < string.length(); i++) {\n\
    \            if (Character.isUpperCase(string.charAt(i))) {\n                x\
    \ += Character.toLowerCase(string.charAt(i));\n            } else {\n        \
    \        x += Character.toUpperCase(string.charAt(i));\n            }\n      \
    \  }\n        return x;", '        return "";', '        return null;', "    \
    \    return string.chars()\n                     .mapToObj(c -> (char) c)\n  \
    \                   .map(Character::toString)\n                     .map(s ->\
    \ s.matches(\"[a-z]\") ? s.toUpperCase() : s.toLowerCase())\n                \
    \     .collect(Collectors.joining());", "        return string.chars()\n     \
    \           .mapToObj(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c))\n                .map(c -> String.valueOf((char)\
    \ c))\n                .collect(Collectors.joining());", '        return "";',
  "        StringBuilder newString = new StringBuilder();\n        for (int i = 0;\
    \ i < string.length(); i++) {\n            char c = string.charAt(i);\n      \
    \      if (Character.isUpperCase(c)) {\n                newString.append(Character.toLowerCase(c));\n\
    \            } else {\n                newString.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return newString.toString();", "        String\
    \ result = \"\";\n        for (int i = 0; i < string.length(); i++) {\n      \
    \      char c = string.charAt(i);\n            if (Character.isUpperCase(c)) {\n\
    \                result += Character.toLowerCase(c);\n            } else {\n \
    \               result += Character.toUpperCase(c);\n            }\n        }\n\
    \        return result;", "        StringBuffer result = new StringBuffer();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char current\
    \ = string.charAt(i);\n            if (Character.isUpperCase(current)) {\n   \
    \             result.append(Character.toLowerCase(current));\n            } else\
    \ {\n                result.append(Character.toUpperCase(current));\n        \
    \    }\n        }\n        return result.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (char ch : string.toCharArray()) {\n\
    \            if (Character.isUpperCase(ch)) {\n                sb.append(Character.toLowerCase(ch));\n\
    \            } else {\n                sb.append(Character.toUpperCase(ch));\n\
    \            }\n        }\n        return sb.toString();", "        // Iterate\
    \ through string;\n        // If a character is lowercase, change it to uppercase.\n\
    \        // If a character is uppercase, change it to lowercase.\n        // Return\
    \ the string.\n        StringBuilder flipped = new StringBuilder();\n        for\
    \ (char ch : string.toCharArray()) {\n            if (Character.isLowerCase(ch))\
    \ {\n                flipped.append(Character.toUpperCase(ch));\n            }\
    \ else {\n                flipped.append(Character.toLowerCase(ch));\n       \
    \     }\n        }\n        return flipped.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n \
    \           if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        String[] string_array\
    \ = string.split(\"\");\n        String[] new_string_array = new String[string_array.length];\n\
    \        for (int i = 0; i < string_array.length; i++){\n            String letter\
    \ = string_array[i];\n            if (letter.toUpperCase().equals(letter)){\n\
    \                new_string_array[i] = letter.toLowerCase();\n            } else\
    \ {\n                new_string_array[i] = letter.toUpperCase();\n           \
    \ }\n        }\n        return String.join(\"\", new_string_array);", "      \
    \  char[] newString = string.toCharArray();\n        for (int i = 0; i < newString.length;\
    \ i++) {\n            if (Character.isLowerCase(newString[i])) {\n           \
    \     newString[i] = Character.toUpperCase(newString[i]);\n            } else\
    \ {\n                newString[i] = Character.toLowerCase(newString[i]);\n   \
    \         }\n        }\n        return new String(newString);", "        StringBuilder\
    \ str = new StringBuilder();\n        for (char c : string.toCharArray()) {\n\
    \            if (Character.isLowerCase(c)) {\n                str.append(Character.toUpperCase(c));\n\
    \            } else {\n                str.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return str.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n \
    \           if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        StringBuilder\
    \ stringBuilder = new StringBuilder();\n        for (char c : string.toCharArray())\
    \ {\n            if (Character.isUpperCase(c)) {\n                stringBuilder.append(Character.toLowerCase(c));\n\
    \            } else {\n                stringBuilder.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return stringBuilder.toString();", "      \
    \  return string.chars()\n        .mapToObj(c -> (char) c)\n        .map(c ->\
    \ Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c))\n\
    \        .collect(StringBuilder::new, StringBuilder::append, StringBuilder::append)\n\
    \        .toString();", "        String newString = \"\";\n        for (int i\
    \ = 0; i < string.length(); i++) {\n            char temp = string.charAt(i);\n\
    \            if (Character.isUpperCase(temp)) {\n                newString +=\
    \ Character.toLowerCase(temp);\n            } else {\n                newString\
    \ += Character.toUpperCase(temp);\n            }\n        }\n        return newString;",
  "        return new String(string.chars().map(character -> {\n            char letter\
    \ = (char) character;\n            if (Character.isLowerCase(letter)) {\n    \
    \            return Character.toUpperCase(letter);\n            } else {\n   \
    \             return Character.toLowerCase(letter);\n            }\n        }).collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append).toString());", "    \
    \    StringBuilder result = new StringBuilder();\n        char[] chars = string.toCharArray();\n\
    \        for (char c : chars) {\n            if (Character.isUpperCase(c)) {\n\
    \                result.append(Character.toLowerCase(c));\n            } else\
    \ {\n                result.append(Character.toUpperCase(c));\n            }\n\
    \        }\n        return result.toString();", "        String result = \"\"\
    ;\n        for (int i = 0; i < string.length(); i++) {\n            char ch =\
    \ string.charAt(i);\n            if (Character.isLowerCase(ch)) {\n          \
    \      result += Character.toUpperCase(ch);\n            } else {\n          \
    \      result += Character.toLowerCase(ch);\n            }\n        }\n      \
    \  return result;", "        // Algorithm: flipCase(string)\n        //     Convert\
    \ string to char array\n        //     Set flipped string to empty string\n  \
    \      //     For character in char array\n        //         If character is\
    \ upper case\n        //             Add character to flipped string in lower\
    \ case\n        //         Else\n        //             Add character to flipped\
    \ string in upper case\n        //     Return flipped string\n        // End\n\
    \        char[] chars = string.toCharArray();\n        String flippedString =\
    \ \"\";\n        for (char c : chars) {\n            if (Character.isUpperCase(c))\
    \ {\n                flippedString += Character.toLowerCase(c);\n            }\
    \ else {\n                flippedString += Character.toUpperCase(c);\n       \
    \     }\n        }\n        return flippedString;", "        String flippedString\
    \ = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            Character\
    \ currentChar = string.charAt(i);\n            if (Character.isUpperCase(currentChar))\
    \ {\n                flippedString += Character.toLowerCase(currentChar);\n  \
    \          } else {\n                flippedString += Character.toUpperCase(currentChar);\n\
    \            }\n        }\n        return flippedString;", "        String flipped\
    \ = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            if\
    \ (Character.isUpperCase(string.charAt(i))) {\n                flipped += Character.toLowerCase(string.charAt(i));\n\
    \            } else {\n                flipped += Character.toUpperCase(string.charAt(i));\n\
    \            }\n        }\n        return flipped;", "        StringBuilder builder\
    \ = new StringBuilder();\n        for (char ch : string.toCharArray()) {\n   \
    \         if (Character.isUpperCase(ch)) {\n                builder.append(Character.toLowerCase(ch));\n\
    \            } else {\n                builder.append(Character.toUpperCase(ch));\n\
    \            }\n        }\n        return builder.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n \
    \           sb.append(Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c));\n\
    \        }\n        return sb.toString();", "        String temp = \"\";\n   \
    \     for (int i = 0; i < string.length(); i++) {\n            if (Character.isUpperCase(string.charAt(i)))\
    \ {\n                temp += Character.toLowerCase(string.charAt(i));\n      \
    \      } else {\n                temp += Character.toUpperCase(string.charAt(i));\n\
    \            }\n        }\n        return temp;", "        return string.chars()\n\
    \            .mapToObj(c -> (char) c)\n            .map(c -> Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c))\n            .collect(StringBuilder::new,\
    \ StringBuilder::append, StringBuilder::append)\n            .toString();", " \
    \     return string.chars()\n        .mapToObj(x -> flipCase(x))\n        .collect(Collectors.joining());",
  "        StringBuilder result = new StringBuilder();\n        for (char c : string.toCharArray())\
    \ {\n            result.append(Character.isUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.toUpperCase(c));\n        }\n        return result.toString();",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        // // Your code here\n     \
    \   // throw new UnsupportedOperationException(\"Not yet implemented\");\n   \
    \     return string.chars()\n            .mapToObj(c -> (char) c)\n          \
    \  .map(e -> isUpperCase(e) ? Character.toLowerCase(e) : Character.toUpperCase(e))\n\
    \            .collect(Collectors.toList())\n            .stream()\n          \
    \  .map(e -> e.toString())\n            .collect(Collectors.joining());", "  \
    \      char[] arr = string.toCharArray();\n        for (int i = 0; i < arr.length;\
    \ i++) {\n            if (Character.isUpperCase(arr[i]))\n                arr[i]\
    \ = Character.toLowerCase(arr[i]);\n            else\n                arr[i] =\
    \ Character.toUpperCase(arr[i]);\n        }\n        return new String(arr);",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            if (Character.isLowerCase(string.charAt(i))) {\n       \
    \         sb.append(Character.toUpperCase(string.charAt(i)));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(string.charAt(i)));\n   \
    \         }\n        }\n        return sb.toString();", "        char[] chars\
    \ = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n\
    \            if (Character.isLowerCase(chars[i])) {\n                chars[i]\
    \ = Character.toUpperCase(chars[i]);\n            } else {\n                chars[i]\
    \ = Character.toLowerCase(chars[i]);\n            }\n        }\n        return\
    \ new String(chars);", "        return string.chars()\n                .mapToObj(ch\
    \ -> \n                        Character.isUpperCase(ch) ? \n                \
    \            Character.toLowerCase(ch) :\n                            Character.toUpperCase(ch))\n\
    \                .collect(StringBuilder::new, StringBuilder::appendCodePoint,\
    \ StringBuilder::append)\n                .toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n \
    \           sb.append(Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c));\n\
    \        }\n        return sb.toString();", "        char[] chars = string.toCharArray();\n\
    \        for (int i = 0; i < chars.length; i++) {\n            char c = chars[i];\n\
    \            if (Character.isUpperCase(c)) {\n                chars[i] = Character.toLowerCase(c);\n\
    \            } else if (Character.isLowerCase(c)) {\n                chars[i]\
    \ = Character.toUpperCase(c);\n            }\n        }\n        return new String(chars);",
  "        return string.chars()\n            .mapToObj(c -> Character.isLetter(c)\
    \ ? (char)c : c)\n            .map(c -> Character.isUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.toUpperCase(c))\n            .map(c -> c.toString())\n         \
    \   .collect(Collectors.joining());", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", '        return null;',
  "        return string.chars()\n            .mapToObj(i -> (char) i)\n         \
    \   .map(ch -> Character.isUpperCase(ch) ? Character.toLowerCase(ch) : Character.toUpperCase(ch))\n\
    \            .collect(StringBuilder::new, StringBuilder::append, StringBuilder::append)\n\
    \            .toString();", "        return string.chars()\n            .mapToObj(i\
    \ -> (char) i)\n            .map(i -> Character.isUpperCase(i) ? Character.toLowerCase(i)\
    \ : Character.toUpperCase(i))\n            .map(i -> Character.toString(i))\n\
    \            .collect(Collectors.joining());", "        // TODO: Implement function\
    \ here\n        return null;", "        // TODO: Solve this problem\n        return\
    \ null;", "        String result = \"\";\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                c = Character.toLowerCase(c);\n            } else if (Character.isLowerCase(c))\
    \ {\n                c = Character.toUpperCase(c);\n            }\n          \
    \  result += c;\n        }\n        return result;", '        return string;',
  "        String flipped = \"\";\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            if (Character.isLowerCase(string.charAt(i))) {\n            \
    \    flipped += Character.toUpperCase(string.charAt(i));\n            } else {\n\
    \                flipped += Character.toLowerCase(string.charAt(i));\n       \
    \     }\n        }\n        return flipped;", "        char[] charArray = string.toCharArray();\n\
    \        for (int i = 0; i < charArray.length; i++) {\n            if (Character.isUpperCase(charArray[i]))\
    \ {\n                charArray[i] = Character.toLowerCase(charArray[i]);\n   \
    \         } else {\n                charArray[i] = Character.toUpperCase(charArray[i]);\n\
    \            }\n        }\n        return new String(charArray);", '        throw
    new UnsupportedOperationException("Waiting to be implemented.");', "        return\
    \ string.chars()\n            .mapToObj(c -> (char) c)\n            .map(c ->\
    \ Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c))\n\
    \            .collect(StringBuilder::new, StringBuilder::append, StringBuilder::append)\n\
    \            .toString();", '        // Your code here', '        return "";',
  "        StringBuilder stringBuilder = new StringBuilder();\n        for (char c\
    \ : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n   \
    \             stringBuilder.append(Character.toLowerCase(c));\n            } else\
    \ {\n                stringBuilder.append(Character.toUpperCase(c));\n       \
    \     }\n        }\n        return stringBuilder.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", '        return null;', "        // YOUR\
    \ CODE HERE\n        char [] c = string.toCharArray();\n        int size = c.length;\n\
    \        String result = \"\";\n        for (int i = 0; i < size; i++) {\n   \
    \         if (Character.isUpperCase(c[i])) {\n                result += Character.toLowerCase(c[i]);\n\
    \            } else {\n                result += Character.toUpperCase(c[i]);\n\
    \            }\n        }\n        return result;", "        char[] array = string.toCharArray();\n\
    \        for (int i = 0; i < array.length; i++) {\n            if (Character.isLowerCase(array[i]))\
    \ {\n                array[i] = Character.toUpperCase(array[i]);\n           \
    \ } else {\n                array[i] = Character.toLowerCase(array[i]);\n    \
    \        }\n        }\n        return new String(array);", "        return string.chars()\n\
    \            .mapToObj(c -> (char) c)\n            .map(c -> Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c))\n            .collect(StringBuilder::new,\
    \ StringBuilder::append, StringBuilder::append)\n            .toString();", " \
    \       StringBuilder result = new StringBuilder();\n        for (int i = 0; i\
    \ < string.length(); i++) {\n            char ch = string.charAt(i);\n       \
    \     if (Character.isUpperCase(ch)) {\n                result.append(Character.toLowerCase(ch));\n\
    \            } else {\n                result.append(Character.toUpperCase(ch));\n\
    \            }\n        }\n        return result.toString();", "        int length\
    \ = string.length();\n        char[] chars = new char[length];\n        for (int\
    \ i = 0; i < length; i++) {\n            char c = string.charAt(i);\n        \
    \    if (Character.isUpperCase(c)) {\n                chars[i] = Character.toLowerCase(c);\n\
    \            } else {\n                chars[i] = Character.toUpperCase(c);\n\
    \            }\n        }\n        return new String(chars);", '        throw
    new UnsupportedOperationException("Unimplemented");', '        return null;',
  "        return string.chars()\n                .mapToObj(c -> Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c))\n                .map(Character::toString)\n\
    \                .collect(Collectors.joining());", '        return null;', " \
    \     StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < string.length();\
    \ i++) {\n        if (Character.isLowerCase(string.charAt(i))) {\n          sb.append(Character.toUpperCase(string.charAt(i)));\n\
    \        } else {\n          sb.append(Character.toLowerCase(string.charAt(i)));\n\
    \        }\n      }\n      return sb.toString();", "        String s = string.replaceAll(\"\
    [a-z]\", \"\");\n        String s1 = string.replaceAll(\"[A-Z]\", \"\");\n   \
    \     StringBuilder str = new StringBuilder(s1);\n        for (int i = 0; i <\
    \ str.length(); i++) {\n            str.setCharAt(i, Character.toUpperCase(str.charAt(i)));\n\
    \        }\n        return str.toString() + s;", "        StringBuilder sb = new\
    \ StringBuilder();\n        for (char c : string.toCharArray()) {\n          \
    \  if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        StringBuilder\
    \ result = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                result.append(Character.toUpperCase(c));\n            } else\
    \ {\n                result.append(Character.toLowerCase(c));\n            }\n\
    \        }\n        return result.toString();", "        return string.chars()\n\
    \            .mapToObj(c -> (char) c)\n            .map(c -> Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c))\n            .collect(StringBuilder::new,\
    \ StringBuilder::append, StringBuilder::append)\n            .toString();", " \
    \       var results = new ArrayList<Character>();\n        for (var ch : string.toCharArray())\
    \ {\n            if (Character.isLowerCase(ch)) {\n                results.add(Character.toUpperCase(ch));\n\
    \            } else {\n                results.add(Character.toLowerCase(ch));\n\
    \            }\n        }\n        return results.stream().map(Object::toString).collect(Collectors.joining());",
  "        String flipped = \"\";\n        for (char c : string.toCharArray()) {\n\
    \            flipped += Character.isUpperCase(c) ? Character.toLowerCase(c) :\
    \ Character.toUpperCase(c);\n        }\n        return flipped;", "        char[]\
    \ flipped = new char[string.length()];\n        for (int i = 0; i < string.length();\
    \ i++) {\n            if (Character.isLowerCase(string.charAt(i))) {\n       \
    \         flipped[i] = Character.toUpperCase(string.charAt(i));\n            }\
    \ else {\n                flipped[i] = Character.toLowerCase(string.charAt(i));\n\
    \            }\n        }\n        return new String(flipped);", '        return
    null;', "        StringBuilder sb = new StringBuilder();\n        for (char c\
    \ : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n   \
    \             sb.append(Character.toLowerCase(c));\n            } else {\n   \
    \             sb.append(Character.toUpperCase(c));\n            }\n        }\n\
    \        return sb.toString();", "        StringBuilder flippedString = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            if (Character.isLowerCase(string.charAt(i)))\
    \ {\n                flippedString.append(Character.toUpperCase(string.charAt(i)));\n\
    \            } else {\n                flippedString.append(Character.toLowerCase(string.charAt(i)));\n\
    \            }\n        }\n        return flippedString.toString();", "      \
    \  StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray())\
    \ {\n            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        StringBuffer\
    \ flipped = new StringBuffer(string);\n        for (int i = 0; i < flipped.length();\
    \ i++) {\n            char c = flipped.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                flipped.setCharAt(i, Character.toLowerCase(c));\n       \
    \     } else {\n                flipped.setCharAt(i, Character.toUpperCase(c));\n\
    \            }\n        }\n        return flipped.toString();", "      StringBuilder\
    \ flippedString = new StringBuilder();\n      string.chars().forEach(c -> flippedString.append(flipCase((char)c)));\n\
    \      return flippedString.toString();", "        return Arrays.asList(string.split(\"\
    \"))\n                     .stream()\n                     .map(s -> (s.equals(s.toUpperCase()))\
    \ ? s.toLowerCase() : s.toUpperCase())\n                     .collect(Collectors.joining());",
  "        StringBuilder flipped = new StringBuilder();\n        for (char c : string.toCharArray())\
    \ {\n            if (Character.isUpperCase(c)) {\n                flipped.append(Character.toLowerCase(c));\n\
    \            } else {\n                flipped.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return flipped.toString();", "        // >>>\
    \ Your code here <<<\n        StringBuilder sb = new StringBuilder();\n      \
    \  for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            Character curr = string.charAt(i);\n            Character opposite\
    \ = Character.isUpperCase(curr) ? Character.toLowerCase(curr) : Character.toUpperCase(curr);\n\
    \            sb.append(opposite);\n        }\n        return sb.toString();",
  "        StringBuilder stringBuilder = new StringBuilder();\n        for (char c\
    \ : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n   \
    \             stringBuilder.append(Character.toLowerCase(c));\n            } else\
    \ {\n                stringBuilder.append(Character.toUpperCase(c));\n       \
    \     }\n        }\n        return stringBuilder.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\n\
    \                sb.append(Character.toLowerCase(c));\n            else\n    \
    \            sb.append(Character.toUpperCase(c));\n        }\n        return sb.toString();",
  "        // TODO: Write code here.\n        return null;", "        char[] stringArray\
    \ = string.toCharArray();\n        for (int i = 0; i < stringArray.length; i++)\
    \ {\n            if (Character.isUpperCase(stringArray[i])) {\n              \
    \  stringArray[i] = Character.toLowerCase(stringArray[i]);\n            } else\
    \ {\n                stringArray[i] = Character.toUpperCase(stringArray[i]);\n\
    \            }\n        }\n        return new String(stringArray);"]
stop_tokens:
- "\n    }\n"
