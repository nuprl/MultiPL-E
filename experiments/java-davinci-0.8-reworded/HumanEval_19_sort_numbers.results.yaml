language: java
name: HumanEval_19_sort_numbers
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        //\n        // YOUR CODE GOES HERE\n        //\n        return \"\
    \";\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp91zxjon1.java:22)\n"
  stdout: ''
  timestamp: 1660011443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numArray = numbers.split(\" \");\n        List<String> numList\
    \ = Arrays.asList(numArray);\n        List<String> sortedList = numList.stream().sorted(Comparator.comparing(NumberUtils::getNumber)).collect(Collectors.toList());\n\
    \        return String.join(\" \", sortedList);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps8f1xt6d.java:17: error: cannot find symbol\n        List<String>\
    \ sortedList = numList.stream().sorted(Comparator.comparing(NumberUtils::getNumber)).collect(Collectors.toList());\n\
    \                                                                            \
    \   ^\n  symbol:   variable NumberUtils\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        if (numbers == null || numbers.length() == 0) {\n            return\
    \ numbers;\n        }\n        String[] words = numbers.split(\" \");\n      \
    \  int[] numbersToSort = new int[words.length];\n        for (int i = 0; i < words.length;\
    \ i++) {\n            numbersToSort[i] = wordToInt(words[i]);\n        }\n   \
    \     Arrays.sort(numbersToSort);\n        String[] wordsSorted = new String[words.length];\n\
    \        for (int i = 0; i < words.length; i++) {\n            wordsSorted[i]\
    \ = intToWord(numbersToSort[i]);\n        }\n        return Arrays.stream(wordsSorted).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpte793zz1.java:21: error: cannot find symbol\n            numbersToSort[i]\
    \ = wordToInt(words[i]);\n                               ^\n  symbol:   method\
    \ wordToInt(String)\n  location: class Problem\n/tmp/tmpte793zz1.java:26: error:\
    \ cannot find symbol\n            wordsSorted[i] = intToWord(numbersToSort[i]);\n\
    \                             ^\n  symbol:   method intToWord(int)\n  location:\
    \ class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011443
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String [] nums = {\"zero\", \"one\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n        HashMap<String,\
    \ Integer> indexMap = new HashMap<>();\n        for (int i = 0; i < nums.length;\
    \ i++) {\n            indexMap.put(nums[i], i);\n        }\n        String []\
    \ split = numbers.split(\" \");\n        Arrays.sort(split, new Comparator<String>()\
    \ {\n            @Override\n            public int compare(String s1, String s2)\
    \ {\n                return indexMap.get(s1) - indexMap.get(s2);\n           \
    \ }\n        });\n        return String.join(\" \", split);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        /*\n        String[] numWords = numbers.split(\" \");\n        int[]\
    \ nums = new int[numWords.length];\n        for (int i = 0; i < numWords.length;\
    \ i++) {\n            nums[i] = convertWordToNum(numWords[i]);\n        }\n  \
    \      Arrays.sort(nums);\n        for (int i = 0; i < numWords.length; i++) {\n\
    \            numWords[i] = convertNumToWord(nums[i]);\n        }\n        return\
    \ String.join(\" \", numWords);\n        */\n        return Arrays.stream(numbers.split(\"\
    \ \"))\n                .map(word -> convertWordToNum(word))\n               \
    \ .sorted()\n                .map(num -> convertNumToWord(num))\n            \
    \    .collect(Collectors.joining(\" \"));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8rsc_lp2.java:28: error: cannot find symbol\n                .map(word\
    \ -> convertWordToNum(word))\n                             ^\n  symbol:   method\
    \ convertWordToNum(String)\n  location: class Problem\n/tmp/tmp8rsc_lp2.java:30:\
    \ error: cannot find symbol\n                .map(num -> convertNumToWord(num))\n\
    \                            ^\n  symbol:   method convertNumToWord(Object)\n\
    \  location: class Problem\n/tmp/tmp8rsc_lp2.java:31: error: no suitable method\
    \ found for collect(Collector<CharSequence,CAP#1,String>)\n                .collect(Collectors.joining(\"\
    \ \"));\n                ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super Object>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#1\n        (actual and formal argument lists differ in length))\n    method\
    \ Stream.<R#2,A>collect(Collector<? super Object,A,R#2>) is not applicable\n \
    \     (cannot infer type-variable(s) R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String>\
    \ cannot be converted to Collector<? super Object,A,R#2>))\n  where R#1,T,R#2,A\
    \ are type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \  where CAP#1,CAP#2 are fresh type-variables:\n    CAP#1 extends Object from\
    \ capture of ?\n    CAP#2 extends Object from capture of ?\n3 errors\n"
  stdout: ''
  timestamp: 1660011443
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        return Arrays.stream(numbers.split(\" \"))\n            .map(String::toLowerCase)\n\
    \            .map(s -> s.equals(\"zero\") ? \"0\" : s)\n            .map(s ->\
    \ s.equals(\"one\") ? \"1\" : s)\n            .map(s -> s.equals(\"two\") ? \"\
    2\" : s)\n            .map(s -> s.equals(\"three\") ? \"3\" : s)\n           \
    \ .map(s -> s.equals(\"four\") ? \"4\" : s)\n            .map(s -> s.equals(\"\
    five\") ? \"5\" : s)\n            .map(s -> s.equals(\"six\") ? \"6\" : s)\n \
    \           .map(s -> s.equals(\"seven\") ? \"7\" : s)\n            .map(s ->\
    \ s.equals(\"eight\") ? \"8\" : s)\n            .map(s -> s.equals(\"nine\") ?\
    \ \"9\" : s)\n            .sorted()\n            .map(s -> s.equals(\"0\") ? \"\
    zero\" : s)\n            .map(s -> s.equals(\"1\") ? \"one\" : s)\n          \
    \  .map(s -> s.equals(\"2\") ? \"two\" : s)\n            .map(s -> s.equals(\"\
    3\") ? \"three\" : s)\n            .map(s -> s.equals(\"4\") ? \"four\" : s)\n\
    \            .map(s -> s.equals(\"5\") ? \"five\" : s)\n            .map(s ->\
    \ s.equals(\"6\") ? \"six\" : s)\n            .map(s -> s.equals(\"7\") ? \"seven\"\
    \ : s)\n            .map(s -> s.equals(\"8\") ? \"eight\" : s)\n            .map(s\
    \ -> s.equals(\"9\") ? \"nine\" : s)\n            .collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011444
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numArr = numbers.split(\" \");\n        Arrays.sort(numArr);\n\
    \        return String.join(\" \", numArr);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf09d8ygo.java:22)\n"
  stdout: ''
  timestamp: 1660011443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Your code here\n        return \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnexob64e.java:20)\n"
  stdout: ''
  timestamp: 1660011443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Given a string of numbers, parse it, sort it, and then return\
    \ it in sorted order.\n        String[] nums = numbers.split(\" \");\n       \
    \ ArrayList<Integer> nums_i = new ArrayList<Integer>();\n        for (String num\
    \ : nums) {\n            nums_i.add(stringToInt(num));\n        }\n        Collections.sort(nums_i);\n\
    \        StringBuilder builder = new StringBuilder();\n        for (int i : nums_i)\
    \ {\n            builder.append(intToString(i));\n            builder.append(\"\
    \ \");\n        }\n        return builder.toString().trim();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0l4obtyc.java:19: error: cannot find symbol\n            nums_i.add(stringToInt(num));\n\
    \                       ^\n  symbol:   method stringToInt(String)\n  location:\
    \ class Problem\n/tmp/tmp0l4obtyc.java:24: error: cannot find symbol\n       \
    \     builder.append(intToString(i));\n                           ^\n  symbol:\
    \   method intToString(int)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] tokens = numbers.split(\" \");\n        int[] sorted = Arrays.stream(tokens).mapToInt(numeral\
    \ -> toInt(numeral)).sorted().toArray();\n        String[] sortedTokens = Arrays.stream(sorted).mapToObj(num\
    \ -> toString(num)).toArray(String[]::new);\n        return String.join(\" \"\
    , sortedTokens);\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpom9ifclz.java:16: error: cannot find symbol\n        int[] sorted\
    \ = Arrays.stream(tokens).mapToInt(numeral -> toInt(numeral)).sorted().toArray();\n\
    \                                                                 ^\n  symbol:\
    \   method toInt(String)\n  location: class Problem\n/tmp/tmpom9ifclz.java:17:\
    \ error: method toString in class Object cannot be applied to given types;\n \
    \       String[] sortedTokens = Arrays.stream(sorted).mapToObj(num -> toString(num)).toArray(String[]::new);\n\
    \                                                                      ^\n  required:\
    \ no arguments\n  found:    int\n  reason: actual and formal argument lists differ\
    \ in length\n2 errors\n"
  stdout: ''
  timestamp: 1660011443
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        StringBuilder sb = new StringBuilder();\n        String [] numWords\
    \ = numbers.split(\" \");\n        //  List<Integer> nums = new ArrayList<Integer>();\n\
    \        ArrayList<Integer> nums = new ArrayList<Integer>();\n        Map<String,\
    \ Integer> wordMap = new HashMap<String, Integer>();\n        wordMap.put(\"zero\"\
    , 0);\n        wordMap.put(\"one\", 1);\n        wordMap.put(\"two\", 2);\n  \
    \      wordMap.put(\"three\", 3);\n        wordMap.put(\"four\", 4);\n       \
    \ wordMap.put(\"five\", 5);\n        wordMap.put(\"six\", 6);\n        wordMap.put(\"\
    seven\", 7);\n        wordMap.put(\"eight\", 8);\n        wordMap.put(\"nine\"\
    , 9);\n        for (String word : numWords) {\n            nums.add(wordMap.get(word));\n\
    \        }\n        Collections.sort(nums);\n        for (Integer num : nums)\
    \ {\n            for (Map.Entry<String, Integer> entry : wordMap.entrySet()) {\n\
    \                if (entry.getValue().equals(num)) {\n                    sb.append(entry.getKey()\
    \ + \" \");\n                }\n            }\n        }\n        return sb.toString().trim();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011444
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        int[] nums = Arrays.stream(numbers.split(\" \")).mapToInt(Integer::parseInt).toArray();\n\
    \        Arrays.sort(nums);\n        return Arrays.toString(nums);\n    }\n  \
    \  public static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat java.base/java.util.stream.ReferencePipeline$4$1.accept(ReferencePipeline.java:214)\n\
    \tat java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:992)\n\
    \tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\
    \tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:575)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluateToArrayNode(AbstractPipeline.java:260)\n\
    \tat java.base/java.util.stream.IntPipeline.toArray(IntPipeline.java:562)\n\t\
    at Problem.sortNumbers(tmp7vuphnhm.java:15)\n\tat Problem.main(tmp7vuphnhm.java:20)\n"
  stdout: ''
  timestamp: 1660011443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Your code goes here...\n        return \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptjvz3qx9.java:20)\n"
  stdout: ''
  timestamp: 1660011443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        return \"\";\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdsbkyifj.java:19)\n"
  stdout: ''
  timestamp: 1660011443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        System.out.println(\"TODO\");\n        return \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsfvvu383.java:20)\n"
  stdout: 'TODO

    TODO

    '
  timestamp: 1660011443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] arr = numbers.split(\" \");\n        int[] num = new int[arr.length];\n\
    \        for (int i = 0; i < arr.length; i++) {\n            switch (arr[i]) {\n\
    \                case \"zero\":\n                    num[i] = 0;\n           \
    \         break;\n                case \"one\":\n                    num[i] =\
    \ 1;\n                    break;\n                case \"two\":\n            \
    \        num[i] = 2;\n                    break;\n                case \"three\"\
    :\n                    num[i] = 3;\n                    break;\n             \
    \   case \"four\":\n                    num[i] = 4;\n                    break;\n\
    \                case \"five\":\n                    num[i] = 5;\n           \
    \         break;\n                case \"six\":\n                    num[i] =\
    \ 6;\n                    break;\n                case \"seven\":\n          \
    \          num[i] = 7;\n                    break;\n                case \"eight\"\
    :\n                    num[i] = 8;\n                    break;\n             \
    \   case \"nine\":\n                    num[i] = 9;\n                    break;\n\
    \            }\n        }\n        for (int i = 0; i < num.length; i++) {\n  \
    \          for (int j = 0; j < num.length; j++) {\n                if (num[i]\
    \ < num[j]) {\n                    int temp = num[i];\n                    num[i]\
    \ = num[j];\n                    num[j] = temp;\n                }\n         \
    \   }\n        }\n        String str = \"\";\n        for (int i = 0; i < num.length;\
    \ i++) {\n            switch (num[i]) {\n                case 0:\n           \
    \         str += \"zero \";\n                    break;\n                case\
    \ 1:\n                    str += \"one \";\n                    break;\n     \
    \           case 2:\n                    str += \"two \";\n                  \
    \  break;\n                case 3:\n                    str += \"three \";\n \
    \                   break;\n                case 4:\n                    str +=\
    \ \"four \";\n                    break;\n                case 5:\n          \
    \          str += \"five \";\n                    break;\n                case\
    \ 6:\n                    str += \"six \";\n                    break;\n     \
    \           case 7:\n                    str += \"seven \";\n                \
    \    break;\n                case 8:\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyrg6kz_k.java:90: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011442
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        numbers = numbers.replaceAll(\"zero\", \"0\");\n        numbers =\
    \ numbers.replaceAll(\"one\", \"1\");\n        numbers = numbers.replaceAll(\"\
    two\", \"2\");\n        numbers = numbers.replaceAll(\"three\", \"3\");\n    \
    \    numbers = numbers.replaceAll(\"four\", \"4\");\n        numbers = numbers.replaceAll(\"\
    five\", \"5\");\n        numbers = numbers.replaceAll(\"six\", \"6\");\n     \
    \   numbers = numbers.replaceAll(\"seven\", \"7\");\n        numbers = numbers.replaceAll(\"\
    eight\", \"8\");\n        numbers = numbers.replaceAll(\"nine\", \"9\");\n   \
    \     String[] nums = numbers.split(\" \");\n        Integer[] numArr = new Integer[nums.length];\n\
    \        for (int i = 0; i < nums.length; i++) {\n            numArr[i] = Integer.parseInt(nums[i]);\n\
    \        }\n        Arrays.sort(numArr);\n        for (int i = 0; i < numArr.length;\
    \ i++) {\n            nums[i] = numArr[i].toString();\n        }\n        for\
    \ (int i = 0; i < nums.length; i++) {\n            switch (nums[i]) {\n      \
    \          case \"0\":\n                    nums[i] = \"zero\";\n            \
    \        break;\n                case \"1\":\n                    nums[i] = \"\
    one\";\n                    break;\n                case \"2\":\n            \
    \        nums[i] = \"two\";\n                    break;\n                case\
    \ \"3\":\n                    nums[i] = \"three\";\n                    break;\n\
    \                case \"4\":\n                    nums[i] = \"four\";\n      \
    \              break;\n                case \"5\":\n                    nums[i]\
    \ = \"five\";\n                    break;\n                case \"6\":\n     \
    \               nums[i] = \"six\";\n                    break;\n             \
    \   case \"7\":\n                    nums[i] = \"seven\";\n                  \
    \  break;\n                case \"8\":\n                    nums[i] = \"eight\"\
    ;\n                    break;\n                case \"9\":\n                 \
    \   nums[i] = \"nine\";\n                    break;\n            }\n        }\n\
    \        return String.join\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpseap3ovl.java:68: error: ';' expected\n        return String.join\n\
    \                          ^\n1 error\n"
  stdout: ''
  timestamp: 1660011442
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] split = numbers.split(\" \");\n        String[] sortedSplit\
    \ = new String[split.length];\n        for (int i = 0; i < split.length; i++)\
    \ {\n            sortedSplit[i] = convertToInt(split[i]);\n        }\n       \
    \ Arrays.sort(sortedSplit);\n        String sorted = sortedSplit[0];\n       \
    \ for (int i = 1; i < sortedSplit.length; i++) {\n            sorted += \" \"\
    \ + sortedSplit[i];\n        }\n        return sorted;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqvwf87i8.java:18: error: cannot find symbol\n            sortedSplit[i]\
    \ = convertToInt(split[i]);\n                             ^\n  symbol:   method\
    \ convertToInt(String)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        int[] a = new int[10];\n        for (String str : numbers.split(\"\
    \ \")) {\n            a[hash(str)]++;\n        }\n        StringBuilder sb = new\
    \ StringBuilder();\n        for (int i = 0; i < 10; i++) {\n            for (int\
    \ j = 0; j < a[i]; j++) {\n                sb.append(unhash(i) + \" \");\n   \
    \         }\n        }\n        return sb.toString().trim();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo6rithdh.java:17: error: cannot find symbol\n            a[hash(str)]++;\n\
    \              ^\n  symbol:   method hash(String)\n  location: class Problem\n\
    /tmp/tmpo6rithdh.java:22: error: cannot find symbol\n                sb.append(unhash(i)\
    \ + \" \");\n                          ^\n  symbol:   method unhash(int)\n  location:\
    \ class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Hint: input is a space-delimited string so you can use String.split(\"\
    \ \") to get an array of words\n        // Hint: you can use Integer.parseInt(numbers)\
    \ to convert a string of digits to an integer\n        // Hint: you can use Arrays.sort(arr)\
    \ to sort an array\n        // Hint: you can use Arrays.stream(arr).map(Integer::toString).collect(Collectors.joining(\"\
    \ \")) to convert an array of integers back to a space-delimited string\n    \
    \    // Hint: don't forget to return something\n        return null;\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.sortNumbers(String)\"\
    \ is null\n\tat Problem.main(tmpvbw_rw8p.java:23)\n"
  stdout: ''
  timestamp: 1660011443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Remove this line and implement the function!\n        return \"\
    \";\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphg92v87o.java:20)\n"
  stdout: ''
  timestamp: 1660011443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        ArrayList<Integer> nums = new ArrayList<Integer>();\n        String[]\
    \ numberArray = numbers.split(\" \");\n        for (String s : numberArray) {\n\
    \            if (s.equals(\"zero\")) {\n                nums.add(0);\n       \
    \     } else if (s.equals(\"one\")) {\n                nums.add(1);\n        \
    \    } else if (s.equals(\"two\")) {\n                nums.add(2);\n         \
    \   } else if (s.equals(\"three\")) {\n                nums.add(3);\n        \
    \    } else if (s.equals(\"four\")) {\n                nums.add(4);\n        \
    \    } else if (s.equals(\"five\")) {\n                nums.add(5);\n        \
    \    } else if (s.equals(\"six\")) {\n                nums.add(6);\n         \
    \   } else if (s.equals(\"seven\")) {\n                nums.add(7);\n        \
    \    } else if (s.equals(\"eight\")) {\n                nums.add(8);\n       \
    \     } else if (s.equals(\"nine\")) {\n                nums.add(9);\n       \
    \     }\n        }\n        Collections.sort(nums);\n        String output = \"\
    \";\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i)\
    \ == 0) {\n                output += \"zero\";\n            } else if (nums.get(i)\
    \ == 1) {\n                output += \"one\";\n            } else if (nums.get(i)\
    \ == 2) {\n                output += \"two\";\n            } else if (nums.get(i)\
    \ == 3) {\n                output += \"three\";\n            } else if (nums.get(i)\
    \ == 4) {\n                output += \"four\";\n            } else if (nums.get(i)\
    \ == 5) {\n                output += \"five\";\n            } else if (nums.get(i)\
    \ == 6) {\n                output += \"six\";\n            } else if (nums.get(i)\
    \ == 7) {\n                output += \"seven\";\n            } else if (nums.get(i\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpn7yujs7h.java:59: error: ')' expected\n            } else if (nums.get(i\n\
    \                                 ^\n/tmp/tmpn7yujs7h.java:60: error: illegal\
    \ start of statement\n    }\n    ^\n/tmp/tmpn7yujs7h.java:61: error: illegal start\
    \ of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011442
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // YOUR CODE HERE\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprg2cjcdz.java:16: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String [] arr = numbers.split(\" \");\n        Arrays.sort(arr);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (String i : arr)\
    \ {\n            sb.append(i);\n            sb.append(\" \");\n        }\n   \
    \     sb.deleteCharAt(sb.length() - 1);\n        return sb.toString();\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg6zh6bww.java:28)\n"
  stdout: ''
  timestamp: 1660011445
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numeralStrings = numbers.split(\" \");\n        ArrayList<Integer>\
    \ numerals = new ArrayList<Integer>();\n        for (String numeralString : numeralStrings)\
    \ {\n            switch (numeralString) {\n                case \"zero\":\n  \
    \                  numerals.add(0);\n                    break;\n            \
    \    case \"one\":\n                    numerals.add(1);\n                   \
    \ break;\n                case \"two\":\n                    numerals.add(2);\n\
    \                    break;\n                case \"three\":\n               \
    \     numerals.add(3);\n                    break;\n                case \"four\"\
    :\n                    numerals.add(4);\n                    break;\n        \
    \        case \"five\":\n                    numerals.add(5);\n              \
    \      break;\n                case \"six\":\n                    numerals.add(6);\n\
    \                    break;\n                case \"seven\":\n               \
    \     numerals.add(7);\n                    break;\n                case \"eight\"\
    :\n                    numerals.add(8);\n                    break;\n        \
    \        case \"nine\":\n                    numerals.add(9);\n              \
    \      break;\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n\
    \        Collections.sort(numerals);\n        for (Integer numeral : numerals)\
    \ {\n            switch (numeral) {\n                case 0:\n               \
    \     sb.append(\"zero \");\n                    break;\n                case\
    \ 1:\n                    sb.append(\"one \");\n                    break;\n \
    \               case 2:\n                    sb.append(\"two \");\n          \
    \          break;\n                case 3:\n                    sb.append(\"three\
    \ \");\n                    break;\n                case 4:\n                \
    \    sb.append(\"four \");\n                    break;\n                case 5:\n\
    \                    sb.append(\"five \");\n                    break;\n     \
    \           case 6:\n                    sb.append(\"six \");\n              \
    \      break;\n                case 7:\n                    sb.append(\"seven\
    \ \");\n                    break;\n                case 8:\n                \
    \    sb.append(\"eight \");\n                    break;\n                case\
    \ 9:\n                    sb.append(\"nine \");\n                    break;\n\
    \            }\n        }\n        return sb.toString().trim();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // maps number to digits\n        Map<String, Integer> numberMap\
    \ = new HashMap<>();\n        numberMap.put(\"zero\", 0);\n        numberMap.put(\"\
    one\", 1);\n        numberMap.put(\"two\", 2);\n        numberMap.put(\"three\"\
    , 3);\n        numberMap.put(\"four\", 4);\n        numberMap.put(\"five\", 5);\n\
    \        numberMap.put(\"six\", 6);\n        numberMap.put(\"seven\", 7);\n  \
    \      numberMap.put(\"eight\", 8);\n        numberMap.put(\"nine\", 9);\n   \
    \     // get all number strings\n        String[] numberStrings = numbers.split(\"\
    \ \");\n        // maps number digits to strings\n        Map<Integer, String>\
    \ numberStringMap = new HashMap<>();\n        numberStringMap.put(0, \"zero\"\
    );\n        numberStringMap.put(1, \"one\");\n        numberStringMap.put(2, \"\
    two\");\n        numberStringMap.put(3, \"three\");\n        numberStringMap.put(4,\
    \ \"four\");\n        numberStringMap.put(5, \"five\");\n        numberStringMap.put(6,\
    \ \"six\");\n        numberStringMap.put(7, \"seven\");\n        numberStringMap.put(8,\
    \ \"eight\");\n        numberStringMap.put(9, \"nine\");\n        // convert all\
    \ number strings to digits\n        List<Integer> numbersList = new ArrayList<>();\n\
    \        for (String numberString : numberStrings) {\n            numbersList.add(numberMap.get(numberString));\n\
    \        }\n        // sort all digits\n        Collections.sort(numbersList);\n\
    \        // convert all digits to number strings\n        StringBuilder result\
    \ = new StringBuilder();\n        for (Integer number : numbersList) {\n     \
    \       result.append(numberStringMap.get(number) + \" \");\n        }\n     \
    \   return result.toString().trim();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb6vjyjlb.java:56)\n"
  stdout: ''
  timestamp: 1660011445
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] array = numbers.split(\" \");\n        return Arrays.stream(array).sorted().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp89fvqw_x.java:21)\n"
  stdout: ''
  timestamp: 1660011446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n      String[] nums = numbers.split(\" \");\n      String[] sorted = new\
    \ String[nums.length];\n      int i = 0;\n      for (String num : nums) {\n  \
    \      if (num.equals(\"zero\")) {\n          sorted[i] = \"0\";\n        } else\
    \ if (num.equals(\"one\")) {\n          sorted[i] = \"1\";\n        } else if\
    \ (num.equals(\"two\")) {\n          sorted[i] = \"2\";\n        } else if (num.equals(\"\
    three\")) {\n          sorted[i] = \"3\";\n        } else if (num.equals(\"four\"\
    )) {\n          sorted[i] = \"4\";\n        } else if (num.equals(\"five\")) {\n\
    \          sorted[i] = \"5\";\n        } else if (num.equals(\"six\")) {\n   \
    \       sorted[i] = \"6\";\n        } else if (num.equals(\"seven\")) {\n    \
    \      sorted[i] = \"7\";\n        } else if (num.equals(\"eight\")) {\n     \
    \     sorted[i] = \"8\";\n        } else if (num.equals(\"nine\")) {\n       \
    \   sorted[i] = \"9\";\n        }\n        i++;\n      }\n      Arrays.sort(sorted);\n\
    \      StringBuilder sb = new StringBuilder();\n      for (String num : sorted)\
    \ {\n        sb.append(num + \" \");\n      }\n      return sb.toString().trim();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmoyajurg.java:50)\n"
  stdout: ''
  timestamp: 1660011446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] tokens = numbers.split(\" \");\n        if (tokens.length\
    \ == 0) {\n            return \"\";\n        }\n        int[] nums = new int[tokens.length];\n\
    \        for (int i = 0; i < tokens.length; i++) {\n            nums[i] = Integer.parseInt(tokens[i]);\n\
    \        }\n        Arrays.sort(nums);\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < nums.length; i++) {\n            sb.append(nums[i]);\n\
    \            if (i != nums.length - 1) {\n                sb.append(\" \");\n\
    \            }\n        }\n        return sb.toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.sortNumbers(tmpckabtpyq.java:21)\n\tat Problem.main(tmpckabtpyq.java:34)\n"
  stdout: ''
  timestamp: 1660011446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        return \"\";\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdsbkyifj.java:19)\n"
  stdout: ''
  timestamp: 1660011443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Fill in the code here\n        return \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpecs8apfo.java:20)\n"
  stdout: ''
  timestamp: 1660011446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Fill in the function body\n        return \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4p56q5j4.java:20)\n"
  stdout: ''
  timestamp: 1660011445
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        return \"\";\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdsbkyifj.java:19)\n"
  stdout: ''
  timestamp: 1660011443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] num = numbers.split(\" \");\n        TreeMap<Integer, ArrayList<String>>\
    \ map = new TreeMap<>();\n        for (String s : num) {\n            if (map.containsKey(translate(s)))\
    \ {\n                map.get(translate(s)).add(s);\n            } else {\n   \
    \             ArrayList<String> temp = new ArrayList<>();\n                temp.add(s);\n\
    \                map.put(translate(s), temp);\n            }\n        }\n    \
    \    StringBuilder sb = new StringBuilder();\n        for (Map.Entry<Integer,\
    \ ArrayList<String>> entry : map.entrySet()) {\n            for (String s : entry.getValue())\
    \ {\n                sb.append(s + \" \");\n            }\n        }\n       \
    \ return sb.substring(0, sb.length() - 1);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf17u6br4.java:18: error: cannot find symbol\n            if (map.containsKey(translate(s)))\
    \ {\n                                ^\n  symbol:   method translate(String)\n\
    \  location: class Problem\n/tmp/tmpf17u6br4.java:19: error: cannot find symbol\n\
    \                map.get(translate(s)).add(s);\n                        ^\n  symbol:\
    \   method translate(String)\n  location: class Problem\n/tmp/tmpf17u6br4.java:23:\
    \ error: cannot find symbol\n                map.put(translate(s), temp);\n  \
    \                      ^\n  symbol:   method translate(String)\n  location: class\
    \ Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        return numbers;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp46_tbfgz.java:21)\n"
  stdout: ''
  timestamp: 1660011446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums);\n\
    \        return String.join(\" \", nums);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9l2doktw.java:22)\n"
  stdout: ''
  timestamp: 1660011446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        return \"\";\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdsbkyifj.java:19)\n"
  stdout: ''
  timestamp: 1660011443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<Integer> list = new ArrayList<>();\n        for (String s :\
    \ numbers.split(\" \")) {\n            list.add(getNumFromWord(s));\n        }\n\
    \        list.sort(Comparator.naturalOrder());\n        return getWordFromNum(list.get(0))\
    \ + \" \" + getWordFromNum(list.get(1)) + \" \" + getWordFromNum(list.get(2));\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp6_k0mo9z.java:17: error: cannot find symbol\n            list.add(getNumFromWord(s));\n\
    \                     ^\n  symbol:   method getNumFromWord(String)\n  location:\
    \ class Problem\n/tmp/tmp6_k0mo9z.java:20: error: cannot find symbol\n       \
    \ return getWordFromNum(list.get(0)) + \" \" + getWordFromNum(list.get(1)) + \"\
    \ \" + getWordFromNum(list.get(2));\n               ^\n  symbol:   method getWordFromNum(Integer)\n\
    \  location: class Problem\n/tmp/tmp6_k0mo9z.java:20: error: cannot find symbol\n\
    \        return getWordFromNum(list.get(0)) + \" \" + getWordFromNum(list.get(1))\
    \ + \" \" + getWordFromNum(list.get(2));\n                                   \
    \                ^\n  symbol:   method getWordFromNum(Integer)\n  location: class\
    \ Problem\n/tmp/tmp6_k0mo9z.java:20: error: cannot find symbol\n        return\
    \ getWordFromNum(list.get(0)) + \" \" + getWordFromNum(list.get(1)) + \" \" +\
    \ getWordFromNum(list.get(2));\n                                             \
    \                                          ^\n  symbol:   method getWordFromNum(Integer)\n\
    \  location: class Problem\n4 errors\n"
  stdout: ''
  timestamp: 1660011445
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        Map<String, Integer> numberMap = new HashMap<>();\n        numberMap.put(\"\
    zero\", 0);\n        numberMap.put(\"one\", 1);\n        numberMap.put(\"two\"\
    , 2);\n        numberMap.put(\"three\", 3);\n        numberMap.put(\"four\", 4);\n\
    \        numberMap.put(\"five\", 5);\n        numberMap.put(\"six\", 6);\n   \
    \     numberMap.put(\"seven\", 7);\n        numberMap.put(\"eight\", 8);\n   \
    \     numberMap.put(\"nine\", 9);\n        String[] stringNumbers = numbers.split(\"\
    \ \");\n        List<Integer> intNumbers = new ArrayList<>();\n        for (String\
    \ n : stringNumbers) {\n            intNumbers.add(numberMap.get(n));\n      \
    \  }\n        Collections.sort(intNumbers);\n        StringBuilder builder = new\
    \ StringBuilder();\n        for (Integer n : intNumbers) {\n            for (Map.Entry<String,\
    \ Integer> entry : numberMap.entrySet()) {\n                if (entry.getValue().equals(n))\
    \ {\n                    builder.append(entry.getKey());\n                   \
    \ builder.append(\" \");\n                }\n            }\n        }\n      \
    \  return builder.toString().trim();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011446
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] a = numbers.split(\" \");\n        String[] num = {\"zero\"\
    , \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\"\
    , \"nine\"};\n        Arrays.sort(a, new Comparator<String>() {\n            @Override\n\
    \            public int compare(String a, String b) {\n                return\
    \ Arrays.asList(num).indexOf(a) - Arrays.asList(num).indexOf(b);\n           \
    \ }\n        });\n        return String.join(\" \", a);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums);\n\
    \        return String.join(\" \", nums);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9l2doktw.java:22)\n"
  stdout: ''
  timestamp: 1660011446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String [] numarr = numbers.split(\" \");\n        String [] strarr\
    \ = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"};\n        for (int i = 0; i < numarr.length; i++) {\n \
    \           for (int j = 0; j < numarr.length; j++) {\n                if (strarr.indexOf(numarr[i])\
    \ < strarr.indexOf(numarr[j])) {\n                    String temp = numarr[i];\n\
    \                    numarr[i] = numarr[j];\n                    numarr[j] = temp;\n\
    \                }\n            }\n        }\n        String ans = \"\";\n   \
    \     for (int i = 0; i < numarr.length; i++) {\n            ans += numarr[i]\
    \ + \" \";\n        }\n        return ans.trim();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7hmvgrc2.java:19: error: cannot find symbol\n                if\
    \ (strarr.indexOf(numarr[i]) < strarr.indexOf(numarr[j])) {\n                \
    \          ^\n  symbol:   method indexOf(String)\n  location: variable strarr\
    \ of type String[]\n/tmp/tmp7hmvgrc2.java:19: error: cannot find symbol\n    \
    \            if (strarr.indexOf(numarr[i]) < strarr.indexOf(numarr[j])) {\n  \
    \                                                    ^\n  symbol:   method indexOf(String)\n\
    \  location: variable strarr of type String[]\n2 errors\n"
  stdout: ''
  timestamp: 1660011445
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        int[] counts = new int[10];\n        String[] tokens = numbers.split(\"\
    \ \");\n        for (String token : tokens) {\n            int i = 0;\n      \
    \      switch (token) {\n                case \"zero\": i = 0; break;\n      \
    \          case \"one\": i = 1; break;\n                case \"two\": i = 2; break;\n\
    \                case \"three\": i = 3; break;\n                case \"four\"\
    : i = 4; break;\n                case \"five\": i = 5; break;\n              \
    \  case \"six\": i = 6; break;\n                case \"seven\": i = 7; break;\n\
    \                case \"eight\": i = 8; break;\n                case \"nine\"\
    : i = 9; break;\n            }\n            counts[i]++;\n        }\n        StringBuilder\
    \ builder = new StringBuilder();\n        for (int i = 0; i < 10; i++) {\n   \
    \         String word = \"\";\n            switch (i) {\n                case\
    \ 0: word = \"zero\"; break;\n                case 1: word = \"one\"; break;\n\
    \                case 2: word = \"two\"; break;\n                case 3: word\
    \ = \"three\"; break;\n                case 4: word = \"four\"; break;\n     \
    \           case 5: word = \"five\"; break;\n                case 6: word = \"\
    six\"; break;\n                case 7: word = \"seven\"; break;\n            \
    \    case 8: word = \"eight\"; break;\n                case 9: word = \"nine\"\
    ; break;\n            }\n            for (int j = 0; j < counts[i]; j++) {\n \
    \               builder.append(word + \" \");\n            }\n        }\n    \
    \    builder.deleteCharAt(builder.length() - 1);\n        return builder.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_lsr260i.java:56)\n"
  stdout: ''
  timestamp: 1660011446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] split = numbers.split(\" \");\n        return Arrays.stream(split).sorted().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1g9vypc6.java:21)\n"
  stdout: ''
  timestamp: 1660011446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numbersArr = numbers.split(\" \");\n        Arrays.sort(numbersArr);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (String str : numbersArr)\
    \ {\n            sb.append(str + \" \");\n        }\n        return sb.toString().trim();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsxhww02v.java:26)\n"
  stdout: ''
  timestamp: 1660011446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<Integer> list = new ArrayList<>();\n        // HashMap<String,\
    \ Integer> map = new HashMap<>();\n        // map.put(\"zero\", 0);\n        //\
    \ map.put(\"one\", 1);\n        // map.put(\"two\", 2);\n        // map.put(\"\
    three\", 3);\n        // map.put(\"four\", 4);\n        // map.put(\"five\", 5);\n\
    \        // map.put(\"six\", 6);\n        // map.put(\"seven\", 7);\n        //\
    \ map.put(\"eight\", 8);\n        // map.put(\"nine\", 9);\n        String[] nums\
    \ = numbers.split(\" \");\n        // for (String num : nums) {\n        //  \
    \   list.add(map.get(num));\n        // }\n        for (String num : nums) {\n\
    \            if (num.equals(\"zero\")) {\n                list.add(0);\n     \
    \       } else if (num.equals(\"one\")) {\n                list.add(1);\n    \
    \        } else if (num.equals(\"two\")) {\n                list.add(2);\n   \
    \         } else if (num.equals(\"three\")) {\n                list.add(3);\n\
    \            } else if (num.equals(\"four\")) {\n                list.add(4);\n\
    \            } else if (num.equals(\"five\")) {\n                list.add(5);\n\
    \            } else if (num.equals(\"six\")) {\n                list.add(6);\n\
    \            } else if (num.equals(\"seven\")) {\n                list.add(7);\n\
    \            } else if (num.equals(\"eight\")) {\n                list.add(8);\n\
    \            } else if (num.equals(\"nine\")) {\n                list.add(9);\n\
    \            }\n        }\n        Collections.sort(list);\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int num : list) {\n            if (num\
    \ == 0) {\n                sb.append(\"zero \");\n            } else if (num ==\
    \ 1) {\n                sb.append(\"one \");\n            } else if (num == 2)\
    \ {\n                sb.append(\"two \");\n           \n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi2y4ku7e.java:65: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011445
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        if (numbers == null || numbers.isEmpty()) return numbers;\n     \
    \   String[] nums = numbers.split(\" \");\n        Set<Integer> seen = new HashSet<>();\n\
    \        List<Integer> ret = new ArrayList<>();\n        for (String num : nums)\
    \ {\n            int i = getNumeral(num);\n            if (!seen.contains(i))\
    \ {\n                seen.add(i);\n                ret.add(i);\n            }\n\
    \        }\n        Collections.sort(ret);\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i : ret) {\n            sb.append(i);\n            sb.append(\"\
    \ \");\n        }\n        return sb.toString().trim();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp41x86t_4.java:20: error: cannot find symbol\n            int i\
    \ = getNumeral(num);\n                    ^\n  symbol:   method getNumeral(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        List<Integer> numl\
    \ = new ArrayList<Integer>();\n        int l = nums.length;\n        for (int\
    \ i = 0; i < l; i++) {\n            switch (nums[i]) {\n                case \"\
    zero\": numl.add(0); break;\n                case \"one\": numl.add(1); break;\n\
    \                case \"two\": numl.add(2); break;\n                case \"three\"\
    : numl.add(3); break;\n                case \"four\": numl.add(4); break;\n  \
    \              case \"five\": numl.add(5); break;\n                case \"six\"\
    : numl.add(6); break;\n                case \"seven\": numl.add(7); break;\n \
    \               case \"eight\": numl.add(8); break;\n                case \"nine\"\
    : numl.add(9); break;\n            }\n        }\n        Collections.sort(numl);\n\
    \        String res = \"\";\n        for (int i = 0; i < l; i++) {\n         \
    \   switch (numl.get(i)) {\n                case 0: res += \"zero \"; break;\n\
    \                case 1: res += \"one \"; break;\n                case 2: res\
    \ += \"two \"; break;\n                case 3: res += \"three \"; break;\n   \
    \             case 4: res += \"four \"; break;\n                case 5: res +=\
    \ \"five \"; break;\n                case 6: res += \"six \"; break;\n       \
    \         case 7: res += \"seven \"; break;\n                case 8: res += \"\
    eight \"; break;\n                case 9: res += \"nine \"; break;\n         \
    \   }\n        }\n        return res.trim();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortNumbers(tmp83tkh55c.java:35)\n\tat Problem.main(tmp83tkh55c.java:51)\n"
  stdout: ''
  timestamp: 1660011446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] array = numbers.split(\" \");\n        for (int i = 0; i\
    \ < array.length; i++) {\n            for (int j = i; j < array.length; j++) {\n\
    \                if (toInt(array[i]) > toInt(array[j])) {\n                  \
    \  String temp = array[i];\n                    array[i] = array[j];\n       \
    \             array[j] = temp;\n                }\n            }\n        }\n\
    \        return String.join(\" \", array);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzeqtw8vy.java:18: error: cannot find symbol\n                if\
    \ (toInt(array[i]) > toInt(array[j])) {\n                    ^\n  symbol:   method\
    \ toInt(String)\n  location: class Problem\n/tmp/tmpzeqtw8vy.java:18: error: cannot\
    \ find symbol\n                if (toInt(array[i]) > toInt(array[j])) {\n    \
    \                                  ^\n  symbol:   method toInt(String)\n  location:\
    \ class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011446
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        HashMap<String, Integer>\
    \ map = new HashMap<>();\n        map.put(\"zero\", 0);\n        map.put(\"one\"\
    , 1);\n        map.put(\"two\", 2);\n        map.put(\"three\", 3);\n        map.put(\"\
    four\", 4);\n        map.put(\"five\", 5);\n        map.put(\"six\", 6);\n   \
    \     map.put(\"seven\", 7);\n        map.put(\"eight\", 8);\n        map.put(\"\
    nine\", 9);\n        List<String> ret = new ArrayList<>();\n        for (String\
    \ s : nums)\n            ret.add(s);\n        Collections.sort(ret, (a, b) ->\
    \ map.get(a) - map.get(b));\n        return String.join(\" \", ret);\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        return numbers;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp46_tbfgz.java:21)\n"
  stdout: ''
  timestamp: 1660011446
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] arr = numbers.split(\" \");\n        String[] num = {\"\
    zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"\
    eight\", \"nine\"};\n        HashMap<String, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < 10; i++) {\n            map.put(num[i], i);\n   \
    \     }\n        Arrays.sort(arr, new Comparator<String>() {\n            @Override\n\
    \            public int compare(String a, String b) {\n                return\
    \ map.get(a) - map.get(b);\n            }\n        });\n        String str = \"\
    \";\n        for (int i = 0; i < arr.length; i++) {\n            str += arr[i]\
    \ + \" \";\n        }\n        return str.trim();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011448
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Make a map from numberal to number\n        Map<String, Integer>\
    \ numberals = new HashMap<>();\n        numberals.put(\"zero\", 0);\n        numberals.put(\"\
    one\", 1);\n        numberals.put(\"two\", 2);\n        numberals.put(\"three\"\
    , 3);\n        numberals.put(\"four\", 4);\n        numberals.put(\"five\", 5);\n\
    \        numberals.put(\"six\", 6);\n        numberals.put(\"seven\", 7);\n  \
    \      numberals.put(\"eight\", 8);\n        numberals.put(\"nine\", 9);\n   \
    \     // Split the input on spaces and convert to Integers\n        // sort that\
    \ array\n        int[] nums = Arrays.stream(numbers.split(\" \")).mapToInt(numberals::get).sorted().toArray();\n\
    \        // Map each of those numbers back to their numberal\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int num : nums) {\n            for (Map.Entry<String,\
    \ Integer> entry : numberals.entrySet()) {\n                if (entry.getValue()\
    \ == num) {\n                    sb.append(entry.getKey()).append(\" \");\n  \
    \                  break;\n                }\n            }\n        }\n     \
    \   // Return the resulting space-delimited string\n        return sb.toString().trim();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException\n\tat java.base/java.util.stream.ReferencePipeline$4$1.accept(ReferencePipeline.java:214)\n\
    \tat java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:992)\n\
    \tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\
    \tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:575)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluateToArrayNode(AbstractPipeline.java:260)\n\
    \tat java.base/java.util.stream.IntPipeline.toArray(IntPipeline.java:562)\n\t\
    at Problem.sortNumbers(tmp10u1mszl.java:29)\n\tat Problem.main(tmp10u1mszl.java:44)\n"
  stdout: ''
  timestamp: 1660011448
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<Integer> list = new ArrayList<>();\n        for (String num\
    \ : numbers.split(\" \"))\n            list.add(numberToInteger(num));\n     \
    \   Collections.sort(list);\n        return list.stream().map(Problem::integerToNumber).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp0p_beudo.java:17: error: cannot find symbol\n            list.add(numberToInteger(num));\n\
    \                     ^\n  symbol:   method numberToInteger(String)\n  location:\
    \ class Problem\n/tmp/tmp0p_beudo.java:19: error: invalid method reference\n \
    \       return list.stream().map(Problem::integerToNumber).collect(Collectors.joining(\"\
    \ \"));\n                                 ^\n  cannot find symbol\n    symbol:\
    \   method integerToNumber()\n    location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011448
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        Map<String, Integer> d = new HashMap<>();\n        d.put(\"zero\"\
    , 0);\n        d.put(\"one\", 1);\n        d.put(\"two\", 2);\n        d.put(\"\
    three\", 3);\n        d.put(\"four\", 4);\n        d.put(\"five\", 5);\n     \
    \   d.put(\"six\", 6);\n        d.put(\"seven\", 7);\n        d.put(\"eight\"\
    , 8);\n        d.put(\"nine\", 9);\n        String[] nums = numbers.split(\" \"\
    );\n        int[] num = new int[nums.length];\n        for (int i = 0; i < nums.length;\
    \ i++) {\n            num[i] = d.get(nums[i]);\n        }\n        Arrays.sort(num);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ num.length; i++) {\n            for (Map.Entry<String, Integer> e : d.entrySet())\
    \ {\n                if (e.getValue() == num[i]) {\n                    sb.append(e.getKey());\n\
    \                    sb.append(\" \");\n                }\n            }\n   \
    \     }\n        sb.deleteCharAt(sb.length() - 1);\n        return sb.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.Map.get(Object)\"\
    \ is null\n\tat Problem.sortNumbers(tmp8_lu3brg.java:29)\n\tat Problem.main(tmp8_lu3brg.java:45)\n"
  stdout: ''
  timestamp: 1660011448
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Your code here\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp12l5irdy.java:16: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011447
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<Integer> list = new ArrayList<>();\n        for (String n :\
    \ numbers.split(\" \")) {\n            if (n.equals(\"zero\")) list.add(0);\n\
    \            if (n.equals(\"one\")) list.add(1);\n            if (n.equals(\"\
    two\")) list.add(2);\n            if (n.equals(\"three\")) list.add(3);\n    \
    \        if (n.equals(\"four\")) list.add(4);\n            if (n.equals(\"five\"\
    )) list.add(5);\n            if (n.equals(\"six\")) list.add(6);\n           \
    \ if (n.equals(\"seven\")) list.add(7);\n            if (n.equals(\"eight\"))\
    \ list.add(8);\n            if (n.equals(\"nine\")) list.add(9);\n        }\n\
    \        Collections.sort(list);\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < list.size(); i++) {\n            if (i > 0) sb.append(\"\
    \ \");\n            if (list.get(i) == 0) sb.append(\"zero\");\n            if\
    \ (list.get(i) == 1) sb.append(\"one\");\n            if (list.get(i) == 2) sb.append(\"\
    two\");\n            if (list.get(i) == 3) sb.append(\"three\");\n           \
    \ if (list.get(i) == 4) sb.append(\"four\");\n            if (list.get(i) == 5)\
    \ sb.append(\"five\");\n            if (list.get(i) == 6) sb.append(\"six\");\n\
    \            if (list.get(i) == 7) sb.append(\"seven\");\n            if (list.get(i)\
    \ == 8) sb.append(\"eight\");\n            if (list.get(i) == 9) sb.append(\"\
    nine\");\n        }\n        return sb.toString();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011448
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        TreeMap<Integer, String>\
    \ sorted = new TreeMap<>();\n        for (String num : nums) {\n            int\
    \ val = convertStringToNumber(num);\n            if (sorted.containsKey(val))\
    \ {\n                String newVal = sorted.get(val) + \" \" + num;\n        \
    \        sorted.put(val, newVal);\n            } else {\n                sorted.put(val,\
    \ num);\n            }\n        }\n        String output = \"\";\n        for\
    \ (Map.Entry<Integer, String> entry : sorted.entrySet()) {\n            output\
    \ += entry.getValue() + \" \";\n        }\n        return output.trim();\n   \
    \ }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\"\
    )).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpyeqioylu.java:18: error: cannot find symbol\n            int val\
    \ = convertStringToNumber(num);\n                      ^\n  symbol:   method convertStringToNumber(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011448
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums);\n\
    \        return String.join(\" \", nums);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9l2doktw.java:22)\n"
  stdout: ''
  timestamp: 1660011446
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Don't bother with the stuff below. Copy and paste the line below\
    \ for the solution.\n        return Arrays.stream(numbers.split(\" \")).sorted(Comparator.comparingInt(s\
    \ -> \"zero one two three four five six seven eight nine\".indexOf(s) / 4)).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011448
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<String> myList = Arrays.asList(numbers.split(\" \"));\n    \
    \    Collections.sort(myList, new Comparator<String>() {\n            public int\
    \ compare(String s1, String s2) {\n                return Integer.valueOf(s1).compareTo(Integer.valueOf(s2));\n\
    \            }\n        });\n        return String.join(\" \", myList);\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"five\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.valueOf(Integer.java:999)\n\
    \tat Problem$1.compare(tmpzgc2nt6e.java:18)\n\tat Problem$1.compare(tmpzgc2nt6e.java:16)\n\
    \tat java.base/java.util.TimSort.countRunAndMakeAscending(TimSort.java:355)\n\t\
    at java.base/java.util.TimSort.sort(TimSort.java:220)\n\tat java.base/java.util.Arrays.sort(Arrays.java:1233)\n\
    \tat java.base/java.util.Arrays$ArrayList.sort(Arrays.java:4219)\n\tat java.base/java.util.Collections.sort(Collections.java:179)\n\
    \tat Problem.sortNumbers(tmpzgc2nt6e.java:16)\n\tat Problem.main(tmpzgc2nt6e.java:26)\n"
  stdout: ''
  timestamp: 1660011448
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        return Arrays.stream(numbers.split(\" \"))\n                    \
    \ .map(Problem::toInt)\n                     .sorted()\n                     .map(Problem::toString)\n\
    \                     .collect(Collectors.joining(\" \"));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmplo_hwf.java:16: error: invalid method reference\n           \
    \          .map(Problem::toInt)\n                          ^\n  cannot find symbol\n\
    \    symbol:   method toInt()\n    location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011448
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        System.out.println(\"sortNumbers('\" + numbers + \"')\");\n     \
    \   char[] nums = numbers.toCharArray();\n        int[] unsorted = new int[nums.length];\n\
    \        for (int i = 0; i < nums.length; i++) {\n            unsorted[i] = nums[i]\
    \ - '0';\n        }\n        int[] sorted = Arrays.copyOf(unsorted, unsorted.length);\n\
    \        Arrays.sort(sorted);\n        StringBuffer sb = new StringBuffer();\n\
    \        for (int i = 0; i < sorted.length; i++) {\n            sb.append(sorted[i]);\n\
    \        }\n        return sb.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphozyaqxb.java:31)\n"
  stdout: 'sortNumbers('''')

    sortNumbers(''three'')

    '
  timestamp: 1660011448
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        int[] count = new int[10];\n        for (int i = 0; i < numbers.length();\
    \ i++) {\n            char c = numbers.charAt(i);\n            if (c == 'o') {\n\
    \                count[1]++;\n            } else if (c == 't') {\n           \
    \     if (numbers.charAt(i + 1) == 'w')\n                    count[2]++;\n   \
    \             else if (numbers.charAt(i + 1) == 'h')\n                    count[3]++;\n\
    \                else\n                    count[4]++;\n            } else if\
    \ (c == 'f') {\n                count[5]++;\n            } else if (c == 's')\
    \ {\n                count[6]++;\n            } else if (c == 'e') {\n       \
    \         count[7]++;\n            } else if (c == 'n') {\n                count[9]++;\n\
    \            }\n        }\n        StringBuilder sb = new StringBuilder();\n \
    \       for (int i = 0; i < 10; i++) {\n            for (int j = 0; j < count[i];\
    \ j++) {\n                sb.append(i);\n            }\n        }\n        return\
    \ sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjrezoupj.java:47)\n"
  stdout: ''
  timestamp: 1660011448
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        int[] values = new\
    \ int[nums.length];\n        for (int i = 0; i < nums.length; i++) {\n       \
    \     values[i] = switch(nums[i]) {\n                case \"zero\" -> 0;\n   \
    \             case \"one\" -> 1;\n                case \"two\" -> 2;\n       \
    \         case \"three\" -> 3;\n                case \"four\" -> 4;\n        \
    \        case \"five\" -> 5;\n                case \"six\" -> 6;\n           \
    \     case \"seven\" -> 7;\n                case \"eight\" -> 8;\n           \
    \     case \"nine\" -> 9;\n                default -> -1;\n            };\n  \
    \      }\n        Arrays.sort(values);\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < values.length; i++) {\n            sb.append(switch(values[i])\
    \ {\n                case 0 -> \"zero\";\n                case 1 -> \"one\";\n\
    \                case 2 -> \"two\";\n                case 3 -> \"three\";\n  \
    \              case 4 -> \"four\";\n                case 5 -> \"five\";\n    \
    \            case 6 -> \"six\";\n                case 7 -> \"seven\";\n      \
    \          case 8 -> \"eight\";\n                case 9 -> \"nine\";\n       \
    \         default -> \"\";\n            });\n            if (i < values.length\
    \ - 1) {\n                sb.append(\" \");\n            }\n        }\n      \
    \  return sb.toString();\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011448
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"zero\"\
    , 0);\n        map.put(\"one\", 1);\n        map.put(\"two\", 2);\n        map.put(\"\
    three\", 3);\n        map.put(\"four\", 4);\n        map.put(\"five\", 5);\n \
    \       map.put(\"six\", 6);\n        map.put(\"seven\", 7);\n        map.put(\"\
    eight\", 8);\n        map.put(\"nine\", 9);\n        List<Integer> arr = new ArrayList<>();\n\
    \        String[] strs = numbers.split(\" \");\n        for (String s : strs)\
    \ {\n            arr.add(map.get(s));\n        }\n        Collections.sort(arr);\n\
    \        return arr.toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp5yo3f9p.java:35)\n"
  stdout: ''
  timestamp: 1660011448
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // TODO\n        return \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg4_q03fr.java:20)\n"
  stdout: ''
  timestamp: 1660011448
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // TODO: Implement me\n        return \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqzigusl9.java:20)\n"
  stdout: ''
  timestamp: 1660011448
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<Integer> ns = Arrays.stream(numbers.split(\" \")).map(Integer::valueOf).collect(Collectors.toList());\n\
    \        Collections.sort(ns);\n        return ns.stream().map(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.valueOf(Integer.java:999)\n\
    \tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\
    \tat java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:992)\n\
    \tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\
    \tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\
    \tat java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\
    \tat java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)\n\
    \tat Problem.sortNumbers(tmpbxmloc4d.java:15)\n\tat Problem.main(tmpbxmloc4d.java:20)\n"
  stdout: ''
  timestamp: 1660011448
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] words = numbers.split(\" \");\n        List<String> list\
    \ = Arrays.asList(words);\n        String[] nums = new String[]{\"zero\", \"one\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\
    };\n        List<String> numList = Arrays.asList(nums);\n        list.sort((String\
    \ a, String b) -> {\n            return Integer.compare(numList.indexOf(a), numList.indexOf(b));\n\
    \        });\n        return String.join(\" \", list);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011448
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        if (numbers == null || numbers.isEmpty()) {\n            return \"\
    \";\n        }\n        // Split string by space\n        String[] arr = numbers.split(\"\
    \ \");\n        // Convert string array to ArrayList\n        List<String> list\
    \ = new ArrayList<String>(Arrays.asList(arr));\n        // Sort the ArrayList\n\
    \        Collections.sort(list);\n        return String.join(\" \", list);\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbeudvkx7.java:29)\n"
  stdout: ''
  timestamp: 1660011449
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (String s : nums)\
    \ {\n            sb.append(s);\n            sb.append(\" \");\n        }\n   \
    \     sb.deleteCharAt(sb.length() - 1);\n        return sb.toString();\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3qvivzfy.java:28)\n"
  stdout: ''
  timestamp: 1660011448
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Your code here\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp12l5irdy.java:16: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011447
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // TODO: Add your code here\n        return \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqk6swwth.java:20)\n"
  stdout: ''
  timestamp: 1660011448
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // TODO: Write solution here\n        return \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpac1c7t6t.java:20)\n"
  stdout: ''
  timestamp: 1660011449
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numbersStr = numbers.split(\" \");\n        int[] numbersInt\
    \ = new int[numbersStr.length];\n        for (int i = 0; i < numbersStr.length;\
    \ i++) {\n            switch (numbersStr[i]) {\n                case \"zero\"\
    :\n                    numbersInt[i] = 0;\n                    break;\n      \
    \          case \"one\":\n                    numbersInt[i] = 1;\n           \
    \         break;\n                case \"two\":\n                    numbersInt[i]\
    \ = 2;\n                    break;\n                case \"three\":\n        \
    \            numbersInt[i] = 3;\n                    break;\n                case\
    \ \"four\":\n                    numbersInt[i] = 4;\n                    break;\n\
    \                case \"five\":\n                    numbersInt[i] = 5;\n    \
    \                break;\n                case \"six\":\n                    numbersInt[i]\
    \ = 6;\n                    break;\n                case \"seven\":\n        \
    \            numbersInt[i] = 7;\n                    break;\n                case\
    \ \"eight\":\n                    numbersInt[i] = 8;\n                    break;\n\
    \                case \"nine\":\n                    numbersInt[i] = 9;\n    \
    \                break;\n            }\n        }\n        Arrays.sort(numbersInt);\n\
    \        String output = \"\";\n        for (int i = 0; i < numbersInt.length;\
    \ i++) {\n            switch (numbersInt[i]) {\n                case 0:\n    \
    \                output += \"zero \";\n                    break;\n          \
    \      case 1:\n                    output += \"one \";\n                    break;\n\
    \                case 2:\n                    output += \"two \";\n          \
    \          break;\n                case 3:\n                    output += \"three\
    \ \";\n                    break;\n                case 4:\n                 \
    \   output += \"four \";\n                    break;\n                case 5:\n\
    \                    output += \"five \";\n                    break;\n      \
    \          case 6:\n                    output += \"six \";\n                \
    \    break;\n                case 7:\n                    output += \"seven \"\
    ;\n                    break;\n                case 8:\n                    output\
    \ += \"eight \";\n                    break;\n                case 9:\n      \
    \              output += \"nine \";\n                    break;\n            }\n\
    \        }\n        return output.trim();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6ec44ucj.java:90)\n"
  stdout: ''
  timestamp: 1660011449
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] splitNumbers = numbers.split(\" \");\n        int numLength\
    \ = splitNumbers.length;\n        int[] stringToInt = new int[numLength];\n  \
    \      for (int i = 0; i < numLength; i++) {\n            switch (splitNumbers[i])\
    \ {\n                case \"zero\":\n                    stringToInt[i] = 0;\n\
    \                    break;\n                case \"one\":\n                 \
    \   stringToInt[i] = 1;\n                    break;\n                case \"two\"\
    :\n                    stringToInt[i] = 2;\n                    break;\n     \
    \           case \"three\":\n                    stringToInt[i] = 3;\n       \
    \             break;\n                case \"four\":\n                    stringToInt[i]\
    \ = 4;\n                    break;\n                case \"five\":\n         \
    \           stringToInt[i] = 5;\n                    break;\n                case\
    \ \"six\":\n                    stringToInt[i] = 6;\n                    break;\n\
    \                case \"seven\":\n                    stringToInt[i] = 7;\n  \
    \                  break;\n                case \"eight\":\n                 \
    \   stringToInt[i] = 8;\n                    break;\n                case \"nine\"\
    :\n                    stringToInt[i] = 9;\n                    break;\n     \
    \       }\n        }\n        Arrays.sort(stringToInt);\n        for (int i =\
    \ 0; i < numLength; i++) {\n            switch (stringToInt[i]) {\n          \
    \      case 0:\n                    splitNumbers[i] = \"zero\";\n            \
    \        break;\n                case 1:\n                    splitNumbers[i]\
    \ = \"one\";\n                    break;\n                case 2:\n          \
    \          splitNumbers[i] = \"two\";\n                    break;\n          \
    \      case 3:\n                    splitNumbers[i] = \"three\";\n           \
    \         break;\n                case 4:\n                    splitNumbers[i]\
    \ = \"four\";\n                    break;\n                case 5:\n         \
    \           splitNumbers[i] = \"five\";\n                    break;\n        \
    \        case 6:\n                    splitNumbers[i] = \"six\";\n           \
    \         break;\n                case 7:\n                    splitNumbers[i]\
    \ = \"seven\";\n                    break;\n                case 8:\n        \
    \            splitNumbers[i] = \"eight\";\n                    break;\n      \
    \          case 9:\n                    splitNumbers[i]\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbp28gi9x.java:83: error: not a statement\n                    splitNumbers[i]\n\
    \                                ^\n/tmp/tmpbp28gi9x.java:83: error: ';' expected\n\
    \                    splitNumbers[i]\n                                   ^\n/tmp/tmpbp28gi9x.java:85:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011449
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n      String[] num_str = numbers.split(\" \");\n      int[] num_int = new\
    \ int[num_str.length];\n      for (int i = 0; i < num_str.length; i++) {\n   \
    \     num_int[i] = num_str[i].equals(\"zero\") ? 0 : num_str[i].equals(\"one\"\
    ) ? 1 : num_str[i].equals(\"two\") ? 2 : num_str[i].equals(\"three\") ? 3 : num_str[i].equals(\"\
    four\") ? 4 : num_str[i].equals(\"five\") ? 5 : num_str[i].equals(\"six\") ? 6\
    \ : num_str[i].equals(\"seven\") ? 7 : num_str[i].equals(\"eight\") ? 8 : 9;\n\
    \      }\n      Arrays.sort(num_int);\n      num_str = new String[num_int.length];\n\
    \      for (int i = 0; i < num_int.length; i++) {\n        num_str[i] = num_int[i]\
    \ == 0 ? \"zero\" : num_int[i] == 1 ? \"one\" : num_int[i] == 2 ? \"two\" : num_int[i]\
    \ == 3 ? \"three\" : num_int[i] == 4 ? \"four\" : num_int[i] == 5 ? \"five\" :\
    \ num_int[i] == 6 ? \"six\" : num_int[i] == 7 ? \"seven\" : num_int[i] == 8 ?\
    \ \"eight\" : \"nine\";\n      }\n      return String.join(\" \", num_str);\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeft52ba8.java:28)\n"
  stdout: ''
  timestamp: 1660011450
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        throw new UnsupportedOperationException(\"TODO: Implement this function\"\
    );\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: TODO:\
    \ Implement this function\n\tat Problem.sortNumbers(tmp38m0s0_5.java:15)\n\tat\
    \ Problem.main(tmp38m0s0_5.java:18)\n"
  stdout: ''
  timestamp: 1660011450
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] num = numbers.split(\" \");\n        int[] intNum = new\
    \ int[num.length];\n        for (int i = 0; i < num.length; i++) {\n         \
    \   if (num[i].equals(\"zero\")) intNum[i] = 0;\n            if (num[i].equals(\"\
    one\")) intNum[i] = 1;\n            if (num[i].equals(\"two\")) intNum[i] = 2;\n\
    \            if (num[i].equals(\"three\")) intNum[i] = 3;\n            if (num[i].equals(\"\
    four\")) intNum[i] = 4;\n            if (num[i].equals(\"five\")) intNum[i] =\
    \ 5;\n            if (num[i].equals(\"six\")) intNum[i] = 6;\n            if (num[i].equals(\"\
    seven\")) intNum[i] = 7;\n            if (num[i].equals(\"eight\")) intNum[i]\
    \ = 8;\n            if (num[i].equals(\"nine\")) intNum[i] = 9;\n        }\n \
    \       Arrays.sort(intNum);\n        String newString = \"\";\n        for (int\
    \ i = 0; i < intNum.length; i++) {\n            if (intNum[i] == 0) newString\
    \ += \"zero \";\n            if (intNum[i] == 1) newString += \"one \";\n    \
    \        if (intNum[i] == 2) newString += \"two \";\n            if (intNum[i]\
    \ == 3) newString += \"three \";\n            if (intNum[i] == 4) newString +=\
    \ \"four \";\n            if (intNum[i] == 5) newString += \"five \";\n      \
    \      if (intNum[i] == 6) newString += \"six \";\n            if (intNum[i] ==\
    \ 7) newString += \"seven \";\n            if (intNum[i] == 8) newString += \"\
    eight \";\n            if (intNum[i] == 9) newString += \"nine \";\n        }\n\
    \        return newString.trim();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfrhwhvdj.java:46)\n"
  stdout: ''
  timestamp: 1660011450
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        return \"\";\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdsbkyifj.java:19)\n"
  stdout: ''
  timestamp: 1660011443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // TODO: Fill in the code for this method.\n        return \"Not\
    \ implemented\";\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvo02eo6e.java:19)\n"
  stdout: ''
  timestamp: 1660011450
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"zero\"\
    , 0);\n        map.put(\"one\", 1);\n        map.put(\"two\", 2);\n        map.put(\"\
    three\", 3);\n        map.put(\"four\", 4);\n        map.put(\"five\", 5);\n \
    \       map.put(\"six\", 6);\n        map.put(\"seven\", 7);\n        map.put(\"\
    eight\", 8);\n        map.put(\"nine\", 9);\n        List<Integer> numbersList\
    \ = Arrays.stream(numbers.split(\" \")).map(s -> map.get(s)).collect(Collectors.toList());\n\
    \        Collections.sort(numbersList);\n        return numbersList.stream().map(i\
    \ -> map.entrySet().stream().filter(e -> e.getValue().equals(i)).map(e -> e.getKey()).findFirst().get()).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.NoSuchElementException: No value\
    \ present\n\tat java.base/java.util.Optional.get(Optional.java:143)\n\tat Problem.lambda$sortNumbers$3(tmpcsl0nzan.java:28)\n\
    \tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\
    \tat java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)\n\
    \tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\
    \tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\
    \tat java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\
    \tat java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)\n\
    \tat Problem.sortNumbers(tmpcsl0nzan.java:28)\n\tat Problem.main(tmpcsl0nzan.java:31)\n"
  stdout: ''
  timestamp: 1660011451
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.sortNumbers(String)\"\
    \ is null\n\tat Problem.main(tmpoutik4qa.java:18)\n"
  stdout: ''
  timestamp: 1660011450
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numbersArr = numbers.split(\" \");\n        List<String>\
    \ numbersArrList = Arrays.asList(numbersArr);\n        Collections.sort(numbersArrList);\n\
    \        String result = String.join(\" \", numbersArrList);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6t5vhgxa.java:24)\n"
  stdout: ''
  timestamp: 1660011450
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        final Map<String, Integer> numeralToInt = new HashMap<>();\n    \
    \    numeralToInt.put(\"zero\", 0);\n        numeralToInt.put(\"one\", 1);\n \
    \       numeralToInt.put(\"two\", 2);\n        numeralToInt.put(\"three\", 3);\n\
    \        numeralToInt.put(\"four\", 4);\n        numeralToInt.put(\"five\", 5);\n\
    \        numeralToInt.put(\"six\", 6);\n        numeralToInt.put(\"seven\", 7);\n\
    \        numeralToInt.put(\"eight\", 8);\n        numeralToInt.put(\"nine\", 9);\n\
    \        final Map<Integer, String> intToNumeral = new HashMap<>();\n        intToNumeral.put(0,\
    \ \"zero\");\n        intToNumeral.put(1, \"one\");\n        intToNumeral.put(2,\
    \ \"two\");\n        intToNumeral.put(3, \"three\");\n        intToNumeral.put(4,\
    \ \"four\");\n        intToNumeral.put(5, \"five\");\n        intToNumeral.put(6,\
    \ \"six\");\n        intToNumeral.put(7, \"seven\");\n        intToNumeral.put(8,\
    \ \"eight\");\n        intToNumeral.put(9, \"nine\");\n        String[] numeralList\
    \ = numbers.split(\" \");\n        Integer[] intList = new Integer[numeralList.length];\n\
    \        for (int i = 0; i < numeralList.length; i++) {\n            intList[i]\
    \ = numeralToInt.get(numeralList[i]);\n        }\n        Arrays.sort(intList);\n\
    \        StringBuilder sortedNumbers = new StringBuilder();\n        for (int\
    \ i = 0; i < intList.length; i++) {\n            sortedNumbers.append(intToNumeral.get(intList[i]));\n\
    \            if (i != intList.length - 1) {\n                sortedNumbers.append(\"\
    \ \");\n            }\n        }\n        return sortedNumbers.toString();\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxqkw0cxa.java:53)\n"
  stdout: ''
  timestamp: 1660011451
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        return \"\";\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdsbkyifj.java:19)\n"
  stdout: ''
  timestamp: 1660011443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        throw new UnsupportedOperationException(\"TODO: Implement me!\");\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: TODO:\
    \ Implement me!\n\tat Problem.sortNumbers(tmpkcs83p90.java:15)\n\tat Problem.main(tmpkcs83p90.java:18)\n"
  stdout: ''
  timestamp: 1660011450
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] arr = numbers.split(\" \");\n        String[] nums = {\"\
    zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"\
    eight\", \"nine\"};\n        ArrayList<Integer> list = new ArrayList<>();\n  \
    \      int cnt = 0;\n        for (String s : arr) {\n            for (int i =\
    \ 0; i < nums.length; i++) {\n                if (s.equals(nums[i])) {\n     \
    \               list.add(i);\n                    cnt++;\n                }\n\
    \            }\n        }\n        for (int i = 0; i < cnt; i++) {\n         \
    \   for (int j = 0; j < cnt - 1; j++) {\n                if (list.get(j) > list.get(j\
    \ + 1)) {\n                    int temp = list.get(j);\n                    list.set(j,\
    \ list.get(j + 1));\n                    list.set(j + 1, temp);\n            \
    \    }\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < cnt; i++) {\n            sb.append(nums[list.get(i)]);\n\
    \            if (i != cnt - 1) {\n                sb.append(\" \");\n        \
    \    }\n        }\n        return sb.toString();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011451
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        ArrayList<String> output = new ArrayList<String>();\n        // split\
    \ the string into an array\n        String[] stringArray = numbers.split(\" \"\
    );\n        // convert each element to int\n        ArrayList<Integer> intArray\
    \ = new ArrayList<Integer>();\n        for (String s : stringArray) {\n      \
    \      if (s.equals(\"zero\")) {\n                intArray.add(0);\n         \
    \   } else if (s.equals(\"one\")) {\n                intArray.add(1);\n      \
    \      } else if (s.equals(\"two\")) {\n                intArray.add(2);\n   \
    \         } else if (s.equals(\"three\")) {\n                intArray.add(3);\n\
    \            } else if (s.equals(\"four\")) {\n                intArray.add(4);\n\
    \            } else if (s.equals(\"five\")) {\n                intArray.add(5);\n\
    \            } else if (s.equals(\"six\")) {\n                intArray.add(6);\n\
    \            } else if (s.equals(\"seven\")) {\n                intArray.add(7);\n\
    \            } else if (s.equals(\"eight\")) {\n                intArray.add(8);\n\
    \            } else if (s.equals(\"nine\")) {\n                intArray.add(9);\n\
    \            }\n        }\n        // sort the integer array\n        Collections.sort(intArray);\n\
    \        // convert the integer array back to string\n        for (int i : intArray)\
    \ {\n            if (i == 0) {\n                output.add(\"zero\");\n      \
    \      } else if (i == 1) {\n                output.add(\"one\");\n          \
    \  } else if (i == 2) {\n                output.add(\"two\");\n            } else\
    \ if (i == 3) {\n                output.add(\"three\");\n            } else if\
    \ (i == 4) {\n                output.add(\"four\");\n            } else if (i\
    \ == 5) {\n                output.add(\"five\");\n            } else if (i ==\
    \ 6) {\n                output.add(\"six\");\n            } else if (i == 7) {\n\
    \                output.add(\"seven\");\n            } else if (i == 8) {\n  \
    \              output.add(\"\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzmyqz85_.java:64: error: unclosed string literal\n            \
    \    output.add(\"\n                           ^\n/tmp/tmpzmyqz85_.java:66: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011450
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String s = String.join(\" \", Arrays.stream(numbers.split(\" \")).sorted().toArray(String[]::new));\n\
    \        return s;\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwt176_u0.java:21)\n"
  stdout: ''
  timestamp: 1660011451
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.sortNumbers(String)\"\
    \ is null\n\tat Problem.main(tmpoutik4qa.java:18)\n"
  stdout: ''
  timestamp: 1660011450
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        int[] nums = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n        for (int i\
    \ = 0; i < numbers.length(); i += 4) {\n            int idx = 0;\n           \
    \ switch (numbers.substring(i, i + 4)) {\n                case \"zero\":\n   \
    \                 idx = 0;\n                    break;\n                case \"\
    one\":\n                    idx = 1;\n                    break;\n           \
    \     case \"two\":\n                    idx = 2;\n                    break;\n\
    \                case \"thr\":\n                    idx = 3;\n               \
    \     break;\n                case \"fou\":\n                    idx = 4;\n  \
    \                  break;\n                case \"fiv\":\n                   \
    \ idx = 5;\n                    break;\n                case \"six\":\n      \
    \              idx = 6;\n                    break;\n                case \"sev\"\
    :\n                    idx = 7;\n                    break;\n                case\
    \ \"eig\":\n                    idx = 8;\n                    break;\n       \
    \         case \"nin\":\n                    idx = 9;\n                    break;\n\
    \            }\n            nums[idx]++;\n        }\n        String ret = \"\"\
    ;\n        for (int i = 0; i < 10; i++) {\n            for (int j = 0; j < nums[i];\
    \ j++) {\n                ret += \"\" + i + \" \";\n            }\n        }\n\
    \        return ret.trim();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 4, end 8, length 5\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.sortNumbers(tmpsdgbyfx4.java:18)\n\
    \tat Problem.main(tmpsdgbyfx4.java:62)\n"
  stdout: ''
  timestamp: 1660011451
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        String[] sorted =\
    \ new String[nums.length];\n        Arrays.sort(nums, (String x, String y) ->\
    \ {\n            if (x.equals(\"zero\"))\n                return -1;\n       \
    \     if (y.equals(\"zero\"))\n                return 1;\n            if (x.equals(\"\
    one\"))\n                return -1;\n            if (y.equals(\"one\"))\n    \
    \            return 1;\n            if (x.equals(\"two\"))\n                return\
    \ -1;\n            if (y.equals(\"two\"))\n                return 1;\n       \
    \     if (x.equals(\"three\"))\n                return -1;\n            if (y.equals(\"\
    three\"))\n                return 1;\n            if (x.equals(\"four\"))\n  \
    \              return -1;\n            if (y.equals(\"four\"))\n             \
    \   return 1;\n            if (x.equals(\"five\"))\n                return -1;\n\
    \            if (y.equals(\"five\"))\n                return 1;\n            if\
    \ (x.equals(\"six\"))\n                return -1;\n            if (y.equals(\"\
    six\"))\n                return 1;\n            if (x.equals(\"seven\"))\n   \
    \             return -1;\n            if (y.equals(\"seven\"))\n             \
    \   return 1;\n            if (x.equals(\"eight\"))\n                return -1;\n\
    \            if (y.equals(\"eight\"))\n                return 1;\n           \
    \ if (x.equals(\"nine\"))\n                return -1;\n            if (y.equals(\"\
    nine\"))\n                return 1;\n            return 0;\n        });\n    \
    \    StringBuilder sb = new StringBuilder();\n        for (String s : sorted)\
    \ {\n            sb.append(s);\n            sb.append(\" \");\n        }\n   \
    \     sb.deleteCharAt(sb.length() - 1);\n        return sb.toString();\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp72w2d_kf.java:69)\n"
  stdout: ''
  timestamp: 1660011451
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // TODO: Implement me\n        return \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqzigusl9.java:20)\n"
  stdout: ''
  timestamp: 1660011448
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String [] num = numbers.split(\" \");\n        List<String> nums\
    \ = Arrays.asList(num);\n        int [] vals = {\n            0, // zero\n   \
    \         1, // one\n            2, // two\n            3, // three\n        \
    \    4, // four\n            5, // five\n            6, // six\n            7,\
    \ // seven\n            8, // eight\n            9, // nine\n        };\n    \
    \    HashMap<String, Integer> d = new HashMap<String, Integer>();\n        for\
    \ (int i = 0; i < vals.length; i++) {\n            d.put(num[i], vals[i]);\n \
    \       }\n        Collections.sort(nums, new Comparator<String>() {\n       \
    \     @Override\n            public int compare(String s1, String s2) {\n    \
    \            return d.get(s1).compareTo(d.get(s2));\n            }\n        });\n\
    \        return nums.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 1 out of bounds for length 1\n\tat Problem.sortNumbers(tmpn68bam9r.java:31)\n\
    \tat Problem.main(tmpn68bam9r.java:42)\n"
  stdout: ''
  timestamp: 1660011451
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        Map<String, Integer> map = new HashMap<>();\n        String[] split\
    \ = numbers.split(\" \");\n        StringBuilder sb = new StringBuilder();\n \
    \       map.put(\"zero\", 0);\n        map.put(\"one\", 1);\n        map.put(\"\
    two\", 2);\n        map.put(\"three\", 3);\n        map.put(\"four\", 4);\n  \
    \      map.put(\"five\", 5);\n        map.put(\"six\", 6);\n        map.put(\"\
    seven\", 7);\n        map.put(\"eight\", 8);\n        map.put(\"nine\", 9);\n\
    \        List<Integer> vals = new ArrayList<>();\n        for (String str : split)\
    \ {\n            vals.add(map.get(str));\n        }\n        Collections.sort(vals);\n\
    \        for (int val : vals) {\n            sb.append(val + \" \");\n       \
    \ }\n        sb.deleteCharAt(sb.length() - 1);\n        return sb.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.Iterator.next()\"\
    \ is null\n\tat Problem.sortNumbers(tmputxdoqj2.java:33)\n\tat Problem.main(tmputxdoqj2.java:40)\n"
  stdout: ''
  timestamp: 1660011451
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] array = numbers.split(\" \");\n        Arrays.sort(array);\n\
    \        String result = String.join(\" \", array);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfv38x_nz.java:23)\n"
  stdout: ''
  timestamp: 1660011451
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] ss = numbers.split(\" \");\n        int[] nn = Arrays.stream(ss).mapToInt(Problem::numeralToNumber).toArray();\n\
    \        Arrays.sort(nn);\n        return Arrays.stream(nn).mapToObj(Problem::numberToNumeral).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2zbvaocq.java:16: error: invalid method reference\n        int[]\
    \ nn = Arrays.stream(ss).mapToInt(Problem::numeralToNumber).toArray();\n     \
    \                                         ^\n  cannot find symbol\n    symbol:\
    \   method numeralToNumber(T)\n    location: class Problem\n  where T is a type-variable:\n\
    \    T extends Object declared in interface Stream\n/tmp/tmp2zbvaocq.java:18:\
    \ error: invalid method reference\n        return Arrays.stream(nn).mapToObj(Problem::numberToNumeral).collect(Collectors.joining(\"\
    \ \"));\n                                          ^\n  cannot find symbol\n \
    \   symbol:   method numberToNumeral()\n    location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011450
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        int[] sort = new int[numbers.split(\" \").length];\n        StringBuilder\
    \ sb = new StringBuilder();\n        int i = 0;\n        for (String numeral :\
    \ numbers.split(\" \")) {\n            sort[i] = numeralToInt(numeral);\n    \
    \        i++;\n        }\n        Arrays.sort(sort);\n        for (int num : sort)\
    \ {\n            sb.append(intToNumeral(num) + \" \");\n        }\n        sb.deleteCharAt(sb.length()\
    \ - 1);\n        return sb.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp92_zacox.java:19: error: cannot find symbol\n            sort[i]\
    \ = numeralToInt(numeral);\n                      ^\n  symbol:   method numeralToInt(String)\n\
    \  location: class Problem\n/tmp/tmp92_zacox.java:24: error: cannot find symbol\n\
    \            sb.append(intToNumeral(num) + \" \");\n                      ^\n\
    \  symbol:   method intToNumeral(int)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011451
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        int[] numNums = new\
    \ int[nums.length];\n        Map<String, Integer> map = new HashMap<>();\n   \
    \     map.put(\"zero\", 0);\n        map.put(\"one\", 1);\n        map.put(\"\
    two\", 2);\n        map.put(\"three\", 3);\n        map.put(\"four\", 4);\n  \
    \      map.put(\"five\", 5);\n        map.put(\"six\", 6);\n        map.put(\"\
    seven\", 7);\n        map.put(\"eight\", 8);\n        map.put(\"nine\", 9);\n\
    \        for (int i = 0; i < nums.length; i++) {\n            numNums[i] = map.get(nums[i]);\n\
    \        }\n        Arrays.sort(numNums);\n        for (int i = 0; i < numNums.length;\
    \ i++) {\n            nums[i] = map.get(numNums[i]);\n        }\n        return\
    \ String.join(\" \", nums);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdwkd5j8h.java:33: error: incompatible types: Integer cannot be\
    \ converted to String\n            nums[i] = map.get(numNums[i]);\n          \
    \                   ^\n1 error\n"
  stdout: ''
  timestamp: 1660011451
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        throw new IllegalArgumentException(\"not implemented\");\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IllegalArgumentException: not implemented\n\
    \tat Problem.sortNumbers(tmp3us12bf7.java:15)\n\tat Problem.main(tmp3us12bf7.java:18)\n"
  stdout: ''
  timestamp: 1660011451
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        char[] chars = numbers.toCharArray();\n        Arrays.sort(chars);\n\
    \        return new String(chars);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjxnqunn2.java:21)\n"
  stdout: ''
  timestamp: 1660011451
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // REPLACE THE CODE BELOW WITH YOUR CODE\n        return \"\";\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph6cuml2v.java:20)\n"
  stdout: ''
  timestamp: 1660011451
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // TODO: Implement\n        return \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9bbirbru.java:20)\n"
  stdout: ''
  timestamp: 1660011452
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        ArrayList<Integer> num = new ArrayList<Integer>();\n        for (String\
    \ s : numbers.split(\" \")) {\n            if (s.equals(\"zero\")) {\n       \
    \         num.add(0);\n            } else if (s.equals(\"one\")) {\n         \
    \       num.add(1);\n            } else if (s.equals(\"two\")) {\n           \
    \     num.add(2);\n            } else if (s.equals(\"three\")) {\n           \
    \     num.add(3);\n            } else if (s.equals(\"four\")) {\n            \
    \    num.add(4);\n            } else if (s.equals(\"five\")) {\n             \
    \   num.add(5);\n            } else if (s.equals(\"six\")) {\n               \
    \ num.add(6);\n            } else if (s.equals(\"seven\")) {\n               \
    \ num.add(7);\n            } else if (s.equals(\"eight\")) {\n               \
    \ num.add(8);\n            } else if (s.equals(\"nine\")) {\n                num.add(9);\n\
    \            }\n        }\n        Collections.sort(num);\n        String output\
    \ = \"\";\n        for (int i = 0; i < num.size(); i++) {\n            if (num.get(i)\
    \ == 0) {\n                output += \"zero\";\n            } else if (num.get(i)\
    \ == 1) {\n                output += \"one\";\n            } else if (num.get(i)\
    \ == 2) {\n                output += \"two\";\n            } else if (num.get(i)\
    \ == 3) {\n                output += \"three\";\n            } else if (num.get(i)\
    \ == 4) {\n                output += \"four\";\n            } else if (num.get(i)\
    \ == 5) {\n                output += \"five\";\n            } else if (num.get(i)\
    \ == 6) {\n                output += \"six\";\n            } else if (num.get(i)\
    \ == 7) {\n                output += \"seven\";\n            } else if (num.get(i)\
    \ == 8) {\n                output += \"eight\";\n            } else if (num.get(i)\
    \ == 9) {\n                output +=\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0g490qgv.java:62: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp0g490qgv.java:63: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011451
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n      List<Integer> nums = Arrays.asList(numbers.split(\" \")).stream().map(x\
    \ -> numeralToNumber(x)).collect(Collectors.toList());\n      nums.sort(Comparator.naturalOrder());\n\
    \      return nums.stream().map(x -> numberToNumeral(x)).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp6j0opohc.java:15: error: cannot find symbol\n      List<Integer>\
    \ nums = Arrays.asList(numbers.split(\" \")).stream().map(x -> numeralToNumber(x)).collect(Collectors.toList());\n\
    \                                                                            \
    \   ^\n  symbol:   method numeralToNumber(String)\n  location: class Problem\n\
    /tmp/tmp6j0opohc.java:15: error: incompatible types: inference variable T has\
    \ incompatible bounds\n      List<Integer> nums = Arrays.asList(numbers.split(\"\
    \ \")).stream().map(x -> numeralToNumber(x)).collect(Collectors.toList());\n \
    \                                                                            \
    \                             ^\n    equality constraints: Integer\n    lower\
    \ bounds: Object\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>toList()\n/tmp/tmp6j0opohc.java:17: error: cannot find symbol\n\
    \      return nums.stream().map(x -> numberToNumeral(x)).collect(Collectors.joining(\"\
    \ \"));\n                                    ^\n  symbol:   method numberToNumeral(Integer)\n\
    \  location: class Problem\n/tmp/tmp6j0opohc.java:17: error: no suitable method\
    \ found for collect(Collector<CharSequence,CAP#1,String>)\n      return nums.stream().map(x\
    \ -> numberToNumeral(x)).collect(Collectors.joining(\" \"));\n               \
    \                                        ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super Object>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#1\n        (actual and formal argument lists differ in length))\n    method\
    \ Stream.<R#2,A>collect(Collector<? super Object,A,R#2>) is not applicable\n \
    \     (cannot infer type-variable(s) R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String>\
    \ cannot be converted to Collector<? super Object,A,R#2>))\n  where R#1,T,R#2,A\
    \ are type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collect"
  stdout: ''
  timestamp: 1660011452
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] split = numbers.split(\" \");\n        Integer[] sorted\
    \ = Arrays.stream(split).map(x -> {\n            switch (x) {\n              \
    \  case \"zero\": return 0;\n                case \"one\": return 1;\n       \
    \         case \"two\": return 2;\n                case \"three\": return 3;\n\
    \                case \"four\": return 4;\n                case \"five\": return\
    \ 5;\n                case \"six\": return 6;\n                case \"seven\"\
    : return 7;\n                case \"eight\": return 8;\n                case \"\
    nine\": return 9;\n                default: throw new IllegalArgumentException();\n\
    \            }\n        }).sorted().toArray(Integer[]::new);\n        return Arrays.stream(sorted).map(x\
    \ -> {\n            switch (x) {\n                case 0: return \"zero\";\n \
    \               case 1: return \"one\";\n                case 2: return \"two\"\
    ;\n                case 3: return \"three\";\n                case 4: return \"\
    four\";\n                case 5: return \"five\";\n                case 6: return\
    \ \"six\";\n                case 7: return \"seven\";\n                case 8:\
    \ return \"eight\";\n                case 9: return \"nine\";\n              \
    \  default: throw new IllegalArgumentException();\n            }\n        }).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IllegalArgumentException\n\tat Problem.lambda$sortNumbers$0(tmpjcbeclf5.java:28)\n\
    \tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\
    \tat java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:992)\n\
    \tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\
    \tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:575)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluateToArrayNode(AbstractPipeline.java:260)\n\
    \tat java.base/java.util.stream.ReferencePipeline.toArray(ReferencePipeline.java:616)\n\
    \tat Problem.sortNumbers(tmpjcbeclf5.java:30)\n\tat Problem.main(tmpjcbeclf5.java:48)\n"
  stdout: ''
  timestamp: 1660011453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        return \"\";\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdsbkyifj.java:19)\n"
  stdout: ''
  timestamp: 1660011443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        System.out.println(\"numbers: \" + numbers);\n        String[] tokenize\
    \ = numbers.split(\" \");\n        List<String> num = new ArrayList<String>();\n\
    \        for (String s : tokenize) {\n            num.add(s);\n        }\n   \
    \     Collections.sort(num);\n        System.out.println(\"sorted: \" + num);\n\
    \        String toRet = \"\";\n        for (String s : num) {\n            toRet\
    \ += s + \" \";\n        }\n        toRet = toRet.substring(0, toRet.length()\
    \ - 1);\n        System.out.println(\"toRet: \" + toRet);\n        return toRet;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjpl02wkq.java:34)\n"
  stdout: "numbers: \nsorted: []\ntoRet: \nnumbers: three\nsorted: [three]\ntoRet:\
    \ three\nnumbers: three five nine\nsorted: [five, nine, three]\ntoRet: five nine\
    \ three\n"
  timestamp: 1660011453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        int[] numsInt = new\
    \ int[nums.length];\n        for (int i = 0; i < nums.length; i++) {\n       \
    \     switch (nums[i]) {\n                case \"zero\":\n                   \
    \ numsInt[i] = 0;\n                    break;\n                case \"one\":\n\
    \                    numsInt[i] = 1;\n                    break;\n           \
    \     case \"two\":\n                    numsInt[i] = 2;\n                   \
    \ break;\n                case \"three\":\n                    numsInt[i] = 3;\n\
    \                    break;\n                case \"four\":\n                \
    \    numsInt[i] = 4;\n                    break;\n                case \"five\"\
    :\n                    numsInt[i] = 5;\n                    break;\n         \
    \       case \"six\":\n                    numsInt[i] = 6;\n                 \
    \   break;\n                case \"seven\":\n                    numsInt[i] =\
    \ 7;\n                    break;\n                case \"eight\":\n          \
    \          numsInt[i] = 8;\n                    break;\n                case \"\
    nine\":\n                    numsInt[i] = 9;\n                    break;\n   \
    \         }\n        }\n        Arrays.sort(numsInt);\n        String[] numsSorted\
    \ = new String[nums.length];\n        for (int i = 0; i < numsInt.length; i++)\
    \ {\n            switch (numsInt[i]) {\n                case 0:\n            \
    \        numsSorted[i] = \"zero\";\n                    break;\n             \
    \   case 1:\n                    numsSorted[i] = \"one\";\n                  \
    \  break;\n                case 2:\n                    numsSorted[i] = \"two\"\
    ;\n                    break;\n                case 3:\n                    numsSorted[i]\
    \ = \"three\";\n                    break;\n                case 4:\n        \
    \            numsSorted[i] = \"four\";\n                    break;\n         \
    \       case 5:\n                    numsSorted[i] = \"five\";\n             \
    \       break;\n                case 6:\n                    numsSorted[i] = \"\
    six\";\n                    break;\n                case 7:\n                \
    \    numsSorted[i] = \"seven\";\n                    break;\n                case\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzssby3df.java:80: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpzssby3df.java:81: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011452
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] strings = numbers.split(\" \");\n        int[] ints = new\
    \ int[strings.length];\n        for (int i = 0; i < strings.length; i++) {\n \
    \           ints[i] = stringToInt(strings[i]);\n        }\n        Arrays.sort(ints);\n\
    \        String ret = \"\";\n        for (int i = 0; i < ints.length; i++) {\n\
    \            ret += intToString(ints[i]) + \" \";\n        }\n        return ret.trim();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2wxdlck6.java:18: error: cannot find symbol\n            ints[i]\
    \ = stringToInt(strings[i]);\n                      ^\n  symbol:   method stringToInt(String)\n\
    \  location: class Problem\n/tmp/tmp2wxdlck6.java:23: error: cannot find symbol\n\
    \            ret += intToString(ints[i]) + \" \";\n                   ^\n  symbol:\
    \   method intToString(int)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011452
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numeralStrings = numbers.split(\" \");\n        List<Integer>\
    \ numeralList = new ArrayList<Integer>();\n        for (String numeral : numeralStrings)\
    \ {\n            Integer temp = 0;\n            switch (numeral) {\n         \
    \       case \"zero\":\n                    temp = 0;\n                    break;\n\
    \                case \"one\":\n                    temp = 1;\n              \
    \      break;\n                case \"two\":\n                    temp = 2;\n\
    \                    break;\n                case \"three\":\n               \
    \     temp = 3;\n                    break;\n                case \"four\":\n\
    \                    temp = 4;\n                    break;\n                case\
    \ \"five\":\n                    temp = 5;\n                    break;\n     \
    \           case \"six\":\n                    temp = 6;\n                   \
    \ break;\n                case \"seven\":\n                    temp = 7;\n   \
    \                 break;\n                case \"eight\":\n                  \
    \  temp = 8;\n                    break;\n                case \"nine\":\n   \
    \                 temp = 9;\n                    break;\n            }\n     \
    \       numeralList.add(temp);\n        }\n        Collections.sort(numeralList);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (Integer numeral\
    \ : numeralList) {\n            switch (numeral) {\n                case 0:\n\
    \                    sb.append(\"zero \");\n                    break;\n     \
    \           case 1:\n                    sb.append(\"one \");\n              \
    \      break;\n                case 2:\n                    sb.append(\"two \"\
    );\n                    break;\n                case 3:\n                    sb.append(\"\
    three \");\n                    break;\n                case 4:\n            \
    \        sb.append(\"four \");\n                    break;\n                case\
    \ 5:\n                    sb.append(\"five \");\n                    break;\n\
    \                case 6:\n                    sb.append(\"six \");\n         \
    \           break;\n                case 7:\n                    sb.append(\"\
    seven \");\n                    break;\n                case 8:\n            \
    \        sb.append(\"eight \");\n                    break;\n                case\
    \ 9:\n                    sb.append(\"nine \");\n                    break;\n\
    \            }\n        }\n        String result = sb.toString();\n        return\
    \ result.substring(0, result.length() - 1);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5z2xw3c3.java:93)\n"
  stdout: ''
  timestamp: 1660011453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        int[] nums_vals =\
    \ new int[nums.length];\n        for (int i = 0; i < nums.length; i++) {\n   \
    \         nums_vals[i] = toInteger(nums[i]);\n        }\n        Arrays.sort(nums_vals);\n\
    \        String[] sorted_strs = new String[nums.length];\n        for (int i =\
    \ 0; i < nums.length; i++) {\n            sorted_strs[i] = nums[i];\n        }\n\
    \        return String.join(\" \", sorted_strs);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7emhwgup.java:18: error: cannot find symbol\n            nums_vals[i]\
    \ = toInteger(nums[i]);\n                           ^\n  symbol:   method toInteger(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011452
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.sortNumbers(String)\"\
    \ is null\n\tat Problem.main(tmpoutik4qa.java:18)\n"
  stdout: ''
  timestamp: 1660011450
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        return \"\";\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdsbkyifj.java:19)\n"
  stdout: ''
  timestamp: 1660011443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        return Arrays.stream(numbers.split(\" \"))\n            .map(i ->\
    \ Integer.parseInt(i))\n            .sorted()\n            .map(i -> i.toString())\n\
    \            .collect(Collectors.joining(\" \"));\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.lambda$sortNumbers$0(tmpj401qikb.java:16)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\
    \tat java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:992)\n\
    \tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\
    \tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\
    \tat java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\
    \tat java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)\n\
    \tat Problem.sortNumbers(tmpj401qikb.java:19)\n\tat Problem.main(tmpj401qikb.java:22)\n"
  stdout: ''
  timestamp: 1660011453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        return numbers;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp46_tbfgz.java:21)\n"
  stdout: ''
  timestamp: 1660011446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] number_arr = numbers.split(\" \");\n        Integer[] numbers_int\
    \ = new Integer[number_arr.length];\n        for (int i = 0; i < number_arr.length;\
    \ i++) {\n            numbers_int[i] = toInt(number_arr[i]);\n        }\n    \
    \    Arrays.sort(numbers_int);\n        String[] numbers_sorted = new String[numbers_int.length];\n\
    \        for (int i = 0; i < numbers_int.length; i++) {\n            numbers_sorted[i]\
    \ = toWord(numbers_int[i]);\n        }\n        return String.join(\" \", numbers_sorted);\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp46bxynqu.java:18: error: cannot find symbol\n            numbers_int[i]\
    \ = toInt(number_arr[i]);\n                             ^\n  symbol:   method\
    \ toInt(String)\n  location: class Problem\n/tmp/tmp46bxynqu.java:23: error: cannot\
    \ find symbol\n            numbers_sorted[i] = toWord(numbers_int[i]);\n     \
    \                           ^\n  symbol:   method toWord(Integer)\n  location:\
    \ class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.sortNumbers(String)\"\
    \ is null\n\tat Problem.main(tmpoutik4qa.java:18)\n"
  stdout: ''
  timestamp: 1660011450
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        int[] a = new int[10];\n        for (String s : numbers.split(\"\
    \ \")) {\n            if (s.equals(\"zero\")) {\n                a[0]++;\n   \
    \         } else if (s.equals(\"one\")) {\n                a[1]++;\n         \
    \   } else if (s.equals(\"two\")) {\n                a[2]++;\n            } else\
    \ if (s.equals(\"three\")) {\n                a[3]++;\n            } else if (s.equals(\"\
    four\")) {\n                a[4]++;\n            } else if (s.equals(\"five\"\
    )) {\n                a[5]++;\n            } else if (s.equals(\"six\")) {\n \
    \               a[6]++;\n            } else if (s.equals(\"seven\")) {\n     \
    \           a[7]++;\n            } else if (s.equals(\"eight\")) {\n         \
    \       a[8]++;\n            } else if (s.equals(\"nine\")) {\n              \
    \  a[9]++;\n            }\n        }\n        String s = \"\";\n        for (int\
    \ i = 0; i < 10; i++) {\n            for (int j = 0; j < a[i]; j++) {\n      \
    \          if (i == 0) {\n                    s += \"zero \";\n              \
    \  } else if (i == 1) {\n                    s += \"one \";\n                }\
    \ else if (i == 2) {\n                    s += \"two \";\n                } else\
    \ if (i == 3) {\n                    s += \"three \";\n                } else\
    \ if (i == 4) {\n                    s += \"four \";\n                } else if\
    \ (i == 5) {\n                    s += \"five \";\n                } else if (i\
    \ == 6) {\n                    s += \"six \";\n                } else if (i ==\
    \ 7) {\n                    s += \"seven \";\n                } else if (i ==\
    \ 8) {\n                    s += \"eight \";\n                } else if (i ==\
    \ 9) {\n                    s += \"nine \";\n                }\n            }\n\
    \        }\n        return s.trim();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // TODO: implement!\n        return \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3y90xrz0.java:20)\n"
  stdout: ''
  timestamp: 1660011453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Your code here\n        return \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnexob64e.java:20)\n"
  stdout: ''
  timestamp: 1660011443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Implement me\n        return \"\";\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp603veo5.java:20)\n"
  stdout: ''
  timestamp: 1660011453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numberals = numbers.split(\" \");\n        String[] digits\
    \ = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"};\n        int[] digitIndex = new int[numberals.length];\n\
    \        for (int i = 0; i < numberals.length; i++) {\n            for (int j\
    \ = 0; j < digits.length; j++) {\n                if (numberals[i].equals(digits[j]))\
    \ {\n                    digitIndex[i] = j;\n                }\n            }\n\
    \        }\n        Arrays.sort(digitIndex);\n        String result = \"\";\n\
    \        for (int i = 0; i < digitIndex.length; i++) {\n            result +=\
    \ digits[digitIndex[i]] + \" \";\n        }\n        return result.trim();\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzkh4zrvi.java:33)\n"
  stdout: ''
  timestamp: 1660011453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<String> numbersList = Arrays.asList(numbers.split(\" \"));\n\
    \        Collections.sort(numbersList, (String a, String b) -> numberForString(a).compareTo(numberForString(b)));\n\
    \        return join(numbersList, \" \");\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsg7y1uif.java:16: error: cannot find symbol\n        Collections.sort(numbersList,\
    \ (String a, String b) -> numberForString(a).compareTo(numberForString(b)));\n\
    \                                                              ^\n  symbol:  \
    \ method numberForString(String)\n  location: class Problem\n/tmp/tmpsg7y1uif.java:16:\
    \ error: cannot find symbol\n        Collections.sort(numbersList, (String a,\
    \ String b) -> numberForString(a).compareTo(numberForString(b)));\n          \
    \                                                                            \
    \     ^\n  symbol:   method numberForString(String)\n  location: class Problem\n\
    /tmp/tmpsg7y1uif.java:17: error: cannot find symbol\n        return join(numbersList,\
    \ \" \");\n               ^\n  symbol:   method join(List<String>,String)\n  location:\
    \ class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<String> list = Arrays.asList(numbers.split(\" \"));\n      \
    \  Collections.sort(list, new Comparator<String>() {\n            @Override\n\
    \            public int compare(String a, String b) {\n                return\
    \ numberalToInteger(a) - numberalToInteger(b);\n            }\n        });\n \
    \       return String.join(\" \", list);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjb_4_csj.java:19: error: cannot find symbol\n                return\
    \ numberalToInteger(a) - numberalToInteger(b);\n                       ^\n  symbol:\
    \ method numberalToInteger(String)\n/tmp/tmpjb_4_csj.java:19: error: cannot find\
    \ symbol\n                return numberalToInteger(a) - numberalToInteger(b);\n\
    \                                              ^\n  symbol: method numberalToInteger(String)\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660011453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] splitNumbers = numbers.split(\" \");\n        List<String>\
    \ sortedNumbers = new ArrayList<>();\n        sortedNumbers.add(splitNumbers[0]);\n\
    \        for (int i = 1; i < splitNumbers.length; i++) {\n            for (int\
    \ j = 0; j < sortedNumbers.size(); j++) {\n                if (Integer.parseInt(splitNumbers[i])\
    \ < Integer.parseInt(sortedNumbers.get(j))) {\n                    sortedNumbers.add(j,\
    \ splitNumbers[i]);\n                    break;\n                }\n         \
    \       if (j == sortedNumbers.size() - 1) {\n                    sortedNumbers.add(splitNumbers[i]);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return String.join(\" \", sortedNumbers);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"five\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.sortNumbers(tmp3rl2iz40.java:20)\n\tat Problem.main(tmp3rl2iz40.java:35)\n"
  stdout: ''
  timestamp: 1660011453
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        int[] num = new int[10];\n        String[] numWords = numbers.split(\"\
    \ \");\n        for (String numWord : numWords) {\n            switch (numWord)\
    \ {\n                case \"zero\":\n                    num[0]++;\n         \
    \           break;\n                case \"one\":\n                    num[1]++;\n\
    \                    break;\n                case \"two\":\n                 \
    \   num[2]++;\n                    break;\n                case \"three\":\n \
    \                   num[3]++;\n                    break;\n                case\
    \ \"four\":\n                    num[4]++;\n                    break;\n     \
    \           case \"five\":\n                    num[5]++;\n                  \
    \  break;\n                case \"six\":\n                    num[6]++;\n    \
    \                break;\n                case \"seven\":\n                   \
    \ num[7]++;\n                    break;\n                case \"eight\":\n   \
    \                 num[8]++;\n                    break;\n                case\
    \ \"nine\":\n                    num[9]++;\n                    break;\n     \
    \       }\n        }\n        StringBuilder ret = new StringBuilder();\n     \
    \   for (int i = 0; i < 10; i++) {\n            for (int j = 0; j < num[i]; j++)\
    \ {\n                switch (i) {\n                    case 0:\n             \
    \           ret.append(\"zero \");\n                        break;\n         \
    \           case 1:\n                        ret.append(\"one \");\n         \
    \               break;\n                    case 2:\n                        ret.append(\"\
    two \");\n                        break;\n                    case 3:\n      \
    \                  ret.append(\"three \");\n                        break;\n \
    \                   case 4:\n                        ret.append(\"four \");\n\
    \                        break;\n                    case 5:\n               \
    \         ret.append(\"five \");\n                        break;\n           \
    \         case 6:\n                        ret.append(\"six \");\n           \
    \             break;\n                    case 7:\n                        ret.append(\"\
    seven \");\n                        break;\n                    case 8:\n    \
    \                    ret.append(\"eight \");\n                        break;\n\
    \                    case 9:\n                        ret.append(\"nine \");\n\
    \                        break;\n                }\n            }\n        }\n\
    \        return ret.toString().trim();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011454
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums);\n\
    \        return String.join(\" \", nums);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9l2doktw.java:22)\n"
  stdout: ''
  timestamp: 1660011446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numbersArray = numbers.split(\" \");\n        int[] numbersInt\
    \ = new int[numbersArray.length];\n        for (int i = 0; i < numbersArray.length;\
    \ i++) {\n            if (numbersArray[i].equals(\"zero\")) {\n              \
    \  numbersInt[i] = 0;\n            } else if (numbersArray[i].equals(\"one\"))\
    \ {\n                numbersInt[i] = 1;\n            } else if (numbersArray[i].equals(\"\
    two\")) {\n                numbersInt[i] = 2;\n            } else if (numbersArray[i].equals(\"\
    three\")) {\n                numbersInt[i] = 3;\n            } else if (numbersArray[i].equals(\"\
    four\")) {\n                numbersInt[i] = 4;\n            } else if (numbersArray[i].equals(\"\
    five\")) {\n                numbersInt[i] = 5;\n            } else if (numbersArray[i].equals(\"\
    six\")) {\n                numbersInt[i] = 6;\n            } else if (numbersArray[i].equals(\"\
    seven\")) {\n                numbersInt[i] = 7;\n            } else if (numbersArray[i].equals(\"\
    eight\")) {\n                numbersInt[i] = 8;\n            } else if (numbersArray[i].equals(\"\
    nine\")) {\n                numbersInt[i] = 9;\n            }\n        }\n   \
    \     Arrays.sort(numbersInt);\n        String result = \"\";\n        for (int\
    \ i = 0; i < numbersInt.length; i++) {\n            if (numbersInt[i] == 0) {\n\
    \                result += \"zero \";\n            } else if (numbersInt[i] ==\
    \ 1) {\n                result += \"one \";\n            } else if (numbersInt[i]\
    \ == 2) {\n                result += \"two \";\n            } else if (numbersInt[i]\
    \ == 3) {\n                result += \"three \";\n            } else if (numbersInt[i]\
    \ == 4) {\n                result += \"four \";\n            } else if (numbersInt[i]\
    \ == 5) {\n                result += \"five \";\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc4uis5s4.java:57: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011452
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        int[] nums = Stream.of(numbers.split(\" \")).mapToInt(Integer::parseInt).toArray();\n\
    \        Arrays.sort(nums);\n        return Arrays.toString(nums);\n    }\n  \
    \  public static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat java.base/java.util.stream.ReferencePipeline$4$1.accept(ReferencePipeline.java:214)\n\
    \tat java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:992)\n\
    \tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\
    \tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:575)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluateToArrayNode(AbstractPipeline.java:260)\n\
    \tat java.base/java.util.stream.IntPipeline.toArray(IntPipeline.java:562)\n\t\
    at Problem.sortNumbers(tmp8guzntxb.java:15)\n\tat Problem.main(tmp8guzntxb.java:20)\n"
  stdout: ''
  timestamp: 1660011454
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        return  \"Not yet implemented\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwrp72cpl.java:18)\n"
  stdout: ''
  timestamp: 1660011454
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.sortNumbers(String)\"\
    \ is null\n\tat Problem.main(tmpoutik4qa.java:18)\n"
  stdout: ''
  timestamp: 1660011450
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<String> list = Arrays.asList(numbers.split(\" \"));\n      \
    \  List<Integer> finalList = new ArrayList<>();\n        int i = 0;\n        for\
    \ (String s : list) {\n            if (s.equals(\"zero\")) {\n               \
    \ finalList.add(i, 0);\n            } else if (s.equals(\"one\")) {\n        \
    \        finalList.add(i, 1);\n            } else if (s.equals(\"two\")) {\n \
    \               finalList.add(i, 2);\n            } else if (s.equals(\"three\"\
    )) {\n                finalList.add(i, 3);\n            } else if (s.equals(\"\
    four\")) {\n                finalList.add(i, 4);\n            } else if (s.equals(\"\
    five\")) {\n                finalList.add(i, 5);\n            } else if (s.equals(\"\
    six\")) {\n                finalList.add(i, 6);\n            } else if (s.equals(\"\
    seven\")) {\n                finalList.add(i, 7);\n            } else if (s.equals(\"\
    eight\")) {\n                finalList.add(i, 8);\n            } else if (s.equals(\"\
    nine\")) {\n                finalList.add(i, 9);\n            }\n            i++;\n\
    \        }\n        Collections.sort(finalList);\n        String result = \"\"\
    ;\n        for (Integer item : finalList) {\n            if (item == 0) {\n  \
    \              result += \"zero \";\n            } else if (item == 1) {\n   \
    \             result += \"one \";\n            } else if (item == 2) {\n     \
    \           result += \"two \";\n            } else if (item == 3) {\n       \
    \         result += \"three \";\n            } else if (item == 4) {\n       \
    \         result += \"four \";\n            } else if (item == 5) {\n        \
    \        result += \"five \";\n            } else if (item == 6) {\n         \
    \       result += \"six \";\n            } else if (item == 7) {\n           \
    \     result += \"seven \";\n            } else if (item == 8) {\n           \
    \     result += \"eight \";\n            } else if\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmxkhou1h.java:63: error: '(' expected\n            } else if\n\
    \                     ^\n/tmp/tmpmxkhou1h.java:64: error: illegal start of expression\n\
    \    }\n    ^\n/tmp/tmpmxkhou1h.java:65: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // TODO implement me\n        String[] strArray = numbers.split(\"\
    \ \");\n        String[] strArray2 = new String[strArray.length];\n        String[]\
    \ strArray3 = new String[strArray.length];\n        String strResult = \"\";\n\
    \        String[] strAns = new String[strArray.length];\n        int[] intArray\
    \ = new int[strArray.length];\n        for (int i = 0; i < strArray.length; i++)\
    \ {\n            switch (strArray[i]) {\n                case \"zero\":\n    \
    \                intArray[i] = 0;\n                    break;\n              \
    \  case \"one\":\n                    intArray[i] = 1;\n                    break;\n\
    \                case \"two\":\n                    intArray[i] = 2;\n       \
    \             break;\n                case \"three\":\n                    intArray[i]\
    \ = 3;\n                    break;\n                case \"four\":\n         \
    \           intArray[i] = 4;\n                    break;\n                case\
    \ \"five\":\n                    intArray[i] = 5;\n                    break;\n\
    \                case \"six\":\n                    intArray[i] = 6;\n       \
    \             break;\n                case \"seven\":\n                    intArray[i]\
    \ = 7;\n                    break;\n                case \"eight\":\n        \
    \            intArray[i] = 8;\n                    break;\n                case\
    \ \"nine\":\n                    intArray[i] = 9;\n                    break;\n\
    \            }\n        }\n        for (int i = 0; i < intArray.length; i++) {\n\
    \            for (int j = 0; j < intArray.length; j++) {\n                if (intArray[i]\
    \ < intArray[j]) {\n                    int temp = intArray[i];\n            \
    \        intArray[i] = intArray[j];\n                    intArray[j] = temp;\n\
    \                }\n            }\n        }\n        for (int i = 0; i < intArray.length;\
    \ i++) {\n            switch (intArray[i]) {\n                case 0:\n      \
    \              strArray2[i] = \"zero\";\n                    break;\n        \
    \        case 1:\n                    strArray2[i] = \"one\";\n              \
    \      break;\n                case 2:\n                    strArray2[i] = \"\
    two\";\n                   \n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkr1wxo42.java:77: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Your code goes here.\n        return \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy98w72s9.java:20)\n"
  stdout: ''
  timestamp: 1660011454
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // --------------------------\n        // IMPLEMENTATION GOES HERE!\n\
    \        // --------------------------\n        return null;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.sortNumbers(String)\"\
    \ is null\n\tat Problem.main(tmptvicf08t.java:21)\n"
  stdout: ''
  timestamp: 1660011454
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Replace pass with a solution\n        return \"pass\";\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9enk7wc3.java:19)\n"
  stdout: ''
  timestamp: 1660011455
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        int[] res = new int[nums.length];\n\
    \        for (int i = 0; i < nums.length; i++) {\n            res[i] = convert(nums[i]);\n\
    \        }\n        Arrays.sort(res);\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < res.length; i++) {\n            sb.append(res[i]);\n\
    \            if (i < res.length - 1) sb.append(\" \");\n        }\n        return\
    \ sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpgcgh5479.java:18: error: cannot find symbol\n            res[i]\
    \ = convert(nums[i]);\n                     ^\n  symbol:   method convert(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011455
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        List<Integer> numInts\
    \ = new ArrayList<Integer>();\n        for (String num : nums) {\n           \
    \ switch (num) {\n                case \"zero\":\n                    numInts.add(0);\n\
    \                    break;\n                case \"one\":\n                 \
    \   numInts.add(1);\n                    break;\n                case \"two\"\
    :\n                    numInts.add(2);\n                    break;\n         \
    \       case \"three\":\n                    numInts.add(3);\n               \
    \     break;\n                case \"four\":\n                    numInts.add(4);\n\
    \                    break;\n                case \"five\":\n                \
    \    numInts.add(5);\n                    break;\n                case \"six\"\
    :\n                    numInts.add(6);\n                    break;\n         \
    \       case \"seven\":\n                    numInts.add(7);\n               \
    \     break;\n                case \"eight\":\n                    numInts.add(8);\n\
    \                    break;\n                case \"nine\":\n                \
    \    numInts.add(9);\n                    break;\n            }\n        }\n \
    \       Collections.sort(numInts);\n        StringBuffer ret = new StringBuffer();\n\
    \        for (Integer num : numInts) {\n            switch (num) {\n         \
    \       case 0:\n                    ret.append(\"zero \");\n                \
    \    break;\n                case 1:\n                    ret.append(\"one \"\
    );\n                    break;\n                case 2:\n                    ret.append(\"\
    two \");\n                    break;\n                case 3:\n              \
    \      ret.append(\"three \");\n                    break;\n                case\
    \ 4:\n                    ret.append(\"four \");\n                    break;\n\
    \                case 5:\n                    ret.append(\"five \");\n       \
    \             break;\n                case 6:\n                    ret.append(\"\
    six \");\n                    break;\n                case 7:\n              \
    \      ret.append(\"seven \");\n                    break;\n                case\
    \ 8:\n                    ret.append(\"eight \");\n                    break;\n\
    \                case 9:\n                    ret.append(\"nine \");\n       \
    \             break;\n            }\n        }\n        return ret.toString().trim();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011455
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Write your code here\n        return \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpks4otrb1.java:20)\n"
  stdout: ''
  timestamp: 1660011455
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // TODO\n        return \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg4_q03fr.java:20)\n"
  stdout: ''
  timestamp: 1660011448
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] x = numbers.split(\" \");\n        int[] num = new int[x.length];\n\
    \        for (int i = 0; i < x.length; i++) {\n            num[i] = convert(x[i]);\n\
    \        }\n        Arrays.sort(num);\n        String y = \"\";\n        for (int\
    \ i = 0; i < num.length; i++) {\n            y += convert(num[i]) + \" \";\n \
    \       }\n        return y.trim();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiihs4i_8.java:18: error: cannot find symbol\n            num[i]\
    \ = convert(x[i]);\n                     ^\n  symbol:   method convert(String)\n\
    \  location: class Problem\n/tmp/tmpiihs4i_8.java:23: error: cannot find symbol\n\
    \            y += convert(num[i]) + \" \";\n                 ^\n  symbol:   method\
    \ convert(int)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011455
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // >>> your code here <<<\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxufilf8s.java:16: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011455
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        StringBuilder sb = new StringBuilder();\n        List<Integer> sortedList\
    \ = new ArrayList<>();\n        Map<String, Integer> map = new HashMap<>();\n\
    \        map.put(\"zero\", 0);\n        map.put(\"one\", 1);\n        map.put(\"\
    two\", 2);\n        map.put(\"three\", 3);\n        map.put(\"four\", 4);\n  \
    \      map.put(\"five\", 5);\n        map.put(\"six\", 6);\n        map.put(\"\
    seven\", 7);\n        map.put(\"eight\", 8);\n        map.put(\"nine\", 9);\n\
    \        for (String num: numbers.split(\" \")) {\n            sortedList.add(map.get(num));\n\
    \        }\n        Collections.sort(sortedList);\n        for (int i = 0; i <\
    \ sortedList.size(); i++) {\n            int key = sortedList.get(i);\n      \
    \      for (Map.Entry<String, Integer> entry: map.entrySet()) {\n            \
    \    if (entry.getValue() == key) {\n                    sb.append(entry.getKey());\n\
    \                    if (i < sortedList.size() - 1) {\n                      \
    \  sb.append(\" \");\n                    }\n                }\n            }\n\
    \        }\n        return sb.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.List.get(int)\"\
    \ is null\n\tat Problem.sortNumbers(tmp_271e5cy.java:33)\n\tat Problem.main(tmp_271e5cy.java:46)\n"
  stdout: ''
  timestamp: 1660011455
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        return Arrays.stream(numbers.split(\" \"))\n            .map(Problem::numberWordToNumber)\n\
    \            .sorted()\n            .map(Problem::numberToNumberWord)\n      \
    \      .collect(Collectors.joining(\" \"));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxta5_odv.java:16: error: invalid method reference\n           \
    \ .map(Problem::numberWordToNumber)\n                 ^\n  cannot find symbol\n\
    \    symbol:   method numberWordToNumber()\n    location: class Problem\n/tmp/tmpxta5_odv.java:18:\
    \ error: invalid method reference\n            .map(Problem::numberToNumberWord)\n\
    \                 ^\n  cannot find symbol\n    symbol:   method numberToNumberWord()\n\
    \    location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011455
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] words = numbers.split(\" \");\n        String[] wordsOrdered\
    \ = new String[words.length];\n        String output = \"\";\n        for (int\
    \ i = 0; i < words.length; i++) {\n            wordsOrdered[i] = words[i];\n \
    \       }\n        Arrays.sort(wordsOrdered);\n        for (int i = 0; i < wordsOrdered.length;\
    \ i++) {\n            output += wordsOrdered[i] + \" \";\n        }\n        return\
    \ output.trim();\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppnhjvy0e.java:30)\n"
  stdout: ''
  timestamp: 1660011455
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        List<Integer> nums_sorted\
    \ = Arrays.stream(nums).map(n -> getNum(n)).sorted().collect(Collectors.toList());\n\
    \        return nums_sorted.stream().map(n -> getString(n)).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpff4ymf48.java:16: error: cannot find symbol\n        List<Integer>\
    \ nums_sorted = Arrays.stream(nums).map(n -> getNum(n)).sorted().collect(Collectors.toList());\n\
    \                                                                 ^\n  symbol:\
    \   method getNum(String)\n  location: class Problem\n/tmp/tmpff4ymf48.java:16:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \      List<Integer> nums_sorted = Arrays.stream(nums).map(n -> getNum(n)).sorted().collect(Collectors.toList());\n\
    \                                                                            \
    \                ^\n    equality constraints: Integer\n    lower bounds: Object\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>toList()\n\
    /tmp/tmpff4ymf48.java:17: error: cannot find symbol\n        return nums_sorted.stream().map(n\
    \ -> getString(n)).collect(Collectors.joining(\" \"));\n                     \
    \                        ^\n  symbol:   method getString(Integer)\n  location:\
    \ class Problem\n/tmp/tmpff4ymf48.java:17: error: no suitable method found for\
    \ collect(Collector<CharSequence,CAP#1,String>)\n        return nums_sorted.stream().map(n\
    \ -> getString(n)).collect(Collectors.joining(\" \"));\n                     \
    \                                     ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super Object>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#1\n        (actual and formal argument lists differ in length))\n    method\
    \ Stream.<R#2,A>collect(Collector<? super Object,A,R#2>) is not applicable\n \
    \     (cannot infer type-variable(s) R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String>\
    \ cannot be converted to Collector<? super Object,A,R#2>))\n  where R#1,T,R#2,A\
    \ are type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in"
  stdout: ''
  timestamp: 1660011455
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] val = numbers.split(\" \");\n        List<String> nums =\
    \ Arrays.asList(val);\n        Collections.sort(nums);\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (String s : nums) {\n            sb.append(s\
    \ + \" \");\n        }\n        return sb.toString().trim();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpddd51vhf.java:27)\n"
  stdout: ''
  timestamp: 1660011456
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numbersInString = numbers.split(\" \");\n        int[] numbersInInt\
    \ = new int[numbersInString.length];\n        for (int i = 0; i < numbersInString.length;\
    \ i++) {\n            if (numbersInString[i].equals(\"zero\"))\n             \
    \   numbersInInt[i] = 0;\n            else if (numbersInString[i].equals(\"one\"\
    ))\n                numbersInInt[i] = 1;\n            else if (numbersInString[i].equals(\"\
    two\"))\n                numbersInInt[i] = 2;\n            else if (numbersInString[i].equals(\"\
    three\"))\n                numbersInInt[i] = 3;\n            else if (numbersInString[i].equals(\"\
    four\"))\n                numbersInInt[i] = 4;\n            else if (numbersInString[i].equals(\"\
    five\"))\n                numbersInInt[i] = 5;\n            else if (numbersInString[i].equals(\"\
    six\"))\n                numbersInInt[i] = 6;\n            else if (numbersInString[i].equals(\"\
    seven\"))\n                numbersInInt[i] = 7;\n            else if (numbersInString[i].equals(\"\
    eight\"))\n                numbersInInt[i] = 8;\n            else if (numbersInString[i].equals(\"\
    nine\"))\n                numbersInInt[i] = 9;\n        }\n        Arrays.sort(numbersInInt);\n\
    \        StringBuilder stringBuilder = new StringBuilder();\n        for (int\
    \ i = 0; i < numbersInInt.length; i++) {\n            if (numbersInInt[i] == 0)\n\
    \                stringBuilder.append(\"zero \");\n            else if (numbersInInt[i]\
    \ == 1)\n                stringBuilder.append(\"one \");\n            else if\
    \ (numbersInInt[i] == 2)\n                stringBuilder.append(\"two \");\n  \
    \          else if (numbersInInt[i] == 3)\n                stringBuilder.append(\"\
    three \");\n            else if (numbersInInt[i] == 4)\n                stringBuilder.append(\"\
    four \");\n            else if (numbersInInt[i\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpisyp8snz.java:52: error: ']' expected\n            else if (numbersInInt[i\n\
    \                                   ^\n/tmp/tmpisyp8snz.java:53: error: illegal\
    \ start of statement\n    }\n    ^\n/tmp/tmpisyp8snz.java:54: error: illegal start\
    \ of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011455
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] split = numbers.split(\" \");\n        String[] newSplit\
    \ = new String[split.length];\n        for (int i = 0; i < split.length; i++)\
    \ {\n            switch (split[i]) {\n                case \"zero\":\n       \
    \             newSplit[i] = \"0\";\n                    break;\n             \
    \   case \"one\":\n                    newSplit[i] = \"1\";\n                \
    \    break;\n                case \"two\":\n                    newSplit[i] =\
    \ \"2\";\n                    break;\n                case \"three\":\n      \
    \              newSplit[i] = \"3\";\n                    break;\n            \
    \    case \"four\":\n                    newSplit[i] = \"4\";\n              \
    \      break;\n                case \"five\":\n                    newSplit[i]\
    \ = \"5\";\n                    break;\n                case \"six\":\n      \
    \              newSplit[i] = \"6\";\n                    break;\n            \
    \    case \"seven\":\n                    newSplit[i] = \"7\";\n             \
    \       break;\n                case \"eight\":\n                    newSplit[i]\
    \ = \"8\";\n                    break;\n                case \"nine\":\n     \
    \               newSplit[i] = \"9\";\n                    break;\n           \
    \ }\n        }\n        Arrays.sort(newSplit);\n        String[] oldSplit = new\
    \ String[split.length];\n        for (int i = 0; i < split.length; i++) {\n  \
    \          switch (newSplit[i]) {\n                case \"0\":\n             \
    \       oldSplit[i] = \"zero\";\n                    break;\n                case\
    \ \"1\":\n                    oldSplit[i] = \"one\";\n                    break;\n\
    \                case \"2\":\n                    oldSplit[i] = \"two\";\n   \
    \                 break;\n                case \"3\":\n                    oldSplit[i]\
    \ = \"three\";\n                    break;\n                case \"4\":\n    \
    \                oldSplit[i] = \"four\";\n                    break;\n       \
    \         case \"5\":\n                    oldSplit[i] = \"five\";\n         \
    \           break;\n                case \"6\":\n                    oldSplit[i]\
    \ = \"six\";\n                    break;\n                case \"7\":\n      \
    \              oldSplit[i] = \"seven\";\n                    break;\n        \
    \        case \"8\":\n                    oldSplit[i] = \"eight\";\n         \
    \           break;\n               \n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpishm6uap.java:84: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011454
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        Map<String, Integer> numeralToNumber = new HashMap<>();\n       \
    \ numeralToNumber.put(\"zero\", 0);\n        numeralToNumber.put(\"one\", 1);\n\
    \        numeralToNumber.put(\"two\", 2);\n        numeralToNumber.put(\"three\"\
    , 3);\n        numeralToNumber.put(\"four\", 4);\n        numeralToNumber.put(\"\
    five\", 5);\n        numeralToNumber.put(\"six\", 6);\n        numeralToNumber.put(\"\
    seven\", 7);\n        numeralToNumber.put(\"eight\", 8);\n        numeralToNumber.put(\"\
    nine\", 9);\n        String[] numeralArray = numbers.split(\" \");\n        int[]\
    \ numeralNumbers = new int[numeralArray.length];\n        for (int i = 0; i <\
    \ numeralArray.length; i++) {\n            numeralNumbers[i] = numeralToNumber.get(numeralArray[i]);\n\
    \        }\n        Arrays.sort(numeralNumbers);\n        StringBuilder sb = new\
    \ StringBuilder();\n        sb.append(numeralNumbers[0]);\n        for (int i\
    \ = 1; i < numeralNumbers.length; i++) {\n            sb.append(\" \");\n    \
    \        sb.append(numeralNumbers[i]);\n        }\n        return sb.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.Map.get(Object)\"\
    \ is null\n\tat Problem.sortNumbers(tmph0po515q.java:29)\n\tat Problem.main(tmph0po515q.java:41)\n"
  stdout: ''
  timestamp: 1660011456
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        int[] nums2 = new\
    \ int[nums.length];\n        for (int i = 0; i < nums.length; i++) {\n       \
    \     if (nums[i].equals(\"zero\")) {\n                nums2[i] = 0;\n       \
    \     } else if (nums[i].equals(\"one\")) {\n                nums2[i] = 1;\n \
    \           } else if (nums[i].equals(\"two\")) {\n                nums2[i] =\
    \ 2;\n            } else if (nums[i].equals(\"three\")) {\n                nums2[i]\
    \ = 3;\n            } else if (nums[i].equals(\"four\")) {\n                nums2[i]\
    \ = 4;\n            } else if (nums[i].equals(\"five\")) {\n                nums2[i]\
    \ = 5;\n            } else if (nums[i].equals(\"six\")) {\n                nums2[i]\
    \ = 6;\n            } else if (nums[i].equals(\"seven\")) {\n                nums2[i]\
    \ = 7;\n            } else if (nums[i].equals(\"eight\")) {\n                nums2[i]\
    \ = 8;\n            } else if (nums[i].equals(\"nine\")) {\n                nums2[i]\
    \ = 9;\n            }\n        }\n        Arrays.sort(nums2);\n        String\
    \ output = \"\";\n        for (int i = 0; i < nums2.length; i++) {\n         \
    \   if (nums2[i] == 0) {\n                output += \"zero \";\n            }\
    \ else if (nums2[i] == 1) {\n                output += \"one \";\n           \
    \ } else if (nums2[i] == 2) {\n                output += \"two \";\n         \
    \   } else if (nums2[i] == 3) {\n                output += \"three \";\n     \
    \       } else if (nums2[i] == 4) {\n                output += \"four \";\n  \
    \          } else if (nums2[i] == 5) {\n                output += \"five \";\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpfo0sno67.java:56: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011455
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] splitted = numbers.split(\" \");\n        List<String> list\
    \ = Arrays.asList(splitted);\n        TreeMap<Integer, String> map = new TreeMap<>();\n\
    \        map.put(0, \"zero\");\n        map.put(1, \"one\");\n        map.put(2,\
    \ \"two\");\n        map.put(3, \"three\");\n        map.put(4, \"four\");\n \
    \       map.put(5, \"five\");\n        map.put(6, \"six\");\n        map.put(7,\
    \ \"seven\");\n        map.put(8, \"eight\");\n        map.put(9, \"nine\");\n\
    \        List<Integer> result = new ArrayList<>();\n        for (String s : list)\
    \ {\n            for (Map.Entry<Integer, String> e : map.entrySet()) {\n     \
    \           if (e.getValue().equals(s)) {\n                    result.add(e.getKey());\n\
    \                }\n            }\n        }\n        Collections.sort(result);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (Integer i : result)\
    \ {\n            sb.append(map.get(i) + \" \");\n        }\n        return sb.toString().trim();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011456
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] words = numbers.split(\" \");\n        List<Integer> numbersList\
    \ = new ArrayList<>();\n        for (String word : words) {\n            numbersList.add(getWordInt(word));\n\
    \        }\n        Collections.sort(numbersList);\n        String ret = \"\"\
    ;\n        for (Integer num : numbersList) {\n            ret += getIntWord(num)\
    \ + \" \";\n        }\n        return ret.trim();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp09cepkzb.java:18: error: cannot find symbol\n            numbersList.add(getWordInt(word));\n\
    \                            ^\n  symbol:   method getWordInt(String)\n  location:\
    \ class Problem\n/tmp/tmp09cepkzb.java:23: error: cannot find symbol\n       \
    \     ret += getIntWord(num) + \" \";\n                   ^\n  symbol:   method\
    \ getIntWord(Integer)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011455
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        int[] vals = new int[nums.length];\n\
    \        for (int i = 0; i < nums.length; i++) {\n            vals[i] = numToInt(nums[i]);\n\
    \        }\n        Arrays.sort(vals);\n        String result = \"\";\n      \
    \  for (int i = 0; i < vals.length; i++) {\n            result += intToNum(vals[i])\
    \ + \" \";\n        }\n        return result.trim();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kksnqxs.java:18: error: cannot find symbol\n            vals[i]\
    \ = numToInt(nums[i]);\n                      ^\n  symbol:   method numToInt(String)\n\
    \  location: class Problem\n/tmp/tmp1kksnqxs.java:23: error: cannot find symbol\n\
    \            result += intToNum(vals[i]) + \" \";\n                      ^\n \
    \ symbol:   method intToNum(int)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011455
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        String[] sorted =\
    \ new String[nums.length];\n        for (int i = 0; i < nums.length; i++) {\n\
    \            sorted[i] = nums[i];\n        }\n        Arrays.sort(sorted, new\
    \ Comparator<String>() {\n            public int compare(String s1, String s2)\
    \ {\n                return convertNum(s1).compareTo(convertNum(s2));\n      \
    \      }\n        });\n        StringBuilder sb = new StringBuilder();\n     \
    \   for (int i = 0; i < sorted.length; i++) {\n            sb.append(sorted[i]);\n\
    \            if (i != sorted.length - 1) {\n                sb.append(\" \");\n\
    \            }\n        }\n        return sb.toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl89g92ik.java:22: error: cannot find symbol\n                return\
    \ convertNum(s1).compareTo(convertNum(s2));\n                       ^\n  symbol:\
    \ method convertNum(String)\n/tmp/tmpl89g92ik.java:22: error: cannot find symbol\n\
    \                return convertNum(s1).compareTo(convertNum(s2));\n          \
    \                                      ^\n  symbol: method convertNum(String)\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660011456
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        return Arrays.stream(numbers.split(\" \"))\n            .map(w ->\
    \ \"\" + getNumberForWord(w))\n            .sorted()\n            .collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpz9tziae3.java:16: error: cannot find symbol\n            .map(w\
    \ -> \"\" + getNumberForWord(w))\n                           ^\n  symbol:   method\
    \ getNumberForWord(String)\n  location: class Problem\n/tmp/tmpz9tziae3.java:18:\
    \ error: no suitable method found for collect(Collector<CharSequence,CAP#1,String>)\n\
    \            .collect(Collectors.joining(\" \"));\n            ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super Object>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#1\n        (actual and formal argument lists differ in length))\n    method\
    \ Stream.<R#2,A>collect(Collector<? super Object,A,R#2>) is not applicable\n \
    \     (cannot infer type-variable(s) R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String>\
    \ cannot be converted to Collector<? super Object,A,R#2>))\n  where R#1,T,R#2,A\
    \ are type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \  where CAP#1,CAP#2 are fresh type-variables:\n    CAP#1 extends Object from\
    \ capture of ?\n    CAP#2 extends Object from capture of ?\n2 errors\n"
  stdout: ''
  timestamp: 1660011456
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        return \"\";\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdsbkyifj.java:19)\n"
  stdout: ''
  timestamp: 1660011443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numArray = numbers.split(\" \");\n        Arrays.sort(numArray);\n\
    \        return String.join(\" \", numArray);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1mnogsrw.java:22)\n"
  stdout: ''
  timestamp: 1660011456
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // YOUR CODE HERE\n        int[] vals = {0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0};\n        numbers = numbers.trim();\n        String[] nums = numbers.split(\"\
    \ \");\n        for (String num : nums) {\n            switch (num) {\n      \
    \          case \"zero\":\n                    vals[0] += 1;\n               \
    \     break;\n                case \"one\":\n                    vals[1] += 1;\n\
    \                    break;\n                case \"two\":\n                 \
    \   vals[2] += 1;\n                    break;\n                case \"three\"\
    :\n                    vals[3] += 1;\n                    break;\n           \
    \     case \"four\":\n                    vals[4] += 1;\n                    break;\n\
    \                case \"five\":\n                    vals[5] += 1;\n         \
    \           break;\n                case \"six\":\n                    vals[6]\
    \ += 1;\n                    break;\n                case \"seven\":\n       \
    \             vals[7] += 1;\n                    break;\n                case\
    \ \"eight\":\n                    vals[8] += 1;\n                    break;\n\
    \                case \"nine\":\n                    vals[9] += 1;\n         \
    \           break;\n            }\n        }\n        StringBuilder output = new\
    \ StringBuilder();\n        for (int i = 0; i < vals.length; i++) {\n        \
    \    for (int j = 0; j < vals[i]; j++) {\n                switch (i) {\n     \
    \               case 0:\n                        output.append(\"zero \");\n \
    \                       break;\n                    case 1:\n                \
    \        output.append(\"one \");\n                        break;\n          \
    \          case 2:\n                        output.append(\"two \");\n       \
    \                 break;\n                    case 3:\n                      \
    \  output.append(\"three \");\n                        break;\n              \
    \      case 4:\n                        output.append(\"four \");\n          \
    \              break;\n                    case 5:\n                        output.append(\"\
    five \");\n                        break;\n                    case 6:\n     \
    \                   output.append(\"six \");\n                        break;\n\
    \                    case 7:\n                        output.append(\"seven \"\
    );\n                        break;\n                    case 8:\n            \
    \            output.append(\"eight \");\n                        break;\n    \
    \                case 9:\n                        output.append(\"nine \");\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpgca_z7fi.java:88: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011455
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // TODO: Implement me\n        return \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqzigusl9.java:20)\n"
  stdout: ''
  timestamp: 1660011448
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        throw new UnsupportedOperationException(\"Waiting to be implemented.\"\
    );\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Waiting\
    \ to be implemented.\n\tat Problem.sortNumbers(tmp_y4dmjuc.java:15)\n\tat Problem.main(tmp_y4dmjuc.java:18)\n"
  stdout: ''
  timestamp: 1660011457
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums);\n\
    \        return String.join(\" \", nums);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9l2doktw.java:22)\n"
  stdout: ''
  timestamp: 1660011446
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        int[] nums = new int[10];\n        String[] strs = numbers.split(\"\
    \ \");\n        for (String str : strs) {\n            switch (str) {\n      \
    \          case \"zero\": nums[0]++; break;\n                case \"one\": nums[1]++;\
    \ break;\n                case \"two\": nums[2]++; break;\n                case\
    \ \"three\": nums[3]++; break;\n                case \"four\": nums[4]++; break;\n\
    \                case \"five\": nums[5]++; break;\n                case \"six\"\
    : nums[6]++; break;\n                case \"seven\": nums[7]++; break;\n     \
    \           case \"eight\": nums[8]++; break;\n                case \"nine\":\
    \ nums[9]++; break;\n            }\n        }\n        StringBuilder sb = new\
    \ StringBuilder();\n        for (int i = 0; i < 10; i++) {\n            for (int\
    \ j = 0; j < nums[i]; j++) {\n                switch (i) {\n                 \
    \   case 0: sb.append(\"zero \"); break;\n                    case 1: sb.append(\"\
    one \"); break;\n                    case 2: sb.append(\"two \"); break;\n   \
    \                 case 3: sb.append(\"three \"); break;\n                    case\
    \ 4: sb.append(\"four \"); break;\n                    case 5: sb.append(\"five\
    \ \"); break;\n                    case 6: sb.append(\"six \"); break;\n     \
    \               case 7: sb.append(\"seven \"); break;\n                    case\
    \ 8: sb.append(\"eight \"); break;\n                    case 9: sb.append(\"nine\
    \ \"); break;\n                }\n            }\n        }\n        return sb.toString().trim();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011457
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<String> numbersSorted = Arrays.asList(numbers.split(\" \")).stream().sorted(new\
    \ Comparator<String>() {\n            public int compare(String s1, String s2)\
    \ {\n                if (s1.equals(\"zero\")) {\n                    if (s2.equals(\"\
    zero\")) {\n                        return 0;\n                    } else {\n\
    \                        return -1;\n                    }\n                }\
    \ else if (s1.equals(\"one\")) {\n                    if (s2.equals(\"zero\"))\
    \ {\n                        return 1;\n                    } else if (s2.equals(\"\
    one\")) {\n                        return 0;\n                    } else {\n \
    \                       return -1;\n                    }\n                } else\
    \ if (s1.equals(\"two\")) {\n                    if (s2.equals(\"zero\") || s2.equals(\"\
    one\")) {\n                        return 1;\n                    } else if (s2.equals(\"\
    two\")) {\n                        return 0;\n                    } else {\n \
    \                       return -1;\n                    }\n                } else\
    \ if (s1.equals(\"three\")) {\n                    if (s2.equals(\"zero\") ||\
    \ s2.equals(\"one\") || s2.equals(\"two\")) {\n                        return\
    \ 1;\n                    } else if (s2.equals(\"three\")) {\n               \
    \         return 0;\n                    } else {\n                        return\
    \ -1;\n                    }\n                } else if (s1.equals(\"four\"))\
    \ {\n                    if (s2.equals(\"zero\") || s2.equals(\"one\") || s2.equals(\"\
    two\") || s2.equals(\"three\")) {\n                        return 1;\n       \
    \             } else if (s2.equals(\"four\")) {\n                        return\
    \ 0;\n                    } else {\n                        return -1;\n     \
    \               }\n                } else if (s1.equals(\"five\")) {\n       \
    \             if (s2.equals(\"zero\") || s2.equals(\"one\") || s2.equals(\"two\"\
    ) || s2.equals(\"three\") || s2.equals(\"four\")) {\n                        return\
    \ 1;\n                    } else if (s2.equals(\"five\")) {\n                \
    \        return 0;\n                    } else {\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwax092xz.java:62: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpwax092xz.java:70: error: reached\
    \ end of file while parsing\n}\n ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011456
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] num = numbers.split(\" \");\n        ArrayList<Integer>\
    \ l = new ArrayList<Integer>();\n        for (String n : num) {\n            switch\
    \ (n) {\n                case \"zero\":\n                    l.add(0);\n     \
    \               break;\n                case \"one\":\n                    l.add(1);\n\
    \                    break;\n                case \"two\":\n                 \
    \   l.add(2);\n                    break;\n                case \"three\":\n \
    \                   l.add(3);\n                    break;\n                case\
    \ \"four\":\n                    l.add(4);\n                    break;\n     \
    \           case \"five\":\n                    l.add(5);\n                  \
    \  break;\n                case \"six\":\n                    l.add(6);\n    \
    \                break;\n                case \"seven\":\n                   \
    \ l.add(7);\n                    break;\n                case \"eight\":\n   \
    \                 l.add(8);\n                    break;\n                case\
    \ \"nine\":\n                    l.add(9);\n                    break;\n     \
    \       }\n        }\n        Collections.sort(l);\n        String ret = \"\"\
    ;\n        for (int i : l) {\n            switch (i) {\n                case 0:\n\
    \                    ret += \"zero \";\n                    break;\n         \
    \       case 1:\n                    ret += \"one \";\n                    break;\n\
    \                case 2:\n                    ret += \"two \";\n             \
    \       break;\n                case 3:\n                    ret += \"three \"\
    ;\n                    break;\n                case 4:\n                    ret\
    \ += \"four \";\n                    break;\n                case 5:\n       \
    \             ret += \"five \";\n                    break;\n                case\
    \ 6:\n                    ret += \"six \";\n                    break;\n     \
    \           case 7:\n                    ret += \"seven \";\n                \
    \    break;\n                case 8:\n                    ret += \"eight \";\n\
    \                    break;\n                case 9:\n                    ret\
    \ += \"nine \";\n                    break;\n            }\n        }\n      \
    \  return ret.trim();\n    }\n    public static void main(String[] args) {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011457
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numeralArr = numbers.split(\" \");\n        int[] numArr\
    \ = new int[numeralArr.length];\n        for (int i = 0; i < numeralArr.length;\
    \ i++) {\n            numArr[i] = convertNumeralToInt(numeralArr[i]);\n      \
    \  }\n        for (int i = 0; i < numArr.length; i++) {\n            int min =\
    \ numArr[i];\n            int minIdx = i;\n            for (int j = i + 1; j <\
    \ numArr.length; j++) {\n                if (numArr[j] < min) {\n            \
    \        min = numArr[j];\n                    minIdx = j;\n                }\n\
    \            }\n            int temp = numArr[i];\n            numArr[i] = min;\n\
    \            numArr[minIdx] = temp;\n        }\n        StringBuilder res = new\
    \ StringBuilder();\n        for (int i = 0; i < numArr.length; i++) {\n      \
    \      res.append(convertIntToNumeral(numArr[i]) + \" \");\n        }\n      \
    \  return res.toString().trim();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7vphcfc1.java:18: error: cannot find symbol\n            numArr[i]\
    \ = convertNumeralToInt(numeralArr[i]);\n                        ^\n  symbol:\
    \   method convertNumeralToInt(String)\n  location: class Problem\n/tmp/tmp7vphcfc1.java:35:\
    \ error: cannot find symbol\n            res.append(convertIntToNumeral(numArr[i])\
    \ + \" \");\n                       ^\n  symbol:   method convertIntToNumeral(int)\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011457
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.sortNumbers(String)\"\
    \ is null\n\tat Problem.main(tmpoutik4qa.java:18)\n"
  stdout: ''
  timestamp: 1660011450
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        char[] numArray = numbers.toCharArray();\n        Arrays.sort(numArray);\n\
    \        String sorted = new String(numArray);\n        return sorted;\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl2qr7u6o.java:22)\n"
  stdout: ''
  timestamp: 1660011457
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Insert your code here\n        ArrayList<Integer> nums = new ArrayList<Integer>();\n\
    \        switch(numbers.charAt(0)){\n            case 'z':\n                nums.add(0);\n\
    \                break;\n            case 'o':\n                nums.add(1);\n\
    \                break;\n            case 't':\n                nums.add(2);\n\
    \                break;\n            case 'f':\n                nums.add(3);\n\
    \                break;\n            case 'f':\n                nums.add(4);\n\
    \                break;\n            case 's':\n                nums.add(5);\n\
    \                break;\n            case 's':\n                nums.add(6);\n\
    \                break;\n            case 'e':\n                nums.add(7);\n\
    \                break;\n            case 'e':\n                nums.add(8);\n\
    \                break;\n            case 'n':\n                nums.add(9);\n\
    \                break;\n        }\n        return numbers;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6tb4i6uf.java:30: error: duplicate case label\n            case\
    \ 'f':\n            ^\n/tmp/tmp6tb4i6uf.java:36: error: duplicate case label\n\
    \            case 's':\n            ^\n/tmp/tmp6tb4i6uf.java:42: error: duplicate\
    \ case label\n            case 'e':\n            ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011457
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        int[] arr = Arrays.stream(numbers.split(\" \")).mapToInt(s -> numeralToInt(s)).toArray();\n\
    \        Arrays.sort(arr);\n        return Arrays.stream(arr).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpd0yjovn_.java:15: error: cannot find symbol\n        int[] arr\
    \ = Arrays.stream(numbers.split(\" \")).mapToInt(s -> numeralToInt(s)).toArray();\n\
    \                                                                    ^\n  symbol:\
    \   method numeralToInt(String)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011457
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // This code is missing a couple of lines\n        int [] sorted\
    \ = new int[numbers.split(\" \").length];\n        int [] unsorted = new int[numbers.split(\"\
    \ \").length];\n        for (int i = 0; i < numbers.split(\" \").length; i++)\
    \ {\n            switch (numbers.split(\" \")[i]) {\n                case \"zero\"\
    :\n                    unsorted[i] = 0;\n                    break;\n        \
    \        case \"one\":\n                    unsorted[i] = 1;\n               \
    \     break;\n                case \"two\":\n                    unsorted[i] =\
    \ 2;\n                    break;\n                case \"three\":\n          \
    \          unsorted[i] = 3;\n                    break;\n                case\
    \ \"four\":\n                    unsorted[i] = 4;\n                    break;\n\
    \                case \"five\":\n                    unsorted[i] = 5;\n      \
    \              break;\n                case \"six\":\n                    unsorted[i]\
    \ = 6;\n                    break;\n                case \"seven\":\n        \
    \            unsorted[i] = 7;\n                    break;\n                case\
    \ \"eight\":\n                    unsorted[i] = 8;\n                    break;\n\
    \                case \"nine\":\n                    unsorted[i] = 9;\n      \
    \              break;\n            }\n        }\n        Arrays.sort(unsorted);\n\
    \        String output = \"\";\n        for (int i = 0; i < numbers.split(\" \"\
    ).length; i++) {\n            switch (unsorted[i]) {\n                case 0:\n\
    \                    output += \"zero \";\n                    break;\n      \
    \          case 1:\n                    output += \"one \";\n                \
    \    break;\n                case 2:\n                    output += \"two \";\n\
    \                    break;\n                case 3:\n                    output\
    \ += \"three \";\n                    break;\n                case 4:\n      \
    \              output += \"four \";\n                    break;\n            \
    \    case 5:\n                    output += \"five \";\n                    break;\n\
    \                case 6:\n                    output += \"six \";\n          \
    \          break;\n                case 7:\n                    output += \"seven\
    \ \";\n                    break;\n                case 8:\n                 \
    \   output += \"eight \";\n                    break;\n                case 9:\n\
    \                    output += \"nine \";\n                    break;\n      \
    \      }\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpnakdfnar.java:88: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011456
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] s = numbers.split(\" \");\n        int[] n = new int[s.length];\n\
    \        for (int i = 0; i < s.length; i++) {\n            switch (s[i]) {\n \
    \               case \"zero\": n[i] = 0; break;\n                case \"one\"\
    : n[i] = 1; break;\n                case \"two\": n[i] = 2; break;\n         \
    \       case \"three\": n[i] = 3; break;\n                case \"four\": n[i]\
    \ = 4; break;\n                case \"five\": n[i] = 5; break;\n             \
    \   case \"six\": n[i] = 6; break;\n                case \"seven\": n[i] = 7;\
    \ break;\n                case \"eight\": n[i] = 8; break;\n                case\
    \ \"nine\": n[i] = 9; break;\n            }\n        }\n        Arrays.sort(n);\n\
    \        String[] sn = new String[s.length];\n        for (int i = 0; i < s.length;\
    \ i++) {\n            switch (n[i]) {\n                case 0: sn[i] = \"zero\"\
    ; break;\n                case 1: sn[i] = \"one\"; break;\n                case\
    \ 2: sn[i] = \"two\"; break;\n                case 3: sn[i] = \"three\"; break;\n\
    \                case 4: sn[i] = \"four\"; break;\n                case 5: sn[i]\
    \ = \"five\"; break;\n                case 6: sn[i] = \"six\"; break;\n      \
    \          case 7: sn[i] = \"seven\"; break;\n                case 8: sn[i] =\
    \ \"eight\"; break;\n                case 9: sn[i] = \"nine\"; break;\n      \
    \      }\n        }\n        return String.join(\" \", sn);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4j9acbkw.java:50)\n"
  stdout: ''
  timestamp: 1660011457
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numbersArray = numbers.split(\" \");\n        int[] numbersIntArray\
    \ = Arrays.stream(numbersArray).mapToInt(n -> numberToInt(n)).toArray();\n   \
    \     Arrays.sort(numbersIntArray);\n        return Arrays.stream(numbersIntArray).mapToObj(n\
    \ -> intToNumber(n)).collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpajr3eu6d.java:16: error: cannot find symbol\n        int[] numbersIntArray\
    \ = Arrays.stream(numbersArray).mapToInt(n -> numberToInt(n)).toArray();\n   \
    \                                                                       ^\n  symbol:\
    \   method numberToInt(String)\n  location: class Problem\n/tmp/tmpajr3eu6d.java:18:\
    \ error: cannot find symbol\n        return Arrays.stream(numbersIntArray).mapToObj(n\
    \ -> intToNumber(n)).collect(Collectors.joining(\" \"));\n                   \
    \                                         ^\n  symbol:   method intToNumber(int)\n\
    \  location: class Problem\n/tmp/tmpajr3eu6d.java:18: error: no suitable method\
    \ found for collect(Collector<CharSequence,CAP#1,String>)\n        return Arrays.stream(numbersIntArray).mapToObj(n\
    \ -> intToNumber(n)).collect(Collectors.joining(\" \"));\n                   \
    \                                                        ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super Object>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#1\n        (actual and formal argument lists differ in length))\n    method\
    \ Stream.<R#2,A>collect(Collector<? super Object,A,R#2>) is not applicable\n \
    \     (cannot infer type-variable(s) R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String>\
    \ cannot be converted to Collector<? super Object,A,R#2>))\n  where R#1,T,R#2,A\
    \ are type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \  where CAP#1,CAP#2 are fresh type-variables:\n    CAP#1 extends Object from\
    \ capture of ?\n    CAP#2 extends Object from capture of ?\n3 errors\n"
  stdout: ''
  timestamp: 1660011458
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Your code here\n        return \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnexob64e.java:20)\n"
  stdout: ''
  timestamp: 1660011443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.sortNumbers(String)\"\
    \ is null\n\tat Problem.main(tmpoutik4qa.java:18)\n"
  stdout: ''
  timestamp: 1660011450
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        int n = numbers.length();\n        int[] nums = new int[n / 4];\n\
    \        int j = 0;\n        for (int i = 0; i < n; i += 4) {\n            String\
    \ num = numbers.substring(i, i + 4);\n            nums[j++] = numToInt(num);\n\
    \        }\n        Arrays.sort(nums);\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < nums.length; i++) {\n            sb.append(intToNum(nums[i]));\n\
    \            sb.append(\" \");\n        }\n        sb.deleteCharAt(sb.length()\
    \ - 1);\n        return sb.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsi4flcoz.java:20: error: cannot find symbol\n            nums[j++]\
    \ = numToInt(num);\n                        ^\n  symbol:   method numToInt(String)\n\
    \  location: class Problem\n/tmp/tmpsi4flcoz.java:25: error: cannot find symbol\n\
    \            sb.append(intToNum(nums[i]));\n                      ^\n  symbol:\
    \   method intToNum(int)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011458
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<Integer> nums = new ArrayList<>();\n        for (String word\
    \ : numbers.split(\" \")) {\n            switch (word) {\n                case\
    \ \"zero\":\n                    nums.add(0);\n                    break;\n  \
    \              case \"one\":\n                    nums.add(1);\n             \
    \       break;\n                case \"two\":\n                    nums.add(2);\n\
    \                    break;\n                case \"three\":\n               \
    \     nums.add(3);\n                    break;\n                case \"four\"\
    :\n                    nums.add(4);\n                    break;\n            \
    \    case \"five\":\n                    nums.add(5);\n                    break;\n\
    \                case \"six\":\n                    nums.add(6);\n           \
    \         break;\n                case \"seven\":\n                    nums.add(7);\n\
    \                    break;\n                case \"eight\":\n               \
    \     nums.add(8);\n                    break;\n                case \"nine\"\
    :\n                    nums.add(9);\n                    break;\n            }\n\
    \        }\n        Collections.sort(nums);\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            switch (nums.get(i))\
    \ {\n                case 0:\n                    sb.append(\"zero\");\n     \
    \               break;\n                case 1:\n                    sb.append(\"\
    one\");\n                    break;\n                case 2:\n               \
    \     sb.append(\"two\");\n                    break;\n                case 3:\n\
    \                    sb.append(\"three\");\n                    break;\n     \
    \           case 4:\n                    sb.append(\"four\");\n              \
    \      break;\n                case 5:\n                    sb.append(\"five\"\
    );\n                    break;\n                case 6:\n                    sb.append(\"\
    six\");\n                    break;\n                case 7:\n               \
    \     sb.append(\"seven\");\n                    break;\n                case\
    \ 8:\n                    sb.append(\"eight\");\n                    break;\n\
    \                case 9:\n                    sb.append(\"nine\");\n         \
    \           break;\n            }\n            if (i != nums.size() - 1) {\n \
    \               sb.append(\" \");\n            }\n        }\n        return sb.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011458
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        return \"\";\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdsbkyifj.java:19)\n"
  stdout: ''
  timestamp: 1660011443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] splitStr = numbers.split(\" \");\n        int[] numArr =\
    \ new int[splitStr.length];\n        for (int i = 0; i < splitStr.length; i++)\
    \ {\n            switch (splitStr[i]) {\n                case \"zero\":\n    \
    \                numArr[i] = 0;\n                    break;\n                case\
    \ \"one\":\n                    numArr[i] = 1;\n                    break;\n \
    \               case \"two\":\n                    numArr[i] = 2;\n          \
    \          break;\n                case \"three\":\n                    numArr[i]\
    \ = 3;\n                    break;\n                case \"four\":\n         \
    \           numArr[i] = 4;\n                    break;\n                case \"\
    five\":\n                    numArr[i] = 5;\n                    break;\n    \
    \            case \"six\":\n                    numArr[i] = 6;\n             \
    \       break;\n                case \"seven\":\n                    numArr[i]\
    \ = 7;\n                    break;\n                case \"eight\":\n        \
    \            numArr[i] = 8;\n                    break;\n                case\
    \ \"nine\":\n                    numArr[i] = 9;\n                    break;\n\
    \            }\n        }\n        Arrays.sort(numArr);\n        for (int i =\
    \ 0; i < numArr.length; i++) {\n            switch (numArr[i]) {\n           \
    \     case 0:\n                    splitStr[i] = \"zero\";\n                 \
    \   break;\n                case 1:\n                    splitStr[i] = \"one\"\
    ;\n                    break;\n                case 2:\n                    splitStr[i]\
    \ = \"two\";\n                    break;\n                case 3:\n          \
    \          splitStr[i] = \"three\";\n                    break;\n            \
    \    case 4:\n                    splitStr[i] = \"four\";\n                  \
    \  break;\n                case 5:\n                    splitStr[i] = \"five\"\
    ;\n                    break;\n                case 6:\n                    splitStr[i]\
    \ = \"six\";\n                    break;\n                case 7:\n          \
    \          splitStr[i] = \"seven\";\n                    break;\n            \
    \    case 8:\n                    splitStr[i] = \"eight\";\n                 \
    \   break;\n                case 9:\n                    splitStr[i] = \"nine\"\
    ;\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpicu02cwi.java:84: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011457
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] split = numbers.split(\" \");\n        Arrays.sort(split,\
    \ new Sort());\n        return String.join(\" \", split);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdvot7lkd.java:16: error: cannot find symbol\n        Arrays.sort(split,\
    \ new Sort());\n                               ^\n  symbol:   class Sort\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011457
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        int[] nums_2 = new\
    \ int[nums.length];\n        for (int i = 0; i < nums.length; i++) {\n       \
    \     nums_2[i] = mapNum(nums[i]);\n        }\n        Arrays.sort(nums_2);\n\
    \        for (int i = 0; i < nums.length; i++) {\n            nums[i] = mapNum(nums_2[i]);\n\
    \        }\n        return Arrays.stream(nums).collect(Collectors.joining(\" \"\
    ));\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp1gaaddz4.java:18: error: cannot find symbol\n            nums_2[i]\
    \ = mapNum(nums[i]);\n                        ^\n  symbol:   method mapNum(String)\n\
    \  location: class Problem\n/tmp/tmp1gaaddz4.java:22: error: cannot find symbol\n\
    \            nums[i] = mapNum(nums_2[i]);\n                      ^\n  symbol:\
    \   method mapNum(int)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011458
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        int[] nums = new int[10];\n        String[] words = numbers.split(\"\
    \ \");\n        for (String word : words) {\n            int num = getNumber(word);\n\
    \            nums[num]++;\n        }\n        List<Integer> list = new ArrayList<>();\n\
    \        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] > 0)\
    \ {\n                for (int j = 0; j < nums[i]; j++) {\n                   \
    \ list.add(i);\n                }\n            }\n        }\n        int[] result\
    \ = new int[list.size()];\n        for (int i = 0; i < list.size(); i++) {\n \
    \           result[i] = list.get(i);\n        }\n        return numsToString(result);\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_e53mzq9.java:18: error: cannot find symbol\n            int num\
    \ = getNumber(word);\n                      ^\n  symbol:   method getNumber(String)\n\
    \  location: class Problem\n/tmp/tmp_e53mzq9.java:33: error: cannot find symbol\n\
    \        return numsToString(result);\n               ^\n  symbol:   method numsToString(int[])\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011458
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        return \"\";\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdsbkyifj.java:19)\n"
  stdout: ''
  timestamp: 1660011443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numberList = numbers.split(\" \");\n        if (numberList.length\
    \ == 0) {\n            return null;\n        } else {\n            Arrays.sort(numberList);\n\
    \            return String.join(\" \", numberList);\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplq4gcuqk.java:26)\n"
  stdout: ''
  timestamp: 1660011458
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Your code here.\n        return \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7v0veo1s.java:20)\n"
  stdout: ''
  timestamp: 1660011458
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        Map<String, Integer> numeralMap = new HashMap<>();\n        numeralMap.put(\"\
    zero\", 0);\n        numeralMap.put(\"one\", 1);\n        numeralMap.put(\"two\"\
    , 2);\n        numeralMap.put(\"three\", 3);\n        numeralMap.put(\"four\"\
    , 4);\n        numeralMap.put(\"five\", 5);\n        numeralMap.put(\"six\", 6);\n\
    \        numeralMap.put(\"seven\", 7);\n        numeralMap.put(\"eight\", 8);\n\
    \        numeralMap.put(\"nine\", 9);\n        List<Integer> sortedList = Arrays.stream(numbers.split(\"\
    \ \"))\n            .map(numeralMap::get)\n            .sorted()\n           \
    \ .collect(Collectors.toList());\n        return sortedList.stream()\n       \
    \     .map(Object::toString)\n            .collect(Collectors.joining(\" \"));\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\
    \tat java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)\n\
    \tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\
    \tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\
    \tat java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\
    \tat java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)\n\
    \tat Problem.sortNumbers(tmp8dvssp6u.java:32)\n\tat Problem.main(tmp8dvssp6u.java:35)\n"
  stdout: ''
  timestamp: 1660011458
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        throw new RuntimeException(\"Please implement the sortNumbers method\"\
    );\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Please implement\
    \ the sortNumbers method\n\tat Problem.sortNumbers(tmps2moiq_w.java:15)\n\tat\
    \ Problem.main(tmps2moiq_w.java:18)\n"
  stdout: ''
  timestamp: 1660011458
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        numbers.trim();\n        String[] numbers_list = numbers.split(\"\
    \ \");\n        Arrays.sort(numbers_list);\n        String final_string = String.join(\"\
    \ \", numbers_list);\n        return final_string;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdjnk_l9a.java:24)\n"
  stdout: ''
  timestamp: 1660011458
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        final String[] nums = numbers.split(\" \");\n        final int[]\
    \ numVals = new int[nums.length];\n        for (int i = 0; i < nums.length; i++)\
    \ {\n            numVals[i] = convertWordToInt(nums[i]);\n        }\n        Arrays.sort(numVals);\n\
    \        String output = \"\";\n        for (int i = 0; i < numVals.length; i++)\
    \ {\n            output += convertIntToWord(numVals[i]) + \" \";\n        }\n\
    \        return output.trim();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpes6shpau.java:18: error: cannot find symbol\n            numVals[i]\
    \ = convertWordToInt(nums[i]);\n                         ^\n  symbol:   method\
    \ convertWordToInt(String)\n  location: class Problem\n/tmp/tmpes6shpau.java:23:\
    \ error: cannot find symbol\n            output += convertIntToWord(numVals[i])\
    \ + \" \";\n                      ^\n  symbol:   method convertIntToWord(int)\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011458
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        return \"\";\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdsbkyifj.java:19)\n"
  stdout: ''
  timestamp: 1660011443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // fill in your solution here\n        return null;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.sortNumbers(String)\"\
    \ is null\n\tat Problem.main(tmp5mffhenv.java:19)\n"
  stdout: ''
  timestamp: 1660011458
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<String> numList = Arrays.asList(numbers.split(\" \"));\n   \
    \     int [] numInts = new int[numList.size()];\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        int i = 0;\n        for (String s : numList)\
    \ {\n            map.put(s, convertNum(s));\n            numInts[i] = convertNum(s);\n\
    \            i++;\n        }\n        Arrays.sort(numInts);\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (i = 0; i < numInts.length; i++) {\n\
    \            for (Map.Entry<String, Integer> e : map.entrySet()) {\n         \
    \       if (e.getValue() == numInts[i]) {\n                    sb.append(e.getKey());\n\
    \                    sb.append(\" \");\n                    break;\n         \
    \       }\n            }\n        }\n        return sb.toString().trim();\n  \
    \  }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpqhwxpzw9.java:20: error: cannot find symbol\n            map.put(s,\
    \ convertNum(s));\n                       ^\n  symbol:   method convertNum(String)\n\
    \  location: class Problem\n/tmp/tmpqhwxpzw9.java:21: error: cannot find symbol\n\
    \            numInts[i] = convertNum(s);\n                         ^\n  symbol:\
    \   method convertNum(String)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011458
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.sortNumbers(String)\"\
    \ is null\n\tat Problem.main(tmpoutik4qa.java:18)\n"
  stdout: ''
  timestamp: 1660011450
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"zero\"\
    , 0);\n        map.put(\"one\", 1);\n        map.put(\"two\", 2);\n        map.put(\"\
    three\", 3);\n        map.put(\"four\", 4);\n        map.put(\"five\", 5);\n \
    \       map.put(\"six\", 6);\n        map.put(\"seven\", 7);\n        map.put(\"\
    eight\", 8);\n        map.put(\"nine\", 9);\n        String[] arr = numbers.split(\"\
    \ \");\n        int[] nums = new int[arr.length];\n        for (int i = 0; i <\
    \ arr.length; i++) {\n            nums[i] = map.get(arr[i]);\n        }\n    \
    \    Arrays.sort(nums);\n        StringBuilder builder = new StringBuilder();\n\
    \        for (int i = 0; i < nums.length; i++) {\n            int num = nums[i];\n\
    \            if (num == 0) {\n                builder.append(\"zero\");\n    \
    \        } else if (num == 1) {\n                builder.append(\"one\");\n  \
    \          } else if (num == 2) {\n                builder.append(\"two\");\n\
    \            } else if (num == 3) {\n                builder.append(\"three\"\
    );\n            } else if (num == 4) {\n                builder.append(\"four\"\
    );\n            } else if (num == 5) {\n                builder.append(\"five\"\
    );\n            } else if (num == 6) {\n                builder.append(\"six\"\
    );\n            } else if (num == 7) {\n                builder.append(\"seven\"\
    );\n            } else if (num == 8) {\n                builder.append(\"eight\"\
    );\n            } else if (num == 9) {\n                builder.append(\"nine\"\
    );\n            }\n            if (i != nums.length - 1) {\n                builder.append(\"\
    \ \");\n            }\n        }\n        return builder.toString();\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.Map.get(Object)\"\
    \ is null\n\tat Problem.sortNumbers(tmp9wzphloq.java:29)\n\tat Problem.main(tmp9wzphloq.java:63)\n"
  stdout: ''
  timestamp: 1660011458
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.sortNumbers(String)\"\
    \ is null\n\tat Problem.main(tmpoutik4qa.java:18)\n"
  stdout: ''
  timestamp: 1660011450
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] temp = numbers.split(\" \");\n        Integer[] nums = new\
    \ Integer[temp.length];\n        for (int i = 0; i < temp.length; i++) {\n   \
    \         nums[i] = toInt(temp[i]);\n        }\n        Arrays.sort(nums);\n \
    \       String res = nums[0].toString();\n        for (int i = 1; i < nums.length;\
    \ i++) {\n            res += \" \" + nums[i].toString();\n        }\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmptnnuh6jf.java:18: error: cannot find symbol\n            nums[i]\
    \ = toInt(temp[i]);\n                      ^\n  symbol:   method toInt(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011458
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        String[] numNames\
    \ = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"};\n        Arrays.sort(nums, new Comparator<String>() {\n\
    \            @Override\n            public int compare(String s1, String s2) {\n\
    \                int index1 = Arrays.asList(numNames).indexOf(s1);\n         \
    \       int index2 = Arrays.asList(numNames).indexOf(s2);\n                return\
    \ index1 - index2;\n            }\n        });\n        return String.join(\"\
    \ \", nums);\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011458
