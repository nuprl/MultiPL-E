name: HumanEval_145_order_by_points
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Write a function which sorts the given array list of integers\n\
  \    // in ascending order according to the sum of their digits.\n    // Note: if\
  \ there are several items with similar sum of their digits,\n    // order them based\
  \ on their index in original array list.\n    // For example:\n    // >>> orderByPoints((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
  \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
  \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
  \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
  \ orderByPoints(ArrayList<Long> nums) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
  \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
  \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
  \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
  \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
  \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
  \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l, (long)1l,\
  \ (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l,\
  \ (long)10l, (long)11l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)10l,\
  \ (long)2l, (long)11l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l,\
  \ (long)9l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)6l, (long)6l, (long)-76l, (long)-21l, (long)23l, (long)4l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)-76l, (long)-21l, (long)0l, (long)4l, (long)23l,\
  \ (long)6l, (long)6l)))));\n    }\n\n}\n"
completions: ["        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Pair<Long,\
    \ Long>> pairs = new ArrayList<Pair<Long, Long>>();\n        for (Long l : nums)\
    \ {\n            pairs.add(new Pair<Long, Long>(new Long(sumDigits(l)), l));\n\
    \        }\n        Collections.sort(pairs, new Comparator<Pair<Long, Long>>()\
    \ {\n            @Override\n            public int compare(Pair<Long, Long> p1,\
    \ Pair<Long, Long> p2) {\n                int ret = p1.getValue0().compareTo(p2.getValue0());\n\
    \                if (ret == 0) {\n                    int i1 = nums.indexOf(p1.getValue1());\n\
    \                    int i2 = nums.indexOf(p2.getValue1());\n                \
    \    ret = i1 - i2;\n                }\n                return ret;\n        \
    \    }\n        });\n        for (Pair<Long, Long> p : pairs) {\n            result.add(p.getValue1());\n\
    \        }\n        return result;", "        List<Triplet<Long, Long, Long>>\
    \ sums = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n\
    \            sums.add(new Triplet<Long, Long, Long>(sumDigits(nums.get(i)), nums.get(i),\
    \ (long)i));\n        }\n        List<Triplet<Long, Long, Long>> sorted = sums.stream().sorted((Triplet<Long,\
    \ Long, Long> t1, Triplet<Long, Long, Long> t2) -> {\n            int sumCompare\
    \ = t1.getValue0().compareTo(t2.getValue0());\n            if (sumCompare != 0)\
    \ return sumCompare;\n            return t1.getValue2().compareTo(t2.getValue2());\n\
    \        }).collect(Collectors.toList());\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        for (Triplet<Long, Long, Long> t : sorted) {\n            res.add(t.getValue1());\n\
    \        }\n        return res;", "        // write your code here\n        return\
    \ nums;", '        return new ArrayList<Long>();', "        // Your code here.\n\
    \        return nums;", '        return nums;', '        return nums;', "    \
    \    // int a[] = new int[10];\n        // for(int i=0;i<10;i++) {\n        //\
    \     a[i] = 0;\n        // }\n        // for(int i=0;i<nums.size();i++) {\n \
    \       //     long t = nums.get(i);\n        //     while(t>0) {\n        //\
    \         int d = (int)(t%10);\n        //         a[d] += 1;\n        //    \
    \     t = t/10;\n        //     }\n        // }\n        // for(int i=0;i<10;i++)\
    \ {\n        //     System.out.println(a[i]);\n        // }\n        // ArrayList<Long>\
    \ b = new ArrayList<Long>();\n        // while(a[0]>0) {\n        //     b.add((long)0);\n\
    \        //     a[0]--;\n        // }\n        // for(int i=1;i<10;i++) {\n  \
    \      //     while(a[i]>0) {\n        //         b.add((long)i);\n        //\
    \         a[i]--;\n        //     }\n        // }\n        // return b;\n    \
    \    return new ArrayList<Long>();", "        Collections.sort(nums, new Comparator<Long>()\
    \ {\n            @Override\n            public int compare(Long a, Long b) {\n\
    \                Long sumOfDigitsA = 0l;\n                for (Character c : a.toString().toCharArray())\
    \ {\n                    sumOfDigitsA += Character.getNumericValue(c);\n     \
    \           }\n                Long sumOfDigitsB = 0l;\n                for (Character\
    \ c : b.toString().toCharArray()) {\n                    sumOfDigitsB += Character.getNumericValue(c);\n\
    \                }\n                return sumOfDigitsA.compareTo(sumOfDigitsB);\n\
    \            }\n        });\n        return nums;", "        ArrayList<Triplet<Long,\
    \ Long, Long>> tmp = new ArrayList<Triplet<Long, Long, Long>>();\n        for\
    \ (int i = 0; i < nums.size(); i++) {\n            long n = nums.get(i);\n   \
    \         long s = n < 0 ? n * -1 : n;\n            long t = s == 0 ? 0 : (long)Math.floor(Math.log10(s))\
    \ + 1;\n            long v = s;\n            for (int j = 0; j < t; j++) {\n \
    \               v = (long)Math.floor(v / 10) + (v % 10);\n            }\n    \
    \        Triplet<Long, Long, Long> tri = new Triplet<Long, Long, Long>(n, v, (long)i);\n\
    \            tmp.add(tri);\n        }\n        List<Triplet<Long, Long, Long>>\
    \ sorted = tmp.stream().sorted((a, b) -> {\n            int cmp = a.getValue1().compareTo(b.getValue1());\n\
    \            if (cmp == 0) {\n                cmp = a.getValue2().compareTo(b.getValue2());\n\
    \            }\n            return cmp;\n        }).collect(Collectors.toList());\n\
    \        ArrayList<Long> res = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < sorted.size(); i++) {\n            res.add(sorted.get(i).getValue0());\n\
    \        }\n        return res;", "        // implement here\n        return nums;",
  '        return null;', "        // throw new Exception(\"Not implemented\");\n\
    \        List<Pair<Long, Long>> sumNums = new ArrayList<>();\n        for (int\
    \ i = 0; i < nums.size(); i++) {\n            sumNums.add(new Pair<Long, Long>(nums.get(i),\
    \ getSum(nums.get(i))));\n        }\n        Collections.sort(sumNums, new Comparator<Pair<Long,\
    \ Long>>() {\n            @Override\n            public int compare(Pair<Long,\
    \ Long> o1, Pair<Long, Long> o2) {\n                int cmp = o1.getValue0().compareTo(o2.getValue0());\n\
    \                if (cmp == 0) {\n                    return o1.getValue1().compareTo(o2.getValue1());\n\
    \                }\n                return cmp;\n            }\n        });\n\
    \        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0;\
    \ i < sumNums.size(); i++) {\n            result.add(sumNums.get(i).getValue0());\n\
    \        }\n        return result;", "        ArrayList<Pair<Long, Long>> pairs\
    \ = new ArrayList<Pair<Long, Long>>();\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            long num = nums.get(i);\n\
    \            long sumOfDigits = 0;\n            while (num != 0) {\n         \
    \       sumOfDigits += (num % 10);\n                num /= 10;\n            }\n\
    \            pairs.add(new Pair<Long, Long>(sumOfDigits, (long)i));\n        }\n\
    \        Collections.sort(pairs, new Comparator<Pair<Long, Long>>() {\n      \
    \      @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long,\
    \ Long> p2) {\n                if (p1.getValue0().equals(p2.getValue0())) {\n\
    \                    return p1.getValue1().compareTo(p2.getValue1());\n      \
    \          }\n                return p1.getValue0().compareTo(p2.getValue0());\n\
    \            }\n        });\n        for (int i = 0; i < pairs.size(); i++) {\n\
    \            result.add(nums.get(pairs.get(i).getValue1().intValue()));\n    \
    \    }\n        return result;", "        Collections.sort(nums, (a, b) -> {\n\
    \            if (sumOfDigits(a) == sumOfDigits(b)) {\n                return nums.indexOf(a)\
    \ - nums.indexOf(b);\n            }\n            return sumOfDigits(a) - sumOfDigits(b);\n\
    \        });\n        return nums;", '        return new ArrayList<Long>();',
  "        if (nums.size() == 0) {\n            return nums;\n        }\n        //\
    \ your code here\n        return nums;", '        return new ArrayList<Long>();',
  "        ArrayList<Long> numsCopy = new ArrayList<Long>(nums);\n        ArrayList<Integer>\
    \ sums = new ArrayList<Integer>();\n        for (int i = 0; i < nums.size(); i++)\
    \ {\n            sums.add(getSumOfDigits(nums.get(i)));\n        }\n        int\
    \ k = 0;\n        while (k < nums.size()) {\n            int i = k;\n        \
    \    int j = k + 1;\n            if (i < nums.size() && j < nums.size()) {\n \
    \               if (sums.get(i) > sums.get(j)) {\n                    int temp\
    \ = sums.get(i);\n                    sums.set(i, sums.get(j));\n            \
    \        sums.set(j, temp);\n                    long temp2 = nums.get(i);\n \
    \                   nums.set(i, nums.get(j));\n                    nums.set(j,\
    \ temp2);\n                    if (k != 0) {\n                        k = k -\
    \ 1;\n                    }\n                } else {\n                    k =\
    \ k + 1;\n                }\n            } else {\n                k = k + 1;\n\
    \            }\n        }\n        return nums;", "        Collections.sort(nums,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ a, Long b) {\n                BigInteger a1 = new BigInteger(Long.toString(a));\n\
    \                BigInteger b1 = new BigInteger(Long.toString(b));\n         \
    \       BigInteger a2 = a1.add(BigInteger.ZERO);\n                BigInteger b2\
    \ = b1.add(BigInteger.ZERO);\n                BigInteger a3 = a2.add(BigInteger.ZERO);\n\
    \                BigInteger b3 = b2.add(BigInteger.ZERO);\n                while\
    \ (a3.compareTo(BigInteger.ZERO) == 1) {\n                    a2 = a2.add(a3.mod(BigInteger.TEN));\n\
    \                    a3 = a3.divide(BigInteger.TEN);\n                }\n    \
    \            while (b3.compareTo(BigInteger.ZERO) == 1) {\n                  \
    \  b2 = b2.add(b3.mod(BigInteger.TEN));\n                    b3 = b3.divide(BigInteger.TEN);\n\
    \                }\n                return a2.compareTo(b2);\n            }\n\
    \        });\n        return nums;", '        return nums;', "        // write\
    \ your code here\n        // ------------------\n        class CustomComparator\
    \ implements Comparator<Long> {\n            @Override\n            public int\
    \ compare(Long l1, Long l2) {\n                long sum1 = sumOfDigits(l1);\n\
    \                long sum2 = sumOfDigits(l2);\n                if (sum1 > sum2)\
    \ return 1;\n                else if (sum1 < sum2) return -1;\n              \
    \  else return 0;\n            }\n        }\n        Collections.sort(nums, new\
    \ CustomComparator());\n        return nums;\n        // ------------------",
  '        return null;', "        nums.sort((x, y) -> {\n            int xPoints\
    \ = countPoints(x);\n            int yPoints = countPoints(y);\n            if\
    \ (xPoints != yPoints) {\n                return xPoints - yPoints;\n        \
    \    }\n            return nums.indexOf(x) - nums.indexOf(y);\n        });\n \
    \       return nums;", "        nums.sort((a, b) -> {\n            var a_sum =\
    \ a.intValue() < 0 ? -a.intValue() : a.intValue();\n            var b_sum = b.intValue()\
    \ < 0 ? -b.intValue() : b.intValue();\n            var a_s = (a_sum + \"\").chars().map(c\
    \ -> c - '0').sum();\n            var b_s = (b_sum + \"\").chars().map(c -> c\
    \ - '0').sum();\n            return a_s < b_s ? -1 : a_s > b_s ? 1 : 0;\n    \
    \    });\n        return nums;", "        Collections.sort(nums, (Long a, Long\
    \ b) -> {\n            String s1 = String.valueOf(a), s2 = String.valueOf(b);\n\
    \            int c = 0;\n            for (int i = 0; i < s1.length(); i++) {\n\
    \                c += Character.getNumericValue(s1.charAt(i));\n            }\n\
    \            int d = 0;\n            for (int i = 0; i < s2.length(); i++) {\n\
    \                d += Character.getNumericValue(s2.charAt(i));\n            }\n\
    \            if (c != d) {\n                return c - d;\n            }\n   \
    \         return 0;\n        });\n        return nums;", "        ArrayList<Long>\
    \ out = new ArrayList<Long>();\n        if (nums.size() == 0) {\n            return\
    \ out;\n        } else {\n            ArrayList<Pair<Long, Long>> x = new ArrayList<Pair<Long,\
    \ Long>>();\n            for (int i = 0; i < nums.size(); i++) {\n           \
    \     Pair<Long, Long> m = new Pair<Long, Long>(nums.get(i), (long)i);\n     \
    \           x.add(m);\n            }\n            for (int i = 0; i < x.size();\
    \ i++) {\n                x.get(i).setValue1(sumDigits(x.get(i).getValue0()));\n\
    \            }\n            Collections.sort(x, new Comparator<Pair<Long, Long>>()\
    \ {\n                public int compare(Pair<Long, Long> a, Pair<Long, Long> b)\
    \ {\n                    if (a.getValue1() < b.getValue1()) {\n              \
    \          return -1;\n                    } else if (a.getValue1() > b.getValue1())\
    \ {\n                        return 1;\n                    } else {\n       \
    \                 if (a.getValue0() < b.getValue0()) {\n                     \
    \       return -1;\n                        } else if (a.getValue0() > b.getValue0())\
    \ {\n                            return 1;\n                        } else {\n\
    \                            return 0;\n                        }\n          \
    \          }\n                }\n            });\n            for (int i = 0;\
    \ i < x.size(); i++) {\n                out.add(x.get(i).getValue0());\n     \
    \       }\n            return out;\n        }", "        // todo: implement\n\
    \        return nums;", "        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        ArrayList<Long> tempArray = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tempArray2 = new ArrayList<Long>();\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            if (nums.get(i) < 0) {\n                tempArray.add(nums.get(i));\n\
    \            } else {\n                tempArray2.add(nums.get(i));\n        \
    \    }\n        }\n        tempArray = sortArray(tempArray);\n        tempArray2\
    \ = sortArray(tempArray2);\n        for (int i = 0; i < tempArray.size(); i++)\
    \ {\n            sorted.add(tempArray.get(i));\n        }\n        for (int i\
    \ = 0; i < tempArray2.size(); i++) {\n            sorted.add(tempArray2.get(i));\n\
    \        }\n        return sorted;", "        ArrayList<Long> s = new ArrayList<Long>();\n\
    \        for (int i = 0; i < nums.size(); i++){\n            long counter = 0;\n\
    \            for (char c : Long.toString(nums.get(i)).toCharArray()){\n      \
    \          counter += Character.getNumericValue(c);\n            }\n         \
    \   s.add(counter);\n        }\n        ArrayList<Long> s2 = new ArrayList<Long>();\n\
    \        for (int i = 0; i < nums.size(); i++){\n            long counter = 0;\n\
    \            for (char c : Long.toString(nums.get(i)).toCharArray()){\n      \
    \          counter += Character.getNumericValue(c);\n            }\n         \
    \   s2.add(counter);\n        }\n        Collections.sort(s);\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        for (long l : s){\n            for (int\
    \ i = 0; i < s2.size(); i++){\n                if (l == s2.get(i)){\n        \
    \            res.add(nums.get(i));\n                    s2.set(i, (long)-1);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return res;", "        // You may use the functions toList(), toArray()\
    \ and toArrayList()\n        // of the ArrayList class.\n        // You may create\
    \ your own ArrayList class.\n        ArrayList<Long> order = new ArrayList<Long>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int val = nums.get(i).intValue();\n\
    \            int sum = 0;\n            while (val != 0) {\n                sum\
    \ += val % 10;\n                val /= 10;\n            }\n            order.add((long)sum);\n\
    \        }\n        for (int i = 0; i < nums.size(); i++) {\n            for (int\
    \ j = i; j < nums.size(); j++) {\n                if (order.get(i) > order.get(j))\
    \ {\n                    long temp1 = order.get(i);\n                    long\
    \ temp2 = nums.get(i);\n                    order.set(i, order.get(j));\n    \
    \                nums.set(i, nums.get(j));\n                    order.set(j, temp1);\n\
    \                    nums.set(j, temp2);\n                }\n            }\n \
    \       }\n        return nums;", "        // YOUR CODE HERE\n        return nums;",
  '        return nums;', "        // Write your code here\n        // Please return\
    \ the result in a list\n        int idx = 0;\n        HashMap<Integer, Integer>\
    \ orderMap = new HashMap<Integer, Integer>();\n        HashMap<Integer, Long>\
    \ scoreMap = new HashMap<Integer, Long>();\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        for (Long n : nums) {\n            Integer sum =\
    \ 0;\n            String numStr = String.valueOf(n);\n            for (Character\
    \ c : numStr.toCharArray()) {\n                sum += Integer.parseInt(c.toString());\n\
    \            }\n            orderMap.put(idx, sum);\n            scoreMap.put(idx,\
    \ n);\n            idx++;\n        }\n        List<Map.Entry<Integer, Integer>>\
    \ sortedOrderMap = orderMap.entrySet().stream()\n            .sorted(Comparator.comparing(Map.Entry::getValue)).collect(Collectors.toList());\n\
    \        for (Map.Entry<Integer, Integer> e : sortedOrderMap) {\n            result.add(scoreMap.get(e.getKey()));\n\
    \        }\n        return result;", '        return nums;', "        // Add code\
    \ here\n        return nums;", '        return nums;', "        if (nums.size()\
    \ == 0) {\n            return nums;\n        }\n        class Pair {\n       \
    \     public int first;\n            public int second;\n            public Pair(int\
    \ first, int second) {\n                this.first = first;\n                this.second\
    \ = second;\n            }\n        }\n        ArrayList<Pair> pairs = new ArrayList<Pair>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            long x = nums.get(i);\n\
    \            long sum = 0;\n            if (x < 0) {\n                x = -x;\n\
    \            }\n            while (x > 0) {\n                sum += x % 10;\n\
    \                x /= 10;\n            }\n            pairs.add(new Pair((int)sum,\
    \ i));\n        }\n        Collections.sort(pairs, new Comparator<Pair>() {\n\
    \            @Override\n            public int compare(Pair p1, Pair p2) {\n \
    \               if (p1.first != p2.first) {\n                    return p1.first\
    \ - p2.first;\n                }\n                return p1.second - p2.second;\n\
    \            }\n        });\n        ArrayList<Long> ans = new ArrayList<Long>();\n\
    \        for (int i = 0; i < pairs.size(); i++) {\n            ans.add(nums.get(pairs.get(i).second));\n\
    \        }\n        return ans;", '        return new ArrayList<Long>();', " \
    \       // Your code here\n        ArrayList<Pair<Long,Long>> num_ind = new ArrayList<Pair<Long,Long>>();\n\
    \        for(int i = 0; i < nums.size(); ++i)\n            num_ind.add(new Pair<Long,Long>(nums.get(i),\
    \ (long)i));\n        Collections.sort(num_ind, (a, b) -> {\n            long\
    \ sum1 = a.getValue0().toString().chars().map(x -> x - '0').sum();\n         \
    \   long sum2 = b.getValue0().toString().chars().map(x -> x - '0').sum();\n  \
    \          if(sum1 != sum2)\n                return (int)(sum1 - sum2);\n    \
    \        return (int)(a.getValue1() - b.getValue1());\n        });\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        for(int i = 0; i < num_ind.size(); ++i)\n\
    \            res.add(num_ind.get(i).getValue0());\n        return res;", '        return
    new ArrayList<Long>();', '        return nums;', "        // write your code here\n\
    \        return nums;", "        Map<Long, List<Long>> map = new HashMap<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            long key = 0;\n\
    \            long n = nums.get(i);\n            while (n != 0) {\n           \
    \     key += n % 10;\n                n /= 10;\n            }\n            if\
    \ (!map.containsKey(key)) {\n                map.put(key, new ArrayList<>());\n\
    \            }\n            map.get(key).add(nums.get(i));\n        }\n      \
    \  ArrayList<Long> result = new ArrayList<>();\n        List<Long> keys = new\
    \ ArrayList<>(map.keySet());\n        Collections.sort(keys);\n        for (long\
    \ key : keys) {\n            for (long val : map.get(key)) {\n               \
    \ result.add(val);\n            }\n        }\n        return result;", '        throw
    new UnsupportedOperationException("Function orderByPoints has not been implemented
    yet.");', '        // your code here', "        // Add code here\n        return\
    \ nums;", '        return new ArrayList<Long>();', '        return nums;', '        return
    nums;', '        return new ArrayList<Long>();', "    }\n}", "        Collections.sort(nums,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ x, Long y) {\n                int sx = 0;\n                int sy = 0;\n   \
    \             for (int i = 0; i < x.toString().length(); i++) {\n            \
    \        sx += Integer.parseInt(x.toString().substring(i, i + 1));\n         \
    \       }\n                for (int i = 0; i < y.toString().length(); i++) {\n\
    \                    sy += Integer.parseInt(y.toString().substring(i, i + 1));\n\
    \                }\n                return sx - sy;\n            }\n        });\n\
    \        return nums;", '        return null;', '        return nums;', "    \
    \    // Write your code here.\n        return null;", '        throw new UnsupportedOperationException("Problem
    not solved yet.");', "        // Hint: you can also use helper function outside\
    \ orderByPoints\n        if (nums.size() <= 1) {\n            return nums;\n \
    \       }\n        ArrayList<Long> left = new ArrayList<Long>();\n        ArrayList<Long>\
    \ right = new ArrayList<Long>();\n        for (int i = 1; i < nums.size(); i++)\
    \ {\n            if (sumDigits(nums.get(i)) <= sumDigits(nums.get(0))) {\n   \
    \             left.add(nums.get(i));\n            } else {\n                right.add(nums.get(i));\n\
    \            }\n        }\n        ArrayList<Long> sortedLeft = orderByPoints(left);\n\
    \        ArrayList<Long> sortedRight = orderByPoints(right);\n        sortedLeft.add(nums.get(0));\n\
    \        sortedLeft.addAll(sortedRight);\n        return sortedLeft;", '        return
    nums;', '        return null;', "        ArrayList<Pair<Long, Long>> n = new ArrayList<Pair<Long,\
    \ Long>>();\n        for (int i = 0; i < nums.size(); i++) {\n            long\
    \ cur = nums.get(i);\n            long sum = 0;\n            while (cur != 0)\
    \ {\n                sum += cur % 10;\n                cur /= 10;\n          \
    \  }\n            n.add(new Pair<Long, Long>(i, sum));\n        }\n        Collections.sort(n,\
    \ new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long,\
    \ Long> o1, Pair<Long, Long> o2) {\n                if (o1.getValue1().equals(o2.getValue1()))\
    \ {\n                    return o1.getValue0().compareTo(o2.getValue0());\n  \
    \              }\n                return o1.getValue1().compareTo(o2.getValue1());\n\
    \            }\n        });\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < n.size(); i++) {\n            result.add(nums.get(n.get(i).getValue0().intValue()));\n\
    \        }\n        return result;", "        // Define a data structure to store\
    \ the elements in the array list with the sum of their digits.\n        ArrayList<Pair<Long,\
    \ Integer>> dig = new ArrayList<Pair<Long, Integer>>();\n        // iterate over\
    \ the array list\n        for (int i = 0; i < nums.size(); i++) {\n          \
    \  Long n = nums.get(i);\n            int s = 0;\n            // add the sum of\
    \ digits of each element to the data structure\n            for (int j = 0; j\
    \ < n.toString().length(); j++) {\n                s += Integer.parseInt(n.toString().substring(j,\
    \ j + 1));\n            }\n            dig.add(new Pair<Long, Integer>(n, s));\n\
    \        }\n        // sort the data structure in ascending order of the digit\
    \ sum\n        Collections.sort(dig, new Comparator<Pair<Long, Integer>>() {\n\
    \            public int compare(Pair<Long, Integer> p1, Pair<Long, Integer> p2)\
    \ {\n                return Integer.compare(p1.getValue1(), p2.getValue1());\n\
    \            }\n        });\n        // put the elements from the data structure\
    \ into a new array list in ascending order\n        ArrayList<Long> sorted = new\
    \ ArrayList<Long>();\n        for (int i = 0; i < dig.size(); i++) {\n       \
    \     sorted.add(dig.get(i).getValue0());\n        }\n        return sorted;",
  "        // WRITE YOUR CODE HERE\n        ArrayList<Long> orderByPoints = new ArrayList<Long>();\n\
    \        orderByPoints.addAll(nums);\n        Collections.sort(orderByPoints,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ o1, Long o2) {\n                Long value1 = o1;\n                Long value2\
    \ = o2;\n                if (sumDigits(value1) != sumDigits(value2)) {\n     \
    \               return sumDigits(value1).compareTo(sumDigits(value2));\n     \
    \           } else {\n                    return nums.indexOf(value1).compareTo(nums.indexOf(value2));\n\
    \                }\n            }\n        });\n        return orderByPoints;",
  '        return nums;', "        for (int i = 0; i < nums.size(); i++) {\n     \
    \       for (int j = i + 1; j < nums.size(); j++) {\n                if (getSumOfDigits(nums.get(i))\
    \ > getSumOfDigits(nums.get(j))) {\n                    Collections.swap(nums,\
    \ i, j);\n                }\n            }\n        }\n        return nums;",
  "        ArrayList<Long> res = new ArrayList<Long>();\n        ArrayList<Long> res2\
    \ = new ArrayList<Long>();\n        Map<Long, Long> map = new HashMap<Long, Long>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            long sum = 0;\n\
    \            long el = nums.get(i);\n            while (el != 0) {\n         \
    \       sum += el % 10;\n                el /= 10;\n            }\n          \
    \  map.put(nums.get(i), sum);\n        }\n        Collections.sort(nums, new Comparator<Long>()\
    \ {\n            public int compare(Long i1, Long i2) {\n                if (map.get(i1)\
    \ < map.get(i2)) {\n                    return -1;\n                } else if\
    \ (map.get(i1) > map.get(i2)) {\n                    return 1;\n             \
    \   } else {\n                    if (nums.indexOf(i1) < nums.indexOf(i2)) {\n\
    \                        return -1;\n                    } else {\n          \
    \              return 1;\n                    }\n                }\n         \
    \   }\n        });\n        for (int i = 0; i < nums.size(); i++) {\n        \
    \    res.add(nums.get(i));\n        }\n        for (int i = nums.size() - 1; i\
    \ >= 0; i--) {\n            res2.add(nums.get(i));\n        }\n        return\
    \ res;", "        TreeMap<Integer, ArrayList<Long>> map = new TreeMap<>();\n \
    \       nums.forEach(num -> {\n            int count = 0;\n            for (;\
    \ num != 0; num /= 10)\n                count += num % 10;\n            if (!map.containsKey(count))\n\
    \                map.put(count, new ArrayList<>());\n            map.get(count).add(num);\n\
    \        });\n        nums.clear();\n        map.forEach((key, value) -> nums.addAll(value));\n\
    \        return nums;", "        ArrayList<Pair<Long,Long>> nums_and_sums = new\
    \ ArrayList<Pair<Long,Long>>();\n        for (int i = 0; i < nums.size(); i++)\
    \ {\n            long sum = 0;\n            long number = nums.get(i);\n     \
    \       while (number != 0) {\n                sum += number % 10;\n         \
    \       number /= 10;\n            }\n            nums_and_sums.add(new Pair<Long,Long>(nums.get(i),\
    \ sum));\n        }\n        nums_and_sums.sort((a, b) -> a.getValue1().compareTo(b.getValue1()));\n\
    \        ArrayList<Long> sorted_nums = new ArrayList<Long>();\n        for (int\
    \ i = 0; i < nums_and_sums.size(); i++) {\n            sorted_nums.add(nums_and_sums.get(i).getValue0());\n\
    \        }\n        return sorted_nums;", "        // REPLACE THIS CODE WITH YOUR\
    \ IMPLEMENTATION\n        // return null;\n        Collections.sort(nums, new\
    \ Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ arg0, Long arg1) {\n                String[] arg0_s = String.valueOf(arg0).split(\"\
    \");\n                int sum_arg0 = 0;\n                for (String i : arg0_s)\
    \ {\n                    sum_arg0 += Integer.parseInt(i);\n                }\n\
    \                String[] arg1_s = String.valueOf(arg1).split(\"\");\n       \
    \         int sum_arg1 = 0;\n                for (String i : arg1_s) {\n     \
    \               sum_arg1 += Integer.parseInt(i);\n                }\n        \
    \        if (sum_arg0 != sum_arg1) {\n                    return sum_arg0 - sum_arg1;\n\
    \                } else {\n                    return nums.indexOf(arg0) - nums.indexOf(arg1);\n\
    \                }\n            }\n        });\n        return nums;", '        return
    null;', "        ArrayList<Long> res = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp = new ArrayList<Long>();\n        int rem = 0;\n        long num = 0;\n\
    \        long sum = 0;\n        int len = nums.size();\n        int position =\
    \ 0;\n        int flag = 0;\n        if(len == 0)\n            return res;\n \
    \       //  return nums;\n        for(int i = 0; i < len; i++)\n        {\n  \
    \          num = nums.get(i);\n            if(num < 0)\n                num =\
    \ num * -1;\n            while(num != 0)\n            {\n                rem =\
    \ (int)num % 10;\n                sum = sum + rem;\n                num = num\
    \ / 10;\n            }\n            temp.add(sum);\n            sum = 0;\n   \
    \     }\n        for(int i = 0; i < len; i++)\n        {\n            long min\
    \ = temp.get(i);\n            for(int j = i + 1; j < len; j++)\n            {\n\
    \                if(min > temp.get(j))\n                {\n                  \
    \  min = temp.get(j);\n                    position = j;\n                   \
    \ flag = 1;\n                }\n            }\n            if(flag == 1)\n   \
    \         {\n                long temp1 = temp.get(i);\n                temp.set(i,\
    \ min);\n                temp.set(position, temp1);\n                long temp2\
    \ = nums.get(i);\n                nums.set(i, nums.get(position));\n         \
    \       nums.set(position, temp2);\n            }\n            flag = 0;\n   \
    \     }\n        return nums;", "        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        TreeMap<Integer, ArrayList<Long>> map = new TreeMap<Integer, ArrayList<Long>>();\n\
    \        int[] weights = new int[nums.size()];\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            weights[i] = nums.get(i).intValue();\n            if (weights[i]\
    \ < 0) {\n                weights[i] = -weights[i];\n            }\n         \
    \   int tmp = weights[i];\n            int weight = 0;\n            while (tmp\
    \ > 0) {\n                weight += tmp % 10;\n                tmp /= 10;\n  \
    \          }\n            ArrayList<Long> list = map.get(weight);\n          \
    \  if (list == null) {\n                list = new ArrayList<Long>();\n      \
    \      }\n            list.add(nums.get(i));\n            map.put(weight, list);\n\
    \        }\n        for (Map.Entry<Integer, ArrayList<Long>> entry : map.entrySet())\
    \ {\n            for (Long num : entry.getValue()) {\n                res.add(num);\n\
    \            }\n        }\n        return res;", "        // TODO: Write - Your\
    \ - Code\n        int[] digitSum = new int[nums.size()];\n        int index =\
    \ 0;\n        for (Long num : nums) {\n            int sum = 0;\n            while\
    \ (num != 0) {\n                sum += num % 10;\n                num /= 10;\n\
    \            }\n            digitSum[index++] = sum;\n        }\n        System.out.println(Arrays.toString(digitSum));\n\
    \        int[] indices = new int[nums.size()];\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            indices[i] = i;\n        }\n        for (int i = 0; i <\
    \ nums.size(); i++) {\n            for (int j = i + 1; j < nums.size(); j++) {\n\
    \                if (digitSum[i] > digitSum[j]) {\n                    swap(digitSum,\
    \ i, j);\n                    swap(indices, i, j);\n                }\n      \
    \      }\n        }\n        System.out.println(Arrays.toString(digitSum));\n\
    \        System.out.println(Arrays.toString(indices));\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n\
    \            result.add(nums.get(indices[i]));\n        }\n        return result;",
  '        return nums;', "        // IMPLEMENT\n        return null;", "        Collections.sort(nums,\
    \ (i, j) -> {\n            long sumI = sumDigits(i);\n            long sumJ =\
    \ sumDigits(j);\n            return sumI == sumJ ? nums.indexOf(i) - nums.indexOf(j)\
    \ : Long.compare(sumI, sumJ);\n        });\n        return nums;", "        //\
    \ your code here\n        return nums;", '        return null;', "        // Write\
    \ your code here\n        return nums;", "        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        Integer max = new Integer(0);\n        HashMap<Integer,\
    \ ArrayList<Long>> number_of_digits = new HashMap<Integer, ArrayList<Long>>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            long num = nums.get(i);\n\
    \            int sum = 0;\n            while (num != 0) {\n                sum\
    \ += num % 10;\n                num /= 10;\n            }\n            max = Math.max(max,\
    \ sum);\n            ArrayList<Long> list = number_of_digits.get(sum);\n     \
    \       if (list == null) {\n                list = new ArrayList<Long>();\n \
    \           }\n            list.add(nums.get(i));\n            number_of_digits.put(sum,\
    \ list);\n        }\n        for (int i = 0; i <= max; i++) {\n            ArrayList<Long>\
    \ list = number_of_digits.get(i);\n            if (list != null) {\n         \
    \       result.addAll(list);\n            }\n        }\n        return result;",
  "        // Make a list of tuples containing (sum of digits, index, original number)\n\
    \        ArrayList<Pair<Long, Pair<Integer, Long>>> sums = new ArrayList<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            long sum = sumDigits(nums.get(i));\n\
    \            Pair<Long, Pair<Integer, Long>> item = new Pair<>(sum, new Pair<>(i,\
    \ nums.get(i)));\n            sums.add(item);\n        }\n        // Sort by first\
    \ tuple item in ascending order\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n\
    \        // Sort by second tuple item in ascending order\n        sums.sort((a,\
    \ b) -> a.getValue1().getValue0().compareTo(b.getValue1().getValue0()));\n   \
    \     // Put all the numbers in ascending order\n        ArrayList<Long> out =\
    \ new ArrayList<>();\n        for (Pair<Long, Pair<Integer, Long>> sum : sums)\
    \ {\n            out.add(sum.getValue1().getValue1());\n        }\n        return\
    \ out;", "        HashMap<Long, ArrayList<Long>> store = new HashMap<Long, ArrayList<Long>>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            long number = nums.get(i);\n\
    \            long digitsSum = getDigitsSum(number);\n            if (store.containsKey(digitsSum))\
    \ {\n                store.get(digitsSum).add(number);\n            } else {\n\
    \                ArrayList<Long> list = new ArrayList<Long>();\n             \
    \   list.add(number);\n                store.put(digitsSum, list);\n         \
    \   }\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n  \
    \      Long[] keys = store.keySet().toArray(new Long[store.size()]);\n       \
    \ Arrays.sort(keys);\n        for (int i = 0; i < keys.length; i++) {\n      \
    \      ArrayList<Long> list = store.get(keys[i]);\n            for (int j = 0;\
    \ j < list.size(); j++) {\n                result.add(list.get(j));\n        \
    \    }\n        }\n        return result;", "        List<Pair<Long, Integer>>\
    \ pairs = IntStream.range(0, nums.size())\n                                .mapToObj(i\
    \ -> Pair.with(nums.get(i),\n                                nums.get(i).toString().chars().map(c\
    \ -> Character.getNumericValue(c)).sum()))\n                                .sorted((o1,\
    \ o2) -> {\n                                    if (o1.getValue1() == o2.getValue1())\n\
    \                                        return o1.getValue0().compareTo(o2.getValue0());\n\
    \                                    return o1.getValue1().compareTo(o2.getValue1());\n\
    \                                })\n                                .collect(Collectors.toList());\n\
    \        ArrayList<Long> res = new ArrayList<Long>();\n        for (Pair<Long,\
    \ Integer> p : pairs)\n            res.add(p.getValue0());\n        return res;",
  "        // Your code here\n        return nums;", "        //TODO: implement your\
    \ code here\n        return nums;", '        return new ArrayList<Long>();', '        return
    null;', "        Collections.sort(nums, new Comparator<Long>() {\n           \
    \ @Override\n            public int compare(Long a, Long b) {\n              \
    \  if (getDigitSum(a) == getDigitSum(b)) {\n                    return nums.indexOf(a)\
    \ - nums.indexOf(b);\n                }\n                return getDigitSum(a)\
    \ - getDigitSum(b);\n            }\n        });\n        return nums;", '        return
    nums;', "        ArrayList<Long> ans = new ArrayList<Long>();\n        if (nums.size()\
    \ > 0) {\n            Long[] arr = new Long[nums.size()];\n            for (int\
    \ i = 0; i < nums.size(); i++) {\n                arr[i] = nums.get(i);\n    \
    \        }\n            Arrays.sort(arr, new Comparator<Long>() {\n          \
    \      public int compare(Long a, Long b) {\n                    int c = 0;\n\
    \                    if (a < 0 && b > 0) {\n                        c = -1;\n\
    \                    } else if (a > 0 && b < 0) {\n                        c =\
    \ 1;\n                    } else {\n                        int d1 = sumDigits(a);\n\
    \                        int d2 = sumDigits(b);\n                        if (d1\
    \ > d2) {\n                            c = 1;\n                        } else\
    \ if (d1 < d2) {\n                            c = -1;\n                      \
    \  } else {\n                            int i1 = nums.indexOf(a);\n         \
    \                   int i2 = nums.indexOf(b);\n                            if\
    \ (i1 > i2) {\n                                c = 1;\n                      \
    \      } else if (i1 < i2) {\n                                c = -1;\n      \
    \                      }\n                        }\n                    }\n \
    \                   return c;\n                }\n            });\n          \
    \  for (int i = 0; i < arr.length; i++) {\n                ans.add(arr[i]);\n\
    \            }\n        }\n        return ans;", "        // Write your code here\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            for (int j = 0;\
    \ j < nums.size() - 1; j++) {\n                long sumDigits1 = sumDigits(nums.get(j));\n\
    \                long sumDigits2 = sumDigits(nums.get(j + 1));\n             \
    \   if (sumDigits1 > sumDigits2) {\n                    Collections.swap(nums,\
    \ j, j + 1);\n                }\n            }\n        }\n        return nums;",
  "        // find the number of digits in the number with largest abs value\n   \
    \     int max_abs_num_digits = 1;\n        for (long num : nums) {\n         \
    \   max_abs_num_digits = Math.max(max_abs_num_digits, (int) Math.log10(Math.abs(num))\
    \ + 1);\n        }\n        // create buckets for each digit (0-9)\n        ArrayList<ArrayList<Pair<Long,\
    \ Integer>>> buckets = new ArrayList<ArrayList<Pair<Long, Integer>>>();\n    \
    \    for (int i = 0; i < 10; i++) {\n            buckets.add(new ArrayList<Pair<Long,\
    \ Integer>>());\n        }\n        // put the numbers into their respective buckets\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            long num = nums.get(i);\n\
    \            int num_digits = (int) Math.log10(Math.abs(num)) + 1;\n         \
    \   int num_zeros = max_abs_num_digits - num_digits;\n            long digit =\
    \ Math.abs(num) % 10;\n            int bucket_index = (int) digit;\n         \
    \   buckets.get(bucket_index).add(new Pair<Long, Integer>(num, i));\n        \
    \    num_zeros--;\n            num /= 10;\n            while (num != 0) {\n  \
    \              bucket_index = bucket_index * 10 + (int) (num % 10);\n        \
    \        buckets.get(bucket_index).add(new Pair<Long, Integer>(num, i));\n   \
    \             num_zeros--;\n                num /= 10;\n            }\n      \
    \      while (num_zeros > 0) {\n                bucket_index = bucket_index *\
    \ 10;\n                buckets.get(bucket_index).add(new Pair<Long, Integer>(num,\
    \ i));\n                num_zeros--;\n            }\n        }\n        // sort\
    \ buckets\n        for (ArrayList<Pair<Long, Integer>> bucket : buckets) {\n \
    \           bucket.sort(new Comparator<Pair<Long, Integer>>() {\n            \
    \    @Override\n                public int compare(Pair<Long, Integer>", '        return
    nums;', "        ArrayList<Long> res = new ArrayList<Long>();\n        for (Long\
    \ num : nums) {\n            if (num == null) continue;\n            res.add(num);\n\
    \        }\n        Collections.sort(res, (a, b) -> {\n            long suma =\
    \ sumOfDigits(a);\n            long sumb = sumOfDigits(b);\n            if (suma\
    \ < sumb) return -1;\n            if (suma > sumb) return 1;\n            int\
    \ i = nums.indexOf(a);\n            int j = nums.indexOf(b);\n            if (i\
    \ < j) return -1;\n            if (i > j) return 1;\n            return 0;\n \
    \       });\n        return res;", "        // Do not alter this list\n      \
    \  ArrayList<Long> orderedNums = nums;\n        // Write your solution below\n\
    \        Collections.sort(orderedNums, new Comparator<Long>() {\n            @Override\n\
    \            public int compare(Long x, Long y) {\n                Integer sum1\
    \ = 0;\n                Integer sum2 = 0;\n                Integer rem = 0;\n\
    \                while (x > 0) {\n                    rem = (int) (x % 10);\n\
    \                    sum1 += rem;\n                    x = x / 10;\n         \
    \       }\n                while (y > 0) {\n                    rem = (int) (y\
    \ % 10);\n                    sum2 += rem;\n                    y = y / 10;\n\
    \                }\n                if (sum1.equals(sum2)) {\n               \
    \     return nums.indexOf(x) - nums.indexOf(y);\n                }\n         \
    \       return sum1 - sum2;\n            }\n        });\n        return orderedNums;",
  "        // PLACE YOUR CODE HERE\n        return nums;", '        return nums;',
  "        // Write your code here\n        // You can add a new import, for example:\n\
    \        // import java.util.*;", "        // YOUR CODE HERE\n        nums.sort((Long\
    \ x, Long y) -> {\n            long rx = 0;\n            long ry = 0;\n      \
    \      long xm = x;\n            long ym = y;\n            while (xm != 0) {\n\
    \                rx += xm % 10;\n                xm /= 10;\n            }\n  \
    \          while (ym != 0) {\n                ry += ym % 10;\n               \
    \ ym /= 10;\n            }\n            return Long.compare(rx, ry);\n       \
    \ });\n        return nums;", "        ArrayList<Long> nums2 = new ArrayList<Long>();\n\
    \        ArrayList<Long> nums3 = new ArrayList<Long>();\n        for (Long a:\
    \ nums) {\n            Long b = Math.abs(a);\n            Long c = 0l;\n     \
    \       while (b > 0) {\n                c += b % 10;\n                b /= 10;\n\
    \            }\n            if (a >= 0) {\n                nums2.add(c);\n   \
    \         } else {\n                nums2.add(-c);\n            }\n          \
    \  nums3.add(a);\n        }\n        for (int i = 0; i < nums2.size(); i++) {\n\
    \            for (int j = i + 1; j < nums2.size(); j++) {\n                if\
    \ (nums2.get(i) > nums2.get(j)) {\n                    Collections.swap(nums2,\
    \ i, j);\n                    Collections.swap(nums3, i, j);\n               \
    \ }\n            }\n        }\n        return nums3;", '        // Your code here',
  "        // Write your code here\n        return null;", '        return null;',
  '        return null;', '        return null;', '        return null;', '        return
    nums;', '        throw new UnsupportedOperationException("Delete this line and
    write your own implementation.");', "        if (nums.size() == 0) {\n       \
    \     return nums;\n        }\n        int[] counts = new int[nums.size()];\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            counts[i] = sumOfDigits(nums.get(i));\n\
    \        }\n        List<Triplet<Integer, Integer, Long>> withIndices = new ArrayList<>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            withIndices.add(new\
    \ Triplet<>(counts[i], i, nums.get(i)));\n        }\n        Collections.sort(withIndices,\
    \ (Triplet<Integer, Integer, Long> a, Triplet<Integer, Integer, Long> b) -> {\n\
    \            if (a.getValue0().equals(b.getValue0())) {\n                return\
    \ Integer.compare(a.getValue1(), b.getValue1());\n            }\n            return\
    \ Integer.compare(a.getValue0(), b.getValue0());\n        });\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        for (Triplet<Integer, Integer, Long> el :\
    \ withIndices) {\n            res.add(el.getValue2());\n        }\n        return\
    \ res;", "        // Write your code here\n        int[] points = new int[nums.size()];\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            long n = nums.get(i);\n\
    \            long m = n;\n            if (n < 0) {\n                m = -n;\n\
    \            }\n            int s = 0;\n            while (m > 0) {\n        \
    \        s += m % 10;\n                m /= 10;\n            }\n            points[i]\
    \ = s;\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       for (int i = 0; i < nums.size(); i++) {\n            int j = 0;\n    \
    \        while (j < nums.size() && points[j] != i) {\n                j++;\n \
    \           }\n            result.add(nums.get(j));\n        }\n        return\
    \ result;", '        return null;', '        return nums;', "        // TODO:\
    \ your code here\n        return nums;", "        // Build a map of sum points\
    \ to list of numbers.\n        HashMap<Long, ArrayList<Long>> map = new HashMap<Long,\
    \ ArrayList<Long>>();\n        for (Long num : nums) {\n            Long points\
    \ = sumOfDigits(num);\n            if (!map.containsKey(points)) {\n         \
    \       map.put(points, new ArrayList<Long>());\n            }\n            map.get(points).add(num);\n\
    \        }\n        // Now sort the keys and append in-order.\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        ArrayList<Long> keys = new ArrayList<Long>(map.keySet());\n\
    \        Collections.sort(keys);\n        for (Long key : keys) {\n          \
    \  for (Long num : map.get(key)) {\n                result.add(num);\n       \
    \     }\n        }\n        return result;", '        return nums;', '        return
    null;', '        return null;', '        return nums;', "        // Write your\
    \ code here.\n        return nums;", "        if (nums.size() == 0) {\n      \
    \      return nums;\n        }\n        ArrayList<Long> sums = new ArrayList<Long>();\n\
    \        ArrayList<Long> positions = new ArrayList<Long>();\n        for (int\
    \ i = 0; i < nums.size(); i++) {\n            String s = String.valueOf(nums.get(i));\n\
    \            long n = 0;\n            for (int j = 0; j < s.length(); j++) {\n\
    \                n += (long)Integer.parseInt(s.substring(j, j + 1));\n       \
    \     }\n            sums.add(n);\n            positions.add((long)i);\n     \
    \   }\n        for (int i = 0; i < sums.size(); i++) {\n            for (int j\
    \ = i + 1; j < sums.size(); j++) {\n                if (sums.get(i) > sums.get(j))\
    \ {\n                    long sum = sums.get(i);\n                    long position\
    \ = positions.get(i);\n                    sums.set(i, sums.get(j));\n       \
    \             positions.set(i, positions.get(j));\n                    sums.set(j,\
    \ sum);\n                    positions.set(j, position);\n                }\n\
    \            }\n        }\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        for (int i = 0; i < positions.size(); i++) {\n            res.add(nums.get((int)positions.get(i).longValue()));\n\
    \        }\n        return res;", "        Collections.sort(nums, new Comparator<Long>()\
    \ {\n            @Override\n            public int compare(Long n1, Long n2) {\n\
    \                String s1 = String.valueOf(n1);\n                String s2 =\
    \ String.valueOf(n2);\n                int sum1 = 0;\n                int sum2\
    \ = 0;\n                for (int i = 0; i < s1.length(); i++) {\n            \
    \        sum1 += s1.charAt(i) - '0';\n                }\n                for (int\
    \ i = 0; i < s2.length(); i++) {\n                    sum2 += s2.charAt(i) - '0';\n\
    \                }\n                if (sum1 < sum2) {\n                    return\
    \ -1;\n                } else if (sum1 > sum2) {\n                    return 1;\n\
    \                } else {\n                    return 0;\n                }\n\
    \            }\n        });\n        return nums;", "        Collections.sort(nums,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ n1, Long n2) {\n                int sum1 = 0;\n                int sum2 = 0;\n\
    \                while (n1 > 0) {\n                    sum1 += n1 % 10;\n    \
    \                n1 /= 10;\n                }\n                while (n2 > 0)\
    \ {\n                    sum2 += n2 % 10;\n                    n2 /= 10;\n   \
    \             }\n                return sum1 - sum2;\n            }\n        });\n\
    \        return nums;", "        //todo\n        return null;", "        // Please\
    \ write your solution after this line.\n        return null;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        ArrayList<Pair<Long, Long>> pairs =\
    \ new ArrayList<Pair<Long, Long>>();\n        ArrayList<Long> temp = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp2 = new ArrayList<Long>();\n        Long x = 0l;\n\
    \        Long r = 0l;\n        for (Long i : nums) {\n            x = i;\n   \
    \         r = 0l;\n            while (x != 0) {\n                r += x % 10;\n\
    \                x /= 10;\n            }\n            temp.add(r);\n         \
    \   temp2.add(i);\n        }\n        for (int i = 0; i < temp.size(); i++) {\n\
    \            pairs.add(new Pair<Long, Long>(temp.get(i), temp2.get(i)));\n   \
    \     }\n        Collections.sort(pairs, new Comparator<Pair<Long, Long>>() {\n\
    \            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n  \
    \              if (a.getValue0().equals(b.getValue0())) {\n                  \
    \  return a.getValue1().compareTo(b.getValue1());\n                }\n       \
    \         return a.getValue0().compareTo(b.getValue0());\n            }\n    \
    \    });\n        for (Pair<Long, Long> p : pairs) {\n            result.add(p.getValue1());\n\
    \        }\n        return result;", "        if (nums.size() > 1) {\n       \
    \     for (int i = 0; i < nums.size() - 1; i++) {\n                for (int j\
    \ = i + 1; j < nums.size(); j++) {\n                    Long ii = nums.get(i);\n\
    \                    Long jj = nums.get(j);\n                    Long iiSum =\
    \ 0l;\n                    Long jjSum = 0l;\n                    while (ii !=\
    \ 0) {\n                        iiSum += ii % 10;\n                        ii\
    \ /= 10;\n                    }\n                    while (jj != 0) {\n     \
    \                   jjSum += jj % 10;\n                        jj /= 10;\n   \
    \                 }\n                    if (iiSum > jjSum) {\n              \
    \          Long temp = nums.get(i);\n                        nums.set(i, nums.get(j));\n\
    \                        nums.set(j, temp);\n                    }\n         \
    \       }\n            }\n        }\n        return nums;", '        return nums;',
  "        ArrayList<Long> result = new ArrayList<Long>();\n        List<Pair<Long,\
    \ Long>> list = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i\
    \ < nums.size(); i++) {\n            Long index = new Long(i);\n            Long\
    \ sum = new Long(0);\n            Long num = nums.get(i);\n            while (num\
    \ != 0) {\n                sum += num % 10;\n                num /= 10;\n    \
    \        }\n            list.add(new Pair<Long, Long>(sum, index));\n        }\n\
    \        Collections.sort(list, new Comparator<Pair<Long, Long>>() {\n       \
    \     @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long,\
    \ Long> p2) {\n                if (p1.getValue0().compareTo(p2.getValue0()) ==\
    \ 0) {\n                    return p1.getValue1().compareTo(p2.getValue1());\n\
    \                }\n                return p1.getValue0().compareTo(p2.getValue0());\n\
    \            }\n        });\n        for (int i = 0; i < list.size(); i++) {\n\
    \            result.add(nums.get(list.get(i).getValue1().intValue()));\n     \
    \   }\n        return result;", "        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        ArrayList<Pair<Long, Integer>> sums = new ArrayList<Pair<Long, Integer>>();\n\
    \        // TODO: write your code here\n        long sum = 0;\n        for (int\
    \ i = 0; i < nums.size(); i++) {\n            sum = 0;\n            int temp =\
    \ nums.get(i).intValue();\n            while (temp > 0) {\n                sum\
    \ += temp % 10;\n                temp /= 10;\n            }\n            sums.add(new\
    \ Pair<Long, Integer>(sum, i));\n        }\n        Collections.sort(sums, new\
    \ Comparator<Pair<Long, Integer>>() {\n            @Override\n            public\
    \ int compare(Pair<Long, Integer> p1, Pair<Long, Integer> p2) {\n            \
    \    if (p1.getValue0() != p2.getValue0()) {\n                    return p1.getValue0().compareTo(p2.getValue0());\n\
    \                } else {\n                    return p1.getValue1().compareTo(p2.getValue1());\n\
    \                }\n            }\n        });\n        for (int i = 0; i < sums.size();\
    \ i++) {\n            res.add(nums.get(sums.get(i).getValue1()));\n        }\n\
    \        return res;", "        // your code goes here\n        return null;",
  "        if (nums.size() == 0) {\n            return new ArrayList<Long>();\n  \
    \      }\n        for (int i = 0; i < nums.size(); i++) {\n            for (int\
    \ j = i + 1; j < nums.size(); j++) {\n                if (getDigitSum(nums.get(i))\
    \ > getDigitSum(nums.get(j))) {\n                    Long temp = nums.get(i);\n\
    \                    nums.set(i, nums.get(j));\n                    nums.set(j,\
    \ temp);\n                }\n            }\n        }\n        return nums;",
  "        /* >>>>><<<<< */\n        TreeMap<Long, ArrayList<Long>> table = new TreeMap<>();\n\
    \        for (Long item : nums) {\n            Long key = sumDigits(item);\n \
    \           if (!table.containsKey(key)) {\n                table.put(key, new\
    \ ArrayList<Long>());\n            }\n            table.get(key).add(item);\n\
    \        }\n        ArrayList<Long> res = new ArrayList<>();\n        for (Map.Entry<Long,\
    \ ArrayList<Long>> entry : table.entrySet()) {\n            for (Long item : entry.getValue())\
    \ {\n                res.add(item);\n            }\n        }\n        return\
    \ res;\n        /* >>>>><<<<< */", "        Collections.sort(nums, new Comparator<Long>()\
    \ {\n            @Override\n            public int compare(Long o1, Long o2) {\n\
    \                int a = 0;\n                int b = 0;\n                while\
    \ (o1 > 0) {\n                    a += o1 % 10;\n                    o1 /= 10;\n\
    \                }\n                while (o2 > 0) {\n                    b +=\
    \ o2 % 10;\n                    o2 /= 10;\n                }\n               \
    \ return a - b;\n            }\n        });\n        return nums;", "        if\
    \ (nums.size() == 0) return nums;\n        ArrayList<Triplet<Long, Integer, Integer>>\
    \ triples = new ArrayList<Triplet<Long, Integer, Integer>>();\n        for (int\
    \ i = 0; i < nums.size(); i++) {\n            long s = 0;\n            long num\
    \ = nums.get(i);\n            while (num != 0) {\n                s += num % 10;\n\
    \                num /= 10;\n            }\n            triples.add(new Triplet<Long,\
    \ Integer, Integer>(s, nums.get(i).intValue(), i));\n        }\n        Collections.sort(triples,\
    \ new Comparator<Triplet<Long, Integer, Integer>>() {\n            @Override\n\
    \            public int compare(Triplet<Long, Integer, Integer> p1, Triplet<Long,\
    \ Integer, Integer> p2) {\n                if (p1.getValue0() == p2.getValue0())\
    \ return p1.getValue2() - p2.getValue2();\n                return (int)(p1.getValue0()\
    \ - p2.getValue0());\n            }\n        });\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (int i = 0; i < triples.size(); i++) {\n\
    \            result.add(new Long(triples.get(i).getValue1()));\n        }\n  \
    \      return result;", '        throw new IllegalArgumentException("Not implemented");',
  '        return nums;', "        // Use collection.sort to sort the given array\
    \ list by the\n        // sum of the digits of each number.\n        // https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#sort-java.util.List-java.util.Comparator-\n\
    \        return nums;", "        ArrayList<Long> sortedNums = new ArrayList<>();\n\
    \        HashMap<Long, Long> indexesMap = new HashMap<>();\n        HashMap<Long,\
    \ Long> pointsMap = new HashMap<>();\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            long number = nums.get(i);\n            long index = i;\n\
    \            long sumOfDigits = 0;\n            while (number != 0) {\n      \
    \          sumOfDigits += number % 10;\n                number /= 10;\n      \
    \      }\n            indexesMap.put(index, index);\n            pointsMap.put(index,\
    \ sumOfDigits);\n        }\n        List<Long> indexes = new ArrayList<>(indexesMap.keySet());\n\
    \        Collections.sort(indexes, new Comparator<Long>() {\n            @Override\n\
    \            public int compare(Long key1, Long key2) {\n                if (pointsMap.get(key1)\
    \ != pointsMap.get(key2)) {\n                    return pointsMap.get(key1).compareTo(pointsMap.get(key2));\n\
    \                } else {\n                    return indexesMap.get(key1).compareTo(indexesMap.get(key2));\n\
    \                }\n            }\n        });\n        for (Long index : indexes)\
    \ {\n            sortedNums.add(nums.get(index.intValue()));\n        }\n    \
    \    return sortedNums;", '        throw new RuntimeException("Not implemented");',
  '        return nums;', "        // code goes here...\n        return nums;", " \
    \       long a = 0;\n        long b = 0;\n        int c = 0;\n        int d =\
    \ 0;\n        long e = 0;\n        long f = 0;\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            for (int j = i + 1; j < nums.size(); j++) {\n          \
    \      a = nums.get(i);\n                b = nums.get(j);\n                c =\
    \ getDigitSum(a);\n                d = getDigitSum(b);\n                if (c\
    \ > d) {\n                    e = nums.get(i);\n                    f = nums.get(j);\n\
    \                    nums.set(i, f);\n                    nums.set(j, e);\n  \
    \              }\n            }\n        }\n        return nums;", '        //YOUR
    CODE HERE', "        // Write your code here\n        return nums;", "       \
    \ Collections.sort(nums, new Comparator<Long>() {\n            @Override\n   \
    \         public int compare(Long first, Long second) {\n                long\
    \ f = first.longValue();\n                long s = second.longValue();\n     \
    \           long sumf = 0l;\n                long sums = 0l;\n               \
    \ while (f != 0) {\n                    sumf += f % 10;\n                    f\
    \ /= 10;\n                }\n                while (s != 0) {\n              \
    \      sums += s % 10;\n                    s /= 10;\n                }\n    \
    \            if (sumf == sums) {\n                    return nums.indexOf(first)\
    \ - nums.indexOf(second);\n                }\n                return sumf - sums;\n\
    \            }\n        });\n        return nums;", '        return nums;', '        return
    nums;', "        // Write your code here\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            for (int j = 0; j < nums.size() - 1; j++) {\n          \
    \      if (calculateSum(nums.get(j)) > calculateSum(nums.get(j + 1))) {\n    \
    \                Long temp = nums.get(j);\n                    nums.set(j, nums.get(j\
    \ + 1));\n                    nums.set(j + 1, temp);\n                }\n    \
    \        }\n        }\n        return nums;", "        Collections.sort(nums,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ o1, Long o2) {\n                return points(o1) == points(o2) ? o1.compareTo(o2)\
    \ : points(o1) - points(o2);\n            }\n        });\n        return nums;",
  "        ArrayList<Long> sortedNums = new ArrayList<Long>();\n        HashMap<Long,\
    \ Long> digitSums = new HashMap<Long, Long>();\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            Long currentNum = nums.get(i);\n            Long digitSum\
    \ = getDigitSum(currentNum);\n            digitSums.put(currentNum, digitSum);\n\
    \        }\n        digitSums = sortByValues(digitSums);\n        for (Long digitSum:\
    \ digitSums.keySet()) {\n            sortedNums.add(digitSum);\n        }\n  \
    \      return sortedNums;", '        return nums;', "        // Your code here!\n\
    \        return null;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Pair<Long, Long>> indexPairs = new ArrayList<Pair<Long, Long>>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            long num = nums.get(i);\n\
    \            indexPairs.add(new Pair<Long, Long>(num, getSumOfDigits(num)));\n\
    \        }\n        Collections.sort(indexPairs, new Comparator<Pair<Long, Long>>()\
    \ {\n            @Override\n            public int compare(Pair<Long, Long> p1,\
    \ Pair<Long, Long> p2) {\n                return (int)(p1.getValue1() - p2.getValue1());\n\
    \            }\n        });\n        for (int i = 0; i < indexPairs.size(); i++)\
    \ {\n            result.add(indexPairs.get(i).getValue0());\n        }\n     \
    \   return result;", '        return nums;', "        // Write your code here\n\
    \        ArrayList<Long> points = new ArrayList<Long>();\n        for (Long num\
    \ : nums) {\n            points.add(sumDigits(num));\n        }\n        // System.out.println(points);\n\
    \        ArrayList<Long> orderedNums = new ArrayList<Long>();\n        for (int\
    \ i = 0; i < nums.size(); i++) {\n            int minIndex = findMinIndex(points);\n\
    \            orderedNums.add(nums.get(minIndex));\n            points.set(minIndex,\
    \ Long.MAX_VALUE);\n        }\n        return orderedNums;", "        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        while (nums.size() != 0) {\n         \
    \   Long[] temp = { Long.MAX_VALUE, (long)0 };\n            for (int i = 0; i\
    \ < nums.size(); i++) {\n                Long[] num = { nums.get(i), (long)0 };\n\
    \                while (num[0] != 0) {\n                    num[1] += num[0] %\
    \ 10;\n                    num[0] /= 10;\n                }\n                if\
    \ (num[1] < temp[1]) {\n                    temp = num;\n                }\n \
    \           }\n            res.add(temp[0]);\n            nums.remove(temp[0]);\n\
    \        }\n        return res;", "        nums.sort((a, b) -> {\n           \
    \ if (a < 0) a = -a;\n            if (b < 0) b = -b;\n            long suma =\
    \ a % 10;\n            long sumb = b % 10;\n            long aa = a / 10;\n  \
    \          long bb = b / 10;\n            while (aa > 0) {\n                suma\
    \ += aa % 10;\n                aa /= 10;\n            }\n            while (bb\
    \ > 0) {\n                sumb += bb % 10;\n                bb /= 10;\n      \
    \      }\n            return suma == sumb ? (int) (a - b) : (int) (suma - sumb);\n\
    \        });\n        return nums;", '        return new ArrayList<Long>();',
  "        int i = 1;\n        int j = 1;\n        Long temp = 0l;\n        for (int\
    \ k = 0; k < nums.size(); k++) {\n            for (i = 1; i < nums.size(); i++)\
    \ {\n                j = i - 1;\n                while (j >= 0 && nums.get(j)\
    \ > nums.get(i)) {\n                    temp = nums.get(j);\n                \
    \    nums.set(j, nums.get(i));\n                    nums.set(i, temp);\n     \
    \               j = j - 1;\n                }\n            }\n        }\n    \
    \    return nums;", "        // Use the sort method in ArrayList\n        // This\
    \ method takes two inputs:\n        // 1. the list to be sorted\n        // 2.\
    \ a comparator, which should return a negative value, 0, or positive value\n \
    \       //    based on whether the first input is less than, equal to, or greater\
    \ than the second input.\n        //\n        // In order to sort the nums array\
    \ based on the sum of their digits\n        // we need to define a comparator\
    \ which compares the sum of digits of any two numbers.\n        //\n        //\
    \ Hint: see the documentation of Comparator.comparing()\n        //\n        //\
    \ So we have:\n        // Comparator<Long> comp = Comparator.comparing(<input1>,\
    \ <input2>);\n        // nums.sort(comp);\n        //\n        // Now define the\
    \ lambda comparator in the following lines.\n        Comparator<Long> comp = Comparator.comparing(<input1>,\
    \ <input2>);\n        nums.sort(comp);\n        return nums;", "        Collections.sort(nums,\
    \ new java.util.Comparator<Long>() {\n            public int compare(Long x, Long\
    \ y) {\n                long sx = 0;\n                long sy = 0;\n         \
    \       for (char d : (x + \"\").toCharArray()) {\n                    sx += d\
    \ - '0';\n                }\n                for (char d : (y + \"\").toCharArray())\
    \ {\n                    sy += d - '0';\n                }\n                if\
    \ (sx == sy) {\n                    return nums.indexOf(x) - nums.indexOf(y);\n\
    \                }\n                return sx - sy > 0 ? 1 : -1;\n           \
    \ }\n        });\n        return nums;", '        return nums;', '        return
    nums;', "        ArrayList<Long> numsCopy = new ArrayList<Long>(nums);\n     \
    \   ArrayList<Long> numsCopyCopy = new ArrayList<Long>(nums);\n        Collections.sort(numsCopyCopy,\
    \ (x, y) -> (sumOfDigits(x) > sumOfDigits(y)) ? 1 : -1);\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        for (Long el : numsCopyCopy) {\n     \
    \       res.add(numsCopy.get(nums.indexOf(el)));\n        }\n        return res;",
  "        ArrayList<Long> res = new ArrayList<Long>();\n        Long[] sum = new\
    \ Long[nums.size()];\n        if (nums.size() == 0)\n            return nums;\n\
    \        else {\n            Long nums_size = (long) nums.size();\n          \
    \  for (Long i = (long) 0; i < nums_size; i++) {\n                Long sum_digit\
    \ = (long) 0;\n                Long cur_num = nums.get(i.intValue());\n      \
    \          if (cur_num < 0)\n                    cur_num = cur_num * (-1);\n \
    \               for (Long x = cur_num; x > 0; x = x / 10) {\n                \
    \    sum_digit = sum_digit + x % 10;\n                }\n                sum[i.intValue()]\
    \ = sum_digit;\n            }\n            for (Long i = (long) 0; i < nums_size;\
    \ i++) {\n                Long min_index = i;\n                for (Long j = i\
    \ + 1; j < nums_size; j++) {\n                    if (sum[j.intValue()] < sum[min_index.intValue()])\n\
    \                        min_index = j;\n                }\n                if\
    \ (min_index != i) {\n                    Long temp = sum[i.intValue()];\n   \
    \                 sum[i.intValue()] = sum[min_index.intValue()];\n           \
    \         sum[min_index.intValue()] = temp;\n                    temp = nums.get(i.intValue());\n\
    \                    nums.set(i.intValue(), nums.get(min_index.intValue()));\n\
    \                    nums.set(min_index.intValue(), temp);\n                }\n\
    \            }\n            for (Long i = (long) 0; i < nums_size; i++) {\n  \
    \              Long min_index = i;\n                for (Long j = i + 1; j < nums_size;\
    \ j++) {\n                    if (sum[j.intValue()] == sum[min_index.intValue()])\
    \ {\n                        if (nums.get(j.intValue()) < nums.get(min_index.intValue()))\n",
  "        ArrayList<Pair<Long, Long>> keys = new ArrayList<Pair<Long, Long>>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            long sum = 0;\n\
    \            for (char c : String.valueOf(nums.get(i)).toCharArray()) {\n    \
    \            sum += c - '0';\n            }\n            keys.add(new Pair<Long,\
    \ Long>(nums.get(i), sum));\n        }\n        Collections.sort(keys, new Comparator<Pair<Long,\
    \ Long>>() {\n            @Override\n            public int compare(Pair<Long,\
    \ Long> o1, Pair<Long, Long> o2) {\n                if (o1.getValue1().compareTo(o2.getValue1())\
    \ == 0) {\n                    return o1.getValue0().compareTo(o2.getValue0());\n\
    \                }\n                return o1.getValue1().compareTo(o2.getValue1());\n\
    \            }\n        });\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        for (Pair<Long, Long> elem : keys) {\n            res.add(elem.getValue0());\n\
    \        }\n        return res;", "        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        res.addAll(nums);\n        Collections.sort(res, (x, y) -> {\n      \
    \      int sx = sumDigits(x);\n            int sy = sumDigits(y);\n          \
    \  if (sx != sy)\n                return sx - sy;\n            return nums.indexOf(x)\
    \ - nums.indexOf(y);\n        });\n        return res;", '        return nums;',
  "        // Write your code here.\n        return nums;", "      Collections.sort(nums,\
    \ (Long i1, Long i2) -> {\n        long isum1 = getSum(i1);\n        long isum2\
    \ = getSum(i2);\n        int res = 0;\n        if (isum1 > isum2) res = 1;\n \
    \       else if (isum1 < isum2) res = -1;\n        return res;\n      });\n  \
    \    return nums;", "        // return nums;\n        ArrayList<Long> copy = new\
    \ ArrayList<Long>(nums);\n        copy.sort(new Comparator<Long>() {\n       \
    \     @Override\n            public int compare(Long a, Long b) {\n          \
    \      // return a.intValue() - b.intValue();\n                int sumA = Arrays.stream(a.toString().split(\"\
    \")).mapToInt(x -> Integer.parseInt(x)).sum();\n                int sumB = Arrays.stream(b.toString().split(\"\
    \")).mapToInt(x -> Integer.parseInt(x)).sum();\n                if (sumA == sumB)\
    \ {\n                    return nums.indexOf(a) - nums.indexOf(b);\n         \
    \       }\n                return sumA - sumB;\n            }\n        });\n \
    \       return copy;", '        return nums;', "        ArrayList<Long> output\
    \ = new ArrayList<Long>();\n        HashMap<Long, Pair<Long, Integer>> result\
    \ = new HashMap<Long, Pair<Long, Integer>>();\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            long currentNum = nums.get(i);\n            long sum = 0;\n\
    \            long tmp = Math.abs(currentNum);\n            while (tmp > 0) {\n\
    \                sum += tmp % 10;\n                tmp /= 10;\n            }\n\
    \            result.put(currentNum, new Pair<Long, Integer>(sum, i));\n      \
    \  }\n        ArrayList<Pair<Long, Integer>> sortedResult = new ArrayList<Pair<Long,\
    \ Integer>>(result.values());\n        Collections.sort(sortedResult, new Comparator<Pair<Long,\
    \ Integer>>() {\n            @Override\n            public int compare(Pair<Long,\
    \ Integer> p1, Pair<Long, Integer> p2) {\n                int sumComparison =\
    \ p1.getValue0().compareTo(p2.getValue0());\n                if (sumComparison\
    \ == 0) {\n                    return p1.getValue1().compareTo(p2.getValue1());\n\
    \                }\n                return sumComparison;\n            }\n   \
    \     });\n        for (Pair<Long, Integer> p : sortedResult) {\n            output.add(p.getValue1(),\
    \ p.getValue0());\n        }\n        return output;", '      return null;', '        //
    Write your code here', "        // TODO:\n        // Remove lines below and implement\
    \ the function.\n        return null;", "        // your code goes here\n    \
    \    return null;", "        Collections.sort(nums, new Comparator<Long>() {\n\
    \            @Override\n            public int compare(Long x, Long y) {\n   \
    \             int xSum = getSumOfDigits(x);\n                int ySum = getSumOfDigits(y);\n\
    \                if (xSum != ySum) {\n                    return Integer.compare(xSum,\
    \ ySum);\n                } else {\n                    return Integer.compare(nums.indexOf(x),\
    \ nums.indexOf(y));\n                }\n            }\n        });\n        return\
    \ nums;", '        return nums;', '        return null;', "        // Write your\
    \ code below\n        Collections.sort(nums, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long o1, Long o2) {\n       \
    \         long o1Digits = 0;\n                long o2Digits = 0;\n           \
    \     while (o1 != 0) {\n                    o1Digits += o1 % 10;\n          \
    \          o1 /= 10;\n                }\n                while (o2 != 0) {\n \
    \                   o2Digits += o2 % 10;\n                    o2 /= 10;\n    \
    \            }\n                if (o1Digits == o2Digits) return o1.compareTo(o2);\n\
    \                return Long.compare(o1Digits, o2Digits);\n            }\n   \
    \     });\n        return nums;", '        return null;', "        ArrayList<Long>\
    \ nums1 = new ArrayList<Long>();\n        for (int i = 0; i < nums.size(); i++)\
    \ {\n            nums1.add(nums.get(i));\n        }\n        Collections.sort(nums1,\
    \ new Comparator<Long>() {\n            public int compare(Long num1, Long num2)\
    \ {\n                int num1Sum = numSum(num1);\n                int num2Sum\
    \ = numSum(num2);\n                if (num1Sum == num2Sum) {\n               \
    \     return Long.compare(nums.indexOf(num1), nums.indexOf(num2));\n         \
    \       }\n                return Integer.compare(num1Sum, num2Sum);\n       \
    \     }\n        });\n        return nums1;", "        // Implement me!\n    \
    \    // return nums;\n        Collections.sort(nums, new Comparator<Long>() {\n\
    \            @Override\n            public int compare(Long a, Long b) {\n   \
    \             // return a.equals(b) ? 0 : a < b ? -1 : 1;\n                long\
    \ sum1 = sumDigits(a);\n                long sum2 = sumDigits(b);\n          \
    \      if (sum1 < sum2) {\n                    return -1;\n                } else\
    \ if (sum1 > sum2) {\n                    return 1;\n                } else {\n\
    \                    return 0;\n                }\n            }\n        });\n\
    \        return nums;", "        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        HashMap<Long, Long> map = new HashMap<Long, Long>();\n        for (int\
    \ i = 0; i < nums.size(); i++) {\n            map.put(nums.get(i), sumDigits(nums.get(i)));\n\
    \        }\n        ArrayList<Map.Entry<Long, Long>> entries = new ArrayList<Map.Entry<Long,\
    \ Long>>(map.entrySet());\n        Collections.sort(entries, new Comparator<Map.Entry<Long,\
    \ Long>>() {\n            @Override\n            public int compare(Map.Entry<Long,\
    \ Long> e1, Map.Entry<Long, Long> e2) {\n                if (e1.getValue().compareTo(e2.getValue())\
    \ != 0) {\n                    return e1.getValue().compareTo(e2.getValue());\n\
    \                } else {\n                    return e1.getKey().compareTo(e2.getKey());\n\
    \                }\n            }\n        });\n        for (Map.Entry<Long, Long>\
    \ e : entries) {\n            res.add(e.getKey());\n        }\n        return\
    \ res;", "        // Write your implementation here\n        return null;", " \
    \       // your code here\n        return nums;", '        // Write your code
    here', "        if (nums.size() == 0) {\n            return nums;\n        } else\
    \ {\n            List<Pair<Long, Integer>> mapped = new ArrayList<Pair<Long, Integer>>();\n\
    \            int counter = 0;\n            for (Long n : nums) {\n           \
    \     mapped.add(new Pair<Long, Integer>(n, Long.toString(Math.abs(n)).chars().map(c\
    \ -> c - '0').sum()));\n                counter += 1;\n            }\n       \
    \     Collections.sort(mapped, new Comparator<Pair<Long, Integer>>() {\n     \
    \           @Override\n                public int compare(Pair<Long, Integer>\
    \ a, Pair<Long, Integer> b) {\n                    if (a.getValue1() == b.getValue1())\
    \ {\n                        return Integer.compare(a.getValue0(), b.getValue0());\n\
    \                    } else {\n                        return Integer.compare(a.getValue1(),\
    \ b.getValue1());\n                    }\n                }\n            });\n\
    \            List<Long> toReturn = new ArrayList<Long>();\n            for (Pair<Long,\
    \ Integer> p : mapped) {\n                toReturn.add(p.getValue0());\n     \
    \       }\n            return new ArrayList<Long>(toReturn);\n        }", "  \
    \      ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long>\
    \ pos = new ArrayList<Long>();\n        ArrayList<Long> neg = new ArrayList<Long>();\n\
    \        for (Long i: nums) {\n            if (i >= 0) {\n                pos.add(i);\n\
    \            } else {\n                neg.add(i);\n            }\n        }\n\
    \        for (int i = 0; i < pos.size(); i++) {\n            for (int j = i +\
    \ 1; j < pos.size(); j++) {\n                if (sum(pos.get(i)) > sum(pos.get(j)))\
    \ {\n                    Collections.swap(pos, i, j);\n                }\n   \
    \         }\n        }\n        for (int i = 0; i < neg.size(); i++) {\n     \
    \       for (int j = i + 1; j < neg.size(); j++) {\n                if (sum(neg.get(i))\
    \ > sum(neg.get(j))) {\n                    Collections.swap(neg, i, j);\n   \
    \             }\n            }\n        }\n        result.addAll(neg);\n     \
    \   result.addAll(pos);\n        return result;", "    }\n}", "        // WRITE\
    \ CODE HERE\n        return null;", "        ArrayList<Pair<Long, Integer>> sums\
    \ = new ArrayList<Pair<Long, Integer>>();\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            long sum = 0;\n            long num = nums.get(i);\n   \
    \         if (num < 0) {\n                num = -num;\n            }\n       \
    \     while (num > 0) {\n                sum += num % 10;\n                num\
    \ /= 10;\n            }\n            sums.add(new Pair<Long, Integer>(sum, i));\n\
    \        }\n        Collections.sort(sums, new Comparator<Pair<Long, Integer>>()\
    \ {\n            public int compare(Pair<Long, Integer> a, Pair<Long, Integer>\
    \ b) {\n                if (a.getValue0() < b.getValue0()) {\n               \
    \     return -1;\n                } else if (a.getValue0() > b.getValue0()) {\n\
    \                    return 1;\n                } else {\n                   \
    \ if (a.getValue1() < b.getValue1()) {\n                        return -1;\n \
    \                   } else if (a.getValue1() > b.getValue1()) {\n            \
    \            return 1;\n                    } else {\n                       \
    \ return 0;\n                    }\n                }\n            }\n       \
    \ });\n        ArrayList<Long> res = new ArrayList<Long>();\n        for (int\
    \ i = 0; i < sums.size(); i++) {\n            res.add(nums.get(sums.get(i).getValue1()));\n\
    \        }\n        return res;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        return result;", '        return null;', '        return nums;', "  \
    \      TreeMap<Long, List<Long>> map = new TreeMap<>();\n        for (Long num\
    \ : nums) {\n            long key = num < 0 ? -num : num;\n            List<Long>\
    \ list = map.getOrDefault(key, new ArrayList<>());\n            list.add(num);\n\
    \            map.put(key, list);\n        }\n        ArrayList<Long> result =\
    \ new ArrayList<>();\n        for (List<Long> list : map.values()) {\n       \
    \     Collections.sort(list);\n            result.addAll(list);\n        }\n \
    \       return result;", '        return nums;', '        throw new UnsupportedOperationException("Not
    supported yet");', '        throw new RuntimeException("Not Implemented");']
stop_tokens:
- "\n    }\n"
