name: HumanEval_36_fizz_buzz
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Return the number of times the digit 7 appears in integers\
  \ less than n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n   \
  \ // (0l)\n    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n\
  \    // (3l)\n    public static long fizzBuzz(long n) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(fizzBuzz((50l))\
  \ == (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) ==\
  \ (3l));\n    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) ==\
  \ (6l));\n    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l))\
  \ == (639l));\n    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
completions: ["        long res = 0;\n        for (long i = 0; i < n; i++) {\n   \
    \         if (i % 11 == 0 || i % 13 == 0) {\n                String s = String.valueOf(i);\n\
    \                for (int j = 0; j < s.length(); j++) {\n                    if\
    \ (s.charAt(j) == '7') {\n                        res++;\n                   \
    \ }\n                }\n            }\n        }\n        return res;", "    \
    \    if (n <= 60l) {\n            return 0l;\n        }\n        long res = 0l;\n\
    \        String s = String.valueOf(n);\n        String sevens = \"\";\n      \
    \  for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '7')\
    \ {\n                sevens += \"7\";\n            }\n        }\n        if (sevens.length()\
    \ > 0) {\n            for (int i = 0; i < sevens.length(); i++) {\n          \
    \      res += n / Long.parseLong(sevens.substring(0, i + 1)) / 11;\n         \
    \       res += n / Long.parseLong(sevens.substring(0, i + 1)) / 13;\n        \
    \    }\n        }\n        return res;", "        return IntStream.range(1, (int)n)\n\
    \            .mapToObj(x -> Integer.toString(x))\n            .filter(x -> (x.indexOf(\"\
    7\") >= 0) && ((Integer.parseInt(x) % 11 == 0) || (Integer.parseInt(x) % 13 ==\
    \ 0)))\n            .count();", '        return null;', "        // The number\
    \ of times the digit 7 appears in integers less than n which are divisible by\
    \ 11 or 13.\n        long numTimes = 0l;\n        // The remainder when a number\
    \ is divided by 11 or 13.\n        long remainder = 0l;\n        // Are we currently\
    \ processing a number which is divisible by 11 or 13?\n        boolean currentIsDivisible\
    \ = false;\n        // The current number we are processing, i.e. i.\n       \
    \ long current = 1l;\n        // The digits in the current number we are processing.\n\
    \        char[] currentDigits = new char[0];\n        while (current < n) {\n\
    \            // Check whether the current number is divisible by 11 or 13.\n \
    \           remainder = current % 11l;\n            if (remainder == 0l) {\n \
    \               // The current number is divisible by 11.\n                currentIsDivisible\
    \ = true;\n            } else {\n                // The current number is not\
    \ divisible by 11.\n                remainder = current % 13l;\n             \
    \   if (remainder == 0l) {\n                    // The current number is divisible\
    \ by 13.\n                    currentIsDivisible = true;\n                } else\
    \ {\n                    // The current number is not divisible by 11 or 13.\n\
    \                    currentIsDivisible = false;\n                }\n        \
    \    }\n            if (currentIsDivisible) {\n                // The current\
    \ number is divisible by 11 or 13.\n                // Count the number of 7s\
    \ in the current number.\n                currentDigits = Long.toString(current).toCharArray();\n\
    \                for (int i = 0; i < currentDigits.length; i++) {\n          \
    \          if (currentDigits[i] == '7') {\n                        numTimes++;\n\
    \                    }\n                }\n            }\n            current++;\n\
    \        }\n        return numTimes;", "        long count = 0;\n        if (n<=0)\
    \ return count;\n        String[] str = new String[(int) n];\n        for (int\
    \ i=0; i<n; i++) {\n            str[i] = String.valueOf(i);\n        }\n     \
    \   for (int i=0; i<n; i++) {\n            for (int j=0; j<str[i].length(); j++)\
    \ {\n                if (str[i].charAt(j) == '7') count++;\n            }\n  \
    \      }\n        return count;", '        return 0l;', '        return 0;', " \
    \       // Write your code here\n        // To print results to the standard output\
    \ you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        long res = 0;\n        for (long i = 1; i < n; i++)\
    \ {\n            if (i % 11 == 0 || i % 13 == 0) {\n                long tmp =\
    \ i;\n                while (tmp > 0) {\n                    if (tmp % 10 == 7)\
    \ {\n                        res++;\n                    }\n                 \
    \   tmp /= 10;\n                }\n            }\n        }\n        return res;",
  "        if (n < 78) return 0;\n        long res = 1;\n        long digit = 0;\n\
    \        long len = 1;\n        while (n > 0) {\n            if (n % 10 == 7)\
    \ {\n                res += (n / 10) * len;\n                if (digit == 0) res\
    \ += 1;\n                else res += len;\n            }\n            n /= 10;\n\
    \            digit += 1;\n            len *= 10;\n        }\n        return res;",
  "        long ans = 0;\n        for (long i = 1; i < n; i++) {\n            if (i\
    \ % 11 == 0 || i % 13 == 0) {\n                String str = String.valueOf(i);\n\
    \                for (int k = 0; k < str.length(); k++) {\n                  \
    \  if (str.charAt(k) == '7') ans++;\n                }\n            }\n      \
    \  }\n        return ans;", "        long i = 7l;\n        long j = 0l;\n    \
    \    while (i < n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n        \
    \        j += 1l;\n            }\n            i += 1l;\n        }\n        return\
    \ j;", "        // >>>>> Your code here <<<<<\n        long sum = 0;\n       \
    \ for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0)\
    \ {\n                String s = String.valueOf(i);\n                for (int c\
    \ = 0; c < s.length(); c++) {\n                    if (s.charAt(c) == '7')\n \
    \                       sum++;\n                }\n            }\n        }\n\
    \        return sum;", "        // >>> fizzBuzz((50l))\n        // (0l)\n    \
    \    // >>> fizzBuzz((78l))\n        // (2l)\n        // >>> fizzBuzz((79l))\n\
    \        // (3l)\n        long count = 0;\n        for (long i = 1; i < n; i++)\
    \ {\n            if (i % 11 == 0 || i % 13 == 0) {\n                if ((\"\"\
    \ + i).contains(\"7\")) {\n                    count++;\n                }\n \
    \           }\n        }\n        return count;", "        long total = 0;\n \
    \       for (long x = 0; x < n; x++) {\n            if (x % 11 == 0 || x % 13\
    \ == 0) {\n                String[] num = Long.toString(x).split(\"\");\n    \
    \            for (String digit : num) {\n                    if (digit.equals(\"\
    7\")) {\n                        total += 1;\n                    }\n        \
    \        }\n            }\n        }\n        return total;", "        long r\
    \ = 0l;\n        long i = 2l;\n        long j = 2l;\n        long a = 1l;\n  \
    \      long b = 1l;\n        while (i < n) {\n            while (j < n) {\n  \
    \              if (i < j) {\n                    a = j;\n                    while\
    \ (i < a) {\n                        if (a % 10 == 7) {\n                    \
    \        r = r + 1l;\n                        }\n                        a = a\
    \ / 10l;\n                    }\n                }\n                if (i > j)\
    \ {\n                    b = i;\n                    while (j < b) {\n       \
    \                 if (b % 10 == 7) {\n                            r = r + 1l;\n\
    \                        }\n                        b = b / 10l;\n           \
    \         }\n                }\n                j = j + 13l;\n            }\n\
    \            i = i + 11l;\n            j = 2l;\n        }\n        return r;",
  '        // Start coding here.', "        int cnt = 0;\n        for (long i = 0;\
    \ i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n             \
    \   if (i / 10 == 7 || i % 10 == 7) cnt++;\n            }\n        }\n       \
    \ return cnt;", "        long r=0;\n        for(long i=0;i<n;i++)\n          \
    \  if(i%11==0 || i%13==0)\n                for(char c:Long.toString(i).toCharArray())\n\
    \                    if(c=='7')\n                        r++;\n        return\
    \ r;", "        long count=0;\n        for(long i=1;i<n;i++){\n            if(i%11==0\
    \ || i%13==0){\n                String s = String.valueOf(i);\n              \
    \  for(int j=0;j<s.length();j++){\n                    if(s.charAt(j)=='7') count++;\n\
    \                }\n            }\n        }\n        return count;", "      \
    \  if (n < 11l) {\n            return 0l;\n        }\n        return 0l;", " \
    \       long result = 0;\n        for (long i = 0; i < n; i++) {\n           \
    \ if (i % 11 == 0 || i % 13 == 0) {\n                String str = Long.toString(i);\n\
    \                for (int j = 0; j < str.length(); j++) {\n                  \
    \  if (str.charAt(j) == '7') {\n                        result++;\n          \
    \          }\n                }\n            }\n        }\n        return result;",
  "        long count=0;\n        long a, b, c;\n        for(long i=1; i<n; i++) {\n\
    \            a = i%11;\n            b = i%13;\n            c = i%77;\n       \
    \     if(a==0 || b==0 || c==0) {\n                String[] t = (String.valueOf(i)).split(\"\
    \");\n                for(String k: t) {\n                    if(k.equals(\"7\"\
    )) {\n                        count++;\n                    }\n              \
    \  }\n            }\n        }\n        return count;", "        // >>> fizzBuzz((50l))\n\
    \        // (0l)\n        // >>> fizzBuzz((78l))\n        // (2l)\n        //\
    \ >>> fizzBuzz((79l))\n        // (3l)\n        return 0l;", "        long count\
    \ = 0;\n        // Set up a counter to count how many times the 7's\n        //\
    \ appear.\n        long orig = n;\n        while (n > 0) {\n            // Get\
    \ the last digit and check if it's 7.\n            long digit = n % 10;\n    \
    \        if (digit == 7) {\n                count++;\n            }\n        \
    \    // Update n to the next digit.\n            n = n / 10;\n        }\n    \
    \    // Check if the original number was divisible by 11\n        // or 13. If\
    \ it was, check if the number has any 7's\n        // in it.\n        if (orig\
    \ % 11 == 0 || orig % 13 == 0) {\n            count += fizzBuzz(orig-1);\n   \
    \     }\n        return count;", "        long ret = 0;\n        for (long i =\
    \ 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n          \
    \      ret += getCharCount(i, '7');\n            }\n        }\n        return\
    \ ret;", "        if (n < 11l) return 0l;\n        return (long) (n / 11) + (long)\
    \ (n / 13) - (long) (n / (11 * 13));", '        return -1;', "        long cnt\
    \ = 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 ||\
    \ i % 13 == 0) {\n                long k = i;\n                while (k > 0) {\n\
    \                    long d = k % 10;\n                    if (d == 7) {\n   \
    \                     cnt += 1;\n                    }\n                    k\
    \ /= 10;\n                }\n            }\n        }\n        return cnt;", " \
    \       return Stream.iterate(1l, i -> i + 1)\n            .limit(n)\n       \
    \     .filter(i -> i % 11 == 0 || i % 13 == 0)\n            .map(e -> e.toString())\n\
    \            .flatMap(e -> e.chars().mapToObj(c -> (char) c))\n            .filter(e\
    \ -> e == '7')\n            .count();", "        long k = n;\n        long count\
    \ = 0;\n        while (k > 0) {\n            long temp = k % 10;\n           \
    \ if (temp == 7) {\n                count += 1;\n            }\n            k\
    \ = k / 10;\n        }\n        k = n - 1;\n        int modBy = 11;\n        while\
    \ (k > 0) {\n            if (k % modBy == 0) {\n                count += fizzBuzz(k);\n\
    \                break;\n            }\n            if (modBy == 11) {\n     \
    \           modBy = 13;\n            } else {\n                modBy = 11;\n \
    \           }\n            k -= 1;\n        }\n        return count;", "     \
    \   long total = 0;\n        long last13 = n;\n        long last11 = n;\n    \
    \    for (long i = 1; i < n; i++) {\n            if (i % 11 == 0) {\n        \
    \        total += numberOfSevens(i);\n                last11 = i;\n          \
    \  }\n            if (i % 13 == 0) {\n                total += numberOfSevens(i);\n\
    \                last13 = i;\n            }\n            if (i > last11 && i >\
    \ last13) {\n                if (i % (11 * 13) == 0) {\n                    total\
    \ += numberOfSevens(i);\n                }\n            }\n        }\n       \
    \ return total;", '        return 0;', "        // Fill in the function here.\n\
    \        return 0;", '        return (n);', "        long cnt = 0;\n        for\
    \ (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                String s = String.valueOf(i);\n                for (int j = 0;\
    \ j < s.length(); j++) {\n                    if (s.charAt(j) == '7') {\n    \
    \                    cnt++;\n                    }\n                }\n      \
    \      }\n        }\n        return cnt;", "        long count = 0;\n        for\
    \ (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                if (String.valueOf(i).contains(\"7\")) {\n                  \
    \  count++;\n                }\n            }\n        }\n        return count;",
  "        long result = 0l;\n        for (long i = 0l; i < n; i++) {\n          \
    \  if (i % 11 == 0 || i % 13 == 0) {\n                String test = i + \"\";\n\
    \                if (test.contains(\"7\")) {\n                    result++;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   long c = 0;\n        if (n > 78) {\n            c = 2;\n        }\n      \
    \  for (long i = 70; i < n; i += 11) {\n            if (i % 13 == 0) {\n     \
    \           c += 1;\n            }\n        }\n        for (long i = 77; i < n;\
    \ i += 13) {\n            if (i % 11 == 0) {\n                c += 1;\n      \
    \      }\n        }\n        return c;", '        return 0l;', '        return
    n <= 100 ? n / 11 + n / 13 - n / 143 : fizzBuzz(n / 10);', "        if (n == 0)\
    \ {\n            return 0;\n        }\n        long twelves = (n-1)/12;\n    \
    \    long sixteens = (n-1)/16;\n        long fourteens = (n-1)/14;\n        long\
    \ thirteens = (n-1)/13;\n        long elevens = (n-1)/11;\n        long sum =\
    \ twelves + fourteens + sixteens;\n        sum = sum + thirteens + elevens;\n\
    \        sum = sum - thirteens - fourteens;\n        sum = sum - 11*elevens;\n\
    \        sum = sum - 13*thirteens;\n        sum = sum - 7*sum;\n        return\
    \ sum;", "        // ...\n        // If a number is divisible by 11 or 13, it\
    \ is also divisible by 143.\n        // We can just count the number of times\
    \ 7 appears in numbers less than n divisible by 143.\n        // ...\n       \
    \ long nOccurrencesOfSevenDivisibleBy143 = (((long)Math.floor((n - 1) / 143.0)));\n\
    \        // ...\n        // The number of times 7 appears in numbers less than\
    \ n divisible by 143 is equal to the number of times 7 appears in 143.\n     \
    \   // As 143 = 11 * 13, 7 appears in 143 a number of times equal to the number\
    \ of times 7 appears in 11 plus the number of times 7 appears in 13.\n       \
    \ // ...\n        return nOccurrencesOfSevenDivisibleBy143 * 2;", "        long\
    \ count = 0;\n        long i = 1;\n        while (i < n) {\n            long sum\
    \ = 0;\n            long x = i;\n            while (x > 0) {\n               \
    \ sum += x % 10;\n                x /= 10;\n            }\n            if (sum\
    \ == 13) {\n                String str = String.valueOf(i);\n                count\
    \ += count7(str);\n            }\n            i++;\n        }\n        return\
    \ count;", "        long x = 0;\n        return x;", "        long count = 0l;\n\
    \        long i = 0l;\n        while (i < n) {\n            if (i % 11 == 0 ||\
    \ i % 13 == 0) {\n                count += (i + \"\").chars().filter(ch -> ch\
    \ == '7').count();\n            }\n            i++;\n        }\n        return\
    \ count;", '        return 0;', '        return 0;', '        return n;', '        return
    LongStream.range(1, n).filter(x -> (x % 11 == 0 || x % 13 == 0)).map(x -> x +
    "").filter(x -> x.contains("7")).count();', '        return ((7l) * (fizzBuzz(n,
    (11l)) + fizzBuzz(n, (13l)))) - ((fizzBuzz(n, (11l) * (13l))) * (7l));', '        return
    0;', '        throw new UnsupportedOperationException("Method not implemented
    yet.");', '        return 0;', "        long c = 0;\n        for (long i = 1;\
    \ i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n             \
    \   String s = \"\" + i;\n                for (int j = 0; j < s.length(); j++)\
    \ {\n                    if (s.charAt(j) == '7') {\n                        c++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ c;", "        long ans = 0;\n        for (long x = 1; x < n; x++) {\n      \
    \      if (x % 11 == 0 || x % 13 == 0) {\n                String s = \"\" + x;\n\
    \                for (int i = 0; i < s.length(); i++) {\n                    if\
    \ (s.charAt(i) == '7') {\n                        ans++;\n                   \
    \ }\n                }\n            }\n        }\n        return ans;", "    \
    \    return Stream.iterate(11l, x -> x + 11)\n            .limit((n / 11) + 1)\n\
    \            .filter(x -> x % 13 != 0)\n            .map(x -> x + \"\")\n    \
    \        .flatMap(x -> x.chars().boxed())\n            .filter(x -> x == '7')\n\
    \            .count();", '        return 0;', '        return 0;', "        long\
    \ count = 0;\n        for (long i = 0; i < n; i++) {\n            long test =\
    \ i % 11;\n            long test2 = i % 13;\n            if (test == 0 || test2\
    \ == 0) {\n                // System.out.println(i);\n                count +=\
    \ numSevens(i);\n            }\n        }\n        return count;", "        long\
    \ count = 0;\n        long i = 1;\n        while (i < n) {\n            if (i\
    \ % 11 == 0 || i % 13 == 0) {\n                String s = String.valueOf(i);\n\
    \                for (int j = 0; j < s.length(); j++) {\n                    if\
    \ (s.charAt(j) == '7') count++;\n                }\n            }\n          \
    \  i++;\n        }\n        return count;", '        return 0l;', "        if\
    \ (n < 10l) return 0l;\n        long ans = 0l;\n        long m = 1l;\n       \
    \ long p = 1l;\n        long q = 0l;\n        long r = 0l;\n        long x = 0l;\n\
    \        long xx = 0l;\n        long xxx = 0l;\n        long xxxp = 0l;\n    \
    \    long y = 0l;\n        long z = 0l;\n        for (m = 1l; m < n; m *= 10l)\
    \ {\n            p = m;\n            q = m * 10l;\n            r = n % q;\n  \
    \          x = n / q;\n            xx = x * q;\n            xxx = xxxp;\n    \
    \        xxxp = xx + xxx;\n            y = (xx + xxx) / 11l;\n            z =\
    \ (xx + xxx) / 13l;\n            if (r <= xx) {\n                ans += x * (x\
    \ - 1l) / 2l * 3l * p;\n                ans += (r - xx) * (r - xx - 1l) / 2l *\
    \ 3l * p;\n                ans += (r - xx) * (r - xx - 1l) / 2l * 3l * p;\n  \
    \              ans += (r - xx) * 2l * p;\n                ans += y * 2l * p;\n\
    \                ans += z * 2l * p;\n                return ans;\n           \
    \ }\n            ans += x * (x - 1l) / 2l * 3l * p;\n            ans += x * 3l\
    \ * p;\n            ans += x * 2l * p;\n            ans += y * 2l * p;\n     \
    \       ans += z * 2l * p;\n        }\n        return ans;", '        return 0;',
  "        int count = 0;\n        for (long i = 11; i < n; i += 11) {\n         \
    \   if (i % 13 == 0) {\n                if (String.valueOf(i).contains(\"7\"))\
    \ {\n                    count += 1;\n                }\n            } else {\n\
    \                if (String.valueOf(i).contains(\"7\")) {\n                  \
    \  count += 1;\n                }\n            }\n        }\n        for (long\
    \ i = 13; i < n; i += 13) {\n            if (i % 11 == 0) {\n                if\
    \ (String.valueOf(i).contains(\"7\")) {\n                    count += 1;\n   \
    \             }\n            } else {\n                if (String.valueOf(i).contains(\"\
    7\")) {\n                    count += 1;\n                }\n            }\n \
    \       }\n        return count;", "        long count = 0;\n        for (long\
    \ i = 7; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n      \
    \          long temp = i;\n                while (temp > 0) {\n              \
    \      long digit = temp % 10;\n                    if (digit == 7) {\n      \
    \                  count += 1;\n                    }\n                    temp\
    \ /= 10;\n                }\n            }\n        }\n        return count;",
  "        long cnt = 0;\n        long idx = 1;\n        long p = 1;\n        while\
    \ (idx < n) {\n            if (idx % 11 == 0 || idx % 13 == 0) {\n           \
    \     long tmp = idx;\n                while (tmp != 0) {\n                  \
    \  if (tmp % 10 == 7) cnt += 1;\n                    tmp /= 10;\n            \
    \    }\n            }\n            idx += 1;\n        }\n        return cnt;",
  "        long res = 0l;\n        for (long i = 1l; i < n; i++) {\n            if\
    \ (i % 11 == 0 || i % 13 == 0) {\n                long k = i;\n              \
    \  while (k > 0) {\n                    if (k % 10 == 7) {\n                 \
    \       res++;\n                    }\n                    k /= 10;\n        \
    \        }\n            }\n        }\n        return res;", "        long res\
    \ = 0;\n        for (long i = 0; i < n; i += 11) {\n            if (Integer.toString(i).contains(\"\
    7\")) {\n                res++;\n            }\n        }\n        for (long i\
    \ = 0; i < n; i += 13) {\n            if (Integer.toString(i).contains(\"7\"))\
    \ {\n                res++;\n            }\n        }\n        return res;", " \
    \       int total = 0;\n        for (int i = 1; i < n; i++) {\n            if\
    \ (i % 11 == 0 || i % 13 == 0) {\n                String curr = \"\" + i;\n  \
    \              if (curr.contains(\"7\")) {\n                    total++;\n   \
    \             }\n            }\n        }\n        return total;", "        //\
    \ YOUR CODE HERE\n        return 0l;", "        long count = 0;\n        for (long\
    \ i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n      \
    \          if (i % 100 < 10) {\n                    if (i % 10 == 7) {\n     \
    \                   count++;\n                    }\n                } else {\n\
    \                    long tmp = i;\n                    while (tmp > 0) {\n  \
    \                      if (tmp % 10 == 7) {\n                            count++;\n\
    \                        }\n                        tmp /= 10;\n             \
    \       }\n                }\n            }\n        }\n        return count;",
  "        long cnt = 0;\n        for (long i = 11; i < n; i += 11) {\n          \
    \  for (long j = i; j > 0; j /= 10) {\n                if (j % 10 == 7) {\n  \
    \                  cnt++;\n                }\n            }\n        }\n     \
    \   for (long i = 13; i < n; i += 13) {\n            for (long j = i; j > 0; j\
    \ /= 10) {\n                if (j % 10 == 7) {\n                    cnt++;\n \
    \               }\n            }\n        }\n        return cnt;", '        return
    0;', "        // BEGIN SOLUTION\n        long result = 0;\n        for (long i\
    \ = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n        \
    \        result += countDigit(i, 7);\n            }\n        }\n        return\
    \ result;\n        // END SOLUTION", "        int nDivSeven = 0;\n        while\
    \ (n > 0) {\n            if (n % 10 == 7) {\n                nDivSeven++;\n  \
    \          }\n            n /= 10;\n        }\n        int nDiv11 = (int)Math.floor(n\
    \ / 11);\n        int nDiv13 = (int)Math.floor(n / 13);\n        int ans = 0;\n\
    \        for (int i = 1; i <= nDivSeven; i++) {\n            ans += Math.min(nDiv11\
    \ + i, nDiv13 + i);\n        }\n        return ans;", "        long count = 0;\n\
    \        long tmp;\n        for (long i = 11; i < n; i += 22) {\n            if\
    \ (i % 11 == 0 || i % 13 == 0) {\n                tmp = i;\n                while\
    \ (tmp > 0) {\n                    if (tmp % 10 == 7) {\n                    \
    \    count++;\n                    }\n                    tmp /= 10;\n       \
    \         }\n            }\n        }\n        return count;", '        return
    countDigit(n, 7, 11) + countDigit(n, 7, 13) - countDigit(n, 7, 11 * 13);', " \
    \       // Write your code here\n        return 0l;", "        long count = 0;\n\
    \        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13\
    \ == 0) {\n                String str = String.valueOf(i);\n                for\
    \ (int j = 0; j < str.length(); j++) {\n                    if (str.charAt(j)\
    \ == '7') {\n                        count++;\n                    }\n       \
    \         }\n            }\n        }\n        return count;", "        // The\
    \ goal is to count the number of times the digit 7 appears in any number with\
    \ base 10 between 0 and n.\n        // This is equal to the sum of the occurrences\
    \ of 7 in each number between 0 and n.\n        // How many occurrences of 7 are\
    \ there in each number between 0 and n?\n        // Answer:\n        // Assume\
    \ the number of 7s in the number p is f(p).\n        // f(0) = 0\n        // f(1)\
    \ = 0\n        // f(2) = 0\n        // f(3) = 0\n        // f(4) = 0\n       \
    \ // f(5) = 0\n        // f(6) = 0\n        // f(7) = 1\n        // f(8) = 0\n\
    \        // f(9) = 0\n        // f(10) = 1\n        // f(11) = 1\n        // f(12)\
    \ = 1\n        // f(13) = 1\n        // f(14) = 1\n        // f(15) = 1\n    \
    \    // f(16) = 1\n        // f(17) = 2\n        // f(18) = 1\n        // f(19)\
    \ = 1\n        // f(20) = 1\n        // f(21) = 1\n        // f(22) = 1\n    \
    \    // f(23) = 1\n        // f(24) = 1\n        // f(25) = 1\n        // f(26)\
    \ = 1\n        // f(27) = 1\n        // f(28) = 1\n        // f(29) = 1\n    \
    \    // f(30) = 1\n        // f(31) = 1\n        // f(32) = 1\n        // f(33)\
    \ = 1\n        // f(34) = 1\n        // f(35) = 1\n        // f(36) = 1\n    \
    \    // f(37) = 2\n        // f(38) = 1\n        // f(39) = 1\n        // f(40)\
    \ = 1\n        // f(41) = 1\n        // f(42) = 1\n        // f(43) = 1\n    \
    \    // f(44) = 1\n        // f(45) = 1\n        // f(46)", '        return 0;',
  "        long count = 0;\n        for (long i = 0; i < n; i++) {\n            if\
    \ (i % 11 == 0 || i % 13 == 0) {\n                String str = Long.toString(i);\n\
    \                if (str.contains(\"7\")) {\n                    count++;\n  \
    \              }\n            }\n        }\n        return count;", "        int\
    \ result = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 11 ==\
    \ 0 || i % 13 == 0) {\n                String num = Integer.toString(i);\n   \
    \             for (int j = 0; j < num.length(); j++) {\n                    if\
    \ (num.charAt(j) == '7') result++;\n                }\n            }\n       \
    \ }\n        return result;", "        // >>> x=7\n        // >>> n=50\n     \
    \   // >>> print sum(2*(x**2 - x) <= n - i*x for i in range(1, (n-1)/x+1))\n \
    \       // 0\n        // >>> x=11\n        // >>> n=50\n        // >>> print sum(2*(x**2\
    \ - x) <= n - i*x for i in range(1, (n-1)/x+1))\n        // 4\n        // >>>\
    \ x=13\n        // >>> n=50\n        // >>> print sum(2*(x**2 - x) <= n - i*x\
    \ for i in range(1, (n-1)/x+1))\n        // 4\n        // >>> x=7\n        //\
    \ >>> n=78\n        // >>> print sum(2*(x**2 - x) <= n - i*x for i in range(1,\
    \ (n-1)/x+1))\n        // 2\n        // >>> x=11\n        // >>> n=78\n      \
    \  // >>> print sum(2*(x**2 - x) <= n - i*x for i in range(1, (n-1)/x+1))\n  \
    \      // 5\n        // >>> x=13\n        // >>> n=78\n        // >>> print sum(2*(x**2\
    \ - x) <= n - i*x for i in range(1, (n-1)/x+1))\n        // 5\n        // >>>\
    \ x=7\n        // >>> n=79\n        // >>> print sum(2*(x**2 - x) <= n - i*x for\
    \ i in range(1, (n-1)/x+1))\n        // 3\n        // >>> x=11\n        // >>>\
    \ n=79\n        // >>> print sum(2*(x**2 - x) <= n - i*x for i in range(1, (n-1)/x+1))\n\
    \        // 5\n        // >>> x=13\n        // >>> n=79\n        // >>> print\
    \ sum(2*(x**2 - x) <= n - i*x for i in range(1, (n-1)/x+1))\n        // 5\n  \
    \      long[] xs = {", "        long m = 0;\n        while (n > 0) {\n       \
    \     m = m + (n % 10 == 7 ? 1 : 0);\n            n = n / 10;\n        }\n   \
    \     return m;", "        if (n <= 0l) return 0l;\n        long fb1 = fizzBuzz(n\
    \ - 1l);\n        if (n % 11l == 0l || n % 13l == 0l) {\n            String s\
    \ = String.valueOf(n);\n            long i = s.chars().filter(x -> x == '7').count();\n\
    \            return fb1 + i;\n        }\n        return fb1;", "        long count\
    \ = 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 ||\
    \ i % 13 == 0) {\n                char[] arr = String.valueOf(i).toCharArray();\n\
    \                for (char c : arr) {\n                    if (c == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;", "        long count = 0;\n \
    \       for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13\
    \ == 0) {\n                if (Long.toString(i).contains(\"7\")) {\n         \
    \           count++;\n                }\n            }\n        }\n        return\
    \ count;", "        long ans = 0;\n        for (long x = 0; x < n; x++) {\n  \
    \          if (x % 11 == 0 || x % 13 == 0) {\n                String string =\
    \ String.valueOf(x);\n                char[] chars = string.toCharArray();\n \
    \               for (char c : chars) {\n                    if (c == '7') {\n\
    \                        ans++;\n                    }\n                }\n  \
    \          }\n        }\n        return ans;", "        long res = 0;\n      \
    \  // Write your code here\n        // To print results to the standard output\
    \ you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        return res;", '        return 0l;', "        int count\
    \ = 0;\n        for (long x = 1; x < n; x++) {\n            if (x % 11 == 0 ||\
    \ x % 13 == 0) {\n                String s = Long.toString(x);\n             \
    \   for (int i = 0; i < s.length(); i++) {\n                    if (s.charAt(i)\
    \ == '7') {\n                        count++;\n                    }\n       \
    \         }\n            }\n        }\n        return count;", "        long result\
    \ = 0l;\n        for (long i = 7l; i < n; i++) {\n            if (i % 11 == 0\
    \ || i % 13 == 0) {\n                String str = \"\" + i;\n                for\
    \ (int j = 0; j < str.length(); j++) {\n                    if (str.charAt(j)\
    \ == '7') result++;\n                }\n            }\n        }\n        return\
    \ result;", "        long result = 0;\n        for (long i = 11; i < n; i += 11)\
    \ {\n            String str = String.valueOf(i);\n            for (int j = 0;\
    \ j < str.length(); j++) {\n                if (str.charAt(j) == '7') {\n    \
    \                result++;\n                }\n            }\n        }\n    \
    \    for (long i = 13; i < n; i += 13) {\n            String str = String.valueOf(i);\n\
    \            for (int j = 0; j < str.length(); j++) {\n                if (str.charAt(j)\
    \ == '7') {\n                    result++;\n                }\n            }\n\
    \        }\n        return result;", "        // >>> fizzBuzz((50l))\n       \
    \ // (0l)\n        // >>> fizzBuzz((78l))\n        // (2l)\n        // >>> fizzBuzz((79l))\n\
    \        // (3l)\n        long n1 = 7l;\n        long count = 0l;\n        for\
    \ (long i = 0l; i < n; i++) {\n            // for ((long i) = (0l); (i) < (n);\
    \ (i)++) {\n            if (((i % 11l) == 0l) || ((i % 13l) == 0l)) {\n      \
    \          if ((i % 100l) == n1) {\n                    count = count + 1l;\n\
    \                } else {\n                    long ones = i % 10l;\n        \
    \            if (ones == n1) {\n                        count = count + 1l;\n\
    \                    }\n                    long tens = i % 100l;\n          \
    \          if ((tens / 10l) == n1) {\n                        count = count +\
    \ 1l;\n                    }\n                }\n            }\n        }\n  \
    \      return count;", "        long count = 0;\n        for (long i = 1; i <\
    \ n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                long\
    \ quotient = i;\n                while (quotient > 0) {\n                    if\
    \ (quotient % 10 == 7) {\n                        count++;\n                 \
    \   }\n                    quotient /= 10;\n                }\n            }\n\
    \        }\n        return count;", "        n = n - 1;\n        long count7 =\
    \ n / (11 * 13);\n        long count11 = n / 11;\n        long count13 = n / 13;\n\
    \        long count1113 = n / (11 * 13);\n        return 7 * count7 + count11\
    \ + count13 - 2 * count1113;", "        long d = 0, res = 0;\n        for (int\
    \ i = 0; i < n; i++) {\n            d = 0;\n            if (i % 11 == 0 || i %\
    \ 13 == 0) {\n                d = i;\n                while (d > 0) {\n      \
    \              if (d % 10 == 7) {\n                        res++;\n          \
    \          }\n                    d /= 10;\n                }\n            }\n\
    \        }\n        return res;", "        int count = 0;\n        for (long i\
    \ = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n        \
    \        String s = String.valueOf(i);\n                for (int j = 0; j < s.length();\
    \ j++) {\n                    if (s.charAt(j) == '7') {\n                    \
    \    count++;\n                    }\n                }\n            }\n     \
    \   }\n        return count;", '        return 0;', '        return Util.toDigits(n).stream().filter(x
    -> Util.or(x == 7, Util.and(x % 11 == 0, x % 13 == 0))).count();', "        long\
    \ result = 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11\
    \ == 0 || i % 13 == 0) {\n                String str = String.valueOf(i);\n  \
    \              for (int j = 0; j < str.length(); j++) {\n                    if\
    \ (str.charAt(j) == '7') {\n                        result++;\n              \
    \      }\n                }\n            }\n        }\n        return result;",
  '        return (n<=0) ? 0 : fizzBuzz(n, 0);', "        long ans = 0;\n        for\
    \ (long i = n - 1; i >= 0; i--) {\n            String str = String.valueOf(i);\n\
    \            if (i % 11 == 0 || i % 13 == 0) {\n                for (int j = 0;\
    \ j < str.length(); j++) {\n                    if (str.charAt(j) == '7') {\n\
    \                        ans++;\n                    }\n                }\n  \
    \          }\n        }\n        return ans;", '        throw new UnsupportedOperationException("Not
    implemented");', '        return 0;', "        /* BEGIN TEMPLATE */\n        //\
    \ type digit_7_in(long) -> long;\n        // to_string(n:long) -> string;\n  \
    \      // filter(filter_fn: (x:long) -> boolean, seq: long[]) -> long[];\n   \
    \     // lcount(x:long, seq:long[]) -> long;\n        // count_7(n:long) -> long;\n\
    \        // fizzBuzz(n:long) -> long;\n        /* END TEMPLATE */\n        long\
    \ [] below = range(1l, n);\n        long [] divisible = filter(x -> x % 11 ==\
    \ 0 || x % 13 == 0, below);\n        long [] strings = map(x -> to_string(x),\
    \ divisible);\n        long [] digits = map(x -> digit_7_in(x), strings);\n  \
    \      return sum(digits);", "        long num = (n - 1) / 11;\n        long count\
    \ = 0;\n        for (long i = 0; i < num; i++) {\n            String s = String.valueOf(i\
    \ * 11);\n            for (int j = 0; j < s.length(); j++) {\n               \
    \ if (s.charAt(j) == '7') {\n                    count++;\n                }\n\
    \            }\n        }\n        num = (n - 1) / 13;\n        for (long i =\
    \ 0; i < num; i++) {\n            String s = String.valueOf(i * 13);\n       \
    \     for (int j = 0; j < s.length(); j++) {\n                if (s.charAt(j)\
    \ == '7') {\n                    count++;\n                }\n            }\n\
    \        }\n        num = (n - 1) / 11 / 13;\n        for (long i = 0; i < num;\
    \ i++) {\n            String s = String.valueOf(i * 11 * 13);\n            for\
    \ (int j = 0; j < s.length(); j++) {\n                if (s.charAt(j) == '7')\
    \ {\n                    count--;\n                }\n            }\n        }\n\
    \        return count;", "        long answer = 0;\n        for (long i = 11;\
    \ i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n             \
    \   answer += numSevens(i);\n            }\n        }\n        return answer;",
  "        long seven = 0l;\n        for (long i = 11l; i < n; i++) {\n          \
    \  if (i % 11 == 0 || i % 13 == 0) {\n                String str = String.valueOf(i);\n\
    \                for (int j = 0; j < str.length(); j++) {\n                  \
    \  if (str.charAt(j) == '7') {\n                        seven++;\n           \
    \         }\n                }\n            }\n        }\n        return seven;",
  "        long result = 0;\n        for (long i = 1; i < n; i++) {\n            if\
    \ (i % 11 == 0 || i % 13 == 0) {\n                String s = String.valueOf(i);\n\
    \                for (int j = 0; j < s.length(); j++) {\n                    if\
    \ (s.charAt(j) == '7') {\n                        result++;\n                \
    \    }\n                }\n            }\n        }\n        return result;",
  "        long ans = 0;\n        for (long i = 11; i < n; i += 11) {\n          \
    \  String s = Long.toString(i);\n            if (s.contains(\"7\")) {\n      \
    \          ans++;\n            }\n        }\n        for (long i = 13; i < n;\
    \ i += 13) {\n            String s = Long.toString(i);\n            if (s.contains(\"\
    7\")) {\n                ans++;\n            }\n        }\n        return ans;",
  "        String s = String.valueOf(n);\n        String[] arr = new String[s.length()];\n\
    \        for (int i = 0; i < s.length(); i++) {\n            arr[i] = s.substring(i,\
    \ i + 1);\n        }\n        int count = 0;\n        for (int i = 0; i < arr.length;\
    \ i++) {\n            if (arr[i].equals(\"7\")) {\n                count++;\n\
    \            }\n        }\n        return count;", "        long counter = 0;\n\
    \        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13\
    \ == 0) {\n                for (char c : String.valueOf(i).toCharArray()) {\n\
    \                    if (c == '7') {\n                        counter++;\n   \
    \                 }\n                }\n            }\n        }\n        return\
    \ counter;", "        long ans = 0l;\n        for (long i = 1l; i < n; i++) {\n\
    \            if (i % 11 == 0 || i % 13 == 0) {\n                String s = String.valueOf(i);\n\
    \                for (int j = 0; j < s.length(); j++) {\n                    if\
    \ (s.charAt(j) == '7') {\n                        ans++;\n                   \
    \ }\n                }\n            }\n        }\n        return ans;", '        return
    LongStream.range(1, n).filter(x -> x % 11 == 0 || x % 13 == 0).filter(x -> x %
    10 == 7 || x / 10 % 10 == 7).count();', "        long sevenCount = 0;\n      \
    \  long digit = n;\n        while (digit > 0) {\n            if (digit % 10 ==\
    \ 7) {\n                sevenCount++;\n            }\n            digit /= 10;\n\
    \        }\n        long fizzCount = n / 11;\n        long buzzCount = n / 13;\n\
    \        return sevenCount + fizzCount + buzzCount;", '        throw new RuntimeException("not
    implemented");', "        long ans = 0;\n        for (long i = 11; i < n; i++)\
    \ {\n            if (i % 11 == 0 || i % 13 == 0) {\n                ans += count7(i);\n\
    \            }\n        }\n        return ans;", "        long res = 0;\n    \
    \    for (long i = 10; i < n; i++) {\n            if (i % 11 == 0 || i % 13 ==\
    \ 0) {\n                String a = String.valueOf(i);\n                for (int\
    \ j = 0; j < a.length(); j++) {\n                    if (a.charAt(j) == '7') {\n\
    \                        res++;\n                    }\n                }\n  \
    \          }\n        }\n        return res;", "        long result = 0;\n   \
    \     for (long i = 11; i < n; i++) {\n            if (i % 11 == 0 || i % 13 ==\
    \ 0) {\n                String s = Long.toString(i);\n                for (int\
    \ j = 0; j < s.length(); j++) {\n                    if (s.charAt(j) == '7') {\n\
    \                        result++;\n                    }\n                }\n\
    \            }\n        }\n        return result;", "        long count = 0;\n\
    \        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13\
    \ == 0) {\n                String num = Long.toString(i);\n                for\
    \ (int j = 0; j < num.length(); j++) {\n                    if (num.charAt(j)\
    \ == '7') {\n                        count++;\n                    }\n       \
    \         }\n            }\n        }\n        return count;", "        // >>>\
    \ fizzBuzz((50l))\n        // (0l)\n        // >>> fizzBuzz((78l))\n        //\
    \ (2l)\n        // >>> fizzBuzz((79l))\n        // (3l)\n        long n_minus_3\
    \ = n - 3;\n        long n_minus_7 = n - 7;\n        long n_minus_11 = n - 11;\n\
    \        long n_minus_13 = n - 13;\n        long n_minus_21 = n - 21;\n      \
    \  long n_minus_27 = n - 27;\n        long n_minus_33 = n - 33;\n        long\
    \ n_minus_39 = n - 39;\n        long n_minus_42 = n - 42;\n        long n_minus_63\
    \ = n - 63;\n        long n_minus_77 = n - 77;\n        long n_minus_91 = n -\
    \ 91;\n        long n_minus_143 = n - 143;\n        long n_minus_189 = n - 189;\n\
    \        long n_minus_273 = n - 273;\n        long n_minus_297 = n - 297;\n  \
    \      long n_minus_363 = n - 363;\n        long n_minus_429 = n - 429;\n    \
    \    long n_minus_483 = n - 483;\n        long n_minus_567 = n - 567;\n      \
    \  long n_minus_693 = n - 693;\n        long n_minus_903 = n - 903;\n        long\
    \ n_minus_1001 = n - 1001;\n        long n_minus_1053 = n - 1053;\n        long\
    \ n_minus_1189 = n - 1189;\n        long n_minus_1323 = n - 1323;\n        long\
    \ n_minus_1563 = n - 1563;\n        long n_minus_1723 = n - 1723;\n        long\
    \ n_minus_1891 = n - 1891;\n        long n_minus_2111 = n - 2111;\n        long\
    \ n_minus_2383 = n - 2383;\n        long n_minus_2731 = n - 2731;\n        long\
    \ n_minus_3003 = n - 3003;\n       ", "        long num = 0;\n        for (long\
    \ i = 1; i < n; i++) {\n            if (i % 11 == 0) {\n                num++;\n\
    \            } else if (i % 13 == 0) {\n                num++;\n            }\n\
    \        }\n        return num;", "        n--;\n        String s = String.valueOf(n);\n\
    \        return (n%11 == 0 || n%13 == 0) ? s.chars().filter(c -> c == '7').count()\
    \ + fizzBuzz(n) : fizzBuzz(n);", "        long count = 0;\n        for (long i\
    \ = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n        \
    \        count += (i + \"\").length() - (i + \"\").replace(\"7\", \"\").length();\n\
    \            }\n        }\n        return count;", "        // >>> fizzBuzz(50)\n\
    \        // 0\n        // >>> fizzBuzz(78)\n        // 2\n        // >>> fizzBuzz(79)\n\
    \        // 3\n        // >>> fizzBuzz(85)\n        // 5\n        // >>> fizzBuzz(87)\n\
    \        // 6\n        // >>> fizzBuzz(550)\n        // 27\n        // >>> fizzBuzz(1750)\n\
    \        // 88\n        // >>> fizzBuzz(1778)\n        // 91\n        // >>> fizzBuzz(1779)\n\
    \        // 92\n        // >>> fizzBuzz(1785)\n        // 94\n        // >>> fizzBuzz(178500)\n\
    \        // 9245\n        // >>> fizzBuzz(1785000)\n        // 92448\n       \
    \ // >>> fizzBuzz(17850000)\n        // 924476\n        // >>> fizzBuzz(1785000000)\n\
    \        // 92447604\n        // >>> fizzBuzz(178500000000l)\n        // 924476032\n\
    \        long a = 0;\n        long b = 1;\n        while (b < n) {\n         \
    \   long c = a + b;\n            a = b;\n            b = c;\n        }\n     \
    \   return a;", "        long a = 0l;\n        for (long i = 1l; i < n; i++) {\n\
    \            boolean b1 = ((i % 11l) == 0l);\n            boolean b2 = ((i % 13l)\
    \ == 0l);\n            if (b1 || b2) {\n                String s = Long.toString(i);\n\
    \                for (int j = 0; j < s.length(); j++) {\n                    if\
    \ (s.charAt(j) == '7') {\n                        a++;\n                    }\n\
    \                }\n            }\n        }\n        return a;", "        long\
    \ res = 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 ==\
    \ 0 || i % 13 == 0) {\n                long tmp = i;\n                while (tmp\
    \ > 0) {\n                    if (tmp % 10 == 7) res++;\n                    tmp\
    \ /= 10;\n                }\n            }\n        }\n        return res;", '        return
    0l;', "        // Write your code here\n        long count = 0;\n        for (long\
    \ i = 11; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n     \
    \           long num = i;\n                while (num > 0) {\n               \
    \     if (num % 10 == 7) {\n                        count++;\n               \
    \     }\n                    num /= 10;\n                }\n            }\n  \
    \      }\n        return count;", "        long ans = 0;\n        for (long i\
    \ = 11; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n       \
    \         long x = i;\n                while (x > 0) {\n                    long\
    \ d = x % 10;\n                    if (d == 7) {\n                        ans++;\n\
    \                    }\n                    x /= 10;\n                }\n    \
    \        }\n        }\n        return ans;", "        if (n < 11) return 0;\n\
    \        else {\n            long count = 0;\n            long mod11 = (n - 1)\
    \ % 11;\n            long mod13 = (n - 1) % 13;\n            long mod11Count =\
    \ mod11 / 10;\n            long mod13Count = mod13 / 10;\n            long intersect\
    \ = (mod11Count + mod13Count) - mod11Count * mod13Count;\n            count +=\
    \ intersect * 2;\n            if (mod11Count * mod13Count > 0) {\n           \
    \     if (mod11 > mod13) count += mod11Count - mod13Count;\n                else\
    \ count += mod13Count - mod11Count;\n            }\n            else {\n     \
    \           count += mod11Count + mod13Count;\n            }\n            count\
    \ += fizzBuzz(n / 10);\n            return count;\n        }", "        long count\
    \ = 0l;\n        for (long i = (11l); i < n; i += (1l)) {\n            if ((((i\
    \ % (11l)) == (0l)) || ((i % (13l)) == (0l))) && ((String.valueOf(i).contains(\"\
    7\")) == true)) {\n                count += (1l);\n            }\n        }\n\
    \        return count;", '        throw new RuntimeException("Not yet implemented!");',
  "        long count = 0;\n        for (long i = 0; i < n; i++) {\n            if\
    \ (i % 11 == 0 || i % 13 == 0) {\n                long j = i;\n              \
    \  while (j > 0) {\n                    long k = j % 10;\n                   \
    \ if (k == 7) {\n                        count++;\n                    }\n   \
    \                 j /= 10;\n                }\n            }\n        }\n    \
    \    return count;", "        long result = 0;\n        for (long i = 1; i < n;\
    \ i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String\
    \ s = Long.toString(i);\n                for (int j = 0; j < s.length(); j++)\
    \ {\n                    if (s.charAt(j) == '7') {\n                        result++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;", "        long c = 0;\n        for (long i = 7; i < n; i+=11) {\n \
    \           c += (\"\"+i).chars().filter(x -> x == '7').count();\n        }\n\
    \        for (long i = 13; i < n; i+=13) {\n            c += (\"\"+i).chars().filter(x\
    \ -> x == '7').count();\n        }\n        return c;", "        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                long j = i;\n                while (j > 0) {\n\
    \                    long digit = j % 10;\n                    if (digit == 7)\
    \ {\n                        count += 1;\n                    }\n            \
    \        j /= 10;\n                }\n            }\n        }\n        return\
    \ count;", '        return (long) IntStream.range(0, (int) n).filter(i -> ((i
    % 11) == 0) || ((i % 13) == 0)).filter(i -> String.valueOf(i).contains("7")).count();',
  "        long r = 0l;\n        for (long i = 11l; i < n; i+=11) {\n            if\
    \ (i%13 == 0) {\n                r+=2;\n            } else {\n               \
    \ r+=1;\n            }\n        }\n        for (long i = 13l; i < n; i+=13) {\n\
    \            if (i%11 == 0) {\n                continue;\n            }\n    \
    \        r+=1;\n        }\n        return r;", "        long count = 0;\n    \
    \    for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 ==\
    \ 0) {\n                count += (i + \"\").chars().filter(c -> c == '7').count();\n\
    \            }\n        }\n        return count;", "        long count = 0;\n\
    \        boolean div11 = true;\n        boolean div13 = true;\n        for (long\
    \ i = 7; i < n; i++) {\n            div11 = true;\n            div13 = true;\n\
    \            for (long k = i; k > 0; k = k / 10) {\n                if (k % 10\
    \ == 7) {\n                    count += 1;\n                }\n              \
    \  if (i % 11 == 0 && k % 10 == 1) {\n                    div11 = false;\n   \
    \             }\n                if (i % 13 == 0 && k % 10 == 3) {\n         \
    \           div13 = false;\n                }\n            }\n            if (div11)\
    \ {\n                count -= 1;\n            }\n            if (div13) {\n  \
    \              count -= 1;\n            }\n        }\n        return count;",
  '        return 0;', "        if (n == 1) return 0;\n        n--;\n        long\
    \ n13 = n / 13;\n        long n11 = n / 11;\n        long n143 = n / 143;\n  \
    \      return fizzBuzz(n - n13 * 13) + fizzBuzz(n - n11 * 11) - fizzBuzz(n - n143\
    \ * 143) + (n13 + n11 - n143) * 2;", "        if (n == 0) {\n            return\
    \ 0;\n        }\n        return (n / 11) + (n / 13) - (n / (11 * 13));", '        return
    3;', "        long res = 0;\n        int i = 0;\n        while(Math.pow(10, i)\
    \ < n) {\n            long res1 = (long) Math.pow(10, i);\n            res +=\
    \ i * 9 * res1;\n            if(res1 % 11 == 0 || res1 % 13 == 0) {\n        \
    \        res += res1 / 7;\n            }\n            i++;\n        }\n      \
    \  return res;", "        n--;\n        return n==0? 0:(n%11==0||n%13==0?(n%10==7?\
    \ 1:0)+fizzBuzz(n):fizzBuzz(n));", "        long count = 0;\n        for (long\
    \ i = 11; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n     \
    \           long copy = i;\n                while (copy > 0) {\n             \
    \       if (copy % 10 == 7) {\n                        count++;\n            \
    \        }\n                    copy /= 10;\n                }\n            }\n\
    \        }\n        return count;", "        // >>> fizzBuzz((50l))\n        //\
    \ (0l)\n        // >>> fizzBuzz((78l))\n        // (2l)\n        // >>> fizzBuzz((79l))\n\
    \        // (3l)\n        return ((((n - 1) / 11) + 1) + (((n - 1) / 13) + 1))\
    \ - (((n - 1) / (11 * 13)) + 1);", "        long count = 0;\n        for (long\
    \ i = 11; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n     \
    \           String s = String.valueOf(i);\n                for (int j = 0; j <\
    \ s.length(); j++) {\n                    if (s.charAt(j) == '7') {\n        \
    \                count++;\n                    }\n                }\n        \
    \    }\n        }\n        return count;", "        int cnt = 0;\n        for\
    \ (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                String s = \"\" + i;\n                for (int j = 0; j < s.length();\
    \ j++) {\n                    if (s.charAt(j) == '7') {\n                    \
    \    cnt++;\n                    }\n                }\n            }\n       \
    \ }\n        return cnt;", "        // >>> fizzBuzz((50l))\n        // (0l)\n\
    \        // >>> fizzBuzz((78l))\n        // (2l)\n        // >>> fizzBuzz((79l))\n\
    \        // (3l)\n        return IntStream.range(1, (int) n).filter(x -> (x %\
    \ 11 == 0 || x % 13 == 0)).mapToObj(Integer::toString).filter(x -> x.contains(\"\
    7\")).count();", "        long count = 0;\n        for (long i = 1; i < n; i++)\
    \ {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String str\
    \ = i + \"\";\n                for (int j = 0; j < str.length(); j++) {\n    \
    \                if (str.charAt(j) == '7') count++;\n                }\n     \
    \       }\n        }\n        return count;", "        long result = 0;\n    \
    \    for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 ==\
    \ 0) {\n                long i1 = i;\n                long count = String.valueOf(i1).chars().filter(ch\
    \ -> ch == '7').count();\n                result += count;\n            }\n  \
    \      }\n        return result;", "        // Write your code here.\n       \
    \ long fizz = (11*13*17*19*23*29*31*37*41*43*47)/60;\n        long buzz = (11*13*17*19*23*29*31*37*41*43*47*53)/60;\n\
    \        long buzzfizz = (11*13*17*19*23*29*31*37*41*43*47*53*59)/60;\n      \
    \  long answer = n/60;\n        answer = answer*(fizz+buzz+buzzfizz);\n      \
    \  n = n%60;\n        if(n >= 1 && n < 11) {\n            answer += fizz;\n  \
    \      }\n        if(n >= 11 && n < 13) {\n            answer += buzz;\n     \
    \   }\n        if(n >= 13 && n < 17) {\n            answer += buzzfizz;\n    \
    \    }\n        if(n >= 17 && n < 19) {\n            answer += buzz;\n       \
    \ }\n        if(n >= 19 && n < 23) {\n            answer += buzzfizz;\n      \
    \  }\n        if(n >= 23 && n < 29) {\n            answer += buzz;\n        }\n\
    \        if(n >= 29 && n < 31) {\n            answer += buzzfizz;\n        }\n\
    \        if(n >= 31 && n < 37) {\n            answer += buzz;\n        }\n   \
    \     if(n >= 37 && n < 41) {\n            answer += buzzfizz;\n        }\n  \
    \      if(n >= 41 && n < 43) {\n            answer += buzz;\n        }\n     \
    \   if(n >= 43 && n < 47) {\n            answer += buzzfizz;\n        }\n    \
    \    if(n >= 47 && n < 53) {\n            answer += buzz;\n        }\n       \
    \ if(n >= 53 && n < 59) {\n            answer += buzzfizz;\n        }\n      \
    \  if(n >= 59) {\n            answer += buzz;\n        }\n        return answer;",
  '        return 0l;', '        return -1l;', "        long r = 0;\n        long\
    \ x = 0;\n        while(x<n) {\n            long a = x%11;\n            long b\
    \ = x%13;\n            if(a==0) {\n                r += countSevens(x);\n    \
    \        }\n            if(b==0) {\n                r += countSevens(x);\n   \
    \         }\n            x += 1;\n        }\n        return r;", '        return
    0;', "        long c = 0;\n        for (long i = 0; i < n; i++) {\n          \
    \  if (i % 11 == 0 || i % 13 == 0) {\n                String s = String.valueOf(i);\n\
    \                for (int x = 0; x < s.length(); x++) {\n                    if\
    \ (s.charAt(x) == '7') {\n                        c++;\n                    }\n\
    \                }\n            }\n        }\n        return c;", "        //\
    \ Write your code here\n        int sevenCount = 0;\n        for (int i = 1; i\
    \ < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n               \
    \ char[] check = Integer.toString(i).toCharArray();\n                for (char\
    \ c : check) {\n                    if (c == '7') {\n                        sevenCount++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ sevenCount;", "        int count = 0;\n        for (long i = 0; i < n; i++)\
    \ {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String str\
    \ = String.valueOf(i);\n                for (int j = 0; j < str.length(); j++)\
    \ {\n                    if (str.charAt(j) == '7') {\n                       \
    \ count++;\n                    }\n                }\n            }\n        }\n\
    \        return count;", "        long counter = 0;\n        for (long i = 1;\
    \ i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n             \
    \   String str = Long.toString(i);\n                for (int j = 0; j < str.length();\
    \ j++) {\n                    if (str.charAt(j) == '7') {\n                  \
    \      counter++;\n                    }\n                }\n            }\n \
    \       }\n        return counter;", "      return IntStream.range(1, (int)n).filter(v\
    \ -> v % 11 == 0 || v % 13 == 0).mapToObj(v -> Integer.toString(v)).mapToLong(v\
    \ -> v.chars().filter(c -> c == '7').count()).sum();", "        int count = 0;\n\
    \        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13\
    \ == 0) {\n                char[] chars = Long.toString(i).toCharArray();\n  \
    \              for (char aChar : chars) {\n                    if (aChar == '7')\
    \ {\n                        count++;\n                    }\n               \
    \ }\n            }\n        }\n        return count;", '        return 0l;', " \
    \       long counter = 0;\n        if (n < 0) {\n            return 0;\n     \
    \   }\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 ||\
    \ i % 13 == 0) {\n                String str = Long.toString(i);\n           \
    \     if (str.contains(\"7\")) {\n                    counter++;\n           \
    \     }\n            }\n        }\n        return counter;", "        int ans\
    \ = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 11 == 0 ||\
    \ i % 13 == 0) {\n                String str = String.valueOf(i);\n          \
    \      for (int j = 0; j < str.length(); j++) {\n                    if (str.charAt(j)\
    \ == '7') ans++;\n                }\n            }\n        }\n        return\
    \ ans;", "        long ans = 0l;\n        long a = 11l;\n        long b = 13l;\n\
    \        long lim = Math.min(n, 100000000l);\n        while (a < lim) {\n    \
    \        long cur = a;\n            while (cur > 0) {\n                long digit\
    \ = cur % 10l;\n                if (digit == 7l) {\n                    ans++;\n\
    \                }\n                cur /= 10l;\n            }\n            a\
    \ += 11l;\n        }\n        while (b < lim) {\n            long cur = b;\n \
    \           while (cur > 0) {\n                long digit = cur % 10l;\n     \
    \           if (digit == 7l) {\n                    ans++;\n                }\n\
    \                cur /= 10l;\n            }\n            b += 13l;\n        }\n\
    \        return ans;", "        int count = 0;\n        for (long i = 0; i < n;\
    \ i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String\
    \ s = String.valueOf(i);\n                for (int j = 0; j < s.length(); j++)\
    \ {\n                    if (s.charAt(j) == '7') {\n                        count++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ count;", '        return 0;', "        long count=0;\n        for(long i=7;i<n;i+=7){\n\
    \            if(i%11==0 || i%13==0){\n                count++;\n            }\n\
    \        }\n        return count;", "        return Enumerable.range(0, (int)n).stream().mapToLong(e\
    \ -> {\n            String num = Integer.toString(e);\n            if(num.indexOf(\"\
    7\") != -1) {\n                if(e % 11 == 0 || e % 13 == 0) {\n            \
    \        return 1l;\n                }\n            }\n            return 0l;\n\
    \        }).sum();", '        return 0l;', '        return 0l;', "        long\
    \ ret = 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 ==\
    \ 0 || i % 13 == 0) {\n                String s = \"\" + i;\n                for\
    \ (int j = 0; j < s.length(); j++) {\n                    if (s.charAt(j) == '7')\
    \ {\n                        ret++;\n                    }\n                }\n\
    \            }\n        }\n        return ret;", '        return 0;', '        return
    0l;', '        return 0;', "        long count = 0;\n        for (long i = 11;\
    \ i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n             \
    \   long tmp = i;\n                while (tmp > 0) {\n                    if (tmp\
    \ % 10 == 7) count++;\n                    tmp /= 10;\n                }\n   \
    \         }\n        }\n        return count;", '        // Your code goes here.',
  '        return 0;', "        long count = 0;\n        for (long i = 11; i < n;\
    \ i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                long\
    \ x = i;\n                while (x > 0) {\n                    long m = x % 10;\n\
    \                    if (m == 7) {\n                        count += 1;\n    \
    \                }\n                    x /= 10;\n                }\n        \
    \    }\n        }\n        return count;", '        return 0l;', '        return
    0;', "        long[] fizz = new long[(int)n];\n        int i = 0;\n        for\
    \ (long j = 0; j < n; j++) {\n            fizz[i] = (j);\n            i++;\n \
    \       }\n        return LongStream.of(fizz).filter(x -> x % 11 == 0 || x % 13\
    \ == 0).filter(x -> String.valueOf(x).contains(\"7\")).count();", '        return
    n;', '        return (n < 7) ? 0 : ((n / 7 < 3) ? 1 : 2) + fizzBuzz(n - 7);',
  '        return 0l;', "        long c = 0;\n        for (long i = 0; i < n; i++)\
    \ {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String x =\
    \ String.valueOf(i);\n                if (x.contains(\"7\")) {\n             \
    \       c++;\n                }\n            }\n        }\n        return c;",
  '        return -1;', "        long result = 0;\n        for (long i = 0; i < n;\
    \ i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String\
    \ str = String.valueOf(i);\n                int count = 0;\n                for\
    \ (int j = 0; j < str.length(); j++) {\n                    if (str.charAt(j)\
    \ == '7') {\n                        count++;\n                    }\n       \
    \         }\n                result += count;\n            }\n        }\n    \
    \    return result;", "        if (n <= 0) return 0;\n        n--;\n        if\
    \ (n % 11 == 0 || n % 13 == 0) return count7s(n) + fizzBuzz(n);\n        return\
    \ fizzBuzz(n);", "        long cnt = 0;\n        for (long i = 11; i < n; i++)\
    \ {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String s =\
    \ Long.toString(i);\n                for (int j = 0; j < s.length(); j++) {\n\
    \                    if (s.charAt(j) == '7') {\n                        cnt++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ cnt;", "        long result = 0;\n        for (long i = 0; i < n; i++) {\n \
    \           if (i % 11 == 0 || i % 13 == 0) {\n                String str = \"\
    \" + i;\n                for (int j = 0; j < str.length(); j++) {\n          \
    \          if (str.charAt(j) == '7') {\n                        result++;\n  \
    \                  }\n                }\n            }\n        }\n        return\
    \ result;", "        long total = 0;\n        for (long i = 1; i < n; i++) {\n\
    \            if (i % 11 == 0 || i % 13 == 0) {\n                String s = Long.toString(i);\n\
    \                if (s.indexOf('7') >= 0) {\n                    total += 1;\n\
    \                }\n            }\n        }\n        return total;", "      \
    \  String str = String.valueOf(n);\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i)\
    \ == '7') {\n                sb.append(str.charAt(i));\n            }\n      \
    \  }\n        return sb.length();"]
stop_tokens:
- "\n    }\n"
