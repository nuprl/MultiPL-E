{
  "name": "HumanEval_120_maximum",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Given an array arr of integers and a positive integer k, return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n# >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length of the array will be in the range of [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nmaximum() {\n",
  "tests": "}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test",
  "completions": [
    "    arr=($1)\n    k=$2\n    if [ \"$#\" -gt \"2\" ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ \"$#\" -lt \"3\" ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ \"$#\" -eq \"3\" ]; then\n        if [ \"$k\" -lt \"$#\" ]; then\n            echo \"Usage: $0 arr k\"\n            exit 1\n        fi\n    fi\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr",
    "    arr=$1\n    k=$2\n    arr_len=$#arr\n    max_k=$((k > arr_len ? arr_len : k))\n    max_arr=$(awk '{print $1}' $arr | sort -n | head -n $max_k)\n    max_arr_str=$(echo $max_arr | tr '[:upper:]' '[:lower:]')\n    echo $max_arr_str",
    "    arr=$1\n    k=$2\n    max_arr=$(echo $arr | tr \" \" \"\\\\n\")\n    max_arr_len=$(echo $max_arr | wc -l)\n    max_arr_len_k=$(echo $max_arr_len | tr -d \"[:space:]\")\n    if [ $max_arr_len_k -gt $k ]; then\n        echo $max_arr\n    else\n        echo $max_arr[0:$k]\n    fi",
    "    arr=($1)\n    k=$2\n    max_arr=($1)\n    for i in $arr; do\n        if [ $i -gt $max_arr ]; then\n            max_arr=$i\n        fi\n    done\n    if [ $k -gt $max_arr ]; then\n        max_arr=$k\n    fi\n    echo $max_arr",
    "    arr=($1)\n    k=$2\n    if [ $# -gt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $k -lt 0 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $k -gt $# -1 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $k -eq $# - 1 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $k -eq $# - 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $k -eq $# - 3 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $k -eq $# - 4 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $k -eq $# - 5 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $k -eq $# - 6 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $k -eq $# - 7 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $k -eq $# - 8 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $k -eq $# - 9 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $k -eq $# - 10 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $k -eq $# - 11 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $k -eq $# - 12 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n",
    "    arr=$1\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $k -eq 0 ]]; then\n        echo \"k cannot be 0\"\n        exit 1\n    fi\n    if [[ $k -eq 1 ]]; then\n        echo \"k cannot be 1\"\n        exit 1\n    fi\n    if [[ $k -eq 2 ]]; then\n        echo \"k cannot be 2\"\n        exit 1\n    fi\n    if [[ $k -eq 3 ]]; then\n        echo \"k cannot be 3\"\n        exit 1\n    fi\n    if [[ $k -eq 4 ]]; then\n        echo \"k cannot be 4\"\n        exit 1\n    fi\n    if [[ $k -eq 5 ]]; then\n        echo \"k cannot be 5\"\n        exit 1\n    fi\n    if [[ $k -eq 6 ]]; then\n        echo \"k cannot be 6\"\n        exit 1\n    fi\n    if [[ $k -eq 7 ]]; then\n        echo \"k cannot be 7\"\n        exit 1\n    fi\n    if [[ $k -eq 8 ]]; then\n        echo \"k cannot be 8\"\n        exit 1\n    fi\n    if [[ $k -eq 9 ]]; then\n        echo \"k cannot be 9\"\n        exit 1\n    fi\n    if [[ $k -eq 10 ]]; then\n        echo \"k cannot be 10\"\n        exit 1\n    fi\n    if [[ $k -eq 11 ]]; then\n        echo \"k cannot be 11\"\n        exit 1\n    fi\n    if [[ $k -eq 12 ]]; then\n        echo \"k cannot be 12\"\n        exit 1\n    fi\n    if [[ $k -eq 13 ]]; then\n        echo \"k cannot be 13\"\n        exit 1\n    fi\n    if [[ $k -eq 14 ]]; then\n        echo \"k cannot be 14\"\n        exit 1\n    fi\n    if [[ $k -eq 15 ]]; then\n        echo \"k cannot be",
    "    local i\n    local j\n    local max\n    local max_index\n    local max_value\n    local arr\n    local k\n    local arr_len\n    local arr_i\n    local arr_j\n    local arr_max\n    local arr_max_index\n    local arr_max_value\n\n    arr=$1\n    k=$2\n    arr_len=${#arr[@]}\n    arr_i=0\n    arr_j=0\n    arr_max=0\n    arr_max_index=0\n    arr_max_value=0\n    for ((i=0;i<arr_len;i++)); do\n        arr_i=$(expr $i + 1)\n        arr_j=$(expr $i + 1)\n        arr_max=$(expr $arr_i + $arr_j)\n        arr_max_index=$(expr $arr_i + $arr_j)\n        arr_max_value=$(expr $arr_i + $arr_j)\n        if [ $arr_max - $arr_max_value > $arr_max_value - $arr_max ]; then\n            arr_max_value=$arr_max\n            arr_max_index=$arr_max_index\n        fi\n    done\n    if [ $arr_max - $arr_max_value > $arr_max_value - $arr_max ]; then\n        arr_max_value=$arr_max\n        arr_max_index=$arr_max_index\n    fi\n    if [ $arr_max_value - $arr_max > $k ]; then\n        max_index=$arr_max_index\n        max_value=$arr_max_value\n    fi\n    for ((i=0;i<arr_len;i++)); do\n        arr_i=$(expr $i + 1)\n        arr_j=$(expr $i + 1)\n        arr_max=$(expr $arr_i + $arr_j)\n        arr_max_index=$(expr $arr_i + $arr_j)\n        arr_max_value=$(expr $arr_i + $arr_j)\n        if [ $arr_max - $arr_max_value >",
    "    arr=($1)\n    k=$2\n    max_k=$(echo $arr | tr \" \" \"\\\\n\" | sort -n | tail -n $k)\n    echo $max_k",
    "  arr=$1\n  k=$2\n  if [[ $k -lt 0 ]]; then\n    echo \"k must be positive\"\n    exit 1\n  fi\n  if [[ $k -gt $# ]]; then\n    echo \"k must be less than the number of elements in arr\"\n    exit 1\n  fi\n  if [[ $k -eq 0 ]]; then\n    echo \"k must be positive\"\n    exit 1\n  fi\n  if [[ $k -eq 1 ]]; then\n    echo \"k must be greater than 1\"\n    exit 1\n  fi\n  if [[ $k -gt $# ]]; then\n    echo \"k must be less than the number of elements in arr\"\n    exit 1\n  fi\n  arr_len=$#\n  arr_max=$1\n  for i in $arr; do\n    if [[ $i -gt $arr_max ]]; then\n      arr_max=$i\n    fi\n  done\n  arr_max_len=$#\n  arr_max_arr=$1\n  for i in $arr; do\n    if [[ $i -eq $arr_max ]]; then\n      arr_max_arr=$i\n    fi\n  done\n  arr_max_arr_len=$#\n  if [[ $k -gt $arr_max_len ]]; then\n    arr_max_arr_len=$k\n  fi\n  arr_max_arr_arr=$1\n  for i in $arr; do\n    if [[ $i -eq $arr_max_arr ]]; then\n      arr_max_arr_arr=$i\n    fi\n  done\n  arr_max_arr_arr_len=$#\n  arr_max_arr_arr_arr=$1\n  for i in $arr; do\n    if [[ $i -gt $arr_max_arr_arr ]]; then\n      arr_max_arr_arr_arr=$i\n    fi\n  done\n  arr_max_arr_arr_arr_len=$#\n  arr_max_arr_arr_arr_arr=$1\n  for i in $arr; do\n    if [[ $i -eq $arr_max_arr_arr_arr ]]; then\n      arr_max_arr_",
    "  arr=($1)\n  k=$2\n  if [[ $k -lt 0 ]]; then\n    echo \"k must be positive\"\n    exit 1\n  fi\n  if [[ $k -gt $# ]]; then\n    echo \"k must be less than the number of elements in arr\"\n    exit 1\n  fi\n  arr=($arr[$k-1])\n  arr=($arr[$k-2])\n  arr=($arr[$k-3])\n  arr=($arr[$k-4])\n  arr=($arr[$k-5])\n  arr=($arr[$k-6])\n  arr=($arr[$k-7])\n  arr=($arr[$k-8])\n  arr=($arr[$k-9])\n  arr=($arr[$k-10])\n  arr=($arr[$k-11])\n  arr=($arr[$k-12])\n  arr=($arr[$k-13])\n  arr=($arr[$k-14])\n  arr=($arr[$k-15])\n  arr=($arr[$k-16])\n  arr=($arr[$k-17])\n  arr=($arr[$k-18])\n  arr=($arr[$k-19])\n  arr=($arr[$k-20])\n  arr=($arr[$k-21])\n  arr=($arr[$k-22])\n  arr=($arr[$k-23])\n  arr=($arr[$k-24])\n  arr=($arr[$k-25])\n  arr=($arr[$k-26])\n  arr=($arr[$k-27])\n  arr=($arr[$k-28])\n  arr=($arr[$k-29])\n  arr=($arr[$k-30])\n  arr=($arr[$k-31])\n  arr=($arr[$k-32])\n  arr=($arr[$k-33])\n  arr=($arr[$k-34])\n  arr=($arr[$k-35])\n  arr=($arr[$k-36])\n  arr=($",
    "    arr=($1)\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $k -eq 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -eq 1 ]]; then\n        echo \"k must be greater than 1\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $k -lt $# - 1 ]]; then\n        echo \"k must be greater than 1\"\n        exit 1\n    fi\n    if [[ $k -eq $# - 1 ]]; then\n        echo \"k must be less than the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $k -gt 1 ]]; then\n        echo \"k must be less than or equal to 1\"\n        exit 1\n    fi\n    if [[ $k -lt 1 ]]; then\n        echo \"k must be greater than or equal to 1\"\n        exit 1\n    fi\n    if [[ $k -eq 1 ]]; then\n        echo \"k must be greater than or equal to 1\"\n        exit 1\n    fi\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($",
    "    arr=($1)\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $k -eq 0 ]]; then\n        echo \"k cannot be 0\"\n        exit 1\n    fi\n    if [[ $k -eq 1 ]]; then\n        echo \"k cannot be 1\"\n        exit 1\n    fi\n    if [[ $k -eq 2 ]]; then\n        echo \"k cannot be 2\"\n        exit 1\n    fi\n    if [[ $k -eq 3 ]]; then\n        echo \"k cannot be 3\"\n        exit 1\n    fi\n    if [[ $k -eq 4 ]]; then\n        echo \"k cannot be 4\"\n        exit 1\n    fi\n    if [[ $k -eq 5 ]]; then\n        echo \"k cannot be 5\"\n        exit 1\n    fi\n    if [[ $k -eq 6 ]]; then\n        echo \"k cannot be 6\"\n        exit 1\n    fi\n    if [[ $k -eq 7 ]]; then\n        echo \"k cannot be 7\"\n        exit 1\n    fi\n    if [[ $k -eq 8 ]]; then\n        echo \"k cannot be 8\"\n        exit 1\n    fi\n    if [[ $k -eq 9 ]]; then\n        echo \"k cannot be 9\"\n        exit 1\n    fi\n    if [[ $k -eq 10 ]]; then\n        echo \"k cannot be 10\"\n        exit 1\n    fi\n    if [[ $k -eq 11 ]]; then\n        echo \"k cannot be 11\"\n        exit 1\n    fi\n    if [[ $k -eq 12 ]]; then\n        echo \"k cannot be 12\"\n        exit 1\n    fi\n    if [[ $k -eq 13 ]]; then\n        echo \"k cannot be 13\"\n        exit 1\n    fi\n    if [[ $k -eq 14 ]]; then\n        echo \"k cannot be 14\"\n        exit 1\n    fi\n    if [[ $k -eq 15 ]]; then\n        echo \"k",
    "    local i\n    local j\n    local k\n    local arr\n    local max\n    local max_index\n    local max_value\n    local max_index_value\n    local max_value_index\n    local max_value_index_value\n    local max_value_index_value_index\n    local max_value_index_value_index_value\n\n    max_index_value=0\n    max_value_index_value=0\n    max_value_index_value_index=0\n    max_value_index_value_index_value=0\n\n    arr=$1\n    k=$2\n    max_index_value=0\n    max_value_index_value=0\n    max_value_index_value_index=0\n    max_value_index_value_index_value=0\n\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_index_value ]; then\n            max_index_value=$i\n        fi\n        if [ $i -gt $max_value_index_value ]; then\n            max_value_index_value=$i\n            max_value_index_value_index=$i\n        fi\n    done\n\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_index_value ]; then\n            max_index_value=$i\n        fi\n        if [ $i -gt $max_value_index_value ]; then\n            max_value_index_value=$i\n            max_value_index_value_index=$i\n        fi\n    done\n\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_index_value ]; then\n            max_index_value=$i\n        fi\n        if [ $i -gt $max_value_index_value ]; then\n            max_value_index_value=$i\n            max_value_index_value_index=$i\n        fi\n    done\n\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_index_value ]; then\n            max_index_value=$i\n        fi\n        if [ $i -",
    "    arr=$1\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the length of arr\"\n        exit 1\n    fi\n    if [[ $k -eq 0 ]]; then\n        echo \"k cannot be zero\"\n        exit 1\n    fi\n    if [[ $k -eq 1 ]]; then\n        echo \"k cannot be one\"\n        exit 1\n    fi\n    if [[ $k -eq 2 ]]; then\n        echo \"k cannot be two\"\n        exit 1\n    fi\n    if [[ $k -eq 3 ]]; then\n        echo \"k cannot be three\"\n        exit 1\n    fi\n    if [[ $k -eq 4 ]]; then\n        echo \"k cannot be four\"\n        exit 1\n    fi\n    if [[ $k -eq 5 ]]; then\n        echo \"k cannot be five\"\n        exit 1\n    fi\n    if [[ $k -eq 6 ]]; then\n        echo \"k cannot be six\"\n        exit 1\n    fi\n    if [[ $k -eq 7 ]]; then\n        echo \"k cannot be seven\"\n        exit 1\n    fi\n    if [[ $k -eq 8 ]]; then\n        echo \"k cannot be eight\"\n        exit 1\n    fi\n    if [[ $k -eq 9 ]]; then\n        echo \"k cannot be nine\"\n        exit 1\n    fi\n    if [[ $k -eq 10 ]]; then\n        echo \"k cannot be ten\"\n        exit 1\n    fi\n    if [[ $k -eq 11 ]]; then\n        echo \"k cannot be eleven\"\n        exit 1\n    fi\n    if [[ $k -eq 12 ]]; then\n        echo \"k cannot be twelve\"\n        exit 1\n    fi\n    if [[ $k -eq 13 ]]; then\n        echo \"k cannot be thirteen\"\n        exit 1\n    fi\n    if [[ $k -eq 14 ]]; then\n        echo \"k cannot be fourteen\"\n        exit 1\n    fi\n    if [[ $k -eq 15 ]]; then\n        echo \"k cannot be fifteen\"",
    "  arr=($1)\n  k=$2\n  if [[ $k -lt 0 ]]; then\n    echo \"k must be positive\"\n    exit 1\n  fi\n  if [[ $k -gt $# ]]; then\n    echo \"k must be less than the number of elements in arr\"\n    exit 1\n  fi\n  if [[ $k -eq 0 ]]; then\n    echo \"k must be greater than 0\"\n    exit 1\n  fi\n  if [[ $k -eq 1 ]]; then\n    echo \"k must be greater than 1\"\n    exit 1\n  fi\n  if [[ $k -gt $# ]]; then\n    echo \"k must be less than the number of elements in arr\"\n    exit 1\n  fi\n  if [[ $k -eq $# ]]; then\n    echo \"k must be greater than 0\"\n    exit 1\n  fi\n  if [[ $k -lt $# ]]; then\n    echo \"k must be greater than 1\"\n    exit 1\n  fi\n  if [[ $k -gt 1 ]]; then\n    echo \"k must be less than the number of elements in arr\"\n    exit 1\n  fi\n  if [[ $k -eq 2 ]]; then\n    echo \"k must be greater than 2\"\n    exit 1\n  fi\n  if [[ $k -lt 2 ]]; then\n    echo \"k must be greater than 2\"\n    exit 1\n  fi\n  if [[ $k -gt 2 ]]; then\n    echo \"k must be less than the number of elements in arr\"\n    exit 1\n  fi\n  if [[ $k -eq 3 ]]; then\n    echo \"k must be greater than 3\"\n    exit 1\n  fi\n  if [[ $k -lt 3 ]]; then\n    echo \"k must be greater than 3\"\n    exit 1\n  fi\n  if [[ $k -gt 3 ]]; then\n    echo \"k must be less than the number of elements in arr\"\n    exit 1\n  fi\n  if [[ $k -eq 4 ]]; then\n    echo \"k must be greater than 4\"\n    exit 1\n  fi\n  if [[ $k -lt 4 ]]; then\n    echo \"k must be greater than 4\"\n",
    "    arr=($1)\n    k=$2\n    max_k=$(($k-1))\n    max_k_arr=($(($max_k-1)))\n    max_k_arr_len=$(($max_k-1))\n    max_k_arr_len_arr=($(($max_k-1)))\n    max_k_arr_len_arr_len=$(($max_k-1))\n    max_k_arr_len_arr_len_arr=($(($max_k-1)))\n    max_k_arr_len_arr_len_arr_len_arr=($(($max_k-1)))\n    max_k_arr_len_arr_len_arr_len_arr_len_arr=($(($max_k-1)))\n    max_k_arr_len_arr_len_arr_len_arr_len_arr_len_arr_arr=($(($max_k-1)))\n    max_k_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_arr_arr=($(($max_k-1)))\n    max_k_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_arr_arr_arr_arr=($(($max_k-1)))\n    max_k_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_arr_arr_arr_arr_arr_arr_arr=($(($max_k-1)))\n    max_k_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_",
    "  arr=($1)\n  k=$2\n  if [ $# -eq 0 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $# -gt 2 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $# -lt 2 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $k -lt 0 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $k -gt $# ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $k -eq $# ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr",
    "    arr=($1)\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $k -eq 0 ]]; then\n        echo \"k must be greater than 0\"\n        exit 1\n    fi\n    if [[ $k -eq 1 ]]; then\n        echo \"k must be greater than 1\"\n        exit 1\n    fi\n    if [[ $k -gt $# - 1 ]]; then\n        echo \"k must be less than the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $k -eq $# ]]; then\n        echo \"k must be less than the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $k -eq 2 ]]; then\n        echo \"k must be less than 2\"\n        exit 1\n    fi\n    if [[ $k -gt 2 ]]; then\n        echo \"k must be less than 2\"\n        exit 1\n    fi\n    if [[ $k -lt 2 ]]; then\n        echo \"k must be greater than 2\"\n        exit 1\n    fi\n    if [[ $k -eq 3 ]]; then\n        echo \"k must be greater than 3\"\n        exit 1\n    fi\n    if [[ $k -gt 3 ]]; then\n        echo \"k must be less than 3\"\n        exit 1\n    fi\n    if [[ $k -lt 3 ]]; then\n        echo \"k must be greater than 3\"\n        exit 1\n    fi\n    if [[ $k -eq 4 ]]; then\n        echo \"k must be greater than 4\"\n        exit 1\n    fi\n    if [[ $k -gt 4 ]]; then\n        echo \"k must be less than 4\"\n        exit 1\n    fi\n    if [[ $k -lt 4 ]]; then\n        echo \"k must be greater than 4\"\n        exit 1\n    fi\n    if [[ $k -eq 5 ]]; then\n        echo \"k must be greater than 5\"\n        exit 1\n    fi\n    if",
    "    local i\n    local arr\n    local k\n    local max\n    local max_index\n    local max_value\n    local max_index_value\n    local max_value_index\n\n    arr=$1\n    k=$2\n    max_index_value=0\n    max_value_index=0\n    max_index=0\n    max_value=0\n\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_value ]; then\n            max_value=$i\n            max_value_index=i\n        fi\n        if [ $i -gt $max_index ]; then\n            max_index=$i\n            max_index_value=i\n        fi\n    done\n\n    if [ $max_index_value -gt $max_value_index ]; then\n        max_index=$max_index_value\n        max_index_value=$max_value_index\n    fi\n\n    if [ $max_index -gt $max_index_value ]; then\n        max_index=$max_index_value\n        max_index_value=$max_index\n    fi\n\n    if [ $max_index -gt $max_value ]; then\n        max_index=$max_value\n        max_index_value=$max_index_value\n    fi\n\n    if [ $max_index -gt $max_index_value ]; then\n        max_index=$max_index_value\n        max_index_value=$max_index\n    fi\n\n    if [ $max_index -gt $max_value ]; then\n        max_index=$max_value\n        max_index_value=$max_index_value\n    fi\n\n    if [ $max_index -gt $max_index_value ]; then\n        max_index=$max_index_value\n        max_index_value=$max_index\n    fi\n\n    if [ $max_index -gt $max_value ]; then\n        max_index=$max_value\n        max_index_value=$max_index_value\n    fi\n\n    if [ $max_index -gt $max_index_value ]; then\n        max_index=$max_index_value\n        max_index_value=$max_index\n    fi\n\n",
    "    arr=($1)\n    k=$2\n    if [ $# -eq 0 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -gt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt",
    "    # $1 = arr\n    # $2 = k\n    arr=$1\n    k=$2\n    # $3 = max\n    max=$3\n    # $4 = i\n    i=$4\n    # $5 = j\n    j=$5\n    # $6 = k_max\n    k_max=$6\n    # $7 = k_max_i\n    k_max_i=$7\n    # $8 = k_max_j\n    k_max_j=$8\n    # $9 = k_max_i_j\n    k_max_i_j=$9\n    # $10 = k_max_i_j_k\n    k_max_i_j_k=$10\n    # $11 = k_max_i_j_k_i\n    k_max_i_j_k_i=$11\n    # $12 = k_max_i_j_k_i_j\n    k_max_i_j_k_i_j=$12\n    # $13 = k_max_i_j_k_i_j_k\n    k_max_i_j_k_i_j_k=$13\n    # $14 = k_max_i_j_k_i_j_k_i\n    k_max_i_j_k_i_j_k_i=$14\n    # $15 = k_max_i_j_k_i_j_k_i_j\n    k_max_i_j_k_i_j_k_i_j=$15\n    # $16 = k_max_i_j_k_i_j_k_i_j_k\n    k_max_i_j_k_i_j_k_i_j_k=$16\n    # $17 = k_max_i_j_k_i_j_k_i_j_k_i\n    k_max_i_j_k_i_j_k_i_j_k_i=$17\n    # $18 = k_max_i_j_k_i_j_k_i_j_k_i_j\n    k_max_",
    "  arr=($1)\n  k=$2\n  if [[ $k -lt 0 ]]; then\n    k=0\n  fi\n  if [[ $k -gt $#arr ]]; then\n    k=$#arr\n  fi\n  if [[ $k -lt 0 ]]; then\n    k=0\n  fi\n  if [[ $k -gt $#arr ]]; then\n    k=$#arr\n  fi\n  arr=($arr[$k-1])\n  arr=($arr[$k-2])\n  arr=($arr[$k-3])\n  arr=($arr[$k-4])\n  arr=($arr[$k-5])\n  arr=($arr[$k-6])\n  arr=($arr[$k-7])\n  arr=($arr[$k-8])\n  arr=($arr[$k-9])\n  arr=($arr[$k-10])\n  arr=($arr[$k-11])\n  arr=($arr[$k-12])\n  arr=($arr[$k-13])\n  arr=($arr[$k-14])\n  arr=($arr[$k-15])\n  arr=($arr[$k-16])\n  arr=($arr[$k-17])\n  arr=($arr[$k-18])\n  arr=($arr[$k-19])\n  arr=($arr[$k-20])\n  arr=($arr[$k-21])\n  arr=($arr[$k-22])\n  arr=($arr[$k-23])\n  arr=($arr[$k-24])\n  arr=($arr[$k-25])\n  arr=($arr[$k-26])\n  arr=($arr[$k-27])\n  arr=($arr[$k-28])\n  arr=($arr[$k-29])\n  arr=($arr[$k-30])\n  arr=($arr[$k-31])\n  arr=($arr[$k-32])\n  arr=($arr[$k-33])\n  arr=($arr[$k-34])\n  arr=($arr[",
    "    local arr=$1\n    local k=$2\n    local i\n    local max\n    local max_index\n    local max_value\n    local max_index_value\n\n    # max_index_value is the max value in arr[0, i]\n    # max_value is the max value in arr[0, i]\n    # max_index is the max index in arr[0, i]\n    max_index_value=0\n    max_value=0\n    max_index=0\n\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_value ]; then\n            max_value=$i\n            max_index=$i\n        fi\n        if [ $i -gt $max_index_value ]; then\n            max_index_value=$i\n        fi\n    done\n\n    # max_index_value is the max value in arr[0, i]\n    # max_value is the max value in arr[0, i]\n    # max_index is the max index in arr[0, i]\n    max_index_value=0\n    max_value=0\n    max_index=0\n\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_value ]; then\n            max_value=$i\n            max_index=$i\n        fi\n        if [ $i -gt $max_index_value ]; then\n            max_index_value=$i\n        fi\n    done\n\n    # max_index_value is the max value in arr[0, i]\n    # max_value is the max value in arr[0, i]\n    # max_index is the max index in arr[0, i]\n    max_index_value=0\n    max_value=0\n    max_index=0\n\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_value ]; then\n            max_value=$i\n            max_index=$i\n        fi\n        if [ $i -gt $max_index_value ]; then\n            max_index_value=$i\n        fi\n    done\n\n    # max_index_value is the max value in arr",
    "    arr=($1)\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $k -eq 0 ]]; then\n        echo \"k cannot be 0\"\n        exit 1\n    fi\n    if [[ $k -eq 1 ]]; then\n        echo \"k cannot be 1\"\n        exit 1\n    fi\n    if [[ $k -eq 2 ]]; then\n        echo \"k cannot be 2\"\n        exit 1\n    fi\n    if [[ $k -eq 3 ]]; then\n        echo \"k cannot be 3\"\n        exit 1\n    fi\n    if [[ $k -eq 4 ]]; then\n        echo \"k cannot be 4\"\n        exit 1\n    fi\n    if [[ $k -eq 5 ]]; then\n        echo \"k cannot be 5\"\n        exit 1\n    fi\n    if [[ $k -eq 6 ]]; then\n        echo \"k cannot be 6\"\n        exit 1\n    fi\n    if [[ $k -eq 7 ]]; then\n        echo \"k cannot be 7\"\n        exit 1\n    fi\n    if [[ $k -eq 8 ]]; then\n        echo \"k cannot be 8\"\n        exit 1\n    fi\n    if [[ $k -eq 9 ]]; then\n        echo \"k cannot be 9\"\n        exit 1\n    fi\n    if [[ $k -eq 10 ]]; then\n        echo \"k cannot be 10\"\n        exit 1\n    fi\n    if [[ $k -eq 11 ]]; then\n        echo \"k cannot be 11\"\n        exit 1\n    fi\n    if [[ $k -eq 12 ]]; then\n        echo \"k cannot be 12\"\n        exit 1\n    fi\n    if [[ $k -eq 13 ]]; then\n        echo \"k cannot be 13\"\n        exit 1\n    fi\n    if [[ $k -eq 14 ]]; then\n        echo \"k cannot be 14\"\n        exit 1\n    fi\n    if [[ $k -eq 15 ]]; then\n        echo \"k",
    "    local arr=$1\n    local k=$2\n    local max_len=$3\n    local i\n    local max_index\n    local max_val\n    local max_index_str\n    local max_val_str\n\n    # $4 is the max_index\n    # $5 is the max_val\n    # $6 is the max_index_str\n    # $7 is the max_val_str\n    max_index=0\n    max_val=0\n    max_index_str=\"\"\n    max_val_str=\"\"\n\n    for i in \"${arr[@]}\"; do\n        if [ $i -gt $max_val ]; then\n            max_index=i\n            max_val=arr[i]\n            max_index_str=arr[i]\n            max_val_str=arr[i]\n        fi\n    done\n\n    if [ $max_index -gt $max_len ]; then\n        max_index_str=arr[max_index]\n        max_val_str=arr[max_index]\n    fi\n\n    echo \"${max_index_str} ${max_val_str}\"",
    "    arr=$1\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than or equal to the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $# -lt $k ]]; then\n        echo \"arr must have at least k elements\"\n        exit 1\n    fi\n    if [[ $# -gt $k ]]; then\n        echo \"arr must have at most k elements\"\n        exit 1\n    fi\n    arr_len=$#\n    for i in $arr; do\n        if [[ $i -lt -$arr_len ]]; then\n            echo \"arr must be sorted\"\n            exit 1\n        fi\n        if [[ $i -gt $arr_len ]]; then\n            echo \"arr must be sorted\"\n            exit 1\n        fi\n    done\n    arr_len_minus_k=$arr_len-k\n    for i in $arr; do\n        if [[ $i -lt $arr_len_minus_k ]]; then\n            arr_max=$i\n            break\n        fi\n    done\n    arr_max_minus_k=$arr_max-k\n    for i in $arr; do\n        if [[ $i -gt $arr_max_minus_k ]]; then\n            arr_max=$i\n            break\n        fi\n    done\n    arr_max_minus_k_plus_1=$arr_max-1\n    for i in $arr; do\n        if [[ $i -gt $arr_max_minus_k_plus_1 ]]; then\n            arr_max=$i\n            break\n        fi\n    done\n    arr_max_minus_k_plus_2=$arr_max-2\n    for i in $arr; do\n        if [[ $i -gt $arr_max_minus_k_plus_2 ]]; then\n            arr_max=$i\n            break\n        fi\n    done\n    arr_max_minus_k_plus_3=$arr_max-3\n    for i in $arr; do\n        if [[ $i -gt $arr",
    "  arr=$1\n  k=$2\n  if [[ $k -gt $#arr ]]; then\n    echo \"Error: $k is greater than the number of elements in arr\"\n    exit 1\n  fi\n  if [[ $k -lt 0 ]]; then\n    echo \"Error: $k is less than 0\"\n    exit 1\n  fi\n  if [[ $k -eq 0 ]]; then\n    echo \"$arr\"\n    return\n  fi\n  arr_len=$#arr\n  if [[ $k -gt $arr_len ]]; then\n    k=$arr_len\n  fi\n  arr_len_minus_k=$arr_len-k\n  max_k_arr=$arr[0:$arr_len_minus_k]\n  max_k_arr_sort=$arr[$arr_len_minus_k:$arr_len]\n  max_k_arr_sort.sort()\n  max_k_arr_sort.reverse()\n  max_k_arr_sort_string=\"\"\n  for i in $max_k_arr_sort; do\n    max_k_arr_sort_string=$max_k_arr_sort_string\" \"$i\n  done\n  echo $max_k_arr_sort_string",
    "    arr=$1\n    k=$2\n    max=0\n    for i in $arr; do\n        if [ $i -gt $max ]; then\n            max=$i\n        fi\n    done\n    if [ $max -gt $k ]; then\n        echo $max\n    else\n        echo $k\n    fi",
    "  arr=$1\n  k=$2\n  max=0\n  for i in $arr; do\n    if [ $i -gt $max ]; then\n      max=$i\n    fi\n  done\n  if [ $k -gt $max ]; then\n    max=$k\n  fi\n  max_arr=$(echo $max)\n  max_arr_str=\"\"\n  for i in $max_arr; do\n    max_arr_str=$max_arr_str$i\n  done\n  echo $max_arr_str",
    "    arr=$1\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the length of arr\"\n        exit 1\n    fi\n    if [[ $k -eq 0 ]]; then\n        echo \"k cannot be zero\"\n        exit 1\n    fi\n    if [[ $k -eq 1 ]]; then\n        echo \"k cannot be one\"\n        exit 1\n    fi\n    if [[ $k -eq 2 ]]; then\n        echo \"k cannot be two\"\n        exit 1\n    fi\n    if [[ $k -eq 3 ]]; then\n        echo \"k cannot be three\"\n        exit 1\n    fi\n    if [[ $k -eq 4 ]]; then\n        echo \"k cannot be four\"\n        exit 1\n    fi\n    if [[ $k -eq 5 ]]; then\n        echo \"k cannot be five\"\n        exit 1\n    fi\n    if [[ $k -eq 6 ]]; then\n        echo \"k cannot be six\"\n        exit 1\n    fi\n    if [[ $k -eq 7 ]]; then\n        echo \"k cannot be seven\"\n        exit 1\n    fi\n    if [[ $k -eq 8 ]]; then\n        echo \"k cannot be eight\"\n        exit 1\n    fi\n    if [[ $k -eq 9 ]]; then\n        echo \"k cannot be nine\"\n        exit 1\n    fi\n    if [[ $k -eq 10 ]]; then\n        echo \"k cannot be ten\"\n        exit 1\n    fi\n    if [[ $k -eq 11 ]]; then\n        echo \"k cannot be eleven\"\n        exit 1\n    fi\n    if [[ $k -eq 12 ]]; then\n        echo \"k cannot be twelve\"\n        exit 1\n    fi\n    if [[ $k -eq 13 ]]; then\n        echo \"k cannot be thirteen\"\n        exit 1\n    fi\n    if [[ $k -eq 14 ]]; then\n        echo \"k cannot be fourteen\"\n        exit 1\n    fi\n    if [[ $k -eq 15 ]]; then\n        echo \"k cannot be fifteen\"",
    "    local arr=$1\n    local k=$2\n    arr=($arr)\n    k=$k\n    if [[ $k -gt $#arr ]]; then\n        echo \"Error: $k is greater than the number of elements in arr\"\n        exit 1\n    fi\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    ",
    "  arr=($1)\n  k=$2\n  if [[ $k -lt 0 ]]; then\n    echo \"k must be positive\"\n    exit 1\n  fi\n  if [[ $k -gt $# ]]; then\n    echo \"k must be less than $#\"\n    exit 1\n  fi\n  if [[ $k -eq 0 ]]; then\n    echo \"k must be positive\"\n    exit 1\n  fi\n  if [[ $k -eq 1 ]]; then\n    echo \"k must be greater than 1\"\n    exit 1\n  fi\n  if [[ $k -gt $# - 1 ]]; then\n    echo \"k must be less than $#\"\n    exit 1\n  fi\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr",
    "    arr=$1\n    k=$2\n    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    arr_len=$#\n    arr_len_max=0\n    for i in $arr; do\n        arr_len_max=$(($arr_len_max + 1))\n    done\n    if [ $arr_len_max -gt $k ]; then\n        echo \"The length of arr is too large.\"\n        exit 1\n    fi\n    arr_len_max=$(($arr_len_max - $k + 1))\n    arr_len_max_max=0\n    for i in $arr; do\n        arr_len_max_max=$(($arr_len_max_max + 1))\n    done\n    if [ $arr_len_max_max -gt $k ]; then\n        echo \"The length of arr is too large.\"\n        exit 1\n    fi\n    arr_len_max_max=$(($arr_len_max_max - $k + 1))\n    for i in $arr; do\n        if [ $arr_len_max_max -gt $i ]; then\n            arr_len_max_max=$(($arr_len_max_max - $i))\n        fi\n        if [ $arr_len_max -gt $i ]; then\n            arr_len_max=$(($arr_len_max - $i))\n        fi\n    done\n    arr_len_max_max=$(($arr_len_max_max - $k + 1))\n    arr_len_max_max_max=0\n    for i in $arr; do\n        arr_len_max_max_max=$(($arr_len_max_max_max + 1))\n    done\n    if [ $arr_len_max_max_max -gt $k ]; then\n        arr_len_max_max_max=$(($arr_len_max_max_max - $k))\n    fi\n    arr_len_max_max_max=$(($arr_len_max_max_max - $k + 1))\n    arr_len_max_max_max_max=0\n",
    "    arr=$1\n    k=$2\n    max=0\n    for i in $arr; do\n        if [ $i -gt $max ]; then\n            max=$i\n        fi\n    done\n    if [ $k -gt $max ]; then\n        max=$k\n    fi\n    max_arr=()\n    for i in $arr; do\n        if [ $i -eq $max ]; then\n            max_arr+=($i)\n        fi\n    done\n    echo $max_arr",
    "    arr=($1)\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the length of arr\"\n        exit 1\n    fi\n    for i in $arr; do\n        if [[ $i -lt -1000 ]]; then\n            echo \"arr element $i is out of range\"\n            exit 1\n        fi\n        if [[ $i -gt 1000 ]]; then\n            echo \"arr element $i is out of range\"\n            exit 1\n        fi\n    done\n    arr_sorted=$(sort $arr)\n    arr_sorted_length=$(wc -l $arr_sorted)\n    if [[ $arr_sorted_length -gt $k ]]; then\n        arr_sorted_length=$k\n    fi\n    arr_sorted_length_str=$(printf \"%d\" $arr_sorted_length)\n    arr_sorted_length_str_str=$(printf \"%s\" $arr_sorted_length_str)\n    arr_sorted_length_str_str_str=$(printf \"%s\" $arr_sorted_length_str_str)\n    echo $arr_sorted_length_str_str_str",
    "    local i j k max\n    i=1\n    while [[ $i -lt $# ]]; do\n        j=$i\n        while [[ $j -lt $# ]]; do\n            if [[ $($j) -gt $($i) ]]; then\n                max=$($j)\n            fi\n            j=$((j+1))\n        done\n        i=$((i+1))\n    done\n    k=$1\n    if [[ $k -gt $max ]]; then\n        max=$k\n    fi\n    echo $max",
    "    arr=($1)\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the length of arr\"\n        exit 1\n    fi\n    if [[ $k -eq 0 ]]; then\n        echo \"k cannot be 0\"\n        exit 1\n    fi\n    if [[ $k -eq 1 ]]; then\n        echo \"k cannot be 1\"\n        exit 1\n    fi\n    if [[ $k -gt 1 ]]; then\n        echo \"k cannot be greater than 1\"\n        exit 1\n    fi\n    if [[ $# -eq 1 ]]; then\n        echo \"arr cannot be empty\"\n        exit 1\n    fi\n    if [[ $# -gt 1 ]]; then\n        echo \"arr cannot have more than one element\"\n        exit 1\n    fi\n    if [[ $# -lt 2 ]]; then\n        echo \"arr must have at least two elements\"\n        exit 1\n    fi\n    if [[ $# -eq 2 ]]; then\n        echo \"arr must have at least two elements\"\n        exit 1\n    fi\n    if [[ $# -gt 2 ]]; then\n        echo \"arr must have at most two elements\"\n        exit 1\n    fi\n    if [[ $# -eq 2 ]]; then\n        echo \"arr must have at most two elements\"\n        exit 1\n    fi\n    if [[ $# -lt 3 ]]; then\n        echo \"arr must have at least three elements\"\n        exit 1\n    fi\n    if [[ $# -eq 3 ]]; then\n        echo \"arr must have at least three elements\"\n        exit 1\n    fi\n    if [[ $# -gt 3 ]]; then\n        echo \"arr must have at most three elements\"\n        exit 1\n    fi\n    if [[ $# -eq 3 ]]; then\n        echo \"arr must have at most three elements\"\n        exit 1\n    fi\n    if [[ $# -lt 4 ]]; then\n        echo \"arr must have at least four elements\"\n        exit 1\n    fi\n    if [[ $# -eq 4 ]]; then\n        echo",
    "    arr=($1)\n    k=$2\n    max_k=$(echo \"${arr[@]}\" | sort | uniq -c | sort -nr | head -n $k)\n    if [ -z \"$max_k\" ]; then\n        echo \"No maximum of k numbers\"\n    else\n        echo \"$max_k\"\n    fi",
    "    arr=($1)\n    k=$2\n    max_arr=($1)\n    max_k=$2\n    for ((i=0;i<$2;i++)); do\n        max_arr[i]=$arr[i]\n        max_k[i]=$k\n    done\n    for ((i=0;i<$2;i++)); do\n        for ((j=0;j<$2;j++)); do\n            if (max_k[j]<$k) {\n                max_arr[j]=$arr[j]\n                max_k[j]=$k\n            }\n        done\n    done\n    for ((i=0;i<$2;i++)); do\n        for ((j=0;j<$2;j++)); do\n            if (max_k[j]<$k) {\n                max_arr[j]=$arr[j]\n                max_k[j]=$k\n            }\n        done\n    done\n    for ((i=0;i<$2;i++)); do\n        for ((j=0;j<$2;j++)); do\n            if (max_k[j]<$k) {\n                max_arr[j]=$arr[j]\n                max_k[j]=$k\n            }\n        done\n    done\n    for ((i=0;i<$2;i++)); do\n        for ((j=0;j<$2;j++)); do\n            if (max_k[j]<$k) {\n                max_arr[j]=$arr[j]\n                max_k[j]=$k\n            }\n        done\n    done\n    for ((i=0;i<$2;i++)); do\n        for ((j=0;j<$2;j++)); do\n            if (max_k[j]<$k) {\n                max_arr[j]=$arr[j]\n                max_k[j]=$k\n            }\n        done\n    done\n    for ((i=0;i<$2;i++)); do\n        for ((j=0;j<$2;j++)); do\n            if",
    "    local i\n    local max\n    local max_index\n    local max_value\n    local arr\n    local k\n    local result\n    local tmp\n\n    arr=$1\n    k=$2\n    result=()\n    max_index=0\n    max_value=0\n    for i in \"${arr[@]}\"; do\n        tmp=${i}\n        if [ \"${tmp}\" -gt \"${max_value}\" ]; then\n            max_value=${tmp}\n            max_index=i\n        fi\n    done\n    if [ \"${max_index}\" -eq \"0\" ]; then\n        max_index=1\n    fi\n    for i in \"${arr[@]}\"; do\n        tmp=${i}\n        if [ \"${tmp}\" -eq \"${max_value}\" ]; then\n            result+=(${max_index})\n        fi\n    done\n    if [ \"${k}\" -gt \"${len(result)}\" ]; then\n        result=($(echo \"${arr[@]}\" | sort -n | head -n ${k}))\n    fi\n    return $result",
    "    arr=($1)\n    k=$2\n    if [ $# -gt 1 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $k -lt 0 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $k -gt $# ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr",
    "  arr=($1)\n  k=$2\n  if [ $# -eq 0 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $# -gt 2 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $# -lt 2 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $k -lt 0 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $k -gt $# ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($",
    "    # $1 = arr\n    # $2 = k\n    # $3 = max\n    # $4 = max_index\n    # $5 = max_value\n    # $6 = max_index_value\n    # $7 = max_value_index\n    # $8 = max_value_index_value\n    # $9 = max_value_index_value_index\n    # $10 = max_value_index_value_index_value\n    # $11 = max_value_index_value_index_value_index\n    # $12 = max_value_index_value_index_value_index_value\n    # $13 = max_value_index_value_index_value_index_value_index\n    # $14 = max_value_index_value_index_value_index_value_index_value\n    # $15 = max_value_index_value_index_value_index_value_index_value_index\n    # $16 = max_value_index_value_index_value_index_value_index_value_index_value\n    # $17 = max_value_index_value_index_value_index_value_index_value_index_value_index\n    # $18 = max_value_index_value_index_value_index_value_index_value_index_value_index_value\n    # $19 = max_value_index_value_index_value_index_value_index_value_index_value_index_value_index\n    # $20 = max_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value\n    # $21 = max_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index\n    # $22 = max_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value\n    # $23 = max_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index\n    # $",
    "  arr=$1\n  k=$2\n  if [[ $k -lt 0 ]]; then\n    k=0\n  fi\n  if [[ $k -gt $# ]]; then\n    k=$#\n  fi\n  if [[ $k -lt 0 ]]; then\n    k=0\n  fi\n  if [[ $k -gt $# ]]; then\n    k=$#\n  fi\n  if [[ $k -eq 0 ]]; then\n    arr=()\n  fi\n  arr=($arr)\n  arr=($arr[$k-1])\n  arr=($arr[$k-2])\n  arr=($arr[$k-3])\n  arr=($arr[$k-4])\n  arr=($arr[$k-5])\n  arr=($arr[$k-6])\n  arr=($arr[$k-7])\n  arr=($arr[$k-8])\n  arr=($arr[$k-9])\n  arr=($arr[$k-10])\n  arr=($arr[$k-11])\n  arr=($arr[$k-12])\n  arr=($arr[$k-13])\n  arr=($arr[$k-14])\n  arr=($arr[$k-15])\n  arr=($arr[$k-16])\n  arr=($arr[$k-17])\n  arr=($arr[$k-18])\n  arr=($arr[$k-19])\n  arr=($arr[$k-20])\n  arr=($arr[$k-21])\n  arr=($arr[$k-22])\n  arr=($arr[$k-23])\n  arr=($arr[$k-24])\n  arr=($arr[$k-25])\n  arr=($arr[$k-26])\n  arr=($arr[$k-27])\n  arr=($arr[$k-28])\n  arr=($arr[$k-29])\n  arr=($arr[$k-30])\n  arr=($arr[$k-31])\n  arr=($arr[$k-32])\n  arr=($arr[$k-",
    "    arr=($1)\n    k=$2\n    if [[ $k -gt $#arr ]]; then\n        echo \"ERROR: $0: k must be less than or equal to the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $k -lt 0 ]]; then\n        echo \"ERROR: $0: k must be greater than or equal to 0\"\n        exit 1\n    fi\n    if [[ $k -eq 0 ]]; then\n        echo \"$0: k must be greater than 0\"\n        exit 1\n    fi\n    if [[ $k -eq 1 ]]; then\n        echo \"$0: k must be greater than 1\"\n        exit 1\n    fi\n    if [[ $k -gt $#arr ]]; then\n        echo \"$0: k must be less than or equal to the number of elements in arr\"\n        exit 1\n    fi\n    arr=($arr[$k-1])\n    arr=($arr[$k-2])\n    arr=($arr[$k-3])\n    arr=($arr[$k-4])\n    arr=($arr[$k-5])\n    arr=($arr[$k-6])\n    arr=($arr[$k-7])\n    arr=($arr[$k-8])\n    arr=($arr[$k-9])\n    arr=($arr[$k-10])\n    arr=($arr[$k-11])\n    arr=($arr[$k-12])\n    arr=($arr[$k-13])\n    arr=($arr[$k-14])\n    arr=($arr[$k-15])\n    arr=($arr[$k-16])\n    arr=($arr[$k-17])\n    arr=($arr[$k-18])\n    arr=($arr[$k-19])\n    arr=($arr[$k-20])\n    arr=($arr[$k-21])\n    arr=($arr[$k-22])\n    arr=($arr[$k-23])\n    arr=($arr[$k-24])\n    arr=($arr[$k-25])\n    arr=($arr[$k-26])",
    "    # $1 = arr\n    # $2 = k\n    # $3 = max\n    # $4 = max_index\n    # $5 = max_value\n    # $6 = max_index_value\n    # $7 = max_value_index\n    # $8 = max_value_index_value\n    # $9 = max_value_index_value_index\n    # $10 = max_value_index_value_index_value\n    # $11 = max_value_index_value_index_value_index\n    # $12 = max_value_index_value_index_value_index_value\n    # $13 = max_value_index_value_index_value_index_value_index\n    # $14 = max_value_index_value_index_value_index_value_index_value\n    # $15 = max_value_index_value_index_value_index_value_index_value_index\n    # $16 = max_value_index_value_index_value_index_value_index_value_index_value\n    # $17 = max_value_index_value_index_value_index_value_index_value_index_value_index\n    # $18 = max_value_index_value_index_value_index_value_index_value_index_value_index_value\n    # $19 = max_value_index_value_index_value_index_value_index_value_index_value_index_value_index\n    # $20 = max_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value\n    # $21 = max_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index\n    # $22 = max_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value\n    # $23 = max_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index\n    # $",
    "    arr=($1)\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than $#\"\n        exit 1\n    fi\n    if [[ $k -eq 0 ]]; then\n        echo \"k cannot be 0\"\n        exit 1\n    fi\n    if [[ $k -eq 1 ]]; then\n        echo \"k cannot be 1\"\n        exit 1\n    fi\n    if [[ $k -lt $# - 1 ]]; then\n        echo \"k cannot be less than $# - 1\"\n        exit 1\n    fi\n    if [[ $k -gt $# - 1 ]]; then\n        echo \"k cannot be greater than $# - 1\"\n        exit 1\n    fi\n    if [[ $k -eq $# - 1 ]]; then\n        echo \"k cannot be equal to $# - 1\"\n        exit 1\n    fi\n    if [[ $k -eq $# ]]; then\n        echo \"k cannot be equal to $#\"\n        exit 1\n    fi\n    if [[ $k -lt $# ]]; then\n        echo \"k cannot be less than $#\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k cannot be greater than $#\"\n        exit 1\n    fi\n    if [[ $k -eq $# ]]; then\n        echo \"k cannot be equal to $#\"\n        exit 1\n    fi\n    if [[ $k -lt $# - 1 ]]; then\n        echo \"k cannot be less than $# - 1\"\n        exit 1\n    fi\n    if [[ $k -gt $# - 1 ]]; then\n        echo \"k cannot be greater than $# - 1\"\n        exit 1\n    fi\n    if [[ $k -eq $# - 1 ]]; then\n        echo \"k cannot be equal to $# - 1\"\n        exit 1\n    fi\n    if [[ $k -eq $# ]]; then\n        echo \"k cannot be equal to $#\"\n        exit 1\n    fi\n    if [[ $k -lt $",
    "    arr=($1)\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than $#\"\n        exit 1\n    fi\n    if [[ $k -eq 0 ]]; then\n        echo \"k must be greater than 0\"\n        exit 1\n    fi\n    if [[ $k -eq 1 ]]; then\n        echo \"k must be greater than 1\"\n        exit 1\n    fi\n    if [[ $k -lt $# ]]; then\n        echo \"k must be greater than $#\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than $#\"\n        exit 1\n    fi\n    if [[ $k -eq $# ]]; then\n        echo \"k must be less than $#\"\n        exit 1\n    fi\n    if [[ $k -lt $# ]]; then\n        echo \"k must be greater than $#\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than $#\"\n        exit 1\n    fi\n    if [[ $k -eq $# ]]; then\n        echo \"k must be less than $#\"\n        exit 1\n    fi\n    if [[ $k -lt $# ]]; then\n        echo \"k must be greater than $#\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than $#\"\n        exit 1\n    fi\n    if [[ $k -eq $# ]]; then\n        echo \"k must be less than $#\"\n        exit 1\n    fi\n    if [[ $k -lt $# ]]; then\n        echo \"k must be greater than $#\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than $#\"\n        exit 1\n    fi\n    if [[ $k -eq $# ]]; then\n        echo \"k must be less than $#\"\n        exit 1",
    "    local i\n    local j\n    local k\n    local arr\n    local max\n    local max_index\n    local max_value\n\n    arr=$1\n    k=$2\n    max_index=0\n    max_value=0\n    for i in \"${arr[@]}\"\n    do\n        j=i\n        for j in \"${arr[@]}\"\n        do\n            if [ \"$j\" -gt \"$max_value\" ]\n            then\n                max_value=$j\n                max_index=$((i-1))\n            fi\n        done\n    done\n\n    for i in \"${arr[@]}\"\n    do\n        if [ \"$i\" -gt \"$max_value\" ]\n        then\n            max_value=$i\n            max_index=$((i-1))\n        fi\n    done\n\n    if [ \"$max_index\" -eq \"$k\" ]\n    then\n        echo \"$max_value\"\n    else\n        echo \"$max_value $max_index\"\n    fi",
    "    arr=$1\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $k -eq 0 ]]; then\n        echo \"k cannot be 0\"\n        exit 1\n    fi\n    if [[ $k -eq 1 ]]; then\n        echo \"k cannot be 1\"\n        exit 1\n    fi\n    if [[ $k -gt 1 ]]; then\n        arr_len=$(expr $# - $k)\n        arr_len_str=$(printf \"%d\" $arr_len)\n        arr_len_str_split=$(echo $arr_len_str | tr '[:upper:]' '[:lower:]')\n        arr_len_str_split_split=$(echo $arr_len_str_split | tr '[:upper:]' '[:lower:]')\n        arr_len_str_split_split_split=$(echo $arr_len_str_split_split | tr '[:upper:]' '[:lower:]')\n        arr_len_str_split_split_split_split=$(echo $arr_len_str_split_split_split | tr '[:upper:]' '[:lower:]')\n        arr_len_str_split_split_split_split_split=$(echo $arr_len_str_split_split_split_split | tr '[:upper:]' '[:lower:]')\n        arr_len_str_split_split_split_split_split_split=$(echo $arr_len_str_split_split_split_split_split | tr '[:upper:]' '[:lower:]')\n        arr_len_str_split_split_split_split_split_split_split=$(echo $arr_len_str_split_split_split_split_split_split | tr '[:upper:]' '[:lower:]')\n        arr_len_str_split_split_split_split_split_split_split_split=$(echo $arr_len_str_split_split_split_split_split_split_",
    "    arr=($1)\n    k=$2\n    max_k=$(awk '{print $1}' \"${arr[0]}\" | sort -n | head -n $k)\n    for i in \"${arr[1]}\"\n    do\n        if [ \"${i}\" == \"${max_k[0]}\" ]; then\n            max_k=max_k[1:]\n        else\n            max_k=max_k[1:]\n            max_k[0]=\"${i}\"\n        fi\n    done\n    echo \"${max_k[@]}\"",
    "    arr=$1\n    k=$2\n    if [[ $k -gt $#arr ]]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    arr_len=$#arr\n    if [[ $arr_len -lt $k ]]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    arr_max=$arr[0]\n    for i in $arr[1:$arr_len]; do\n        if [[ $arr_max -lt $i ]]; then\n            arr_max=$i\n        fi\n    done\n    arr_max_k=$arr_max\n    for i in $arr[$arr_len:$arr_len+$k]; do\n        if [[ $arr_max_k -lt $i ]]; then\n            arr_max_k=$i\n        fi\n    done\n    arr_max_k_sorted=$arr_max_k\n    for i in $arr[$arr_len+$k:$arr_len+$k+$k]; do\n        if [[ $arr_max_k_sorted -lt $i ]]; then\n            arr_max_k_sorted=$i\n        fi\n    done\n    arr_max_k_sorted_sorted=$arr_max_k_sorted\n    for i in $arr[$arr_len+$k+$k:$arr_len+$k+$k+$k]; do\n        if [[ $arr_max_k_sorted_sorted -lt $i ]]; then\n            arr_max_k_sorted_sorted=$i\n        fi\n    done\n    arr_max_k_sorted_sorted_sorted=$arr_max_k_sorted_sorted\n    for i in $arr[$arr_len+$k+$k+$k:$arr_len+$k+$k+$k+$k]; do\n        if [[ $arr_max_k_sorted_sorted_sorted -lt $i ]]; then\n            arr_max_k_sorted_sorted_sorted=$i\n        fi\n    done\n    arr_max_k_sorted_",
    "    arr=$1\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $k -eq 0 ]]; then\n        echo \"k cannot be 0\"\n        exit 1\n    fi\n    if [[ $k -eq 1 ]]; then\n        echo \"k cannot be 1\"\n        exit 1\n    fi\n    if [[ $k -eq 2 ]]; then\n        echo \"k cannot be 2\"\n        exit 1\n    fi\n    if [[ $k -eq 3 ]]; then\n        echo \"k cannot be 3\"\n        exit 1\n    fi\n    if [[ $k -eq 4 ]]; then\n        echo \"k cannot be 4\"\n        exit 1\n    fi\n    if [[ $k -eq 5 ]]; then\n        echo \"k cannot be 5\"\n        exit 1\n    fi\n    if [[ $k -eq 6 ]]; then\n        echo \"k cannot be 6\"\n        exit 1\n    fi\n    if [[ $k -eq 7 ]]; then\n        echo \"k cannot be 7\"\n        exit 1\n    fi\n    if [[ $k -eq 8 ]]; then\n        echo \"k cannot be 8\"\n        exit 1\n    fi\n    if [[ $k -eq 9 ]]; then\n        echo \"k cannot be 9\"\n        exit 1\n    fi\n    if [[ $k -eq 10 ]]; then\n        echo \"k cannot be 10\"\n        exit 1\n    fi\n    if [[ $k -eq 11 ]]; then\n        echo \"k cannot be 11\"\n        exit 1\n    fi\n    if [[ $k -eq 12 ]]; then\n        echo \"k cannot be 12\"\n        exit 1\n    fi\n    if [[ $k -eq 13 ]]; then\n        echo \"k cannot be 13\"\n        exit 1\n    fi\n    if [[ $k -eq 14 ]]; then\n        echo \"k cannot be 14\"\n        exit 1\n    fi\n    if [[ $k -eq 15 ]]; then\n        echo \"k cannot be",
    "    arr=$1\n    k=$2\n    if [ $# -eq 0 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -gt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $k -lt $# ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $k -gt $# ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $k -eq $# ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    arr_len=$#\n    arr_len_minus_k=$arr_len-k\n    max_arr_len_minus_k=$arr_len_minus_k\n    max_arr_len_minus_k_minus_1=$max_arr_len_minus_k-1\n    max_arr_len_minus_k_minus_2=$max_arr_len_minus_k-2\n    max_arr_len_minus_k_minus_3=$max_arr_len_minus_k-3\n    max_arr_len_minus_k_minus_4=$max_arr_len_minus_k-4\n    max_arr_len_minus_k_minus_5=$max_arr_len_minus_k-5\n    max_arr_len_minus_k_minus_6=$max_arr_len_minus_k-6\n    max_arr_len_minus_k_minus_7=$max_arr_len_minus_k-7\n    max_arr_len_minus_k_minus_8=$max_arr_len_minus_k-8\n    max_arr_len_minus_k_minus_9=$max_arr_len_minus_k-9\n    max_arr_len_minus_k_minus_10=$max_arr_len_minus_k-10\n    max_arr_len_minus_k_minus_11",
    "    arr=($1)\n    k=$2\n    max_k=$(echo \"$arr\" | tr \" \" \"\\n\" | sort | uniq | wc -l)\n    if [ $k -gt $max_k ]; then\n        echo \"k is greater than max_k\"\n        exit 1\n    fi\n    if [ $k -lt 0 ]; then\n        echo \"k is less than 0\"\n        exit 1\n    fi\n    if [ $k -eq 0 ]; then\n        echo \"k is 0\"\n        exit 1\n    fi\n    if [ $k -gt $max_k ]; then\n        echo \"k is greater than max_k\"\n        exit 1\n    fi\n    if [ $k -lt $max_k ]; then\n        echo \"k is less than max_k\"\n        exit 1\n    fi\n    if [ $k -eq $max_k ]; then\n        echo \"k is equal to max_k\"\n        exit 1\n    fi\n    if [ $k -gt $max_k ]; then\n        echo \"k is greater than max_k\"\n        exit 1\n    fi\n    if [ $k -lt $max_k ]; then\n        echo \"k is less than max_k\"\n        exit 1\n    fi\n    if [ $k -eq $max_k ]; then\n        echo \"k is equal to max_k\"\n        exit 1\n    fi\n    if [ $k -gt $max_k ]; then\n        echo \"k is greater than max_k\"\n        exit 1\n    fi\n    if [ $k -lt $max_k ]; then\n        echo \"k is less than max_k\"\n        exit 1\n    fi\n    if [ $k -eq $max_k ]; then\n        echo \"k is equal to max_k\"\n        exit 1\n    fi\n    if [ $k -gt $max_k ]; then\n        echo \"k is greater than max_k\"\n        exit 1\n    fi\n    if [ $k -lt $max_k ]; then\n        echo \"k is less than max_k\"\n        exit 1\n    fi\n    if [ $k -eq $max_k ]; then\n        echo \"k is equal to",
    "    arr=($1)\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $k -eq 0 ]]; then\n        echo \"k cannot be 0\"\n        exit 1\n    fi\n    if [[ $k -eq 1 ]]; then\n        echo \"k cannot be 1\"\n        exit 1\n    fi\n    if [[ $k -eq 2 ]]; then\n        echo \"k cannot be 2\"\n        exit 1\n    fi\n    if [[ $k -eq 3 ]]; then\n        echo \"k cannot be 3\"\n        exit 1\n    fi\n    if [[ $k -eq 4 ]]; then\n        echo \"k cannot be 4\"\n        exit 1\n    fi\n    if [[ $k -eq 5 ]]; then\n        echo \"k cannot be 5\"\n        exit 1\n    fi\n    if [[ $k -eq 6 ]]; then\n        echo \"k cannot be 6\"\n        exit 1\n    fi\n    if [[ $k -eq 7 ]]; then\n        echo \"k cannot be 7\"\n        exit 1\n    fi\n    if [[ $k -eq 8 ]]; then\n        echo \"k cannot be 8\"\n        exit 1\n    fi\n    if [[ $k -eq 9 ]]; then\n        echo \"k cannot be 9\"\n        exit 1\n    fi\n    if [[ $k -eq 10 ]]; then\n        echo \"k cannot be 10\"\n        exit 1\n    fi\n    if [[ $k -eq 11 ]]; then\n        echo \"k cannot be 11\"\n        exit 1\n    fi\n    if [[ $k -eq 12 ]]; then\n        echo \"k cannot be 12\"\n        exit 1\n    fi\n    if [[ $k -eq 13 ]]; then\n        echo \"k cannot be 13\"\n        exit 1\n    fi\n    if [[ $k -eq 14 ]]; then\n        echo \"k cannot be 14\"\n        exit 1\n    fi\n    if [[ $k -eq 15 ]]; then\n        echo \"k",
    "  arr=$1\n  k=$2\n  if [[ $k -lt 0 ]]; then\n    echo \"k must be positive\"\n    exit 1\n  fi\n  if [[ $k -gt $# ]]; then\n    echo \"k must be less than the length of arr\"\n    exit 1\n  fi\n  if [[ $k -eq 0 ]]; then\n    echo \"k cannot be 0\"\n    exit 1\n  fi\n  if [[ $k -eq 1 ]]; then\n    echo \"k cannot be 1\"\n    exit 1\n  fi\n  if [[ $k -eq 2 ]]; then\n    echo \"k cannot be 2\"\n    exit 1\n  fi\n  if [[ $k -eq 3 ]]; then\n    echo \"k cannot be 3\"\n    exit 1\n  fi\n  if [[ $k -eq 4 ]]; then\n    echo \"k cannot be 4\"\n    exit 1\n  fi\n  if [[ $k -eq 5 ]]; then\n    echo \"k cannot be 5\"\n    exit 1\n  fi\n  if [[ $k -eq 6 ]]; then\n    echo \"k cannot be 6\"\n    exit 1\n  fi\n  if [[ $k -eq 7 ]]; then\n    echo \"k cannot be 7\"\n    exit 1\n  fi\n  if [[ $k -eq 8 ]]; then\n    echo \"k cannot be 8\"\n    exit 1\n  fi\n  if [[ $k -eq 9 ]]; then\n    echo \"k cannot be 9\"\n    exit 1\n  fi\n  if [[ $k -eq 10 ]]; then\n    echo \"k cannot be 10\"\n    exit 1\n  fi\n  if [[ $k -eq 11 ]]; then\n    echo \"k cannot be 11\"\n    exit 1\n  fi\n  if [[ $k -eq 12 ]]; then\n    echo \"k cannot be 12\"\n    exit 1\n  fi\n  if [[ $k -eq 13 ]]; then\n    echo \"k cannot be 13\"\n    exit 1\n  fi\n  if [[ $k -eq 14 ]]; then\n    echo \"k cannot be 14\"\n    exit 1\n  fi\n  if [[ $k -eq 15 ]]; then\n    echo \"k cannot be 15\"",
    "  arr=$1\n  k=$2\n  if [[ $k -lt 0 ]]; then\n    echo \"k must be positive\"\n    exit 1\n  fi\n  if [[ $k -gt $# ]]; then\n    echo \"k must be less than the number of elements in arr\"\n    exit 1\n  fi\n  if [[ $k -eq 0 ]]; then\n    echo \"k cannot be 0\"\n    exit 1\n  fi\n  arr_len=$#\n  max_k=0\n  for i in $arr; do\n    if [[ $i -gt $arr[0] ]]; then\n      echo \"arr is not sorted\"\n      exit 1\n    fi\n    if [[ $i -lt $arr[arr_len-1] ]]; then\n      if [[ $max_k -lt $k ]]; then\n        max_k=$k\n      fi\n    fi\n  done\n  arr_max_k=$max_k\n  for i in $arr; do\n    if [[ $i -gt $arr[arr_max_k-1] ]]; then\n      arr_max_k=$i\n    fi\n  done\n  arr_max_k_index=$arr_max_k-1\n  for i in $arr; do\n    if [[ $i -gt $arr[arr_max_k-1] ]]; then\n      arr_max_k_index=$i\n      break\n    fi\n  done\n  arr_max_k_index_str=$arr_max_k_index+1\n  arr_max_k_index_str_str=$arr_max_k_index_str+1\n  arr_max_k_index_str_str_str=$arr_max_k_index_str_str+1\n  arr_max_k_index_str_str_str_str=$arr_max_k_index_str_str_str+1\n  arr_max_k_index_str_str_str_str_str=$arr_max_k_index_str_str_str_str+1\n  arr_max_k_index_str_str_str_str_str_str=$arr_max_k_index_str_str_str",
    "    local i\n    local j\n    local max\n    local max_index\n    local max_value\n    local arr\n    local k\n    local result\n    local result_index\n    local result_value\n\n    arr=$1\n    k=$2\n    result=()\n    max_index=0\n    max_value=0\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_value ]; then\n            max_value=$i\n            max_index=$((i-1))\n        fi\n    done\n    if [ $max_value -gt $max_value ]; then\n        max_value=$max_value\n        max_index=$((max_index+1))\n    fi\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -eq $max_value ]; then\n            result_index=$((i-1))\n            result_value=$max_value\n        fi\n    done\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_value ]; then\n            max_value=$i\n            max_index=$((i-1))\n        fi\n    done\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -eq $max_value ]; then\n            result_index=$((i-1))\n            result_value=$max_value\n        fi\n    done\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_value ]; then\n            max_value=$i\n            max_index=$((i-1))\n        fi\n    done\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -eq $max_value ]; then\n            result_index=$((i-1))\n            result_value=$max_value\n        fi\n    done\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_value ]; then\n            max_value=$i\n            max_index=$((i-1))\n        fi\n    done\n    for i in \"${arr[@]}\"\n    do\n        if",
    "  arr=$1\n  k=$2\n  if [[ $k -lt 0 ]]; then\n    echo \"k must be positive\"\n    exit 1\n  fi\n  if [[ $k -gt $# ]]; then\n    echo \"k must be less than the number of elements in arr\"\n    exit 1\n  fi\n  if [[ $k -eq 0 ]]; then\n    echo \"k must be greater than 0\"\n    exit 1\n  fi\n  if [[ $k -eq 1 ]]; then\n    echo \"k must be greater than 1\"\n    exit 1\n  fi\n  if [[ $k -gt $# ]]; then\n    echo \"k must be less than the number of elements in arr\"\n    exit 1\n  fi\n  arr_len=$#\n  arr_len_minus_k=$((arr_len-k))\n  arr_minus_k=$(awk '{print $1}' $arr | sort | uniq | tail -n $k)\n  arr_minus_k_len=$(awk '{print $1}' $arr | sort | uniq | tail -n $k)\n  arr_minus_k_len_minus_k=$((arr_minus_k_len-k))\n  arr_minus_k_minus_k=$(awk '{print $1}' $arr | sort | uniq | tail -n $k)\n  arr_minus_k_minus_k_len=$((arr_minus_k_minus_k_len-k))\n  arr_minus_k_minus_k_len_minus_k=$((arr_minus_k_minus_k_len-k))\n  arr_minus_k_minus_k_len_minus_k_minus_k=$((arr_minus_k_minus_k_len-k))\n  arr_minus_k_minus_k_len_minus_k_minus_k_minus_k=$((arr_minus_k_minus_k_len-k))\n  arr_minus_k_minus_k_len_minus_k_minus_k_minus_k_minus_k=$((arr_minus_k_minus_k_len-k))\n  arr_minus_k_minus_",
    "    # $1 = array\n    # $2 = k\n    # $3 = max\n    # $4 = arr\n    # $5 = i\n    # $6 = j\n    # $7 = max_i\n    # $8 = max_j\n    # $9 = max_k\n    # $10 = max_arr\n    # $11 = max_arr_i\n    # $12 = max_arr_j\n    # $13 = max_arr_k\n    # $14 = max_arr_arr\n    # $15 = max_arr_arr_i\n    # $16 = max_arr_arr_j\n    # $17 = max_arr_arr_k\n    # $18 = max_arr_arr_arr\n    # $19 = max_arr_arr_arr_i\n    # $20 = max_arr_arr_arr_j\n    # $21 = max_arr_arr_arr_k\n    # $22 = max_arr_arr_arr_arr\n    # $23 = max_arr_arr_arr_arr_i\n    # $24 = max_arr_arr_arr_arr_j\n    # $25 = max_arr_arr_arr_arr_k\n    # $26 = max_arr_arr_arr_arr_arr\n    # $27 = max_arr_arr_arr_arr_arr_i\n    # $28 = max_arr_arr_arr_arr_arr_j\n    # $29 = max_arr_arr_arr_arr_arr_k\n    # $30 = max_arr_arr_arr_arr_arr_arr\n    # $31 = max_arr_arr_arr_arr_arr_arr_i\n    # $32 = max_arr_arr_arr_arr_arr_arr_j\n    # $33 = max_arr_arr_arr_arr_arr_arr_k\n    # $34 = max_arr_arr_arr_arr_arr_arr_arr\n    # $35 = max_arr_arr_arr_arr_arr_arr_arr_i\n    # $36 = max_arr_arr_arr_arr_arr_arr_arr_j\n    # $37",
    "    # $1 = arr\n    # $2 = k\n    arr=$1\n    k=$2\n    # $3 = max_arr\n    max_arr=$3\n    # $4 = max_k\n    max_k=$4\n    # $5 = i\n    i=$5\n    # $6 = j\n    j=$6\n    # $7 = k_arr\n    k_arr=$7\n    # $8 = k_max\n    k_max=$8\n    # $9 = k_max_arr\n    k_max_arr=$9\n    # $10 = k_max_k\n    k_max_k=$10\n    # $11 = k_max_k_arr\n    k_max_k_arr=$11\n    # $12 = k_max_k_max\n    k_max_k_max=$12\n    # $13 = k_max_k_max_arr\n    k_max_k_max_arr=$13\n    # $14 = k_max_k_max_k\n    k_max_k_max_k=$14\n    # $15 = k_max_k_max_k_arr\n    k_max_k_max_k_arr=$15\n    # $16 = k_max_k_max_k_max\n    k_max_k_max_k_max=$16\n    # $17 = k_max_k_max_k_max_arr\n    k_max_k_max_k_max_arr=$17\n    # $18 = k_max_k_max_k_max_k\n    k_max_k_max_k_max_k=$18\n    # $19 = k_max_k_max_k_max_k_arr\n    k_max_k_max_k_max_k_arr=$19\n    # $20 = k_max_k_max_k_max_k_max\n    k_max_k_max_k_max_k_max=$20\n    # $21 = k_max_k_max_k_max_k_max_arr\n    k_max_k_max_k_max_k_max_",
    "    local arr=$1\n    local k=$2\n    # $3 is a space-separated list\n    local result=$3\n    # $4 is a space-separated list\n    local max=$4\n    # $5 is a space-separated list\n    local min=$5\n\n    # $6 is a space-separated list\n    local i=$6\n\n    # $7 is a space-separated list\n    local j=$7\n\n    # $8 is a space-separated list\n    local kk=$8\n\n    # $9 is a space-separated list\n    local kkk=$9\n\n    # $10 is a space-separated list\n    local kkkk=$10\n\n    # $11 is a space-separated list\n    local kkkkk=$11\n\n    # $12 is a space-separated list\n    local kkkkkk=$12\n\n    # $13 is a space-separated list\n    local kkkkkkk=$13\n\n    # $14 is a space-separated list\n    local kkkkkkkk=$14\n\n    # $15 is a space-separated list\n    local kkkkkkkkk=$15\n\n    # $16 is a space-separated list\n    local kkkkkkkkkk=$16\n\n    # $17 is a space-separated list\n    local kkkkkkkkkkk=$17\n\n    # $18 is a space-separated list\n    local kkkkkkkkkkkk=$18\n\n    # $19 is a space-separated list\n    local kkkkkkkkkkkkk=$19\n\n    # $20 is a space-separated list\n    local kkkkkkkkkkkkkk=$20\n\n    # $21 is a space-separated list\n    local kkkkkkkkkkkkkkk=$21\n\n    # $22 is a space-separated list\n    local kkkkkkkkkkkkkkkk=$22\n\n    # $23 is a space-separated list\n    local kkkkkkkkkkkkkkkkk=$23\n\n    # $24 is a space-separated list\n    local kkkkkkkkkkkkkkkkkk=$24\n\n    # $25 is a space-separated list\n    local kkkkkkkkkkkkkkkkk",
    "    local i\n    local j\n    local k\n    local arr\n    local max\n    local max_index\n    local max_value\n    local max_index_value\n    local max_value_index\n    local max_value_index_value\n    local max_value_index_value_index\n\n    arr=$1\n    k=$2\n    max_index_value=0\n    max_value_index_value=0\n    max_value_index_value_index=0\n    max_value_index=0\n    max_index=0\n    max_value=0\n    max_index_value=0\n    max_value_index=0\n    max_value_index_value=0\n    max_value_index_value_index=0\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_value_index_value ]; then\n            max_value_index_value=i\n            max_value_index_value_index=max_index_value\n        fi\n        if [ $i -gt $max_value_index ]; then\n            max_value_index=i\n            max_value_index_value=max_index\n        fi\n        if [ $i -gt $max_value ]; then\n            max_value=i\n            max_value_index=max_index\n        fi\n        max_index=$((max_index + 1))\n        max_index_value=$((max_index_value + 1))\n        max_value_index_value_index=$((max_value_index_value_index + 1))\n    done\n    if [ $max_value_index_value -gt $max_value_index_value_index ]; then\n        max_value_index_value_index=max_value_index_value\n    fi\n    if [ $max_value_index -gt $max_value_index_value ]; then\n        max_value_index_value=max_value_index\n    fi\n    if [ $max_value -gt $max_value_index ]; then\n        max_value_index=max_value\n    fi\n    if [ $max_index -gt $max_value_index_",
    "    arr=$1\n    k=$2\n    if [ $# -gt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ];",
    "    arr=$1\n    k=$2\n    arr=($arr)\n    if [[ $k -gt $#arr ]]; then\n        echo \"ERROR: $k is greater than the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $k -eq 0 ]]; then\n        echo \"ERROR: $k is 0\"\n        exit 1\n    fi\n    if [[ $k -lt 0 ]]; then\n        echo \"ERROR: $k is negative\"\n        exit 1\n    fi\n    if [[ $k -gt $#arr ]]; then\n        echo \"ERROR: $k is greater than the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $k -eq $#arr ]]; then\n        echo \"ERROR: $k is equal to the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $k -lt $#arr ]]; then\n        echo \"ERROR: $k is less than the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $k -eq 1 ]]; then\n        echo \"ERROR: $k is 1\"\n        exit 1\n    fi\n    if [[ $k -eq 2 ]]; then\n        echo \"ERROR: $k is 2\"\n        exit 1\n    fi\n    if [[ $k -eq 3 ]]; then\n        echo \"ERROR: $k is 3\"\n        exit 1\n    fi\n    if [[ $k -eq 4 ]]; then\n        echo \"ERROR: $k is 4\"\n        exit 1\n    fi\n    if [[ $k -eq 5 ]]; then\n        echo \"ERROR: $k is 5\"\n        exit 1\n    fi\n    if [[ $k -eq 6 ]]; then\n        echo \"ERROR: $k is 6\"\n        exit 1\n    fi\n    if [[ $k -eq 7 ]]; then\n        echo \"ERROR: $k is 7\"\n        exit 1\n    fi\n    if [[ $k -eq 8 ]]; then\n        echo \"ERROR: $k is 8\"\n        exit 1\n    fi\n    if [[ $k -eq 9 ]]; then\n        echo \"ERROR: $k is 9\"\n        exit 1\n    fi\n    if [[ $k -eq 10 ]",
    "  arr=$1\n  k=$2\n  if [[ $k -gt $#arr ]]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [[ $k -lt 0 ]]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [[ $k -eq 0 ]]; then\n    echo \"$arr\"\n    exit 0\n  fi\n  arr_len=$#arr\n  if [[ $k -gt $arr_len ]]; then\n    k=$k-$arr_len\n  fi\n  arr_len_minus_k=$arr_len-k\n  arr_minus_k=$(echo $arr | tr \" \" \"\\\\n\")\n  arr_minus_k_len=$#arr_minus_k\n  arr_minus_k_len_minus_k=$arr_minus_k_len-k\n  arr_minus_k_minus_k=$arr_minus_k[0:$arr_minus_k_len_minus_k]\n  arr_minus_k_minus_k_sorted=$arr_minus_k_minus_k | sort -n | head -n $k\n  arr_minus_k_minus_k_sorted_sorted=$arr_minus_k_minus_k_sorted | sort -n | head -n $k\n  arr_minus_k_minus_k_sorted_sorted_sorted=$arr_minus_k_minus_k_sorted_sorted | sort -n | head -n $k\n  arr_minus_k_minus_k_sorted_sorted_sorted_sorted=$arr_minus_k_minus_k_sorted_sorted_sorted | sort -n | head -n $k\n  arr_minus_k_minus_k_sorted_sorted_sorted_sorted_sorted=$arr_minus_k_minus_k_sorted_sorted_sorted_sorted | sort -n | head -n $k\n  arr_minus_k_minus_k_sorted_sorted_sorted_sorted_sorted_sorted=$arr_minus_k_minus_k_sorted_s",
    "    arr=$1\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $k -eq 0 ]]; then\n        echo \"k cannot be 0\"\n        exit 1\n    fi\n    if [[ $k -eq 1 ]]; then\n        echo \"k cannot be 1\"\n        exit 1\n    fi\n    if [[ $k -eq 2 ]]; then\n        echo \"k cannot be 2\"\n        exit 1\n    fi\n    if [[ $k -eq 3 ]]; then\n        echo \"k cannot be 3\"\n        exit 1\n    fi\n    if [[ $k -eq 4 ]]; then\n        echo \"k cannot be 4\"\n        exit 1\n    fi\n    if [[ $k -eq 5 ]]; then\n        echo \"k cannot be 5\"\n        exit 1\n    fi\n    if [[ $k -eq 6 ]]; then\n        echo \"k cannot be 6\"\n        exit 1\n    fi\n    if [[ $k -eq 7 ]]; then\n        echo \"k cannot be 7\"\n        exit 1\n    fi\n    if [[ $k -eq 8 ]]; then\n        echo \"k cannot be 8\"\n        exit 1\n    fi\n    if [[ $k -eq 9 ]]; then\n        echo \"k cannot be 9\"\n        exit 1\n    fi\n    if [[ $k -eq 10 ]]; then\n        echo \"k cannot be 10\"\n        exit 1\n    fi\n    if [[ $k -eq 11 ]]; then\n        echo \"k cannot be 11\"\n        exit 1\n    fi\n    if [[ $k -eq 12 ]]; then\n        echo \"k cannot be 12\"\n        exit 1\n    fi\n    if [[ $k -eq 13 ]]; then\n        echo \"k cannot be 13\"\n        exit 1\n    fi\n    if [[ $k -eq 14 ]]; then\n        echo \"k cannot be 14\"\n        exit 1\n    fi\n    if [[ $k -eq 15 ]]; then\n        echo \"k cannot be",
    "    local i j k max_i max_j max_k\n    for ((i=1; i<=${#1}; i++)); do\n        max_i=$((i-1))\n        for ((j=i+1; j<=${#1}; j++)); do\n            max_j=$((j-1))\n            max_k=$((k-1))\n            if [[ $max_i - $max_j + 1 > $max_k ]]; then\n                max_k=$((k-1))\n                max_j=$((j-1))\n            fi\n            if [[ $max_i - $max_j + 1 == $max_k ]]; then\n                if [[ $2 - $max_i + 1 > $max_k ]]; then\n                    max_k=$((k-1))\n                    max_i=$((i-1))\n                fi\n            fi\n        done\n    done\n    echo $max_i $max_j $max_k",
    "    arr=$1\n    k=$2\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr",
    "    arr=($1)\n    k=$2\n    if [ $# -gt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt",
    "    # $1 = arr\n    # $2 = k\n    # $3 = max_arr\n    # $4 = max_k\n    # $5 = max_k_arr\n    # $6 = max_k_arr_index\n    # $7 = max_k_arr_index_arr\n    # $8 = max_k_arr_index_arr_index\n    # $9 = max_k_arr_index_arr_index_arr\n    # $10 = max_k_arr_index_arr_index_arr_index_arr\n    # $11 = max_k_arr_index_arr_index_arr_index_arr_index_arr_index\n    # $12 = max_k_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr\n    # $13 = max_k_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index\n    # $14 = max_k_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index\n    # $15 = max_k_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index\n    # $16 = max_k_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_",
    "    arr=$1\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the length of arr\"\n        exit 1\n    fi\n    if [[ $k -eq 0 ]]; then\n        echo \"k cannot be zero\"\n        exit 1\n    fi\n    if [[ $k -eq 1 ]]; then\n        echo \"k cannot be one\"\n        exit 1\n    fi\n    if [[ $k -lt $# ]]; then\n        arr_len=$k\n    else\n        arr_len=$#\n    fi\n    arr_len_str=$(printf \"%d\" $arr_len)\n    arr_len_str_str=$(printf \"%s\" $arr_len_str)\n    arr_len_str_str_str=$(printf \"%s\" $arr_len_str_str)\n    arr_len_str_str_str_str=$(printf \"%s\" $arr_len_str_str_str)\n    arr_len_str_str_str_str_str=$(printf \"%s\" $arr_len_str_str_str_str)\n    arr_len_str_str_str_str_str_str=$(printf \"%s\" $arr_len_str_str_str_str_str)\n    arr_len_str_str_str_str_str_str_str=$(printf \"%s\" $arr_len_str_str_str_str_str_str)\n    arr_len_str_str_str_str_str_str_str_str=$(printf \"%s\" $arr_len_str_str_str_str_str_str_str)\n    arr_len_str_str_str_str_str_str_str_str_str=$(printf \"%s\" $arr_len_str_str_str_str_str_str_str_str)\n    arr_len_str_str_str_str_str_str_str_str_str_str=$(printf \"%s\" $arr_len_str_str_str_str_str_",
    "  arr=($1)\n  k=$2\n  if [[ $k -lt 0 ]]; then\n    echo \"k must be positive\"\n    exit 1\n  fi\n  if [[ $k -gt $# ]]; then\n    echo \"k must be less than the number of elements in arr\"\n    exit 1\n  fi\n  arr=($arr)\n  if [[ $k -eq 1 ]]; then\n    echo \"$arr\"\n  elif [[ $k -eq 2 ]]; then\n    echo \"$arr[0] $arr[1]\"\n  elif [[ $k -eq 3 ]]; then\n    echo \"$arr[0] $arr[1] $arr[2]\"\n  else\n    for i in $(seq 1 $k); do\n      echo \"$arr[$i]\"\n    done\n  fi",
    "    # $1 = arr\n    # $2 = k\n    # $3 = max_arr\n    # $4 = max_k\n    # $5 = max_index\n    # $6 = max_value\n    # $7 = max_index_value\n    # $8 = max_index_value_index\n    # $9 = max_index_value_value\n    # $10 = max_index_value_index_value\n    # $11 = max_index_value_value_index\n    # $12 = max_index_value_value_index_value\n    # $13 = max_index_value_value_index_value_index\n    # $14 = max_index_value_value_index_value_index_value\n    # $15 = max_index_value_value_index_value_index_value_index\n    # $16 = max_index_value_value_index_value_index_value_index_value\n    # $17 = max_index_value_value_index_value_index_value_index_value_index\n    # $18 = max_index_value_value_index_value_index_value_index_value_index_value\n    # $19 = max_index_value_value_index_value_index_value_index_value_index_value_index\n    # $20 = max_index_value_value_index_value_index_value_index_value_index_value_index_value\n    # $21 = max_index_value_value_index_value_index_value_index_value_index_value_index_value_index\n    # $22 = max_index_value_value_index_value_index_value_index_value_index_value_index_value_index_value\n    # $23 = max_index_value_value_index_value_index_value_index_value_index_value_index_value_index_value_index\n    # $24 = max_index_value_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value\n    # $25 = max_index_value_value_index_value_index",
    "    local i\n    local j\n    local k\n    local arr\n    local max\n    local max_index\n    local max_value\n    local max_value_index\n    local max_value_value\n\n    arr=$1\n    k=$2\n    max_index=0\n    max_value=0\n    max_value_index=0\n    max_value_value=0\n\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_value ]; then\n            max_value=i\n            max_value_index=i\n            max_value_value=1\n        else\n            if [ $i -gt $max_value_value ]; then\n                max_value_value=i\n                max_value_index=i\n            fi\n        fi\n    done\n\n    if [ $max_value_value -gt $max_value ]; then\n        max_value_value=$max_value\n        max_value_index=$max_value_index\n    fi\n\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_value_value ]; then\n            max_value_value=i\n            max_value_index=i\n        fi\n    done\n\n    max_value_value=$max_value_value\n    max_value_index=$max_value_index\n\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_value ]; then\n            max_value=i\n            max_index=i\n        fi\n    done\n\n    max_value=$max_value\n    max_index=$max_index\n\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_value ]; then\n            max_value=i\n            max_index=i\n        fi\n    done\n\n    max_value=$max_value\n    max_index=$max_index\n\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_value ]; then\n            max_value=i\n            max_index=i\n        fi\n    done\n\n    max_value=$max_value\n    max_index",
    "    arr=($1)\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $# -lt $k ]]; then\n        echo \"arr must have at least k elements\"\n        exit 1\n    fi\n    arr=($arr[$k-1])\n    arr=($arr[$k-2])\n    arr=($arr[$k-3])\n    arr=($arr[$k-4])\n    arr=($arr[$k-5])\n    arr=($arr[$k-6])\n    arr=($arr[$k-7])\n    arr=($arr[$k-8])\n    arr=($arr[$k-9])\n    arr=($arr[$k-10])\n    arr=($arr[$k-11])\n    arr=($arr[$k-12])\n    arr=($arr[$k-13])\n    arr=($arr[$k-14])\n    arr=($arr[$k-15])\n    arr=($arr[$k-16])\n    arr=($arr[$k-17])\n    arr=($arr[$k-18])\n    arr=($arr[$k-19])\n    arr=($arr[$k-20])\n    arr=($arr[$k-21])\n    arr=($arr[$k-22])\n    arr=($arr[$k-23])\n    arr=($arr[$k-24])\n    arr=($arr[$k-25])\n    arr=($arr[$k-26])\n    arr=($arr[$k-27])\n    arr=($arr[$k-28])\n    arr=($arr[$k-29])\n    arr=($arr[$k-30])\n    arr=($arr[$k-31])\n    arr=($arr[$k-32])\n    arr=($arr[$k-33])\n    arr=($arr[$k",
    "    arr=($1)\n    k=$2\n    if [ $# -gt 1 ]; then\n        echo \"Usage: maximum arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: maximum arr k\"\n        exit 1\n    fi\n    if [ $# -lt 3 ]; then\n        echo \"Usage: maximum arr k\"\n        exit 1\n    fi\n    if [ $# -lt 4 ]; then\n        echo \"Usage: maximum arr k\"\n        exit 1\n    fi\n    if [ $# -lt 5 ]; then\n        echo \"Usage: maximum arr k\"\n        exit 1\n    fi\n    if [ $# -lt 6 ]; then\n        echo \"Usage: maximum arr k\"\n        exit 1\n    fi\n    if [ $# -lt 7 ]; then\n        echo \"Usage: maximum arr k\"\n        exit 1\n    fi\n    if [ $# -lt 8 ]; then\n        echo \"Usage: maximum arr k\"\n        exit 1\n    fi\n    if [ $# -lt 9 ]; then\n        echo \"Usage: maximum arr k\"\n        exit 1\n    fi\n    if [ $# -lt 10 ]; then\n        echo \"Usage: maximum arr k\"\n        exit 1\n    fi\n    if [ $# -lt 11 ]; then\n        echo \"Usage: maximum arr k\"\n        exit 1\n    fi\n    if [ $# -lt 12 ]; then\n        echo \"Usage: maximum arr k\"\n        exit 1\n    fi\n    if [ $# -lt 13 ]; then\n        echo \"Usage: maximum arr k\"\n        exit 1\n    fi\n    if [ $# -lt 14 ]; then\n        echo \"Usage: maximum arr k\"\n        exit 1\n    fi\n    if [ $# -lt 15 ]; then\n        echo \"Usage: maximum arr k\"\n        exit 1\n    fi\n    if [ $# -lt 16 ]; then\n        echo \"Usage: maximum arr k\"\n        exit 1\n    fi\n    if [ $# -lt 17 ]; then\n        echo \"Usage: maximum arr k\"\n        exit 1\n    fi\n    if [ $# -lt 18 ]; then\n        echo \"Usage: maximum arr k\"\n        exit 1",
    "    arr=($1)\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the length of arr\"\n        exit 1\n    fi\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($",
    "    arr=$1\n    k=$2\n    if [ -z \"$arr\" ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ -z \"$k\" ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ -z \"$arr\" ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ -z \"$arr\" ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ -z \"$arr\" ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ -z \"$arr\" ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ -z \"$arr\" ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ -z \"$arr\" ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ -z \"$arr\" ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ -z \"$arr\" ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ -z \"$arr\" ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ -z \"$arr\" ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ -z \"$arr\" ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ -z \"$arr\" ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ -z \"$arr\" ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ -z \"$arr\" ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ -z \"$arr\" ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ -z \"$arr\" ];",
    "    arr=$1\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $# -lt $k ]]; then\n        echo \"arr must have at least k elements\"\n        exit 1\n    fi\n    if [[ $# -gt $k ]]; then\n        echo \"arr must have at most k elements\"\n        exit 1\n    fi\n    arr_len=$#\n    arr_max=$(sort -r $arr | tail -n $k)\n    arr_min=$(sort -r $arr | head -n $k)\n    arr_max_len=$(echo $arr_max | wc -c)\n    arr_min_len=$(echo $arr_min | wc -c)\n    if [[ $arr_max_len -gt $arr_min_len ]]; then\n        echo \"arr_max_len must be less than or equal to arr_min_len\"\n        exit 1\n    fi\n    if [[ $arr_max_len -lt $k ]]; then\n        arr_max_len=$k\n    fi\n    if [[ $arr_min_len -gt $k ]]; then\n        arr_min_len=$k\n    fi\n    arr_max_len_str=$(echo $arr_max_len | tr -d ' ')\n    arr_min_len_str=$(echo $arr_min_len | tr -d ' ')\n    arr_max_len_str_num=$(echo $arr_max_len_str | wc -c)\n    arr_min_len_str_num=$(echo $arr_min_len_str | wc -c)\n    if [[ $arr_max_len_str_num -gt $arr_min_len_str_num ]]; then\n        echo \"arr_max_len_str_num must be less than or equal to arr_min_len_str_num\"\n        exit 1\n    fi\n    if [[ $arr_max_len",
    "    arr=($1)\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $k -eq 0 ]]; then\n        echo \"k cannot be 0\"\n        exit 1\n    fi\n    if [[ $k -eq 1 ]]; then\n        echo \"k cannot be 1\"\n        exit 1\n    fi\n    if [[ $k -eq 2 ]]; then\n        echo \"k cannot be 2\"\n        exit 1\n    fi\n    if [[ $k -eq 3 ]]; then\n        echo \"k cannot be 3\"\n        exit 1\n    fi\n    if [[ $k -eq 4 ]]; then\n        echo \"k cannot be 4\"\n        exit 1\n    fi\n    if [[ $k -eq 5 ]]; then\n        echo \"k cannot be 5\"\n        exit 1\n    fi\n    if [[ $k -eq 6 ]]; then\n        echo \"k cannot be 6\"\n        exit 1\n    fi\n    if [[ $k -eq 7 ]]; then\n        echo \"k cannot be 7\"\n        exit 1\n    fi\n    if [[ $k -eq 8 ]]; then\n        echo \"k cannot be 8\"\n        exit 1\n    fi\n    if [[ $k -eq 9 ]]; then\n        echo \"k cannot be 9\"\n        exit 1\n    fi\n    if [[ $k -eq 10 ]]; then\n        echo \"k cannot be 10\"\n        exit 1\n    fi\n    if [[ $k -eq 11 ]]; then\n        echo \"k cannot be 11\"\n        exit 1\n    fi\n    if [[ $k -eq 12 ]]; then\n        echo \"k cannot be 12\"\n        exit 1\n    fi\n    if [[ $k -eq 13 ]]; then\n        echo \"k cannot be 13\"\n        exit 1\n    fi\n    if [[ $k -eq 14 ]]; then\n        echo \"k cannot be 14\"\n        exit 1\n    fi\n    if [[ $k -eq 15 ]]; then\n        echo \"k",
    "    arr=($1)\n    k=$2\n    if [ $# -eq 0 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -gt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $k -lt 0 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $k -gt $# ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $k -gt len(arr) ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $k -eq len(arr) ]; then\n        echo \"${arr[@]}\"\n        exit 0\n    fi\n    for i in \"${arr[@]}\"\n    do\n        if [ $k -eq 1 ]; then\n            echo \"$i\"\n            exit 0\n        fi\n        if [ $i -lt $k ]; then\n            continue\n        fi\n        if [ $i -gt $k ]; then\n            continue\n        fi\n        if [ $i -lt arr[0] ]; then\n            continue\n        fi\n        if [ $i -gt arr[$#-1] ]; then\n            continue\n        fi\n        echo \"$i\"\n    done",
    "    local i\n    local j\n    local max\n    local max_index\n    local max_value\n    local max_value_index\n    local arr\n    local k\n    local arr_len\n    local arr_index\n    local arr_value\n    local arr_value_index\n\n    arr=$1\n    k=$2\n    arr_len=$(len $arr)\n    arr_index=$1\n    arr_value=$2\n    max_index=0\n    max_value=0\n    max_value_index=0\n    for ((i=0;i<arr_len;i++)); do\n        arr_value_index=$(expr $i + 1)\n        arr_value=$($arr[$arr_index])\n        if [ $arr_value -lt $arr_value_index ]; then\n            if [ $max_value -lt $arr_value ]; then\n                max_value=$arr_value\n                max_value_index=$arr_value_index\n                max_index=$arr_index\n            fi\n        fi\n    done\n    echo $max_value",
    "  arr=($1)\n  k=$2\n  if [[ $k -lt 0 ]]; then\n    echo \"k must be positive\"\n    exit 1\n  fi\n  if [[ $k -gt $# ]]; then\n    echo \"k must be less than the number of elements in arr\"\n    exit 1\n  fi\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr",
    "    arr=($1)\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $k -eq 0 ]]; then\n        echo \"k cannot be zero\"\n        exit 1\n    fi\n    if [[ $k -eq 1 ]]; then\n        echo \"k cannot be one\"\n        exit 1\n    fi\n    if [[ $k -eq 2 ]]; then\n        echo \"k cannot be two\"\n        exit 1\n    fi\n    if [[ $k -eq 3 ]]; then\n        echo \"k cannot be three\"\n        exit 1\n    fi\n    if [[ $k -eq 4 ]]; then\n        echo \"k cannot be four\"\n        exit 1\n    fi\n    if [[ $k -eq 5 ]]; then\n        echo \"k cannot be five\"\n        exit 1\n    fi\n    if [[ $k -eq 6 ]]; then\n        echo \"k cannot be six\"\n        exit 1\n    fi\n    if [[ $k -eq 7 ]]; then\n        echo \"k cannot be seven\"\n        exit 1\n    fi\n    if [[ $k -eq 8 ]]; then\n        echo \"k cannot be eight\"\n        exit 1\n    fi\n    if [[ $k -eq 9 ]]; then\n        echo \"k cannot be nine\"\n        exit 1\n    fi\n    if [[ $k -eq 10 ]]; then\n        echo \"k cannot be ten\"\n        exit 1\n    fi\n    if [[ $k -eq 11 ]]; then\n        echo \"k cannot be eleven\"\n        exit 1\n    fi\n    if [[ $k -eq 12 ]]; then\n        echo \"k cannot be twelve\"\n        exit 1\n    fi\n    if [[ $k -eq 13 ]]; then\n        echo \"k cannot be thirteen\"\n        exit 1\n    fi\n    if [[ $k -eq 14 ]]; then\n        echo \"k cannot be fourteen\"\n        exit 1\n    fi\n    if [[ $k -eq 15 ]]; then\n        echo \"k",
    "    local i\n    local max\n    local max_index\n    local max_value\n    local arr\n    local k\n    local arr_len\n    local arr_index\n    local arr_value\n    local arr_max_index\n    local arr_max_value\n    local arr_max_value_index\n    local arr_max_value_value\n    local arr_max_value_value_index\n\n    arr=$1\n    k=$2\n    arr_len=${#arr[@]}\n    arr_index=0\n    arr_value=0\n    arr_max_index=0\n    arr_max_value=0\n    arr_max_value_index=0\n    arr_max_value_value=0\n    max_index=0\n    max_value=0\n    max_value_index=0\n    max_value_value=0\n\n    while arr_index < arr_len {\n        arr_value=${arr[arr_index]}\n        arr_index=arr_index+1\n        if arr_value > max_value {\n            max_value=arr_value\n            max_value_index=arr_index-1\n            max_value_value=arr_value\n        }\n        if arr_value > max_value_value {\n            max_value_value=arr_value\n            max_value_value_index=arr_index-1\n        }\n        if arr_value > max_value_value_value {\n            max_value_value_value=arr_value\n            max_value_value_index=arr_index-1\n            max_value_value_value=arr_value\n        }\n        if arr_value > max_value_value_value_value {\n            max_value_value_value_value=arr_value\n            max_value_value_value_index=arr_index-1\n            max_value_value_value_value=arr_value\n        }\n        if arr_value > max_value_value_value_value_value {\n            max_value_value_value_value_value=arr_value\n            max_value_value_value_value_index=arr_index-1\n            max_value_",
    "    arr=($1)\n    k=$2\n    max_k=$(echo \"${arr[@]}\" | sort | uniq | wc -l)\n    if [ $k -gt $max_k ]; then\n        echo \"ERROR: $k is greater than $max_k\"\n        exit 1\n    fi\n    if [ $k -lt 0 ]; then\n        echo \"ERROR: $k is less than 0\"\n        exit 1\n    fi\n    if [ $k -gt len(arr) ]; then\n        echo \"ERROR: $k is greater than $len(arr)\"\n        exit 1\n    fi\n    if [ $k -lt len(arr) ]; then\n        echo \"ERROR: $k is less than $len(arr)\"\n        exit 1\n    fi\n    echo \"${arr[$k-1]}\"",
    "  arr=($1)\n  k=$2\n  if [[ $k -lt 0 ]]; then\n    echo \"k must be positive\"\n    exit 1\n  fi\n  if [[ $k -gt $# ]]; then\n    echo \"k must be less than the number of elements in arr\"\n    exit 1\n  fi\n  if [[ $k -eq 0 ]]; then\n    echo \"k cannot be 0\"\n    exit 1\n  fi\n  if [[ $k -eq 1 ]]; then\n    echo \"k cannot be 1\"\n    exit 1\n  fi\n  if [[ $k -gt 1 ]]; then\n    for i in $arr; do\n      if [[ $i -ge $k ]]; then\n        echo $i\n        exit 0\n      fi\n    done\n    echo \"k is too large\"\n    exit 1\n  fi\n  if [[ $k -eq 2 ]]; then\n    echo \"$arr\"\n    exit 0\n  fi\n  if [[ $k -lt 2 ]]; then\n    for i in $arr; do\n      if [[ $i -ge $k ]]; then\n        echo $i\n        exit 0\n      fi\n    done\n    echo \"k is too small\"\n    exit 1\n  fi\n  if [[ $k -eq 3 ]]; then\n    echo \"$arr\"\n    exit 0\n  fi\n  if [[ $k -lt 3 ]]; then\n    for i in $arr; do\n      if [[ $i -ge $k ]]; then\n        echo $i\n        exit 0\n      fi\n    done\n    echo \"k is too small\"\n    exit 1\n  fi\n  if [[ $k -eq 4 ]]; then\n    echo \"$arr\"\n    exit 0\n  fi\n  if [[ $k -lt 4 ]]; then\n    for i in $arr; do\n      if [[ $i -ge $k ]]; then\n        echo $i\n        exit 0\n      fi\n    done\n    echo \"k is too small\"\n    exit 1\n  fi\n  if [[ $k -eq 5 ]]; then\n    echo \"$arr\"\n    exit 0\n  fi\n  if [[ $k -lt 5 ]]; then\n    for i in $arr; do",
    "    arr=$1\n    k=$2\n    max_k=$3\n    max_k_arr=$4\n    max_k_arr_len=$5\n    max_k_arr_idx=$6\n    max_k_arr_idx_len=$7\n    max_k_arr_idx_idx=$8\n    max_k_arr_idx_idx_len=$9\n    max_k_arr_idx_idx_idx=$10\n    max_k_arr_idx_idx_idx_len=$11\n    max_k_arr_idx_idx_idx_idx_len=$12\n    max_k_arr_idx_idx_idx_idx_idx_len=$13\n    max_k_arr_idx_idx_idx_idx_idx_idx_len=$14\n    max_k_arr_idx_idx_idx_idx_idx_idx_idx_len=$15\n    max_k_arr_idx_idx_idx_idx_idx_idx_idx_idx_len=$16\n    max_k_arr_idx_idx_idx_idx_idx_idx_idx_idx_idx_len=$17\n    max_k_arr_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_len=$18\n    max_k_arr_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_len=$19\n    max_k_arr_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_len=$20\n    max_k_arr_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_len=$21\n    max_k_arr_idx_idx_id",
    "    arr=($1)\n    k=$2\n    if [[ $k -gt $#arr ]]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    arr=($arr)\n    if [[ $k -eq $#arr ]]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [[ $k -lt 0 ]]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [[ $k -gt $#arr ]]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=(",
    "    arr=$1\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $k -eq 0 ]]; then\n        echo \"k cannot be zero\"\n        exit 1\n    fi\n    if [[ $k -eq 1 ]]; then\n        echo \"k cannot be 1\"\n        exit 1\n    fi\n    if [[ $k -gt 1 ]]; then\n        echo \"k cannot be greater than 1\"\n        exit 1\n    fi\n    if [[ $k -lt $# ]]; then\n        arr_len=$k\n    else\n        arr_len=$#\n    fi\n    arr_len_minus_k=$arr_len-k\n    arr_len_minus_k_plus_1=$arr_len-k-1\n    arr_len_minus_k_plus_2=$arr_len-k-2\n    arr_len_minus_k_plus_3=$arr_len-k-3\n    arr_len_minus_k_plus_4=$arr_len-k-4\n    arr_len_minus_k_plus_5=$arr_len-k-5\n    arr_len_minus_k_plus_6=$arr_len-k-6\n    arr_len_minus_k_plus_7=$arr_len-k-7\n    arr_len_minus_k_plus_8=$arr_len-k-8\n    arr_len_minus_k_plus_9=$arr_len-k-9\n    arr_len_minus_k_plus_10=$arr_len-k-10\n    arr_len_minus_k_plus_11=$arr_len-k-11\n    arr_len_minus_k_plus_12=$arr_len-k-12\n    arr_len_minus_k_plus_13=$arr_len-k-13\n    arr_len_minus_k_plus_14=$arr_len-k-14\n    arr_len_minus_k_plus",
    "    arr=($1)\n    k=$2\n    if [[ $k -gt $#arr ]]; then\n        echo \"Error: $k is greater than the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $k -lt 0 ]]; then\n        echo \"Error: $k is less than 0\"\n        exit 1\n    fi\n    if [[ $k -eq 0 ]]; then\n        echo \"$arr\"\n        return\n    fi\n    arr_len=$#arr\n    max_k=$((arr_len-k))\n    max_arr=($1)\n    for i in $(seq 1 $max_k); do\n        max_arr[$i]=$arr[$i]\n    done\n    echo \"$max_arr\"",
    "  arr=$1\n  k=$2\n  if [[ $k -lt 0 ]]; then\n    echo \"k must be positive\"\n    exit 1\n  fi\n  if [[ $k -gt $# ]]; then\n    echo \"k must be less than $#\"\n    exit 1\n  fi\n  if [[ $k -eq 0 ]]; then\n    echo \"k must be greater than 0\"\n    exit 1\n  fi\n  if [[ $k -eq 1 ]]; then\n    echo \"k must be greater than 1\"\n    exit 1\n  fi\n  if [[ $k -gt $# -eq 0 ]]; then\n    echo \"k must be less than $#\"\n    exit 1\n  fi\n  arr_len=$#\n  for i in $arr; do\n    if [[ $i -lt -$arr_len ]]; then\n      echo \"arr[$i] is out of range\"\n      exit 1\n    fi\n    if [[ $i -gt $arr_len ]]; then\n      echo \"arr[$i] is out of range\"\n      exit 1\n    fi\n  done\n  arr_len=$#\n  for i in $arr; do\n    if [[ $i -lt -$arr_len ]]; then\n      echo \"arr[$i] is out of range\"\n      exit 1\n    fi\n    if [[ $i -gt $arr_len ]]; then\n      echo \"arr[$i] is out of range\"\n      exit 1\n    fi\n  done\n  arr_len=$#\n  for i in $arr; do\n    if [[ $i -lt -$arr_len ]]; then\n      echo \"arr[$i] is out of range\"\n      exit 1\n    fi\n    if [[ $i -gt $arr_len ]]; then\n      echo \"arr[$i] is out of range\"\n      exit 1\n    fi\n  done\n  arr_len=$#\n  for i in $arr; do\n    if [[ $i -lt -$arr_len ]]; then\n      echo \"arr[$i] is out of range\"\n      exit 1\n    fi\n    if [[ $i -gt $arr_len ]]; then\n      echo \"",
    "  arr=($1)\n  k=$2\n  if [[ $k -lt 0 ]]; then\n    echo \"k must be positive\"\n    exit 1\n  fi\n  if [[ $k -gt $# ]]; then\n    echo \"k must be less than the number of elements in arr\"\n    exit 1\n  fi\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr",
    "    arr=($1)\n    k=$2\n    max_k=$(($k-1))\n    max_k_index=$(($max_k-1))\n    max_k_value=$(($max_k_index+1))\n    max_k_value_index=$(($max_k_value-1))\n    max_k_value_value=$(($max_k_value_index+1))\n    max_k_value_value_index=$(($max_k_value_value-1))\n    max_k_value_value_value=$(($max_k_value_value_index+1))\n    max_k_value_value_value_index=$(($max_k_value_value_value-1))\n    max_k_value_value_value_value=$(($max_k_value_value_value_index+1))\n    max_k_value_value_value_value_index=$(($max_k_value_value_value_value-1))\n    max_k_value_value_value_value_value=$(($max_k_value_value_value_value_index+1))\n    max_k_value_value_value_value_value_index=$(($max_k_value_value_value_value_value-1))\n    max_k_value_value_value_value_value_value=$(($max_k_value_value_value_value_value_index+1))\n    max_k_value_value_value_value_value_value_index=$(($max_k_value_value_value_value_value_value-1))\n    max_k_value_value_value_value_value_value_value=$(($max_k_value_value_value_value_value_value_index+1))\n    max_k_value_value_value_value_value_value_value_index=$(($max_k_value_value_value_value_value_value_value-1))\n    max_k_value_value_value_value_value_value_value_value=$(($max_k_value_value_value_value_value_value",
    "    arr=($1)\n    k=$2\n    max_arr=($1)\n    max_k=$2\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_arr[$max_k] ]; then\n            max_arr[$max_k]=$i\n            max_k=max_k+1\n        fi\n    done\n    for i in \"${max_arr[@]}\"\n    do\n        if [ $i -gt $max_arr[$max_k] ]; then\n            max_arr[$max_k]=$i\n            max_k=max_k+1\n        fi\n    done\n    for i in \"${max_arr[@]}\"\n    do\n        if [ $i -gt $max_arr[$max_k] ]; then\n            max_arr[$max_k]=$i\n            max_k=max_k+1\n        fi\n    done\n    for i in \"${max_arr[@]}\"\n    do\n        if [ $i -gt $max_arr[$max_k] ]; then\n            max_arr[$max_k]=$i\n            max_k=max_k+1\n        fi\n    done\n    for i in \"${max_arr[@]}\"\n    do\n        if [ $i -gt $max_arr[$max_k] ]; then\n            max_arr[$max_k]=$i\n            max_k=max_k+1\n        fi\n    done\n    for i in \"${max_arr[@]}\"\n    do\n        if [ $i -gt $max_arr[$max_k] ]; then\n            max_arr[$max_k]=$i\n            max_k=max_k+1\n        fi\n    done\n    for i in \"${max_arr[@]}\"\n    do\n        if [ $i -gt $max_arr[$max_k] ]; then\n            max_arr[$max_k]=$i\n            max_k=max_k+1\n        fi\n    done\n    for i in \"${max_arr[@]}\"\n    do\n",
    "  arr=($1)\n  k=$2\n  if [ \"$#\" -lt \"$k\" ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  arr=($arr)\n  if [ \"$#\" -gt \"$k\" ]; then\n    k=$k\n  fi\n  if [ \"$#\" -lt \"$k\" ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  ",
    "    arr=$1\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $k -eq 0 ]]; then\n        echo \"k cannot be 0\"\n        exit 1\n    fi\n    if [[ $k -eq 1 ]]; then\n        echo \"k cannot be 1\"\n        exit 1\n    fi\n    if [[ $k -eq 2 ]]; then\n        echo \"k cannot be 2\"\n        exit 1\n    fi\n    if [[ $k -eq 3 ]]; then\n        echo \"k cannot be 3\"\n        exit 1\n    fi\n    if [[ $k -eq 4 ]]; then\n        echo \"k cannot be 4\"\n        exit 1\n    fi\n    if [[ $k -eq 5 ]]; then\n        echo \"k cannot be 5\"\n        exit 1\n    fi\n    if [[ $k -eq 6 ]]; then\n        echo \"k cannot be 6\"\n        exit 1\n    fi\n    if [[ $k -eq 7 ]]; then\n        echo \"k cannot be 7\"\n        exit 1\n    fi\n    if [[ $k -eq 8 ]]; then\n        echo \"k cannot be 8\"\n        exit 1\n    fi\n    if [[ $k -eq 9 ]]; then\n        echo \"k cannot be 9\"\n        exit 1\n    fi\n    if [[ $k -eq 10 ]]; then\n        echo \"k cannot be 10\"\n        exit 1\n    fi\n    if [[ $k -eq 11 ]]; then\n        echo \"k cannot be 11\"\n        exit 1\n    fi\n    if [[ $k -eq 12 ]]; then\n        echo \"k cannot be 12\"\n        exit 1\n    fi\n    if [[ $k -eq 13 ]]; then\n        echo \"k cannot be 13\"\n        exit 1\n    fi\n    if [[ $k -eq 14 ]]; then\n        echo \"k cannot be 14\"\n        exit 1\n    fi\n    if [[ $k -eq 15 ]]; then\n        echo \"k cannot be",
    "  arr=($1)\n  k=$2\n  if [[ $k -lt 0 ]]; then\n    echo \"k must be positive\"\n    exit 1\n  fi\n  if [[ $k -gt $# ]]; then\n    echo \"k must be less than the length of arr\"\n    exit 1\n  fi\n  if [[ $k -eq 0 ]]; then\n    echo \"k must be greater than 0\"\n    exit 1\n  fi\n  if [[ $k -eq 1 ]]; then\n    echo \"k must be greater than 1\"\n    exit 1\n  fi\n  if [[ $k -gt $# - 1 ]]; then\n    echo \"k must be less than the length of arr - 1\"\n    exit 1\n  fi\n  arr=($arr)\n  arr=($arr[$k-1])\n  arr=($arr[$k-2])\n  arr=($arr[$k-3])\n  arr=($arr[$k-4])\n  arr=($arr[$k-5])\n  arr=($arr[$k-6])\n  arr=($arr[$k-7])\n  arr=($arr[$k-8])\n  arr=($arr[$k-9])\n  arr=($arr[$k-10])\n  arr=($arr[$k-11])\n  arr=($arr[$k-12])\n  arr=($arr[$k-13])\n  arr=($arr[$k-14])\n  arr=($arr[$k-15])\n  arr=($arr[$k-16])\n  arr=($arr[$k-17])\n  arr=($arr[$k-18])\n  arr=($arr[$k-19])\n  arr=($arr[$k-20])\n  arr=($arr[$k-21])\n  arr=($arr[$k-22])\n  arr=($arr[$k-23])\n  arr=($arr[$k-24])\n  arr=($arr[$k-25])\n  arr=($arr[$k-26])\n  arr=($arr[$k-27])\n  arr=($arr[$k-",
    "    local i\n    local j\n    local max\n    local max_index\n    local max_value\n    local max_value_index\n    local arr\n    local k\n    arr=$1\n    k=$2\n    max_index=0\n    max_value_index=0\n    max_value=0\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_value ]; then\n            max_value=$i\n            max_value_index=i\n        fi\n    done\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_value ]; then\n            max_value=$i\n            max_value_index=i\n        fi\n    done\n    max_index=$max_value_index\n    max_value=$max_value\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_value ]; then\n            max_value=$i\n            max_value_index=i\n        fi\n    done\n    max_index=$max_value_index\n    max_value=$max_value\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_value ]; then\n            max_value=$i\n            max_value_index=i\n        fi\n    done\n    max_index=$max_value_index\n    max_value=$max_value\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_value ]; then\n            max_value=$i\n            max_value_index=i\n        fi\n    done\n    max_index=$max_value_index\n    max_value=$max_value\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_value ]; then\n            max_value=$i\n            max_value_index=i\n        fi\n    done\n    max_index=$max_value_index\n    max_value=$max_value\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_value ]; then\n            max_value",
    "    local i\n    local j\n    local k\n    local arr\n    local max\n    local max_index\n    local max_value\n    local max_value_index\n    local max_value_value\n    local max_value_value_index\n    local max_value_value_value\n    local max_value_value_value_index\n    local max_value_value_value_value\n    local max_value_value_value_value_index\n    local max_value_value_value_value_value\n    local max_value_value_value_value_value_index\n    local max_value_value_value_value_value_value\n    local max_value_value_value_value_value_value_index\n    local max_value_value_value_value_value_value_value\n    local max_value_value_value_value_value_value_value_index\n    local max_value_value_value_value_value_value_value_value\n    local max_value_value_value_value_value_value_value_value_index\n    local max_value_value_value_value_value_value_value_value_value\n    local max_value_value_value_value_value_value_value_value_value_index\n    local max_value_value_value_value_value_value_value_value_value_value\n    local max_value_value_value_value_value_value_value_value_value_value_index\n    local max_value_value_value_value_value_value_value_value_value_value_value\n    local max_value_value_value_value_value_value_value_value_value_value_value_index\n\n    max_index=0\n    max_value=0\n    max_value_index=0\n    max_value_value=0\n    max_value_value_index=0\n    max_value_value_value=0\n    max_value_value_value_index=0\n    max_value_value_value_value=0\n    max_value_value_value_value_index=0\n    max_value_value_value_value_value=0\n    max",
    "    arr=($1)\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the length of arr\"\n        exit 1\n    fi\n    if [[ $k -eq 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -eq 1 ]]; then\n        echo \"k must be greater than 1\"\n        exit 1\n    fi\n    if [[ $k -eq 2 ]]; then\n        echo \"k must be greater than 2\"\n        exit 1\n    fi\n    if [[ $k -eq 3 ]]; then\n        echo \"k must be greater than 3\"\n        exit 1\n    fi\n    if [[ $k -eq 4 ]]; then\n        echo \"k must be greater than 4\"\n        exit 1\n    fi\n    if [[ $k -eq 5 ]]; then\n        echo \"k must be greater than 5\"\n        exit 1\n    fi\n    if [[ $k -eq 6 ]]; then\n        echo \"k must be greater than 6\"\n        exit 1\n    fi\n    if [[ $k -eq 7 ]]; then\n        echo \"k must be greater than 7\"\n        exit 1\n    fi\n    if [[ $k -eq 8 ]]; then\n        echo \"k must be greater than 8\"\n        exit 1\n    fi\n    if [[ $k -eq 9 ]]; then\n        echo \"k must be greater than 9\"\n        exit 1\n    fi\n    if [[ $k -eq 10 ]]; then\n        echo \"k must be greater than 10\"\n        exit 1\n    fi\n    if [[ $k -eq 11 ]]; then\n        echo \"k must be greater than 11\"\n        exit 1\n    fi\n    if [[ $k -eq 12 ]]; then\n        echo \"k must be greater than 12\"\n        exit 1\n    fi\n    if [[ $k -eq 13 ]]; then\n        echo \"k must be greater than 13\"\n        exit 1\n    fi\n    if [[ $k -eq 14 ]]; then\n        echo \"k must be greater than",
    "    # $1 = array\n    # $2 = k\n    # $3 = arr\n    # $4 = max\n    # $5 = max_index\n    # $6 = max_value\n    # $7 = max_index_value\n    # $8 = max_value_index\n    # $9 = max_value_index_value\n    # $10 = max_value_index_value_index\n    # $11 = max_value_index_value_index_value\n    # $12 = max_value_index_value_index_value_index\n    # $13 = max_value_index_value_index_value_index_value\n    # $14 = max_value_index_value_index_value_index_value_index\n    # $15 = max_value_index_value_index_value_index_value_index_value\n    # $16 = max_value_index_value_index_value_index_value_index_value_index\n    # $17 = max_value_index_value_index_value_index_value_index_value_index_value\n    # $18 = max_value_index_value_index_value_index_value_index_value_index_value_index\n    # $19 = max_value_index_value_index_value_index_value_index_value_index_value_index_value\n    # $20 = max_value_index_value_index_value_index_value_index_value_index_value_index_value_index\n    # $21 = max_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value\n    # $22 = max_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index\n    # $23 = max_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value\n    # $24 = max_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_",
    "    local i\n    local j\n    local k\n    local arr\n    local max\n    local max_index\n    local max_value\n    local max_index_value\n    local max_value_index\n\n    arr=$1\n    k=$2\n    max_index_value=0\n    max_value_index=0\n    max_index=0\n    max_value=0\n    for i in \"${arr[@]}\"\n    do\n        for j in \"${arr[@]}\"\n        do\n            if [ \"${i}\" -gt \"${j}\" ]; then\n                max_index_value=${i}\n                max_value_index=${j}\n            fi\n        done\n        if [ \"${max_index_value}\" -gt \"${max_value_index}\" ]; then\n            max_index=${max_index_value}\n            max_value=${max_value_index}\n        fi\n    done\n    if [ \"${max_index}\" -gt \"${k}\" ]; then\n        max_index_value=${max_index}\n        max_value_index=${max_value}\n    fi\n    echo \"${max_index_value}\"",
    "  arr=($1)\n  k=$2\n  if [[ $k -lt 0 ]]; then\n    echo \"k must be positive\"\n    exit 1\n  fi\n  if [[ $k -gt $# ]]; then\n    echo \"k must be less than the number of elements in arr\"\n    exit 1\n  fi\n  if [[ $k -eq 0 ]]; then\n    echo \"k must be positive\"\n    exit 1\n  fi\n  if [[ $k -gt $# ]]; then\n    echo \"k must be less than the number of elements in arr\"\n    exit 1\n  fi\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  ",
    "    local i j max\n    i=0\n    j=$2\n    max=$1\n    while [ $j -gt 0 ]; do\n        if [ $max -lt $i ]; then\n            max=$i\n        fi\n        i=$((i+1))\n        j=$((j-1))\n    done\n    echo $max",
    "    local i j k max_i max_j max_k\n    i=1\n    j=1\n    k=1\n    max_i=0\n    max_j=0\n    max_k=0\n    while [[ $i -lt $1 ]]; do\n        i=$((i+1))\n        if [[ $i -eq $1 ]]; then\n            max_i=$((max_i+1))\n        fi\n    done\n    while [[ $j -lt $2 ]]; do\n        j=$((j+1))\n        if [[ $j -eq $2 ]]; then\n            max_j=$((max_j+1))\n        fi\n    done\n    while [[ $k -lt $3 ]]; do\n        k=$((k+1))\n        if [[ $k -eq $3 ]]; then\n            max_k=$((max_k+1))\n        fi\n    done\n    echo $max_i $max_j $max_k",
    "    arr=($1)\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $k -eq 0 ]]; then\n        echo \"k cannot be 0\"\n        exit 1\n    fi\n    if [[ $k -eq 1 ]]; then\n        echo \"k cannot be 1\"\n        exit 1\n    fi\n    if [[ $k -eq 2 ]]; then\n        echo \"k cannot be 2\"\n        exit 1\n    fi\n    if [[ $k -eq 3 ]]; then\n        echo \"k cannot be 3\"\n        exit 1\n    fi\n    if [[ $k -eq 4 ]]; then\n        echo \"k cannot be 4\"\n        exit 1\n    fi\n    if [[ $k -eq 5 ]]; then\n        echo \"k cannot be 5\"\n        exit 1\n    fi\n    if [[ $k -eq 6 ]]; then\n        echo \"k cannot be 6\"\n        exit 1\n    fi\n    if [[ $k -eq 7 ]]; then\n        echo \"k cannot be 7\"\n        exit 1\n    fi\n    if [[ $k -eq 8 ]]; then\n        echo \"k cannot be 8\"\n        exit 1\n    fi\n    if [[ $k -eq 9 ]]; then\n        echo \"k cannot be 9\"\n        exit 1\n    fi\n    if [[ $k -eq 10 ]]; then\n        echo \"k cannot be 10\"\n        exit 1\n    fi\n    if [[ $k -eq 11 ]]; then\n        echo \"k cannot be 11\"\n        exit 1\n    fi\n    if [[ $k -eq 12 ]]; then\n        echo \"k cannot be 12\"\n        exit 1\n    fi\n    if [[ $k -eq 13 ]]; then\n        echo \"k cannot be 13\"\n        exit 1\n    fi\n    if [[ $k -eq 14 ]]; then\n        echo \"k cannot be 14\"\n        exit 1\n    fi\n    if [[ $k -eq 15 ]]; then\n        echo \"k",
    "    local i j max_i max_j\n    i=0\n    max_i=0\n    max_j=0\n    for j in $1; do\n        if [ $j -gt $2 ]; then\n            max_i=$j\n            max_j=$i\n        fi\n        i=$((i+1))\n    done\n    echo $max_i $max_j",
    "    arr=($1)\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $k -eq 0 ]]; then\n        echo \"k cannot be 0\"\n        exit 1\n    fi\n    if [[ $k -eq 1 ]]; then\n        echo \"k cannot be 1\"\n        exit 1\n    fi\n    if [[ $k -gt 1 ]]; then\n        for i in $arr; do\n            if [[ $i -lt $arr[0] ]]; then\n                echo \"arr[$i] is less than arr[0]\"\n                exit 1\n            fi\n            if [[ $i -gt $arr[$k-1] ]]; then\n                echo \"arr[$i] is greater than arr[$k-1]\"\n                exit 1\n            fi\n        done\n    fi\n    if [[ $k -lt $#-1 ]]; then\n        for i in $arr; do\n            if [[ $i -lt $arr[0] ]]; then\n                echo \"arr[$i] is less than arr[0]\"\n                exit 1\n            fi\n            if [[ $i -gt $arr[$k-1] ]]; then\n                echo \"arr[$i] is greater than arr[$k-1]\"\n                exit 1\n            fi\n        done\n    fi\n    if [[ $k -eq $#-1 ]]; then\n        for i in $arr; do\n            if [[ $i -lt $arr[0] ]]; then\n                echo \"arr[$i] is less than arr[0]\"\n                exit 1\n            fi\n            if [[ $i -gt $arr[$k-1] ]]; then\n                echo \"arr[$i] is greater than arr[$k-1]\"\n                exit 1\n            fi\n        done\n    fi\n    if [[ $k -gt $#-2 ]]; then\n        for i in $arr; do\n            if [[ $i -lt $arr[0] ]]; then\n                ",
    "  arr=$1\n  k=$2\n  if [ \"$#\" -gt \"2\" ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ \"$#\" -lt \"3\" ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ \"$#\" -eq \"3\" ]; then\n    if [ \"$k\" -lt \"1\" ]; then\n      echo \"Usage: $0 arr k\"\n      exit 1\n    fi\n  fi\n  if [ \"$#\" -eq \"2\" ]; then\n    if [ \"$k\" -gt \"$#\" ]; then\n      echo \"Usage: $0 arr k\"\n      exit 1\n    fi\n  fi\n  arr_len=$#\n  arr_max=$1\n  arr_min=$2\n  arr_max_index=$1\n  arr_min_index=$2\n  for i in \"${arr[@]}\"\n    do\n      if [ \"$i\" -gt \"$arr_max\" ]; then\n        arr_max=$i\n        arr_max_index=i\n      fi\n      if [ \"$i\" -lt \"$arr_min\" ]; then\n        arr_min=$i\n        arr_min_index=i\n      fi\n    done\n  done\n  arr_len_minus_k=$arr_len-k\n  arr_max_minus_k=$arr_max-k\n  arr_min_minus_k=$arr_min-k\n  arr_max_minus_k_index=$arr_max_index-k\n  arr_min_minus_k_index=$arr_min_index-k\n  for i in \"${arr[@]}\"\n    do\n      if [ \"$i\" -gt \"$arr_max_minus_k\" ]; then\n        arr_max_minus_k=$i\n        arr_max_minus_k_index=i\n      fi\n      if [ \"$i\" -lt \"$arr_min_minus_k\" ]; then\n        arr_min_minus_k=$i\n        arr_min_minus_k_index=i\n      fi\n    done\n  done\n  arr_max_minus_k_index_minus",
    "  arr=($1)\n  k=$2\n  if [[ $k -lt 0 ]]; then\n    echo \"k must be positive\"\n    exit 1\n  fi\n  if [[ $k -gt $# ]]; then\n    echo \"k must be less than the length of arr\"\n    exit 1\n  fi\n  if [[ $k -eq 0 ]]; then\n    echo \"k must be greater than 0\"\n    exit 1\n  fi\n  if [[ $k -eq 1 ]]; then\n    echo \"k must be greater than 1\"\n    exit 1\n  fi\n  if [[ $k -gt $# - 1 ]]; then\n    echo \"k must be less than the length of arr\"\n    exit 1\n  fi\n  if [[ $k -lt $# - 1 ]]; then\n    echo \"k must be greater than the length of arr\"\n    exit 1\n  fi\n  if [[ $k -eq $# - 1 ]]; then\n    echo \"k must be less than the length of arr\"\n    exit 1\n  fi\n  if [[ $k -eq $# ]]; then\n    echo \"k must be greater than the length of arr\"\n    exit 1\n  fi\n  if [[ $k -eq 2 ]]; then\n    echo \"k must be greater than 2\"\n    exit 1\n  fi\n  if [[ $k -gt 2 ]]; then\n    echo \"k must be less than or equal to 2\"\n    exit 1\n  fi\n  if [[ $k -lt 2 ]]; then\n    echo \"k must be greater than or equal to 2\"\n    exit 1\n  fi\n  if [[ $k -eq 2 ]]; then\n    echo \"k must be greater than 2\"\n    exit 1\n  fi\n  if [[ $k -eq 3 ]]; then\n    echo \"k must be greater than 3\"\n    exit 1\n  fi\n  if [[ $k -gt 3 ]]; then\n    echo \"k must be less than or equal to 3\"\n    exit 1\n  fi\n  if [[ $k -lt 3 ]]; then\n    echo \"k must be greater than or equal to 3\"\n    exit 1\n  fi\n  if [[ $k -eq 3 ]]; then\n    echo",
    "    arr=($1)\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $k -eq 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -eq 1 ]]; then\n        echo \"k must be greater than 1\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the number of elements in arr\"\n        exit 1\n    fi\n    arr_len=$#\n    for i in $(seq 1 $arr_len); do\n        if [[ $arr[$i] -lt $arr[0] ]]; then\n            arr[$i]=$arr[0]\n        fi\n    done\n    arr_len=$#\n    for i in $(seq 1 $arr_len); do\n        if [[ $arr[$i] -gt $arr[$arr_len-1] ]]; then\n            arr[$i]=$arr[$arr_len-1]\n        fi\n    done\n    arr_len=$#\n    for i in $(seq 1 $arr_len); do\n        if [[ $arr[$i] -le $arr[0] ]]; then\n            arr[$i]=$arr[0]\n        fi\n    done\n    arr_len=$#\n    for i in $(seq 1 $arr_len); do\n        if [[ $arr[$i] -ge $arr[$arr_len-1] ]]; then\n            arr[$i]=$arr[$arr_len-1]\n        fi\n    done\n    arr_len=$#\n    for i in $(seq 1 $arr_len); do\n        if [[ $arr[$i] -eq $arr[0] ]]; then\n            arr[$i]=$arr[0]\n        fi\n    done\n    arr_len=$#\n    for i in $(seq 1 $arr_len); do\n        if [[ $arr[",
    "    arr=($1)\n    k=$2\n    max_k=$(echo \"$arr\" | tr -d \" \" | sort | uniq | wc -l)\n    if [ $k -gt $max_k ]; then\n        echo \"ERROR: $k is greater than $max_k\"\n        exit 1\n    fi\n    max_k=$(echo \"$arr\" | tr -d \" \" | sort | uniq | wc -l)\n    if [ $k -lt $max_k ]; then\n        echo \"ERROR: $k is less than $max_k\"\n        exit 1\n    fi\n    if [ $k -eq $max_k ]; then\n        echo \"$arr\"\n    else\n        echo \"$arr\" | tr -d \" \" | sort | uniq | head -n $k\n    fi",
    "    arr=($1)\n    k=$2\n    if [ $# -gt 1 ]; then\n        shift\n    fi\n    if [ $# -lt $k ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr",
    "    arr=($1)\n    k=$2\n    if [ $# -eq 0 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -gt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $k -lt 0 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $k -gt $# ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $k -eq 0 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $k -eq $# ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $k -lt $# ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $k -gt $# ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $k -eq 1 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $k -eq 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $k -eq 3 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $k -eq 4 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $k -eq 5 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $k -eq 6 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $k -eq 7 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $k -eq 8 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [",
    "    arr=($1)\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the length of arr\"\n        exit 1\n    fi\n    if [[ $k -eq 0 ]]; then\n        echo \"k cannot be zero\"\n        exit 1\n    fi\n    if [[ $k -eq 1 ]]; then\n        echo \"k cannot be one\"\n        exit 1\n    fi\n    if [[ $k -lt $# ]]; then\n        echo \"k cannot be less than the length of arr\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k cannot be greater than the length of arr\"\n        exit 1\n    fi\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)",
    "    local i\n    local j\n    local k\n    local max\n    local max_index\n    local max_value\n    local arr\n    local arr_length\n    local arr_index\n    local arr_value\n    local arr_max\n    local arr_max_index\n    local arr_max_value\n    local arr_max_max\n    local arr_max_max_index\n    local arr_max_max_value\n    local arr_max_max_max\n    local arr_max_max_max_index\n    local arr_max_max_max_value\n    local arr_max_max_max_max\n    local arr_max_max_max_max_index\n    local arr_max_max_max_max_value\n    local arr_max_max_max_max_max\n    local arr_max_max_max_max_max_index\n    local arr_max_max_max_max_max_value\n    local arr_max_max_max_max_max_max\n    local arr_max_max_max_max_max_max_index\n    local arr_max_max_max_max_max_max_value\n    local arr_max_max_max_max_max_max_max\n    local arr_max_max_max_max_max_max_max_index\n    local arr_max_max_max_max_max_max_max_value\n    local arr_max_max_max_max_max_max_max_max\n    local arr_max_max_max_max_max_max_max_max_index\n    local arr_max_max_max_max_max_max_max_max_value\n    local arr_max_max_max_max_max_max_max_max_max\n    local arr_max_max_max_max_max_max_max_max_max_index\n    local arr_max_max_max_max_max_max_max_max_max_value\n    local arr_max_max_max_max_max_max_max_max_max_max\n    local arr_max_max_max_max_max_max_max_max_max_max_",
    "    local i\n    local j\n    local k\n    local arr\n    local max\n    local max_index\n    local max_value\n    local max_index_value\n    local max_value_index\n    local max_value_index_value\n    local max_value_index_value_index\n    local max_value_index_value_index_value\n    local max_value_index_value_index_value_index\n    local max_value_index_value_index_value_index_value\n    local max_value_index_value_index_value_index_value_index\n    local max_value_index_value_index_value_index_value_index_value\n    local max_value_index_value_index_value_index_value_index_value_index\n    local max_value_index_value_index_value_index_value_index_value_index_value\n    local max_value_index_value_index_value_index_value_index_value_index_value_index\n    local max_value_index_value_index_value_index_value_index_value_index_value_index_value\n    local max_value_index_value_index_value_index_value_index_value_index_value_index_value_index\n    local max_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value\n    local max_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index\n    local max_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value\n    local max_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index\n    local max_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value\n    local max_value_index_value_index_value_index_value_index_value_",
    "    # $1 = arr\n    # $2 = k\n    arr=$1\n    k=$2\n    # $3 = max_k\n    max_k=$3\n    # $4 = max_k_index\n    max_k_index=$4\n    # $5 = max_k_value\n    max_k_value=$5\n    # $6 = max_k_index_value\n    max_k_index_value=$6\n    # $7 = max_k_index_value_index\n    max_k_index_value_index=$7\n    # $8 = max_k_index_value_value\n    max_k_index_value_value=$8\n    # $9 = max_k_index_value_index_value\n    max_k_index_value_index_value=$9\n    # $10 = max_k_index_value_index_value_index\n    max_k_index_value_index_value_index=$10\n    # $11 = max_k_index_value_index_value_value\n    max_k_index_value_index_value_value=$11\n    # $12 = max_k_index_value_index_value_index_value_index\n    max_k_index_value_index_value_index_value_index=$12\n    # $13 = max_k_index_value_index_value_index_value_value\n    max_k_index_value_index_value_index_value_value=$13\n    # $14 = max_k_index_value_index_value_index_value_index_value_index\n    max_k_index_value_index_value_index_value_index_value_index=$14\n    # $15 = max_k_index_value_index_value_index_value_index_value_value\n    max_k_index_value_index_value_index_value_index_value_value=$15\n    # $16 = max_k_index_value_index_value_index_value_index_value_index_value_index\n    max_k_index_value_index_value_index_value_index_value_index_value_",
    "  arr=($1)\n  k=$2\n  if [[ $k -lt 0 ]]; then\n    echo \"k must be positive\"\n    exit 1\n  fi\n  if [[ $k -gt $# ]]; then\n    echo \"k must be less than $#\"\n    exit 1\n  fi\n  if [[ $k -eq 0 ]]; then\n    echo \"k must be greater than 0\"\n    exit 1\n  fi\n  if [[ $k -eq 1 ]]; then\n    echo \"k must be greater than 1\"\n    exit 1\n  fi\n  if [[ $k -gt $# - 1 ]]; then\n    echo \"k must be less than $#\"\n    exit 1\n  fi\n  if [[ $k -lt $# - 1 ]]; then\n    echo \"k must be greater than $#\"\n    exit 1\n  fi\n  if [[ $k -eq $# - 1 ]]; then\n    echo \"k must be less than $#\"\n    exit 1\n  fi\n  if [[ $k -eq $# ]]; then\n    echo \"k must be greater than $#\"\n    exit 1\n  fi\n  if [[ $k -eq $# - 1 ]]; then\n    echo \"k must be less than $#\"\n    exit 1\n  fi\n  if [[ $k -eq $# - 2 ]]; then\n    echo \"k must be greater than $#\"\n    exit 1\n  fi\n  if [[ $k -eq $# - 3 ]]; then\n    echo \"k must be less than $#\"\n    exit 1\n  fi\n  if [[ $k -eq $# - 4 ]]; then\n    echo \"k must be greater than $#\"\n    exit 1\n  fi\n  if [[ $k -eq $# - 5 ]]; then\n    echo \"k must be less than $#\"\n    exit 1\n  fi\n  if [[ $k -eq $# - 6 ]]; then\n    echo \"k must be greater than $#\"\n    exit 1\n  fi\n  if [[ $k -eq $# - 7 ]]; then\n    echo \"k must be less than $#\"\n    exit 1\n  fi\n  if [[ $k -eq $",
    "    local arr=$1\n    local k=$2\n    arr=($arr)\n    k=$k\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr",
    "    arr=$1\n    k=$2\n    max=0\n    for i in $arr; do\n        if [ $i -gt $max ]; then\n            max=$i\n        fi\n    done\n    if [ $max -gt $k ]; then\n        echo $max\n    else\n        echo $arr\n    fi",
    "    arr=$1\n    k=$2\n    arr_len=$#arr\n    if [ $arr_len -lt $k ]; then\n        echo \"Error: $k is greater than $arr_len\"\n        exit 1\n    fi\n    max_k=$(sort $arr | uniq | wc -l)\n    if [ $max_k -lt $k ]; then\n        echo \"Error: $k is greater than $max_k\"\n        exit 1\n    fi\n    max_k_arr=$(echo $max_k | tr -d \"[]\")\n    max_k_arr_len=$#max_k_arr\n    if [ $max_k_arr_len -lt $k ]; then\n        echo \"Error: $k is greater than $max_k_arr_len\"\n        exit 1\n    fi\n    max_k_arr_len_arr=$(echo $max_k_arr_len | tr -d \"[]\")\n    for i in $arr_len; do\n        if [ $i -gt $max_k_arr_len ]; then\n            echo \"Error: $i is greater than $max_k_arr_len\"\n            exit 1\n        fi\n    done\n    for i in $max_k_arr_len_arr; do\n        if [ $i -gt $max_k_arr_len ]; then\n            echo \"Error: $i is greater than $max_k_arr_len\"\n            exit 1\n        fi\n    done\n    for i in $max_k_arr; do\n        if [ $i -gt $max_k_arr_len ]; then\n            echo \"Error: $i is greater than $max_k_arr_len\"\n            exit 1\n        fi\n    done\n    for i in $max_k_arr; do\n        if [ $i -gt $max_k ]; then\n            echo \"Error: $i is greater than $max_k\"\n            exit 1\n        fi\n    done\n    for i in $max_k_arr; do\n        if [ $i -gt $max_k ]; then\n            echo \"Error: $i is greater than $max_k\"\n            exit 1\n        fi\n    done",
    "    arr=($1)\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the number of elements in arr\"\n        exit 1\n    fi\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr",
    "    local i\n    local j\n    local k\n    local arr\n    local max\n    local max_index\n    local max_value\n    local max_index_value\n    local max_value_index\n    local max_value_index_value\n    local max_value_index_value_index\n    local max_value_index_value_index_value\n    local max_value_index_value_index_value_index\n\n    arr=$1\n    k=$2\n    max_index_value=0\n    max_value_index_value=0\n    max_value_index_value_index=0\n    max_value_index_value_index_value=0\n    max_value_index_value_index_value_index=0\n    max_value_index_value_index_value_index_value=0\n    max_value_index_value_index_value_index_value_index=0\n\n    for ((i=0;i<k;i++)); do\n        for ((j=i;j<k;j++)); do\n            max_value_index_value_index_value_index_value=${arr[i]};\n            max_value_index_value_index_value_index=${arr[j]};\n            max_value_index_value_index=${arr[i]};\n            max_value_index_value=${arr[j]};\n            max_value_index=${arr[i]};\n            max_value=${arr[j]};\n            max_index_value_index_value_index_value_index=${arr[i]};\n            max_index_value_index_value_index=${arr[j]};\n            max_index_value_index_value=${arr[i]};\n            max_index_value=${arr[j]};\n            max_index=${arr[i]};\n            max=${arr[j]};\n            if [[ ${max_value_index_value_index_value_index_value} -lt ${max_value_index_value_index_value_index_value} ]]; then\n                max_value_index_value_index_value_index_value=${",
    "    local i j k max_i max_j max_k\n    for ((i=1; i<=${#1}; i++)) {\n        max_i=$((max_i+1))\n        max_j=$((max_j+1))\n        max_k=$((max_k+1))\n        for ((j=1; j<=${#1}; j++)) {\n            if (($1[i-1] > $1[j-1])) {\n                max_i=$((max_i+1))\n            }\n            if (($1[i-1] < $1[j-1])) {\n                max_j=$((max_j+1))\n            }\n            if (($1[i-1] == $1[j-1])) {\n                max_k=$((max_k+1))\n            }\n        }\n    }\n    echo \"${max_i} ${max_j} ${max_k}\"",
    "    local i\n    local max\n    local arr\n    local k\n    local result\n    arr=$1\n    k=$2\n    result=()\n    max=0\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max ]; then\n            max=$i\n        fi\n    done\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -le $max ]; then\n            result+=($i)\n        fi\n    done\n    if [ $k -gt $len(result) ]; then\n        result=($max)\n    fi\n    return $result",
    "    local i j k max_i max_j max_k\n    i=0\n    j=0\n    k=0\n    max_i=0\n    max_j=0\n    max_k=0\n    while ((i < $#1)); do\n        max_i=$((max_i + $1[i]))\n        i=i+1\n    done\n    while ((j < $#1)); do\n        max_j=$((max_j + $1[j]))\n        j=j+1\n    done\n    while ((k < $#1)); do\n        max_k=$((max_k + $1[k]))\n        k=k+1\n    done\n    max_i=$((max_i + max_j + max_k))\n    if ((max_i > $2)); then\n        echo $1[$max_i - $2]\n    else\n        echo $1[$max_i]\n    fi",
    "    arr=($1)\n    k=$2\n    max_k=$(echo \"${arr[@]}\" | sort -n | tail -n $k)\n    echo \"${max_k[@]}\"",
    "    local i j k max_i max_j max_k\n    i=1\n    j=1\n    k=1\n    max_i=0\n    max_j=0\n    max_k=0\n    while [[ $i -lt $1 ]]; do\n        i=$((i+1))\n        if [[ $i -lt $2 ]]; then\n            if [[ $max_i -lt $i ]]; then\n                max_i=$i\n            fi\n        fi\n    done\n    while [[ $j -lt $1 ]]; do\n        j=$((j+1))\n        if [[ $j -lt $2 ]]; then\n            if [[ $max_j -lt $j ]]; then\n                max_j=$j\n            fi\n        fi\n    done\n    while [[ $k -lt $1 ]]; do\n        k=$((k+1))\n        if [[ $k -lt $2 ]]; then\n            if [[ $max_k -lt $k ]]; then\n                max_k=$k\n            fi\n        fi\n    done\n    echo $max_i $max_j $max_k",
    "    arr=($1)\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the number of elements in arr\"\n        exit 1\n    fi\n    max_k=$(sort -n -k $k -r $arr | tail -n $k)\n    echo $max_k",
    "    local i j k max\n    i=1\n    while [ $i -lt $# ]; do\n        j=$i\n        while [ $j -lt $# ]; do\n            if [ $i -eq $j ]; then\n                if [ $max -lt $# ]; then\n                    max=$j\n                fi\n            else\n                if [ $max -lt $# ]; then\n                    max=$j\n                fi\n            fi\n            j=$((j+1))\n        done\n        i=$((i+1))\n    done\n    echo $max",
    "    arr=($1)\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the length of arr\"\n        exit 1\n    fi\n    if [[ $k -eq 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -eq 1 ]]; then\n        echo \"k must be greater than 1\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the length of arr\"\n        exit 1\n    fi\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=(",
    "    local arr=$1\n    local k=$2\n    arr=($arr)\n    k=$k\n    if [[ $k -gt $#arr ]]; then\n        echo \"ERROR: $0: k is greater than the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $k -lt 0 ]]; then\n        echo \"ERROR: $0: k is less than 0\"\n        exit 1\n    fi\n    if [[ $k -eq 0 ]]; then\n        echo \"${arr[@]}\"\n        return 0\n    fi\n    if [[ $k -eq 1 ]]; then\n        echo \"${arr[@]}\"\n        return 0\n    fi\n    if [[ $k -eq 2 ]]; then\n        echo \"${arr[@]}\"\n        return 0\n    fi\n    if [[ $k -eq 3 ]]; then\n        echo \"${arr[@]}\"\n        return 0\n    fi\n    if [[ $k -eq 4 ]]; then\n        echo \"${arr[@]}\"\n        return 0\n    fi\n    if [[ $k -eq 5 ]]; then\n        echo \"${arr[@]}\"\n        return 0\n    fi\n    if [[ $k -eq 6 ]]; then\n        echo \"${arr[@]}\"\n        return 0\n    fi\n    if [[ $k -eq 7 ]]; then\n        echo \"${arr[@]}\"\n        return 0\n    fi\n    if [[ $k -eq 8 ]]; then\n        echo \"${arr[@]}\"\n        return 0\n    fi\n    if [[ $k -eq 9 ]]; then\n        echo \"${arr[@]}\"\n        return 0\n    fi\n    if [[ $k -eq 10 ]]; then\n        echo \"${arr[@]}\"\n        return 0\n    fi\n    if [[ $k -eq 11 ]]; then\n        echo \"${arr[@]}\"\n        return 0\n    fi\n    if [[ $k -eq 12 ]]; then\n        echo \"${arr[@]}\"\n        return 0\n    fi\n    if [[ $k -eq 13 ]]; then\n        echo \"${arr[@]}\"\n        return 0\n    fi\n    if [[ $k -eq",
    "    local i\n    local j\n    local k\n    local arr\n    local max\n    local max_index\n    local max_value\n    local max_index_value\n    local max_value_index\n    local max_value_index_value\n    local max_value_index_value_index\n    local max_value_index_value_index_value\n\n    arr=$1\n    k=$2\n    max_index_value=$3\n    max_value_index_value=$4\n    max_value_index_value_index=$5\n    max_value_index_value_index_value=$6\n\n    max_index_value=0\n    max_value_index_value=0\n    max_value_index_value_index=0\n    max_value_index_value_index_value=0\n\n    for i in $arr; do\n        if [ $max_index_value -lt $i ]; then\n            max_index_value=$i\n            max_value_index_value=$arr[$i]\n            max_value_index_value_index=$i\n        fi\n    done\n\n    for i in $arr; do\n        if [ $max_value_index_value -lt $i ]; then\n            max_value_index_value=$i\n            max_value_index_value_index=$arr[$i]\n            max_value_index_value_index_value=$i\n        fi\n    done\n\n    for i in $arr; do\n        if [ $max_value_index_value_index -lt $i ]; then\n            max_value_index_value_index=$i\n            max_value_index_value_index_value=$arr[$i]\n            max_value_index_value_index_value_index=$i\n        fi\n    done\n\n    for i in $arr; do\n        if [ $max_value_index_value_index_value -lt $i ]; then\n            max_value_index_value_index_value=$i\n            max_value_index_value_index_value_index=$arr[$i]\n            max_value_index_value_index_value_index_value=$i\n        fi\n    done\n\n    for",
    "  arr=($1)\n  k=$2\n  if [[ $k -lt 0 ]]; then\n    echo \"k must be positive\"\n    exit 1\n  fi\n  if [[ $k -gt $# ]]; then\n    echo \"k must be less than the number of elements in arr\"\n    exit 1\n  fi\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr",
    "  arr=$1\n  k=$2\n  if [[ $k -lt 0 ]]; then\n    echo \"k must be positive\"\n    exit 1\n  fi\n  if [[ $k -gt $# ]]; then\n    echo \"k must be less than the number of elements in arr\"\n    exit 1\n  fi\n  if [[ $k -eq 0 ]]; then\n    echo \"k must be positive\"\n    exit 1\n  fi\n  if [[ $k -eq 1 ]]; then\n    echo \"k must be greater than 1\"\n    exit 1\n  fi\n  if [[ $k -gt $# ]]; then\n    echo \"k must be less than the number of elements in arr\"\n    exit 1\n  fi\n  if [[ $# -eq 1 ]]; then\n    echo \"arr must have at least 2 elements\"\n    exit 1\n  fi\n  if [[ $# -gt 1 ]]; then\n    echo \"arr must have at most 1000 elements\"\n    exit 1\n  fi\n  arr_len=$#\n  max_k=0\n  for i in $arr; do\n    if [[ $i -gt $arr[0] ]]; then\n      if [[ $i -lt $arr[arr_len-1] ]]; then\n        max_k=$max_k+1\n      fi\n    fi\n  done\n  if [[ $max_k -lt $k ]]; then\n    echo \"There are not $k numbers in arr\"\n    exit 1\n  fi\n  max_k_arr=$(echo $max_k)\n  max_k_arr_len=$#\n  max_k_arr_arr=$1\n  for i in $max_k_arr; do\n    max_k_arr_arr=$max_k_arr_arr$i\n  done\n  echo $max_k_arr_arr",
    "  arr=($1)\n  k=$2\n  if [[ $k -lt 0 ]]; then\n    echo \"k must be positive\"\n    exit 1\n  fi\n  if [[ $k -gt $# ]]; then\n    echo \"k must be less than the length of arr\"\n    exit 1\n  fi\n  if [[ $k -eq 0 ]]; then\n    echo \"k cannot be 0\"\n    exit 1\n  fi\n  if [[ $k -eq 1 ]]; then\n    echo \"k cannot be 1\"\n    exit 1\n  fi\n  if [[ $k -eq 2 ]]; then\n    echo \"k cannot be 2\"\n    exit 1\n  fi\n  if [[ $k -eq 3 ]]; then\n    echo \"k cannot be 3\"\n    exit 1\n  fi\n  if [[ $k -eq 4 ]]; then\n    echo \"k cannot be 4\"\n    exit 1\n  fi\n  if [[ $k -eq 5 ]]; then\n    echo \"k cannot be 5\"\n    exit 1\n  fi\n  if [[ $k -eq 6 ]]; then\n    echo \"k cannot be 6\"\n    exit 1\n  fi\n  if [[ $k -eq 7 ]]; then\n    echo \"k cannot be 7\"\n    exit 1\n  fi\n  if [[ $k -eq 8 ]]; then\n    echo \"k cannot be 8\"\n    exit 1\n  fi\n  if [[ $k -eq 9 ]]; then\n    echo \"k cannot be 9\"\n    exit 1\n  fi\n  if [[ $k -eq 10 ]]; then\n    echo \"k cannot be 10\"\n    exit 1\n  fi\n  if [[ $k -eq 11 ]]; then\n    echo \"k cannot be 11\"\n    exit 1\n  fi\n  if [[ $k -eq 12 ]]; then\n    echo \"k cannot be 12\"\n    exit 1\n  fi\n  if [[ $k -eq 13 ]]; then\n    echo \"k cannot be 13\"\n    exit 1\n  fi\n  if [[ $k -eq 14 ]]; then\n    echo \"k cannot be 14\"\n    exit 1\n  fi\n  if [[ $k -eq 15 ]]; then\n    echo \"k cannot be",
    "    local i j k max_i max_j max_k\n    i=1\n    while [ $i -lt $# ]; do\n        j=$i\n        while [ $j -lt $# ]; do\n            k=$j\n            while [ $k -lt $# ]; do\n                max_i=$(( $i + $($i) ))\n                max_j=$(( $j + $($j) ))\n                max_k=$(( $k + $($k) ))\n                if [ $max_i -gt $max_j ]; then\n                    max_i=$max_j\n                fi\n                if [ $max_i -gt $max_k ]; then\n                    max_i=$max_k\n                fi\n                if [ $max_j -gt $max_k ]; then\n                    max_j=$max_k\n                fi\n                if [ $max_i -gt $max_j ]; then\n                    max_i=$max_j\n                fi\n                if [ $max_i -gt $max_k ]; then\n                    max_i=$max_k\n                fi\n                if [ $max_j -gt $max_k ]; then\n                    max_j=$max_k\n                fi\n                if [ $max_i -gt $max_j ]; then\n                    max_i=$max_j\n                fi\n                if [ $max_i -gt $max_k ]; then\n                    max_i=$max_k\n                fi\n                if [ $max_j -gt $max_k ]; then\n                    max_j=$max_k\n                fi\n                if [ $max_i -gt $max_j ]; then\n                    max_i=$max_j\n                fi\n                if [ $max_i -gt $max_k ]; then\n                    max_i=$max_k\n                fi\n                if [ $max_j -gt $max_k ]; then\n                    max_j=$max_k\n                fi\n                if [ $max_i -gt $max_j ]; then\n                    max_i=$max_j\n                fi\n                if [ $max_i -gt $max_k ]; then\n                    max_i=$max_k\n                fi\n                if [ $max_j -gt",
    "    arr=($1)\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $k -eq 0 ]]; then\n        echo \"k cannot be 0\"\n        exit 1\n    fi\n    if [[ $k -eq 1 ]]; then\n        echo \"k cannot be 1\"\n        exit 1\n    fi\n    if [[ $k -eq 2 ]]; then\n        echo \"k cannot be 2\"\n        exit 1\n    fi\n    if [[ $k -eq 3 ]]; then\n        echo \"k cannot be 3\"\n        exit 1\n    fi\n    if [[ $k -eq 4 ]]; then\n        echo \"k cannot be 4\"\n        exit 1\n    fi\n    if [[ $k -eq 5 ]]; then\n        echo \"k cannot be 5\"\n        exit 1\n    fi\n    if [[ $k -eq 6 ]]; then\n        echo \"k cannot be 6\"\n        exit 1\n    fi\n    if [[ $k -eq 7 ]]; then\n        echo \"k cannot be 7\"\n        exit 1\n    fi\n    if [[ $k -eq 8 ]]; then\n        echo \"k cannot be 8\"\n        exit 1\n    fi\n    if [[ $k -eq 9 ]]; then\n        echo \"k cannot be 9\"\n        exit 1\n    fi\n    if [[ $k -eq 10 ]]; then\n        echo \"k cannot be 10\"\n        exit 1\n    fi\n    if [[ $k -eq 11 ]]; then\n        echo \"k cannot be 11\"\n        exit 1\n    fi\n    if [[ $k -eq 12 ]]; then\n        echo \"k cannot be 12\"\n        exit 1\n    fi\n    if [[ $k -eq 13 ]]; then\n        echo \"k cannot be 13\"\n        exit 1\n    fi\n    if [[ $k -eq 14 ]]; then\n        echo \"k cannot be 14\"\n        exit 1\n    fi\n    if [[ $k -eq 15 ]]; then\n        echo \"k",
    "  arr=$1\n  k=$2\n  if [[ $k -lt 0 ]]; then\n    echo \"k must be positive\"\n    exit 1\n  fi\n  if [[ $k -gt $# ]]; then\n    echo \"k must be less than the number of elements in arr\"\n    exit 1\n  fi\n  arr_len=$#\n  max_num=$(awk '{print $1}' $arr)\n  max_num_index=$(awk '{print $2}' $arr)\n  max_num_index_len=$#\n  max_num_index_len_arr_len=$#\n  max_num_index_len_arr_len_max_num_index_len=$#\n  max_num_index_len_arr_len_max_num_index_len_max_num_index=$#\n  max_num_index_len_arr_len_max_num_index_len_max_num_index_max_num_index=$#\n  max_num_index_len_arr_len_max_num_index_len_max_num_index_max_num_index_max_num_index=$#\n  max_num_index_len_arr_len_max_num_index_len_max_num_index_max_num_index_max_num_index_max_num_index=$#\n  max_num_index_len_arr_len_max_num_index_len_max_num_index_max_num_index_max_num_index_max_num_index_max_num_index=$#\n  max_num_index_len_arr_len_max_num_index_len_max_num_index_max_num_index_max_num_index_max_num_index_max_num_index_max_num_index=$#\n  max_num_index_len_arr_len_max_num_index_len_max_num_index_max_num_index_max_num_index_max_num_index_max_num_index_max_num_index_max_num_index=$#\n  max_num_index_len_arr_len_max_",
    "    arr=$1\n    k=$2\n    arr_len=$#arr\n    max_k=$((k > arr_len ? arr_len : k))\n    max_arr=$(awk '{print $1}' \"${arr[0]}\")\n    for i in ${arr[1:max_k]}\n    do\n        max_arr=$(awk '{print $1}' \"${max_arr} ${i}\")\n    done\n    echo \"${max_arr}\"",
    "  arr=($1)\n  k=$2\n  max_k=$(echo \"${arr[@]}\" | sort -n | tail -n $k)\n  echo \"${max_k[@]}\"",
    "    local i\n    local j\n    local k\n    local arr\n    local max\n    local max_index\n    local max_value\n    local max_value_index\n    local max_value_value\n\n    arr=$1\n    k=$2\n    max_index=0\n    max_value=0\n    max_value_index=0\n    max_value_value=0\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_value ]; then\n            max_value=$i\n            max_value_index=$i\n            max_value_value=$i\n        fi\n        if [ $i -gt $max_value ]; then\n            max_value=$i\n            max_value_index=$i\n            max_value_value=$i\n        fi\n    done\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_value ]; then\n            max_value=$i\n            max_value_index=$i\n            max_value_value=$i\n        fi\n        if [ $i -gt $max_value ]; then\n            max_value=$i\n            max_value_index=$i\n            max_value_value=$i\n        fi\n    done\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_value ]; then\n            max_value=$i\n            max_value_index=$i\n            max_value_value=$i\n        fi\n        if [ $i -gt $max_value ]; then\n            max_value=$i\n            max_value_index=$i\n            max_value_value=$i\n        fi\n    done\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_value ]; then\n            max_value=$i\n            max_value_index=$i\n            max_value_value=$i\n        fi\n        if [ $i -gt $max_value ]; then\n            max_value=$i\n            max_value_index=$i\n            max_value_value=$i\n        fi\n    done\n    for i in \"${arr[@]}\"\n    do",
    "  arr=($1)\n  k=$2\n  if [ \"$k\" -lt \"$#arr\" ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  arr=($arr)\n  if [ \"$k\" -gt \"$#arr\" ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ \"$k\" -eq \"$#arr\" ]; then\n    echo \"$arr\"\n    exit 0\n  fi\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n",
    "    arr=($1)\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $# -lt $k ]]; then\n        echo \"arr must have at least k elements\"\n        exit 1\n    fi\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr",
    "    arr=$1\n    k=$2\n    max_arr=[]\n    for i in $arr; do\n        if [ $i -gt 0 ]; then\n            max_arr.append($i)\n        fi\n    done\n    if [ $k -gt 0 ]; then\n        max_arr=max_arr[0:$k]\n    fi\n    max_arr.sort()\n    max_arr.reverse()\n    max_arr=max_arr[0:$k]\n    max_arr.sort()\n    max_arr.reverse()\n    max_arr",
    "    arr=($1)\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than or equal to the number of elements in arr\"\n        exit 1\n    fi\n    max_k=$(echo \"$arr\" | tr \" \" \"\\n\" | sort -n | tail -n $k)\n    echo \"$max_k\"",
    "    arr=($1)\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $k -eq 0 ]]; then\n        echo \"k cannot be zero\"\n        exit 1\n    fi\n    if [[ $k -eq 1 ]]; then\n        echo \"k cannot be one\"\n        exit 1\n    fi\n    if [[ $k -lt $# ]]; then\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=($arr)\n        arr=(",
    "    arr=($1)\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the length of arr\"\n        exit 1\n    fi\n    if [[ $k -eq 0 ]]; then\n        echo \"k cannot be 0\"\n        exit 1\n    fi\n    if [[ $k -eq 1 ]]; then\n        echo \"k cannot be 1\"\n        exit 1\n    fi\n    if [[ $k -eq 2 ]]; then\n        echo \"k cannot be 2\"\n        exit 1\n    fi\n    if [[ $k -eq 3 ]]; then\n        echo \"k cannot be 3\"\n        exit 1\n    fi\n    if [[ $k -eq 4 ]]; then\n        echo \"k cannot be 4\"\n        exit 1\n    fi\n    if [[ $k -eq 5 ]]; then\n        echo \"k cannot be 5\"\n        exit 1\n    fi\n    if [[ $k -eq 6 ]]; then\n        echo \"k cannot be 6\"\n        exit 1\n    fi\n    if [[ $k -eq 7 ]]; then\n        echo \"k cannot be 7\"\n        exit 1\n    fi\n    if [[ $k -eq 8 ]]; then\n        echo \"k cannot be 8\"\n        exit 1\n    fi\n    if [[ $k -eq 9 ]]; then\n        echo \"k cannot be 9\"\n        exit 1\n    fi\n    if [[ $k -eq 10 ]]; then\n        echo \"k cannot be 10\"\n        exit 1\n    fi\n    if [[ $k -eq 11 ]]; then\n        echo \"k cannot be 11\"\n        exit 1\n    fi\n    if [[ $k -eq 12 ]]; then\n        echo \"k cannot be 12\"\n        exit 1\n    fi\n    if [[ $k -eq 13 ]]; then\n        echo \"k cannot be 13\"\n        exit 1\n    fi\n    if [[ $k -eq 14 ]]; then\n        echo \"k cannot be 14\"\n        exit 1\n    fi\n    if [[ $k -eq 15 ]]; then\n        echo \"k cannot be",
    "    arr=($1)\n    k=$2\n    if [ \"$#\" -gt \"2\" ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ \"$#\" -lt \"3\" ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ \"$#\" -eq \"3\" ]; then\n        if [ \"$k\" -lt \"$#\" ]; then\n            echo \"Usage: $0 arr k\"\n            exit 1\n        fi\n    fi\n    if [ \"$#\" -eq \"2\" ]; then\n        if [ \"$k\" -lt \"$#\" ]; then\n            echo \"Usage: $0 arr k\"\n            exit 1\n        fi\n    fi\n    if [ \"$#\" -eq \"1\" ]; then\n        if [ \"$k\" -lt \"$#\" ]; then\n            echo \"Usage: $0 arr k\"\n            exit 1\n        fi\n    fi\n    if [ \"$#\" -eq \"0\" ]; then\n        if [ \"$k\" -lt \"$#\" ]; then\n            echo \"Usage: $0 arr k\"\n            exit 1\n        fi\n    fi\n    if [ \"$#\" -eq \"2\" ]; then\n        if [ \"$k\" -gt \"$#\" ]; then\n            echo \"Usage: $0 arr k\"\n            exit 1\n        fi\n    fi\n    if [ \"$#\" -eq \"1\" ]; then\n        if [ \"$k\" -gt \"$#\" ]; then\n            echo \"Usage: $0 arr k\"\n            exit 1\n        fi\n    fi\n    if [ \"$#\" -eq \"0\" ]; then\n        if [ \"$k\" -gt \"$#\" ]; then\n            echo \"Usage: $0 arr k\"\n            exit 1\n        fi\n    fi\n    if [ \"$#\" -eq \"2\" ]; then\n        if [ \"$k\" -eq \"$#\" ]; then\n            echo \"Usage: $0 arr k\"\n            exit 1\n        fi\n    fi\n    if [ \"$#\" -eq \"1\" ]; then\n        if [ \"$k\" -eq \"$#\" ]; then\n            echo \"Usage: $0 arr k\"\n            exit 1\n        ",
    "    local i\n    local j\n    local k\n    local arr\n    local max\n    local max_index\n    local max_value\n\n    arr=$1\n    k=$2\n    max_index=0\n    max_value=0\n    for i in $arr; do\n        if [ $i -gt $max_value ]; then\n            max_value=$i\n            max_index=$i\n        fi\n    done\n    for i in $arr; do\n        if [ $i -gt $max_value ]; then\n            max_value=$i\n            max_index=$i\n        fi\n    done\n    for i in $arr; do\n        if [ $i -gt $max_value ]; then\n            max_value=$i\n            max_index=$i\n        fi\n    done\n    for i in $arr; do\n        if [ $i -gt $max_value ]; then\n            max_value=$i\n            max_index=$i\n        fi\n    done\n    for i in $arr; do\n        if [ $i -gt $max_value ]; then\n            max_value=$i\n            max_index=$i\n        fi\n    done\n    for i in $arr; do\n        if [ $i -gt $max_value ]; then\n            max_value=$i\n            max_index=$i\n        fi\n    done\n    for i in $arr; do\n        if [ $i -gt $max_value ]; then\n            max_value=$i\n            max_index=$i\n        fi\n    done\n    for i in $arr; do\n        if [ $i -gt $max_value ]; then\n            max_value=$i\n            max_index=$i\n        fi\n    done\n    for i in $arr; do\n        if [ $i -gt $max_value ]; then\n            max_value=$i\n            max_index=$i\n        fi\n    done\n    for i in $arr; do\n        if [ $i -gt $max_value ]; then\n            max_value=$i\n            max_index=$i\n        fi\n    done\n    for i in $arr; do\n        if [ $i -gt $max_value ]; then\n            max_",
    "    local arr=$1\n    local k=$2\n    # $3 is the result\n    result=$3\n    # $4 is the max\n    max=$4\n    # $5 is the min\n    min=$5\n    # $6 is the max index\n    max_index=$6\n    # $7 is the min index\n    min_index=$7\n    # $8 is the max value\n    max_value=$8\n    # $9 is the min value\n    min_value=$9\n    # $10 is the max value index\n    max_value_index=$10\n    # $11 is the min value index\n    min_value_index=$11\n    # $12 is the max value index\n    max_index_value=$12\n    # $13 is the min value index\n    min_index_value=$13\n    # $14 is the max value index\n    max_index_value_index=$14\n    # $15 is the min value index\n    min_index_value_index=$15\n    # $16 is the max value index\n    max_index_value_index_value=$16\n    # $17 is the min value index\n    min_index_value_index_value=$17\n    # $18 is the max value index\n    max_index_value_index_value_index=$18\n    # $19 is the min value index\n    min_index_value_index_value_index=$19\n    # $20 is the max value index\n    max_index_value_index_value_index_value=$20\n    # $21 is the min value index\n    min_index_value_index_value_index_value=$21\n    # $22 is the max value index\n    max_index_value_index_value_index_value_index=$22\n    # $23 is the min value index\n    min_index_value_index_value_index_value_index_value=$23\n    # $24 is the max value index\n    max_index_value_index_value_index_value_index_value_index=$24\n    # $25 is the min value index\n    min_index_value_index_value_index_value_index_value_index_value=$25\n    ",
    "    arr=($1)\n    k=$2\n    if [[ $k -gt $#arr ]]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [[ $k -lt 0 ]]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [[ $k -eq 0 ]]; then\n        echo \"$arr\"\n        exit 0\n    fi\n    if [[ $k -eq 1 ]]; then\n        echo \"$arr\"\n        exit 0\n    fi\n    if [[ $k -eq 2 ]]; then\n        echo \"$arr\"\n        exit 0\n    fi\n    if [[ $k -eq 3 ]]; then\n        echo \"$arr\"\n        exit 0\n    fi\n    if [[ $k -eq 4 ]]; then\n        echo \"$arr\"\n        exit 0\n    fi\n    if [[ $k -eq 5 ]]; then\n        echo \"$arr\"\n        exit 0\n    fi\n    if [[ $k -eq 6 ]]; then\n        echo \"$arr\"\n        exit 0\n    fi\n    if [[ $k -eq 7 ]]; then\n        echo \"$arr\"\n        exit 0\n    fi\n    if [[ $k -eq 8 ]]; then\n        echo \"$arr\"\n        exit 0\n    fi\n    if [[ $k -eq 9 ]]; then\n        echo \"$arr\"\n        exit 0\n    fi\n    if [[ $k -eq 10 ]]; then\n        echo \"$arr\"\n        exit 0\n    fi\n    if [[ $k -eq 11 ]]; then\n        echo \"$arr\"\n        exit 0\n    fi\n    if [[ $k -eq 12 ]]; then\n        echo \"$arr\"\n        exit 0\n    fi\n    if [[ $k -eq 13 ]]; then\n        echo \"$arr\"\n        exit 0\n    fi\n    if [[ $k -eq 14 ]]; then\n        echo \"$arr\"\n        exit 0\n    fi\n    if [[ $k -eq 15 ]]; then\n        echo \"$arr\"\n        exit 0\n    fi\n    if [[ $k -eq 16 ]]; then\n        echo \"$arr\"\n        exit 0\n    fi\n    if [[ $k -eq 17 ]]; then\n        ",
    "  arr=$1\n  k=$2\n  if [ $# -gt 1 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $# -lt 2 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $# -eq 2 ]; then\n    arr=$1\n    k=$2\n  fi\n  if [ $# -eq 1 ]; then\n    arr=$1\n  fi\n  arr=($arr)\n  k=$k\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($",
    "    arr=$1\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the number of elements in arr\"\n        exit 1\n    fi\n    arr_len=$#\n    max_k_arr=$(awk '{print $1}' $arr)\n    max_k_arr_len=$#\n    max_k_arr_index=$(awk '{print $1}' $max_k_arr)\n    max_k_arr_index_len=$#\n    max_k_arr_index_index=$(awk '{print $1}' $max_k_arr_index)\n    max_k_arr_index_index_len=$#\n    max_k_arr_index_index_index=$(awk '{print $1}' $max_k_arr_index_index)\n    max_k_arr_index_index_index_len=$#\n    max_k_arr_index_index_index_index=$(awk '{print $1}' $max_k_arr_index_index_index)\n    max_k_arr_index_index_index_index_len=$#\n    max_k_arr_index_index_index_index_index=$(awk '{print $1}' $max_k_arr_index_index_index_index)\n    max_k_arr_index_index_index_index_index_len=$#\n    max_k_arr_index_index_index_index_index_index=$(awk '{print $1}' $max_k_arr_index_index_index_index_index)\n    max_k_arr_index_index_index_index_index_index_len=$#\n    max_k_arr_index_index_index_index_index_index_index=$(awk '{print $1}' $max_k_arr_index_index_index_index_index_index)\n    max_k_arr_index_index_index_index_index_index_index_len=$#\n    ",
    "    arr=($1)\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the length of arr\"\n        exit 1\n    fi\n    if [[ $k -eq 0 ]]; then\n        echo \"k cannot be zero\"\n        exit 1\n    fi\n    if [[ $k -eq 1 ]]; then\n        echo \"k cannot be one\"\n        exit 1\n    fi\n    if [[ $k -eq 2 ]]; then\n        echo \"k cannot be two\"\n        exit 1\n    fi\n    if [[ $k -eq 3 ]]; then\n        echo \"k cannot be three\"\n        exit 1\n    fi\n    if [[ $k -eq 4 ]]; then\n        echo \"k cannot be four\"\n        exit 1\n    fi\n    if [[ $k -eq 5 ]]; then\n        echo \"k cannot be five\"\n        exit 1\n    fi\n    if [[ $k -eq 6 ]]; then\n        echo \"k cannot be six\"\n        exit 1\n    fi\n    if [[ $k -eq 7 ]]; then\n        echo \"k cannot be seven\"\n        exit 1\n    fi\n    if [[ $k -eq 8 ]]; then\n        echo \"k cannot be eight\"\n        exit 1\n    fi\n    if [[ $k -eq 9 ]]; then\n        echo \"k cannot be nine\"\n        exit 1\n    fi\n    if [[ $k -eq 10 ]]; then\n        echo \"k cannot be ten\"\n        exit 1\n    fi\n    if [[ $k -eq 11 ]]; then\n        echo \"k cannot be eleven\"\n        exit 1\n    fi\n    if [[ $k -eq 12 ]]; then\n        echo \"k cannot be twelve\"\n        exit 1\n    fi\n    if [[ $k -eq 13 ]]; then\n        echo \"k cannot be thirteen\"\n        exit 1\n    fi\n    if [[ $k -eq 14 ]]; then\n        echo \"k cannot be fourteen\"\n        exit 1\n    fi\n    if [[ $k -eq 15 ]]; then\n        echo \"k cannot be",
    "    arr=($1)\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the length of arr\"\n        exit 1\n    fi\n    if [[ $k -eq 0 ]]; then\n        echo \"k cannot be 0\"\n        exit 1\n    fi\n    if [[ $k -eq 1 ]]; then\n        echo \"k cannot be 1\"\n        exit 1\n    fi\n    if [[ $k -eq 2 ]]; then\n        echo \"k cannot be 2\"\n        exit 1\n    fi\n    if [[ $k -eq 3 ]]; then\n        echo \"k cannot be 3\"\n        exit 1\n    fi\n    if [[ $k -eq 4 ]]; then\n        echo \"k cannot be 4\"\n        exit 1\n    fi\n    if [[ $k -eq 5 ]]; then\n        echo \"k cannot be 5\"\n        exit 1\n    fi\n    if [[ $k -eq 6 ]]; then\n        echo \"k cannot be 6\"\n        exit 1\n    fi\n    if [[ $k -eq 7 ]]; then\n        echo \"k cannot be 7\"\n        exit 1\n    fi\n    if [[ $k -eq 8 ]]; then\n        echo \"k cannot be 8\"\n        exit 1\n    fi\n    if [[ $k -eq 9 ]]; then\n        echo \"k cannot be 9\"\n        exit 1\n    fi\n    if [[ $k -eq 10 ]]; then\n        echo \"k cannot be 10\"\n        exit 1\n    fi\n    if [[ $k -eq 11 ]]; then\n        echo \"k cannot be 11\"\n        exit 1\n    fi\n    if [[ $k -eq 12 ]]; then\n        echo \"k cannot be 12\"\n        exit 1\n    fi\n    if [[ $k -eq 13 ]]; then\n        echo \"k cannot be 13\"\n        exit 1\n    fi\n    if [[ $k -eq 14 ]]; then\n        echo \"k cannot be 14\"\n        exit 1\n    fi\n    if [[ $k -eq 15 ]]; then\n        echo \"k cannot be",
    "    arr=$1\n    k=$2\n    max_arr=[]\n    for i in $arr; do\n        if [ $i -gt 0 ]; then\n            max_arr.append(\"$i\")\n        fi\n    done\n    if [ $k -gt 0 ]; then\n        max_arr=$max_arr[0:$k]\n    fi\n    max_arr.sort()\n    max_arr.reverse()\n    max_arr=max_arr[0:$k]\n    max_arr.sort()\n    max_arr.reverse()\n    max_arr",
    "    arr=($1)\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the number of elements in arr\"\n        exit 1\n    fi\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr",
    "    arr=($1)\n    k=$2\n    if [[ $k -gt $#arr ]]; then\n        echo \"Error: $k is greater than the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $k -lt 0 ]]; then\n        echo \"Error: $k is less than 0\"\n        exit 1\n    fi\n    if [[ $k -eq 0 ]]; then\n        echo \"Error: $k is 0\"\n        exit 1\n    fi\n    if [[ $k -eq 1 ]]; then\n        echo \"$arr\"\n        return\n    fi\n    if [[ $k -eq 2 ]]; then\n        echo \"$arr[0] $arr[1]\"\n        return\n    fi\n    if [[ $k -eq 3 ]]; then\n        echo \"$arr[0] $arr[1] $arr[2]\"\n        return\n    fi\n    if [[ $k -eq 4 ]]; then\n        echo \"$arr[0] $arr[1] $arr[2] $arr[3]\"\n        return\n    fi\n    if [[ $k -eq 5 ]]; then\n        echo \"$arr[0] $arr[1] $arr[2] $arr[3] $arr[4]\"\n        return\n    fi\n    if [[ $k -eq 6 ]]; then\n        echo \"$arr[0] $arr[1] $arr[2] $arr[3] $arr[4] $arr[5]\"\n        return\n    fi\n    if [[ $k -eq 7 ]]; then\n        echo \"$arr[0] $arr[1] $arr[2] $arr[3] $arr[4] $arr[5] $arr[6]\"\n        return\n    fi\n    if [[ $k -eq 8 ]]; then\n        echo \"$arr[0] $arr[1] $arr[2] $arr[3] $arr[4] $arr[5] $arr[6] $arr[7]\"\n        return\n    fi\n    if [[ $k -eq 9 ]]; then\n        echo \"$arr[0] $arr[1] $arr[2] $arr[3] $arr[4] $arr[5] $arr[6] $arr[7",
    "    arr=$1\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the number of elements in arr\"\n        exit 1\n    fi\n    arr_len=$#\n    max_k=$(($k/$arr_len))\n    max_k_arr=$(($max_k*$arr_len))\n    max_k_arr_arr=$(($max_k_arr/arr_len))\n    max_k_arr_arr_arr=$(($max_k_arr_arr/arr_len))\n    max_k_arr_arr_arr_arr=$(($max_k_arr_arr_arr/arr_len))\n    max_k_arr_arr_arr_arr_arr=$(($max_k_arr_arr_arr_arr/arr_len))\n    max_k_arr_arr_arr_arr_arr_arr=$(($max_k_arr_arr_arr_arr_arr/arr_len))\n    max_k_arr_arr_arr_arr_arr_arr_arr=$(($max_k_arr_arr_arr_arr_arr_arr/arr_len))\n    max_k_arr_arr_arr_arr_arr_arr_arr_arr=$(($max_k_arr_arr_arr_arr_arr_arr_arr/arr_len))\n    max_k_arr_arr_arr_arr_arr_arr_arr_arr_arr=$(($max_k_arr_arr_arr_arr_arr_arr_arr_arr/arr_len))\n    max_k_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr=$(($max_k_arr_arr_arr_arr_arr_arr_arr_arr_arr/arr_len))\n    max_k_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr=$(($max_k_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr/arr_len",
    "    local i j k max\n    i=1\n    while [[ $i -lt $# ]]; do\n        j=$i\n        while [[ $j -lt $# ]]; do\n            if [[ $($i) -ge $($j) ]]; then\n                max=$($i)\n                k=1\n            fi\n            k=$((k+1))\n            j=$((j+1))\n        done\n        i=$((i+1))\n    done\n    echo $max",
    "    arr=($1)\n    k=$2\n    if [ $# -gt 1 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 3 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 4 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 5 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 6 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 7 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 8 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 9 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 10 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 11 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 12 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 13 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 14 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 15 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 16 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt 17 ]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    if [ $# -lt",
    "  arr=($1)\n  k=$2\n  if [[ $k -lt 0 ]]; then\n    echo \"k must be positive\"\n    exit 1\n  fi\n  if [[ $k -gt $# ]]; then\n    echo \"k must be less than the number of elements in arr\"\n    exit 1\n  fi\n  if [[ $k -eq 0 ]]; then\n    echo \"k cannot be 0\"\n    exit 1\n  fi\n  if [[ $k -eq 1 ]]; then\n    echo \"k cannot be 1\"\n    exit 1\n  fi\n  if [[ $k -eq 2 ]]; then\n    echo \"k cannot be 2\"\n    exit 1\n  fi\n  if [[ $k -eq 3 ]]; then\n    echo \"k cannot be 3\"\n    exit 1\n  fi\n  if [[ $k -eq 4 ]]; then\n    echo \"k cannot be 4\"\n    exit 1\n  fi\n  if [[ $k -eq 5 ]]; then\n    echo \"k cannot be 5\"\n    exit 1\n  fi\n  if [[ $k -eq 6 ]]; then\n    echo \"k cannot be 6\"\n    exit 1\n  fi\n  if [[ $k -eq 7 ]]; then\n    echo \"k cannot be 7\"\n    exit 1\n  fi\n  if [[ $k -eq 8 ]]; then\n    echo \"k cannot be 8\"\n    exit 1\n  fi\n  if [[ $k -eq 9 ]]; then\n    echo \"k cannot be 9\"\n    exit 1\n  fi\n  if [[ $k -eq 10 ]]; then\n    echo \"k cannot be 10\"\n    exit 1\n  fi\n  if [[ $k -eq 11 ]]; then\n    echo \"k cannot be 11\"\n    exit 1\n  fi\n  if [[ $k -eq 12 ]]; then\n    echo \"k cannot be 12\"\n    exit 1\n  fi\n  if [[ $k -eq 13 ]]; then\n    echo \"k cannot be 13\"\n    exit 1\n  fi\n  if [[ $k -eq 14 ]]; then\n    echo \"k cannot be 14\"\n    exit 1\n  fi\n  if [[ $k -eq 15 ]]; then\n    echo \"k",
    "  arr=$1\n  k=$2\n  if [ $# -eq 0 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $# -gt 2 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $# -lt 2 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $# -lt 2 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $# -lt 2 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $# -lt 2 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $# -lt 2 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $# -lt 2 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $# -lt 2 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $# -lt 2 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $# -lt 2 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $# -lt 2 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $# -lt 2 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $# -lt 2 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $# -lt 2 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $# -lt 2 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $# -lt 2 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $# -lt 2 ];",
    "    arr=($1)\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the number of elements in arr\"\n        exit 1\n    fi\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr=($arr)\n    arr",
    "    local i\n    local j\n    local k\n    local arr\n    local max\n    local max_index\n    local max_value\n\n    arr=$1\n    k=$2\n    max_index=0\n    max_value=0\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_value ]; then\n            max_index=$i\n            max_value=$i\n        fi\n    done\n\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_value ]; then\n            max_index=$i\n            max_value=$i\n        fi\n    done\n\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_value ]; then\n            max_index=$i\n            max_value=$i\n        fi\n    done\n\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_value ]; then\n            max_index=$i\n            max_value=$i\n        fi\n    done\n\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_value ]; then\n            max_index=$i\n            max_value=$i\n        fi\n    done\n\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_value ]; then\n            max_index=$i\n            max_value=$i\n        fi\n    done\n\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_value ]; then\n            max_index=$i\n            max_value=$i\n        fi\n    done\n\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_value ]; then\n            max_index=$i\n            max_value=$i\n        fi\n    done\n\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_value ]; then\n            max_index=$i\n            max_value=$i\n        fi\n    done\n\n    for i in \"${arr[@]}\"\n    do\n",
    "    arr=($1)\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the length of arr\"\n        exit 1\n    fi\n    if [[ $k -eq 0 ]]; then\n        echo \"k cannot be zero\"\n        exit 1\n    fi\n    if [[ $k -eq 1 ]]; then\n        echo \"k cannot be one\"\n        exit 1\n    fi\n    if [[ $k -eq 2 ]]; then\n        echo \"k cannot be two\"\n        exit 1\n    fi\n    if [[ $k -eq 3 ]]; then\n        echo \"k cannot be three\"\n        exit 1\n    fi\n    if [[ $k -eq 4 ]]; then\n        echo \"k cannot be four\"\n        exit 1\n    fi\n    if [[ $k -eq 5 ]]; then\n        echo \"k cannot be five\"\n        exit 1\n    fi\n    if [[ $k -eq 6 ]]; then\n        echo \"k cannot be six\"\n        exit 1\n    fi\n    if [[ $k -eq 7 ]]; then\n        echo \"k cannot be seven\"\n        exit 1\n    fi\n    if [[ $k -eq 8 ]]; then\n        echo \"k cannot be eight\"\n        exit 1\n    fi\n    if [[ $k -eq 9 ]]; then\n        echo \"k cannot be nine\"\n        exit 1\n    fi\n    if [[ $k -eq 10 ]]; then\n        echo \"k cannot be ten\"\n        exit 1\n    fi\n    if [[ $k -eq 11 ]]; then\n        echo \"k cannot be eleven\"\n        exit 1\n    fi\n    if [[ $k -eq 12 ]]; then\n        echo \"k cannot be twelve\"\n        exit 1\n    fi\n    if [[ $k -eq 13 ]]; then\n        echo \"k cannot be thirteen\"\n        exit 1\n    fi\n    if [[ $k -eq 14 ]]; then\n        echo \"k cannot be fourteen\"\n        exit 1\n    fi\n    if [[ $k -eq 15 ]]; then\n        echo \"k cannot be",
    "  arr=($1)\n  k=$2\n  if [[ $k -lt 0 ]]; then\n    echo \"k must be positive\"\n    exit 1\n  fi\n  if [[ $k -gt $# ]]; then\n    echo \"k must be less than the number of elements in arr\"\n    exit 1\n  fi\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr",
    "    arr=($1)\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the length of arr\"\n        exit 1\n    fi\n    max_k=$(sort -n -r $arr | head -n $k)\n    echo $max_k",
    "    arr=($1)\n    k=$2\n    if [ \"$k\" -lt \"${#arr[@]}\" ]; then\n        echo \"ERROR: $k is less than the length of arr\"\n        exit 1\n    fi\n    if [ \"$k\" -gt \"${#arr[@]}\" ]; then\n        echo \"ERROR: $k is greater than the length of arr\"\n        exit 1\n    fi\n    for i in \"${arr[@]}\"\n    do\n        if [ \"$i\" -lt \"${#arr[@]}\" ]; then\n            echo \"ERROR: $i is less than the length of arr\"\n            exit 1\n        fi\n        if [ \"$i\" -gt \"${#arr[@]}\" ]; then\n            echo \"ERROR: $i is greater than the length of arr\"\n            exit 1\n        fi\n    done\n    arr_max=$(sort -t $' ' -r -k $k $arr | tail -n $k)\n    arr_max_str=$(echo $arr_max | tr -d ' ')\n    arr_max_str_arr=($arr_max_str)\n    arr_max_str_arr_str=$(echo $arr_max_str_arr | tr -d ' ')\n    arr_max_str_arr_str_arr=($arr_max_str_arr_str)\n    arr_max_str_arr_str_arr_str=$(echo $arr_max_str_arr_str_arr | tr -d ' ')\n    arr_max_str_arr_str_arr_str_arr=($arr_max_str_arr_str_arr_str)\n    arr_max_str_arr_str_arr_str_arr_str_arr=($arr_max_str_arr_str_arr_str_arr_str)\n    arr_max_str_arr_str_arr_str_arr_str_arr_str_arr=($arr_max_str_arr_str_arr_str_arr_str_arr_str_arr)\n    arr_max_str_arr_str_arr_str_arr_str_arr_str_arr_str_arr_arr=($",
    "    local i\n    local j\n    local max\n    local max_index\n    local max_value\n    local arr\n    local k\n    local arr_length\n    local arr_index\n    local arr_value\n    arr=$1\n    k=$2\n    arr_length=$((len(arr) + 1))\n    max_index=0\n    max_value=0\n    for i in \"${arr[@]}\"\n    do\n        arr_index=$((i + 1))\n        arr_value=$((arr[arr_index]))\n        if [ $arr_value -gt $max_value ]; then\n            max_value=$arr_value\n            max_index=$arr_index\n        fi\n    done\n    max_value=$max_value\n    max_index=$max_index\n    for i in \"${arr[@]}\"\n    do\n        arr_index=$((i + 1))\n        arr_value=$((arr[arr_index]))\n        if [ $arr_value -gt $max_value ]; then\n            max_value=$arr_value\n            max_index=$arr_index\n        fi\n    done\n    max_value=$max_value\n    max_index=$max_index\n    for i in \"${arr[@]}\"\n    do\n        arr_index=$((i + 1))\n        arr_value=$((arr[arr_index]))\n        if [ $arr_value -gt $max_value ]; then\n            max_value=$arr_value\n            max_index=$arr_index\n        fi\n    done\n    max_value=$max_value\n    max_index=$max_index\n    for i in \"${arr[@]}\"\n    do\n        arr_index=$((i + 1))\n        arr_value=$((arr[arr_index]))\n        if [ $arr_value -gt $max_value ]; then\n            max_value=$arr_value\n            max_index=$arr_index\n        fi\n    done\n    max_value=$max_value\n    max_index=$max_index\n    for i in \"${arr[@]}\"\n    do\n        arr_index=$((i + 1))\n        arr_value=$((",
    "    arr=$1\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the number of elements in arr\"\n        exit 1\n    fi\n    arr_len=$#\n    for i in $arr; do\n        if [[ $i -lt -$arr_len ]]; then\n            echo \"arr element $i is out of range\"\n            exit 1\n        fi\n        if [[ $i -gt $arr_len ]]; then\n            echo \"arr element $i is out of range\"\n            exit 1\n        fi\n    done\n    arr_len=$#\n    for i in $arr; do\n        if [[ $i -lt -$arr_len ]]; then\n            echo \"arr element $i is out of range\"\n            exit 1\n        fi\n        if [[ $i -gt $arr_len ]]; then\n            echo \"arr element $i is out of range\"\n            exit 1\n        fi\n    done\n    arr_len=$#\n    for i in $arr; do\n        if [[ $i -lt -$arr_len ]]; then\n            echo \"arr element $i is out of range\"\n            exit 1\n        fi\n        if [[ $i -gt $arr_len ]]; then\n            echo \"arr element $i is out of range\"\n            exit 1\n        fi\n    done\n    arr_len=$#\n    for i in $arr; do\n        if [[ $i -lt -$arr_len ]]; then\n            echo \"arr element $i is out of range\"\n            exit 1\n        fi\n        if [[ $i -gt $arr_len ]]; then\n            echo \"arr element $i is out of range\"\n            exit 1\n        fi\n    done\n    arr_len=$#\n    for i in $arr; do\n        if [[ $i -lt -$arr_len ]]; then\n            echo \"arr element $i is out of range\"\n            exit 1\n        fi\n        if [[ $i -gt $arr_len ]]; then\n            echo \"arr element $i is out of range",
    "  arr=($1)\n  k=$2\n  if [[ $k -lt 0 ]]; then\n    echo \"k must be positive\"\n    exit 1\n  fi\n  if [[ $k -gt $# ]]; then\n    echo \"k must be less than or equal to the number of elements in arr\"\n    exit 1\n  fi\n  if [[ $k -eq 0 ]]; then\n    echo \"k must be greater than 0\"\n    exit 1\n  fi\n  if [[ $k -eq 1 ]]; then\n    echo \"k must be greater than 1\"\n    exit 1\n  fi\n  if [[ $k -gt $# ]]; then\n    echo \"k must be less than or equal to the number of elements in arr\"\n    exit 1\n  fi\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr",
    "    arr=($1)\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the length of arr\"\n        exit 1\n    fi\n    if [[ $k -eq 0 ]]; then\n        echo \"k must be greater than 0\"\n        exit 1\n    fi\n    if [[ $k -eq 1 ]]; then\n        echo \"k must be greater than 1\"\n        exit 1\n    fi\n    if [[ $k -eq 2 ]]; then\n        echo \"k must be greater than 2\"\n        exit 1\n    fi\n    if [[ $k -eq 3 ]]; then\n        echo \"k must be greater than 3\"\n        exit 1\n    fi\n    if [[ $k -eq 4 ]]; then\n        echo \"k must be greater than 4\"\n        exit 1\n    fi\n    if [[ $k -eq 5 ]]; then\n        echo \"k must be greater than 5\"\n        exit 1\n    fi\n    if [[ $k -eq 6 ]]; then\n        echo \"k must be greater than 6\"\n        exit 1\n    fi\n    if [[ $k -eq 7 ]]; then\n        echo \"k must be greater than 7\"\n        exit 1\n    fi\n    if [[ $k -eq 8 ]]; then\n        echo \"k must be greater than 8\"\n        exit 1\n    fi\n    if [[ $k -eq 9 ]]; then\n        echo \"k must be greater than 9\"\n        exit 1\n    fi\n    if [[ $k -eq 10 ]]; then\n        echo \"k must be greater than 10\"\n        exit 1\n    fi\n    if [[ $k -eq 11 ]]; then\n        echo \"k must be greater than 11\"\n        exit 1\n    fi\n    if [[ $k -eq 12 ]]; then\n        echo \"k must be greater than 12\"\n        exit 1\n    fi\n    if [[ $k -eq 13 ]]; then\n        echo \"k must be greater than 13\"\n        exit 1\n    fi\n    if [[ $k -eq 14 ]]; then\n        echo \"k must be",
    "  arr=($1)\n  k=$2\n  if [ $# -gt 1 ]; then\n    shift\n  fi\n  if [ $# -lt 2 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $# -lt 3 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $# -lt 4 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $# -lt 5 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $# -lt 6 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $# -lt 7 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $# -lt 8 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $# -lt 9 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $# -lt 10 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $# -lt 11 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $# -lt 12 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $# -lt 13 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $# -lt 14 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $# -lt 15 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $# -lt 16 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $# -lt 17 ]; then\n    echo \"Usage: $0 arr k\"\n    exit 1\n  fi\n  if [ $# -lt 18 ]; then\n    echo \"Usage: $0 arr",
    "    arr=($1)\n    k=$2\n    max_k=$(echo \"$arr\" | tr \" \" \"\\n\" | sort -n | tail -n $k | cut -d\" \" -f1)\n    echo \"$max_k\"",
    "    arr=($1)\n    k=$2\n    if [[ $k -gt $#arr ]]; then\n        echo \"ERROR: $0: k must be less than or equal to the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $k -lt 0 ]]; then\n        echo \"ERROR: $0: k must be greater than or equal to 0\"\n        exit 1\n    fi\n    if [[ $k -eq 0 ]]; then\n        echo \"$0: k must be greater than 0\"\n        exit 1\n    fi\n    if [[ $k -eq 1 ]]; then\n        echo \"$0: k must be greater than 1\"\n        exit 1\n    fi\n    if [[ $k -gt $#arr ]]; then\n        echo \"$0: k must be less than or equal to the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $k -lt $#arr ]]; then\n        echo \"$0: k must be greater than or equal to the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $k -eq $#arr ]]; then\n        echo \"$0: k must be greater than or equal to 1\"\n        exit 1\n    fi\n    if [[ $k -gt $#arr ]]; then\n        echo \"$0: k must be less than or equal to the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $k -lt $#arr ]]; then\n        echo \"$0: k must be greater than or equal to the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $k -eq $#arr ]]; then\n        echo \"$0: k must be greater than 1\"\n        exit 1\n    fi\n    if [[ $k -gt $#arr ]]; then\n        echo \"$0: k must be less than or equal to the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $k -lt $#arr ]]; then\n        echo \"$0: k must be greater than or equal to the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $k -eq $#arr ]]; then\n        echo \"$0: k must be greater than 1\"\n        exit 1",
    "    arr=($1)\n    k=$2\n    max_k=$(echo \"${arr[@]}\" | sort | uniq | wc -l)\n    if [ \"${max_k}\" -gt \"${k}\" ]; then\n        echo \"${arr[@]}\"\n    else\n        echo \"${arr[@]}\" | sort | uniq | head -n \"${k}\"\n    fi",
    "    local i j max\n    for ((i=1; i<=${#1}; i++)); do\n        max=$(echo $1 | sort -n | tail -n 1)\n        if [ \"${#2}\" -eq 1 ]; then\n            if [ \"${2}\" -gt \"$max\" ]; then\n                max=$2\n            fi\n        fi\n        if [ \"${#2}\" -gt 1 ]; then\n            for ((j=1; j<=${#2}; j++)); do\n                if [ \"${2:$j}\" -gt \"$max\" ]; then\n                    max=$2:$j\n                fi\n            done\n        fi\n        echo $max\n    done",
    "    arr=$1\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $k -eq 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -eq 1 ]]; then\n        echo \"k must be greater than 1\"\n        exit 1\n    fi\n    if [[ $k -lt $# ]]; then\n        arr_len=$k\n    else\n        arr_len=$#\n    fi\n    if [[ $arr_len -gt $k ]]; then\n        arr_len=$k\n    fi\n    if [[ $arr_len -lt 1 ]]; then\n        arr_len=1\n    fi\n    if [[ $arr_len -gt $k ]]; then\n        arr_len=$k\n    fi\n    if [[ $arr_len -eq 1 ]]; then\n        arr_len=2\n    fi\n    if [[ $arr_len -gt 2 ]]; then\n        arr_len=3\n    fi\n    if [[ $arr_len -gt 3 ]]; then\n        arr_len=4\n    fi\n    if [[ $arr_len -gt 4 ]]; then\n        arr_len=5\n    fi\n    if [[ $arr_len -gt 5 ]]; then\n        arr_len=6\n    fi\n    if [[ $arr_len -gt 6 ]]; then\n        arr_len=7\n    fi\n    if [[ $arr_len -gt 7 ]]; then\n        arr_len=8\n    fi\n    if [[ $arr_len -gt 8 ]]; then\n        arr_len=9\n    fi\n    if [[ $arr_len -gt 9 ]]; then\n        arr_len=10\n    fi\n    if [[ $arr_len -gt 10 ]]; then\n        arr_len=11\n    fi\n    if [[ $arr_len -gt 11 ]]; then\n        arr_len=12\n    fi\n    if [[ $arr_len -gt",
    "  arr=($1)\n  k=$2\n  if [[ $k -lt 0 ]]; then\n    echo \"k must be positive\"\n    exit 1\n  fi\n  if [[ $k -gt $# ]]; then\n    echo \"k must be less than the number of elements in arr\"\n    exit 1\n  fi\n  if [[ $k -eq 0 ]]; then\n    echo \"k must be positive\"\n    exit 1\n  fi\n  if [[ $k -eq 1 ]]; then\n    echo \"k must be greater than 1\"\n    exit 1\n  fi\n  if [[ $k -gt $# ]]; then\n    echo \"k must be less than the number of elements in arr\"\n    exit 1\n  fi\n  if [[ $k -lt $# ]]; then\n    echo \"k must be greater than 1\"\n    exit 1\n  fi\n  arr_len=$#\n  for i in $(seq 1 $arr_len); do\n    if [[ $arr[$i] -lt $arr[0] ]]; then\n      echo \"arr must be sorted\"\n      exit 1\n    fi\n  done\n  arr_len=$#\n  for i in $(seq 1 $arr_len); do\n    if [[ $arr[$i] -gt $arr[$i-1] ]]; then\n      echo \"arr must be sorted\"\n      exit 1\n    fi\n  done\n  arr_len=$#\n  for i in $(seq 1 $arr_len); do\n    if [[ $arr[$i] -lt $arr[$i-1] ]]; then\n      echo \"arr must be sorted\"\n      exit 1\n    fi\n  done\n  arr_len=$#\n  for i in $(seq 1 $arr_len); do\n    if [[ $arr[$i] -gt $arr[$i-1] ]]; then\n      echo \"arr must be sorted\"\n      exit 1\n    fi\n  done\n  arr_len=$#\n  for i in $(seq 1 $arr_len); do\n    if [[ $arr[$i] -lt $arr[$i-1] ]]; then\n      echo \"arr must be sorted\"\n      exit 1\n    fi\n  done",
    "  arr=($1)\n  k=$2\n  if [[ $k -lt 0 ]]; then\n    echo \"k must be positive\"\n    exit 1\n  fi\n  if [[ $k -gt $# ]]; then\n    echo \"k must be less than the length of arr\"\n    exit 1\n  fi\n  if [[ $k -eq 0 ]]; then\n    echo \"k cannot be 0\"\n    exit 1\n  fi\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($",
    "  arr=$1\n  k=$2\n  if [[ $k -gt $#arr ]]; then\n    echo \"Error: $k is greater than the number of elements in arr\"\n    exit 1\n  fi\n  if [[ $k -lt 0 ]]; then\n    echo \"Error: $k is less than 0\"\n    exit 1\n  fi\n  if [[ $k -eq 0 ]]; then\n    echo \"$arr\"\n    exit 0\n  fi\n  arr_len=$(echo $arr | wc -w)\n  if [[ $arr_len -lt $k ]]; then\n    echo \"Error: $k is greater than the number of elements in arr\"\n    exit 1\n  fi\n  if [[ $arr_len -eq $k ]]; then\n    arr_max=$arr[$k-1]\n    for i in $arr[0:$k-1]; do\n      if [[ $arr_max -lt $i ]]; then\n        arr_max=$i\n      fi\n    done\n    arr_max_str=$arr_max\n    arr_max_str_len=$(echo $arr_max_str | wc -w)\n    if [[ $arr_max_str_len -gt $k ]]; then\n      arr_max_str=$arr_max_str[0:$k-1]\n    fi\n    echo $arr_max_str\n    exit 0\n  fi\n  arr_max=$arr[0]\n  arr_max_len=$(echo $arr_max | wc -w)\n  for i in $arr[1:]; do\n    if [[ $arr_max -lt $i ]]; then\n      arr_max=$i\n    fi\n  done\n  arr_max_str=$arr_max\n  arr_max_str_len=$(echo $arr_max_str | wc -w)\n  if [[ $arr_max_str_len -gt $k ]]; then\n    arr_max_str=$arr_max_str[0:$k-1]\n  fi\n  echo $arr_max_str",
    "    local i\n    local j\n    local k\n    local arr\n    local max\n    local max_index\n    local max_value\n\n    arr=$1\n    k=$2\n    max_index=0\n    max_value=0\n    for i in \"${arr[@]}\"; do\n        if [ \"$i\" -gt \"$max_value\" ]; then\n            max_value=$i\n            max_index=$((i+1))\n        fi\n    done\n\n    for i in \"${arr[@]}\"; do\n        if [ \"$i\" -gt \"$max_value\" ]; then\n            max_value=$i\n            max_index=$((i+1))\n        fi\n    done\n\n    for i in \"${arr[@]}\"; do\n        if [ \"$i\" -gt \"$max_value\" ]; then\n            max_value=$i\n            max_index=$((i+1))\n        fi\n    done\n\n    for i in \"${arr[@]}\"; do\n        if [ \"$i\" -gt \"$max_value\" ]; then\n            max_value=$i\n            max_index=$((i+1))\n        fi\n    done\n\n    for i in \"${arr[@]}\"; do\n        if [ \"$i\" -gt \"$max_value\" ]; then\n            max_value=$i\n            max_index=$((i+1))\n        fi\n    done\n\n    for i in \"${arr[@]}\"; do\n        if [ \"$i\" -gt \"$max_value\" ]; then\n            max_value=$i\n            max_index=$((i+1))\n        fi\n    done\n\n    for i in \"${arr[@]}\"; do\n        if [ \"$i\" -gt \"$max_value\" ]; then\n            max_value=$i\n            max_index=$((i+1))\n        fi\n    done\n\n    for i in \"${arr[@]}\"; do\n        if [ \"$i\" -gt \"$max_value\" ]; then\n            max_value=$i\n            max_index=$((i+1))\n        fi\n    done\n\n    for i in \"${arr[@]}\"; do\n        if [ \"$i\" -gt \"$max_value\" ]; then\n            max_",
    "    arr=$1\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $# -lt $k ]]; then\n        echo \"arr must have at least k elements\"\n        exit 1\n    fi\n    arr_len=$#\n    max_k=$(awk '{print $1}' $arr | sort -r | head -n $k)\n    for i in $max_k; do\n        if [[ $arr[$i] -gt $arr[$i-1] ]]; then\n            arr[$i-1]=$arr[$i]\n        fi\n    done\n    arr_len=$arr_len - $k\n    arr_len_str=$(printf \"%d\" $arr_len)\n    arr_str=$(printf \"%s\" $arr)\n    echo $arr_str",
    "    arr=($1)\n    k=$2\n    max_k=$(echo \"$arr\" | tr \" \" \"\\n\" | sort | uniq | wc -l)\n    if [ $k -gt $max_k ]; then\n        echo \"ERROR: $k is greater than $max_k\"\n        exit 1\n    fi\n    if [ $k -lt 0 ]; then\n        echo \"ERROR: $k is less than 0\"\n        exit 1\n    fi\n    if [ $k -eq 0 ]; then\n        echo \"$arr\"\n        exit 0\n    fi\n    for i in $(seq 1 $k); do\n        if [ $i -gt $max_k ]; then\n            break\n        fi\n        if [ $i -lt 0 ]; then\n            break\n        fi\n        if [ $arr[$i] -gt $arr[$i-1] ]; then\n            arr[$i-1]=$arr[$i]\n        fi\n    done\n    arr=($arr)\n    arr=($arr[0:$k])\n    arr=($arr[$k:])\n    arr=($arr[0:])\n    arr=($arr[$k-1:])\n    arr=($arr[$k-2:])\n    arr=($arr[$k-3:])\n    arr=($arr[$k-4:])\n    arr=($arr[$k-5:])\n    arr=($arr[$k-6:])\n    arr=($arr[$k-7:])\n    arr=($arr[$k-8:])\n    arr=($arr[$k-9:])\n    arr=($arr[$k-10:])\n    arr=($arr[$k-11:])\n    arr=($arr[$k-12:])\n    arr=($arr[$k-13:])\n    arr=($arr[$k-14:])\n    arr=($arr[$k-15:])\n    arr=($arr[$k-16:])\n    arr=($arr[$k-17:])\n    arr=($arr[$k-18:])\n    arr=($arr[$k-19:])\n",
    "    arr=($1)\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the length of arr\"\n        exit 1\n    fi\n    if [[ $k -eq 0 ]]; then\n        echo \"k cannot be zero\"\n        exit 1\n    fi\n    if [[ $k -eq 1 ]]; then\n        echo \"k cannot be one\"\n        exit 1\n    fi\n    if [[ $k -eq 2 ]]; then\n        echo \"k cannot be two\"\n        exit 1\n    fi\n    if [[ $k -eq 3 ]]; then\n        echo \"k cannot be three\"\n        exit 1\n    fi\n    if [[ $k -eq 4 ]]; then\n        echo \"k cannot be four\"\n        exit 1\n    fi\n    if [[ $k -eq 5 ]]; then\n        echo \"k cannot be five\"\n        exit 1\n    fi\n    if [[ $k -eq 6 ]]; then\n        echo \"k cannot be six\"\n        exit 1\n    fi\n    if [[ $k -eq 7 ]]; then\n        echo \"k cannot be seven\"\n        exit 1\n    fi\n    if [[ $k -eq 8 ]]; then\n        echo \"k cannot be eight\"\n        exit 1\n    fi\n    if [[ $k -eq 9 ]]; then\n        echo \"k cannot be nine\"\n        exit 1\n    fi\n    if [[ $k -eq 10 ]]; then\n        echo \"k cannot be ten\"\n        exit 1\n    fi\n    if [[ $k -eq 11 ]]; then\n        echo \"k cannot be eleven\"\n        exit 1\n    fi\n    if [[ $k -eq 12 ]]; then\n        echo \"k cannot be twelve\"\n        exit 1\n    fi\n    if [[ $k -eq 13 ]]; then\n        echo \"k cannot be thirteen\"\n        exit 1\n    fi\n    if [[ $k -eq 14 ]]; then\n        echo \"k cannot be fourteen\"\n        exit 1\n    fi\n    if [[ $k -eq 15 ]]; then\n        echo \"k cannot be",
    "  arr=$1\n  k=$2\n  if [[ $k -lt 0 ]]; then\n    echo \"k must be positive\"\n    exit 1\n  fi\n  if [[ $k -gt $# ]]; then\n    echo \"k must be less than the length of arr\"\n    exit 1\n  fi\n  if [[ $k -eq 0 ]]; then\n    echo \"k cannot be zero\"\n    exit 1\n  fi\n  if [[ $k -eq 1 ]]; then\n    echo \"k cannot be one\"\n    exit 1\n  fi\n  if [[ $k -lt $# ]]; then\n    echo \"k cannot be less than the length of arr\"\n    exit 1\n  fi\n  if [[ $k -gt $# ]]; then\n    echo \"k cannot be greater than the length of arr\"\n    exit 1\n  fi\n  arr_len=$#\n  arr_len_minus_k=$((arr_len-k))\n  arr_minus_k=$(echo $arr | sed -e 's/ / /g' | sed -e 's/^/ /g' | sed -e 's/$/ /g')\n  arr_minus_k_len=$#\n  arr_minus_k_len_minus_k=$((arr_minus_k_len-k))\n  arr_minus_k_minus_k=$(echo $arr | sed -e 's/ / /g' | sed -e 's/^/ /g' | sed -e 's/$/ /g')\n  arr_minus_k_minus_k_len=$#\n  arr_minus_k_minus_k_len_minus_k=$((arr_minus_k_minus_k_len-k))\n  arr_minus_k_minus_k_minus_k=$(echo $arr | sed -e 's/ / /g' | sed -e 's/^/ /g' | sed -e 's/$/ /g')\n  arr_minus_k_minus_k_minus_k_len=$#\n  arr_minus_k_minus_k_minus_k_len_minus_k=$((arr_minus_k_minus_k_minus_k_len-k",
    "    arr=$1\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the number of elements in arr\"\n        exit 1\n    fi\n    if [[ $# -eq 1 ]]; then\n        echo \"arr is empty\"\n        exit 1\n    fi\n    if [[ $# -gt 1 ]]; then\n        arr_len=$#\n    else\n        arr_len=1\n    fi\n    if [[ $arr_len -gt $k ]]; then\n        echo \"arr is too long\"\n        exit 1\n    fi\n    if [[ $arr_len -lt $k ]]; then\n        echo \"arr is too short\"\n        exit 1\n    fi\n    arr_len_minus_k=$arr_len-k\n    arr_len_minus_k_plus_1=$arr_len-1\n    arr_len_minus_k_plus_2=$arr_len-2\n    arr_len_minus_k_plus_3=$arr_len-3\n    arr_len_minus_k_plus_4=$arr_len-4\n    arr_len_minus_k_plus_5=$arr_len-5\n    arr_len_minus_k_plus_6=$arr_len-6\n    arr_len_minus_k_plus_7=$arr_len-7\n    arr_len_minus_k_plus_8=$arr_len-8\n    arr_len_minus_k_plus_9=$arr_len-9\n    arr_len_minus_k_plus_10=$arr_len-10\n    arr_len_minus_k_plus_11=$arr_len-11\n    arr_len_minus_k_plus_12=$arr_len-12\n    arr_len_minus_k_plus_13=$arr_len-13\n    arr_len_minus_k_plus_14=$arr_len-14\n    arr_len_minus_k_plus_15=$arr_len-15\n    arr_len_minus_k_plus_16=$arr_len-",
    "  arr=($1)\n  k=$2\n  if [[ $k -lt 0 ]]; then\n    echo \"k must be positive\"\n    exit 1\n  fi\n  if [[ $k -gt $# ]]; then\n    echo \"k must be less than the number of elements in arr\"\n    exit 1\n  fi\n  if [[ $k -eq 0 ]]; then\n    echo \"k must be positive\"\n    exit 1\n  fi\n  if [[ $k -eq 1 ]]; then\n    echo \"k must be greater than 1\"\n    exit 1\n  fi\n  if [[ $k -lt $# ]]; then\n    echo \"k must be less than the number of elements in arr\"\n    exit 1\n  fi\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)\n  arr=($arr)",
    "    arr=$1\n    k=$2\n    if [[ $k -gt $#arr ]]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    arr_len=$#arr\n    if [[ $arr_len -lt $k ]]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    arr_len_minus_k=$arr_len - k\n    arr_len_minus_k_plus_1=$arr_len_minus_k + 1\n    max_arr_len_minus_k_plus_1=$arr_len_minus_k_plus_1 - 1\n    max_arr_len_minus_k_plus_2=$arr_len_minus_k_plus_1 - 2\n    max_arr_len_minus_k_plus_3=$arr_len_minus_k_plus_1 - 3\n    max_arr_len_minus_k_plus_4=$arr_len_minus_k_plus_1 - 4\n    max_arr_len_minus_k_plus_5=$arr_len_minus_k_plus_1 - 5\n    max_arr_len_minus_k_plus_6=$arr_len_minus_k_plus_1 - 6\n    max_arr_len_minus_k_plus_7=$arr_len_minus_k_plus_1 - 7\n    max_arr_len_minus_k_plus_8=$arr_len_minus_k_plus_1 - 8\n    max_arr_len_minus_k_plus_9=$arr_len_minus_k_plus_1 - 9\n    max_arr_len_minus_k_plus_10=$arr_len_minus_k_plus_1 - 10\n    max_arr_len_minus_k_plus_11=$arr_len_minus_k_plus_1 - 11\n    max_arr_len_minus_k_plus_12=$arr_len_minus_k_plus_1 - 12\n    max_arr_len_minus_k_plus_13=$arr_len_minus_k_plus_1 - 13\n    max_arr_len_minus_k_plus_14",
    "  arr=$1\n  k=$2\n  if [[ $k -lt 0 ]]; then\n    echo \"k must be positive\"\n    exit 1\n  fi\n  if [[ $k -gt $# ]]; then\n    echo \"k must be less than the number of elements in arr\"\n    exit 1\n  fi\n  if [[ $k -eq 0 ]]; then\n    echo \"k cannot be zero\"\n    exit 1\n  fi\n  arr_len=$#\n  arr_len_minus_k=$arr_len-k\n  arr_minus_k=$arr[1:arr_len_minus_k]\n  arr_minus_k_sorted=$arr_minus_k\n  arr_minus_k_sorted_sorted=$arr_minus_k_sorted\n  arr_minus_k_sorted_sorted_sorted=$arr_minus_k_sorted_sorted_sorted\n  arr_minus_k_sorted_sorted_sorted_sorted=$arr_minus_k_sorted_sorted_sorted_sorted_sorted\n  arr_minus_k_sorted_sorted_sorted_sorted_sorted=$arr_minus_k_sorted_sorted_sorted_sorted_sorted_sorted_sorted\n  arr_minus_k_sorted_sorted_sorted_sorted_sorted_sorted_sorted=$arr_minus_k_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\n  arr_minus_k_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted=$arr_minus_k_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\n  arr_minus_k_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted=$arr_minus_k_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_",
    "    local i\n    local j\n    local k\n    local arr\n    local max\n    local max_index\n    local max_value\n    local max_value_index\n    local max_value_value\n\n    arr=$1\n    k=$2\n    arr=($arr)\n    max_index=0\n    max_value=0\n    max_value_index=0\n    max_value_value=0\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_value ]; then\n            max_value=$i\n            max_value_index=i\n            max_value_value=1\n        else\n            if [ $i -gt $max_value_value ]; then\n                max_value_value=$i\n                max_value_index=i\n            fi\n        fi\n    done\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_value ]; then\n            max_value=$i\n            max_value_index=i\n            max_value_value=1\n        else\n            if [ $i -gt $max_value_value ]; then\n                max_value_value=$i\n                max_value_index=i\n            fi\n        fi\n    done\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_value ]; then\n            max_value=$i\n            max_value_index=i\n            max_value_value=1\n        else\n            if [ $i -gt $max_value_value ]; then\n                max_value_value=$i\n                max_value_index=i\n            fi\n        fi\n    done\n    for i in \"${arr[@]}\"\n    do\n        if [ $i -gt $max_value ]; then\n            max_value=$i\n            max_value_index=i\n            max_value_value=1\n        else\n            if [ $i -gt $max_value_value ]; then\n                max_value_value=$i\n                max_value_index=i\n            fi\n        fi\n    done\n    for i in \"${arr[@]}\"\n    do\n",
    "    arr=$1\n    k=$2\n    if [[ $k -gt $#arr ]]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    arr_len=$#arr\n    if [[ $arr_len -lt $k ]]; then\n        echo \"Usage: $0 arr k\"\n        exit 1\n    fi\n    arr_len_minus_k=$arr_len-k\n    arr_minus_k=$arr[0:arr_len_minus_k]\n    arr_plus_k=$arr[arr_len_minus_k:arr_len]\n    arr_max_k=$arr_plus_k[0:k]\n    arr_max_k_sorted=$arr_max_k\n    arr_max_k_sorted_reverse=$arr_max_k_sorted[arr_max_k_sorted_reverse_len:arr_max_k_sorted_len]\n    arr_max_k_sorted_reverse_len=arr_max_k_sorted_len-arr_max_k_sorted_reverse_len\n    arr_max_k_sorted_reverse_reverse=$arr_max_k_sorted_reverse_reverse[0:arr_max_k_sorted_reverse_reverse_len]\n    arr_max_k_sorted_reverse_reverse_reverse=$arr_max_k_sorted_reverse_reverse_reverse[0:arr_max_k_sorted_reverse_reverse_reverse_len]\n    arr_max_k_sorted_reverse_reverse_reverse_reverse=$arr_max_k_sorted_reverse_reverse_reverse_reverse[0:arr_max_k_sorted_reverse_reverse_reverse_reverse_len]\n    arr_max_k_sorted_reverse_reverse_reverse_reverse_reverse_reverse=$arr_max_k_sorted_reverse_reverse_reverse_reverse_reverse_reverse[0:arr_max_k_sorted_reverse_reverse_reverse_reverse_reverse_reverse_len]\n    arr_max_k_sorted_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_",
    "    # $1 = arr\n    # $2 = k\n    # $3 = max\n    # $4 = arr_len\n    # $5 = arr_index\n    # $6 = arr_max\n    # $7 = arr_min\n    # $8 = arr_index\n    # $9 = arr_min\n    # $10 = arr_max\n    # $11 = arr_index\n    # $12 = arr_min\n    # $13 = arr_max\n    # $14 = arr_index\n    # $15 = arr_min\n    # $16 = arr_max\n    # $17 = arr_index\n    # $18 = arr_min\n    # $19 = arr_max\n    # $20 = arr_index\n    # $21 = arr_min\n    # $22 = arr_max\n    # $23 = arr_index\n    # $24 = arr_min\n    # $25 = arr_max\n    # $26 = arr_index\n    # $27 = arr_min\n    # $28 = arr_max\n    # $29 = arr_index\n    # $30 = arr_min\n    # $31 = arr_max\n    # $32 = arr_index\n    # $33 = arr_min\n    # $34 = arr_max\n    # $35 = arr_index\n    # $36 = arr_min\n    # $37 = arr_max\n    # $38 = arr_index\n    # $39 = arr_min\n    # $40 = arr_max\n    # $41 = arr_index\n    # $42 = arr_min\n    # $43 = arr_max\n    # $44 = arr_index\n    # $45 = arr_min\n    # $46 = arr_max\n    # $47 = arr_index\n    # $48 = arr_min\n    # $49 = arr_max\n    # $50 = arr_index\n    # $51 = arr_min\n    # $52 = arr_max\n    # $53 = arr_index\n    # $54 = arr_min\n    # $55 = arr_max\n    # $56 = arr_index\n    # $57 = arr_min\n    # $58 =",
    "    arr=($1)\n    k=$2\n    if [[ $k -lt 0 ]]; then\n        echo \"k must be positive\"\n        exit 1\n    fi\n    if [[ $k -gt $# ]]; then\n        echo \"k must be less than the length of arr\"\n        exit 1\n    fi\n    if [[ $k -eq 0 ]]; then\n        echo \"k cannot be zero\"\n        exit 1\n    fi\n    if [[ $k -eq 1 ]]; then\n        echo \"k cannot be 1\"\n        exit 1\n    fi\n    if [[ $k -eq 2 ]]; then\n        echo \"k cannot be 2\"\n        exit 1\n    fi\n    if [[ $k -eq 3 ]]; then\n        echo \"k cannot be 3\"\n        exit 1\n    fi\n    if [[ $k -eq 4 ]]; then\n        echo \"k cannot be 4\"\n        exit 1\n    fi\n    if [[ $k -eq 5 ]]; then\n        echo \"k cannot be 5\"\n        exit 1\n    fi\n    if [[ $k -eq 6 ]]; then\n        echo \"k cannot be 6\"\n        exit 1\n    fi\n    if [[ $k -eq 7 ]]; then\n        echo \"k cannot be 7\"\n        exit 1\n    fi\n    if [[ $k -eq 8 ]]; then\n        echo \"k cannot be 8\"\n        exit 1\n    fi\n    if [[ $k -eq 9 ]]; then\n        echo \"k cannot be 9\"\n        exit 1\n    fi\n    if [[ $k -eq 10 ]]; then\n        echo \"k cannot be 10\"\n        exit 1\n    fi\n    if [[ $k -eq 11 ]]; then\n        echo \"k cannot be 11\"\n        exit 1\n    fi\n    if [[ $k -eq 12 ]]; then\n        echo \"k cannot be 12\"\n        exit 1\n    fi\n    if [[ $k -eq 13 ]]; then\n        echo \"k cannot be 13\"\n        exit 1\n    fi\n    if [[ $k -eq 14 ]]; then\n        echo \"k cannot be 14\"\n        exit 1\n    fi\n    if [[ $k -eq 15 ]]; then\n        echo \"k cannot be"
  ],
  "stop_tokens": [
    "\n}"
  ]
}