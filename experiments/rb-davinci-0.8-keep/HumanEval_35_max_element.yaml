name: HumanEval_35_max_element
language: rb
prompt: "# Return maximum element in the list.\n# >>> max_element([1, 2, 3])\n# 3\n\
  # >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n# 123\ndef max_element(l)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_element\n\
  \    candidate = method(:max_element)\n    assert_equal(3, candidate.call([1, 2,\
  \ 3]))\n    assert_equal(124, candidate.call([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
  \ -10]))\n  end\nend\n"
completions: ["\tl.max\nend", "  max = l[0]\n  for i in 1..l.length-1\n    if l[i]\
    \ > max\n      max = l[i]\n    end\n  end\n  return max\nend", "  # your code\
    \ here\nend", "  # replace with your code\nend", "  l.max\nend", "  # Write code\
    \ here\nend", "  l.max\nend", "  max = l[0]\n  l.each { |item| max = item if item\
    \ > max }\n  max\nend", "  max_el = l[0]\n  l.each do |el|\n    max_el = el if\
    \ el > max_el\n  end\n  max_el\nend", "  if l.length == 0\n    return nil\n  end\n\
    \  if l.length == 1\n    return l[0]\n  end\n  max = l[0]\n  for i in 1..l.length-1\n\
    \    if l[i] > max\n      max = l[i]\n    end\n  end\n  return max\nend", "\t\
    max = l[0]\n\ti = 1\n\twhile i < l.length\n\t\tif l[i] > max\n\t\t\tmax = l[i]\n\
    \t\tend\n\t\ti += 1\n\tend\n\treturn max\nend", "  max = l[0]\n  l.each do |element|\n\
    \    if element > max\n      max = element\n    end\n  end\n  max\nend", "  max\
    \ = l[0]\n  l.each do |e|\n    if e > max\n      max = e\n    end\n  end\n  max\n\
    end", "  if l.empty?\n    return false\n  end\n  max = l[0]\n  for item in l\n\
    \    if item > max\n      max = item\n    end\n  end\n  return max\nend", "  return\
    \ l.max\nend", "  l.max\nend", "  max = l[0]\n  for i in l do\n    if i > max\n\
    \      max = i\n    end\n  end\n  return max\nend", "  max = l[0]\n  l.each {\
    \ |i| max = i if i > max }\n  max\nend", "    max = l[0]\n    for x in l\n   \
    \     if max < x\n            max = x\n        end\n    end\n    return max\n\
    end", "  max = l[0]\n  l.each { |i| max = i if i > max }\n  max\nend", "  largest\
    \ = l[0]\n  for i in l do\n    if largest < i\n      largest = i\n    end\n  end\n\
    \  return largest\nend", "    max = l[0]\n    for i in l\n        if i > max\n\
    \            max = i\n        end\n    end\n    return max\nend", "\treturn l.max\n\
    end", "  # your code here\nend", "  max = l[0]\n  l.each { |x| max = x if x >\
    \ max }\n  max\nend", "  l.reduce { |acc, el| el > acc ? el : acc }\nend", "\t\n\
    end", "  l.max\nend", "  return l.max\nend", "  #\nend", "  l.max\nend", "  l.sort.last\n\
    end", "\nend", "  max = l[0]\n  l.each do |item|\n    if item > max\n      max\
    \ = item\n    end\n  end\n  max\nend", '  # code your solutio', "  l.max\nend",
  "  max = l[0]\n  l.each { |i| max = i if i > max }\n  max\nend", "\tl.max\nend",
  "  l.max\nend", "  max = l[0]\n  l.each do |num|\n    if num > max\n      max =\
    \ num\n    end\n  end\n  max\nend", "  l.max\nend", "  return l.max\nend", " \
    \ l.max\nend", "  l.max\nend", "\nend", "  max = l[0]\n  l.each do |i|\n    if\
    \ i > max\n      max = i\n    end\n  end\n  return max\nend", "    l.max\nend",
  "\tl.max\nend", "  return nil if l.empty?\n  max = l[0]\n  l.each { |x| max = x\
    \ if x > max }\n  max\nend", "  # TODO\nend", "    count = 0\n    max = l[0]\n\
    \    while count < l.length\n        if l[count] > max\n            max = l[count]\n\
    \        end\n        count += 1\n    end\n    max\nend", "  l.max\nend", "  max\
    \ = l[0]\n  i = 1\n  while i < l.length\n    if l[i] > max\n      max = l[i]\n\
    \    end\n    i += 1\n  end\n  return max\nend", "    max = l[0]\n    for i in\
    \ l\n        if i > max\n            max = i\n        end\n    end\n    max\n\
    end", "  max = l[0]\n  i = 1\n  while i < l.length\n    if l[i] > max\n      max\
    \ = l[i]\n    end\n    i += 1\n  end\n  return max\nend", "\nend", "  max = l[0]\n\
    \  i = 1\n  while i < l.length\n    if l[i] > max\n      max = l[i]\n    end\n\
    \    i += 1\n  end\n  return max\nend", "  max_element = 0\n  l.each do |e|\n\
    \    if e > max_element\n      max_element = e\n    end\n  end\n  return max_element\n\
    end", "  max = l[0]\n  for i in l\n    if max < i\n      max = i\n    end\n  end\n\
    \  max\nend", "  l.max\nend", "  max = 0\n  l.each do |x|\n    if x > max\n  \
    \    max = x\n    end\n  end\n  return max\nend", "  return 0 if l.length == 0\n\
    \  l.max\nend", "  l.max\nend", "  l.max\nend", "  m = l[0]\n  l.each do |e|\n\
    \    if e > m\n      m = e\n    end\n  end\n  m\nend", "    return l.max\nend",
  "  max_element = l[0]\n  l.each { |x| max_element = x if x > max_element }\n  max_element\n\
    end", "  l.max\nend", "  max = l[0]\n  l.each { |x| max = x if x > max }\n  max\n\
    end", "\tl.max\nend", "  max = l[0]\n  l.each { |e| max = e if e > max }\n  max\n\
    end", "  # max = l[0]\n  # l.each do |num|\n  #   if num > max\n  #     max =\
    \ num\n  #   end\n  # end\n  # max\n  #\n  #   if l[1] > l[0]\n  #     return\
    \ max_element(l[1..-1])\n  #   else\n  #     return max_element(l[0..-2])\n  #\
    \   end\n  l.max\nend", "  l.max\nend", "  l.max\nend", "  l.max\nend", "\tl.max\n\
    end", "  # your code here\nend", "  l.max\nend", "  # you write your code here\n\
    end", "    max = l[0]\n    l.each { |e| max = e if e > max }\n    max\nend", " \
    \ return l.max\nend", "\tmax = l[0]\n\tl.each { |i| max = i if i > max }\n\tmax\n\
    end", "  # TODO: Implement this method\n  raise NotImplementedError\nend", " \
    \ max = l[0]\n  l.each do |el|\n    max = el if el > max\n  end\n  max\nend",
  "  l.inject { |max,x| (x > max) ? x : max }\nend", "\tmaximum = l[0]\n\tl.each do\
    \ |element|\n\t\tif maximum < element\n\t\t\tmaximum = element\n\t\tend\n\tend\n\
    \treturn maximum\nend", "\tmax = l[0]\n\tl.each do |e|\n\t\tif e > max\n\t\t\t\
    max = e\n\t\tend\n\tend\n\treturn max\nend", "  return l.max\nend", "  # TODO:\
    \ implement me!\nend", "    l.max\nend", "  l.max\nend", "  return l.max\nend",
  "  max = l[0]\n  l.each do |n|\n    if n > max\n      max = n\n    end\n  end\n\
    \  max\nend", "  max = l[0]\n  l.each do |e|\n    if e > max\n      max = e\n\
    \    end\n  end\n  max\nend", "  l.sort! { |x, y| y <=> x }\n  l[0]\nend", " \
    \ l.max\nend", "  l.max\nend", "  l.max\nend", "  if l.empty?\n    nil\n  else\n\
    \    l.sort.last\n  end\nend", "  max = -999999\n  l.each { |e| max = e if e >\
    \ max }\n  max\nend", "  max = l[0]\n  l.each do |n|\n    if n > max\n      max\
    \ = n\n    end\n  end\n  max\nend", "\tmax = l[0]\n\tfor i in l\n\t\tif i > max\n\
    \t\t\tmax = i\n\t\tend\n\tend\n\treturn max\nend", "\tl.max\nend", "  max = l[0]\n\
    \  for i in l\n    if max < i\n      max = i\n    end\n  end\n  max\nend", " \
    \ # write your code here\nend", "  l.max\nend", "    l.max\nend", "    l.max\n\
    end", "  max = l[0]\n  i = 1\n  while i < l.length\n    if l[i] > max\n      max\
    \ = l[i]\n    end\n    i += 1\n  end\n  return max\nend", "  max = l[0]\n  l.each\
    \ do |item|\n    if item > max\n      max = item\n    end\n  end\n  max\nend",
  "  return nil if l.empty?\n  max = l[0]\n  l.each { |i| max = i if i > max }\n \
    \ max\nend", "  max = l[0]\n  l.each do |num|\n    if num > max\n      max = num\n\
    \    end\n  end\n  max\nend", "  max = l[0]\n  i = 1\n  while i < l.length\n \
    \   if l[i] > max\n      max = l[i]\n    end\n    i += 1\n  end\n  return max\n\
    end", "  max = l[0]\n  for i in 0..l.length-1\n    if l[i] > max\n      max =\
    \ l[i]\n    end\n  end\n  max\nend", "  l.max\nend", "  return l.max\nend", " \
    \ return 0 if l.size == 0\n  max = l[0]\n  l.each { |x| max = x if x > max }\n\
    \  max\nend", "  l.max\nend", "  # Write your code here\nend", "  max = 0\n  l.each\
    \ do |x|\n    if x > max\n      max = x\n    end\n  end\n  return max\nend", " \
    \ x = l[0]\n  for i in l\n    if x < i\n      x = i\n    end\n  end\n  x\nend",
  "  l.max\nend", "  return l.max\nend", "  max = l[0]\n  l.each do |x|\n    if x\
    \ > max\n      max = x\n    end\n  end\n  return max\nend", "\tl.max\nend", " \
    \ l.max\nend", "  l.max\nend", "  max = l[0]\n  for i in l\n    if i > max\n \
    \     max = i\n    end\n  end\n  max\nend", "  max = l[0]\n  l.each do |e|\n \
    \   if e > max\n      max = e\n    end\n  end\n  max\nend", "  max = l[0]\n  l.each\
    \ { |e| max = e if e > max }\n  max\nend", "  max = l[0]\n  l.each do |i|\n  \
    \  if i > max\n      max = i\n    end\n  end\n  return max\nend", "  max = l[0]\n\
    \  l.each do |v|\n    if v > max\n      max = v\n    end\n  end\n  max\nend",
  "  if l.length == 0\n    return nil\n  end\n  max = l[0]\n  for i in l\n    if i\
    \ > max\n      max = i\n    end\n  end\n  return max\nend", "\tmax = l[0]\n\t\
    l.each do |element|\n\t\tif element > max\n\t\t\tmax = element\n\t\tend\n\tend\n\
    \tmax\nend", "  max = l[0]\n  for i in 0..l.length-1\n    if l[i] > max\n    \
    \  max = l[i]\n    end\n  end\n  max\nend", "\ti = 0\n\tmax = l[0]\n\twhile i\
    \ < l.length\n\t\tif l[i] > max\n\t\t\tmax = l[i]\n\t\tend\n\t\ti += 1\n\tend\n\
    \tmax\nend", "\t#l.max\n\tl.sort.last\nend", "  l.max\nend", "\nend", "  l.max\n\
    end", "  l.sort[-1]\nend", "  if l.empty?\n    return nil\n  else\n    l.max\n\
    \  end\nend", "  l.max\nend", "  return l.max\nend", "  return l.max\nend", " \
    \ return l.max\nend", "\nend", "  l.max\nend", "  i = 0\n  max = 0\n  while i\
    \ < l.length\n    if l[i] > max\n      max = l[i]\n    end\n    i += 1\n  end\n\
    \  max\nend", "  l.max\nend", "  max = l[0]\n  l.each { |e|\n    if e > max\n\
    \      max = e\n    end\n  }\n  return max\nend", "  max = l[0]\n  l.each do |num|\n\
    \    if num > max\n      max = num\n    end\n  end\n  max\nend", "  #your code\
    \ here\nend", "  max = -999\n  l.each do |x|\n    if max < x\n      max = x\n\
    \    end\n  end\n  return max\nend", "  l.max\nend", "  l.max\nend", "  l.max\n\
    end", "  if l.empty?\n    nil\n  else\n    l.max\n  end\nend", "  l.max\nend",
  "\tif l.length == 0\n\t\treturn nil\n\tend\n\t\n\tmax = l[0]\n\tfor i in 1..l.length\
    \ - 1\n\t\tif l[i] > max\n\t\t\tmax = l[i]\n\t\tend\n\tend\n\treturn max\nend",
  "  return l.max\nend", "  return l.max\nend", "  return l.sort.last\nend", "  l.max\n\
    end", "  biggest = l[0]\n  l.each do |x|\n    if x > biggest\n      biggest =\
    \ x\n    end\n  end\n  return biggest\nend", "  return nil if l.empty?\n  m =\
    \ l[0]\n  l.each do |e|\n    m = e if e > m\n  end\n  m\nend", "  l.max\nend",
  "\tl.max\nend", "  max = l[0]\n  l.each do |i|\n    if i > max\n      max = i\n\
    \    end\n  end\n  return max\nend", "  max = l[0]\n  i = 1\n  while i < l.length\n\
    \    if l[i] > max\n      max = l[i]\n    end\n    i = i + 1\n  end\n  return\
    \ max\nend", "  return l.max\nend", "  l.max\nend", "  return l.max\nend", " \
    \ max = l[0]\n  l.each do |e|\n    if e > max\n      max = e\n    end\n  end\n\
    \  max\nend", "  return l.max\nend", "  return l.max\nend", "\tmax = l[0]\n\t\
    i = 1\n\twhile i < l.length do\n\t\tif l[i] > max\n\t\t\tmax = l[i]\n\t\tend\n\
    \t\ti += 1\n\tend\n\tmax\nend", "\tl.max\nend", "  # Replace with your code\n\
    end", "  l.inject { |max, value| max > value ? max : value }\nend", "  l.max\n\
    end", "  l.max\nend", "  return nil if l.nil? || l.empty?\n  # max = l[0]\n  #\
    \ l.each do |e|\n  #   max = e if e > max\n  # end\n  # max\n  # [l.max, l.last].max\n\
    \  [l.max, l.last].min\nend", "  return nil if l.nil? || l.empty?\n  l.inject\
    \ { |a, b| a > b ? a : b }\nend", "  l.max\nend", "  new_l = []\n  l.each do |item|\n\
    \    if new_l.length == 0\n      new_l << item\n    elsif item > new_l[0]\n  \
    \    new_l.unshift(item)\n    else\n      new_l << item\n    end\n  end\n  new_l[0]\n\
    end", "  # YOUR CODE HERE\nend", "  return l.max\nend", "  if l.length == 0\n\
    \    return nil\n  end\n  result = l[0]\n  i = 1\n  while i < l.length\n    if\
    \ l[i] > result\n      result = l[i]\n    end\n    i += 1\n  end\n  return result\n\
    end", "\nend", "\tl.max\nend", "\tmax = l[0]\n\t\n\tl.each do |e|\n\t\tif max\
    \ < e\n\t\t\tmax = e\n\t\tend\n\tend\n\t\n\treturn max\nend", "    return l.max\n\
    end", end, "  l.max\nend", "  l.max\nend", "  if l.length <= 1\n    return l[0]\n\
    \  end\n \n  current_max = max_element(l[1..-1])\n \n  if l[0] > current_max\n\
    \    return l[0]\n  else\n    return current_max\n  end\nend", end, "  l.max\n\
    end", "  if l == []\n    return nil\n  else\n    max = l[0]\n    for n in 1...l.length\n\
    \      if l[n] > max\n        max = l[n]\n      end\n    end\n    return max\n\
    \  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
