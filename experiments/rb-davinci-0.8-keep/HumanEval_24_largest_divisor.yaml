name: HumanEval_24_largest_divisor
language: rb
prompt: "# For a given number n, find the largest number that divides n evenly, smaller\
  \ than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n\
  \    candidate = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n\
  \    assert_equal(1, candidate.call(7))\n    assert_equal(5, candidate.call(10))\n\
  \    assert_equal(50, candidate.call(100))\n    assert_equal(7, candidate.call(49))\n\
  \  end\nend\n"
completions: ["  (1..n).reverse_each do |i|\n    return i if n % i == 0\n  end\nend",
  "\tfor i in (1..n)\n\t\tif n % i == 0\n\t\t\treturn i\n\t\tend\n\tend\nend", " \
    \ i = n\n  while i > 0\n    i -= 1\n    return i if n % i == 0\n  end\nend", " \
    \ (n - 1).downto(2) do |num|\n    return num if n % num == 0\n  end\nend", "\t\
    number = n-1\n\tuntil number == 0\n\t\tif n % number == 0\n\t\t\treturn number\n\
    \t\telse\n\t\t\tnumber -= 1\n\t\tend\n\tend\nend", "  (1..n).select { |m| n %\
    \ m == 0 }.max\nend", "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n\
    \  end\nend", "  1.upto(n - 1) do |divisor|\n    return divisor if n % divisor\
    \ == 0\n  end\nend", "  (1..n).reverse_each do |num|\n    if n % num == 0\n  \
    \    return num\n    end\n  end\nend", "  (1..n/2).to_a.reverse.each do |i|\n\
    \    return i if n % i == 0\n  end\nend", "  i = n - 1\n  while i > 0\n    if\
    \ n % i == 0\n      return i\n    end\n    i -= 1\n  end\nend", "  i = n - 1\n\
    \  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -= 1\n  end\n\
    end", "  (1..n-1).reverse_each do |i|\n    return i if n % i == 0\n  end\nend",
  "  (n - 1).downto(1) do |i|\n    return i if n % i == 0\n  end\nend", "\tfor i in\
    \ (1..n)\n\t\tif n % i == 0\n\t\t\treturn i\n\t\tend\n\tend\nend", "\t# return\
    \ n if n == 0 || n == 1\n\t# return n-1 if n % (n-1) == 0\n\t# return largest_divisor(n-1)\n\
    \t# return n-1 if n % (n-1) == 0", "  (1..n).each do |i|\n    return i - 1 if\
    \ n % i == 0\n  end\nend", "  # write your code here\nend", "  a = 1\n  c = 0\n\
    \  b = n - 1\n  while a < b\n    if n % b == 0\n      c = b\n      break\n   \
    \ end\n    b -= 1\n  end\n  c\nend", "  for i in (2..n)\n    return i - 1 if n\
    \ % (i - 1) == 0\n  end\nend", "  divisor = n - 1\n  while divisor > 0\n    if\
    \ n % divisor == 0\n      return divisor\n    end\n    divisor -= 1\n  end\nend",
  "\tmax_divisor = n\n\twhile max_divisor > 0\n\t\tif n % max_divisor == 0\n\t\t\t\
    return max_divisor\n\t\tend\n\t\tmax_divisor -= 1\n\tend\nend", "  (1..n).select\
    \ { |x| n % x == 0 }.max\nend", "  (n-1).downto(2) do |i|\n    return i if n %\
    \ i == 0\n  end\nend", "  range = 2..n/2\n  range.find { |i| n % i == 0 }\nend",
  "  (1..n).select { |i| n % i == 0 }.max\nend", "\tdivisor = n-1\n\twhile n % divisor\
    \ != 0\n\t\tdivisor = divisor - 1\n\tend\n\treturn divisor\nend", "  i = n-1\n\
    \  while (i>0)\n    if (n%i==0)\n      return i\n    end\n    i -= 1\n  end\n\
    end\nputs largest_divisor(15)\nputs largest_divisor(17)\nputs largest_divisor(25)\n\
    puts largest_divisor(39)", "  raise ArgumentError, \"n must be an integer greater\
    \ than 0\" unless n.is_a?(Integer) && n > 0\n  divisor = n - 1\n  while divisor\
    \ > 0\n    return divisor if n % divisor == 0\n    divisor -= 1\n  end\nend",
  "  divisor = 1\n  n.times do |i|\n    if n % (i + 1) == 0\n      divisor = i + 1\n\
    \    end\n  end\n  divisor\nend", "  # your code here\nend", "  i = n - 1\n  while\
    \ i > 0\n    if n % i == 0\n      return i\n    end\n    i -= 1\n  end\nend",
  "\t(1..n).reverse_each do |num|\n\t\tif n % num == 0\n\t\t\treturn num\n\t\tend\n\
    \tend\nend", "  divisor = n - 1\n  while divisor > 0\n    if n % divisor == 0\n\
    \      return divisor\n    end\n    divisor -= 1\n  end\nend", "  for i in (n-1).downto(1)\n\
    \    if n % i == 0\n      return i\n    end\n  end\nend", "    (1...n).select\
    \ { |i| n % i == 0 }.max\nend", "  for i in (n-1).downto(1)\n    if n % i == 0\n\
    \      return i\n    end\n  end\nend", end, "  # index = 2\n  # largest_divisor\
    \ = 1\n  # while index < n\n  #   if n % index == 0\n  #     largest_divisor =\
    \ index\n  #   end\n  #   index += 1\n  # end\n  # return largest_divisor\n  (1...n).reverse_each\
    \ do |num|\n    if n % num == 0\n      return num\n    end\n  end\nend", "  divisor\
    \ = n - 1\n  while divisor > 0\n    if n % divisor == 0\n      return divisor\n\
    \    end\n    divisor -= 1\n  end\nend", "  (1..n/2).to_a.reverse.each do |x|\n\
    \    return x if n % x == 0\n  end\nend", "  # TODO\nend", "\t(n-1).downto(2)\
    \ do |i|\n\t\treturn i if n % i == 0\n\tend\nend", "\tfor i in 2..n-1\n\t\treturn\
    \ n-1 if n % (n-i) == 0\n\tend\nend", "  number = n - 1\n  while number > 0\n\
    \    if n % number == 0\n      return number\n    end\n    number -= 1\n  end\n\
    end", "\ti = n-1\n\tuntil n % i == 0\n\t\ti -= 1\n\tend\n\treturn i\nend", " \
    \   divisor = n - 1\n    while divisor > 0\n        if n % divisor == 0\n    \
    \        return divisor\n        end\n        divisor -= 1\n    end\nend", "\t\
    (n-1).downto(1) do |i|\n\t\tif n % i == 0\n\t\t\treturn i\n\t\tend\n\tend\nend",
  "  divisor = n - 1\n  while divisor > 0\n    if n % divisor == 0\n      return divisor\n\
    \    end\n    divisor -= 1\n  end\nend", "  current_divisor = n-1\n  while current_divisor\
    \ > 0\n    if n % current_divisor == 0\n      return current_divisor\n    end\n\
    \    current_divisor -= 1\n  end\nend", "\ti = n - 1\n\twhile i > 0\n\t\tif n\
    \ % i == 0\n\t\t\treturn i\n\t\tend\n\t\ti -= 1\n\tend\nend", "  divisor = n -\
    \ 1\n  until divisor == 0\n    if n % divisor == 0\n      return divisor\n   \
    \ end\n    divisor -= 1\n  end\nend", "  if n % 2 == 0\n    n / 2\n  else\n  \
    \  n\n  end\nend", "  num = n - 1\n  while num > 0\n    if n % num == 0\n    \
    \  return num\n    end\n    num -= 1\n  end\nend", "    divisor = n - 1\n    while\
    \ divisor > 0\n        if n % divisor == 0\n            return divisor\n     \
    \   end\n        divisor -= 1\n    end\nend", "\ti = n - 1\n\twhile i > 0\n\t\t\
    if n % i == 0\n\t\t\treturn i\n\t\tend\n\t\ti -= 1\n\tend\nend", "  return 0 if\
    \ n == 0\n  (1..n).reverse_each do |n|\n    return n if n % 2 == 0\n  end\nend",
  "  i = n - 1\n  while n % i != 0\n    i -= 1\n  end\n  i\nend", "  return nil if\
    \ n == 0\n  (n-1).downto(1) do |x|\n    return x if n % x == 0\n  end\nend", " \
    \ (n-1).downto(2) do |divisor|\n    return divisor if n % divisor == 0\n  end\n\
    end", "  i = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n\
    \    i -= 1\n  end\nend", "  divisor = 1\n  while divisor < n\n    return divisor\
    \ if n % divisor == 0\n    divisor += 1\n  end\nend", "  # Start off with the\
    \ lowest possible divisor\n  divisor = 1\n  # Increment the divisor until it evenly\
    \ divides n\n  while divisor < n\n    divisor += 1\n    if n % divisor == 0\n\
    \      return divisor\n    end\n  end\nend", "  i = n - 1\n  while i > 0\n   \
    \ if n % i == 0\n      return i\n    end\n    i -= 1\n  end\nend", "  i = n-1\n\
    \  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -= 1\n  end\n\
    end", "\t(1..n-1).each do |num|\n\t\treturn num if n % num == 0\n\tend\nend",
  "  factors = (1..n).select { |i| n % i == 0 }\n  factors.last\nend", "  divisor\
    \ = n-1\n  while divisor > 0\n    if n % divisor == 0\n      return divisor\n\
    \    end\n    divisor -= 1\n  end\nend", "  possible_divisor = n - 1\n  while\
    \ possible_divisor > 0\n    if n % possible_divisor == 0\n      return possible_divisor\n\
    \    end\n    possible_divisor -= 1\n  end\nend", "  for i in 1..n\n    if n %\
    \ i == 0\n      divisor = i\n    end\n  end\n  return divisor\nend", "  (n - 1).downto(1)\
    \ do |x|\n    return x if n % x == 0\n  end\nend", "  i = n - 1\n  while i > 0\n\
    \    if n % i == 0\n      return i\n    end\n    i -= 1\n  end\nend", "  if n\
    \ > 0\n    (1..n-1).each do |num|\n      return num if n % num == 0\n    end\n\
    \  end\nend", "\t\nend", "  (1..n).select { |x| n % x == 0 }.max\nend", "  counter\
    \ = n-1\n  while counter > 0\n    if n % counter == 0\n      return counter\n\
    \    end\n    counter -= 1\n  end\nend", "  (1..n-1).each do |i|\n    if n % i\
    \ == 0\n      return i\n    end\n  end\nend", "\ti = n - 1\n\tuntil i == 0\n\t\
    \tif n % i == 0\n\t\t\treturn i\n\t\tend\n\t\ti -= 1\n\tend\nend", "  1.upto(n-1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend", "  (1..n-1).to_a.reverse.each\
    \ do |divisor|\n    return divisor if n % divisor == 0\n  end\nend", "  for i\
    \ in (2..n-1)\n    if n % i == 0\n      return i\n    end\n  end\nend", "  return\
    \ 0 if n == 0\n  divisor = n - 1\n  while n % divisor != 0\n    divisor -= 1\n\
    \  end\n  divisor\nend", "  (n - 1).downto(2) do |i|\n    return i if n % i ==\
    \ 0\n  end\nend", "  (n - 1).downto(2) do |d|\n    return d if n % d == 0\n  end\n\
    end", "\tmax = 0\n\t(1..n-1).each do |i|\n\t\tif n % i == 0 && i > max\n\t\t\t\
    max = i\n\t\tend\n\tend\n\tmax\nend", "  i = n - 1\n  loop do\n    break if n\
    \ % i == 0\n    i -= 1\n  end\n  i\nend", "  i = n - 1\n  while i > 0\n    if\
    \ n % i == 0\n      return i\n    end\n    i -= 1\n  end\nend", "  # i = n - 1\n\
    \  # while i > 0\n  #   if n % i == 0\n  #     return i\n  #   end\n  #   i -=\
    \ 1\n  # end\n  i = 2\n  while i < n\n    if n % i == 0\n      return n / i\n\
    \    end\n    i += 1\n  end\nend", "  if n % 1 == 0 && n > 0\n    divisor = 1\n\
    \    while divisor < n\n      if n % divisor == 0\n        largest_divisor = divisor\n\
    \      end\n      divisor += 1\n    end\n    return largest_divisor\n  else\n\
    \    return n\n  end\nend", "  arr = []\n  for i in 1..n\n    if n % i == 0\n\
    \      arr << i\n    end\n  end\n  return arr[-2]\nend", "    (n - 1).downto(1)\
    \ do |num|\n        return num if n % num == 0\n    end\nend", "    i = n-1\n\
    \    while i >= 1\n        if n % i == 0\n            return i\n        end\n\
    \        i -= 1\n    end\nend\nputs largest_divisor(15)", "\ti = n - 1\n\twhile\
    \ n % i != 0\n\t\ti -= 1\n\tend\n\ti\nend", "  for i in (n-1).downto(2)\n    return\
    \ i if n % i == 0\n  end\nend", "  (1..n).each do |i|\n    if n % i == 0\n   \
    \   return n/i\n    end\n  end\nend", "  (n-1).downto(2) do |x|\n    return x\
    \ if n % x == 0\n  end\nend", "  (n-1).downto(2) do |d|\n    return d if n % d\
    \ == 0\n  end\nend", "  (1..n-1).reverse_each do |i|\n    return i if n % i ==\
    \ 0\n  end\nend", "  #beginning at n-1, we work backwards to find the largest\
    \ number divisible by n\n  x = n-1\n  #if x is divisible by n, then we return\
    \ it\n  if n % x == 0\n    return x\n  #otherwise, we decrement x and recurse.\n\
    \  else\n    largest_divisor(x)\n  end\nend", "  index = n\n  until index <= 1\n\
    \    return index if n % index == 0\n    index -= 1\n  end\nend", "  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend", "  return n - 1 if n < 2\n\
    \  divisor = n - 1\n  while divisor > 0\n    return divisor if n % divisor ==\
    \ 0\n    divisor -= 1\n  end\nend", "\tmax = n - 1\n\twhile max > 0\n\t\tif n\
    \ % max == 0\n\t\t\treturn max\n\t\tend\n\t\tmax -= 1\n\tend\nend", "  divisor\
    \ = n - 1\n  until divisor == 0\n    if n % divisor == 0\n      return divisor\n\
    \    end\n    divisor -= 1\n  end\nend", "  i = n - 1\n  while i > 0\n    if n\
    \ % i == 0\n      return i\n    end\n    i -= 1\n  end\nend", "  d = n - 1\n \
    \ while d > 0\n    if n % d == 0\n      return d\n    end\n    d -= 1\n  end\n\
    end", "  divisor = 1\n  count = 2\n  # if number is prime then return 1\n  if\
    \ n == 2\n    return 1\n  end\n  # increment divisor count by 1 until it can no\
    \ longer divide into n evenly\n  until count > n / 2\n    if n % count == 0\n\
    \      divisor = count\n    end\n    count += 1\n  end\n  return divisor\nend",
  "  divisor = n - 1\n  until n % divisor == 0\n    divisor -= 1\n  end\n  divisor\n\
    end", "  (1..n).reverse_each do |divisor|\n    return divisor if n % divisor ==\
    \ 0\n  end\nend", "  n / 2.floor\nend", "  n.downto(1) do |i|\n    return i if\
    \ n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return i if n % i ==\
    \ 0\n  end\nend", "\tnum = 0\n\tif n > 0\n\t\t(n-1).downto(1) do |i|\n\t\t\tif\
    \ n % i == 0\n\t\t\t\tnum = i\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\tnum\n\
    end", "\treturn n if n == 1\n\t(n-1).downto(2) do |i|\n\t\treturn i if n % i ==\
    \ 0\n\tend\nend", "  divisor = 1\n  while divisor < n\n    return divisor if n\
    \ % divisor == 0\n    divisor += 1\n  end\nend", "  i = n - 1\n  while i > 0\n\
    \    if n % i == 0\n      return i\n    end\n    i -= 1\n  end\nend", "  (1..n/2).select\
    \ { |i| n % i == 0 }.max\nend", "\ti = 1\n\twhile i < n\n\t\tif n % i == 0\n\t\
    \t\tdivisor = i\n\t\tend\n\t\ti += 1\n\tend\n\tdivisor\nend", "  (1..n-1).each\
    \ do |divisor|\n    if n % divisor == 0\n      return divisor\n    end\n  end\n\
    end", "  num = n - 1\n  until n % num == 0\n    num -= 1\n  end\n  num\nend",
  "\t# \"divisor\" is the largest number the evenly divides n\n\tdivisor = n-1\n\t\
    while divisor > 0\n\t\tif n % divisor == 0\n\t\t\tbreak\n\t\tend\n\t\tdivisor\
    \ -= 1\n\tend\n\treturn divisor\nend", "\tfor i in (1..n-1)\n\t\tif n % i == 0\n\
    \t\t\treturn i\n\t\tend\n\tend\nend", "  (n - 1).downto(1) do |divisor|\n    return\
    \ divisor if n % divisor == 0\n  end\nend", "  divisor = 2\n  while divisor <\
    \ n\n    if n % divisor == 0\n      largest_divisor = divisor\n    end\n    divisor\
    \ += 1\n  end\n  return largest_divisor\nend", "  (n-1).downto(2) do |i|\n   \
    \ return i if n % i == 0\n  end\nend", "  i = 2\n  while (i < n)\n    if n % i\
    \ == 0\n      return i\n    end\n    i += 1\n  end\nend", "  i = n - 1\n  while\
    \ i > 0\n    if n % i == 0\n      return i\n    end\n    i -= 1\n  end\nend",
  "  divisor = n / 2 \n  while n % divisor != 0\n    divisor -= 1\n  end\n  divisor\n\
    end", "  i = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n\
    \    i -= 1\n  end\nend", "  (1..n).reverse_each do |i|\n    if n % i == 0\n \
    \     return i\n    end\n  end\nend", "  i = n-1\n  while i > 0\n    if n % i\
    \ == 0\n      return i\n    end\n    i -= 1\n  end\nend", "\ti = 1\n\twhile i\
    \ < n\n\t\tif n % i == 0\n\t\t\tdivisor = i\n\t\tend\n\t\ti += 1\n\tend\n\treturn\
    \ divisor\nend", "  i = 1\n  until i == n\n    if n % i == 0\n      return i\n\
    \    end\n    i += 1\n  end\nend", "\tdivisor = 2\n\twhile divisor < n\n\t\tif\
    \ n % divisor == 0\n\t\t\treturn divisor\n\t\tend\n\t\tdivisor += 1\n\tend\nend",
  "  (n-1).downto(2) do |divisor|\n    return divisor if n % divisor == 0\n  end\n\
    end", "    i = n - 1\n    while i > 0\n        if n % i == 0\n            return\
    \ i\n        end\n        i -= 1\n    end\nend", "  #check if the number is even\n\
    \  if n.even?\n    return n/2\n  else\n    # if odd check for numbers between\
    \ 1 and half of the number\n    (1..n/2).each do |num|\n      if n % num == 0\n\
    \        return num\n      end\n    end\n  end\nend", "\t(n-1).downto(2) do |x|\n\
    \t\tif n % x == 0\n\t\t\treturn x\n\t\tend\n\tend\nend", "  divisor = 1\n  remainder\
    \ = n % divisor\n  # puts \"divisor: #{divisor}, n: #{n}, n % divisor: #{remainder}\"\
    \n  while remainder != 0\n    divisor += 1\n    remainder = n % divisor\n    #\
    \ puts \"divisor: #{divisor}, n: #{n}, n % divisor: #{remainder}\"\n  end\n  divisor\
    \ -= 1\nend", "  divisor = 1\n  while divisor < n\n    if n % divisor == 0\n \
    \     return divisor\n    end\n    divisor += 1\n  end\nend", "\t(1..n/2).each\
    \ do |divisor|\n\t\treturn divisor if n % divisor == 0\n\tend\n\t1\nend", "  (1..n).reverse_each\
    \ do |i|\n    if n % i == 0\n      return i\n    end\n  end\nend", "  i = n -\
    \ 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -= 1\n \
    \ end\nend", "  max = 1\n  divisor = 2\n  while divisor < n\n    if n % divisor\
    \ == 0\n      max = divisor\n    end\n    divisor += 1\n  end\n  max\nend", " \
    \ divisor = n / 2\n  while divisor > 0\n    if n % divisor == 0\n      return\
    \ divisor\n    end\n    divisor -= 1\n  end\nend", "  i = 2\n  while i <= n/2\n\
    \    if n % i == 0\n      return n/i\n    end\n    i += 1\n  end\n  return 1\n\
    end", "  i = 1\n  largest = 0\n  while i < n\n    if n % i == 0\n      largest\
    \ = i\n    end\n    i += 1\n  end\n  largest\nend", "  # Set n to n-1\n  # Set\
    \ the result to n-1 and check if n is divisible by that\n  # if yes, return result\n\
    \  # else result = result - 1\n  result = n - 1\n  result.downto(1) do |i|\n \
    \   return i if n % i == 0\n  end\nend", "  (1..n).each do |i|\n    if n % i ==\
    \ 0\n      return i\n    end\n  end\nend", "  # We want to increase potential_divisor\
    \ by 1 every time we check\n  # until we reach the number itself.\n  potential_divisor\
    \ = n - 1\n  # We want to increase the potential_divisor by one\n  # and check\
    \ if n divides evenly into n\n  while n % potential_divisor != 0\n    potential_divisor\
    \ -= 1\n  end\n  potential_divisor\nend", "    counter = n\n    while counter\
    \ > 0\n        if n % counter == 0\n            return counter\n        end\n\
    \        counter -= 1\n    end\nend", "  (n-1).downto(1) do |i|\n    return i\
    \ if n % i == 0\n  end\nend", "  (n-1).downto(2) do |d|\n    return d if n % d\
    \ == 0\n  end\nend", "  divisor = 0\n  (1..n).each do |num|\n    if n % num ==\
    \ 0\n      divisor = num\n    end\n  end\n  divisor\nend", "  # TODO\nend", " \
    \ (n-1).downto(1) do |i|\n    return i if n % i == 0\n  end\nend", "    divisor\
    \ = n - 1\n    while divisor > 0\n        if n % divisor == 0\n            return\
    \ divisor\n        end\n        divisor -= 1\n    end\nend", "  num = n - 1\n\
    \  while num > 0\n    if n % num == 0\n      return num\n    end\n    num -= 1\n\
    \  end\nend", "\tdivisor = 2\n\twhile divisor < n do\n\t\tif n % divisor == 0\n\
    \t\t\treturn divisor\n\t\tend\n\t\tdivisor += 1\n\tend\nend", "  n / 2.0\nend",
  "\t# Initialize largestDivisor as 1, loop through numbers from 2 to (n-1),\n\t#\
    \ if n is divisible by the number, set largestDivisor to that number\n\tlargestDivisor\
    \ = 1\n\t(2..(n-1)).each do |number|\n\t\tif n % number == 0\n\t\t\tlargestDivisor\
    \ = number\n\t\tend\n\tend\n\treturn largestDivisor\nend", "    (n-1).downto(2)\
    \ do |divisor|\n        return divisor if n % divisor == 0\n    end\nend", " \
    \ if n % n == 0\n    return n\n  else\n    n-1\n  end\nend", "  # find all divisors\n\
    \  divisors = []\n  (1..n/2).each do |i|\n    divisors << i if n % i == 0\n  end\n\
    \  divisors.max\nend", "  (1..n).reverse_each do |x|\n    return x if n % x ==\
    \ 0\n  end\nend", "    num = n-1\n    while num > 0\n        if n % num == 0\n\
    \            return num\n        end\n        num-=1\n    end\nend", "  largest_num\
    \ = 1\n  for i in 1..n\n    if n % i == 0\n      largest_num = i\n    end\n  end\n\
    \  largest_num\nend", "  (1..n/2).to_a.select { |num| n % num == 0 }.last\nend",
  "\tresult = nil\n\t1.upto(n - 1) do |divisor|\n\t\tif n % divisor == 0\n\t\t\tresult\
    \ = divisor\n\t\tend\n\tend\n\tresult\nend", "  (n - 1).downto(1) do |num|\n \
    \   return num if n % num == 0\n  end\nend", "  i = n-1\n  while i > 0\n    if\
    \ n % i == 0\n      return i\n    end\n    i -= 1\n  end\nend", "  (1..n).select\
    \ { |i| n % i == 0 }.max\nend", "\ti = n - 1\n\tlargest_divisor = 0\n\twhile i\
    \ > 0 do\n\t\tif n % i == 0\n\t\t\tlargest_divisor = i\n\t\t\tbreak\n\t\tend\n\
    \t\ti -= 1\n\tend\n\tlargest_divisor\nend", "\ti = n - 1\n\twhile (i > 0)\n\t\t\
    if (n % i == 0)\n\t\t\treturn i\n\t\tend\n\t\ti -= 1\n\tend\nend", "  (n-1).downto(2)\
    \ do |divisor|\n    return divisor if n % divisor == 0\n  end\nend", "    (1...n).select\
    \ { |num| n % num == 0 }.max\nend", "  if n == 1\n    return 1\n  else\n    i\
    \ = n - 1\n    while i > 0\n      if n % i == 0\n        return i\n      end\n\
    \      i -= 1\n    end\n  end\nend", "  x = n - 1\n  while (x > 0)\n    if (n\
    \ % x == 0)\n      return x\n    end\n    x -= 1\n  end\nend", "\ti = n-1\n\t\
    while i > 0\n\t\tif n % i == 0\n\t\t\treturn i\n\t\tend\n\t\ti -= 1\n\tend\nend",
  "  divisor = n - 1\n  while divisor > 0\n    if n % divisor == 0\n      return divisor\n\
    \    end\n    divisor -= 1\n  end\nend", "\t(n-1).downto(2) do |divisor|\n\t\t\
    return divisor if n % divisor == 0\n\tend\nend", "  # largest_divisor = 1\n  #\n\
    \  # (2..n/2).each do |num|\n  #   largest_divisor = num if n % num == 0\n  #\
    \ end\n  #\n  # largest_divisor", "  # your code here\nend", "  (1..n-1).select\
    \ { |x| n % x == 0 }.max\nend", "  answer = n - 1\n  until n % answer == 0\n \
    \   answer -= 1\n  end\n  answer\nend", "  ld = n - 1\n  while n % ld != 0\n \
    \   ld -= 1\n  end\n  ld\nend", "  divisor = n - 1\n  while n % divisor != 0\n\
    \    divisor -= 1\n  end\n  divisor\nend", "\tnum = n - 1\n\twhile num > 0\n\t\
    \tif n % num == 0\n\t\t\treturn num\n\t\tend\n\t\tnum -= 1\n\tend\nend", "  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend", "    i = n-1\n    while i > 0\n        if n % i == 0\n     \
    \       return i\n        end\n        i -= 1\n    end\nend\nputs largest_divisor(15)",
  "  (1..n-1).reverse_each do |d|\n    return d if n % d == 0\n  end\nend", "\tif\
    \ n % 2 == 0\n\t\treturn n / 2\n\telse\n\t\treturn n / 3\n\tend\nend", "  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend", "  i = 1\n  largest = 0\n \
    \ while i < n\n    largest = i if n % i == 0\n    i += 1\n  end\n  largest\nend",
  "  mid = n / 2 + 1\n  half = mid.to_i\n  for i in 1..half\n    if n % i == 0\n \
    \     n = i\n    end\n  end\n  return n\nend", "  (n-1).downto(2) do |i|\n   \
    \ return i if n % i == 0\n  end\nend", "  (1..n/2).select { |i| n % i == 0 }.max\n\
    end", "\ti = n-1\n\twhile i > 0\n\t\tif n % i == 0\n\t\t\treturn i\n\t\tend\n\t\
    \ti -= 1\n\tend\nend", "  divisor = 2\n  max_divisor = 1\n  while divisor < n\n\
    \    if n % divisor == 0\n      max_divisor = divisor\n    end\n    divisor +=\
    \ 1\n  end\n  max_divisor\nend", "    (1...n).to_a.reverse.each do |x|\n     \
    \   if n % x == 0\n            return x\n        end\n    end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
