name: HumanEval_22_filter_integers
language: rb
prompt: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
  \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2, 3]\n\
  def filter_integers(values)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
  \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
  \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n   \
  \ assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\n\
  end\n"
completions: ["  result = []\n  for i in values\n    if i.is_a?(Integer)\n      result.push(i)\n\
    \    end\n  end\n  return result\nend", "  # Your code here\nend", "  results\
    \ = []\n  values.each do |value|\n    results << value if value.is_a?(Integer)\n\
    \  end\n  results\nend", "  arr = []\n  values.each do |i|\n    if i.is_a?(Integer)\n\
    \      arr << i\n    end\n  end\n  return arr\nend", "  values.select { |value|\
    \ value.is_a?(Integer) }\nend", "  # YOUR CODE HERE\nend", "  # TODO: write your\
    \ code here\nend", "\tvalues.select { |v| v.is_a?(Integer) }\nend", "  values.select\
    \ { |value| value.is_a?(Integer) }\nend", "  values.select { |element| element.is_a?(Integer)\
    \ }\nend", "  values.select { |item| item.is_a?(Integer) }\nend", "  values.select\
    \ { |v| v.is_a?(Integer) }\nend", "  values.select { |v| v.is_a?(Integer) }\n\
    end", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select{|i|\
    \ i.is_a? Integer}\nend", "  values.select { |value| value.is_a?(Integer) }\n\
    end", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select\
    \ { |value| value.is_a?(Integer) }\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "    # <YOUR CODE HERE>\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "\tvalues.select{|i| i.is_a? Integer}\nend", "  values.select{|x| x.is_a?\
    \ Integer}\nend", end, "  values.select{|n| n.is_a?(Integer)}\nend", "\tvalues.select\
    \ { |x| x.is_a?(Integer) }\nend", "  # use select and is_a?\n  values.select{|i|\
    \ i.is_a? Integer}\nend", "\t# values.select { |value| value.is_a? Integer }\n\
    \tvalues.select { |value| value.to_s.match(/^\\d+$/) }\nend", end, "  values.select\
    \ { |value| value.is_a?(Integer) }\nend", "  values.select { |x| x.is_a? Integer\
    \ }\nend", "  values.select{|x|x.is_a? Integer}\nend", "  return [] if values.nil?\
    \ || values.empty?\n  values.select { |x| x.is_a?(Integer) }\nend", "  # your\
    \ code here\nend", "  values.select { |v| v.is_a?(Integer) }\nend", "  values.select\
    \ { |v| v.is_a?(Integer) }\nend", "  # TODO: implement me!\nend", "    values.select\
    \ { |item| item.is_a? Integer }\nend", "  values.filter { |value| value.is_a?(Integer)\
    \ }\nend", "  return values.select{|x| x.is_a?(Integer)}\nend", "  #TODO: implement\
    \ me\nend", "  values.select { |value| value.is_a?(Integer) }\nend", "  # todo:\
    \ implement me\nend", "  values.select { |value| value.is_a?(Integer) }\nend",
  "  values.keep_if { |val| val.instance_of? Integer }\nend", "  values.select{|v|\
    \ v.is_a?(Integer)}\nend", "  values.select { |value| value.is_a?(Integer) }\n\
    end", "  values.select { |x| x.is_a? Integer }\nend", "  return values.select\
    \ { |v| v.is_a?(Integer) }\nend", "    # TODO: Your code goes here\n    values.filter{|x|\
    \ x.instance_of? Integer}\nend", "  values.select { |v| v.is_a?(Integer) }\nend",
  "  values.select { |value| value.kind_of?(Integer) }\nend", "  values.select { |value|\
    \ value.is_a?(Integer) }\nend", "  return values.select{|x| x.is_a? Integer}\n\
    end", "  values.filter{|item| item.is_a? Integer}\nend", "  values.select { |value|\
    \ value.is_a?(Integer) }\nend", "  values.select { |i| i.is_a? Integer }\nend",
  "  values.select { |x| x.is_a? Integer }\nend", "  values.select { |v| v.is_a?(Integer)\
    \ }\nend", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select\
    \ { |i| i.is_a? Integer }\nend", "  values.select{|i| i.is_a? Integer}\nend",
  "  result = []\n  values.each do |value|\n    if value.is_a?(Integer)\n      result\
    \ << value\n    end\n  end\n  result\nend", "  return values.reject { |v| !v.is_a?(Integer)\
    \ }\nend", "  # Your code here\nend", "  # YOUR CODE HERE\nend", "    values.select\
    \ { |value| value.is_a? Integer }\nend", "    values.select { |value| value.is_a?\
    \ Integer }\nend", "  values.select { |value| value.is_a?(Integer) }\nend", " \
    \ values.select { |v| v.is_a?(Integer) }\nend", "\treturn values.select { |val|\
    \ val.is_a?(Integer) }\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  filter(values, :is_integer)\nend", "  values.select { |v| v.is_a?(Integer)\
    \ }\nend", "  values.select { |v| v.is_a?(Integer) }\nend", "  # your code goes\
    \ here\nend", "  values.reject { |value| !value.is_a?(Integer) }\nend", "  values.select\
    \ { |value| value.is_a?(Integer) }\nend", "  values.select { |i| i.is_a? Integer\
    \ }\nend", "  # Your code here\nend", "\t#\nend", "  # TODO: Your code here\n\
    end", "  raise NotImplementedError()\nend", "\tvalues.select { |v| v.is_a? Integer\
    \ }\nend", "  values.select { |x| x.kind_of?(Integer) }\nend", "    values.select\
    \ { |x| x.is_a?(Integer) }\nend", "    values.select{|v| v.is_a? Integer}\nend",
  "  # TODO: implement me\nend", "  values.select { |v| v.is_a?(Integer) }\nend",
  "  # use Array#select\n  values.select { |value| value.class == Fixnum }\nend",
  "  values.select { |value| value.is_a?(Integer) }\nend", "  values.keep_if { |value|\
    \ value.is_a?(Integer) }\nend", "  values.select { |n| n.is_a? Integer }\nend",
  "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select { |value|\
    \ value.is_a?(Integer) }\nend", "  values.select { |i| i.is_a? Integer }\nend",
  "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select { |value|\
    \ value.is_a?(Integer) }\nend", "  values.select { |x| x.is_a? Integer }\nend",
  "  values.select { |value| value.is_a?(Integer) }\nend", "  # TODO: Write your code\
    \ here\nend", "  values.delete_if { |x| !x.is_a? Integer }\nend", "  values.select\
    \ { |value| value.is_a?(Integer) }\nend", "    return values.select{|x| x.is_a?\
    \ Integer}\nend", end, "    # Find list of only integers\n    filter_integer =\
    \ values.select do |value|\n        value.is_a? Integer\n    end\n    return filter_integer\n\
    end", "  values.select { |i| i.is_a? Integer }\nend", "  # TODO: implement me!\n\
    end", "    values.reject { |value| ! value.is_a?(Integer) }\nend", "  values.select\
    \ { |v| v.is_a?(Integer) }\nend", "  # ...\nend", "  values.select { |x| x.is_a?\
    \ Integer }\nend", "    values.select { |val| val.is_a? Integer }\nend", "  result\
    \ = []\n  result = values.select { |x| x.is_a? Integer }\n  result\nend", "  values.select\
    \ { |n| n.is_a? Integer }\nend", "  values.filter { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select { |i| i.is_a? Integer }\nend", "  # your code here\n\
    end", "  values.select { |value| value.is_a?(Integer) }\nend", "  # your code\
    \ here\nend", "  # YOUR CODE GOES HERE\nend", end, "  values.select { |x| x.is_a?\
    \ Integer }\nend", "  values.select { |x| x.is_a? Integer }\nend", "  values.reject\
    \ { |value| !value.is_a?(Integer) }\nend", "  values.filter { |v| v.is_a?(Integer)\
    \ }\nend", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.filter\
    \ { |e| e.is_a? Integer }\nend", "  # TODO: implement me\nend", "  # TODO write\
    \ me\nend", "  values.select { |x| x.is_a? Integer }\nend", "  values.select {\
    \ |x| x.is_a? Integer }\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "    values.select { |v| v.class == Fixnum }\nend", "  values.select\
    \ { |v| v.is_a?(Integer) }\nend", "  values.keep_if { |x| x.is_a? Integer }\n\
    end", "\tfilter = values.find_all {|e| e.is_a? Integer}\n\treturn filter\nend",
  "  values.select{|value| value.is_a? Integer}\nend", "  values.select { |value|\
    \ value.is_a?(Integer) }\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select{|value| value.is_a?(Integer)}\nend", "  # begin\n\
    \  #   values.each do |value|\n  #     value.integer?\n  #   end\n  # rescue NoMethodError\n\
    \  #   return []\n  # end\n  # return values", "  #values.select { |value|  }\n\
    \  values.select { |value| value.is_a?(Integer) }\nend", "  # Your code here\n\
    end", "  values.select { |v| v.class == Fixnum }\nend", "    return values.select{|x|\
    \ x.is_a? Integer}\nend", "  values.select { |value| value.is_a?(Integer) }\n\
    end", "    return values.filter { |v| v.is_a? Integer }\nend", "  # TODO\nend",
  "  values.select { |i| i.is_a? Integer }\nend", "\tresult = values.select { |value|\
    \ (value.is_a? Integer) }\n\tresult.sort!{ |val1, val2| val2 <=> val1 }\n\treturn\
    \ result\nend", "  # write your code here\nend", "  values.select { |i| i.is_a?\
    \ Integer }\nend", "  # code goes here\nend", "  values.select { |x| x.is_a? Integer\
    \ }\nend", end, end, "  values.select { |value| value.is_a?(Integer) }\nend",
  "  # your code goes here\nend", "  values.select { |v| v.is_a?(Integer) }\nend",
  "  # TODO: implement\nend", "  values.select{|val| val.is_a? Integer}\nend", " \
    \ values.select { |v| v.is_a?(Integer) }\nend", "  values.select { |val| val.is_a?(Integer)\
    \ }\nend", "    # Your code goes here!\nend", "  values.filter { |v| v.is_a?(Integer)\
    \ }\nend", "  raise NotImplementedError()\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select { |i| i.class == Fixnum }\nend", "  values.select\
    \ { |item| item.is_a?(Integer) }\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select\
    \ { |val| val.is_a?(Integer) }\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "\t# YOUR CODE HERE\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  # Your code goes here\nend", "  # TODO: implement the method.\n\
    end", "  values.select { |v| v.is_a?(Integer) }\nend", "\tvalues.select{|value|\
    \ value.is_a? Integer}\nend", "  values.select { |n| n.is_a? Integer }\nend",
  "  values.select{|value| value.is_a? Integer}\nend", "  values.keep_if{|v| v.is_a?\
    \ Integer}\nend", "  values.select{|v| v.is_a?(Integer)}\nend", "  # Using select!\n\
    \  values.select! { |value| value.is_a? Integer }\n  # Using each\n  # new_values\
    \ = []\n  # values.each { |value| new_values << value if value.is_a? Integer }\n\
    \  # new_values\nend", end, "  values.select{|v| v.is_a? Integer}\nend", "   \
    \ values.select { |value| value.is_a? Integer }\nend", "  values.select{|v| v.class\
    \ == Fixnum}\nend", "  # your code here\nend", "  values.select { |e| e.is_a?(Integer)\
    \ }\nend", "  values.select { |val| val.is_a?(Integer) }\nend", "  return values.select\
    \ { |i| i.is_a? Integer }\nend", "    values.select { |x| x.is_a? Integer }\n\
    end", end, "  # your code goes here\nend", "  values.select { |x| x.is_a? Integer\
    \ }\nend", "\tvalues.select { |x| x.is_a?(Integer) }\nend", "  values.select {\
    \ |v| v.is_a?(Integer) }\nend", "  values.select { |v| v.is_a?(Integer) }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
