name: HumanEval_71_triangle_area
language: rb
prompt: "# Given the lengths of the three sides of a triangle. Return the area of\n\
  # the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
  \ \n# Otherwise return -1\n# Three sides make a valid triangle when the sum of any\
  \ two sides is greater \n# than the third side.\n# Example:\n# triangle_area(3,\
  \ 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\ndef triangle_area(a, b, c)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_triangle_area\n\
  \    candidate = method(:triangle_area)\n    assert_equal(6.0, candidate.call(3,\
  \ 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n    assert_equal(8.18,\
  \ candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2, 2, 2))\n  \
  \  assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25, candidate.call(10,\
  \ 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n    assert_equal(0.43,\
  \ candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2, 2, 10))\n  end\n\
  end\n"
completions: ["  a, b, c = [a, b, c].sort\n  a + b > c ? s = (a + b + c) / 2.0 : (return\
    \ -1)\n  area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  area.round(2)\n\
    end", "  if a+b > c and a+c > b and b+c > a\n    area = ((a*b)/2.0)\n    return\
    \ area.round(2)\n  else\n    return -1\n  end\nend", "  # write your code here\n\
    end", "  if valid_triangle?(a, b, c)\n    return (a * b * 0.5).round(2)\n  else\n\
    \    return -1\n  end\nend", "  h = [a, b, c].sort\n  return -1 if h[0] + h[1]\
    \ <= h[2]\n  s = (a + b + c) / 2.0\n  Math.sqrt(s * (s - a) * (s - b) * (s - c)).round(2)\n\
    end", "  arr = [a, b, c].sort\n  return -1 if arr[0] + arr[1] <= arr[2]\n  s =\
    \ (a + b + c) / 2.0\n  (s * (s - a) * (s - b) * (s - c)) ** 0.5\nend", "  return\
    \ -1 if a + b <= c || a + c <= b || b + c <= a\n  (a * b * Math.sin(Math.acos((a**2\
    \ + b**2 - c**2) / (2 * a * b)))) / 2\nend", "  # Your code here\nend", "  # your\
    \ code here\nend", "  return -1 if a + b <= c || a + c <= b || b + c <= a\n  s\
    \ = (a + b + c) / 2.0\n  (s * (s - a) * (s - b) * (s - c)) ** 0.5\nend", "  a\
    \ = a.to_f\n  b = b.to_f\n  c = c.to_f\n  if (a + b > c) && (a + c > b) && (b\
    \ + c > a)\n    return ((a + b + c) / 2) * Math.sqrt((((a + b + c) / 2) - a) *\
    \ (((a + b + c) / 2) - b) * (((a + b + c) / 2) - c))\n  else\n    return -1\n\
    \  end\nend", "  sides = [a, b, c].sort\n  if sides[0] + sides[1] > sides[2]\n\
    \    s = (a + b + c) / 2.0\n    return Math.sqrt(s * (s - a) * (s - b) * (s -\
    \ c)).round(2)\n  else\n    return -1\n  end\nend", "  sides = [a, b, c].sort\n\
    \  return -1 if sides[0] + sides[1] <= sides[2]\n  Math.sqrt(sides[0..1].reduce(:+)\
    \ * (sides[2] - sides[0..1].reduce(:+)) / 4.0).round(2)\nend", "  a, b, c = [a,\
    \ b, c].sort\n  (a + b) > c ? (a + b + c) / 2.0 : -1\nend", "  return -1 if a\
    \ <= 0 || b <= 0 || c <= 0\n  return -1 if (a+b) <= c || (a+c) <= b || (b+c) <=\
    \ a\n  half_perimeter = (a+b+c)/2.0\n  area = Math.sqrt(half_perimeter*(half_perimeter-a)*(half_perimeter-b)*(half_perimeter-c))\n\
    \  return area.round(2)\nend", "  sorted = [a, b, c].sort\n  return -1 if sorted[0]\
    \ + sorted[1] <= sorted[2]\n  s = (a + b + c) / 2.0\n  (s * (s - a) * (s - b)\
    \ * (s - c)) ** 0.5\nend", "  arr = [a, b, c].sort\n  arr[0] + arr[1] > arr[2]\
    \ ? (arr[0] * Math.sqrt(arr[1]**2 - (arr[0]**2 / 4)) / 2).round(2) : -1\nend",
  "    if (a+b>c && a+c>b && b+c>a)\n        p ((a+b+c)/2.0)\n        p (Math.sqrt(((a+b+c)/2.0)*(((a+b+c)/2.0)-a)*(((a+b+c)/2.0)-b)*(((a+b+c)/2.0)-c)))\n\
    \        ((Math.sqrt(((a+b+c)/2.0)*(((a+b+c)/2.0)-a)*(((a+b+c)/2.0)-b)*(((a+b+c)/2.0)-c)))*100).round/100.0\n\
    \    else\n        -1\n    end\nend", '  return -1 if a + b <= c || a + c <= b
    || b + c <= a', "  return 0.0 if (a <= 0 || b <= 0 || c <= 0)\n  sides = [a, b,\
    \ c].sort\n  return 0.0 if (sides[0] + sides[1] <= sides[2])\n  s = (a + b + c)\
    \ / 2.0\n  Math.sqrt(s * (s - a) * (s - b) * (s - c)).round(2)\nend", "  # TODO\n\
    end", "  s = (a + b + c) / 2.0\n  return -1 if s <= 0 || a <= 0 || b <= 0 || c\
    \ <= 0\n  s * (s - a) * (s - b) * (s - c)\nend", "  if (a + b > c) && (a + c >\
    \ b) && (b + c > a)\n    area = (a * b) / 2\n    area.round(2)\n  else\n    -1\n\
    \  end\nend", "  a, b, c = [a, b, c].sort\n  return -1 if a + b <= c\n  x = (a\
    \ + b + c) / 2.0\n  y = x * (x - a) * (x - b) * (x - c)\n  return y > 0 ? Math.sqrt(y).round(2)\
    \ : -1\nend", "  sides = [a, b, c].sort\n  (sides[0] + sides[1] > sides[2]) ?\
    \ (0.5 * sides[0] * sides[2]) : -1\nend", "  (a + b > c) && (a + c > b) && (b\
    \ + c > a) ? (a + b + c) / 2.0 : -1\nend", "  a, b, c = [a, b, c].sort\n  return\
    \ -1 if a + b <= c\n  (1.0 / 4.0) * Math.sqrt((a + b + c) * (b + c - a) * (c +\
    \ a - b) * (a + b - c))\nend", "  sides = [a, b, c].sort\n  return -1 if sides[0]\
    \ + sides[1] <= sides[2]\n  area = 0.5 * sides[0] * sides[1]\n  area.round(2)\n\
    end", "  s = (a + b + c) / 2.0\n  a = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n\
    \  a.nan? ? -1 : a.round(2)\nend", "  p = a + b + c\n  s = p/2.0\n  area = Math.sqrt(s*(s-a)*(s-b)*(s-c))\n\
    \  (a < b + c && b < a + c && c < a + b) ? area.round(2) : -1\nend", "  arr =\
    \ [a, b, c].sort\n  side1, side2, side3 = arr\n  if side1 + side2 > side3\n  \
    \  return (side1 * Math.sqrt(side2**2 - (side1/2)**2)).round(2)\n  else\n    return\
    \ -1\n  end\nend", "  sides = [a, b, c].sort\n  return -1 if sides[0] + sides[1]\
    \ <= sides[2]\n  perimeter = (a + b + c) / 2.0\n  Math.sqrt(perimeter * (perimeter\
    \ - a) * (perimeter - b) * (perimeter - c)).round(2)\nend", "  # if a + b < c\
    \ || a + c < b || b + c < a\n  #   return -1\n  # else\n  #   p = (a + b + c)\
    \ / 2.0\n  #   Math.sqrt(p * (p - a) * (p - b) * (p - c))\n  # end\n  # My solution\
    \ is better (in terms of readability), but not particularly efficient.\n  # Below\
    \ is a more efficient implementation:\n  s = (a + b + c) / 2.0\n  return -1 if\
    \ s <= a || s <= b || s <= c\n  Math.sqrt(s * (s - a) * (s - b) * (s - c))\nend",
  "  return -1 if [a, b, c].min(2).reduce(:+) < [a, b, c].max\n  s = (a + b + c) /\
    \ 2.0\n  Math.sqrt(s * (s - a) * (s - b) * (s - c)).round(2)\nend", "  arr = [a,\
    \ b, c].sort!\n  if arr[0] + arr[1] > arr[2] && arr[0] + arr[2] > arr[1] && arr[1]\
    \ + arr[2] > arr[0]\n    p arr[0].to_f + arr[1].to_f + arr[2].to_f\n    return\
    \ (arr[0] + arr[1] + arr[2]) / 2.0\n  else\n    return -1\n  end\nend", "  sides\
    \ = [a, b, c].sort\n  return -1 if (sides[0] + sides[1]) <= sides[2]\n  sides.reduce(:*)\
    \ * 0.5\nend", "  # Your code here\nend", "  #write your code here\nend", '  return
    -1 if a + b <= c || a + c <= b || b + c <= a', "  s = (a + b + c) / 2.0\n  area\
    \ = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n  area >= 0 ? area.round(2) : -1\n\
    end", "  if a <= 0 || b <= 0 || c <= 0 || (a + b) <= c || (a + c) <= b || (b +\
    \ c) <= a\n    return -1\n  else\n    s = (a + b + c) / 2.0\n    area = (s * (s\
    \ - a) * (s - b) * (s - c)) ** 0.5\n    return area.round(2)\n  end\nend", " \
    \ ((a + b + c) / 2.0) * (((a + b + c) / 2.0) - a) * (((a + b + c) / 2.0) - b)\
    \ * (((a + b + c) / 2.0) - c) > 0 ? \n  Math.sqrt(((a + b + c) / 2.0) * (((a +\
    \ b + c) / 2.0) - a) * (((a + b + c) / 2.0) - b) * (((a + b + c) / 2.0) - c)).round(2)\
    \ : -1\nend", "  # Your code here\nend", "  sides = [a, b, c].sort\n  return -1\
    \ if sides[0] + sides[1] <= sides[2]\n  area = (sides[0] + sides[1] + sides[2])\
    \ / 2.0\n  Math.sqrt(area * (area - sides[0]) * (area - sides[1]) * (area - sides[2]))\n\
    end", "  return -1 if a < b + c && b < a + c && c < a + b\n  p = (a + b + c) /\
    \ 2.0\n  Math.sqrt(p * (p - a) * (p - b) * (p - c)).round(2)\nend", '  sides =
    [a, b, c].sort', "  sides = [a, b, c].sort\n  if (sides[0] + sides[1]) > sides[2]\n\
    \    return ((sides[0] + sides[1] + sides[2]) / 2.0) * (sides[2] - sides[0] +\
    \ sides[1]) * 0.5\n  else\n    return -1\n  end\nend", "    triangle_array = [a,\
    \ b, c].sort\n    if triangle_array[0] + triangle_array[1] > triangle_array[2]\n\
    \        (1/2.0 * triangle_array[0] * triangle_array[2]).round(2)\n    else\n\
    \        -1\n    end\nend", "    # TODO: Implement\nend", "  # YOUR CODE HERE\n\
    end", "  # your code goes here\nend", "  # write your code here\nend", "  # Your\
    \ code here\nend", "  # Your code here\nend", "  s = (a + b + c) / 2.0\n  (s *\
    \ (s - a) * (s - b) * (s - c)) ** 0.5\nend", "  x = [a, b, c].sort\n  return -1\
    \ if x[0] + x[1] <= x[2]\n  base = x[0]\n  height = x[1]\n  area = 0.5 * base\
    \ * height\n  return area.round(2)\nend", "  # your code here\nend", "    return\
    \ -1 unless (a + b > c && a + c > b && b + c > a)\n    p ((a + b + c) / 2.0)\n\
    \    p Math.sqrt(((a + b + c) / 2.0) * (((a + b + c) / 2.0) - a) * (((a + b +\
    \ c) / 2.0) - b) * (((a + b + c) / 2.0) - c))\n    return (Math.sqrt(((a + b +\
    \ c) / 2.0) * (((a + b + c) / 2.0) - a) * (((a + b + c) / 2.0) - b) * (((a + b\
    \ + c) / 2.0) - c))).round(2)\nend", "  perimeter = (a + b + c) / 2.0\n  area\
    \ = Math.sqrt(perimeter * (perimeter - a) * (perimeter - b) * (perimeter - c))\n\
    \  area.positive? ? area.round(2) : -1\nend", "  if (a+b)>c && (a+c)>b && (b+c)>a\n\
    \    s = (a+b+c)/2.0\n    area = Math.sqrt(s*(s-a)*(s-b)*(s-c))\n    return '%.2f'\
    \ % area\n  else\n    return -1\n  end\nend", "  # Return area if valid triangle,\
    \ else return -1\n  if valid_triangle?(a, b, c)\n    (1.0/4) * Math.sqrt((a +\
    \ b + c) * (-a + b + c) * (a - b + c) * (a + b - c))\n  else\n    -1\n  end\n\
    end", "  # TODO\nend", "  sides = [a, b, c].sort\n  return -1 if sides[0] + sides[1]\
    \ <= sides[2]\n  area = (sides[0] + sides[1] + sides[2]) / 2.0\n  (area * (area\
    \ - sides[0]) * (area - sides[1]) * (area - sides[2])) ** 0.5\nend", "  # your\
    \ code here\nend", "  #if a == b && b == c\n  #  return a * a * Math.sqrt(3) /\
    \ 4\n  #end\n  # \n  #if a == b || b == c || a == c\n  #  return a * b / 2\n \
    \ #end\n  #s = (a + b + c) / 2\n  #Math.sqrt(s * (s - a) * (s - b) * (s - c))\n\
    \  a, b, c = [a, b, c].sort\n  a + b > c ? Math.sqrt(a * a + b * b - c * c) *\
    \ (a + b + c) / 2 : -1\nend", "  return -1 if (a + b <= c) || (a + c <= b) ||\
    \ (b + c <= a)\n  s = (a + b + c) / 2.0\n  area = (s * (s - a) * (s - b) * (s\
    \ - c)) ** 0.5\n  return (\"%.2f\" % area).to_f\nend", "  # TODO: Implement me\n\
    \  return -1 if a + b <= c || a + c <= b || b + c <= a\n  area = (a + b + c)/2.0\n\
    \  Math.sqrt(area * (area - a) * (area - b) * (area - c)).round(2)\nend", "  #\
    \ TODO: replace by your code\n  if a <= 0 || b <= 0 || c <= 0\n    return -1\n\
    \  elsif a + b > c && a + c > b && b + c > a\n    return area = ((a + b + c) /\
    \ 2) * (a - (a + b + c) / 2) * (b - (a + b + c) / 2) * (c - (a + b + c) / 2)\n\
    \  else\n    return -1\n  end\nend", "  #input three sides of a triangle, return\
    \ area of the triangle to 2 decimal points\n  #if the sides form a valid triangle,\
    \ otherwise return -1\n  #condition: sum of any two sides of a triangle is greater\
    \ than the other\n  #two sides of the triangle\n  sides = [a, b, c]\n  hyp = sides.max\n\
    \  sides.delete(hyp)\n  sum = sides.inject{|sum, x| sum + x}\n  if sum > hyp\n\
    \    p sides.max(2)[0] * sides.max(2)[1] / 2.0\n  else\n    -1\n  end\nend", " \
    \ sides = [a, b, c].sort\n  return -1 if sides[0] + sides[1] <= sides[2]\n  area\
    \ = 0.5 * sides[0] * sides[1]\n  area.round(2)\nend", "  sides = [a, b, c].sort\n\
    \  return -1 if sides[0] + sides[1] <= sides[2]\n  area = Math.sqrt(sides[0] *\
    \ sides[1] * (sides[0] + sides[1]) * (sides[0] + sides[1] - sides[2]))\n  sprintf(\"\
    %.2f\", area)\nend", "  # Find the sides with the largest length\n  a, b, c =\
    \ [a, b, c].sort", "  # a, b, c = [a, b, c].sort\n  # return -1 if (a + b <= c)\n\
    \  # s = (a + b + c) / 2.0\n  # Math.sqrt(s * (s - a) * (s - b) * (s - c))\n \
    \ x, y, z = [a, b, c].sort\n  return -1 if (x + y <= z)\n  sqrt((x + y + z) *\
    \ (x + y - z) * (x - y + z) * (-x + y + z)) / 4\nend", "  # Your code here\nend",
  "\tsides = [a, b, c].sort\n\tif sides[0] + sides[1] > sides[2]\n\t\tMath.sqrt(sides[0]\
    \ + sides[1] + sides[2]) * sides[0] * sides[1]\n\telse\n\t\t-1\n\tend\nend", " \
    \ a, b, c = [a, b, c].sort\n  return -1 if a + b <= c\n  s = (a + b + c) / 2.0\n\
    \  (s * (s - a) * (s - b) * (s - c)) ** 0.5\nend", '  sides = [a, b, c].sort',
  "  [a, b, c].sort!\n  if a + b > c && a + c > b && b + c > a\n    area = 0.25 *\
    \ Math.sqrt((a + b + c) * (-a + b + c) * (a - b + c) * (a + b - c))\n    return\
    \ area.round(2)\n  else\n    return -1\n  end\nend", "  # your code goes here\n\
    end", "  sides = [a, b, c].sort\n  return -1 if (sides[0] + sides[1]) <= sides[2]",
  "  # Write your code here\nend", "  a, b, c = [a, b, c].sort\n  return -1 if a +\
    \ b <= c\n  s = (a + b + c) / 2.0\n  Math.sqrt(s * (s - a) * (s - b) * (s - c)).round(2)\n\
    end", "  # your code here\nend", "\t# if a.positive? && b.positive? && c.positive?\n\
    \t# \tif (a+b) > c && (a+c) > b && (b+c) > a\n\t# \t\t(a*b*0.5).round(2)\n\t#\
    \ \telse\n\t# \t\t-1\n\t# \tend\n\t# else\n\t# \t-1\n\t# end\n\tx = ((a+b+c)*(a+b-c)*(a-b+c)*(-a+b+c))\n\
    \tif x > 0\n\t\tMath.sqrt(x).round(2)\n\telse\n\t\t-1\n\tend\nend", "  # write\
    \ your code here\nend", "  s = (a + b + c) / 2.0\n  area = Math.sqrt(s * (s -\
    \ a) * (s - b) * (s - c))\n  if area > 0\n    area.round(2)\n  else\n    -1\n\
    \  end\nend", "  return -1 if a+b<=c || a+c<=b || b+c<=a\n  return ((a+b+c)/2.0)\n\
    end", "  # YOUR CODE HERE\nend", "  if valid_triangle?(a, b, c)\n    area = 0.25\
    \ * Math.sqrt((a + b + c) * (-a + b + c) * (a - b + c) * (a + b - c))\n    return\
    \ area.round(2)\n  else\n    return -1\n  end\nend", "  return -1 if [a, b, c].min(2).sum\
    \ < [a, b, c].max\n  sides = [a, b, c]\n  area = sides.sort.last * Math.sqrt(2\
    \ * sides.first ** 2 + 2 * sides.sort[1] ** 2 - sides.last ** 2) / 4\n  area.round(2)\n\
    end", "  # triangle inequality theorem: all three sides have to be less than the\
    \ sum\n  # of the other two\n  return -1 if [a, b, c].max >= a + b + c - [a, b,\
    \ c].max\n  array = [a, b, c].sort\n  s = (array[0] + array[1] + array[2]) / 2.0\n\
    \  area = (s * (s - array[0]) * (s - array[1]) * (s - array[2])) ** 0.5\n  area.round(2)\n\
    end", "\ts = (a + b + c) / 2.0\n\tsides = [a, b, c].sort\n\tvalid = sides[0] +\
    \ sides[1] > sides[2]", "  sides = [a, b, c].sort\n  area = (sides[0] + sides[1]\
    \ > sides[2]) ? sides[0] + sides[1] + sides[2] : -1\n  area != -1 ? \"#{area.round(2)}\"\
    \ : area\nend", "  # calculate half perimeter\n  p = (a + b + c) / 2.0\n  # calculate\
    \ area with Heron's formula\n  area = Math.sqrt(p * (p - a) * (p - b) * (p - c))\n\
    \  area > 0 ? area.round(2) : -1\nend", "  return -1 if (a + b <= c) || (a + c\
    \ <= b) || (b + c <= a)\n  x = (a + b + c) / 2.0\n  Math.sqrt(x * (x - a) * (x\
    \ - b) * (x - c)).round(2)\nend", "  sides = [a, b, c].sort\n  return -1 if sides[0]\
    \ + sides[1] <= sides[2]\n  s = (a + b + c) / 2.0\n  area = Math.sqrt(s * (s -\
    \ a) * (s - b) * (s - c))\n  area.round(2)\nend", "  # 1. check the triangle is\
    \ valid, if valid then calculate the area\n  # 2. formula area = Math.sqrt(s*(s-a)*(s-b)*(s-c))\n\
    \  # 3. s = (a+b+c)/2\n  # 4. return the area\n  s = (a+b+c)/2.0\n  return -1\
    \ if (s*(s-a)*(s-b)*(s-c)) <= 0\n  Math.sqrt(s*(s-a)*(s-b)*(s-c)).round(2)\nend",
  "  # your code here\nend", "  return -1 if a == 0 or b == 0 or c == 0\n  d = a +\
    \ b + c\n  if (d - a) * (d - b) * (d - c) > 0\n    s = d / 2.0\n    area = Math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c))\n    area.round(2)\n  else\n    -1\n  end\nend",
  "  triangle = [a, b, c].sort\n  return -1 if triangle[0] + triangle[1] <= triangle[2]\n\
    \  area = triangle[0] * triangle[1] / 2.0\n  return sprintf('%.2f', area)\nend",
  "  # Your code here\nend", "  # set side_array to an array of the 3 integers as\
    \ floats\n  side_array = [a, b, c].map(&:to_f)\n  # if the side array is sorted\
    \ and the sum of the first two numbers is greater than the third number\n  if\
    \ side_array.sort![0..1].sum > side_array[2]\n    # use Heron's formula to calculate\
    \ the area of the triangle\n    area = Math.sqrt(side_array.sum(0.0) / 2 * \n\
    \      (side_array.sum(0.0) / 2 - side_array[0]) * \n      (side_array.sum(0.0)\
    \ / 2 - side_array[1]) * \n      (side_array.sum(0.0) / 2 - side_array[2]))\n\
    \    # return the area of the triangle rounded to 2 decimal points\n    return\
    \ area.round(2)\n  # otherwise \n  else\n    # return -1\n    return -1\n  end\n\
    end", "  # Implement your solution here.\nend", "   if a + b > c && a + c > b\
    \ && b + c > a\n      area = (a * b * 0.5).to_f\n      area.round(2)\n   else\n\
    \      -1\n   end\nend", "  if (a + b > c) && (a + c > b) && (b + c > a)\n   \
    \ return ((a + b + c) / 2.0).to_f.round(2)\n  else\n    return -1\n  end\nend\n\
    puts \"Triangle area\"\nputs triangle_area(3, 4, 5) == 6.00\nputs triangle_area(1,\
    \ 2, 10) == -1", "  if a + b <= c || a + c <= b || b + c <= a\n    return -1\n\
    \  else\n    triangle_area = (a*b)/2\n    return triangle_area.round(2)\n  end\n\
    end", "  max = [a, b, c].max\n  res = (a + b + c) - max\n  if res > max \n   \
    \ ((a + b + c) / 2.0)\n  else\n    -1\n  end\nend", "  sides = [a, b, c].sort\n\
    \  return -1 if sides[0] + sides[1] <= sides[2]\n  (sides[0] + sides[1] + sides[2])\
    \ / 2.0\nend", "  sum = (a + b + c) / 2.0\n  area = sum * (sum - a) * (sum - b)\
    \ * (sum - c)\n  area > 0 ? Math.sqrt(area).round(2) : -1\nend", "  # your code\
    \ here\nend", "  if a + b > c && a + c > b && b + c > a\n    #area of triangle\
    \ = (1/2) * base * height\n    height = find_height(a, b, c)\n    area = (1/2.0)\
    \ * c * height\n    return area.round(2)\n  else\n    return -1\n  end\nend",
  "  a, b, c = [a, b, c].sort\n  return -1 if a + b <= c\n  (a + b + c) / 2.0\nend",
  "  s = (a + b + c) / 2.0\n  h = (2.0 / a) * Math.sqrt(s * (s - a) * (s - b) * (s\
    \ - c))\n  if h == 0\n    -1\n  else\n    area = (0.5 * a * h).round(2)\n  end\n\
    end", "  # write your code here\nend", "  return -1 if a + b <= c || a + c <=\
    \ b || b + c <= a\n  s = (a + b + c) / 2.0\n  (s * (s - a) * (s - b) * (s - c))\
    \ ** 0.5\nend", "  # corner cases\n  return -1 if (a + b <= c) || (a + c <= b)\
    \ || (b + c <= a)\n  # Heron's formula\n  p = (a + b + c) / 2.0\n  Math.sqrt(p\
    \ * (p - a) * (p - b) * (p - c)).round(2)\nend", "\treturn -1 if [a, b, c].sort[0..1].inject(:+)\
    \ <= [a, b, c].sort[2]\n\ts = (a + b + c)/2.0\n\treturn (s*(s-a)*(s-b)*(s-c))**0.5\n\
    end", "  arr = [a, b, c].sort\n  if (arr[0] + arr[1]) > arr[2]\n    area = (arr[0]\
    \ + arr[1] + arr[2]) / 2.0\n    return ((area - arr[0]) * (area - arr[1]) * (area\
    \ - arr[2]) * area) ** 0.5\n  else\n    return -1\n  end\nend", "  # write your\
    \ code here\nend", "  s = (a + b + c) / 2.0\n  return -1 if (s - a) <= 0 || (s\
    \ - b) <= 0 || (s - c) <= 0\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c)).round(2)\n\
    end", "  # check if given sides can be a triangle\n  if a + b > c && a + c > b\
    \ && b + c > a\n    # calculate Heron's formula\n    s = (a + b + c) / 2.0\n \
    \   Math.sqrt(s * (s - a) * (s - b) * (s - c)).round(2)\n  else\n    -1\n  end\n\
    end", "  sides = [a, b, c].sort\n  return -1 if sides[0] + sides[1] <= sides[2]\n\
    \  triangle_area = (0.5 * (a * b * Math.sin(c * Math::PI / 180))).round(2)\nend",
  "\t[a, b, c].sort!\n\tif a + b > c\n\t\treturn (a * b * 0.5).round(2)\n\telse\n\t\
    \treturn -1\n\tend\nend", "  if [a, b, c].max >= a + b + c - [a, b, c].max\n \
    \   -1\n  else\n    sum = (a + b + c) / 2.0\n    ((sum - a) * (sum - b) * (sum\
    \ - c) * sum) ** 0.5\n  end\nend", "  # Your Code Here\nend", "  sides = [a, b,\
    \ c].sort\n  return -1 if sides[0] + sides[1] <= sides[2]\n  area = heron(sides)\n\
    \  (area * 100).round / 100.0\nend", "  sorted = [a, b, c].sort\n  if (sorted[0]\
    \ + sorted[1]) > sorted[2]\n    area = sorted[0] + sorted[1] + sorted[2]\n   \
    \ return ((area*(area-2*sorted[0])*(area-2*sorted[1])*(area-2*sorted[2]))**0.5)/4\n\
    \  else\n    return -1\n  end\nend", "  # Your code here\nend", "  if a + b >\
    \ c && a + c > b && b + c > a\n    # Math.sqrt(s * (s - a) * (s - b) * (s - c))\n\
    \    # Math.sqrt(p * (p - a) * (p - b) * (p - c))\n    a, b, c = [a, b, c].sort\n\
    \    return (((a * b * c) / 2).to_f).round(2)\n  else\n    return -1\n  end\n\
    end", "  s = (a + b + c) / 2.0\n  return -1 if (s - a) <= 0 || (s - b) <= 0 ||\
    \ (s - c) <= 0\n  area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  return\
    \ '%.2f' % area\nend", "    heron = (a + b + c)/2.0\n    area = Math.sqrt(heron*(heron-a)*(heron-b)*(heron-c))",
  "    a, b, c = [a, b, c].sort\n    (a + b) > c ? (0.5 * a * c).round(2) : -1\nend",
  "  # Your code here\nend", "  if a + b <= c || a + c <= b || b + c <= a\n    return\
    \ -1\n  else\n    s = (a + b + c) / 2.0\n    return (s * (s - a) * (s - b) * (s\
    \ - c)) ** 0.5\n  end\nend", "\ts = (a + b + c) / 2.0\n\t(s - a) * (s - b) * (s\
    \ - c) < 0 ? -1 : Math.sqrt(s * (s - a) * (s - b) * (s - c)).round(2)\nend", " \
    \ # fill in your code here\nend", "    # Write your code here.\nend", "  sides\
    \ = [a, b, c].sort\n  if sides[0] + sides[1] > sides[2]\n    area = sides[0] *\
    \ sides[1] / 2.0\n    return area.round(2)\n  else\n    return -1\n  end\nend",
  "  # complete this method\n  # first, check to see if the sum of a and b is greater\
    \ than c.\n  # if it is, calculate the perimeter.\n  # then, find the area of\
    \ the triangle by:\n  # area = 1/2 * (x1*y2 - x2*y1)\n  if a + b > c\n    area\
    \ = 0.5 * ((a * b) - (b * c))\n    area.round(2)\n  else\n    -1\n  end\nend",
  "  sides = [a, b, c].sort\n  if sides[0] + sides[1] > sides[2] && sides[0] + sides[2]\
    \ > sides[1] && sides[1] + sides[2] > sides[0]\n    return (sides[0] * Math.sqrt(sides[2]\
    \ ** 2 - (sides[0] ** 2 + sides[1] ** 2) / 4) / 2).round(2)\n  else\n    return\
    \ -1\n  end\nend", "  s = 0.5 * (a + b + c)\n  area = Math.sqrt(s * (s - a) *\
    \ (s - b) * (s - c))\n  area.round(2)\nend", "  area = 0\n  sides = [a, b, c].sort",
  "\t# Your code here\nend", "  if a + b > c && a + c > b && b + c > a\n    s = (a\
    \ + b + c) / 2.0\n    (s * (s - a) * (s - b) * (s - c)) ** 0.5\n  else\n    -1\n\
    \  end\nend", "  sides = [a, b, c].sort\n  return -1 if sides[0] + sides[1] <=\
    \ sides[2]\n  area = heron(sides)\n  area.round(2)\nend", "  if a + b > c && a\
    \ + c > b && b + c > a\n    area = ((a + b + c) / 2.0)\n    ((area - a) * (area\
    \ - b) * (area - c)) ** 0.5\n  else\n    -1\n  end\nend", "  # YOUR CODE HERE\n\
    end", "  # Your code here\nend", "  if (a <= 0 || b <= 0 || c <= 0)\n    return\
    \ -1\n  elsif (a + b > c && a + c > b && b + c > a)\n    s = (a + b + c)/2.0\n\
    \    area = (s*(s-a)*(s-b)*(s-c))**0.5\n    return area.round(2)\n  else\n   \
    \ return -1\n  end\nend", "  if a + b > c && a + c > b && b + c > a\n    return\
    \ (a * b) / 2.0\n  else\n    return -1\n  end\nend", "  # your code here\nend",
  "  return -1 if ((a + b <= c) || (a + c <= b) || (b + c <= a))\n  p = (a + b + c)\
    \ / 2.0\n  Math.sqrt(p * (p - a) * (p - b) * (p - c)).round(2)\nend", "\tsides\
    \ = [a, b, c].sort\n\tif sides[0] + sides[1] > sides[2]\n\t\treturn (sides[0]\
    \ * Math.sqrt(sides[1]**2 - sides[0]**2)/2).round(2)\n\telse\n\t\treturn -1\n\t\
    end\nend", "  if (a <= 0 || b <= 0 || c <= 0) || (a+b <= c || a+c <= b || b+c\
    \ <= a)\n    return -1\n  else\n    semi_perimeter = (a+b+c)/2.0\n    area = Math.sqrt(semi_perimeter*(semi_perimeter-a)*(semi_perimeter-b)*(semi_perimeter-c))\n\
    \    return area.round(2)\n  end\nend", "\ts = (a + b + c) / 2.0\n\tarea = Math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c))\n\tarea > 0 ? area.round(2) : -1\nend", "  #\
    \ first use the perimeter of the triangle which is the sum of all three side\n\
    \  perimeter = a + b + c\n  # then use the perimeter to get the semiperimeter\
    \ (1/2 the perimeter)\n  semiperimeter = perimeter / 2\n  # use Heron's forumula\
    \ to get the area\n  a * b * c * Math.sqrt(semiperimeter * (semiperimeter - a)\
    \ * (semiperimeter - b) * (semiperimeter - c))\nend", "  if a + b > c && a + c\
    \ > b && b + c > a\n    area = (a + b + c) / 2.0\n    return Math.sqrt(area *\
    \ (area - a) * (area - b) * (area - c)).round(2)\n  else\n    return -1\n  end\n\
    end", "  triangle = [a, b, c].sort\n  return -1 if (triangle[0] + triangle[1])\
    \ <= triangle[2]\n  area = triangle[0] * triangle[1] * 0.5\n  \"%.2f\" % area\n\
    end", "  # Your code here\nend", "  if (a+b) > c && (a+c) > b && (b+c) > a\n \
    \   return (a*b*c)/2.0\n  else\n    return -1\n  end\nend", "  \nend", "  return\
    \ -1 if a <= 0 || b <= 0 || c <= 0\n  return -1 if a + b <= c || a + c <= b ||\
    \ b + c <= a\n  s = (a + b + c) / 2.0\n  area = Math.sqrt(s * (s - a) * (s - b)\
    \ * (s - c))\n  area.round(2)\nend", "  if a+b>c && a+c>b && b+c>a\n    p (a*b*0.5).round(2)\n\
    \  else\n    p -1\n  end\nend", "  # Return -1 if the sum of any two sides is\
    \ less than the third side\n  return -1 if a + b < c || a + c < b || b + c < a",
  "  sides = [a, b, c].sort\n  return -1 if sides[0] + sides[1] <= sides[2]\n  area\
    \ = 0.5 * sides[0] * sides[1]\n  area.round(2)\nend", "  return -1 if a + b <=\
    \ c\n  return -1 if a + c <= b\n  return -1 if b + c <= a\n  return ((a * b *\
    \ Math.sin(c)) / 2).round(2)\nend", "  arr = [a, b, c].sort\n  arr[0] + arr[1]\
    \ > arr[2] ? (arr[0] * Math.sqrt(arr[1] ** 2 - (arr[0] ** 2) / 4) / 2).round(2)\
    \ : -1\nend", "\tif a + b > c && a + c > b && b + c > a\n\t\ts = (a + b + c) /\
    \ 2.0\n\t\ts * (s - a) * (s - b) * (s - c)\n\telse\n\t\t-1\n\tend\nend", "  case\n\
    \  when a + b > c && a + c > b && b + c > a\n    return ((a + b + c) / 2.0).round(2)\n\
    \  else\n    return -1\n  end\nend", "  a, b, c = [a, b, c].sort\n  return -1\
    \ if a + b <= c\n  p (a + b + c) / 2.0\n  Math.sqrt(p * (p - a) * (p - b) * (p\
    \ - c)).round(2)\nend", "  if valid_triangle?(a, b, c)\n    (1.0/4.0) * Math.sqrt((a\
    \ + b + c) * (-a + b + c) * (a - b + c) * (a + b - c))\n  else\n    -1\n  end\n\
    end", "  # return -1 unless a + b > c && a + c > b && b + c > a\n  return -1 unless\
    \ valid_triangle?(a, b, c)\n  s = (a + b + c) / 2.0\n  area = Math.sqrt(s * (s\
    \ - a) * (s - b) * (s - c))\n  area.round(2)\nend", "  sorted = [a, b, c].sort\n\
    \  if (sorted[0] + sorted[1]) > sorted[2]\n    area = 0.5 * (a * b * Math.sin(Math::PI\
    \ / 180 * c))\n    area.round(2)\n  else\n    -1\n  end\nend", "  return -1 if\
    \ (a+b) <= c || (a+c) <= b || (b+c) <= a\n  s = (a+b+c)/2.0\n  a = Math.sqrt(s*(s-a)*(s-b)*(s-c))\n\
    \  a.round(2)\nend", "  a, b, c = [a, b, c].sort\n  if a + b > c\n    p (0.5 *\
    \ a * Math.sqrt(b**2 - ((a**2 + b**2 - c**2) / (2 * a))**2)).round(2)\n  else\n\
    \    p -1\n  end\nend", "    sum = a + b + c\n    if sum - a > a && sum - b >\
    \ b && sum - c > c\n        area = 0.5 * (a * b)\n        return area.round(2)\n\
    \    else\n        return -1\n    end\nend", "  # return -1 if any side is 0 or\
    \ negative\n  return -1 if a <= 0 || b <= 0 || c <= 0\n  # check if a triangle\
    \ is valid or not\n  return -1 if (a + b <= c) || (a + c <= b) || (b + c <= a)",
  "  # # Old way\n  # sides = [a, b, c].sort\n  # return -1 if (sides[0] + sides[1])\
    \ <= sides[2]\n  # sides[0] * sides[1] / 2.0", "  if a + b > c && a + c > b &&\
    \ b + c > a\n    (a * b / 2.0).round(2)\n  else\n    -1\n  end\nend", "  # Your\
    \ code here\nend", "  # check if valid triangle\n  # sort array first\n  sides\
    \ = [a, b, c].sort\n  # check the sum of smallest two sides is greater than third\
    \ side\n  if sides[0] + sides[1] > sides[2]\n    # return area\n    p ((sides[0]\
    \ + sides[1] + sides[2]) / 2.0)\n    area = Math.sqrt(((sides[0] + sides[1] +\
    \ sides[2]) / 2.0) * ((sides[0] + sides[1] + sides[2]) / 2.0 - sides[0]) * ((sides[0]\
    \ + sides[1] + sides[2]) / 2.0 - sides[1]) * ((sides[0] + sides[1] + sides[2])\
    \ / 2.0 - sides[2]))\n    p area\n    return area.round(2)\n  else\n    return\
    \ -1\n  end\nend", "  # I was working on this for a while and I can't find where\
    \ I am going wrong.\n  # I am checking the triangles and it seems to be that I\
    \ am going wrong\n  # with the pythagorean theorem.\n  #\n  # a**2 + b**2 == c**2\n\
    \  #\n  # input\n  #   a, b, c -  the lengths of the three sides of a triangle\n\
    \  #\n  # output\n  #   6.00 - if the triangle is valid\n  #   -1   - if the triangle\
    \ is invalid\n  #\n  # algorithm\n  #   check if a + b > c\n  #     if yes\n \
    \ #       check if a**2 + b**2 == c**2\n  #         if yes\n  #           calculate\
    \ area\n  #         else\n  #           check if b + c > a\n  #             if\
    \ yes\n  #               check if b**2 + c**2 == a**2\n  #                 if\
    \ yes\n  #                   calculate area\n  #                 else\n  #   \
    \                check if c + a > b\n  #                     if yes\n  #     \
    \                  check if c**2 + a**2 == b**2\n  #                         if\
    \ yes\n  #                           calculate area\n  #                     \
    \    else\n  #                           return -1\n  #                     else\n\
    \  #                       return -1\n  #                 end\n  #           \
    \  else\n  #               return -1\n  #           end\n  #       else\n  # \
    \        return -1\n  #     end\n  #\n  # find the longest side\n  longest_side\
    \ = [a, b, c].max\n  # find the length of the shorter sides\n  shorter_sides =\
    \ [a, b, c].sort.take(2)\n  # check if the longest side is less than the sum of\
    \ the shorter sides\n  if longest_side < shorter_sides.sum\n    # check if the\
    \ longest side matches the pythagorean theorem\n    if longest_side**2 == shorter_sides.map\
    \ { |side| side**2 }.sum\n      # find the area of the triangle\n      s = (a\
    \ + b + c) / 2.0\n      (s * (s - a) * (s - b)", "  if a > 0 && b > 0 && c > 0\
    \ && (a + b > c) && (a + c > b) && (b + c > a)\n    s = (a + b + c) / 2.0\n  \
    \  area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return (area * 100).round\
    \ / 100.0\n  else\n    return -1\n  end\nend", "  # your code here\nend", "  arr\
    \ = [a, b, c].sort\n  if arr[0] + arr[1] <= arr[2]\n    return -1\n  else\n  \
    \  return (arr[0] * Math.sqrt(arr[1] ** 2 - (arr[0] ** 2) / 4) / 2).round(2)\n\
    \  end\nend", "  a, b, c = [a, b, c].sort\n  return -1 if a + b <= c\n  side =\
    \ (a + b + c) / 2.0\n  ((side - a) * (side - b) * (side - c) * side) ** 0.5\n\
    end", "    # One bad side means not a triangle.\n    return -1 if a <= 0 || b\
    \ <= 0 || c <= 0\n    # Two bad sides means not a triangle.\n    return -1 if\
    \ a >= b + c || b >= a + c || c >= a + b\n    # Semiperimeter\n    s = (a + b\
    \ + c) / 2.0\n    # Area formula\n    Math.sqrt(s * (s - a) * (s - b) * (s - c))\n\
    end", "  h = [a, b, c].sort\n  return -1 if h[0] + h[1] <= h[2]\n  ((h[0] + h[1]\
    \ + h[2]) / 2.0).to_f * (h[2] - ((h[0] + h[1] - h[2]) / 2.0)).to_f\nend", "  #\
    \ write your code here\nend", "  s = (a + b + c)/2.0\n  triangle_area = Math.sqrt(s*(s-a)*(s-b)*(s-c))\n\
    \  if triangle_area == 0\n    return -1\n  else\n    return triangle_area.round(2)\n\
    \  end\nend", "    sides = [a, b, c].sort\n    return sides[0] + sides[1] > sides[2]\
    \ ? sides[0] + sides[1] + sides[2] : -1 \nend", "  # If a + b is greater than\
    \ c, then c has to be the shortest side and a + b will be\n  # the longest. Therefore\
    \ we can use Heron's formula to find the area.\n  if a + b > c && a + c > b &&\
    \ b + c > a\n    s = (a + b + c) / 2.0\n    area = Math.sqrt(s * (s - a) * (s\
    \ - b) * (s - c))\n    area.round(2)\n  else\n    -1\n  end\nend", "  (a + b >\
    \ c && a + c > b && b + c > a) ? ((a + b + c) / 2.0) : -1\nend", "  # write your\
    \ code here\n  a, b, c = [a, b, c].sort\n  return -1 if a + b <= c\n  area = ((a\
    \ + b + c) / 2.0) * (Math.sqrt((a + b + c) * (b + c - a) * (a + c - b) * (a +\
    \ b - c)) / 4.0)\n  area.round(2)\nend", "  # if a + b > c && a + c > b && b +\
    \ c > a\n  #   triangle_area = (1/2.0) * a * b\n  #   return sprintf('%.2f', triangle_area)\n\
    \  # else\n  #   return -1\n  # end\n  \n  if [a, b, c].min(2).sum > [a, b, c].max\n\
    \    return sprintf('%.2f', 0.5 * a * b)\n  else\n    return -1\n  end\nend",
  "  s = (a + b + c) / 2.0\n  return -1 if s == 0.0 || s <= a || s <= b || s <= c\n\
    \  area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  area.round(2)\nend", " \
    \ # ...\nend", "  # A triangle is valid if the sum of two sides is greater than\
    \ the third side\n  # If a triangle is valid, find the area of the triangle and\
    \ round to two decimal places\n  # In all other cases, return -1\n  if a + b >\
    \ c && a + c > b && b + c > a\n    x = (a * b * Math.sin(c)) / 2\n    return x.round(2)\n\
    \  else\n    return -1\n  end\nend", "  nums = [a, b, c].sort\n  if nums[0] +\
    \ nums[1] <= nums[2]\n    -1\n  else\n    x = (a + b + c) / 2.0\n    area = Math.sqrt(x\
    \ * (x - a) * (x - b) * (x - c))\n    area.round(2)\n  end\nend", "  a, b, c =\
    \ [a, b, c].sort\n  return -1 if a + b <= c\n  p = (a + b + c) / 2.0\n  Math.sqrt(p\
    \ * (p - a) * (p - b) * (p - c)).round(2)\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
