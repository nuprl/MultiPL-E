{
  "language": "rb",
  "name": "HumanEval_55_fib",
  "results": [
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 0 if n == 0\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpfhnjoacs\nStarted\n.\nFinished in 0.00066507 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1503.60 tests/s, 7518.01 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 0 if n == 0\n  return 1 if n == 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp81w7_u2n\nStarted\n.\nFinished in 0.000652388 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1532.83 tests/s, 7664.15 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 1,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n    return 0 if n <= 0\n    return 1 if n == 1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp25oqd5vk.rb:12: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp25oqd5vk.rb:21: syntax error, unexpected end-of-input, expecting `end'\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n <= 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp7re8a2pu\nStarted\n.\nFinished in 0.000546232 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1830.72 tests/s, 9153.62 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpm2732a_s\nStarted\n.\nFinished in 0.000616706 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1621.52 tests/s, 8107.59 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n    return n if n <= 1\n    return fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpv1kdu4sm\nStarted\n.\nFinished in 0.000662968 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1508.37 tests/s, 7541.84 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5pg8ll5o\nStarted\n.\nFinished in 0.000652882 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1531.67 tests/s, 7658.35 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpjf3kodfk\nStarted\n.\nFinished in 0.000578558 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1728.44 tests/s, 8642.18 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n\tif n == 1\n\t\treturn 1\n\telsif n == 2\n\t\treturn 1\n\tend\n\t\n\tresult = 0\n\ti = 2\n\ta = 1\n\tb = 1\n\twhile i < n\n\t\tresult = a + b\n\t\ta = b\n\t\tb = result\n\t\ti += 1\n\tend\n\treturn result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp_y0_rnqg\nStarted\n.\nFinished in 0.000452009 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2212.35 tests/s, 11061.73 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  num1 = 1\n  num2 = 1\n  (n - 2).times do\n    temp = num1\n    num1 = num2\n    num2 = temp + num2\n  end\n  num2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpiwmmcjco\nStarted\n.\nFinished in 0.000641257 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1559.44 tests/s, 7797.19 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n <= 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp_q4vx05j\nStarted\n.\nFinished in 0.000576835 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1733.60 tests/s, 8667.99 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  fib_seq = [0, 1]\n  2.upto(n) do |i|\n    fib_seq << fib_seq[i-1] + fib_seq[i-2]\n  end\n  fib_seq[n]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpmmhkyiv7\nStarted\n.\nFinished in 0.00060761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1645.79 tests/s, 8228.96 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  raise ArgumentError.new(\"non-negative integers only\") if n < 0\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpayagexe_\nStarted\n.\nFinished in 0.000797882 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1253.32 tests/s, 6266.59 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  # TODO: return the nth Fibonacci number\n  if n == 0\n    return 0\n  elsif n == 1\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp4zsyvk38\nStarted\n.\nFinished in 0.000700709 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1427.13 tests/s, 7135.63 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5pg8ll5o\nStarted\n.\nFinished in 0.000652882 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1531.67 tests/s, 7658.35 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5pg8ll5o\nStarted\n.\nFinished in 0.000652882 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1531.67 tests/s, 7658.35 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n <= 2\n    return 1\n  else\n    a = 1\n    b = 1\n    c = 0\n    (n-2).times do\n      c = a + b\n      a = b\n      b = c\n    end\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpagy_kp0w\nStarted\n.\nFinished in 0.000453559 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2204.78 tests/s, 11023.92 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 0 if n == 0\n  return 1 if n == 1\n  return fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpf7g4aa2m\nStarted\n.\nFinished in 0.000734654 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1361.18 tests/s, 6805.92 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 0 if n == 0\n  return 1 if n == 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp81w7_u2n\nStarted\n.\nFinished in 0.000652388 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1532.83 tests/s, 7664.15 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  return fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpca79xf5s\nStarted\n.\nFinished in 0.000609031 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1641.95 tests/s, 8209.76 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  n <= 2 ? 1 : fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpg8_e6nip\nStarted\n.\nFinished in 0.000770073 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1298.58 tests/s, 6492.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n    # check if input is greater than 2\n    if n > 2\n        # call function on n-1 and n-2, returning the sum\n        fib(n-1) + fib(n-2)\n    else\n        # otherwise, return 1\n        1\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpc9s8szgx\nStarted\n.\nFinished in 0.000738778 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1353.59 tests/s, 6767.93 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return nil if n <= 0\n  return 1 if n == 1 || n == 2\n  return fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmptm75jfa0\nStarted\n.\nFinished in 0.00062785 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1592.74 tests/s, 7963.69 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  return fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp42y73myj\nStarted\n.\nFinished in 0.000566419 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1765.48 tests/s, 8827.39 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpl15if_cj\nStarted\n.\nFinished in 0.000608361 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1643.76 tests/s, 8218.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 0 if n == 0\n  a, b = 0, 1\n  n.times do\n    a, b = b, a + b\n  end\n  a\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpwie6l8nj\nStarted\n.\nFinished in 0.000466339 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2144.36 tests/s, 10721.81 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 1,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  n.times.inject([0, 1]) { |fib| fib << fib.last(2).inject(:+) }.last\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpzw1aez19\nStarted\nF\n===============================================================================\nFailure: test_fib(TestHumanEval)\n/tmp/tmpzw1aez19.rb:15:in `test_fib'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_fib\n     14:     candidate = method(:fib)\n  => 15:     assert_equal(55, candidate.call(10))\n     16:     assert_equal(1, candidate.call(1))\n     17:     assert_equal(21, candidate.call(8))\n     18:     assert_equal(89, candidate.call(11))\n<55> expected but was\n<89>\n===============================================================================\n\nFinished in 0.008582863 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n116.51 tests/s, 116.51 assertions/s\n",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5pg8ll5o\nStarted\n.\nFinished in 0.000652882 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1531.67 tests/s, 7658.35 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpab3gaag_\nStarted\n.\nFinished in 0.000575713 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1736.98 tests/s, 8684.88 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5pg8ll5o\nStarted\n.\nFinished in 0.000652882 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1531.67 tests/s, 7658.35 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n <= 1\n    n\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpsxp9jhsr\nStarted\n.\nFinished in 0.000600756 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1664.57 tests/s, 8322.85 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  fibs = [0, 1]\n  2.upto(n) do |i|\n    fibs[i] = fibs[i-1] + fibs[i-2]\n  end\n  fibs[n]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpns6v_dcj\nStarted\n.\nFinished in 0.000440756 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2268.83 tests/s, 11344.15 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 1,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 0 if n == 0\n  return 1 if n == 1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp27ywpe56.rb:12: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp27ywpe56.rb:21: syntax error, unexpected end-of-input, expecting `end'\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpl15if_cj\nStarted\n.\nFinished in 0.000608361 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1643.76 tests/s, 8218.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    return 1\n  end\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpx9q493v9\nStarted\n.\nFinished in 0.000573096 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1744.91 tests/s, 8724.54 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n <= 1\n    return n\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp2dwl8ekj\nStarted\n.\nFinished in 0.000690615 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1447.98 tests/s, 7239.92 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    return 1\n  end\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpx9q493v9\nStarted\n.\nFinished in 0.000573096 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1744.91 tests/s, 8724.54 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  return fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpca79xf5s\nStarted\n.\nFinished in 0.000609031 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1641.95 tests/s, 8209.76 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  f = 1\n  f1 = 1\n  f2 = 1\n  (3..n).each do |i|\n    f = f1 + f2\n    f2 = f1\n    f1 = f\n  end\n  f\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpcprsaxdw\nStarted\n.\nFinished in 0.000594088 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1683.25 tests/s, 8416.26 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 1,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpa9wy1xru\nStarted\nE\n===============================================================================\nError: test_fib(TestHumanEval): SystemStackError: stack level too deep\n/tmp/tmpa9wy1xru.rb:9:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/tmp/tmpa9wy1xru.rb:10:in `fib'\n/t",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 0 if n == 0\n  return 1 if n == 1\n  return fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpf7g4aa2m\nStarted\n.\nFinished in 0.000734654 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1361.18 tests/s, 6805.92 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5r5un7ab\nStarted\n.\nFinished in 0.000597634 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1673.26 tests/s, 8366.32 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n\t# your code here\n\tif n == 1\n\t\treturn 1\n\telsif n == 2\n\t\treturn 1\n\telse\n\t\treturn fib(n-1) + fib(n-2)\n\tend\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp8cbkytoj\nStarted\n.\nFinished in 0.000558034 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1792.01 tests/s, 8960.03 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n\tif n == 1\n\t\t1\n\telsif n == 2\n\t\t1\n\telse\n\t\tfib(n-1) + fib(n-2)\n\tend\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpcbie80gy\nStarted\n.\nFinished in 0.000560125 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1785.32 tests/s, 8926.58 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 1,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  fib = [0, 1]\n  2.upto(n-1) do |n|\n    fib << fib[n-1] + fib[n-2]\n  end\n  fib[n]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmparc74dmu\nStarted\nF\n===============================================================================\nFailure: test_fib(TestHumanEval)\n/tmp/tmparc74dmu.rb:19:in `test_fib'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_fib\n     18:     candidate = method(:fib)\n  => 19:     assert_equal(55, candidate.call(10))\n     20:     assert_equal(1, candidate.call(1))\n     21:     assert_equal(21, candidate.call(8))\n     22:     assert_equal(89, candidate.call(11))\n<55> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006773027 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.64 tests/s, 147.64 assertions/s\n",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpw6mz4axz\nStarted\n.\nFinished in 0.000548147 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1824.33 tests/s, 9121.64 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 1,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 0 if n == 0\n  return 1 if n == 1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp27ywpe56.rb:12: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp27ywpe56.rb:21: syntax error, unexpected end-of-input, expecting `end'\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  return fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp42y73myj\nStarted\n.\nFinished in 0.000566419 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1765.48 tests/s, 8827.39 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n    # if n == 1\n    #     return 1\n    # elsif n == 2\n    #     return 1\n    # else\n    #     return fib(n-1) + fib(n-2)\n    # end\n    # Recursion is too slow\n    a = 0\n    b = 1\n    n.times do\n        temp = a\n        a = b\n        b = temp + b\n    end\n    return a\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpzlitspt5\nStarted\n.\nFinished in 0.000420971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2375.46 tests/s, 11877.30 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 1,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  num1 = 0\n  num2 = 1\n  fib = 0\n  for i in 0..n\n    fib = num1 + num2\n    num1 = num2\n    num2 = fib\n  end\n  fib\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpbnvrbvs1\nStarted\nF\n===============================================================================\nFailure: test_fib(TestHumanEval)\n/tmp/tmpbnvrbvs1.rb:23:in `test_fib'\n     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_fib\n     22:     candidate = method(:fib)\n  => 23:     assert_equal(55, candidate.call(10))\n     24:     assert_equal(1, candidate.call(1))\n     25:     assert_equal(21, candidate.call(8))\n     26:     assert_equal(89, candidate.call(11))\n<55> expected but was\n<144>\n===============================================================================\n\nFinished in 0.006348786 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n157.51 tests/s, 157.51 assertions/s\n",
      "timestamp": 1659823751
    },
    {
      "exit_code": 1,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n\tarr = [0,1]\n\tn.times do |i|\n\t\tarr[i+2] = arr[i] + arr[i+1]\n\tend\n\tputs arr[n]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpmp8dl473\nStarted\n55\nF\n===============================================================================\nFailure: test_fib(TestHumanEval)\n/tmp/tmpmp8dl473.rb:19:in `test_fib'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_fib\n     18:     candidate = method(:fib)\n  => 19:     assert_equal(55, candidate.call(10))\n     20:     assert_equal(1, candidate.call(1))\n     21:     assert_equal(21, candidate.call(8))\n     22:     assert_equal(89, candidate.call(11))\n<55> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006644015 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n150.51 tests/s, 150.51 assertions/s\n",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 0 if n == 0\n  return 1 if n == 1\n  return fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpf7g4aa2m\nStarted\n.\nFinished in 0.000734654 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1361.18 tests/s, 6805.92 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpjf3kodfk\nStarted\n.\nFinished in 0.000578558 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1728.44 tests/s, 8642.18 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n < 3\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpte6wvwqv\nStarted\n.\nFinished in 0.00054565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1832.68 tests/s, 9163.38 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 1,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 0 if n == 0\n  return 1 if n == 1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp27ywpe56.rb:12: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp27ywpe56.rb:21: syntax error, unexpected end-of-input, expecting `end'\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n < 2\n    return n\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpac_ee_hh\nStarted\n.\nFinished in 0.000605901 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1650.43 tests/s, 8252.17 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpk2611a8t\nStarted\n.\nFinished in 0.000737404 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1356.11 tests/s, 6780.54 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp9n545v5e\nStarted\n.\nFinished in 0.000572516 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1746.68 tests/s, 8733.38 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n\treturn n if n == 0 || n == 1\n\tfib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpp32iscgc\nStarted\n.\nFinished in 0.000655081 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1526.53 tests/s, 7632.64 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 1,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  fibs = [0, 1]\n  while fibs.length < n\n    fibs << fibs[-1] + fibs[-2]\n  end\n  fibs[n - 1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpn80cu55x\nStarted\nF\n===============================================================================\nFailure: test_fib(TestHumanEval)\n/tmp/tmpn80cu55x.rb:19:in `test_fib'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_fib\n     18:     candidate = method(:fib)\n  => 19:     assert_equal(55, candidate.call(10))\n     20:     assert_equal(1, candidate.call(1))\n     21:     assert_equal(21, candidate.call(8))\n     22:     assert_equal(89, candidate.call(11))\n<55> expected but was\n<34>\n===============================================================================\n\nFinished in 0.00662176 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n151.02 tests/s, 151.02 assertions/s\n",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpl15if_cj\nStarted\n.\nFinished in 0.000608361 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1643.76 tests/s, 8218.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpl15if_cj\nStarted\n.\nFinished in 0.000608361 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1643.76 tests/s, 8218.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n <= 1\n    return n\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp2dwl8ekj\nStarted\n.\nFinished in 0.000690615 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1447.98 tests/s, 7239.92 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n    if n <= 1\n        return n\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpeodsmr76\nStarted\n.\nFinished in 0.00078061 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1281.05 tests/s, 6405.25 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  return fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp2ov1ojpv\nStarted\n.\nFinished in 0.001356952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n736.95 tests/s, 3684.73 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 0 if n == 0\n  return 1 if n == 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp81w7_u2n\nStarted\n.\nFinished in 0.000652388 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1532.83 tests/s, 7664.15 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  n == 1 || n == 2 ? 1 : fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp35iyc1tg\nStarted\n.\nFinished in 0.000729164 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1371.43 tests/s, 6857.17 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  a, b = 0, 1\n  n.times do\n    a, b = b, a + b\n  end\n  a\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp4cvrtzly\nStarted\n.\nFinished in 0.000434616 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2300.88 tests/s, 11504.41 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  return fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpca79xf5s\nStarted\n.\nFinished in 0.000609031 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1641.95 tests/s, 8209.76 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpjf3kodfk\nStarted\n.\nFinished in 0.000578558 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1728.44 tests/s, 8642.18 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n    if n == 1\n        return 1\n    end\n    if n == 2\n        return 1\n    end\n    if n > 2\n        return fib(n-1) + fib(n-2)\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmphb2g86pp\nStarted\n.\nFinished in 0.000620438 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.76 tests/s, 8058.82 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  end\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp0jna5q7z\nStarted\n.\nFinished in 0.000629658 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1588.16 tests/s, 7940.82 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n\treturn n if n < 2\n\tfib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpty5ssrw0\nStarted\n.\nFinished in 0.000751557 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1330.57 tests/s, 6652.86 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n <= 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp_q4vx05j\nStarted\n.\nFinished in 0.000576835 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1733.60 tests/s, 8667.99 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n <= 1\n    return n\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp2dwl8ekj\nStarted\n.\nFinished in 0.000690615 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1447.98 tests/s, 7239.92 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n\treturn n if n <= 1\n\treturn fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpii7zmmcp\nStarted\n.\nFinished in 0.000614507 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1627.32 tests/s, 8136.60 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5pg8ll5o\nStarted\n.\nFinished in 0.000652882 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1531.67 tests/s, 7658.35 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp9n545v5e\nStarted\n.\nFinished in 0.000572516 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1746.68 tests/s, 8733.38 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpggulde2t\nStarted\n.\nFinished in 0.000738755 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1353.63 tests/s, 6768.14 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 0 if n == 0\n  return 1 if n == 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp81w7_u2n\nStarted\n.\nFinished in 0.000652388 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1532.83 tests/s, 7664.15 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpggulde2t\nStarted\n.\nFinished in 0.000738755 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1353.63 tests/s, 6768.14 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpl15if_cj\nStarted\n.\nFinished in 0.000608361 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1643.76 tests/s, 8218.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 1,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  prev_prev = 0\n  prev = 1\n  curr = 1\n  (n - 1).times do\n    prev_prev = prev\n    prev = curr\n    curr = prev_prev + prev\n  end\n  curr\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpuptz2g2d\nStarted\nF\n===============================================================================\nFailure: test_fib(TestHumanEval)\n/tmp/tmpuptz2g2d.rb:23:in `test_fib'\n     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_fib\n     22:     candidate = method(:fib)\n  => 23:     assert_equal(55, candidate.call(10))\n     24:     assert_equal(1, candidate.call(1))\n     25:     assert_equal(21, candidate.call(8))\n     26:     assert_equal(89, candidate.call(11))\n<55> expected but was\n<89>\n===============================================================================\n\nFinished in 0.006358642 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n157.27 tests/s, 157.27 assertions/s\n",
      "timestamp": 1659823751
    },
    {
      "exit_code": 1,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpfid7c53s\nStarted\nF\n===============================================================================\nFailure: test_fib(TestHumanEval)\n/tmp/tmpfid7c53s.rb:14:in `test_fib'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_fib\n     13:     candidate = method(:fib)\n  => 14:     assert_equal(55, candidate.call(10))\n     15:     assert_equal(1, candidate.call(1))\n     16:     assert_equal(21, candidate.call(8))\n     17:     assert_equal(89, candidate.call(11))\n<55> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006538558 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.94 tests/s, 152.94 assertions/s\n",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5r5un7ab\nStarted\n.\nFinished in 0.000597634 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1673.26 tests/s, 8366.32 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  n<=1 ? n : fib(n-1) + fib(n-2)\nend\nputs fib(1)\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "1\nLoaded suite /tmp/tmpnadvhyi6\nStarted\n.\nFinished in 0.000742689 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1346.46 tests/s, 6732.29 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 1,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp0ngh2v5x\nStarted\nF\n===============================================================================\nFailure: test_fib(TestHumanEval)\n/tmp/tmp0ngh2v5x.rb:15:in `test_fib'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_fib\n     14:     candidate = method(:fib)\n  => 15:     assert_equal(55, candidate.call(10))\n     16:     assert_equal(1, candidate.call(1))\n     17:     assert_equal(21, candidate.call(8))\n     18:     assert_equal(89, candidate.call(11))\n<55> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.009077759 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n110.16 tests/s, 110.16 assertions/s\n",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n <= 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp7re8a2pu\nStarted\n.\nFinished in 0.000546232 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1830.72 tests/s, 9153.62 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 0 if n == 0\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpfhnjoacs\nStarted\n.\nFinished in 0.00066507 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1503.60 tests/s, 7518.01 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpl15if_cj\nStarted\n.\nFinished in 0.000608361 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1643.76 tests/s, 8218.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5pg8ll5o\nStarted\n.\nFinished in 0.000652882 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1531.67 tests/s, 7658.35 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n    if n == 1\n        1\n    elsif n == 2\n        1\n    else\n        fib(n-1) + fib(n-2)\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp_viuhbgg\nStarted\n.\nFinished in 0.000560835 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1783.06 tests/s, 8915.28 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpl15if_cj\nStarted\n.\nFinished in 0.000608361 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1643.76 tests/s, 8218.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 1,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  def f(a, b, count)\n    return a if count == 1\n    return f(b, a + b, count - 1)\n  end\n  return f(0, 1, n)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp0ku7nzv4\nStarted\nF\n===============================================================================\nFailure: test_fib(TestHumanEval)\n/tmp/tmp0ku7nzv4.rb:19:in `test_fib'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_fib\n     18:     candidate = method(:fib)\n  => 19:     assert_equal(55, candidate.call(10))\n     20:     assert_equal(1, candidate.call(1))\n     21:     assert_equal(21, candidate.call(8))\n     22:     assert_equal(89, candidate.call(11))\n<55> expected but was\n<34>\n===============================================================================\n\nFinished in 0.006640087 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n150.60 tests/s, 150.60 assertions/s\n",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp9n545v5e\nStarted\n.\nFinished in 0.000572516 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1746.68 tests/s, 8733.38 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n    if n == 1\n        return 1\n    elsif n == 2\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpw4chqrr4\nStarted\n.\nFinished in 0.000591534 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1690.52 tests/s, 8452.60 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n\t# TODO\n\tfib = [0, 1]\n\t(n-1).times do\n\t\tfib << fib[-1] + fib[-2]\n\tend\n\treturn fib[n]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmphvldeq18\nStarted\n.\nFinished in 0.000436757 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2289.60 tests/s, 11448.01 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5r5un7ab\nStarted\n.\nFinished in 0.000597634 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1673.26 tests/s, 8366.32 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 1,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  fib_list = [0, 1]\n  return fib_list[n] if n <= 1\n  n.times do |idx|\n    fib_list << fib_list[idx] + fib_list[idx + 1] if idx >= 1\n  end\n  fib_list[n]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpmvvju07s\nStarted\nE\n===============================================================================\nError: test_fib(TestHumanEval): TypeError: nil can't be coerced into Integer\n/tmp/tmpmvvju07s.rb:12:in `+'\n/tmp/tmpmvvju07s.rb:12:in `block in fib'\n/tmp/tmpmvvju07s.rb:11:in `times'\n/tmp/tmpmvvju07s.rb:11:in `fib'\n/tmp/tmpmvvju07s.rb:20:in `call'\n/tmp/tmpmvvju07s.rb:20:in `test_fib'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_fib\n     19:     candidate = method(:fib)\n  => 20:     assert_equal(55, candidate.call(10))\n     21:     assert_equal(1, candidate.call(1))\n     22:     assert_equal(21, candidate.call(8))\n     23:     assert_equal(89, candidate.call(11))\n===============================================================================\n\nFinished in 0.001518556 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n658.52 tests/s, 0.00 assertions/s\n",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpab3gaag_\nStarted\n.\nFinished in 0.000575713 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1736.98 tests/s, 8684.88 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 0 if n == 0\n  return 1 if n == 1\n  return fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpf7g4aa2m\nStarted\n.\nFinished in 0.000734654 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1361.18 tests/s, 6805.92 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 1,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  raise Exception.new('n must be positive') if n < 1\n  return n if n < 3\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpvb7dwong\nStarted\nF\n===============================================================================\nFailure: test_fib(TestHumanEval)\n/tmp/tmpvb7dwong.rb:17:in `test_fib'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_fib\n     16:     candidate = method(:fib)\n  => 17:     assert_equal(55, candidate.call(10))\n     18:     assert_equal(1, candidate.call(1))\n     19:     assert_equal(21, candidate.call(8))\n     20:     assert_equal(89, candidate.call(11))\n<55> expected but was\n<89>\n===============================================================================\n\nFinished in 0.006477391 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n154.38 tests/s, 154.38 assertions/s\n",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n\ti, j = 0, 1\n\tn.times { i, j = j, i + j }\n\ti\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp3v016h5k\nStarted\n.\nFinished in 0.000624493 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1601.30 tests/s, 8006.49 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  arr = [0, 1]\n  (2..n).each do |num|\n    arr << arr[num - 1] + arr[num - 2]\n  end\n  arr[n]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp9t0vh17b\nStarted\n.\nFinished in 0.000628038 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1592.26 tests/s, 7961.30 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpab3gaag_\nStarted\n.\nFinished in 0.000575713 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1736.98 tests/s, 8684.88 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n < 0\n    raise \"Input is not valid.\"\n  elsif n <= 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpzdv2av3k\nStarted\n.\nFinished in 0.00058024 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1723.42 tests/s, 8617.12 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 1,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  f1 = 0\n  f2 = 1\n  return f1 if n == 1\n  return f2 if n == 2\n  (3..n).each do\n    f = f1 + f2\n    f1 = f2\n    f2 = f\n  end\n  f2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp9jpgupok\nStarted\nF\n===============================================================================\nFailure: test_fib(TestHumanEval)\n/tmp/tmp9jpgupok.rb:24:in `test_fib'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_fib\n     23:     candidate = method(:fib)\n  => 24:     assert_equal(55, candidate.call(10))\n     25:     assert_equal(1, candidate.call(1))\n     26:     assert_equal(21, candidate.call(8))\n     27:     assert_equal(89, candidate.call(11))\n<55> expected but was\n<34>\n===============================================================================\n\nFinished in 0.006347343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n157.55 tests/s, 157.55 assertions/s\n",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 0 if n == 0\n  return 1 if n == 1\n  num1 = 0\n  num2 = 1\n  n.times do\n    num1, num2 = num2, num1 + num2\n  end\n  num1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp3hh06yix\nStarted\n.\nFinished in 0.000481455 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2077.04 tests/s, 10385.19 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n <= 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp7re8a2pu\nStarted\n.\nFinished in 0.000546232 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1830.72 tests/s, 9153.62 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    return 1\n  end\n  return fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpwdtiild7\nStarted\n.\nFinished in 0.001022745 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n977.76 tests/s, 4888.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpab3gaag_\nStarted\n.\nFinished in 0.000575713 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1736.98 tests/s, 8684.88 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpw6mz4axz\nStarted\n.\nFinished in 0.000548147 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1824.33 tests/s, 9121.64 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    return 1\n  end\n  return fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpwdtiild7\nStarted\n.\nFinished in 0.001022745 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n977.76 tests/s, 4888.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 1,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 0 if n == 0\n  return 1 if n == 1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp27ywpe56.rb:12: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp27ywpe56.rb:21: syntax error, unexpected end-of-input, expecting `end'\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  return fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpca79xf5s\nStarted\n.\nFinished in 0.000609031 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1641.95 tests/s, 8209.76 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 1,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp030yc6ra\nStarted\nE\n===============================================================================\nError: test_fib(TestHumanEval): SystemStackError: stack level too deep\n/tmp/tmp030yc6ra.rb:9:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/tmp/tmp030yc6ra.rb:10:in `fib'\n/t",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5r5un7ab\nStarted\n.\nFinished in 0.000597634 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1673.26 tests/s, 8366.32 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpggulde2t\nStarted\n.\nFinished in 0.000738755 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1353.63 tests/s, 6768.14 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n\tif n == 1\n\t\treturn 1\n\telsif n == 2\n\t\treturn 1\n\telse\n\t\treturn fib(n-1) + fib(n-2)\n\tend\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp977r0r1n\nStarted\n.\nFinished in 0.000604779 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1653.50 tests/s, 8267.48 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  return fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp8u61yw5b\nStarted\n.\nFinished in 0.000630488 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1586.07 tests/s, 7930.37 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5r5un7ab\nStarted\n.\nFinished in 0.000597634 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1673.26 tests/s, 8366.32 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n    if n == 1 or n == 2\n        return 1\n    end\n    fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpr65ail4f\nStarted\n.\nFinished in 0.000686631 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1456.39 tests/s, 7281.93 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpggulde2t\nStarted\n.\nFinished in 0.000738755 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1353.63 tests/s, 6768.14 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 1,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  # Implement me\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpp5vc01h1\nStarted\nF\n===============================================================================\nFailure: test_fib(TestHumanEval)\n/tmp/tmpp5vc01h1.rb:15:in `test_fib'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_fib\n     14:     candidate = method(:fib)\n  => 15:     assert_equal(55, candidate.call(10))\n     16:     assert_equal(1, candidate.call(1))\n     17:     assert_equal(21, candidate.call(8))\n     18:     assert_equal(89, candidate.call(11))\n<55> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007419839 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n134.77 tests/s, 134.77 assertions/s\n",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  # TODO: Return the n-th Fibonacci number\n  if n == 0\n    0\n  elsif n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp0svaw2ra\nStarted\n.\nFinished in 0.000654294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1528.36 tests/s, 7641.82 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpl15if_cj\nStarted\n.\nFinished in 0.000608361 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1643.76 tests/s, 8218.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpab3gaag_\nStarted\n.\nFinished in 0.000575713 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1736.98 tests/s, 8684.88 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n\tn < 3 ? 1 : fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp1ufmf7q3\nStarted\n.\nFinished in 0.000538322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1857.62 tests/s, 9288.12 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5pg8ll5o\nStarted\n.\nFinished in 0.000652882 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1531.67 tests/s, 7658.35 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 0 if n <= 0\n  return 1 if n == 1\n  return fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp0mb00hca\nStarted\n.\nFinished in 0.000669171 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1494.39 tests/s, 7471.93 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpw6mz4axz\nStarted\n.\nFinished in 0.000548147 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1824.33 tests/s, 9121.64 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  (n <= 2) ? 1 : fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpocrann9t\nStarted\n.\nFinished in 0.000805217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1241.90 tests/s, 6209.51 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n\tif n == 1\n\t\treturn 1\n\telsif n == 2\n\t\treturn 1\n\telse\n\t\treturn fib(n-1) + fib(n-2)\n\tend\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp977r0r1n\nStarted\n.\nFinished in 0.000604779 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1653.50 tests/s, 8267.48 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5r5un7ab\nStarted\n.\nFinished in 0.000597634 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1673.26 tests/s, 8366.32 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpl15if_cj\nStarted\n.\nFinished in 0.000608361 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1643.76 tests/s, 8218.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n    if n == 1 || n == 2\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpgcoco_uw\nStarted\n.\nFinished in 0.000576611 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1734.27 tests/s, 8671.36 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 0 if n == 0\n  return 1 if n == 1\n  return fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpf7g4aa2m\nStarted\n.\nFinished in 0.000734654 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1361.18 tests/s, 6805.92 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 0 if n == 0\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpfhnjoacs\nStarted\n.\nFinished in 0.00066507 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1503.60 tests/s, 7518.01 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpl15if_cj\nStarted\n.\nFinished in 0.000608361 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1643.76 tests/s, 8218.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    return 1\n  end\n  return fib(n-1) + fib(n-2)\nend\nputs fib(10)\nputs fib(1)\nputs fib(8)\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "55\n1\n21\nLoaded suite /tmp/tmpnyht1dga\nStarted\n.\nFinished in 0.000805556 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1241.38 tests/s, 6206.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp9n545v5e\nStarted\n.\nFinished in 0.000572516 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1746.68 tests/s, 8733.38 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n < 2\n    return n\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpac_ee_hh\nStarted\n.\nFinished in 0.000605901 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1650.43 tests/s, 8252.17 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5r5un7ab\nStarted\n.\nFinished in 0.000597634 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1673.26 tests/s, 8366.32 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nputs \"fib(10) = #{fib(10)}\"\nputs \"fib(1) = #{fib(1)}\"\nputs \"fib(8) = #{fib(8)}\"\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "fib(10) = 55\nfib(1) = 1\nfib(8) = 21\nLoaded suite /tmp/tmpwkuurxar\nStarted\n.\nFinished in 0.000675558 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1480.26 tests/s, 7401.29 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  return fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpsfkirls2\nStarted\n.\nFinished in 0.000544194 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1837.58 tests/s, 9187.90 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n < 2\n    n\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpa8ze0w3y\nStarted\n.\nFinished in 0.000799088 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1251.43 tests/s, 6257.13 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n\tif n==1 || n==2\n\t\treturn 1\n\telse\n\t\treturn fib(n-1)+fib(n-2)\n\tend\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp0ijz6jc3\nStarted\n.\nFinished in 0.000744945 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1342.38 tests/s, 6711.90 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  raise TypeError if n.class != Fixnum\n  raise ArgumentError unless n >= 0\n  if n <= 1\n    return n\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpg227fdcm\nStarted\n.\nFinished in 0.000796781 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1255.05 tests/s, 6275.25 assertions/s\n",
      "stdout": "/tmp/tmpg227fdcm.rb:9: warning: constant ::Fixnum is deprecated\n",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpl15if_cj\nStarted\n.\nFinished in 0.000608361 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1643.76 tests/s, 8218.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n    if n==1\n        return 1\n    end\n    if n==2\n        return 1\n    end\n    if n>2\n        return fib(n-1)+fib(n-2)\n    end\nend\nputs \"nth fibonacci\"\nputs fib(10)\nputs fib(1)\nputs fib(8)\nputs \"==============================\"\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "nth fibonacci\n55\n1\n21\n==============================\nLoaded suite /tmp/tmpmg4q8oa9\nStarted\n.\nFinished in 0.000729771 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1370.29 tests/s, 6851.46 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpw6mz4axz\nStarted\n.\nFinished in 0.000548147 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1824.33 tests/s, 9121.64 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpw6mz4axz\nStarted\n.\nFinished in 0.000548147 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1824.33 tests/s, 9121.64 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  n <= 2 ? 1 : fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpg8_e6nip\nStarted\n.\nFinished in 0.000770073 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1298.58 tests/s, 6492.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n <= 1\n    n\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpsxp9jhsr\nStarted\n.\nFinished in 0.000600756 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1664.57 tests/s, 8322.85 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpl15if_cj\nStarted\n.\nFinished in 0.000608361 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1643.76 tests/s, 8218.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5r5un7ab\nStarted\n.\nFinished in 0.000597634 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1673.26 tests/s, 8366.32 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n < 3\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpftemba8e\nStarted\n.\nFinished in 0.000780079 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1281.92 tests/s, 6409.61 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 0 if n == 0\n  return 1 if n == 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp81w7_u2n\nStarted\n.\nFinished in 0.000652388 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1532.83 tests/s, 7664.15 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5pg8ll5o\nStarted\n.\nFinished in 0.000652882 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1531.67 tests/s, 7658.35 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n\tn < 2 ? n : fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpj4qfomdq\nStarted\n.\nFinished in 0.000604308 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1654.79 tests/s, 8273.93 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpl15if_cj\nStarted\n.\nFinished in 0.000608361 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1643.76 tests/s, 8218.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpm2732a_s\nStarted\n.\nFinished in 0.000616706 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1621.52 tests/s, 8107.59 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n <= 2\n    return 1\n  else\n    # fib(n-1) + fib(n-2)\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp_7gxysqo\nStarted\n.\nFinished in 0.000533867 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1873.13 tests/s, 9365.63 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n\tarr = [0,1]\n\t(2..n).each do |num|\n\t\tarr[num] = arr[num-1] + arr[num-2]\n\tend\n\tarr[n]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpeufl_nou\nStarted\n.\nFinished in 0.000565398 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1768.67 tests/s, 8843.33 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5pg8ll5o\nStarted\n.\nFinished in 0.000652882 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1531.67 tests/s, 7658.35 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  return fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp42y73myj\nStarted\n.\nFinished in 0.000566419 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1765.48 tests/s, 8827.39 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpl15if_cj\nStarted\n.\nFinished in 0.000608361 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1643.76 tests/s, 8218.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 1,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  # Your code here.\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpkm5n_2jb\nStarted\nF\n===============================================================================\nFailure: test_fib(TestHumanEval)\n/tmp/tmpkm5n_2jb.rb:15:in `test_fib'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_fib\n     14:     candidate = method(:fib)\n  => 15:     assert_equal(55, candidate.call(10))\n     16:     assert_equal(1, candidate.call(1))\n     17:     assert_equal(21, candidate.call(8))\n     18:     assert_equal(89, candidate.call(11))\n<55> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006269635 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n159.50 tests/s, 159.50 assertions/s\n",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpggulde2t\nStarted\n.\nFinished in 0.000738755 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1353.63 tests/s, 6768.14 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpw6mz4axz\nStarted\n.\nFinished in 0.000548147 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1824.33 tests/s, 9121.64 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpl15if_cj\nStarted\n.\nFinished in 0.000608361 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1643.76 tests/s, 8218.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n\tif n <= 1\n\t\treturn n\n\telse\n\t\treturn fib(n-1) + fib(n-2)\n\tend\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp7zofks3g\nStarted\n.\nFinished in 0.000779153 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1283.44 tests/s, 6417.22 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5r5un7ab\nStarted\n.\nFinished in 0.000597634 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1673.26 tests/s, 8366.32 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 1,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  raise ArgumentError, \"n must be a positive integer\" unless n.is_a?(Integer) && n > 0\n  return 1 if n == 1\n  return 2 if n == 2\n  return fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpmi4n50ah\nStarted\nF\n===============================================================================\nFailure: test_fib(TestHumanEval)\n/tmp/tmpmi4n50ah.rb:18:in `test_fib'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_fib\n     17:     candidate = method(:fib)\n  => 18:     assert_equal(55, candidate.call(10))\n     19:     assert_equal(1, candidate.call(1))\n     20:     assert_equal(21, candidate.call(8))\n     21:     assert_equal(89, candidate.call(11))\n<55> expected but was\n<89>\n===============================================================================\n\nFinished in 0.007801193 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.19 tests/s, 128.19 assertions/s\n",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n\tif n < 2\n\t\treturn n\n\telse\n\t\treturn fib(n-1) + fib(n-2)\n\tend\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp1c8657vo\nStarted\n.\nFinished in 0.000585289 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1708.56 tests/s, 8542.79 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5pg8ll5o\nStarted\n.\nFinished in 0.000652882 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1531.67 tests/s, 7658.35 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpw6mz4axz\nStarted\n.\nFinished in 0.000548147 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1824.33 tests/s, 9121.64 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n\t# TODO\n\tif n == 1\n\t\treturn 1\n\telsif n == 2\n\t\treturn 1\n\telse\n\t\treturn fib(n-1) + fib(n-2)\n\tend\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpcan5n8al\nStarted\n.\nFinished in 0.000558025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1792.03 tests/s, 8960.17 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp9n545v5e\nStarted\n.\nFinished in 0.000572516 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1746.68 tests/s, 8733.38 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpw6mz4axz\nStarted\n.\nFinished in 0.000548147 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1824.33 tests/s, 9121.64 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n < 2\n    return n\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpf5fc5b45\nStarted\n.\nFinished in 0.00069753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1433.63 tests/s, 7168.15 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823752
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  end\n  n1 = 1\n  n2 = 1\n  (n-2).times do\n    result = n1 + n2\n    n1 = n2\n    n2 = result\n  end\n  n2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpazj5wdt7\nStarted\n.\nFinished in 0.000496061 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2015.88 tests/s, 10079.41 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n    if n == 1\n        return 1\n    end\n    if n == 2\n        return 1\n    end\n    fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpo9zgw1nw\nStarted\n.\nFinished in 0.000546148 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1831.01 tests/s, 9155.03 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 1,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 0 if n == 0\n  return 1 if n == 1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp27ywpe56.rb:12: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp27ywpe56.rb:21: syntax error, unexpected end-of-input, expecting `end'\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n    if n == 1\n        1\n    elsif n == 2\n        1\n    else\n        fib(n-1) + fib(n-2)\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp_viuhbgg\nStarted\n.\nFinished in 0.000560835 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1783.06 tests/s, 8915.28 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 0 if n == 0\n  return 1 if n == 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp81w7_u2n\nStarted\n.\nFinished in 0.000652388 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1532.83 tests/s, 7664.15 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  case n\n  when 0\n    0\n  when 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp3yolreht\nStarted\n.\nFinished in 0.000664144 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1505.70 tests/s, 7528.49 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823752
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpl15if_cj\nStarted\n.\nFinished in 0.000608361 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1643.76 tests/s, 8218.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 1,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 0 if n == 0\n  return 1 if n == 1\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp27ywpe56.rb:12: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp27ywpe56.rb:21: syntax error, unexpected end-of-input, expecting `end'\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpl15if_cj\nStarted\n.\nFinished in 0.000608361 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1643.76 tests/s, 8218.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpab3gaag_\nStarted\n.\nFinished in 0.000575713 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1736.98 tests/s, 8684.88 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n    return n if n < 2\n    fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp8e92c13l\nStarted\n.\nFinished in 0.000581163 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1720.69 tests/s, 8603.44 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823752
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpab3gaag_\nStarted\n.\nFinished in 0.000575713 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1736.98 tests/s, 8684.88 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpl15if_cj\nStarted\n.\nFinished in 0.000608361 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1643.76 tests/s, 8218.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 1,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  raise StandardError if n.class != Fixnum\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7esv1dt6.rb:11: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp7esv1dt6.rb:20: syntax error, unexpected end-of-input, expecting `end'\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n    n1 = 1\n    n2 = 1\n    sum = 0\n    i = 3\n    while i <= n\n      sum = n1 + n2\n      n1 = n2\n      n2 = sum\n      i += 1\n    end\n    sum\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmppa4xvlvy\nStarted\n.\nFinished in 0.000470503 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2125.38 tests/s, 10626.92 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823752
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpab3gaag_\nStarted\n.\nFinished in 0.000575713 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1736.98 tests/s, 8684.88 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823751
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n    first, last = [1, 1]\n    3.upto(n) do\n        first, last = [last, first + last]\n    end\n    last\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpczrevncs\nStarted\n.\nFinished in 0.000360984 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2770.21 tests/s, 13851.03 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823752
    },
    {
      "exit_code": 0,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpjf3kodfk\nStarted\n.\nFinished in 0.000578558 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1728.44 tests/s, 8642.18 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823750
    },
    {
      "exit_code": 1,
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpfid7c53s\nStarted\nF\n===============================================================================\nFailure: test_fib(TestHumanEval)\n/tmp/tmpfid7c53s.rb:14:in `test_fib'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_fib\n     13:     candidate = method(:fib)\n  => 14:     assert_equal(55, candidate.call(10))\n     15:     assert_equal(1, candidate.call(1))\n     16:     assert_equal(21, candidate.call(8))\n     17:     assert_equal(89, candidate.call(11))\n<55> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006538558 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.94 tests/s, 152.94 assertions/s\n",
      "timestamp": 1659823751
    }
  ]
}