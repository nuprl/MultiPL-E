name: HumanEval_98_count_upper
language: rb
prompt: "# Given a string s, count the number of uppercase vowels in even indices.\n\
  # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
  \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
  \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
  ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
  dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
  U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
  EEEE\"))\n  end\nend\n"
completions: ["  up = s.count \"A,E,I,O,U\"\n  (up.even?) ? up : up - 1\nend", " \
    \ counter = 0\n  s.split(\"\").each_with_index do |char, index|\n    if index.even?\
    \ && char =~ /[AEIOU]/\n      counter += 1\n    end\n  end\n  counter\nend", " \
    \ vowels = \"AEIOU\"\n  i = 0\n  count = 0\n  while i < s.length\n    if vowels.include?(s[i])\
    \ && i.even?\n      count += 1\n    end\n    i += 1\n  end\n  return count\nend",
  "  count = 0\n  s.split('').each_with_index do |letter, index|\n    if index.even?\
    \ && letter =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend", " \
    \ count = 0\n  vowels = \"AEIOU\"\n  s.each_char.with_index do |v, i|\n    if\
    \ vowels.include?(v) && i.even?\n      count += 1\n    end\n  end\n  count\nend",
  "  #\nend", "  count = 0\n  s.each_char.with_index do |c, i|\n    count += 1 if\
    \ i.even? && (\"AEIOU\".include? c)\n  end\n  count\nend", "\tcount = 0\n\ts.split(\"\
    \").each_with_index do |letter, index|\n\t\tcount += 1 if letter.upcase == letter\
    \ && index.even?\n\tend\n\tcount\nend", "  vowels = %w(A E I O U)\n  count = 0\n\
    \  (0...s.length).step(2) do |i|\n    count += 1 if vowels.include?(s[i])\n  end\n\
    \  count\nend", "\ts.split('').map.with_index do |char, index|\n\t\tif index.even?\
    \ && char =~ /[AEIOU]/\n\t\t\t1\n\t\telse\n\t\t\t0\n\t\tend\n\tend.reduce(:+)\n\
    end", "    count = 0\n    s.each_char.with_index do |char, index|\n        if\
    \ char =~ /[AEIOU]/ && index.even?\n            count += 1\n        end\n    end\n\
    \    return count\nend", "  vowels = 'aeiou'\n  count = 0\n  s.length.times do\
    \ |i|\n    count += 1 if i.even? && vowels.include?(s[i].downcase)\n  end\n  count\n\
    end", "  vowels = ['A', 'E', 'I', 'O', 'U']\n  count = 0\n  (0...s.length).each\
    \ do |i|\n    if vowels.include?(s[i])\n      count += 1 if i % 2 == 0\n    end\n\
    \  end\n  count\nend", "  count = 0\n  (0...s.length).step(2) do |index|\n   \
    \ if s[index] =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend", " \
    \ vowels = \"AEIOU\"\n  count = 0\n  chars = s.chars\n  chars.each_with_index\
    \ do |char, index|\n    if index.even? && vowels.include?(char)\n      count +=\
    \ 1\n    end\n  end\n  count\nend", "\tvowels = \"AEIOU\"\n\t# count is a local\
    \ variable that is assigned to 0.\n\tcount = 0\n\t# i is a local variable that\
    \ is assigned to 0.\n\ti = 0\n\t# Get the length of the string and assign to length.\n\
    \tlength = s.length\n\twhile i < length\n\t\t# If the character in the string\
    \ at index i is a vowel, AND\n\t\t# if i is an even number, increment count.\n\
    \t\tif vowels.include?(s[i]) && i % 2 == 0\n\t\t\tcount += 1\n\t\tend\n\t\t# Increment\
    \ i.\n\t\ti += 1\n\tend\n\treturn count\nend", "  return 0 if s.length <= 1\n\
    \  (s.length-1).times.select { |i| s[i].match(/[aeiou]/i) && s[i+1].match(/[AEIOU]/)\
    \ }.length\nend", "  s.split('').map.with_index { |letter, index| letter if index.even?\
    \ && letter == letter.upcase }.compact.count\nend", "  ##########################\n\
    \  # your code goes here\n  ##########################\nend", "  count = 0\n \
    \ s.each_char.with_index do |c, i|\n    if i.even? && c =~ /[AEIOU]/\n      count\
    \ += 1\n    end\n  end\n  count\nend", "  total = 0\n  s.split('').each_with_index\
    \ do |char,index|\n    if (index % 2 == 0) && char =~ /[AEIOU]/i\n      total\
    \ += 1\n    end\n  end\n  total\nend", "\tcount = 0\n\ts.each_char.with_index\
    \ do |c, i|\n\t\tcount += 1 if c.ord > 64 && c.ord < 91 && i % 2 == 0\n\tend\n\
    \tcount\nend", "  count = 0\n  vowels = 'aeiou'\n  s.chars.each_with_index do\
    \ |ch, i|\n    count += 1 if vowels.include?(ch.downcase) && i.even?\n  end\n\
    \  count\nend", "\nend", "  upper_vowels = 0\n  index = 0\n  vowels = %w[A E I\
    \ O U]\n  while index < s.length\n    upper_vowels += 1 if vowels.include?(s[index])\
    \ && index.even?\n    index += 1\n  end\n  upper_vowels\nend", "  s.chars.select.with_index{|x,i|\
    \ x =~ /[AEIOU]/ && i.even?}.count\nend", "    count = 0\n    s.each_char.with_index\
    \ do |char, i|\n        if char.upcase == char && i.even?\n            count +=\
    \ 1\n        end\n    end\n    return count\nend", "  count = 0\n  s.upcase.chars.each_with_index\
    \ do |c, i|\n    if i % 2 == 0\n      if c == 'A' || c == 'E' || c == 'I' || c\
    \ == 'O' || c == 'U'\n        count += 1\n      end\n    end\n  end\n  count\n\
    end", "\tcount = 0\n\ts.each_char.with_index do |x, i|\n\t\tif x =~ /[AEIOU]/\
    \ && i.even?\n\t\t\tcount += 1\n\t\tend\n\tend\n\treturn count\nend", "  s.scan(/[AEIOU]/).size\n\
    end", "  count = 0\n  s.split('').each_with_index do |ch, i|\n    count += 1 if\
    \ i.even? && ch =~ /[AEIOU]/\n  end\n  count\nend", "  uppers = 0\n  s.split('').each_with_index\
    \ do |c, i|\n    if i.even? && ('A'..'Z').include?(c)\n      uppers += 1\n   \
    \ end\n  end\n  uppers\nend", "    # Create a counter and set it to 0\n    counter\
    \ = 0\n    # Create a for loop that checks every character in the string (use\
    \ .chars method)\n    s.chars.each_with_index do |character, index|\n        #\
    \ If the character is a vowel and the index is even, add 1 to the counter\n  \
    \      if character.upcase == \"A\" || character.upcase == \"E\" || character.upcase\
    \ == \"I\" || character.upcase == \"O\" || character.upcase == \"U\"\n       \
    \     if index % 2 == 0\n                counter += 1\n            end\n     \
    \   end\n    end\n    # Return the counter variable\n    return counter\nend",
  "  vowel = \"aeiou\"\n  count = 0\n  #split the string into an array, loop through\
    \ the array, and if a letter is a vowel and it is an even number index, increment\
    \ count\n  a = s.split(\"\")\n  a.each do |x|\n    if vowel.include?(x.downcase)\
    \ && a.index(x).even?\n      count += 1\n    end\n  end\n  return count\nend",
  "  count = 0\n  s.split('').each_with_index do |l, i|\n    if i.even? && (l == 'A'\
    \ || l == 'E' || l == 'I' || l == 'O' || l == 'U')\n      count += 1\n    end\n\
    \  end\n  count\nend", "  count = 0\n  (0...s.length).each do |i|\n    if i.even?\n\
    \      if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] ==\
    \ 'U'\n        count += 1\n      end\n    end\n  end\n  count\nend", "  vowels\
    \ = \"AEIOU\"\n  even_indices = s.split(\"\").select.with_index { |x, i| i.even?\
    \ }\n  even_indices.count { |x| vowels.include?(x) }\nend", "  vowel = ['A', 'E',\
    \ 'I', 'O', 'U']\n  total = 0\n  (0...s.length).each do |i|\n    if vowel.include?(s[i])\
    \ && i.even?\n      total += 1\n    end\n  end\n  total\nend", "  count = 0\n\
    \  s.each_char.with_index do |char, i|\n    count += 1 if vowels.include?(char)\
    \ && i.even?\n  end\n  count\nend", "  upper_count = 0\n  if s.length > 0\n  \
    \  if s.length.even?\n      (0..s.length-1).step(2) do |v|\n        if 'AEIOU'.include?(s[v])\n\
    \          upper_count += 1\n        end\n      end\n    else\n      (1..s.length-1).step(2)\
    \ do |v|\n        if 'AEIOU'.include?(s[v])\n          upper_count += 1\n    \
    \    end\n      end\n    end\n  end\n  upper_count\nend", end, "  count = 0\n\
    \  vowels = 'aeiouAEIOU'\n  s.each_char.with_index do |v,i|\n    if vowels.include?(v)\
    \ && i % 2 == 0\n      count += 1\n    end\n  end\n  count\nend", "    count =\
    \ 0\n    s.split(\"\").each_with_index do |letter, index|\n        if letter ==\
    \ letter.upcase && index % 2 == 0 && is_vowel(letter)\n            count += 1\n\
    \        end\n    end\n    return count\nend", "  counter = 0\n  i = 0\n  while\
    \ i < s.length\n    if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O'\
    \ || s[i] == 'U'\n      counter += 1\n    end\n    i += 2\n  end\n  return counter\n\
    end", "  s.chars.select.with_index { |char, idx| (idx % 2).zero? && char =~ /[AEIOU]/\
    \ }.size\nend", "  count = 0\n  (s.length - 1).downto(0) do |i|\n    if i.even?\
    \ && s[i] =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend", "\treturn\
    \ 0 if s.empty?\n\t\n\ts.split('').map.with_index { |c, i| (c =~ /[aeiou]/i &&\
    \ i.even?) ? 1 : 0 }.inject(:+)\nend", "  n = 0\n  s.each_char.with_index do |c,\
    \ i|\n    n += 1 if i.even? && c.upcase == c\n  end\n  n\nend", "  vowels = ['A',\
    \ 'E', 'I', 'O', 'U']\n  count = 0\n  s.each_char.with_index do |char, index|\n\
    \    if index.even? && vowels.include?(char)\n      count += 1\n    end\n  end\n\
    \  count\nend", "  new_s = s.gsub(/[AEIOU]/, '')\n  s.size - new_s.size\nend",
  "  s.split('').map.with_index { |el, i| i.even? && el =~ /[AEIOU]/ ? 1 : 0 }.reduce(:+)\n\
    end", "  s.count(\"AEIOU\")\nend", "  # your code here\nend", "  # Your code here.\n\
    \  count = 0\n  new_s = s.split('')\n  new_s.each_with_index do |x, i|\n    if\
    \ (x == 'A' or x == 'E' or x == 'I' or x == 'O' or x == 'U') and i % 2 == 0\n\
    \      count += 1\n    end\n  end\n  count\nend", "\t\tupper_count = 0\n\t\tupper_vowels\
    \ = \"AEIOU\"\n\t\ts.each_char.with_index do |char, index|\n\t\t\tif (index %\
    \ 2 == 0) && (upper_vowels.include?(char))\n\t\t\t\tupper_count += 1\n\t\t\tend\n\
    \t\tend\n\t\treturn upper_count\nend", "  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if index.even? && char =~ /[AEIOU]/\n  end\n\
    \  count\nend", "  count = 0\n  for i in 0..s.length\n    if s[i] =~ /[AEIOU]/\
    \ && i % 2 == 0\n      count += 1\n    end\n  end\n  return count\nend", "\ts.chars.keep_if\
    \ {|x| x =~ /[AEIOU]/}.keep_if {|x| s.index(x).even?}.length\nend", "  vowels\
    \ = ['A', 'E', 'I', 'O', 'U']\n  counter = 0\n  i = 0\n  while i < s.length\n\
    \    if vowels.include?(s[i]) && i % 2 == 0\n      counter += 1\n    end\n   \
    \ i += 1\n  end\n  counter\nend", "  if s == ''\n    return 0\n  end\n  count\
    \ = 0\n  (0..s.length-1).each do |i|\n    if s[i] =~ /[AEIOU]/ && i.even?\n  \
    \    count += 1\n    end\n  end\n  return count\nend", "  # Your code here\nend",
  "  s.split('').select.with_index{|x, i| i.even? && x == x.upcase}.count\nend", " \
    \ # Your code here\nend", "  # Your code here\nend", "\treturn s.delete(\"^AEIOU\"\
    ).length\nend", "  string = s.split('')\n  count = 0\n  string.each_with_index\
    \ do |v, i|\n    if i.even? && v == v.upcase\n      count += 1\n    end\n  end\n\
    \  count\nend", "  count = 0\n  s.chars.each_with_index do |char, index|\n   \
    \ next if index.odd?\n    count += 1 if char =~ /[AEIOU]/\n  end\n  count\nend",
  "  vowel_ct = 0\n  vowels = ['A', 'E', 'I', 'O', 'U']\n  str = s.upcase.split('')\n\
    \  str.each_with_index do |char, index|\n    if index.even? && vowels.include?(char)\n\
    \      vowel_ct += 1\n    end\n  end\n  vowel_ct\nend", "    count = 0\n    s.each_char.with_index\
    \ do |char, i|\n        count += 1 if char.count('AEIOU') > 0 && i.even?\n   \
    \ end\n    count\nend", "  total = 0\n  s.each_char.with_index do |char, index|\n\
    \    total += 1 if /[AEIOU]/.match(char) && index.even?\n  end\n  total\nend",
  "\ts.count(\"AEIOU\", 2, s.length-1)\nend", "\ti = 0\n\tcounter = 0\n\twhile i <\
    \ s.length do\n\t\tif s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O'\
    \ || s[i] == 'U'\n\t\t\tif i % 2 == 0\n\t\t\t\tcounter += 1\n\t\t\tend\n\t\tend\n\
    \t\ti += 1\n\tend\n\treturn counter\nend", "  count = 0\n  s.each_char.with_index\
    \ do |x,y|\n    if y % 2 == 0\n      if x == \"A\" || x == \"E\" || x == \"I\"\
    \ || x == \"O\" || x == \"U\"\n        count += 1\n      end\n    end\n  end\n\
    \  count\nend", "  s.split('').map.with_index { |char, index| char if index.even?\
    \ && ['A', 'E', 'I', 'O', 'U'].include?(char) }.compact.length\nend", end, " \
    \ count = 0\n  for i in 0..s.length-1\n    if s[i] =~ /[AEIOU]/ && i%2 == 0\n\
    \      count += 1\n    end\n  end\n  return count\nend\nputs \"count_upper(\\\"\
    aBCdEf\\\") returns #{count_upper(\"aBCdEf\")}\"\nputs \"count_upper(\\\"abcdefg\\\
    \") returns #{count_upper(\"abcdefg\")}\"\nputs \"count_upper(\\\"dBBE\\\") returns\
    \ #{count_upper(\"dBBE\")}\"", "  count = 0\n  s.chars.each_with_index do |c,\
    \ i|\n    count += 1 if c =~ /[AEIOU]/ && i.even?\n  end\n  count\nend", "  i\
    \ = 0\n  count = 0\n  vowels = [\"A\", \"E\", \"I\", \"O\", \"U\"]\n  while i\
    \ < s.length\n    if vowels.include?(s[i]) && i.even?\n      count += 1\n    end\n\
    \    i += 1\n  end\n  return count\nend", "  # Check each character in the string\
    \ to see if it is an uppercase vowel\n  # If so, increment a count\n  count =\
    \ 0\n  s.split('').each_with_index do |ch, idx|\n    if idx.even? && ch =~ /[AEIOU]/\n\
    \      count += 1\n    end\n  end\n  return count\nend", "  vowels = s.split('').each_with_index.select{|v,i|\
    \ v =~ /[aeiou]/i}.select{|v,i| i.even?}\n  vowels.count{|v,i| v =~ /[AEIOU]/}\n\
    end", "  count = 0\n  s.each_char.with_index do |char, i|\n    count += 1 if (char\
    \ =~ /[AEIOU]/) && (i % 2 == 0)\n  end\n  count\nend", "  s.gsub(/[^A-Z]/, '').length\n\
    end", "  s.split('').map.with_index { |char, index| char if index.even? && char.match(/[aeiou]/i)\
    \ }.compact.count\nend", "  count = 0\n  s.each_char.with_index do |char, index|\n\
    \    if ['A', 'E', 'I', 'O', 'U'].include?(char) && index.even?\n      count +=\
    \ 1\n    end\n  end\n  count\nend", "    vowels = 'aeiouAEIOU'\n    count = 0\n\
    \    s.each_char.with_index do |char, index|\n        if index.even? && vowels.include?(char)\n\
    \            count += 1\n        end\n    end\n    return count\nend", "  count\
    \ = 0\n  i = 0\n  while i < s.length\n    count += 1 if (s[i] =~ /[AEIOU]/) ==\
    \ 0 && i.even?\n    i += 1\n  end\n  count\nend", "  count = 0\n  s.split('').each_with_index\
    \ do |l,i|\n    if ['A','E','I','O','U'].include?(l) && i % 2 == 0\n      count\
    \ += 1\n    end\n  end\n  count\nend", "  # Your code here\nend", "  count = 0\n\
    \  for i in (0..s.length)\n    if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' ||\
    \ s[i] == 'O' || s[i] == 'U'\n      if i % 2 == 0\n        count += 1\n      end\n\
    \    end\n  end\n  count\nend", "  s.chars.each_with_index.count { |c,i| c =~\
    \ /[AEIOU]/ && i.even? }\nend", "  count = 0\n  s.each_char.with_index do |char,\
    \ i|\n    if i.even?\n      if ['A', 'E', 'I', 'O', 'U'].include?(char)\n    \
    \    count += 1\n      end\n    end\n  end\n  count\nend", "\tcount = 0\n\ts.split(\"\
    \").each_with_index do |c, i|\n\t\tcount += 1 if i % 2 == 0 && c =~ /[AEIOU]/\n\
    \tend\n\tcount\nend", "  count = 0\n  s.each_char.with_index do |i, j|\n    if\
    \ i.count(\"AEIOU\") == 1 && j.even?\n      count += 1\n    end\n  end\n  count\n\
    end", "  count = 0\n  s.each_char.with_index { |c, i| count += 1 if c =~ /[AEIOU]/\
    \ && i.even? }\n  count\nend", "  #your code here\n  i = 0\n  count = 0\n  while\
    \ i < s.length\n    if s[i] == s[i].upcase && s[i] =~ /[aeiou]/i\n      count\
    \ += 1\n    end\n    i += 2\n  end\n  count\nend", "  count = 0\n  s.each_char.with_index\
    \ do |ch, index|\n    if 'AEIOU'.include?(ch) && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend", "  vowels = 'aeiouAEIOU'\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i.even? && vowels.include?(char)\n      count += 1\n  \
    \  end\n  end\n  count\nend", "  puts s.scan(/[AEIOU]/).size\nend", "\ti = 0\n\
    \ttotal = 0\n\twhile i < s.length\n\t\tif i.even?\n\t\t\tif s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'\n\t\t\t\ttotal += 1\n\t\t\
    \tend\n\t\tend\n\t\ti += 1\n\tend\n\ttotal\nend", "\tvowels = {\n\t\t'a' => 0,\n\
    \t\t'e' => 0,\n\t\t'i' => 0,\n\t\t'o' => 0,\n\t\t'u' => 0\n\t}\n\tvowels_total\
    \ = 0\n\ts.split('').each_with_index do |letter, index|\n\t\tif index % 2 == 0\n\
    \t\t\tif vowels.has_key?(letter.downcase)\n\t\t\t\tvowels_total += 1 if letter\
    \ == letter.upcase\n\t\t\tend\n\t\tend\n\tend\n\treturn vowels_total\nend", " \
    \ vowels = ['A', 'E', 'I', 'O', 'U']\n  counter = 0\n  s.chars.each_with_index\
    \ do |char, i|\n    if i.even? && vowels.include?(char)\n      counter += 1\n\
    \    end\n  end\n  counter\nend", "  vowels = [\"A\", \"E\", \"I\", \"O\", \"\
    U\"]\n  count = 0\n  s.split(\"\").each_with_index do |letter, idx|\n    if idx\
    \ % 2 == 0\n      count += 1 if vowels.include?(letter)\n    end\n  end\n  count\n\
    end", "  count = 0\n  s.chars.each_with_index do |c, i|\n    if i % 2 == 0 &&\
    \ c =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend", "  s.chars.each_index.select\
    \ { |i| s[i] =~ /[AEIOU]/ }.count\nend", "  # return the number of uppercase vowels\
    \ in s\n  # that are in even indices", "\ttot_vowels = 0\n\ti = 0\n\twhile i <\
    \ s.length\n\t\tif i % 2 == 0\n\t\t\ttot_vowels += 1 if s[i] == \"A\" || s[i]\
    \ == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"\n\t\tend\n\t\ti\
    \ += 1\n\tend\n\ttot_vowels\nend", "  count = 0\n  i = 0\n  while i < s.length\n\
    \    if s[i] == \"A\" || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i]\
    \ == \"U\"\n      if i % 2 == 0\n        count += 1\n      end\n    end\n    i\
    \ += 1\n  end\n  return count\nend", "\tcounter = 0\n\ts.length.times do |i|\n\
    \t\tif i % 2 == 0\n\t\t\tcounter += 1 if s[i] =~ /[AEIOU]/\n\t\tend\n\tend\n\t\
    counter\nend", "  count = 0\n  s.each_char.with_index do |c, i|\n    count +=\
    \ 1 if c =~ /[AEIOU]/ && i.even?\n  end\n  count\nend", "\nend", "\nend", "  i\
    \ = 0\n  count = 0\n  while i < s.length\n    if i % 2 == 0 && (s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\")\n     \
    \ count += 1\n    end\n    i += 1\n  end\n  return count\nend", "  s.each_char.with_index.count\
    \ { |char, i| char == char.upcase && i.even? && char.match(/[aeiou]/i) }\nend",
  "  # your code here\nend", "  count = 0\n  vowels = [\"A\", \"E\", \"I\", \"O\"\
    , \"U\"]\n  s.split(\"\").each_with_index do |letter, index|\n    if index % 2\
    \ == 0\n      if vowels.include?(letter)\n        count += 1\n      end\n    end\n\
    \  end\n  count\nend", "  s.split('').select.with_index { |letter, idx| idx.even?\
    \ && letter.upcase == letter }.count\nend", "  s.split('').map.with_index { |char,\
    \ index| char if char =~ /[AEIOU]/ && index.even? }.compact.length\nend", "  #\
    \ your code here\nend", "  s.split('').map.with_index { |c, i| c.upcase == c ?\
    \ 1 : 0 }.reduce(:+)\nend\nputs \"count_upper('aBCdEf') returns #{count_upper('aBCdEf')}\
    \ (#{count_upper('aBCdEf') == 1})\"\nputs \"count_upper('abcdefg') returns #{count_upper('abcdefg')}\
    \ (#{count_upper('abcdefg') == 0})\"\nputs \"count_upper('dBBE') returns #{count_upper('dBBE')}\
    \ (#{count_upper('dBBE') == 0})\"\nputs", "  s.chars.each_with_index.count { |char,\
    \ i| 'AEIOU'.include?(char) && i.even? }\nend", "  count = 0\n  vowels = 'aeiouAEIOU'\n\
    \  s.chars.each_with_index do |char, i|\n    count += 1 if vowels.include?(char)\
    \ && i.even?\n  end\n  count\nend", "  vowels = \"AEIOU\"\n  s.each_char.with_index(0).select\
    \ { |v, i| vowels.include?(v) && i.even? }.count\nend", "  vowels = [\"A\", \"\
    E\", \"I\", \"O\", \"U\"]\n  count = 0\n  s.split(\"\").each_with_index do |char,\
    \ i|\n    if i % 2 == 0 && vowels.include?(char)\n      count += 1\n    end\n\
    \  end\n  count\nend", "\tcount = 0\n\ts.chars.each_with_index do |v,i|\n\t\t\
    if v == v.upcase && v =~ /[AEIOU]/ && i % 2 == 0\n\t\t\tcount += 1\n\t\tend\n\t\
    end\n\treturn count\nend", "  vowels = ['A', 'E', 'I', 'O', 'U']\n  count = 0\n\
    \  s.split('').each_with_index do |letter, index|\n    if index.even? && vowels.include?(letter)\n\
    \      count += 1\n    end\n  end\n  count\nend", "  upper_count = 0\n  s.split('').each_with_index\
    \ do |letter, index|\n    if (index % 2 == 0) && letter.upcase == letter\n   \
    \   upper_count += 1\n    end\n  end\n  upper_count\nend", "  return 0 if s.nil?\n\
    \  count = 0\n  (0...s.length).step(2) do |i|\n    count += 1 if s[i].match(/[AEIOU]/)\n\
    \  end\n  count\nend", "  # declare counter variable\n  upper_vowels = 0\n  #\
    \ iterate through each character in s\n  s.each_char.with_index do |char, i|\n\
    \    # increment counter variable if character is a vowel, and is an even index\n\
    \    upper_vowels += 1 if \"AEIOU\".include?(char) && i.even?\n  end\n  # return\
    \ counter variable\n  upper_vowels\nend", "  # Fill in the code\nend", "  i =\
    \ 0\n  vowels = ['A', 'E', 'I', 'O', 'U']\n  count = 0\n  while i < s.length\n\
    \    if vowels.include?(s[i])\n      count += 1\n    end\n    i += 2\n  end\n\
    \  count\nend", "  count = 0\n  s.chars.each_with_index do |char, idx|\n    count\
    \ += 1 if idx.even? && char =~ /[AEIOU]/\n  end\n  count\nend", "  (s.chars.each_with_index.count{|c,i|\
    \ c == c.upcase && i % 2 == 0 && \"AEIOU\".include?(c)})\nend", "    count = 0\n\
    \    s.each_char.with_index do |c, i|\n        if c.upcase == c && i.even?\n \
    \           count += 1\n        end\n    end\n    return count\nend", "\tcount\
    \ = 0\n\ts.chars.each_with_index do |char, index|\n\t\tif index % 2 == 0 && char.match(/[AEIOU]/)\n\
    \t\t\tcount += 1\n\t\tend\n\tend\n\tcount\nend", "  s.split('').select.with_index\
    \ { |c,i| i.even? && 'AEIOU'.include?(c) }.count\nend", "  count = 0\n  s.split('').each_with_index\
    \ do |v, i|\n    count += 1 if i.even? && /[AEIOU]/.match(v)\n  end\n  count\n\
    end", "  # your code here\nend", "  vowel_uppers = 0\n  s.split('').each_with_index\
    \ do |x, i|\n    if x.match(/[AEIOU]/) && i % 2 == 0\n      vowel_uppers += 1\n\
    \    end\n  end\n  vowel_uppers\nend", "  count = 0\n  s.chars.each_with_index\
    \ do |char, i|\n    if char =~ /[AEIOU]/ && i.even?\n      count += 1\n    end\n\
    \  end\n  count\nend", end, "  count = 0\n  s.split('').each_with_index do |char,\
    \ index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend", "  s.downcase!\n  vowels = 'aeiou'\n  count = 0\n  s.split('').each_with_index\
    \ do |char, i|\n    if vowels.include?(char)\n      count += 1 if i.even?\n  \
    \  end\n  end\n  count\nend", "  count = 0\n  s.each_char.with_index { |char,\
    \ i| count += 1 if ('AEIOU'.include? char) && (i % 2 == 0) }\n  count\nend", " \
    \ count = 0\n  s.each_char.with_index do |x, idx|\n    if x.match(/[AEIOU]/) &&\
    \ idx.even?\n      count += 1\n    end\n  end\n  count\nend", "  count = 0\n \
    \ s.split('').each_with_index do |l, i|\n    count += 1 if i.even? && l =~ /[AEIOU]/\n\
    \  end\n  count\nend", "  s.chars.each_with_index.count { |c, i| c =~ /[AEIOU]/\
    \ && i.even? }\nend", "    count = 0\n    s.each_char.with_index do |c, i|\n \
    \       if i.even?\n            if c == \"A\" || c == \"E\" || c == \"I\" || c\
    \ == \"O\" || c == \"U\"\n                count += 1\n            end\n      \
    \  end\n    end\n    return count\nend", "  s.count('AEIOU')\nend", end, "  vowels\
    \ = ['A', 'E', 'I', 'O', 'U']\n  count = 0\n  if s.length == 0\n    return 0\n\
    \  end\n  if vowels.include?(s[0]) && s[0] == s[0].upcase\n    count += 1\n  end\n\
    \  return count + count_upper(s[2, s.length - 2])\nend", "  count = 0\n  s.each_char.with_index\
    \ do |l,i|\n    count += 1 if l =~ /[AEIOU]/ && i.even?\n  end\n  count\nend",
  "  upper_vowels = [\"A\", \"E\", \"I\", \"O\", \"U\"]\n  count = 0\n  s.each_char.with_index\
    \ do |x, i|\n    if i.even? && upper_vowels.include?(x)\n      count += 1\n  \
    \  end\n  end\n  count\nend", "\tcount = 0\n\ts.each_char.with_index do |letter,\
    \ index|\n\t\tif letter.upcase == letter && index.even?\n\t\t\tcount += 1\n\t\t\
    end\n\tend\n\tcount\nend", "  count = 0\n  s.chars.each_with_index do |char, i|\n\
    \    count += 1 if char.upcase == char && i.even?\n  end\n  count\nend", "  (0...s.length).count\
    \ { |i| s[i] =~ /[AEIOU]/ && i.even? }\nend", "  s.count(\"AEIOU\")\nend", " \
    \ count = 0\n  s.chars.each_with_index do |char, index|\n    if index.even? &&\
    \ \"AEIOU\".include?(char)\n      count += 1\n    end\n  end\n  count\nend", " \
    \ counter = 0\n  s.split(\"\").each_with_index do |x, i|\n    if i % 2 == 0 &&\
    \ x =~ /[AEIOU]/\n      counter += 1\n    end\n  end\n  counter\nend", "  count\
    \ = 0\n  s.split('').each_with_index do |c, i|\n    count += 1 if i % 2 == 0 &&\
    \ is_upper_vowel?(c)\n  end\n  count\nend", "\nend", "  counter = 0\n  s.split(\"\
    \").each_with_index do |x, idx|\n    if idx.even?\n      if x == x.upcase\n  \
    \      counter += 1\n      end\n    end\n  end\n  return counter\nend", "  s.count('AEIOU')\n\
    end", "  # puts \"I am debugging #{s}\"\n  count = 0\n  s.chars.each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend", "  # your code here\nend", "  return 0 if s.empty?\n\
    \  count = 0\n  s.chars.each_with_index do |char, idx|\n    count += 1 if char.upcase\
    \ == char && idx.even?\n  end\n  count\nend", "  #your code here\n  return 0 if\
    \ s.length == 0\n  num_upper = 0\n  s.each_char.with_index do |c, i|\n    if i.even?\
    \ && c.count(\"AEIOU\") > 0\n      num_upper += 1\n    end\n  end\n  num_upper\n\
    end", "  # YOUR CODE HERE\nend", "  vowel_count = 0\n  vowels = ['A', 'E', 'I',\
    \ 'O', 'U']\n  s.split('').each_with_index do |char, i|\n    if i.even? && vowels.include?(char)\n\
    \      vowel_count += 1\n    end\n  end\n  vowel_count\nend", "  s.count(\"A,E,I,O,U\"\
    ).even? ? s.count(\"A,E,I,O,U\") : s.count(\"A,E,I,O,U\") - 1\nend", "  vowel_array\
    \ = [\"A\", \"E\", \"I\", \"O\", \"U\"]\n  counter = 0\n  s.each_char.with_index\
    \ do |c, i|\n    if i.even? && vowel_array.include?(c)\n      counter += 1\n \
    \   end\n  end\n  counter\nend", "  s.scan(/[AEIOU]/).count\nend", "  counter\
    \ = 0\n  s.split(\"\").each_with_index do |i, index|\n    if index.even?\n   \
    \   if i == i.upcase\n        counter += 1\n      end\n    end\n  end\n  return\
    \ counter\nend", "  if s.size == 0\n    return 0\n  end\n  # FIXME\n  vowel_count\
    \ = 0\n  s.chars.each_with_index do |char, index|\n    if (char == 'A' || char\
    \ == 'E' || char == 'I' || char == 'O' || char == 'U') && (index % 2 == 0)\n \
    \     vowel_count += 1\n    end\n  end\n  return vowel_count\nend", "  count =\
    \ 0\n  s.chars.each_with_index do |char, index|\n    if char.upcase == char &&\
    \ index.even?\n      count += 1\n    end\n  end\n  count\nend", "  counter = 0\n\
    \  s.split(\"\").each_with_index do |char, index|\n    if char =~ /[AEIOU]/ &&\
    \ index.even?\n      counter += 1\n    end\n  end\n  counter\nend", "  i = 0\n\
    \  count = 0\n  while i < s.length\n    if i % 2 == 0 && s[i] =~ /[AEIOU]/\n \
    \     count += 1\n    end\n    i += 1\n  end\n  count\nend", "  count = 0\n  s.each_char.with_index\
    \ do |letter, index|\n    if index.even?\n      if letter == letter.upcase\n \
    \       if letter == \"A\" || letter == \"E\" || letter == \"I\" || letter ==\
    \ \"O\" || letter == \"U\"\n          count += 1\n        end\n      end\n   \
    \ end\n  end\n  count\nend", "\nend", "\t# s.each_char.with_index.select { |c,\
    \ i| c == c.upcase && c =~ /[aeiou]/ && i.even? }.count\n\ts.count(/[AEIOU][^aeiou]*/)\n\
    end", "\tcount = 0\n\ts.each_char.with_index do |c, i|\n\t\tcount += 1 if c.upcase\
    \ == c && i.even?\n\tend\n\tcount\nend", "  count = 0\n  s.split('').each_with_index\
    \ do |v, k|\n    if k.even? && (v == 'A' || v == 'E' || v == 'I' || v == 'O' ||\
    \ v == 'U')\n      count += 1\n    end\n  end\n  count\nend", "  s.chars.map(&:upcase).select.with_index\
    \ { |l, i| l == \"A\" || l == \"E\" || l == \"I\" || l == \"O\" || l == \"U\"\
    \ }.count\nend", "  i = 0\n  counter = 0\n  while i < s.length\n    if i % 2 ==\
    \ 0 && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i]\
    \ == \"U\")\n      counter += 1\n    end\n    i += 1\n  end\n  counter\nend",
  "  count = 0\n  s.each_char.with_index do |char, index|\n    count += 1 if char\
    \ =~ /[AEIOU]/ && index.even?\n  end\n  count\nend", "  # your code here\nend",
  "  s.split('').each_with_index.map { |el, idx| el if (idx % 2).zero? && ('A'..'Z').include?(el)\
    \ }.compact.size\nend", "  count = 0\n  s.chars.each_with_index do |letter, index|\n\
    \    count += 1 if index.even? && letter.match(/[AEIOU]/)\n  end\n  count\nend",
  "\treturn s.split('').select.with_index { |ch, i| ('AEIOU'.include? ch) && (i %\
    \ 2 == 0) }.length\nend", "\tupper_char_count = 0\n\ts.chars.each_with_index do\
    \ |char, index|\n\t\tupper_char_count += 1 if char.upcase == char && index.even?\n\
    \tend\n\tupper_char_count\nend", "  s.chars.each_with_index.count { |char, i|\
    \ char =~ /[AEIOU]/ && i.even? }\nend", "  num = 0\n  s.each_char.with_index do\
    \ |char, i|\n    if char.match(/[AEIOU]/) && i % 2 == 0\n      num += 1\n    end\n\
    \  end\n  num\nend", "  count = 0\n  for i in 0..s.length-1\n    if /[AEIOU]/.match(s[i])\
    \ && i % 2 == 0\n      count += 1\n    end\n  end\n  return count\nend", "  answer\
    \ = 0\n  s.length.times do |index|\n    if index % 2 == 0 && \"AEIOU\".include?(s[index])\n\
    \      answer += 1\n    end\n  end\n  answer\nend", "  vowels = [\"A\", \"E\"\
    , \"I\", \"O\", \"U\"]\n  count = 0\n  s.chars.each_with_index do |char, idx|\n\
    \    if idx.even?\n      if vowels.include?(char)\n        count += 1\n      end\n\
    \    end\n  end\n  count\nend", "  vowels = [\"A\", \"E\", \"I\", \"O\", \"U\"\
    ]\n  count = 0\n  even_indices = s.split(\"\").each_with_index.map { |x, i| i.even?\
    \ }\n  for i in 0..even_indices.length\n    if even_indices[i] && vowels.include?(s[i])\n\
    \      count += 1\n    end\n  end\n  return count\nend", "  uppercase_vowels =\
    \ 0\n  s.split('').each_with_index do |char, index|\n    if char =~ /[AEIOU]/\n\
    \      uppercase_vowels += 1 if index.even?\n    end\n  end\n  uppercase_vowels\n\
    end", "  count = 0\n  array = s.split('')\n  array.each_with_index do |letter,\
    \ index|\n    if letter == letter.upcase && index.even?\n      count += 1\n  \
    \  end\n  end\n  return count\nend", "  s.split('').each_with_index.count { |c,\
    \ i| c =~ /[AEIOU]/ && i.even? }\nend", "  return 0 if s.empty?\n  return 0 if\
    \ s.length.odd?\n  i = 0\n  up_count = 0\n  while i < s.length\n    if s[i] =~\
    \ /[AEIOU]/\n      up_count += 1\n    end\n    i += 2\n  end\n  up_count\nend",
  "    vowel = \"AEIOU\"\n    count = 0\n    s.length.times do |i|\n        if s[i]\
    \ == s[i].upcase && vowel.include?(s[i]) && i % 2 == 0\n            count += 1\n\
    \        end\n    end\n    return count\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
