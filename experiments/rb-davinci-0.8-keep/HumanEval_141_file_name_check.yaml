name: HumanEval_141_file_name_check
language: rb
prompt: "# Create a function which takes a string representing a file's name, and\
  \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  # A file's name is considered to be valid if and only if all the following conditions\
  \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
  \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
  \ before the dot should not be empty, and it starts with a letter from \n# the latin\
  \ alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should be one\
  \ of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
  ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
  \ with a latin alphapet letter)\ndef file_name_check(file_name)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_file_name_check\n\
  \    candidate = method(:file_name_check)\n    assert_equal(\"Yes\", candidate.call(\"\
  example.txt\"))\n    assert_equal(\"No\", candidate.call(\"1example.dll\"))\n  \
  \  assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n    assert_equal(\"Yes\"\
  , candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\", candidate.call(\"MY16FILE3.exe\"\
  ))\n    assert_equal(\"No\", candidate.call(\"His12FILE94.exe\"))\n    assert_equal(\"\
  No\", candidate.call(\"_Y.txt\"))\n    assert_equal(\"No\", candidate.call(\"?aREYA.exe\"\
  ))\n    assert_equal(\"No\", candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"\
  No\", candidate.call(\"this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"\
  this_is_valid.txt\"))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"\
  ))\n    assert_equal(\"No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"\
  No\", candidate.call(\"@this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
  this_is_12valid.6exe4.txt\"))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"\
  ))\n    assert_equal(\"Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"\
  Yes\", candidate.call(\"Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"\
  no_one#knows.dll\"))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"\
  ))\n    assert_equal(\"No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"\
  No\", candidate.call(\"final..txt\"))\n    assert_equal(\"No\", candidate.call(\"\
  final132\"))\n    assert_equal(\"No\", candidate.call(\"_f4indsartal132.\"))\n \
  \   assert_equal(\"No\", candidate.call(\".txt\"))\n    assert_equal(\"No\", candidate.call(\"\
  s.\"))\n  end\nend\n"
completions: ["  # TODO\nend", "  pattern = /^[a-z]+\\d{0,3}\\.txt|exe|dll$/i\n  file_name.match(pattern)\
    \ ? 'Yes' : 'No'\nend", "  if file_name =~ /^[a-zA-Z]\\w*\\.([txt]|[exe]|[dll])$/\n\
    \    return 'Yes'\n  else\n    return 'No'\n  end\nend", "  # check the number\
    \ of digits ('0'-'9')\n  return 'No' if file_name.count('0-9') > 3\n  # check\
    \ if the file's name contains exactly one dot '.'\n  return 'No' if file_name.count('.')\
    \ != 1\n  # split into two parts: before and after the dot\n  parts = file_name.split('.')\n\
    \  # check if the substring before the dot starts with a letter from the latin\
    \ alphapet\n  return 'No' if !(parts[0].start_with?('a-zA-Z'))\n  # check if the\
    \ substring after the dot is a valid substring\n  return 'No' if !(['txt', 'exe',\
    \ 'dll'].include?(parts[1]))\n  # if all conditions are met, return 'Yes'\n  'Yes'\n\
    end", "    sub = file_name.split(\".\")\n    if sub[0].count(\"0-9\") > 3 || file_name.count(\"\
    .\") != 1 || sub[0].count(\"a-zA-Z\") == 0 || ![\"txt\", \"exe\", \"dll\"].include?(sub[1])\n\
    \        return \"No\"\n    else\n        return \"Yes\"\n    end\nend\nputs \"\
    -----File Name Check----\"\nputs file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nputs file_name_check(\"example.txt\"\
    ) # => 'Yes'\nputs file_name_check(\"this_is_an_invalid_file_name.exe\") # =>\
    \ 'No' (the name should start with a latin alphapet letter)\nputs file_name_check(\"\
    123.doc\") # => 'No' (the substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll'])\nputs file_name_check(\"somefilename.exe\") # => 'Yes'\nputs\
    \ file_name_check(\"1234567890123.txt\") # => 'No' (there should not be more than\
    \ three digits in the file's name)\nputs file_name_check(\"123.123\") # => 'No'\
    \ (there should be exactly one dot)\nputs file_name_check(\"example\") # => 'No'\
    \ (there should be exactly one dot)", "\tif file_name.match(/^[a-zA-Z]+[^\\d]*\\\
    d{0,3}([.](txt|exe|dll))?$/)\n\t\t'Yes'\n\telse\n\t\t'No'\n\tend\nend", "  # YOUR\
    \ CODE HERE\nend", "\t# split the file_name into 3 parts, before the dot, dot\
    \ itself, and after the dot.\n\tbefore_dot, dot, after_dot = file_name.split('.')\n\
    \t# check if there are more than 3 digits in the file's name\n\treturn 'No' if\
    \ file_name.count('0-9') > 3\n\t# check if there is exactly one dot\n\treturn\
    \ 'No' if dot != '.'\n\t# check if the substring before the dot is not empty,\
    \ and starts with a latin alphapet letter\n\treturn 'No' if before_dot == '' ||\
    \ before_dot[0].match(/[^a-zA-Z]/)\n\t# check if the substring after the dot is\
    \ one of the allowed strings\n\treturn 'No' if !['txt', 'exe', 'dll'].include?(after_dot)\n\
    \t'Yes'\nend", "\nend", "\traise ArgumentError, \"arg should be a String\" unless\
    \ file_name.is_a? String\n\t\n\t# get dot index and extension\n\tdot_i = file_name.index('.')\n\
    \textension = file_name[dot_i + 1..-1]\n\t\n\t# bad if:\n\t#  - dot not found\n\
    \t#  - extension not txt/exe/dll\n\t#  - extension not all letters\n\t#  - file_name\
    \ contains more than 3 digits\n\t#  - first char in file_name not alphabetic\n\
    \treturn 'No' if dot_i.nil? || ['txt', 'exe', 'dll'].include?(extension) == false\
    \ ||\n\t\t\t\t\t\t\t\t file_name.count('0-9') > 3 || file_name[0].match(/[a-zA-Z]/)\
    \ == nil\n\t\t\t\t\t\t\t\t \n\t# if all tests passed, return 'Yes'\n\t'Yes'\n\
    end", "  return \"No\" if file_name.size > 12 || file_name.size < 5\n  return\
    \ \"No\" if file_name.scan(/[0-9]/).size > 3\n  return \"No\" if file_name.count(\"\
    .\") != 1\n  return \"No\" if file_name.count(\".\") == 1 && file_name.split(\"\
    .\").size != 2\n  return \"No\" if file_name.split(\".\")[0].size < 1 || file_name.split(\"\
    .\")[0][0].scan(/[A-Za-z]/).size == 0\n  return \"No\" if file_name.split(\".\"\
    )[1] != \"txt\" && file_name.split(\".\")[1] != \"exe\" && file_name.split(\"\
    .\")[1] != \"dll\"\n  \"Yes\"\nend", "    # write your code here\nend", "  # Add\
    \ your code here\nend", "    # Your code goes here\nend", "    # TODO: Implement\
    \ me\n    # the_file_name = file_name.split(\".\")\n    # the_second_file_name\
    \ = the_file_name[0]\n    # the_third_file_name = the_file_name[1]\n    # if the_second_file_name\
    \ =~ /[a-z,A-Z]/ && [\"txt\", \"exe\", \"dll\"].include?(the_third_file_name)\
    \ == true && the_second_file_name.length < 4 && the_file_name.count(\".\") ==\
    \ 1\n    #     return \"Yes\"\n    # else\n    #     return \"No\"\n    # end\n\
    \    if file_name =~ /^[a-zA-Z]\\w{1,2}\\.txt$|^[a-zA-Z]\\w{1,2}\\.exe$|^[a-zA-Z]\\\
    w{1,2}\\.dll$/\n        return \"Yes\"\n    else\n        return \"No\"\n    end\n\
    end", "  before_dot = file_name[0..file_name.index('.')-1]\n  after_dot = file_name[file_name.index('.')+1..-1]\n\
    \  if file_name.index('.') == nil || file_name.count('.') != 1\n    return 'No'\n\
    \  elsif before_dot.gsub(/[0-9]/, '').length == 0\n    return 'No'\n  elsif before_dot.length\
    \ - before_dot.gsub(/[0-9]/, '').length > 3\n    return 'No'\n  elsif before_dot[0].ord\
    \ < 65 || before_dot[0].ord > 122 || (before_dot[0].ord < 97 && before_dot[0].ord\
    \ > 90)\n    return 'No'\n  elsif !(after_dot == 'txt' || after_dot == 'exe' ||\
    \ after_dot == 'dll')\n    return 'No'\n  else\n    return 'Yes'\n  end\nend",
  "  # Check each condition, return No if any of them fail.\n  # Should return Yes\
    \ in the end\n  return 'No' if file_name.chars.select { |c| c =~ /\\d/ }.size\
    \ > 3\n  return 'No' if file_name.count('.') != 1\n  return 'No' if file_name[0]\
    \ =~ /\\d/\n  return 'No' if file_name[0] =~ /[^a-zA-Z]/\n  return 'No' if !['txt',\
    \ 'exe', 'dll'].include?(file_name.split('.')[1])\n  'Yes'\nend", "  return \"\
    No\" if file_name.match(/[^a-zA-Z0-9.]/) ||\n                  file_name.match(/^\\\
    d/) ||\n                  file_name.match(/\\d{4,}/) ||\n                  file_name.match(/\\\
    .{2,}/)\n  return \"No\" if file_name.match(/^\\D+\\.\\D+$/) &&\n            \
    \      !file_name.match(/\\.txt$|\\.exe$|\\.dll$/)\n  \"Yes\"\nend", "  # Write\
    \ your code here.\nend", "  file_name.match(/^([a-z]|[A-Z])([\\w]+)(\\d{0,3})\\\
    .(txt|exe|dll)$/) ? 'Yes' : 'No'\nend", "  if file_name.match(/^([a-zA-Z]+[0-9]{0,3})\\\
    .(txt|exe|dll)$/)\n    \"Yes\"\n  else\n    \"No\"\n  end\nend", "  if /^[a-zA-Z]+[0-9]{0,3}\\\
    .\\w{3}$/.match(file_name) &&\n     !(/[0-9]{4}/.match(file_name)) &&\n     (/txt|exe|dll/.match(file_name))\n\
    \    'Yes'\n  else\n    'No'\n  end\nend", "  # write your code here\nend", " \
    \   #write your code here\nend", "  file_name_arr = file_name.split('.')\n  if\
    \ file_name_arr.size != 2 \n    return 'No'\n  elsif file_name_arr[0].count('0-9')\
    \ > 3\n    return 'No'\n  elsif file_name_arr[0].count('a-zA-Z') == 0\n    return\
    \ 'No'\n  elsif !['txt', 'exe', 'dll'].include?(file_name_arr[1])\n    return\
    \ 'No'\n  else\n    return 'Yes'\n  end\nend", "  # write your code here\nend",
  "  if file_name.match(/^[A-Za-z]\\D*$/) && file_name.match(/\\.txt|\\.exe|\\.dll$/)\
    \ && file_name.match(/\\d{4}/) == nil\n    'Yes'\n  else\n    'No'\n  end\nend",
  "\nend", "  if file_name[/[^0-9]{3}/]\n    return \"Yes\"\n  else\n    return \"\
    No\"\n  end\nend", "  # your code here\nend", "\tcount_of_digits = 0\n\tis_valid\
    \ = true\n\tif file_name.count('.') == 1\n\t\tif file_name.split('.')[0] != \"\
    \"\n\t\t\ti = 0\n\t\t\twhile i < file_name.length do\n\t\t\t\tif file_name[i]\
    \ =~ /[0-9]/\n\t\t\t\t\tcount_of_digits += 1\n\t\t\t\tend\n\t\t\t\ti += 1\n\t\t\
    \tend\n\t\t\tis_valid = false if count_of_digits > 3\n\t\t\treturn \"No\" if file_name.split('.')[1]\
    \ != \"txt\" && file_name.split('.')[1] != \"exe\" && file_name.split('.')[1]\
    \ != \"dll\"\n\t\t\treturn \"No\" if file_name.split('.')[0][0] =~ /[^A-Za-z]/\n\
    \t\telse\n\t\t\tis_valid = false\n\t\tend\n\telse\n\t\tis_valid = false\n\tend\n\
    \treturn \"Yes\" if is_valid\n\treturn \"No\"\nend", "\t# your code goes here\n\
    \tcount_char=0\n\tfor i in 0..(file_name.length-1)\n\t\tif (file_name[i]>='0'\
    \ and file_name[i]<='9')\n\t\t\tcount_char+=1\n\t\tend\n\tend\n\tif(count_char>3)\n\
    \t\treturn \"No\"\n\tend\n\t\n\tcount_char=0\n\tdot=false\n\tfor i in 0..(file_name.length-1)\n\
    \t\tif (file_name[i]=='.')\n\t\t\tcount_char+=1\n\t\t\tdot=true\n\t\tend\n\tend\n\
    \tif(count_char!=1 or dot==false)\n\t\treturn \"No\"\n\tend\n\t\n\t\n\treturn\
    \ \"Yes\"\nend", "  # write your code here\nend", "  # Write your code here.\n\
    end", "  # Your Code Here\nend", "  digits = ('0'..'9').to_a\n  latin_chars =\
    \ ('a'..'z').to_a + ('A'..'Z').to_a\n  file_types = ['txt', 'exe', 'dll']\n  dot_counter\
    \ = 0\n  digits_counter = 0\n  latin_counter = 0\n  found_dot = false\n  before_dot\
    \ = false\n  is_valid = false\n  file_name.each_char do |ch|\n    if ch == '.'\n\
    \      dot_counter += 1\n      found_dot = true\n      before_dot = false\n  \
    \  elsif found_dot\n      is_valid = file_types.include?(ch)\n    elsif digits.include?(ch)\n\
    \      digits_counter += 1\n      if digits_counter > 3\n        return 'No'\n\
    \      end\n    elsif latin_chars.include?(ch)\n      latin_counter += 1\n   \
    \   before_dot = true\n    end\n  end\n  return (dot_counter == 1 && latin_counter\
    \ > 0 && before_dot && is_valid) ? 'Yes' : 'No'\nend", "  # your code here\nend",
  "\tif file_name[/\\d+/].size > 3 \n\t\treturn \"No\"\n\telsif file_name.scan(/[.]/).size\
    \ > 1\n\t\treturn \"No\"\n\telsif !file_name[/[a-zA-Z]/]\n\t\treturn \"No\"\n\t\
    elsif !(file_name.split('.')[1] == \"txt\" || file_name.split('.')[1] == \"exe\"\
    \ || file_name.split('.')[1] == \"dll\")\n\t\treturn \"No\"\n\telse\n\t\treturn\
    \ \"Yes\"\n\tend\nend", "  valid_types = %w[txt exe dll]\n  file_name =~ /^[a-zA-Z][\\\
    w]{0,2}\\.(#{valid_types.join('|')})$/ ? 'Yes' : 'No'\nend", "    # YOUR CODE\
    \ HERE\nend", "  file_name_arr = file_name.split('.')\n  # Check if the file_name\
    \ array has more than 2 values\n  if file_name_arr.size > 2\n    return 'No'\n\
    \  end\n  if file_name_arr[0].length == 0 || file_name_arr[1].length == 0\n  \
    \  return 'No'\n  end\n  # Use a counter to count the number of digits in the\
    \ first part of the file name\n  count = 0\n  file_name_arr[0].each_char do |char|\n\
    \    if char.between?('0', '9')\n      count += 1\n    end\n  end\n  # If there\
    \ are more than 3 digits, return 'No'\n  if count > 3\n    return 'No'\n  end\n\
    \  # Check if the first char in the file_name is a letter\n  first_char = file_name_arr[0][0]\n\
    \  if first_char.between?('a', 'z') || first_char.between?('A', 'Z')\n    if file_name_arr[1]\
    \ == 'txt' || file_name_arr[1] == 'exe' || file_name_arr[1] == 'dll'\n      return\
    \ 'Yes'\n    end\n  end\n  return 'No'\nend\nputs '####### Testing the file_name_check\
    \ function:'\nputs 'The result should be Yes, actually was: ' + file_name_check(\"\
    example.txt\")\nputs 'The result should be No, actually was: ' + file_name_check(\"\
    1example.dll\")\nputs 'The result should be No, actually was: ' + file_name_check(\"\
    123exam.txt\")\nputs 'The result should be No, actually was: ' + file_name_check(\"\
    123exam.t\")\nputs 'The result should be No, actually was: ' + file_name_check(\"\
    exam.txt\")\nputs 'The result should be No, actually was: ' + file_name_check(\"\
    exam.t\")\nputs 'The result should be No, actually was: ' + file_name_check(\"\
    exam.123\")\nputs 'The result should be No,", "  # Write your code here\nend",
  "    # Write your code here\n    \nend", "  if (file_name =~ /^[a-zA-Z][0-9]{0,3}\\\
    .txt$/)\n    return 'Yes'\n  else\n    return 'No'\n  end\nend", "  array = file_name.split('.')\n\
    \  if array.length != 2\n    return 'No'\n  end\n  if array[0].length < 1 || array[0].length\
    \ > 20\n    return 'No'\n  end\n  if array[0].length == array[0].scan(/[0-9]/).length\n\
    \    return 'No'\n  end\n  if ['txt', 'exe', 'dll'].include?(array[1]) == false\n\
    \    return 'No'\n  end\n  if array[0][0].match(/[a-zA-Z]/) == nil\n    return\
    \ 'No'\n  end\n  if array[0].scan(/[0-9]/).length > 3\n    return 'No'\n  end\n\
    \  return 'Yes'\nend", "\tif file_name[0] =~ /[a-zA-Z]/ and file_name[-4..-1]\
    \ =~ /^(\\.txt|\\.exe|\\.dll)$/ and file_name.count(\"0-9\") <= 3 and file_name.count(\"\
    .\") == 1\n\t\t'Yes'\n\telse\n\t\t'No'\n\tend\nend", "\ta = file_name.split(\"\
    .\")\n\tif a[0].empty? || a[0][0].match(/[0-9]/) != nil || a[0].count(\"0123456789\"\
    ) > 3 || a[1] != \"txt\" && a[1] != \"exe\" && a[1] != \"dll\"\n\t\treturn \"\
    No\"\n\telse\n\t\treturn \"Yes\"\n\tend\nend", "\t# your code here\n\tif file_name.count(\"\
    0-9\") > 3\n\t\treturn \"No\"\n\telsif file_name.count(\".\") != 1 \n\t\treturn\
    \ \"No\"\n\telsif file_name[0] != \"a\" || file_name[0] != \"b\" || file_name[0]\
    \ != \"c\" || file_name[0] != \"d\" || file_name[0] != \"e\" || file_name[0] !=\
    \ \"f\" || file_name[0] != \"g\" || file_name[0] != \"h\" || file_name[0] != \"\
    i\" || file_name[0] != \"j\" || file_name[0] != \"k\" || file_name[0] != \"l\"\
    \ || file_name[0] != \"m\" || file_name[0] != \"n\" || file_name[0] != \"o\" ||\
    \ file_name[0] != \"p\" || file_name[0] != \"q\" || file_name[0] != \"r\" || file_name[0]\
    \ != \"s\" || file_name[0] != \"t\" || file_name[0] != \"u\" || file_name[0] !=\
    \ \"v\" || file_name[0] != \"w\" || file_name[0] != \"x\" || file_name[0] != \"\
    y\" || file_name[0] != \"z\"\n\t\treturn \"No\"\n\telsif file_name.include?(\"\
    .txt\") == false && file_name.include?(\".exe\") == false && file_name.include?(\"\
    .dll\") == false\n\t\treturn \"No\"\n\telse\n\t\treturn \"Yes\"\n\tend\nend",
  "\tstr = file_name.split('.')\n\tif file_name.scan(/[0-9]/).count <= 3\n\t\tif str.count\
    \ == 2\n\t\t\tif str[0] =~ /[a-zA-Z]/ && str[1] =~ /txt|exe|dll/\n\t\t\t\t'Yes'\n\
    \t\t\telse\n\t\t\t\t'No'\n\t\t\tend\n\t\telse\n\t\t\t'No'\n\t\tend\n\telse\n\t\
    \t'No'\n\tend\nend", end, "  valid_ext = [\"txt\", \"exe\", \"dll\"]\n  regex\
    \ = /^[a-zA-Z][a-zA-Z\\d]{0,3}?\\.[\\w]{3}$/\n  file_name =~ regex && valid_ext.include?(file_name.split(\"\
    .\").last) ? \"Yes\" : \"No\"\nend\nputs file_name_check(\"example.txt\")", " \
    \ # TODO: your code here\nend", "  if file_name =~ /[^0-9]/ && file_name =~ /^[a-zA-Z]/\
    \ && file_name =~ /\\./ && file_name =~ /.txt|.exe|.dll/\n    return 'Yes'\n \
    \ else\n    return 'No'\n  end\nend", "  # your code goes here\nend", "  file_name_checker\
    \ = /^([a-zA-Z]{1}[a-zA-Z0-9]{0,2})\\.([a-zA-Z]{3})$/\n  if file_name_checker.match(file_name)\n\
    \    \"Yes\"\n  else\n    \"No\"\n  end\nend", "end\nputs \"file_name_check: #{file_name_check('example.txt')}\"",
  "  if file_name.count(\"0-9\") > 3\n    return \"No\"\n  elsif file_name.count(\"\
    .\") != 1\n    return \"No\"\n  elsif file_name.split(\".\").length != 2\n   \
    \ return \"No\"\n  elsif file_name.split(\".\")[0].length == 0\n    return \"\
    No\"\n  elsif file_name.split(\".\")[0][0].match(/[a-zA-Z]/) == nil\n    return\
    \ \"No\"\n  elsif file_name.split(\".\")[1] != \"txt\" && file_name.split(\".\"\
    )[1] != \"exe\" && file_name.split(\".\")[1] != \"dll\"\n    return \"No\"\n \
    \ else\n    return \"Yes\"\n  end\nend", "\nend", "  # your code here\nend", " \
    \ if file_name =~ /[0-9]{4}/\n    'No'\n  elsif file_name =~ /^([A-Za-z])([a-zA-Z0-9]*)(\\\
    .txt|\\.exe|\\.dll)$/\n    'Yes'\n  else\n    'No'\n  end\nend", end, "  if file_name.downcase\
    \ =~ /(\\d{4}).?|(.).(\\d)/\n    \"No\"\n  elsif file_name.downcase =~ /(.).(txt|exe|dll)/\n\
    \    \"Yes\"\n  else\n    \"No\"\n  end\nend", "  valid_types = %w(txt exe dll)\n\
    \  if file_name =~ /^[a-zA-Z]{1}[\\w]*\\.[a-zA-Z]{3}$/\n    if valid_types.include?(file_name.split('.')[1])\n\
    \      'Yes'\n    else\n      'No'\n    end\n  else\n    'No'\n  end\nend", " \
    \ # valid_file_extensions = ['.txt', '.exe', '.dll']\n  # valid_extension_count\
    \ = valid_file_extensions.count{|ext| file_name.include?(ext)}\n  # if valid_extension_count\
    \ == 1 && file_name.count('.') == 1\n  #   file_name.count('0-9') <= 3 && file_name.count('a-zA-Z')\
    \ > 0\n  # else\n  #   false\n  # end\n  valid_extensions = ['txt', 'exe', 'dll']\n\
    \  valid_extension_count = valid_extensions.count{|ext| file_name.include?(ext)}\n\
    \  if valid_extension_count == 1 && file_name.count('.') == 1\n    file_name.count('0-9')\
    \ <= 3 && file_name.count('a-zA-Z') > 0\n  else\n    false\n  end\nend", "  if\
    \ file_name.match(/^\\D{1}\\w*\\.\\w{3}$/)\n    return \"Yes\"\n  else\n    return\
    \ \"No\"\n  end\nend", "  ext_array = %w(txt exe dll)\n  file_name_arr = file_name.split(\"\
    .\")\n  return \"No\" if file_name_arr.length != 2\n  return \"No\" if file_name_arr[0]\
    \ == \"\"\n  return \"No\" if file_name_arr[0].count(\"0-9\") > 3\n  return \"\
    No\" if (file_name_arr[0][0] =~ /\\A[a-zA-Z]+\\z/) == nil\n  return \"No\" if\
    \ ext_array.index(file_name_arr[1]) == nil\n  \"Yes\"\nend", end, "  file_name\
    \ =~ /^[a-zA-Z][^.]{0,25}\\.\\w+$/ ? 'Yes' : 'No'\nend", "\nend", "  (file_name.count('0123456789')\
    \ <= 3) && file_name.count('.') == 1 && \n  (file_name.split('.')[0] =~ /^[a-zA-Z]/)\
    \ &&\n  ['txt', 'exe', 'dll'].include?(file_name.split('.')[1]) ? 'Yes' : 'No'\n\
    end", "  if file_name.count(\"0-9\") > 3\n    return \"No\"\n  elsif file_name.scan(/\\\
    ./).count != 1\n    return \"No\"\n  elsif file_name[0] =~ /[0-9]/\n    return\
    \ \"No\"\n  elsif file_name.split(\".\")[0] == \"\"\n    return \"No\"\n  elsif\
    \ !file_name.split(\".\")[1].in?([\"txt\", \"exe\", \"dll\"])\n    return \"No\"\
    \n  else\n    return \"Yes\"\n  end\nend", "    # your code here\n    return 'No'\
    \ if file_name.match(/[0-9]{4}/) || file_name.match(/^\\d/)\n    return 'No' if\
    \ file_name.scan(/[0-9]/).length > 3\n    return 'No' if file_name.scan(/\\./).length\
    \ != 1\n    if file_name.match(/^[a-zA-Z]/)\n        suffix = file_name.split('.')[1]\n\
    \        return ['txt', 'exe', 'dll'].include?(suffix) ? 'Yes' : 'No'\n    else\n\
    \        return 'No'\n    end\nend", "  name = file_name.split('.')\n  return\
    \ 'No' if name.size != 2\n  return 'No' if /[^0-9]/.match(name[0]).to_s.size !=\
    \ name[0].size\n  return 'No' if /[0-9]/.match(name[0]).to_s.size > 3\n  return\
    \ 'No' if /[^a-zA-Z]/.match(name[0][0]).to_s.size > 0\n  return 'No' if !['txt',\
    \ 'exe', 'dll'].include?(name[1])\n  'Yes'\nend", "\t\n\t# name_length = file_name.length\
    \ - 4\n\t# if file_name.count(\"1-9\") <= 3 && file_name.include?(\".\") && \n\
    \t# \t(file_name[0..name_length]).count(\"1-9\") == 0 && \n\t# \t(file_name[-3..-1]\
    \ == \"txt\" || file_name[-3..-1] == \"exe\" || file_name[-3..-1] == \"dll\")\n\
    \t# \t\treturn \"Yes\"\n\t# end\n\t# return \"No\"", "  if file_name.split(\"\
    .\")[0].scan(/\\d+/).join.length > 3 || file_name.scan(/\\./).length != 1 || file_name.split(\"\
    .\")[0].split(\"\")[0].match(/[a-z]/i) == nil || ![\"txt\", \"exe\", \"dll\"].include?(file_name.split(\"\
    .\")[1])\n    return \"No\"\n  else\n    return \"Yes\"\n  end\nend", "  if !(/^[a-zA-Z]/\
    \ =~ file_name) || \n      !(/[0-9]{4}/ =~ file_name) || \n      !(/\\./ =~ file_name)\n\
    \    return 'No'\n  end\n  arr = file_name.split('.')\n  if !(/^[a-zA-Z]+$/ =~\
    \ arr[0]) || \n      !(/^(txt|exe|dll)$/ =~ arr[1])\n    return 'No'\n  end\n\
    \  return 'Yes'\nend", "  if file_name =~ /^\\D.*\\d{0,3}\\.txt$|^\\D.*\\d{0,3}\\\
    .exe$|^\\D.*\\d{0,3}\\.dll$/\n    'Yes'\n  else\n    'No'\n  end\nend", "  file_name.gsub!(\"\
    \\\"\",\"\")\n  if file_name.count(\"0123456789\") <= 3\n    file_name_array =\
    \ file_name.split(\".\")\n    if file_name_array.count == 2\n      if file_name_array[0].count(\"\
    0123456789\") == 0\n        if [\"txt\", \"exe\", \"dll\"].include?(file_name_array[1])\n\
    \          return \"Yes\"\n        end\n      end\n    end\n  end\n  return \"\
    No\"\nend", "  if file_name.include?('.') == false || file_name.count('.') > 1\
    \ || file_name.count('0-9') > 3 || file_name.split('.')[0].count('a-zA-Z') ==\
    \ 0 || !(['txt', 'exe', 'dll'].include?(file_name.split('.')[1]))\n    'No'\n\
    \  else\n    'Yes'\n  end\nend", "  a=file_name.scan(/[a-zA-Z]/)\n  b=file_name.scan(/\\\
    d/)\n  c=file_name.scan(/\\./)\n  d=file_name.split('.')\n  a.any? && c.size==1\
    \ && b.size<=3 && ['txt', 'exe', 'dll'].include?(d[1]) ? 'Yes' : 'No'\nend", " \
    \ if file_name =~ /^[a-zA-Z]{1}[a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$/\n    'Yes'\n \
    \ else\n    'No'\n  end\nend", "    # Your code here\nend", "  # a-zA-Z\n  if\
    \ file_name.count(\"0-9\") <= 3\n    if file_name =~ /[a-zA-Z]/ && file_name =~\
    \ /\\./ && file_name.count(\".\") == 1\n      file_name = file_name.split(\".\"\
    )\n      file_name[0] =~ /[a-zA-Z]/ && [\"txt\", \"exe\", \"dll\"].include?(file_name[1])\
    \ ? \"Yes\" : \"No\"\n    else\n      \"No\"\n    end\n  else\n    \"No\"\n  end\n\
    end", "  # @TODO\nend", "  if file_name.scan(/[0-9]/).length > 3\n    'No'\n \
    \ elsif file_name.scan(/\\./).length != 1\n    'No'\n  elsif file_name.split('.')[0].length\
    \ == 0\n    'No'\n  elsif !((file_name.split('.')[0] =~ /^[a-zA-Z]/))\n    'No'\n\
    \  elsif !(['txt', 'exe', 'dll'].include?(file_name.split('.')[1]))\n    'No'\n\
    \  else\n    'Yes'\n  end\nend", "    # TODO: Write your code here\nend", "\t\
    if /(?:[a-zA-Z])+(?:\\d{0,3})\\.(txt|exe|dll)/.match(file_name)\n\t\treturn 'Yes'\n\
    \telse\n\t\treturn 'No'\n\tend\nend", "  # Your code goes here\nend", "  str_arr\
    \ = file_name.split(\".\")\n  return \"No\" if str_arr.size != 2\n  return \"\
    No\" if str_arr[0].size == 0\n  return \"No\" if str_arr[0].size > 10\n  return\
    \ \"No\" if str_arr[0][0] =~ /[^a-zA-Z]/\n  return \"No\" if str_arr[0] =~ /[0-9]{4}/\n\
    \  return \"No\" if str_arr[1] != \"txt\" && str_arr[1] != \"exe\" && str_arr[1]\
    \ != \"dll\"\n  \"Yes\"\nend", "  if file_name =~ /^[A-Za-z]\\w*\\.\\w{3}$/ &&\
    \ file_name.scan(/\\d/).length <= 3 && file_name =~ /^[A-Za-z]\\w*\\.(txt|exe|dll)$/\n\
    \    \"Yes\"\n  else\n    \"No\"\n  end\nend", "\tif file_name.count('0-9') >\
    \ 3\n\t\treturn 'No'\n\telsif file_name.count('.') != 1\n\t\treturn 'No'\n\telsif\
    \ (file_name.partition('.')[0] == '') && (/[a-zA-Z]/.match(file_name.partition('.')[0]))\n\
    \t\treturn 'No'\n\telsif (file_name.partition('.')[2] != 'txt') && (file_name.partition('.')[2]\
    \ != 'exe') && (file_name.partition('.')[2] != 'dll')\n\t\treturn 'No'\n\telse\n\
    \t\treturn 'Yes'\n\tend\nend", "  if /^([A-Za-z]+)([0-9]{0,3})\\.(txt|exe|dll)$/.match(file_name)\n\
    \    'Yes'\n  else\n    'No'\n  end\nend", "\treturn 'No' if /(\\D{2,}\\.)/ =~\
    \ file_name\n\treturn 'No' if /\\.(txt|exe|dll)/ !~ file_name\n\treturn 'No' if\
    \ /(\\D{1,}\\.\\D{3,}$)/ =~ file_name\n\treturn 'No' if /[0-9]{4,}/ =~ file_name\n\
    \treturn 'Yes'\nend", "\tif file_name.length > 3\n\t\treturn 'No'\n\telsif file_name.length\
    \ < 3\n\t\treturn 'No'\n\telse \n\t\treturn 'Yes'\n\tend\nend", "\tif file_name.length\
    \ > 3 || file_name.length < 3\n\t\treturn \"No\"\n\telsif file_name.length ==\
    \ 3\n\t\tif file_name[0].downcase >= \"a\" && file_name[0].downcase <= \"z\"\n\
    \t\t\tif file_name[1] == \".\"\n\t\t\t\treturn \"Yes\"\n\t\t\telse\n\t\t\t\treturn\
    \ \"No\"\n\t\t\tend\n\t\telse\n\t\t\treturn \"No\"\n\t\tend\n\tend\nend", "\t\
    # TODO: Write your implementation here.\nend", "  # Your code goes here\n  allowed\
    \ = %w(txt exe dll)\n  digits = '0123456789'\n  alpha = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \  return 'No' if file_name.scan(/[#{digits}]/).length > 3 ||\n              \
    \   file_name.scan(/[^#{alpha}#{digits}.]/).length > 0 ||\n                 file_name.scan(/\\\
    ./).length != 1 ||\n                 file_name.split('.')[0].length == 0 ||\n\
    \                 allowed.include?(file_name.split('.')[1]) == false\n  'Yes'\n\
    end", "  # TODO: your code here\nend", "    if file_name.count(\"0-9\") > 3 ||\
    \ file_name.count(\".\") != 1\n        return \"No\"\n    end\n    file_name =\
    \ file_name.split(\".\")\n    if file_name[0] == \"\" || !(file_name[0][0].ord\
    \ >= 65 && file_name[0][0].ord <= 90) || !(file_name[0][0].ord >= 97 && file_name[0][0].ord\
    \ <= 122)\n        return \"No\"\n    end\n    if file_name[1] != \"txt\" && file_name[1]\
    \ != \"exe\" && file_name[1] != \"dll\"\n        return \"No\"\n    end\n    return\
    \ \"Yes\"\nend", "  # write your code here\nend\nputs file_name_check(\"example.txt\"\
    ) # => 'Yes'\nputs file_name_check(\"1example.dll\") # => 'No' (the name should\
    \ start with a latin alphapet letter)\nputs file_name_check(\"example.exe\") #\
    \ => 'Yes'\nputs file_name_check(\"Example.exe\") # => 'Yes'\nputs file_name_check(\"\
    123.exe\") # => 'No' (there should not be more than three digits)\nputs file_name_check(\"\
    example.txt\") # => 'Yes'\nputs file_name_check(\"example.doc\") # => 'No' (the\
    \ extention should be one of ['txt', 'exe', 'dll'])", "    file_name_parts = file_name.split('.')\n\
    \    if file_name_parts.length != 2\n        return 'No'\n    end\n    if file_name_parts[0].length\
    \ == 0 || file_name_parts[0].start_with?('0','1','2','3','4','5','6','7','8','9')\n\
    \        return 'No'\n    end\n    if file_name_parts[1] != 'txt' && file_name_parts[1]\
    \ != 'exe' && file_name_parts[1] != 'dll'\n        return 'No'\n    end\n    if\
    \ file_name_parts[0].scan(/[0-9]/).length > 3\n        return 'No'\n    end\n\
    \    return 'Yes'\nend", "\treturn 'No' if file_name.scan(/\\d/).size > 3\n\t\
    return 'No' if file_name.scan(/\\./).size != 1\n\treturn 'No' if file_name.split('.')[0].empty?\n\
    \treturn 'No' if file_name.split('.')[0].scan(/[A-Za-z]/).empty?\n\treturn 'No'\
    \ if !['txt', 'exe', 'dll'].include?(file_name.split('.')[1])\n\t'Yes'\nend",
  "  # please write your code here\n  parts = file_name.split('.')\n  exts = [\"txt\"\
    , \"exe\", \"dll\"]\n  if (parts.length != 2)\n    return \"No\"\n  end\n  if\
    \ ((parts[0].scan(/\\d/).length > 3) || (parts[0].scan(/[a-zA-Z]/).length != 1))\n\
    \    return \"No\"\n  end\n  if (exts.include?(parts[1]))\n    return \"Yes\"\n\
    \  end\n  return \"No\"\nend", "\t# TODO: implement\n\tsplit = file_name.split(\"\
    .\")\n\tif !split[0].match(/[a-zA-Z]/)\n\t\treturn \"No\"\n\tend\n\tif split[1]\
    \ != \"txt\" && split[1] != \"exe\" && split[1] != \"dll\"\n\t\treturn \"No\"\n\
    \tend\n\treturn \"Yes\"\nend", "  if file_name =~ /^[a-zA-Z]+(\\d{0,3})\\.(txt|exe|dll)$/\n\
    \    'Yes'\n  else\n    'No'\n  end\nend", "  # [YOUR CODE HERE]\nend", "\t# Your\
    \ code here\nend", "\tvalid_ext = ['txt', 'exe', 'dll']\n\tp, rest = file_name.split('.')\n\
    \t\n\tif p.length == 0 || !(p =~ /^[a-zA-Z]/ )\n\t\treturn 'No'\n\tend\n\t\n\t\
    if (p =~ /[0-9]/).nil? == false\n\t\tcount = p.count('0-9')\n\t\tif count > 3\n\
    \t\t\treturn 'No'\n\t\tend\n\tend\n\t\n\tif rest.nil? || !valid_ext.include?(rest)\n\
    \t\treturn 'No'\n\tend\n\t\n\treturn 'Yes'\nend", "  if file_name =~ /^[a-z|A-Z]\\\
    D*\\.txt|exe|dll$/\n    return 'Yes'\n  else\n    return 'No'\n  end\nend", " \
    \ return 'No' if file_name.length < 5 || file_name.length > 25\n  return 'No'\
    \ if file_name.scan(/[0-9]/).length > 3\n  return 'No' if file_name.scan(/\\./).length\
    \ != 1\n  return 'No' if file_name.scan(/\\.[^.]*$/)[0] != '.txt' && file_name.scan(/\\\
    .[^.]*$/)[0] != '.exe' && file_name.scan(/\\.[^.]*$/)[0] != '.dll'\n  return 'No'\
    \ if file_name.scan(/^[a-zA-Z]/)[0] == nil\n  return 'Yes'\nend", "    # Some\
    \ code here\nend", "  # TODO\nend", "    # Write your code here\nend", "  if file_name.scan(/\\\
    d/).length > 3\n    'No'\n  elsif file_name.scan(/\\./).length != 1\n    'No'\n\
    \  elsif file_name.split('.')[0].length == 0 || file_name.split('.')[0].scan(/\\\
    d/).length > 0\n    'No'\n  elsif file_name.split('.')[1] != 'txt' && file_name.split('.')[1]\
    \ != 'exe' && file_name.split('.')[1] != 'dll'\n    'No'\n  else\n    'Yes'\n\
    \  end\nend", "  if file_name.count(\"0-9\") <= 3 && file_name.count(\".\") ==\
    \ 1 &&\n    (file_name.index(\".\") - 1) > 0 && (file_name.index(\".\") + 1) <\
    \ file_name.length &&\n    file_name.start_with?('a-z', 'A-Z') && file_name.end_with?('.txt',\
    \ '.exe', '.dll')\n    return 'Yes'\n  else\n    return 'No'\n  end\nend", " \
    \ # write your code here\nend", "  if (file_name.count(\"0-9\") <= 3) && \n  \
    \   (file_name.count(\".\") == 1) && \n     (file_name[0] =~ /[a-zA-Z]/) && \n\
    \     (file_name[-4..-1] =~ /(txt|exe|dll)/)\n    return \"Yes\"\n  else\n   \
    \ return \"No\"\n  end\nend", "  file_name = file_name.split(\".\")\n  if file_name[0].count(\"\
    0-9\") < 4 && file_name[0][0] =~ /[a-zA-Z]/ && file_name[1] == \"txt\" || file_name[1]\
    \ == \"exe\" || file_name[1] == \"dll\"\n    'Yes'\n  else\n    'No'\n  end\n\
    end", "  if file_name.match(/[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.?[a-zA-Z][a-zA-Z0-9]*\\\
    .?[a-zA-Z][a-zA-Z0-9]*\\.?[a-zA-Z][a-zA-Z0-9]*\\.?[a-zA-Z][a-zA-Z0-9]*\\.?[a-zA-Z][a-zA-Z0-9]*\\\
    .?[a-zA-Z][a-zA-Z0-9]*\\.?[a-zA-Z][a-zA-Z0-9]*\\.?[a-zA-Z][a-zA-Z0-9]*\\.?[a-zA-Z][a-zA-Z0-9]*\\\
    .?[a-zA-Z][a-zA-Z0-9]*\\.?[a-zA-Z][a-zA-Z0-9]*$/)\n    'Yes'\n  else\n    'No'\n\
    \  end\nend", "    # TODO: implement the function\n    if file_name.index(/\\\
    d{4}/)\n        return 'No'\n    end\n    if file_name.index(/\\d{1}/)\n     \
    \   return 'No'\n    end\n    if file_name.index(/\\d{2}/)\n        return 'No'\n\
    \    end\n    if file_name.index(/\\d{3}/)\n        return 'No'\n    end\n   \
    \ if file_name.index(/[.]/)\n        return 'Yes'\n    end\n    if file_name.index(/[.][t][x][t]/)\n\
    \        return 'Yes'\n    end\n    if file_name.index(/[.][e][x][e]/)\n     \
    \   return 'Yes'\n    end\n    if file_name.index(/[.][d][l][l]/)\n        return\
    \ 'Yes'\n    end\n    return 'No'\nend", "  # WRITE YOUR CODE HERE\nend", "  #\
    \ Write your code here...\nend", "  # Your code here\nend", "\nend", "\tfile_name.each_char\
    \ do |char|\n\t\tif char.to_i != 0 and char.to_i != 10\n\t\t\tif file_name.count(char)\
    \ > 3\n\t\t\t\treturn \"No\"\n\t\t\tend\n\t\tend\n\tend\n\tif file_name.count(\"\
    .\") == 1\n\t\tif file_name.split(\".\")[0].empty? == false\n\t\t\tif file_name.split(\"\
    .\")[1] == \"txt\" or file_name.split(\".\")[1] == \"exe\" or file_name.split(\"\
    .\")[1] == \"dll\"\n\t\t\t\treturn \"Yes\"\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ \"No\"\nend\nputs \"----------file_name_check----------\"\nputs file_name_check(\"\
    example.txt\") # => 'Yes'\nputs file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nputs file_name_check(\"1example.exe\"\
    ) # => 'No' (the name should not have more than 3 digits)\nputs file_name_check(\"\
    example.txt2\") # => 'No' (the name should start with a latin alphapet letter)\n\
    puts file_name_check(\"example..txt\") # => 'No' (the name should contain exactly\
    \ one dot '.')\nputs file_name_check(\"example.txt.\") # => 'No' (the substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll'])\nputs file_name_check(\"\
    example.txt111111\") # => 'No' (the name should not have more than 3 digits)\n\
    puts file_name_check(\"example.t11xt\") # => 'No' (the name should not have more\
    \ than 3 digits)\nputs file_name_check(\"example1.t11xt\") # => 'No' (the name\
    \ should not have more than 3 digits)", "\nend", "  # Your code goes here\nend",
  "  # Student's code goes here\n  if file_name.scan(/[a-zA-Z]/).length <= 0\n   \
    \ return 'No'\n  elsif file_name.scan(/[.][a-zA-Z]/).length <= 0\n    return 'No'\n\
    \  elsif file_name.scan(/[0-9]/).length >= 3\n    return 'No'\n  elsif file_name.scan(/[.]/).length\
    \ != 1\n    return 'No'\n  elsif file_name.scan(/[.]txt|[.]exe|[.]dll/).length\
    \ != 1\n    return 'No'\n  else\n    return 'Yes'\n  end\nend", "\tdigits = \"\
    0123456789\"\n\tletters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n\tarr = file_name.split(\".\")\n\treturn \"No\" if arr.length != 2 || arr[0]\
    \ == \"\" || digits.include?(arr[0][0]) || arr[1] != \"txt\" && arr[1] != \"exe\"\
    \ && arr[1] != \"dll\" \n\treturn \"No\" if arr[0].each_char.count { |x| digits.include?(x)\
    \ } > 3\n\t\"Yes\"\nend", "  # Write your code here...\n  ext = ['txt', 'exe',\
    \ 'dll']\n  check = file_name.split('.')\n  return 'No' if check.length != 2\n\
    \  return 'No' if ext.include?(check[1]) == false\n  return 'No' if check[0].count('0-9')\
    \ > 3\n  return 'No' if check[0].count('a-zA-Z') == 0\n  return 'Yes'\nend", " \
    \ raise NotImplementedError.new(\"TODO: file_name_check\")\nend", "  # write your\
    \ code here\nend", "  # ---------------------------\n  # your code here\n  # ---------------------------\n\
    end", "  raise NotImplementedError\nend", "    # Type your solution here\nend",
  "  # Write your code here\n  if /^[a-zA-Z]\\w{0,3}\\.txt$|^[a-zA-Z]\\w{0,3}\\.exe$|^[a-zA-Z]\\\
    w{0,3}\\.dll$/.match(file_name)\n    \"Yes\"\n  else\n    \"No\"\n  end\nend",
  "  extenstions = ['txt', 'exe', 'dll']\n  digits = ('0'..'9').to_a\n  return 'No'\
    \ if file_name.split('.').size != 2\n  # return 'No' if file_name.split('.').first.empty?\n\
    \  # return 'No' if !extenstions.include?(file_name.split('.').last)\n  return\
    \ 'No' if digits.include?(file_name.split('.').first[0])\n  return 'No' if file_name.split('.').first.chars.select\
    \ { |c| digits.include?(c) }.size > 3\n  'Yes'\nend", "  file_name_array = file_name.split(\"\
    .\")\n  count = 0\n  if file_name_array.length == 2 \n    first_part = file_name_array[0]\n\
    \    second_part = file_name_array[1]\n    if first_part =~ /[a-z]/\n      first_part.each_char\
    \ do |char|\n        if char =~ /[0-9]/\n          count += 1\n        end\n \
    \     end\n      if count > 3 \n        return \"No\"\n      else\n        if\
    \ second_part == \"txt\" || second_part == \"exe\" || second_part == \"dll\"\n\
    \          return \"Yes\"\n        else\n          return \"No\"\n        end\n\
    \      end\n    else\n      return \"No\"\n    end\n  else\n    return \"No\"\n\
    \  end\nend", "\nend", "  return \"No\" if file_name[0].scan(/[a-zA-Z]/).empty?\n\
    \  # p file_name[0].scan(/[a-zA-Z]/).empty?\n  return \"No\" if file_name.scan(/\\\
    ./).size != 1\n  # p file_name.scan(/\\./).size != 1\n  return \"No\" if file_name.scan(/\\\
    d/).size > 3\n  # p file_name.scan(/\\d/).size > 3\n  return \"No\" if ![\"txt\"\
    , \"exe\", \"dll\"].include?(file_name.split(\".\").last)\n  # p ![\"txt\", \"\
    exe\", \"dll\"].include?(file_name.split(\".\").last)\n  return \"Yes\"\nend",
  "  # split file_name by dot, check if only one dot in the file_name\n  # no dot?\
    \ 'No'\n  # more than one dot? 'No'\n  # check the part before dot, should not\
    \ be empty, should start with a letter,\n  # the digit count in the part before\
    \ dot should not be more than 3\n  # check the part after dot, should not be empty,\
    \ should be 'txt', 'exe', or 'dll'\n  return 'No' if file_name.count('.') != 1\
    \ || file_name.split('.')[0].empty?\n  part_before_dot = file_name.split('.')[0]\n\
    \  part_after_dot = file_name.split('.')[1]\n  return 'No' if part_before_dot[0].ord\
    \ < 65 || part_before_dot[0].ord > 122 || part_before_dot[0].ord > 90 && part_before_dot[0].ord\
    \ < 97\n  return 'No' if part_before_dot.count('0-9') > 3\n  return 'No' if part_after_dot.empty?\
    \ || part_after_dot != 'txt' && part_after_dot != 'exe' && part_after_dot != 'dll'\n\
    \  'Yes'\nend", "  extension = ['txt', 'exe', 'dll']\n  if file_name.count('0-9')\
    \ > 3\n    'No'\n  elsif file_name.count('.') != 1\n    'No'\n  elsif file_name.split('.')[0].empty?\
    \ || !/^[a-zA-Z]/.match(file_name.split('.')[0])\n    'No'\n  elsif !extension.include?(file_name.split('.')[1])\n\
    \    'No'\n  else\n    'Yes'\n  end\nend", "  # write your code here\nend", " \
    \   if /^[a-zA-Z]+\\d{0,3}\\.\\b(txt|exe|dll)\\b$/.match(file_name) != nil\n \
    \       return 'Yes'\n    else\n        return 'No'\n    end\nend", "  # TODO:\
    \ Implement this method!\nend", "  # Your code goes here\nend", "  if file_name.length\
    \ < 5\n    return 'No'\n  end\n  if file_name.count('0-9') > 3\n    return 'No'\n\
    \  end\n  if file_name.index('.') != file_name.rindex('.')\n    return 'No'\n\
    \  end\n  if file_name.index('.') < 2\n    return 'No'\n  end\n  if !/\\A[a-zA-Z]/.match(file_name.split('.')[0])\n\
    \    return 'No'\n  end\n  extension = file_name.split('.')[1]\n  if extension\
    \ != 'txt' && extension != 'exe' && extension != 'dll'\n    return 'No'\n  end\n\
    \  return 'Yes'\nend", "\nend", "  if file_name =~ /^[a-zA-Z][^0-9]*\\d{0,3}\\\
    .txt$|^[a-zA-Z][^0-9]*\\d{0,3}\\.exe$|^[a-zA-Z][^0-9]*\\d{0,3}\\.dll$/\n    'Yes'\n\
    \  else\n    'No'\n  end\nend", "  counter = 0\n  file_name.each_char do |char|\n\
    \    if ('0'..'9').include?(char)\n      counter += 1\n    end\n  end\n  if counter\
    \ > 3\n    return 'No'\n  end\n  splited_file_name = file_name.split('.')\n  if\
    \ !(('a'..'z').include?(splited_file_name[0][0]) || ('A'..'Z').include?(splited_file_name[0][0]))\n\
    \    return 'No'\n  end\n  if splited_file_name[1] != 'txt' && splited_file_name[1]\
    \ != 'exe' && splited_file_name[1] != 'dll'\n    return 'No'\n  end\n  return\
    \ 'Yes'\nend", "  return 'No' if file_name =~ /[0-9]{4}/\n  return 'No' if file_name\
    \ =~ /[.]{2}/\n  return 'No' if file_name =~ /^\\..*$/\n  return 'No' if file_name\
    \ =~ /^[^a-zA-Z].*$/\n  return 'No' if file_name =~ /[.]exe[.]/\n  return 'No'\
    \ if file_name =~ /[.]dll[.]/\n  return 'No' if file_name =~ /[.]txt[.]/\n  return\
    \ 'No' if file_name =~ /[.][^a-zA-Z]*$/\n  return 'No' if file_name =~ /[.]/ &&\
    \ file_name !~ /[.]txt|[.]exe|[.]dll/\n  return 'Yes'\nend", "\tif file_name.count(\"\
    0123456789\") > 3\n\t\t\"No\"\n\telsif file_name.count(\".\") != 1\n\t\t\"No\"\
    \n\telsif file_name.split(\".\").first == \"\"\n\t\t\"No\"\n\telsif file_name.split(\"\
    .\").first[0] =~ /\\D/\n\t\t\"No\"\n\telsif file_name.split(\".\").last != \"\
    txt\" && file_name.split(\".\").last != \"exe\" && file_name.split(\".\").last\
    \ != \"dll\"\n\t\t\"No\"\n\telse\n\t\t\"Yes\"\n\tend\nend", "    txt = \".txt\"\
    \n    exe = \".exe\"\n    dll = \".dll\"\n    return 'No' if (file_name =~ /\\\
    d/) && ((file_name =~ /\\d/).to_i > 3)\n    return 'No' if (file_name =~ /\\./).to_i\
    \ != 1\n    return 'No' if (file_name.length == 4) && (file_name != txt && file_name\
    \ != exe && file_name != dll)\n    return 'No' if (file_name.length == 5) && (file_name[0]\
    \ != \"A\" && file_name[0] != \"a\" && file_name[0] != \"Z\" && file_name[0] !=\
    \ \"z\")\n    return 'No' if (file_name.length == 5) && (file_name != txt && file_name\
    \ != exe && file_name != dll)\n    return 'No' if (file_name.length == 6) && (file_name[0]\
    \ != \"A\" && file_name[0] != \"a\" && file_name[0] != \"Z\" && file_name[0] !=\
    \ \"z\")\n    return 'No' if (file_name.length == 6) && (file_name != txt && file_name\
    \ != exe && file_name != dll)\n    return 'Yes'\nend", "    res = false\n    if\
    \ file_name.scan(/[a-z]/i).length > 0 and\n        file_name.scan(/[0-9]/).length\
    \ <= 3 and\n        file_name.scan(/\\./).length == 1 and\n        ['txt', 'exe',\
    \ 'dll'].include?(file_name.split(\".\").last)\n            res = true\n    end\n\
    \    if res == true\n        return \"Yes\"\n    else\n        return \"No\"\n\
    \    end\nend", "  return 'No' if file_name.count('0-9') > 3", "  if file_name.scan(/[0-9]/).length\
    \ > 3\n    return 'No'\n  end\n  if !file_name.include?('.')\n    return 'No'\n\
    \  end\n  if !('a'..'z').include?(file_name[0]) && !('A'..'Z').include?(file_name[0])\n\
    \    return 'No'\n  end\n  if file_name.split('.')[1] != 'txt' && file_name.split('.')[1]\
    \ != 'exe' && file_name.split('.')[1] != 'dll'\n    return 'No'\n  end\n  return\
    \ 'Yes'\nend", "  return \"No\" if file_name.scan(/[0-9]/).size > 3\n  return\
    \ \"No\" if file_name.scan(/\\./).size != 1\n  return \"No\" if file_name.split('.')[0].empty?\n\
    \  return \"No\" if !(file_name.split('.')[0] =~ /^[a-zA-Z]/)\n  return \"No\"\
    \ if !(file_name.split('.')[1] =~ /^(txt|exe|dll)$/)\n  return \"Yes\"\nend",
  "  if file_name.split(\".\")[0].scan(/\\d/).length > 3 ||\n     !(file_name.split(\"\
    .\")[0].scan(/[a-zA-Z]/).length > 0) ||\n     !(file_name.split(\".\")[1] == \"\
    txt\" || file_name.split(\".\")[1] == \"exe\" || file_name.split(\".\")[1] ==\
    \ \"dll\")\n    return \"No\"\n  else\n    return \"Yes\"\n  end\nend", "  if\
    \ file_name.match(/^[a-z]{1}[\\w.]*$/i) && file_name.match(/\\d{1,3}/)\n    'No'\n\
    \  elsif file_name.match(/^[a-z]{1}[\\w.]*$/i) && file_name.match(/\\.\\w{3}$/)\n\
    \    'Yes'\n  else\n    'No'\n  end\nend", "  return 'No' if file_name.chars.select\
    \ { |char| char =~ /[0-9]/ }.size > 3\n  return 'No' if file_name.chars.count('.')\
    \ != 1\n  parts = file_name.split('.')\n  return 'No' if parts[0].size < 1\n \
    \ return 'No' if !(parts[0] =~ /^[a-zA-Z]/)\n  return 'No' if !(['txt', 'exe',\
    \ 'dll'].include? parts[1])\n  'Yes'\nend", "  first_part, second_part = file_name.split(\"\
    .\")\n  /[a-zA-Z]\\w{,2}/.match(first_part) && (second_part == \"txt\" || second_part\
    \ == \"exe\" || second_part == \"dll\") ? 'Yes' : 'No'\nend", "  cond = []\n \
    \ cond << (file_name =~ /^[a-zA-Z]+[\\d]{0,3}[.]\\w{3}$/)\n  cond << (file_name\
    \ =~ /[\\d]/)\n  cond << (file_name =~ /^[a-zA-Z]/)\n  cond << (file_name =~ /[.]txt$/)\n\
    \  cond << (file_name =~ /[.]exe$/)\n  cond << (file_name =~ /[.]dll$/)\n  return\
    \ 'Yes' if cond.include?(0)\n  'No'\nend", "    return \"No\" if file_name.count(\"\
    0-9\") > 3\n    return \"No\" if file_name.count(\".\") != 1\n    return \"No\"\
    \ if file_name.partition(\".\").first.length == 0\n    return \"No\" if !file_name.partition(\"\
    .\").first.match(/[a-zA-Z]/)\n    return \"No\" if ![\"txt\", \"exe\", \"dll\"\
    ].include?(file_name.partition(\".\").last)\n    return \"Yes\"\nend", "  # write\
    \ your code here\nend", "\treturn 'No' if /^[A-Za-z]/.match(file_name).nil?\n\t\
    return 'No' if /[0-9]{4,}/.match(file_name)\n\treturn 'No' if /\\.\\w+$/.match(file_name).nil?\n\
    \treturn 'No' if /\\.\\w+$/.match(file_name)[0][1..-1] !~ /^(txt|exe|dll)$/\n\t\
    return 'Yes'\nend", "    # Write your code here\nend\nputs file_name_check(\"\
    example.txt\")\nputs file_name_check(\"1example.dll\")\nputs file_name_check(\"\
    example.pdf\")\nputs file_name_check(\"3example.exe\")", "  file_name_arr = file_name.split('.')\n\
    \  if file_name_arr.length != 2\n    return 'No'\n  end\n  if file_name_arr[0]\
    \ =~ /[0-9]/ && file_name_arr[0].scan(/[0-9]/).length > 3\n    return 'No'\n \
    \ end\n  if !['txt', 'exe', 'dll'].include?(file_name_arr[1])\n    return 'No'\n\
    \  end\n  if file_name_arr[0].empty? || !(file_name_arr[0] =~ /[a-zA-Z]/)\n  \
    \  return 'No'\n  end\n  return 'Yes'\nend", "  # Remove the pass below and add\
    \ your own code\n  pass\nend", "    str = file_name.split(\".\")\n    if str[0].count(\"\
    0-9\") <= 3 && str[0].count(\"a-zA-Z\") > 0 && (str[1] == \"txt\" || str[1] ==\
    \ \"exe\" || str[1] == \"dll\")\n        return \"Yes\"\n    else\n        return\
    \ \"No\"\n    end\nend", "    if file_name.split(\".\")[0] =~ /\\d/\n        return\
    \ \"No\"\n    end\n    if file_name.split(\".\").length != 2\n        return \"\
    No\"\n    end\n    if file_name.split(\".\")[0] == \"\" || !(file_name.split(\"\
    .\")[0] =~ /[a-zA-Z]/)\n        return \"No\"\n    end\n    if file_name.split(\"\
    .\")[1] != \"txt\" && file_name.split(\".\")[1] != \"exe\" && file_name.split(\"\
    .\")[1] != \"dll\"\n        return \"No\"\n    end\n    return \"Yes\"\nend\n\
    puts file_name_check(\"example.txt\")\nputs file_name_check(\"1example.dll\")",
  "\tpattern = /^[a-zA-Z]+[0-9]{0,3}\\.[txt|exe|dll]$/\n\tfile_name.match(pattern)\
    \ ? 'Yes' : 'No'\nend", "\tif /^[a-zA-Z][0-9]{0,3}?\\.txt$/.match(file_name) ||\
    \ /^[a-zA-Z][0-9]{0,3}?\\.exe$/.match(file_name) || /^[a-zA-Z][0-9]{0,3}?\\.dll$/.match(file_name)\n\
    \t\treturn 'Yes'\n\telse\n\t\treturn 'No'\n\tend\nend", "\tvalid_name_syntax =\
    \ /^[a-zA-Z]+[a-zA-Z0-9]{0,3}\\.(?:txt|exe|dll)$/\n\t\n\tfile_name.match(valid_name_syntax)\
    \ ? 'Yes' : 'No'\nend", "\treturn 'No' if /[0-9]{4,}/.match(file_name)\n\treturn\
    \ 'No' if /\\.{2,}/.match(file_name)\n\treturn 'No' if /[^a-zA-Z0-9\\.]/.match(file_name)\n\
    \treturn 'No' if /^[^a-zA-Z0-9]/.match(file_name)\n\treturn 'No' if /[^a-zA-Z0-9]$/.match(file_name)\n\
    \treturn 'No' if /\\..*[^\\.txt|^\\.exe|^\\.dll]/.match(file_name)\n\treturn 'No'\
    \ if /\\.[^\\.]+\\./.match(file_name)\n\treturn 'No' if file_name.count('.') !=\
    \ 1\n\t'Yes'\nend", "\t# write your code here\nend", "  # Write your code here\n\
    \  return 'No' if file_name.length < 5\n  return 'No' if file_name.length > 11\n\
    \  return 'No' if file_name.scan(/\\d/).length > 3\n  return 'No' if file_name.split('.').length\
    \ != 2\n  return 'No' if !file_name.start_with?('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z')\n\
    \  ext = file_name.split('.')[1]\n  return 'No' if !ext.eql?('txt') && !ext.eql?('exe')\
    \ && !ext.eql?('dll')\n  return 'Yes'\nend", "  arr = file_name.split(\".\")\n\
    \  if arr.length == 2\n    if arr[0].count(\"0-9\") <= 3 && arr[0].count(\"a-zA-Z\"\
    ) > 0 && arr[1] == \"txt\" || arr[1] == \"exe\" || arr[1] == \"dll\"\n      return\
    \ \"Yes\"\n    end\n  end\n  return \"No\"\nend", "  # Write your code here\n\
    \  if file_name.count(\"0-9\") > 3\n    return \"No\"\n  elsif file_name.include?\
    \ \".\"\n    return \"Yes\"\n  else\n    return \"No\"\n  end\nend", "\tvalid_extension\
    \ = [\"txt\", \"exe\", \"dll\"]\n\tif file_name.count(\"0-9\") <= 3 and file_name.count(\"\
    .\") == 1 and file_name.count(\"-\") == 0 and \n\t\t(file_name.split(\".\")[0].match(/[a-zA-Z]/)\
    \ != nil) and \n\t\tvalid_extension.include?(file_name.split(\".\")[1])\n\t\t\
    return \"Yes\"\n\telse\n\t\treturn \"No\"\n\tend\nend", "  if file_name.match(/^[a-zA-Z]+\\\
    .txt$|^[a-zA-Z]+\\.exe$|^[a-zA-Z]+\\.dll$/)\n    puts \"yes\"\n  else\n    puts\
    \ \"no\"\n  end\nend\nfile_name_check(\"1example.dll\")", "    if file_name.match(/^[A-Za-z][^.]+\\\
    .(txt|exe|dll)$/)\n        if file_name.scan(/\\d/).length > 3\n            'No'\n\
    \        else\n            'Yes'\n        end\n    else\n        'No'\n    end\n\
    end", "  file_name = file_name.split(\".\")\n  file_name[0] =~ /[a-zA-Z]/ ? match\
    \ = true : match = false\n  if file_name[1] == \"txt\" || file_name[1] == \"exe\"\
    \ || file_name[1] == \"dll\"\n    return match == true ? \"Yes\" : \"No\"\n  else\n\
    \    return \"No\"\n  end\nend", "    #write your code here\nend", "  file_name\
    \ = file_name.downcase\n  return 'No' if file_name.count('0-9') > 3\n  return\
    \ 'No' if file_name.scan(/\\./).count != 1\n  return 'No' if file_name.split('.')[0].empty?\n\
    \  return 'No' if file_name.split('.')[0].split('')[0].scan(/[a-z]/).empty?\n\
    \  return 'No' if ['txt', 'exe', 'dll'].include?(file_name.split('.')[1])\n  'Yes'\n\
    end", "  # write your code here\nend", "  # <YOUR CODE GOES HERE>\nend", "  if\
    \ file_name.count(\"0-9\") > 3 || file_name.count(\".\") != 1 || file_name.split(\"\
    .\").first.empty? || !file_name.split(\".\").first.match(/^[a-zA-Z]/) || !file_name.split(\"\
    .\").last.match(/txt|exe|dll/)\n    \"No\"\n  else\n    \"Yes\"\n  end\nend",
  "    arr = file_name.split(\".\")\n    if (file_name.count(\"0-9\") > 3 || file_name.count(\"\
    .\") != 1 || arr[0].empty? || arr[0][0].match(/[a-zA-Z]/) == nil || arr[1] !=\
    \ \"txt\" && arr[1] != \"exe\" && arr[1] != \"dll\")\n        return \"No\"\n\
    \    else\n        return \"Yes\"\n    end\nend", "  if file_name.split('.')[0]\
    \ =~ /^[a-zA-Z]/ && file_name.split('.')[0].split(/[a-zA-Z]/).join.size < 4 &&\
    \ file_name.split('.')[1] == 'txt' || file_name.split('.')[1] == 'exe' || file_name.split('.')[1]\
    \ == 'dll'\n    'Yes'\n  else\n    'No'\n  end\nend", "  r = true\n  i = 0\n \
    \ for i in 0..file_name.length-1\n    if file_name[i] =~ /[^a-zA-Z]/\n      r\
    \ = false\n    end\n  end\n  return r\nend", "  number_of_digits = 0\n  file_name.split('').each\
    \ do |char|\n    if ('0'..'9').include?(char)\n      number_of_digits += 1\n \
    \   end\n  end\n  if number_of_digits > 3\n    return 'No'\n  end\n  file_name_parts\
    \ = file_name.split('.')\n  if file_name_parts.length != 2\n    return 'No'\n\
    \  end\n  if file_name_parts[0].empty? || !(file_name_parts[0][0].match(/^[[:alpha:]]$/))\n\
    \    return 'No'\n  end\n  if !['txt', 'exe', 'dll'].include?(file_name_parts[1])\n\
    \    return 'No'\n  end\n  return 'Yes'\nend", "\tsubstr = file_name.split(\"\
    .\")\n\tsubstr1 = substr[0]\n\tsubstr2 = substr[1]\n\tif file_name.count(\"0-9\"\
    ) > 3\n\t\treturn \"No\"\n\telsif substr.length != 2\n\t\treturn \"No\"\n\telsif\
    \ substr1.length == 0\n\t\treturn \"No\"\n\telsif substr1[0] =~ /[a-zA-Z]/\n\t\
    \treturn \"Yes\"\n\telsif substr2 =~ /^(txt|exe|dll)$/\n\t\treturn \"Yes\"\n\t\
    else\n\t\treturn \"No\"\n\tend\nend", "\tdigits = [\"0\",\"1\",\"2\",\"3\",\"\
    4\",\"5\",\"6\",\"7\",\"8\",\"9\"]\n\tif file_name.count(\".\") == 1 && file_name.count(\"\
    \\\\w\") > 2 && file_name.count(\"\\\\W\") == 1 && file_name.count(\"\\\\d\")\
    \ < 4 &&  file_name[0].match(/^[[:alpha:]]/) && (file_name[-3..-1] == \"txt\"\
    \ || file_name[-3..-1] == \"exe\" || file_name[-3..-1] == \"dll\")\n\t\t\"Yes\"\
    \n\telse\n\t\t\"No\"\n\tend\nend", "  # Write your code here\n  substrings = file_name.split(\"\
    .\")\n  #Checking the number of digits\n  digits = substrings[0].scan(/\\d/).length\n\
    \  if (digits > 3)\n    return \"No\"\n  end\n  # Checking if it contains exactly\
    \ one dot\n  if (substrings.length != 2)\n    return \"No\"\n  end\n  # Checking\
    \ if the first part is a valid string\n  if (substrings[0] =~ /^[a-zA-Z]+/)\n\
    \    # Checking if it contains one of the following valid formats (['txt', 'exe',\
    \ 'dll'])\n    if (substrings[1] == \"txt\" || substrings[1] == \"exe\" || substrings[1]\
    \ == \"dll\")\n      return \"Yes\"\n    end\n  end\n  return \"No\"\nend", " \
    \   # Write your code here\n    if file_name.scan(/\\d/).length > 3\n        return\
    \ 'No'\n    elsif file_name.scan(/\\./).length != 1\n        return 'No'\n   \
    \ elsif /^[a-zA-Z]/.match(file_name.split('.')[0]) == nil\n        return 'No'\n\
    \    elsif /^[a-zA-Z]/.match(file_name.split('.')[0]) != nil\n        if file_name.split('.')[1]\
    \ == 'txt' || file_name.split('.')[1] == 'exe' || file_name.split('.')[1] == 'dll'\n\
    \            return 'Yes'\n        else\n            return 'No'\n        end\n\
    \    end\nend", "  # TODO: \nend", "\t# Create an array of the file's name, then\
    \ split the string by '.'\n\tfile_array = file_name.split(\".\")\n\t# Test if\
    \ the substring before the dot is empty\n\tif file_array[0] == \"\"\n\t\t# If\
    \ yes, return 'No'\n\t\treturn \"No\"\n\tend\n\t# Test if the file's name contains\
    \ exactly one dot\n\tif file_array.count(\".\") != 1\n\t\t# If not, return 'No'\n\
    \t\treturn \"No\"\n\tend\n\t# Test if the file's name have not more than three\
    \ digits\n\tif file_array[0].count(\"0-9\") > 3\n\t\t# If yes, return 'No'\n\t\
    \treturn \"No\"\n\tend\n\t# Test if the substring before the dot starts with a\
    \ letter from the latin alphapet\n\tif file_array[0].count(\"a-zA-Z\") == 0\n\t\
    \t# If not, return 'No'\n\t\treturn \"No\"\n\tend\n\t# Test if the substring after\
    \ the dot is one of these: ['txt', 'exe', 'dll']\n\tif file_array[1] != \"txt\"\
    \ && file_array[1] != \"exe\" && file_array[1] != \"dll\"\n\t\t# If not, return\
    \ 'No'\n\t\treturn \"No\"\n\tend\n\t# If all the tests were passed, return 'Yes'\n\
    \treturn \"Yes\"\nend", "  # Split the string into two parts, the first part being\
    \ the name of the file, and the\n  # second part being the file's extension.\n\
    \  parts = file_name.split('.')\n  # If the second part of the file's name is\
    \ not one of the valid extensions, then the\n  # file's name is not valid.\n \
    \ if parts[1] != 'txt' && parts[1] != 'exe' && parts[1] != 'dll'\n    return 'No'\n\
    \  end\n  # Count the number of digits in the first part of the file's name\n\
    \  digits_count = parts[0].scan(/\\d/).count\n  # If the number of digits is more\
    \ than 3, then the file's name is not valid.\n  if digits_count > 3\n    return\
    \ 'No'\n  end\n  # If the first part of the file's name is empty, then the file's\
    \ name is not valid.\n  if parts[0].empty?\n    return 'No'\n  end\n  # If the\
    \ first character of the first part of the file's name is not a letter, then the\n\
    \  # file's name is not valid.\n  if parts[0][0] !~ /[a-zA-Z]/\n    return 'No'\n\
    \  end\n  # If the code reaches this point, then the file's name is valid.\n \
    \ return 'Yes'\nend", "  alpha_check = /^[a-zA-Z]/\n  dot_check = /\\A[a-zA-Z]+\\\
    .[a-zA-Z]+\\z/\n  dll_check = /\\.dll\\z/\n  txt_check = /\\.txt\\z/\n  exe_check\
    \ = /\\.exe\\z/\n  if file_name.scan(/\\d/).length <= 3 && file_name.match(alpha_check)\
    \ && \n    file_name.match(dot_check) && (file_name.match(dll_check) || file_name.match(txt_check)\
    \ || file_name.match(exe_check))\n    'Yes'\n  else\n    'No'\n  end\nend", " \
    \ if file_name =~ /^[a-zA-Z][\\w]*\\.(txt|exe|dll)$/\n    'Yes'\n  else\n    'No'\n\
    \  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
