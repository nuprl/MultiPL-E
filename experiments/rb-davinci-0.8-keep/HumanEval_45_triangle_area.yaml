name: HumanEval_45_triangle_area
language: rb
prompt: "# Given length of a side and high return area for a triangle.\n# >>> triangle_area(5,\
  \ 3)\n# 7.5\ndef triangle_area(a, h)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_triangle_area\n\
  \    candidate = method(:triangle_area)\n    assert_equal(7.5, candidate.call(5,\
  \ 3))\n    assert_equal(2.0, candidate.call(2, 2))\n    assert_equal(40.0, candidate.call(10,\
  \ 8))\n  end\nend\n"
completions: ["  (a * h) / 2\nend", "  0.5 * a * h\nend", "    return (a * h) / 2\n\
    end", "  a * h * 0.5\nend", "\ta * h / 2\nend", "  a * h / 2\nend", "  a * h /\
    \ 2\nend", "  return a*h/2\nend", "  a * h / 2\nend", "  0.5 * a * h\nend", " \
    \ a*h/2\nend", "\ta * h / 2\nend", "  a * h / 2\nend", "  return a * h / 2\nend",
  "  a * h / 2\nend", "  (a * h) / 2\nend", "  return (a * h) / 2\nend", "  a * h\
    \ / 2\nend", "  (a * h) / 2\nend", "  0.5 * a * h\nend", "  a * h / 2\nend", " \
    \ a*h/2\nend", "  (a*h)/2\nend", "  ((a * h) / 2.0).round(2)\nend", "\ta*h*0.5\n\
    end", "  a * h * 0.5\nend", "  a * h / 2\nend", "  (a*h)/2\nend", "  a * h / 2\n\
    end", "\ta * h / 2\nend", "  (a * h) / 2\nend", "  return a * h / 2\nend", " \
    \ a * h / 2\nend", "  return a * h * 0.5\nend", "\ta * h / 2\nend", "  return\
    \ a * h / 2\nend", "  return a * h / 2\nend", "  0.5 * a * h\nend", "  (a * h)\
    \ / 2\nend", "  a * h / 2\nend", "  (a * h) / 2\nend", "  0.5 * a * h\nend", " \
    \ a * h / 2\nend", "  area = 0.5 * a * h\n  return area\nend", "  return a*h/2\n\
    end", "  puts \"a=#{a}, h=#{h}, S=#{a*h/2}\"\nend", "  return a * h / 2\nend",
  "  a * h / 2\nend", "  a * h / 2\nend", "  (a * h) / 2\nend", "  (a * h) / 2\nend",
  "  (a * h) / 2\nend", "  a.to_f * h.to_f / 2\nend", "  a * h * 0.5\nend", "  return\
    \ a * h / 2\nend", "  (a * h) / 2\nend", "  return a * h / 2\nend", "  return\
    \ a * h / 2\nend", "  a * h / 2\nend", "  a * h / 2\nend", "  (a * h) / 2\nend",
  "  (a*h)/2\nend", "  a * h / 2\nend", "  a * h / 2\nend", "  a*h/2\nend", "  a *\
    \ h / 2\nend", "    area = a * h / 2\n    area\nend", "  (a * h) / 2\nend", " \
    \ (a * h) / 2\nend", "  a * h / 2\nend", "  (a * h) / 2\nend", "  (a*h).fdiv(2)\n\
    end", "  (a * h) / 2\nend", "  a*h/2\nend", "  a * h / 2\nend", "  puts a * h\
    \ / 2\nend", "  return (a*h).to_f/2\nend", "  return a * h / 2\nend", "  if a\
    \ > 0 && h > 0\n    return a * h / 2\n  else\n    return 0\n  end\nend", "  a*h/2\n\
    end", "  area = (a * h).to_f / 2\n  puts area\nend", "\ta * h / 2\nend", "  a\
    \ * h / 2\nend", "  a * h / 2\nend", "  a.to_f * h.to_f / 2\nend", "  (a * h)\
    \ / 2\nend", "\ta.to_f * h.to_f / 2\nend", "    0.5 * a * h\nend", "  return 0.5\
    \ * a * h\nend", "  a * h / 2\nend", "  return a * h * 0.5\nend", "  a * h / 2\n\
    end", "  area = (a * h) / 2\n  return area\nend", "  a * h / 2\nend", "  return\
    \ a * h / 2\nend", "  return a*h/2\nend", "  area = (a * h).to_f / 2\n  puts area\n\
    end", "  (a * h)/2\nend", "  return a * h / 2\nend", "  (a*h) / 2\nend", "\ta*h/2\n\
    end", "  a * h * 0.5\nend", "  return 0.5 * a * h\nend", "  a * h / 2\nend", " \
    \ return (a * h) / 2\nend", "  0.5 * a * h\nend", "  (a * h) / 2\nend", "  return\
    \ a * h / 2\nend", "  area = (a * h)/2\n  return area\nend", "  0.5 * a * h\n\
    end", "  a * h / 2\nend", "  a * h / 2\nend", "  a * h * 0.5\nend", "  a*h/2\n\
    end", "  (a * h) / 2\nend", "  a * h / 2\nend", "  0.5 * a * h\nend", "  (a *\
    \ h) / 2\nend", "  return a*h/2\nend", "  (a * h) / 2\nend", "  return a * h /\
    \ 2\nend", "  (a * h) / 2\nend", "  a * h / 2\nend", "  0.5 * a * h\nend", " \
    \ a * h / 2\nend", "\ta*h/2\nend", "  return a * h * 0.5\nend", "  a * h / 2\n\
    end", "  return a * h / 2\nend", "  (a * h) / 2\nend", "  area = (a * h) / 2\n\
    \  area\nend", "  a * h / 2\nend", end, "  a * h * 0.5\nend", "  a * h / 2\nend",
  "\t(a * h) / 2\nend", "  return (a * h) / 2\nend", "  a*h/2\nend", "\treturn 0.5\
    \ * a * h\nend\nputs \"Triangle area is: #{triangle_area(5, 3)}\"", "  (a * h)\
    \ / 2\nend", end, "  return a * h / 2\nend", "  a * h / 2\nend", "  a * h / 2\n\
    end", "  a * h / 2\nend", "  return (a * h)/2\nend", "  a * h / 2\nend", "  0.5\
    \ * a * h\nend", "  # return a*h/2\n  # return 0.5*a*h\n  return (a*h).to_f/2\n\
    end", "  return a*h/2\nend", "  a * h / 2\nend", "  return a * h * 0.5\nend",
  "  a * h / 2\nend", "  a * h / 2\nend", "  a.to_f * h.to_f / 2\nend", "  if a >\
    \ 0 && h > 0\n    (a * h) / 2\n  else\n    nil\n  end\nend", "  0.5 * a * h\n\
    end", "  0.5 * a * h\nend", "  a * h / 2\nend", "  return a*h/2\nend", "  a *\
    \ h / 2\nend", "  (a * h) / 2\nend", "  a * h / 2\nend", "  a*h/2\nend", "  a\
    \ * h / 2\nend", "  # a * h / 2\n  (a * h) / 2\nend", "  0.5 * a * h\nend", "\t\
    (0.5 * a * h).round(2)\nend", "  (a * h) / 2\nend", "  (a * h)/2\nend", "  a *\
    \ h / 2\nend", "  (a * h) / 2\nend", "  return (a * h / 2)\nend", "  (a * h) /\
    \ 2\nend", "  a * h * 0.5\nend", "  return 0.5 * a * h\nend", "  return a * h\
    \ * 0.5\nend", "  a * h / 2\nend", "\ta * h / 2\nend", "  return a*h/2\nend",
  "  a * h / 2\nend", "  return a * h / 2\nend", "\treturn a*h/2\nend", "  a * h /\
    \ 2\nend", "    return a * h / 2\nend", "  a * h / 2\nend", "  0.5 * a * h\nend",
  "  a * h / 2\nend", "\ta * h / 2\nend", "  (a * h) / 2\nend", "\ta * h / 2\nend",
  "\t((a * h) / 2)\nend", "  a * h / 2\nend", "  (a * h) / 2\nend", "  area = a *\
    \ h / 2\n  return area\nend", "  ((a * h) / 2).round(2)\nend", "  (a*h/2.0).round(1)\n\
    end", "  (a * h) / 2\nend", "  a * h / 2\nend", "  a * h / 2\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
