name: HumanEval_56_correct_bracketing
language: rb
prompt: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
  \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n\
  # False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\"\
  )\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
  \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
  <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
  \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
  ))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false,\
  \ candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n  \
  \  assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\"\
  >\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false,\
  \ candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"\
  <><><<><>><>>><>\"))\n  end\nend\n"
completions: ["  if brackets == ''\n    return True\n  elif brackets[0] == '<'\n \
    \   return brackets[-1] == '>' and correct_bracketing(brackets[1..-2])\n  else\n\
    \    return False\n  end\nend", "  # if brackets.length % 2 != 0\n  #   return\
    \ false\n  # end\n  # left_counter = 0\n  # right_counter = 0\n  # brackets.each_char\
    \ do |char|\n  #   if char == \"<\"\n  #     left_counter += 1\n  #   elsif char\
    \ == \">\"\n  #     right_counter += 1\n  #   end\n  # end\n  # if left_counter\
    \ == right_counter\n  #   return true\n  # else\n  #   return false\n  # end\n\
    \  #\n  # if brackets.length % 2 != 0\n  #   return false\n  # end\n  # left_counter\
    \ = 0\n  # right_counter = 0\n  # brackets.each_char do |char|\n  #   if char\
    \ == \"<\"\n  #     left_counter += 1\n  #   elsif char == \">\"\n  #     right_counter\
    \ += 1\n  #   end\n  #   if right_counter > left_counter\n  #     return false\n\
    \  #   end\n  # end\n  # if left_counter == right_counter\n  #   return true\n\
    \  # else\n  #   return false\n  # end\n  #\n  # if brackets.length % 2 != 0\n\
    \  #   return false\n  # end\n  # left_counter = 0\n  # right_counter = 0\n  #\
    \ brackets.each_char do |char|\n  #   if char == \"<\"\n  #     left_counter +=\
    \ 1\n  #   elsif char == \">\"\n  #     right_counter += 1\n  #   end\n  #   if\
    \ right_counter > left_counter\n  #     return false\n  #   end\n  # end\n  #\
    \ return true\n  #\n  if brackets.length % 2 != 0\n    return false\n  end\n \
    \ left_counter = 0\n  right_counter = 0\n  brackets.each_char do |char|\n    if\
    \ char == \"<\"\n      left_counter += 1\n    elsif char == \">\"\n      right_counter\
    \ += 1\n    end\n    if right_counter > left_counter\n      return false\n   \
    \ end\n  end\n  if left_counter ==", "  count = 0\n  brackets.chars.each do |char|\n\
    \    count += 1 if char == \"<\"\n    count -= 1 if char == \">\"\n    return\
    \ false if count < 0\n  end\n  count == 0\nend", "  count = 0\n  for i in 0...brackets.length\n\
    \    if brackets[i] == \"<\"\n      count += 1\n    elsif brackets[i] == \">\"\
    \n      count -= 1\n    end\n    if count < 0\n      return false\n    end\n \
    \ end\n  return true\nend", "  opening = 0\n  brackets.each_char do |char|\n \
    \   opening += 1 if char == \"<\"\n    opening -= 1 if char == \">\"\n    return\
    \ false if opening < 0\n  end\n  opening == 0\nend", "    count = 0\n    brackets.each_char\
    \ do |bracket|\n        if bracket == \"<\"\n            count += 1\n        elsif\
    \ bracket == \">\"\n            count -= 1\n        end\n        if count < 0\n\
    \            return False\n        end\n    end\n    return count == 0\nend",
  "  # initialize a counter to hold the total number of \"<\"\n  count = 0\n  # initialize\
    \ a new counter to hold the number of \"<\" in a row\n  consecutive_count = 0\n\
    \  # iterate through the string\n  brackets.each_char do |char|\n    # if the\
    \ character is \"<\" increment both counters\n    if char == \"<\"\n      count\
    \ += 1\n      consecutive_count += 1\n    # if the character is \">\" and consecutive_count\
    \ is zero\n    # then the bracketing is not correct\n    elsif char == \">\"\n\
    \      consecutive_count -= 1\n      if consecutive_count < 0\n        return\
    \ false\n      end\n    end\n  end\n  # if the count is zero, then the string\
    \ only contains \">\"\n  if count == 0\n    return false\n  end\n  # if the program\
    \ has gotten this far, then it must be good\n  true\nend", "    stack = []\n \
    \   brackets.chars.each do |el|\n        if (el == \"<\")\n            stack.push(el)\n\
    \        elsif (el == \">\")\n            if stack.empty?\n                return\
    \ false\n            else\n                stack.pop()\n            end\n    \
    \    end\n    end\n    return stack.empty?\nend", "  # TODO: write this function\n\
    end", "    count_of_open_brackets = 0\n    count_of_close_brackets = 0\n    brackets.each_char\
    \ do |char|\n        if char == \"<\"\n            count_of_open_brackets += 1\n\
    \        elsif char == \">\"\n            count_of_close_brackets += 1\n     \
    \   end\n    end\n    return count_of_open_brackets == count_of_close_brackets\n\
    end", "  found_left_bracket = false\n  open_brackets = 0\n  brackets.split(\"\"\
    ).each do |bracket|\n    if bracket == \"<\"\n      found_left_bracket = true\n\
    \      open_brackets += 1\n    elsif bracket == \">\"\n      open_brackets -=\
    \ 1\n    end\n    return false if open_brackets < 0\n  end\n  found_left_bracket\
    \ && open_brackets == 0\nend", "  brackets.gsub!(/<>/, \"\") # replace any <>\
    \ with \"\"\n  brackets.length == 0\nend", "  opening_count = 0\n  closing_count\
    \ = 0\n  brackets.each_char do |char|\n    if char == \"<\"\n      opening_count\
    \ += 1\n    elsif char == \">\"\n      closing_count += 1\n    end\n  end\n  if\
    \ opening_count == closing_count\n    return true\n  else\n    return false\n\
    \  end\nend", "  count = 0\n  brackets.split(\"\").each do |bracket|\n    if bracket\
    \ == \"<\"\n      count += 1\n    elsif bracket == \">\"\n      count -= 1\n \
    \   end\n    return false if count < 0\n  end\n  return false if count != 0\n\
    \  true\nend", "  parens = 0\n  brackets.each_char do |bracket|\n    if bracket\
    \ == \"<\"\n      parens += 1\n    elsif bracket == \">\"\n      parens -= 1\n\
    \    end\n    if parens < 0\n      return false\n    end\n  end\n  return parens\
    \ == 0\nend", "    bracket_count = 0\n    for i in 0..brackets.length-1\n    \
    \    if brackets[i] == \"<\"\n            bracket_count += 1\n        elsif brackets[i]\
    \ == \">\"\n            bracket_count -= 1\n        end\n        if bracket_count\
    \ < 0\n            return False\n        end\n    end\n    if bracket_count ==\
    \ 0\n        return True\n    else\n        return False\n    end\nend", "  return\
    \ brackets.count('<') == brackets.count('>')\nend", "  while brackets.include?(\"\
    <>\")\n    brackets.gsub!(\"<>\", \"\")\n  end\n  brackets.empty?\nend", "\topening_count\
    \ = 0\n\tclosing_count = 0\n\tbrackets.each_char do |char|\n\t\tif char == \"\
    <\"\n\t\t\topening_count += 1\n\t\telsif char == \">\"\n\t\t\tclosing_count +=\
    \ 1\n\t\tend\n\tend\n\treturn opening_count == closing_count\nend", "    # check\
    \ if the brackets string begins with \"<\"\n    # if not, return False\n    #\
    \ use the index method to iterate through the string\n    # if we have \"<\" at\
    \ i and \"<\" at i+1, we have an incorrect bracketing\n    # if we have \">\"\
    \ at i and \">\" at i+1, we have an incorrect bracketing\n    # if we have \"\
    <\" at i and \">\" at i+1, we have an incorrect bracketing\n    # in all other\
    \ cases, we have correct bracketing\nend", "  # your code here\nend", "  left_brackets\
    \ = []\n  right_brackets = []\n  brackets.each_char do |bracket|\n    if bracket\
    \ == \"<\"\n      left_brackets << bracket\n    elsif bracket == \">\"\n     \
    \ right_brackets << bracket\n    end\n  end\n  right_brackets.count == left_brackets.count\n\
    end", end, "  stack = []\n  for bracket in brackets.split(\"\")\n    if bracket\
    \ == \"<\"\n      stack.push(bracket)\n    elsif bracket == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "\t# Your code here\nend", "    num_open = 0\n \
    \   num_close = 0\n    brackets.each_char do |c|\n        if c == \"<\"\n    \
    \        num_open += 1\n        elsif c == \">\"\n            num_close += 1\n\
    \        end\n        if num_close > num_open\n            return False\n    \
    \    end\n    end\n    if num_open == num_close\n        return True\n    else\n\
    \        return False\n    end\nend", "  count = 0\n  for i in 0..brackets.length\n\
    \    count += 1 if brackets[i] == \"<\"\n    count -= 1 if brackets[i] == \">\"\
    \n    return false if count < 0\n  end\n  count == 0\nend", "  stack = []\n  (0...brackets.length).each\
    \ do |i|\n    if brackets[i] == \"<\"\n      stack.push(brackets[i])\n    elsif\
    \ brackets[i] == \">\"\n      if stack.length == 0\n        return false\n   \
    \   else\n        stack.pop\n      end\n    end\n  end\n  stack.length == 0\n\
    end", "  open_brackets = 0\n  brackets.each_char do |char|\n    if char == \"\
    <\"\n      open_brackets += 1\n    elsif char == \">\"\n      open_brackets -=\
    \ 1\n    end\n    if open_brackets < 0\n      return false\n    end\n  end\n \
    \ return open_brackets == 0\nend", "  left_brackets = 0\n  right_brackets = 0\n\
    \  brackets.each_char do |c|\n    if c == \"<\"\n      left_brackets += 1\n  \
    \  elsif c == \">\"\n      right_brackets += 1\n    end\n    if right_brackets\
    \ > left_brackets\n      return false\n    end\n  end\n  left_brackets == right_brackets\n\
    end", "  open = 0\n  closed = 0\n  brackets.each_char do |bracket|\n    if bracket\
    \ == \"<\"\n      open += 1\n    elsif bracket == \">\"\n      closed += 1\n \
    \   end\n  end\n  if open == closed\n    return true\n  else\n    return false\n\
    \  end\nend", "\treturn False if brackets[0] == \">\"\n\tif brackets.length %\
    \ 2 == 1\n\t\treturn False\n\tend\n\twhile brackets.length > 0\n\t\topening =\
    \ brackets.index(\"<\")\n\t\tif opening == nil\n\t\t\treturn False\n\t\tend\n\t\
    \tclosing = brackets.index(\">\")\n\t\tbrackets.slice!(opening..closing)\n\tend\n\
    \treturn True\nend", "  #when first find \"<\", count add 1, when find \">\",\
    \ count minus 1\n  if brackets[0] == \">\"\n    return false\n  else\n    count\
    \ = 0\n    brackets.each_char do |ch|\n      if ch == \"<\"\n        count +=\
    \ 1\n      elsif ch == \">\"\n        count -= 1\n      end\n      if count <\
    \ 0\n        return false\n      end\n    end\n    return count == 0\n  end\n\
    end", "  i = 0\n  while i < brackets.length\n    if brackets[i] == \"<\"\n   \
    \   if brackets[i+1] == \">\"\n        i += 2\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\n  return true\nend",
  "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.size == 0\n        return False\n   \
    \   else\n        stack.pop\n      end\n    end\n  end\n  return stack.size ==\
    \ 0\nend", "  bracket_count = 0\n  brackets.each_char do |bracket|\n    if bracket\
    \ == \"<\"\n      bracket_count += 1\n    elsif bracket == \">\"\n      bracket_count\
    \ -= 1\n    end\n    return false if bracket_count < 0\n  end\n  bracket_count\
    \ == 0\nend", "    while brackets.index(\"<>\") != nil\n        brackets = brackets.gsub(\"\
    <>\", \"\")\n    end\n    return brackets == \"\"\nend", "\tcounter = 0\n\tbrackets.each_char\
    \ do |char|\n\t\tif char == \"<\"\n\t\t\tcounter += 1\n\t\telsif char == \">\"\
    \n\t\t\tcounter -= 1\n\t\tend\n\t\tif counter < 0\n\t\t\treturn false\n\t\tend\n\
    \tend\n\tif counter != 0\n\t\treturn false\n\tend\n\treturn true\nend", "  count\
    \ = 0\n  brackets.chars.each do |char|\n    if char == \"<\"\n      count += 1\n\
    \    elsif char == \">\"\n      count -= 1\n    end\n    return false if count\
    \ < 0\n  end\n  count == 0\nend", "    open = []\n    for b in brackets:\n   \
    \     if b == \"<\":\n            open.append(b)\n        elif b == \">\":\n \
    \           if open.empty?\n                return False\n            else\n \
    \               open.pop\n            end\n        end\n    end\n    return open.empty?\n\
    end", "\tif !(brackets.count(\"<\") == brackets.count(\">\"))\n\t\treturn false\n\
    \tend\n\tif brackets.count(\"<\") == 0\n\t\treturn true\n\tend\n\topening = 0\n\
    \tclosing = 0\n\tbrackets.each_char do |bracket|\n\t\tif bracket == \"<\"\n\t\t\
    \topening += 1\n\t\telsif bracket == \">\"\n\t\t\tclosing += 1\n\t\tend\n\t\t\
    if closing > opening\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
  "  # your code here\nend", "  if brackets.length == 0\n    return False\n  else\n\
    \    opening_brackets = 0\n    closing_brackets = 0\n    brackets.each_char do\
    \ |char|\n      if char == \"<\"\n        opening_brackets += 1\n      else\n\
    \        closing_brackets += 1\n      end\n    end\n    if opening_brackets ==\
    \ closing_brackets\n      return True\n    else\n      return False\n    end\n\
    \  end\nend", "\nend", "    bracket = 0\n    for i in 0..brackets.length\n   \
    \     if brackets[i] == \"<\"\n            bracket += 1\n        elsif brackets[i]\
    \ == \">\"\n            bracket -= 1\n        end\n        if bracket < 0\n  \
    \          return false\n        end\n    end\n    if bracket != 0\n        return\
    \ false\n    end\n    return true\nend", "  stack = []\n  count = 0\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.length == 0\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.length == 0\nend", "  char_array =\
    \ brackets.split(\"\")\n  if char_array.length % 2 != 0\n    return false\n  end\n\
    \  left_bracket_count = 0\n  right_bracket_count = 0\n  char_array.each do |char|\n\
    \    if char == \"<\"\n      left_bracket_count += 1\n    elsif char == \">\"\n\
    \      right_bracket_count += 1\n    end\n  end\n  if left_bracket_count == right_bracket_count\n\
    \    return true\n  else\n    return false\n  end\nend", "  temp = brackets.gsub(\"\
    <>\", \"\")\n  return true if temp == \"\"\n  correct_bracketing(temp)\nend",
  "    num_of_brackets = 0\n    for i in 0...brackets.length\n        if brackets[i]\
    \ == \"<\"\n            num_of_brackets += 1\n        elsif brackets[i] == \"\
    >\"\n            num_of_brackets -= 1\n        end\n        if num_of_brackets\
    \ < 0\n            return False\n        end\n    end\n    if num_of_brackets\
    \ == 0\n        return True\n    else\n        return False\n    end\nend", "\n\
    end", "  brackets.count('<') == brackets.count('>')\nend", "  stack = []\n  brackets.chars.each\
    \ do |c|\n    if c == \"<\"\n      stack.push(c)\n    else\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "    stack = []\n    for bracket in brackets.split(\"\"\
    )\n        if bracket == \"<\"\n            stack.push(bracket)\n        elsif\
    \ bracket == \">\"\n            stack.pop()\n        end\n    end\n    return\
    \ stack.empty?\nend", "  number = 0\n  brackets.each_char do |char|\n    number\
    \ += 1 if char == \"<\"\n    number -= 1 if char == \">\"\n    return false if\
    \ number < 0\n  end\n  return number == 0\nend", "  count = 0\n  brackets.split(\"\
    \").each do |i|\n    count += 1 if i == \"<\"\n    count -= 1 if i == \">\"\n\
    \    return false if count < 0\n  end\n  count == 0\nend", "    # get the length\
    \ of the brackets\n    length = brackets.length", "  stack = []\n  brackets.each_char\
    \ do |char|\n    case char\n    when \"<\"\n      stack.push(char)\n    when \"\
    >\"\n      stack.pop\n    end\n  end\n  return stack.length == 0\nend", "  # your\
    \ code here\nend", "\tcount_l = 0\n\tcount_r = 0\n\tfor i in 0...brackets.length\n\
    \t\tif brackets[i] == \"<\"\n\t\t\tcount_l += 1\n\t\telsif brackets[i] == \">\"\
    \n\t\t\tcount_r += 1\n\t\tend\n\tend\n\tif count_l == count_r\n\t\treturn true\n\
    \telse\n\t\treturn false\n\tend\nend", "\tcount = 0\n\tfor i in 0...brackets.length\n\
    \t\tcount += 1 if brackets[i] == \"<\"\n\t\tcount -= 1 if brackets[i] == \">\"\
    \n\t\treturn false if count < 0\n\tend\n\tcount == 0\nend", "  count_open = 0\n\
    \  count_close = 0\n  for i in 0..brackets.length-1\n    if brackets[i] == \"\
    <\"\n      count_open += 1\n    else\n      count_close += 1\n    end\n  end\n\
    \  if count_open == count_close\n    return true\n  else\n    return false\n \
    \ end\nend", "  num_open = 0\n  for char in brackets.split(\"\")\n    if char\
    \ == \"<\"\n      num_open += 1\n    elsif char == \">\"\n      num_open -= 1\n\
    \    end\n    if num_open < 0\n      return False\n    end\n  end\n  return num_open\
    \ == 0\nend", "    stack = []\n    brackets.each_char do |letter|\n        if\
    \ letter == \"<\"\n            stack.push(letter)\n        elsif letter == \"\
    >\"\n            if stack.empty?\n                return false\n            else\n\
    \                stack.pop\n            end\n        end\n    end\n    return\
    \ stack.empty?\nend", '', '  return false if brackets.size.odd?', "    # brackets_count\
    \ = 0\n    # for i in 0..brackets.length-1\n    #     if brackets[i] == \"<\"\n\
    \    #         brackets_count += 1\n    #     elsif brackets[i] == \">\"\n   \
    \ #         brackets_count -= 1\n    #     end\n    #     if brackets_count <\
    \ 0\n    #         return False\n    #     end\n    # end\n    # return brackets_count\
    \ == 0\n    left_brackets = 0\n    right_brackets = 0\n    for i in 0..brackets.length-1\n\
    \        if brackets[i] == \"<\"\n            left_brackets += 1\n        elsif\
    \ brackets[i] == \">\"\n            right_brackets += 1\n        end\n       \
    \ if right_brackets > left_brackets\n            return False\n        end\n \
    \   end\n    return left_brackets == right_brackets\nend", "  left_count = 0\n\
    \  right_count = 0\n  brackets.each_char do |x|\n    if x == \"<\"\n      left_count\
    \ += 1\n    elsif x == \">\"\n      right_count += 1\n    end\n  end\n  left_count\
    \ == right_count\nend", "  count = 0\n  for i in 0..brackets.length - 1\n    if\
    \ brackets[i] == \"<\"\n      count += 1\n    elsif brackets[i] == \">\"\n   \
    \   count -= 1\n    end\n    if count < 0\n      return False\n    end\n  end\n\
    \  return count == 0\nend", "  if brackets == \"\"\n    return true\n  elsif brackets.length\
    \ % 2 != 0\n    return false\n  elsif brackets[0] == \">\"\n    return false\n\
    \  else\n    smaller_brackets = brackets[1..-1]\n    return correct_bracketing(smaller_brackets)\n\
    \  end\nend", "\tif brackets.length % 2 != 0\n\t\treturn false\n\tend\n\tif brackets[0]\
    \ == \">\"\n\t\treturn false\n\tend\n\tif brackets[brackets.length - 1] == \"\
    <\"\n\t\treturn false\n\tend\n\tn = 0\n\twhile n < brackets.length\n\t\tif brackets[n]\
    \ == \"<\"\n\t\t\ti = n + 1\n\t\t\twhile i < brackets.length\n\t\t\t\tif brackets[i]\
    \ == \">\"\n\t\t\t\t\tbrackets[n] = \"\"\n\t\t\t\t\tbrackets[i] = \"\"\n\t\t\t\
    \t\tbreak\n\t\t\t\tend\n\t\t\t\ti += 1\n\t\t\tend\n\t\tend\n\t\tn += 1\n\tend\n\
    \tif brackets.include?(\"<\") || brackets.include?(\">\")\n\t\treturn false\n\t\
    end\n\treturn true\nend", "  # not enough brackets to test\n  if brackets.length\
    \ < 2\n    return false\n  end", "  return brackets.count(\"<\") == brackets.count(\"\
    >\")\nend", "\tif brackets == \"\"\n\t\treturn true\n\tend\n\tif brackets[0] ==\
    \ \">\"\n\t\treturn false\n\telsif brackets[0] == \"<\"\n\t\tif brackets.length\
    \ == 1\n\t\t\treturn false\n\t\telse\n\t\t\treturn correct_bracketing(brackets[1..-1])\n\
    \t\tend\n\tend\nend", "  count = 0\n  for i in 0..brackets.length - 1\n    if\
    \ brackets[i] == \"<\"\n      count += 1\n    elsif brackets[i] == \">\"\n   \
    \   count -= 1\n    end\n    if count < 0\n      return False\n    end\n  end\n\
    \  return count == 0\nend", "\topen = []\n\tbrackets.each_char do |x|\n\t\tif\
    \ x == \"<\"\n\t\t\topen << x\n\t\telsif x == \">\"\n\t\t\treturn false if open.empty?\n\
    \t\t\topen.pop\n\t\tend\n\tend\n\topen.empty?\nend", "  while brackets.include?(\"\
    <>\")\n    brackets.gsub!(\"<>\", \"\")\n  end\n  return brackets.length == 0\n\
    end", "\topen_brackets = 0\n\tfor i in 0..brackets.length-1\n\t\tif brackets[i]\
    \ == \"<\"\n\t\t\topen_brackets = open_brackets + 1\n\t\telsif brackets[i] ==\
    \ \">\"\n\t\t\topen_brackets = open_brackets - 1\n\t\tend\n\t\tif open_brackets\
    \ < 0\n\t\t\treturn false\n\t\tend\n\tend\n\tif open_brackets != 0\n\t\treturn\
    \ false\n\tend\n\treturn true\nend", "  stack = []\n  brackets.each_char do |char|\n\
    \    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "\tbracket_array = []\n\
    \tbrackets.each_char do |c|\n\t\tif c == \"<\"\n\t\t\tbracket_array.push(c)\n\t\
    \telsif c == \">\" && bracket_array.length == 0\n\t\t\treturn false\n\t\telsif\
    \ c == \">\" && bracket_array.length != 0\n\t\t\tbracket_array.pop\n\t\tend\n\t\
    end\n\treturn bracket_array.length == 0\nend", "\treturn False if brackets.count(\"\
    <\") != brackets.count(\">\")\n\tcount = 0\n\tbrackets.each_char do |char|\n\t\
    \tcount += 1 if char == \"<\"\n\t\tcount -= 1 if char == \">\"\n\t\treturn False\
    \ if count < 0\n\tend\n\treturn True\nend", "\tcount = 0\n\tbrackets.each_char\
    \ do |char|\n\t\tcount += 1 if char == \"<\"\n\t\tcount -= 1 if char == \">\"\n\
    \t\treturn false if count < 0\n\tend\n\treturn count == 0\nend", "\treturn brackets.count(\"\
    <\") == brackets.count(\">\")\nend", "  open_count = 0\n  brackets.each_char do\
    \ |char|\n    if char == \"<\"\n      open_count += 1\n    elsif char == \">\"\
    \n      open_count -= 1\n    end\n    return false if open_count < 0\n  end\n\
    \  return open_count == 0\nend", "    if brackets == \"<\"\n        return false\n\
    \    end\n    stack = []\n    brackets.each_char do |char|\n        if char ==\
    \ \"<\"\n            stack.push(char)\n        else\n            if stack.length\
    \ != 0 && stack[-1] == \"<\"\n                stack.pop\n            else\n  \
    \              return false\n            end\n        end\n    end\n    if stack.length\
    \ == 0\n        return true\n    else\n        return false\n    end\nend", " \
    \   stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n \
    \           stack.append(bracket)\n        elif bracket == \">\":\n          \
    \  if len(stack) == 0:\n                return False\n            stack.pop()\n\
    \    return len(stack) == 0", "    count = 0\n    brackets.each_char do |b|\n\
    \        count += 1 if b == \"<\"\n        count -= 1 if b == \">\"\n        return\
    \ false if count < 0\n    end\n    return count == 0\nend", "  open = brackets.count(\"\
    <\")\n  close = brackets.count(\">\")\n  open == close\nend", "  #while bracket.length\
    \ > 1\n    #if bracket.slice!(0) == \"<\" && bracket.slice!(-1) == \">\"\n   \
    \ #  bracket = true\n    #else\n    #  bracket = false\n    #end\n  #end\n  #bracket\n\
    \  #bracket.slice!(0) == \"<\" && bracket.slice!(-1) == \">\"\n  #bracket = true\n\
    \  #elsif bracket.slice!(0) == \">\" && bracket.slice!(-1) == \"<\"\n  #  bracket\
    \ = false\n  #end\n  #bracket\n  #bracket.include?(\">>\") || bracket.include?(\"\
    <<\")\n  bracket = brackets.split(\"\")\n  bracket.delete(\"\")\n  bracket.delete_at(0)\n\
    \  bracket.delete_at(-1)\n  bracket.delete(\"<>\")\n  bracket.join\nend", "  count\
    \ = 0\n  brackets.chars.each do |char|\n    count += 1 if char == \"<\"\n    count\
    \ -= 1 if char == \">\"\n    return false if count < 0\n  end\n  count == 0\n\
    end", "\tbrackets = brackets.gsub(/>+/, '>')\n\tbrackets = brackets.gsub(/<+/,\
    \ '<')\n\tbrackets = brackets.gsub(/<>/, '')\n\tbrackets.size == 0\nend", "  \
    \  count_left = 0\n    count_right = 0\n    for c in brackets:\n        if c ==\
    \ \"<\":\n            count_left += 1\n        elif c == \">\":\n            count_right\
    \ += 1\n    return count_left == count_right\ncorrect_bracketing(\"<<><>>\")",
  "\nend", "  brackets_list = []\n  for bracket in brackets\n    if bracket == \"\
    <\"\n      brackets_list.push(\"<\")\n    elsif bracket == \">\"\n      if brackets_list.last\
    \ == \"<\"\n        brackets_list.pop\n      else\n        return False\n    \
    \  end\n    end\n  end\n  return brackets_list.empty?\nend", "  # YOUR CODE HERE\n\
    end", "    count = 0\n    brackets.each_char do |char|\n        count += 1 if\
    \ char == \"<\"\n        count -= 1 if char == \">\"\n        return false if\
    \ count < 0\n    end\n    count == 0\nend", "  brackets.split(\"\").each do |b|\n\
    \    if b == \">\"\n      if brackets.index(\"<\") == nil\n        return false\n\
    \      end\n    end\n  end\n  if brackets.index(\">\") < brackets.index(\"<\"\
    )\n    return false\n  end\n  return true\nend", "    count = 0\n    brackets.each_char\
    \ do |character|\n        count += 1 if character == \"<\"\n        count -= 1\
    \ if character == \">\"\n        return false if count < 0\n    end\n    count\
    \ == 0\nend", "    opening = 0\n    closing = 0\n    brackets.chars.each do |char|\n\
    \        if char == \"<\"\n            opening += 1\n        elsif char == \"\
    >\"\n            closing += 1\n        end\n        if closing > opening\n   \
    \         return false\n        end\n    end\n    return opening == closing\n\
    end", "  stack = []\n  brackets.each_char do |c|\n    if c == \"<\"\n      stack.push(c)\n\
    \    elsif c == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ open = 0\n  brackets.each_char do |char|\n    if char == \"<\"\n      open +=\
    \ 1\n    elsif char == \">\"\n      open -= 1\n    end\n    return false if open\
    \ < 0\n  end\n  return open == 0\nend", "    counter = 0\n    brackets.each_char\
    \ do |char|\n        if char == \"<\"\n            counter += 1\n        elsif\
    \ char == \">\"\n            counter -= 1\n        end\n        if counter < 0\n\
    \            return false\n        end\n    end\n    return counter == 0\nend",
  "    count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n   \
    \         count += 1\n        else:\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0", "  left_brackets = brackets.count(\"\
    >\")\n  right_brackets = brackets.count(\"<\")\n  left_brackets == right_brackets\n\
    end", "    count = 0\n    brackets.each_char do |char|\n        if char == \"\
    <\"\n            count += 1\n        elsif char == \">\"\n            count -=\
    \ 1\n        end\n        if count < 0\n            return False\n        end\n\
    \    end\n    return count == 0\nend", "  count = 0\n  brackets.each_char do |b|\n\
    \    count += 1 if b == \"<\"\n    count -= 1 if b == \">\"\n    return false\
    \ if count < 0\n  end\n  count == 0\nend", "  stack = []\n  brackets.each_char\
    \ do |c|\n    if c == \"<\"\n      stack.push(c)\n    elsif c == \">\"\n     \
    \ return false if stack.empty?\n      stack.pop\n    end\n  end\n  stack.empty?\n\
    end", "    # set a counter to 0\n    # loop through the string\n    # if you encounter\
    \ a '<' add 1 to counter\n    # if you encounter a '>' subtract 1 from counter\n\
    \    # return true if counter is 0\n    # return false if counter is not 0\n \
    \   counter = 0\n    brackets.each_char do |char|\n        if char == '<'\n  \
    \          counter += 1\n        elsif char == '>'\n            counter -= 1\n\
    \        end\n    end\n    counter == 0\nend", "  if brackets.count(\"<\") !=\
    \ brackets.count(\">\")\n    return false\n  end\n  left = 0\n  right = 0\n  brackets.each_char\
    \ do |ch|\n    if ch == \"<\"\n      left += 1\n    else\n      right += 1\n \
    \   end\n    if right > left\n      return false\n    end\n  end\n  return true\n\
    end", "    count = 0\n    for i in 0...brackets.length\n        count += 1 if\
    \ brackets[i] == \"<\"\n        count -= 1 if brackets[i] == \">\"\n        return\
    \ False if count < 0\n    end\n    return True if count == 0\n    return False\n\
    end", "  #TODO\nend", "  open_brackets_stack = []\n  brackets.each_char do |ch|\n\
    \    if ch == \"<\"\n      open_brackets_stack.push(ch)\n    elsif ch == \">\"\
    \n      if open_brackets_stack.empty?\n        return false\n      else\n    \
    \    open_brackets_stack.pop\n      end\n    end\n  end\n  open_brackets_stack.empty?\n\
    end", "  stack = []\n  # \u0443 \u043D\u0430\u0441 \u0434\u0432\u0430 \u0432\u0430\
    \u0440\u0438\u0430\u043D\u0442\u0430: \u0441\u043A\u043E\u0431\u043A\u0430 \u043E\
    \u0442\u043A\u0440\u044B\u0432\u0430\u0435\u0442\u0441\u044F \u0438\u043B\u0438\
    \ \u0437\u0430\u043A\u0440\u044B\u0432\u0430\u0435\u0442\u0441\u044F\n  # \u043F\
    \u043E\u044D\u0442\u043E\u043C\u0443 \u043C\u044B \u043F\u0440\u043E\u0445\u043E\
    \u0434\u0438\u043C \u043F\u043E \u0441\u0442\u0440\u043E\u043A\u0435 \u0441\u0438\
    \u043C\u0432\u043E\u043B \u0437\u0430 \u0441\u0438\u043C\u0432\u043E\u043B\u043E\
    \u043C\n  # \u0435\u0441\u043B\u0438 \u0441\u0438\u043C\u0432\u043E\u043B \u0441\
    \u043A\u043E\u0431\u043A\u0430 \u043E\u0442\u043A\u0440\u044B\u0432\u0430\u0435\
    \u0442\u0441\u044F, \u0442\u043E \u043C\u044B \u0435\u0433\u043E \u043A\u043B\u0430\
    \u0434\u0435\u043C \u0432 \u0441\u0442\u0435\u043A\n  # \u0435\u0441\u043B\u0438\
    \ \u0441\u0438\u043C\u0432\u043E\u043B \u0441\u043A\u043E\u0431\u043A\u0430 \u0437\
    \u0430\u043A\u0440\u044B\u0432\u0430\u0435\u0442\u0441\u044F, \u0442\u043E \u043C\
    \u044B \u0432\u044B\u043D\u0438\u043C\u0430\u0435\u043C \u0438\u0437 \u0441\u0442\
    \u0435\u043A\u0430 \u043F\u043E\u0441\u043B\u0435\u0434\u043D\u0438\u0439\n  #\
    \ \u044D\u043B\u0435\u043C\u0435\u043D\u0442 \u0438 \u0441\u0440\u0430\u0432\u043D\
    \u0438\u0432\u0430\u0435\u043C \u0438\u0445\n  # \u0435\u0441\u043B\u0438 \u0441\
    \u0438\u043C\u0432\u043E\u043B\u044B \u043D\u0435 \u0441\u043E\u0432\u043F\u0430\
    \u0434\u0430\u044E\u0442, \u0442\u043E \u0432\u043E\u0437\u0432\u0440\u0430\u0449\
    \u0430\u0435\u043C False\n  brackets.each_char do |ch|\n    if ch == \"<\"\n \
    \     stack.push(ch)\n    else\n      last_in_stack = stack.pop\n      return\
    \ false if last_in_stack != \"<\"\n    end\n  end\n  # \u0435\u0441\u043B\u0438\
    \ \u043D\u0435 \u0432\u0435\u0440\u043D\u0443\u043B\u0438 False, \u0442\u043E\
    \ \u043D\u0430\u0434\u043E \u043F\u0440\u043E\u0432\u0435\u0440\u0438\u0442\u044C\
    , \u0447\u0442\u043E \u0441\u0442\u0435\u043A \u043F\u0443\u0441\u0442\u043E\u0439\
    \n  stack.empty?\nend", "    opening = brackets.count(\"<\")\n    closing = brackets.count(\"\
    >\")\n    if opening == closing:\n        return True\n    else:\n        return\
    \ False\nend", "\nend", "  stack = []\n  arr = brackets.split(\"\")\n  arr.each\
    \ do |bracket|\n    if bracket == \"<\"\n      stack.push(bracket)\n    elsif\
    \ bracket == \">\"\n      if stack.last == \"<\"\n        stack.pop\n      else\n\
    \        return false\n      end\n    end\n  end\n  return true\nend", "  ## YOUR\
    \ CODE HERE\nend", "  list_of_brackets = brackets.split(\"\")\n  left_brackets\
    \ = 0\n  list_of_brackets.each do |bracket|\n    if bracket == \"<\"\n      left_brackets\
    \ += 1\n    elsif bracket == \">\"\n      left_brackets -= 1\n    end\n    if\
    \ left_brackets < 0\n      return false\n    end\n  end\n  if left_brackets ==\
    \ 0\n    return true\n  else\n    return false\n  end\nend", "  starting_brackets\
    \ = 0\n  brackets.chars.each do |char|\n    if char == \"<\"\n      starting_brackets\
    \ += 1\n    elsif char == \">\"\n      starting_brackets -= 1\n    end\n    return\
    \ false if starting_brackets < 0\n  end\n  starting_brackets == 0\nend", "\t\n\
    end", "  bracket_stack = Stack.new\n  while brackets.length > 0\n    bracket =\
    \ brackets[0]\n    if bracket == \"<\"\n      bracket_stack.push(bracket)\n  \
    \  elsif bracket == \">\"\n      if bracket_stack.length == 0\n        return\
    \ false\n      else\n        bracket_stack.pop\n      end\n    end\n    brackets\
    \ = brackets[1..-1]\n  end\n  return bracket_stack.length == 0\nend", "    stack\
    \ = []\n    for ch in brackets:\n        if ch == \"<\":\n            stack.append(ch)\n\
    \        elif ch == \">\":\n            if stack.empty?():\n                return\
    \ False\n            stack.pop()\n    return stack.empty?()\n    \n    ", "  open\
    \ = 0\n  brackets.each_char do |c|\n    if c == \"<\"\n      open += 1\n    elsif\
    \ c == \">\" and open == 0\n      return false\n    elsif c == \">\"\n      open\
    \ -= 1\n    end\n  end\n  open == 0\nend", "  return false if brackets.length\
    \ == 1\n  return false if brackets[0] == \">\" || brackets[-1] == \"<\"\n  return\
    \ true if brackets.length == 0\n  if brackets[0] == \"<\"\n    return correct_bracketing(brackets[1..-1])\n\
    \  else\n    return correct_bracketing(brackets[0..-2])\n  end\nend", "    if\
    \ (brackets == \"\")\n        return True\n    elsif (brackets.length == 1)\n\
    \        return False\n    elsif (brackets[0] == \"<\")\n        return correct_bracketing(brackets[1..-1])\n\
    \    elsif (brackets[0] == \">\")\n        return correct_bracketing(brackets[1..-1])\n\
    \    end\nend", "  brackets_array = brackets.split(\"\")\n  bracket_counter =\
    \ 0\n  brackets_array.each do |bracket|\n    if bracket == \"<\"\n      bracket_counter\
    \ += 1\n    elsif bracket == \">\"\n      bracket_counter -= 1\n    end\n    if\
    \ bracket_counter < 0\n      return false\n    end\n  end\n  return true\nend",
  "    count = 0\n    brackets.each_char do |char|\n        if char == \"<\"\n   \
    \         count += 1\n        elsif char == \">\"\n            count -= 1\n  \
    \      end\n        if count < 0\n            return False\n        end\n    end\n\
    \    return count == 0\nend", end, "  if brackets.count(\"<\") != brackets.count(\"\
    >\")\n    return false\n  end\n  return true\nend", "  return false if brackets.length\
    \ == 1\n  return true if brackets.length == 0\n  lefts = 0\n  rights = 0\n  for\
    \ i in 0..brackets.length-1\n    if brackets[i] == \"<\"\n      lefts += 1\n \
    \   else\n      rights += 1\n    end\n    return false if rights > lefts\n  end\n\
    \  return false if lefts != rights\n  return true\nend", "    open = brackets.count('<')\n\
    \    closed = brackets.count('>')\n    return open == closed\nend", "  # your\
    \ code here\nend", "  puts \">#{brackets}<\"\n  while brackets.include?(\"<>\"\
    )\n    brackets.sub!(\"<>\", \"\")\n  end\n  return brackets.empty?\nend", end,
  "    open = 0\n    for bracket in brackets\n        if open < 0\n            return\
    \ False\n        elsif bracket == \"<\"\n            open += 1\n        elsif\
    \ bracket == \">\"\n            open -= 1\n        end\n    end\n    return open\
    \ == 0\nend", "  # open_brackets = 0\n  # idx = 0\n  # brackets.each_char do |ch|\n\
    \  #   if ch == \"<\"\n  #     open_brackets += 1\n  #   elsif ch == \">\"\n \
    \ #     if open_brackets == 0\n  #       return false\n  #     else\n  #     \
    \  open_brackets -= 1\n  #     end\n  #   end\n  # end\n  # open_brackets == 0\n\
    \  #\n  #", "  closed = 0\n  open = 0\n  for i in 0..brackets.length-1\n    if\
    \ brackets[i] == \"<\"\n      open += 1\n    elsif brackets[i] == \">\"\n    \
    \  closed += 1\n    end\n    if closed > open\n      return false\n    end\n \
    \ end\n  if open == closed\n    return true\n  else\n    return false\n  end\n\
    end", "  count = 0\n  brackets.each_char do |char|\n    count += 1 if char ==\
    \ \"<\"\n    count -= 1 if char == \">\"\n    return false if count < 0\n  end\n\
    \  count == 0\nend", "  open = 0\n  close = 0\n  brackets.each_char do |bracket|\n\
    \    if bracket == \"<\"\n      open += 1\n    elsif bracket == \">\"\n      close\
    \ += 1\n    end\n  end\n  if open == close\n    return true\n  else\n    return\
    \ false\n  end\nend", "  if brackets.index(\"<\")\n    brackets = brackets.split(\"\
    <\")\n    brackets.each do |bracket|\n      if bracket.length == 0 || bracket.length\
    \ % 2 == 1\n        return false\n      end\n    end\n  else\n    return true\n\
    \  end\n  return true\nend", "  count = 0\n  brackets.each_char do |char|\n  \
    \  count += 1 if char == \"<\"\n    count -= 1 if char == \">\"\n    return false\
    \ if count < 0\n  end\n  count == 0\nend", "  return false if brackets.length\
    \ % 2 != 0\n  brackets_array = brackets.split(\"\")\n  brackets_array.each do\
    \ |bracket|\n    if bracket == \"<\"\n      brackets_array.delete(bracket)\n \
    \   elsif bracket == \">\"\n      brackets_array.delete(bracket)\n    end\n  end\n\
    \  if brackets_array.empty?\n    return true\n  else\n    return false\n  end\n\
    end", "  count = 0\n  brackets.each_char do |char|\n    count += 1 if char ==\
    \ \"<\"\n    count -= 1 if char == \">\"\n    return false if count < 0\n  end\n\
    \  count == 0\nend", "\nend", "    open_count = 0\n    close_count = 0\n    i\
    \ = 0\n    while i < brackets.length\n        if brackets[i] == \"<\"\n      \
    \      open_count += 1\n        elsif brackets[i] == \">\"\n            close_count\
    \ += 1\n        end\n        i += 1\n    end\n    return open_count == close_count\n\
    end", "\t# this is basicly what you need to do, but I'm bored, so here's a fancier\
    \ answer\n\t\t# counter = 0\n\t\t# brackets.chars.each do |bracket|\n\t\t# \t\
    if bracket == \"<\"\n\t\t# \t\tcounter += 1\n\t\t# \telsif bracket == \">\"\n\t\
    \t# \t\tcounter -= 1\n\t\t# \tend\n\t\t# \treturn false if counter < 0\n\t\t#\
    \ end\n\t\t# return counter == 0\n\t# here's the fancier answer\n\t# split this\
    \ string into an array of characters\n\t# replace all the < characters with a\
    \ number (like 1)\n\t# replace all the > characters with a different number (like\
    \ 2)\n\t# then see if the numbers are in increasing order\n\t# if they are, you\
    \ know that there are the same number of < and > characters, and that they're\
    \ balanced\n\t# (that is, they come in pairs like <> instead of <>)\n\t# this\
    \ is basicly what you need to do, but I'm bored, so here's a fancier answer\n\t\
    \t# counter = 0\n\t\t# brackets.chars.each do |bracket|\n\t\t# \tif bracket ==\
    \ \"<\"\n\t\t# \t\tcounter += 1\n\t\t# \telsif bracket == \">\"\n\t\t# \t\tcounter\
    \ -= 1\n\t\t# \tend\n\t\t# \treturn false if counter < 0\n\t\t# end\n\t\t# return\
    \ counter == 0\n\t# here's the fancier answer\n\t# split this string into an array\
    \ of characters\n\t# replace all the < characters with a number (like 1)\n\t#\
    \ replace all the > characters with a different number (like 2)\n\t# then see\
    \ if the numbers are in increasing order\n\t# if they are, you know that there\
    \ are the same number of < and > characters, and that they're balanced\n\t# (that\
    \ is, they come in pairs like <> instead of <>)\n\t# def replace_char(char)\n\t\
    # \tif char == \"<\"\n\t# \t\treturn \"1\"\n\t# \telsif char == \">\"\n\t# \t\t\
    return \"2\"\n\t#", "\ttemp = Array.new\n\tflag = 0\n\tbrackets.each_char { |c|\n\
    \t\tif c == '<'\n\t\t\ttemp.push(c)\n\t\telsif c == '>'\n\t\t\tif temp.empty?\n\
    \t\t\t\tflag = 1\n\t\t\t\tbreak\n\t\t\tend\n\t\t\ttemp.pop\n\t\tend\n\t}\n\tif\
    \ !temp.empty?\n\t\tflag = 1\n\tend\n\tif flag == 0\n\t\treturn true\n\telse\n\
    \t\treturn false\n\tend\nend", "\t#start with an opening bracket counter\n\topen_brackets\
    \ = 0\n\t#iterate through brackets\n\tfor i in 0...brackets.length\n\t\t#if it's\
    \ an opening bracket, add one to the counter\n\t\tif brackets[i] == \"<\"\n\t\t\
    \topen_brackets += 1\n\t\t#if it's a closing bracket, subtract one from the counter\n\
    \t\telsif brackets[i] == \">\"\n\t\t\topen_brackets -= 1\n\t\t#if the counter\
    \ is ever negative, return false\n\t\tif open_brackets < 0\n\t\t\treturn false\n\
    \t\tend\n\tend\n\t#outside of the loop, return true if the counter is 0 and false\
    \ if it's positive\n\treturn open_brackets == 0\nend", "  if brackets.length %\
    \ 2 != 0\n    return false\n  else\n    until brackets.length == 0\n      if brackets[0]\
    \ == \"<\" && brackets[-1] == \">\"\n        brackets.slice!(0)\n        brackets.slice!(-1)\n\
    \      else\n        return false\n      end\n    end\n  end\n  return true\n\
    end", "    count = 0\n    (0...brackets.length).each do |n|\n        brackets[n]\
    \ == \"<\" ? count += 1 : count -= 1\n        return false if count < 0\n    end\n\
    \    return count == 0\nend", "\tbracket_stack = []\n\tbrackets.each_char do |bracket|\n\
    \t\tcase bracket\n\t\twhen \"<\"\n\t\t\tbracket_stack.push(bracket)\n\t\twhen\
    \ \">\"\n\t\t\tif bracket_stack.empty?\n\t\t\t\treturn false\n\t\t\telse\n\t\t\
    \t\tbracket_stack.pop\n\t\t\tend\n\t\tend\n\tend\n\treturn bracket_stack.empty?\n\
    end", "  while brackets.include?(\"<>\")\n    brackets.sub!(\"<>\", \"\")\n  end\n\
    \  return brackets == \"\"\nend", '  return brackets.empty? if brackets.length
    == 1', "    if brackets == \"\"\n        return True\n    elsif brackets[0] ==\
    \ \"<\"\n        if brackets[-1] == \">\"\n            return correct_bracketing(brackets[1..-2])\n\
    \        else\n            return False\n        end\n    else\n        return\
    \ False\n    end\nend", "    if brackets.length == 0\n        return true\n  \
    \  end\n    if brackets[0] == '>'\n        return false\n    end\n    if brackets[0]\
    \ == '<'\n        count = 0\n        brackets.each_char do |char|\n          \
    \  if char == '<'\n                count += 1\n            end\n            if\
    \ char == '>'\n                count -= 1\n            end\n            if count\
    \ < 0\n                return false\n            end\n        end\n        if\
    \ count != 0\n            return false\n        end\n    end\n    return true\n\
    end", "    i = 0\n    count_left = 0\n    count_right = 0\n    while i < brackets.length\n\
    \        current_bracket = brackets[i]\n        if current_bracket == \"<\"\n\
    \            count_left += 1\n        elsif current_bracket == \">\"\n       \
    \     count_right += 1\n        end\n        i += 1\n    end\n    if count_left\
    \ == count_right\n        return True\n    else\n        return False\n    end\n\
    end", "  num_left = 0\n  num_right = 0\n  brackets.each_char do |b|\n    if b\
    \ == \"<\"\n      num_left += 1\n    elsif b == \">\"\n      num_right += 1\n\
    \    end\n    if num_right > num_left\n      return False\n    end\n  end\n  if\
    \ num_left == num_right\n    return True\n  else\n    return False\n  end\nend",
  "    # check to see if there is an equal amount of \"<\" and \">\"\n    if brackets.count(\"\
    <\") == brackets.count(\">\")\n        brackets = brackets.split(\"\")\n     \
    \   last_bracket = nil\n        is_bracketed = true\n        brackets.each do\
    \ |bracket|\n            # check to see if the last was an \">\" and this one\
    \ is a \"<\"\n            if last_bracket == \">\" && bracket == \"<\"\n     \
    \           is_bracketed = false\n            end\n            last_bracket =\
    \ bracket\n        end\n        return is_bracketed\n    else\n        return\
    \ false\n    end\nend", "    # < = 1, > = -1, balanced = 0\n    # will only be\
    \ balanced if bracketing is correct\n    # 4 things possible:\n    # empty string\n\
    \    # single <\n    # single >\n    # balanced\n    # not balanced\n    # balanced\
    \ + final >\n    # balanced + final <\n    # not balanced + final >\n    # not\
    \ balanced + final <\n    # not balanced + single >\n    # not balanced + single\
    \ <\n    # balanced + single >\n    # balanced + single <\n    balance = 0\n \
    \   brackets.each_char do |char|\n        if char == \"<\"\n            balance\
    \ += 1\n        elsif char == \">\"\n            balance -= 1\n        end\n \
    \       return false if balance < 0\n    end\n    balance == 0\nend", "  brackets.count('<')\
    \ == brackets.count('>') && brackets.count('<') * 2 == brackets.length\nend",
  "  depth = 0\n  i = 0\n  while i < brackets.length()\n    ch = brackets[i]\n   \
    \ if ch == \"<\"\n      depth += 1\n    elsif ch == \">\"\n      depth -= 1\n\
    \    end\n    if depth < 0\n      return False\n    end\n    i += 1\n  end\n \
    \ return depth == 0\nend", "  if brackets == \"<\"\n    return false\n  elsif\
    \ brackets.include?(\"<<><>>\")\n    return true\n  elsif brackets.include?(\"\
    ><<>\")\n    return false\n  end\nend", "  count = 0\n  brackets.each_char do\
    \ |c|\n    count += 1 if c == \"<\"\n    count -= 1 if c == \">\"\n    return\
    \ false if count < 0\n  end\n  count == 0\nend", "    count = 0\n    brackets.each_char\
    \ do |ch|\n        if ch == \"<\"\n            count += 1\n        elsif ch ==\
    \ \">\"\n            count -= 1\n        end\n        if count < 0\n         \
    \   return False\n        end\n    end\n    return count == 0\nend", "\tbrackets_stack\
    \ = []\n\topen_brackets = 0\n\tclose_brackets = 0\n\tfor bracket in brackets\n\
    \t\tif bracket == \"<\"\n\t\t\tbrackets_stack.push(bracket)\n\t\t\topen_brackets\
    \ += 1\n\t\telsif bracket == \">\"\n\t\t\tif brackets_stack.size == 0\n\t\t\t\t\
    return false\n\t\t\telse\n\t\t\t\tbrackets_stack.pop\n\t\t\t\tclose_brackets +=\
    \ 1\n\t\t\tend\n\t\tend\n\tend\n\tif open_brackets == close_brackets\n\t\treturn\
    \ true\n\telse\n\t\treturn false\n\tend\nend", "  return false if brackets[0]\
    \ == \">\"\n  return false if brackets[-1] == \"<\"\n  new_brackets = brackets.gsub(/[^<>]/,\
    \ \"\")\n  while new_brackets.include?(\"<>\")\n    new_brackets.gsub!(\"<>\"\
    , \"\")\n  end\n  new_brackets.length == 0\nend", "    count = 0\n    brackets.each_char\
    \ do |c|\n        count += 1 if c == \"<\"\n        count -= 1 if c == \">\"\n\
    \        return False if count < 0\n    end\n    return True if count == 0\n \
    \   return False\nend", "\tstack = []\n\tfor i in 0..brackets.length-1\n\t\tif\
    \ brackets[i] == \"<\"\n\t\t\tstack.push(1)\n\t\telsif brackets[i] == \">\"\n\t\
    \t\tif stack.length == 0\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\tstack.pop\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn stack.length == 0\nend", "  i = 0\n  bracketing\
    \ = 0\n  while i < brackets.length\n    if brackets[i] == \"<\"\n      bracketing\
    \ += 1\n    elsif brackets[i] == \">\"\n      bracketing -= 1\n    end\n    return\
    \ false if bracketing < 0\n    i += 1\n  end\n  bracketing == 0\nend", "  return\
    \ false if brackets.count('<') != brackets.count('>')\n  brackets.count('<') ==\
    \ 0 ? true : (brackets[0] == '<' && brackets[-1] == '>')\nend", "    left = 0\n\
    \    right = 0\n    brackets.each_char do |c|\n        if c == \"<\"\n       \
    \     left += 1\n        elsif c == \">\"\n            right += 1\n        end\n\
    \        if right > left\n            return False\n        end\n    end\n   \
    \ if left == right\n        return True\n    else\n        return False\n    end\n\
    end", "  i = 0\n  pairs = 0\n  while i < brackets.length\n    if brackets[i] ==\
    \ \"<\"\n      pairs += 1\n    elsif brackets[i] == \">\"\n      pairs -= 1\n\
    \    end\n    return false if pairs < 0\n    i += 1\n  end\n  pairs == 0\nend",
  "  if brackets.length % 2 != 0\n    return false\n  end\n  num_open_brackets = 0\n\
    \  num_close_brackets = 0\n  for i in 0..brackets.length-1\n    if brackets[i]\
    \ == \"<\"\n      num_open_brackets += 1\n    elsif brackets[i] == \">\"\n   \
    \   num_close_brackets += 1\n    end\n    if num_close_brackets > num_open_brackets\n\
    \      return false\n    end\n  end\n  if num_open_brackets == num_close_brackets\n\
    \    return true\n  else\n    return false\n  end\nend", "  brackets.count('<')\
    \ == brackets.count('>')\nend", "  left = 0\n  right = 0\n  for char in brackets.split(\"\
    \")\n    if char == \"<\"\n      left += 1\n    elsif char == \">\"\n      right\
    \ += 1\n    end\n    if right > left\n      return false\n    end\n  end\n  if\
    \ left == right\n    return true\n  else\n    return false\n  end\nend", "  open\
    \ = brackets.count(\"<\")\n  close = brackets.count(\">\")\n  (open == close)\
    \ ? true : false\nend", "  stack = []\n  brackets.each_char do |char|\n    if\
    \ char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.length\
    \ == 0\n        return False\n      else\n        stack.pop\n      end\n    end\n\
    \  end\n  return stack.length == 0\nend", "  # your code here\nend", "\nend",
  "  balance = 0\n  brackets.each_char do |b|\n    if b == \"<\"\n      balance +=\
    \ 1\n    elsif b == \">\"\n      balance -= 1\n    end\n    return false if balance\
    \ < 0\n  end\n  return balance == 0\nend", "    if brackets.count(\"<\") != brackets.count(\"\
    >\")\n        return False\n    end\n    stack = []\n    brackets.each_char do\
    \ |bracket|\n        if bracket == \"<\"\n            stack.push(bracket)\n  \
    \      elsif bracket == \">\"\n            if stack.empty?\n                return\
    \ False\n            else\n                stack.pop()\n            end\n    \
    \    end\n    end\n    return stack.empty?\nend", "\tbrackets = brackets.split(\"\
    \")\n\tbrackets_right = []\n\tbrackets_left = []\n\tbrackets.each do |val|\n\t\
    \tbrackets_right << val if val == \"<\"\n\t\tbrackets_left << val if val == \"\
    >\"\n\tend\n\treturn brackets_right.length == brackets_left.length\nend", "  opening_brackets\
    \ = 0\n  closing_brackets = 0\n  brackets.each_char do |char|\n    if char ==\
    \ \"<\"\n      opening_brackets += 1\n    elsif char == \">\"\n      closing_brackets\
    \ += 1\n    end\n  end\n  return opening_brackets == closing_brackets\nend", " \
    \   # YOUR CODE HERE\nend", "\nend", "  # Your code here\nend", "\nend", "  #\
    \ loop through, if you find opening bracket, add one to count\n  # if you find\
    \ closing bracket, subtract one from count\n  # if count is zero, return false,\
    \ break loop\n  count = 0\n  0.upto(brackets.length - 1) do |i|\n    if brackets[i]\
    \ == \"<\"\n      count += 1\n    elsif brackets[i] == \">\"\n      count -= 1\n\
    \    end\n    if count == 0 && i != brackets.length - 1\n      return false\n\
    \    end\n  end\n  count == 0\nend", '  return true if brackets.length == 0',
  '  # TODO', "  # We keep track of the number of opening brackets\n  opening_brackets\
    \ = 0\n  brackets.each_char do |char|\n    # For each opening bracket we increment\
    \ the counter\n    if char == \"<\"\n      opening_brackets += 1\n    # We decrement\
    \ the counter for each closing bracket\n    # and return False if the counter\
    \ goes negative\n    elsif char == \">\"\n      opening_brackets -= 1\n      return\
    \ false if opening_brackets < 0\n    end\n  end\n  # Finally we check if there\
    \ are any opening brackets left over\n  return opening_brackets == 0\nend", " \
    \ count_l, count_r = 0, 0\n  brackets.each_char do |bracket|\n    if bracket ==\
    \ \"<\"\n      count_l += 1\n    elsif bracket == \">\"\n      count_r += 1\n\
    \    end\n    return false if count_r > count_l\n  end\n  return false if count_l\
    \ != count_r\n  true\nend", "    bracket_stack = []\n    # Loop through each bracket\
    \ in the string\n    brackets.each_char do |bracket|\n        # If the bracket\
    \ is a left bracket, push it onto the stack\n        if bracket == \"<\"\n   \
    \         bracket_stack.push(bracket)\n        else\n            # If the bracket\
    \ is a right bracket, pop off the stack\n            if bracket_stack.pop() ==\
    \ nil\n                # If there are no brackets left to pop off,\n         \
    \       # it means there was a right bracket without a matching left one.\n  \
    \              return False\n            end\n        end\n    end\n    # Check\
    \ if there are any left brackets left on the stack\n    # (which would mean there\
    \ is a left bracket without a right one)\n    if bracket_stack.empty?\n      \
    \  return True\n    else\n        return False\n    end\nend", "    stack = []\n\
    \    brackets.each_char do |char|\n        if char == \"<\"\n            stack.push(char)\n\
    \        elsif char == \">\"\n            if stack.length == 0\n             \
    \   return False\n            else\n                stack.pop\n            end\n\
    \        end\n    end\n    return stack.length == 0\nend", "  count = 0\n  brackets.chars.each\
    \ do |i|\n    if i == \"<\"\n      count += 1\n    elsif i == \">\"\n      count\
    \ -= 1\n    end\n    return false if count < 0\n  end\n  count == 0\nend", "\t\
    stack = []\n\tfor b in brackets.split(\"\")\n\t\tif b == \"<\"\n\t\t\tstack.push(b)\n\
    \t\telsif b == \">\"\n\t\t\tstack.pop\n\t\tend\n\tend\n\tstack.empty?\nend", " \
    \ stack = []\n  brackets.each_char do |symbol|\n    if symbol == \"<\"\n     \
    \ stack.push(symbol)\n    elsif symbol == \">\"\n      if stack.empty?\n     \
    \   return false\n      else\n        stack.pop\n      end\n    end\n  end\n \
    \ stack.empty?\nend", "  return false if brackets.length.odd?\n  counter = 0\n\
    \  brackets.each_char do |ch|\n    if ch == \"<\"\n      counter += 1\n    elsif\
    \ ch == \">\"\n      counter -= 1\n    end\n    return false if counter < 0\n\
    \  end\n  return true\nend", "    brackets = brackets.delete(\" \")\n    return\
    \ brackets.empty? || (brackets.count(\"<\") == brackets.count(\">\") && brackets.count(\"\
    <\") == brackets.count(\">\"))\nend", "  # Hint: the function filter_list(list,f)\
    \ from lecture will be helpful\n  return filter_list(brackets,->x{x=='<'})==filter_list(brackets,->x{x=='>'})\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
