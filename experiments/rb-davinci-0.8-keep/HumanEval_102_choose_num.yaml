name: HumanEval_102_choose_num
language: rb
prompt: "# This function takes two positive numbers x and y and returns the\n# biggest\
  \ even integer number that is in the range [x, y] inclusive. If \n# there's no such\
  \ number, then the function should return -1.\n# For example:\n# choose_num(12,\
  \ 15) = 14\n# choose_num(13, 12) = -1\ndef choose_num(x, y)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_choose_num\n\
  \    candidate = method(:choose_num)\n    assert_equal(14, candidate.call(12, 15))\n\
  \    assert_equal(-1, candidate.call(13, 12))\n    assert_equal(12354, candidate.call(33,\
  \ 12354))\n    assert_equal(-1, candidate.call(5234, 5233))\n    assert_equal(28,\
  \ candidate.call(6, 29))\n    assert_equal(-1, candidate.call(27, 10))\n    assert_equal(-1,\
  \ candidate.call(7, 7))\n    assert_equal(546, candidate.call(546, 546))\n  end\n\
  end\n"
completions: ["  # Fill in the code here\nend", "  if x%2 == 0\n    return x\n  elsif\
    \ y%2 == 0\n    return y\n  else\n    return -1\n  end\nend", "\tif x > y\n\t\t\
    return -1\n\tend\n\t\n\ti = x\n\t\n\twhile i <= y\n\t\tif i % 2 == 0\n\t\t\treturn\
    \ i\n\t\tend\n\t\ti += 1\n\tend\n\t\n\treturn -1\nend", "  # type your solution\
    \ here...\nend", "  (x..y).reverse_each do |i|\n    return i if i % 2 == 0\n \
    \ end\n  -1\nend", "  if x > y\n    return -1\n  end\n  chosen_number = 0\n  while\
    \ x <= y\n    if x % 2 == 0\n      chosen_number = x\n    end\n    x += 1\n  end\n\
    \  return chosen_number\nend", "\nend", "  # YOUR CODE HERE\n  return -1 if x\
    \ > y\n  i = y\n  while i >= x\n    if i % 2 == 0\n      return i\n    end\n \
    \   i -= 1\n  end\n  return -1\nend", "  # TODO: Fill this in\nend", "\tif y -\
    \ x < 0\n\t\treturn -1\n\tend\n\tif y - x == 0\n\t\tif y % 2 == 0\n\t\t\treturn\
    \ y\n\t\telse\n\t\t\treturn -1\n\t\tend\n\tend\n\tif x % 2 == 0\n\t\treturn x\n\
    \telse\n\t\treturn x + 1\n\tend\nend", "  for num in x..y\n    if num.even? ==\
    \ true\n      return num\n    end\n  end\n  return -1\nend", "  if (x%2 == 0)\
    \ && (y%2 == 0)\n    return y\n  elsif (x%2 == 0) && (y%2 != 0)\n    return x\n\
    \  elsif (x%2 != 0) && (y%2 == 0)\n    return y-1\n  elsif (x%2 != 0) && (y%2\
    \ != 0)\n    return -1\n  end\nend", "  (x..y).each do |num|\n    return num if\
    \ num.even?\n  end\n  -1\nend", '  return -1 if y < x', "  if x % 2 == 0 && y\
    \ % 2 == 0\n    return y\n  elsif x % 2 == 0 && y % 2 != 0\n    return x\n  elsif\
    \ x % 2 != 0 && y % 2 == 0\n    return y\n  elsif x % 2 != 0 && y % 2 != 0\n \
    \   if x + 1 == y\n      return -1\n    else\n      return y - 1\n    end\n  end\n\
    end", "    (x..y).each do |a|\n        if a % 2 == 0\n            return a\n \
    \       end\n    end\n    return -1\nend", "    # Choose the greater of x and\
    \ y, then decrement until an even integer\n    # is found, or until we are less\
    \ than x.\n    num = [x, y].max\n    while num >= x\n        return num if num\
    \ % 2 == 0\n        num -= 1\n    end\n    return -1\nend", "  (x..y).select {\
    \ |i| i.even? }.max || -1\nend", "\t# Type your code here\nend", "    for i in\
    \ x..y\n        if (i%2==0)\n            if (i<y)\n                largest = i\n\
    \            else\n                largest = i-2\n            end\n        end\n\
    \    end\n    if (largest != nil)\n        return largest\n    else\n        return\
    \ -1\n    end\nend", "\tif x % 2 == 0\n\t\treturn y if x == y\n\t\treturn x if\
    \ y == x + 1\n\t\tx + 2\n\telse\n\t\treturn y - 1 if x == y\n\t\treturn y if x\
    \ == y - 1\n\t\tx + 1\n\tend\nend", "  # YOUR CODE HERE\n  if x == y\n    if x.even?\n\
    \      return x\n    else\n      return -1\n    end\n  end\n  if x>y\n    choose_num(y,x)\n\
    \  else\n    x.upto(y) do |i|\n      if i.even?\n        return i\n      end\n\
    \    end\n    return -1\n  end\nend", "  i = x\n  while i <= y\n    if i.even?\n\
    \      return i\n    end\n    i += 1\n  end\n  return -1\nend", "    a = x\n \
    \   while x < y\n        if x.even?\n            a = x\n        end\n        x\
    \ = x + 1\n    end\n    if a.even?\n        return a\n    else\n        return\
    \ -1\n    end\nend", "\tif x > y\n\t\treturn -1\n\tend\n\ti = y\n\twhile i > x\n\
    \t\tif i % 2 == 0\n\t\t\treturn i\n\t\tend\n\t\ti -= 1\n\tend\n\tif x % 2 == 0\n\
    \t\treturn x\n\tend\n\treturn -1\nend", "  if x < y\n    (x..y).each do |number|\n\
    \      if number % 2 == 0\n        return number\n      end\n    end\n  end\n\
    \  return -1\nend", "  (x..y).each do |num|\n    return num if num.even?\n  end\n\
    \  -1\nend", "  if y.even?\n    return y\n  else\n    return choose_num(x, y-1)\n\
    \  end\nend", "    if x > y\n        return -1\n    end\n    while x <= y\n  \
    \      if x % 2 == 0\n            return x\n        end\n        x += 1\n    end\n\
    \    return -1\nend", "  max_num = -1\n  i = x\n  while i <= y\n    if i.even?\n\
    \      max_num = i\n    end\n    i += 1\n  end\n  return max_num\nend", "  ###\
    \ Your code here\nend", "  (x..y).each do |num|\n    return num if num.even?\n\
    \  end\n  -1\nend", "  assert {x > 0}\n  assert {y > 0}\n  (x..y).select{|i| i\
    \ % 2 == 0}.max || -1\nend", "  if x % 2 == 0\n    return x\n  else\n    return\
    \ x + 1\n  end\nend", "  # put your code here\nend", "  my_array = []\n  (x..y).each\
    \ do |i|\n    if i % 2 == 0\n      my_array << i\n    end\n  end\n  if my_array.length\
    \ > 0\n    return my_array.max\n  else\n    return -1\n  end\nend", "  # YOUR\
    \ CODE HERE\nend", "  if y <= x\n    return -1\n  end\n  if y.even?\n    return\
    \ y\n  end\n  if x.even?\n    return x\n  end\n  return choose_num(x+1, y-1)\n\
    end", "  (x..y).reverse_each do |num|\n    return num if num.even?\n  end\n  -1\n\
    end", "  (x..y).to_a.select { |num| num.even? }.max || -1\nend", "  if x > y\n\
    \    return -1\n  end\n  for i in x..y\n    if i % 2 == 0\n      return i\n  \
    \  end\n  end\n  return -1\nend", "  i = x\n  while i <= y\n    if i % 2 == 0\n\
    \      return i\n    end\n    i += 1\n  end\n  return -1\nend", "  for i in x..y\n\
    \    if i % 2 == 0\n      return i\n    end\n  end\n  return -1\nend", "\t# Your\
    \ code here\n\t(x..y).each do |i|\n\t\tif i % 2 == 0\n\t\t\treturn i\n\t\tend\n\
    \tend\n\treturn -1\nend", "    if x % 2 == 0\n        return x\n    elsif y %\
    \ 2 == 0\n        return y\n    else\n        return -1\n    end\nend", "    if\
    \ x <= y\n        for i in (x..y)\n            if i % 2 == 0\n               \
    \ return i\n            end\n        end\n    end\n    return -1\nend", "  # code\
    \ goes here\n  x\nend", "  # your code here\nend", "    if x % 2 == 0 && y % 2\
    \ == 0\n        if x > y\n            return x\n        else\n            return\
    \ y\n        end\n    elsif x % 2 == 0 && y % 2 != 0\n        return x\n    elsif\
    \ x % 2 != 0 && y % 2 == 0\n        return y\n    elsif x % 2 != 0 && y % 2 !=\
    \ 0\n        if x + 1 < y\n            return x + 1\n        else\n          \
    \  return -1\n        end\n    end\nend", "  # Try to guess what I'm going to\
    \ do.\n  # I'm going to find the biggest even number in the range.\n  # I'm going\
    \ to do this in two steps:\n  # 1. Find the even numbers\n  # 2. Find the biggest\
    \ number of those even numbers\n  # I'm going to separate this into two functions:\n\
    \  # 1. find_evens(x, y) - finds all the even numbers in the range\n  # 2. find_biggest(x,\
    \ y) - finds the biggest number in the range\n  # Yes, I'm planning to use the\
    \ functions that I already wrote!\n  evens = find_evens(x, y)\n  puts evens\n\
    \  find_biggest(evens)\nend", "  begin\n    raise 'No such number' if x > y\n\
    \    raise 'Numbers must be positive' if x < 0 or y < 0\n  rescue\n    'Error'\n\
    \  else\n    (x..y).each do |i|\n      return i if i % 2 == 0\n    end\n    -1\n\
    \  end\nend", "  if (x % 2 == 0) && (y % 2 == 0)\n    if x > y\n      return y\n\
    \    elsif x < y\n      return x\n    else\n      return x\n    end\n  elsif (x\
    \ % 2 == 1) && (y % 2 == 1)\n    return -1\n  elsif (x % 2 == 0) && (y % 2 ==\
    \ 1)\n    return x\n  elsif (x % 2 == 1) && (y % 2 == 0)\n    return y\n  end\n\
    end", "  if x == y\n    if x % 2 == 0\n      return x\n    else\n      return\
    \ -1\n    end\n  elsif x > y\n    new_x = y\n    new_y = x\n  else\n    new_x\
    \ = x\n    new_y = y\n  end\n  i = new_y\n  while i >= new_x\n    if i % 2 ==\
    \ 0\n      return i\n    end\n    i -= 1\n  end\n  return -1\nend", "  if x %\
    \ 2 == 0\n    (x..y).each do |i|\n      if i % 2 == 0\n        return i\n    \
    \  end\n    end\n  elsif x % 2 != 0\n    (x + 1..y).each do |i|\n      if i %\
    \ 2 == 0\n        return i\n      end\n    end\n  end\n  return -1\nend", "  #\
    \ your code here\nend", "\tfor n in x..y\n\t\tif n % 2 == 0\n\t\t\treturn n\n\t\
    \tend\n\tend\n\treturn -1\nend", "  z = x-1\n  if x < y\n    z.upto(y) do |i|\n\
    \      if i % 2 == 0\n        return i\n      end\n    end\n  else\n    z.downto(y)\
    \ do |i|\n      if i % 2 == 0\n        return i\n      end\n    end\n  end\n \
    \ return -1\nend", "  # your code here\nend", "\tif x < y\n\t\tn = x\n\t\twhile\
    \ n <= y\n\t\t\tif n % 2 == 0\n\t\t\t\treturn n\n\t\t\tend\n\t\t\tn += 1\n\t\t\
    end\n\telse\n\t\tn = y\n\t\twhile n <= x\n\t\t\tif n % 2 == 0\n\t\t\t\treturn\
    \ n\n\t\t\tend\n\t\t\tn += 1\n\t\tend\n\tend\n\treturn -1\nend", "  return -1\
    \ if y < x\n  value = -1\n  for i in x..y\n    if i % 2 == 0\n      value = i\n\
    \    end\n  end\n  return value\nend", ' ', "  # Your code here\nend", "\nend",
  "  if x > y\n    return -1\n  end\n  x.upto(y) do |i|\n    if i.even?\n      return\
    \ i\n    end\n  end\n  return -1\nend", "  max_even = -1\n  (x..y).each do |num|\n\
    \    if num % 2 == 0 && num > max_even\n      max_even = num\n    end\n  end\n\
    \  max_even\nend", "  return -1 if x > y or x <= 0 or y <= 0\n  max = 0\n  (x..y).each\
    \ do |i|\n    if i % 2 == 0 and i > max\n      max = i\n    end\n  end\n  max\
    \ == 0 ? -1 : max\nend", "  for i in x..y\n    if i % 2 == 0\n      return i\n\
    \    end\n  end\n  return -1\nend", "\tmy_list = Array(x..y)\n\t\n\tif x <= y\n\
    \t\tmy_list.each do |n|\n\t\t\tif n % 2 == 0\n\t\t\t\treturn n\n\t\t\tend\n\t\t\
    end\n\tend\n\treturn -1\nend", "\ti = y\n\twhile i >= x\n\t\tif i % 2 == 0\n\t\
    \t\treturn i\n\t\tend\n\t\ti -= 1\n\tend\n\treturn -1\nend", "  (x..y).each do\
    \ |num|\n    return num if num.even?\n  end\n  -1\nend", "  # Insert your code\
    \ here.\nend", "  (x..y).each do |n|\n    return n if n.even?\n  end\n  -1\nend",
  "  raise NotImplementedError.new\nend", "    nums = (x..y).to_a\n    evens = nums.select{|i|\
    \ i % 2 == 0}\n    if evens.size == 0\n        return -1\n    else\n        return\
    \ evens.max\n    end\nend", "  # put your code here\nend", "  n = y\n  while n\
    \ >= x\n    if n % 2 == 0\n      return n\n    end\n    n -= 1\n  end\n  return\
    \ -1\nend", "\tx.upto(y) do |n|\n\t\tif (n % 2 == 0) && (n > x)\n\t\t\treturn\
    \ n\n\t\telse\n\t\t\treturn -1\n\t\tend\n\tend\nend", "  # YOUR CODE HERE\nend",
  "\tif (x <= y)\n\t\t(x..y).reverse_each { |num| return num if num % 2 == 0 }\n\t\
    end\n\treturn -1\nend", "  ((x..y).select { |z| z.even? }).max\nend", "  puts\
    \ \"Choose_num called with x = #{x} and y = #{y}\"\n  if x%2 == 0\n    return\
    \ x\n  elsif x+1 == y\n    return -1\n  else\n    return choose_num(x+1, y)\n\
    \  end\nend", "\nend", "  for i in x..y\n    if i % 2 == 0\n      return i\n \
    \   end\n  end\n  return -1\nend", "  if x == y && x.even?\n    return x\n  elsif\
    \ x.even?\n    return x\n  elsif y.even?\n    return y\n  else\n    return -1\n\
    \  end\nend", "  for i in x..y\n    if i % 2 == 0\n      return i\n    end\n \
    \ end\n  return -1\nend", "  if x % 2 == 0\n    x\n  elsif x % 2 == 1\n    x =\
    \ x + 1\n  end\n  (x..y).step(2) do |i|\n    return i\n  end\n  return -1\nend",
  '  return -1 if x > y', "  counter = x\n  while counter <= y\n    if counter % 2\
    \ == 0\n      return counter\n    end\n    counter += 1\n  end\n  return -1\n\
    end", "  (x..y).each do |num|\n    return num if num.even?\n  end\n  -1\nend",
  "\twhile x <= y\n\t\tif x % 2 == 0\n\t\t\treturn x\n\t\tend\n\t\tx += 1\n\tend\n\
    \treturn -1\nend", "    if x <= y && x % 2 == 0\n        return x\n    elsif x\
    \ < y && x % 2 != 0\n        choose_num(x + 1, y)\n    elsif x > y && y % 2 ==\
    \ 0\n        return y\n    elsif x > y && y % 2 != 0\n        choose_num(x, y\
    \ - 1)\n    else\n        return -1\n    end\nend", "  return x if x.even? &&\
    \ x >= y\n  return y if y.even? && y >= x\n  return -1 if x % 2 == 0 || y % 2\
    \ == 0\n  if x % 2 == 0\n    x + 1\n  else\n    y - 1\n  end\nend", "  # Do not\
    \ edit this line.\n  (x..y).each { |n| return n if n.even? }\n  -1\nend", "  return\
    \ -1 if x > y\n  return x if x.even?\n  return y if y.even?\n  choose_num(x +\
    \ 1, y - 1)\nend", "    if x > y\n        return -1\n    end\n    for n in x..y\n\
    \        if n % 2 == 0\n            return n\n        end\n    end\n    return\
    \ -1\nend", "\t# This method checks if the number is even and within the range.\n\
    \t# If it is, then it is printed. If not, a -1 is printed.\n\tx.upto(y) do |i|\n\
    \t\tif i.even?\n\t\t\tputs i\n\t\telse\n\t\t\tputs -1\n\t\tend\n\tend\nend", " \
    \ return -1 if x > y\n  return x if x % 2 == 0\n  choose_num(x + 1, y)\nend",
  "  if y - x > 1\n    for i in x..y\n      if i % 2 == 0\n        return i\n    \
    \  end\n    end\n  else\n    return -1\n  end\nend", "\tarr = (x..y).to_a.reverse\n\
    \tval = -1\n\tarr.each do |i|\n\t\tif i % 2 == 0\n\t\t\tval = i\n\t\t\tbreak\n\
    \t\tend\n\tend\n\tval\nend", "  numbers = (x..y).to_a\n  numbers.each do |num|\n\
    \    if num.even?\n      return num\n    end\n  end\n  return -1\nend", "  if\
    \ x <= y\n    while x <= y\n      if x.even?\n        return x\n      end\n  \
    \    x += 1\n    end\n  else\n    return -1\n  end\nend", "\tif x <= y\n\t\tfor\
    \ i in x..y\n\t\t\tif i % 2 == 0\n\t\t\t\treturn i\n\t\t\tend\n\t\tend\n\t\treturn\
    \ -1\n\telse\n\t\treturn -1\n\tend\nend", "  num = -1\n  for i in x..y\n    if\
    \ i%2 == 0 && i > num\n      num = i\n    end\n  end\n  return num\nend", "  #\
    \ TODO: Your code here\nend", "\tif x > y\n\t\treturn -1\n\tend\n\tif x % 2 ==\
    \ 0\n\t\treturn x\n\telse\n\t\treturn x + 1\n\tend\nend\nputs \"choose_num: #{choose_num(12,\
    \ 15)}\"\nputs \"choose_num: #{choose_num(13, 12)}\"", "  return x if x % 2 ==\
    \ 0\n  return y if y % 2 == 0\n  return -1\nend", "  # YOUR CODE HERE\n  return\
    \ -1 if x > y\n  x += 1 if x.odd?\n  x.upto(y) do |num|\n    return num if num.even?\n\
    \  end\n  -1\nend", "\nend", "  x.upto(y) do |n|\n    return n if n.even?\n  end\n\
    \  -1\nend", "  # We need to find the largest even number in the range.\n  if\
    \ x > y\n    temp = x\n    x = y\n    y = temp\n  end\n  if y % 2 == 0\n    return\
    \ y\n  elsif x % 2 == 0\n    return x\n  else\n    return -1\n  end\nend", " \
    \ num = [x, y].max\n  while num >= x\n    if num % 2 == 0\n      return num\n\
    \    end\n    num -= 1\n  end\n  return -1\nend", "    for i in (x..y)\n     \
    \ if i % 2 == 0\n        return i\n      end\n    end\n    return -1\nend", " \
    \ counter = 0\n  current_even = 0\n  if x > y\n    return -1\n  end\n  current_number\
    \ = x\n  until counter == y\n    if current_number % 2 == 0\n      current_even\
    \ = current_number\n    end\n    current_number += 1\n    counter += 1\n  end\n\
    \  return current_even\nend", "  # YOUR CODE HERE\n  (x..y).each do |i|\n    if\
    \ i % 2 == 0\n      return i\n    end\n  end\n  return -1\nend", "  # if x is\
    \ odd and y is odd, then no even numbers exist\n  if x.odd? && y.odd?\n    -1\n\
    \  # if x is even and y is odd, then even numbers exist, but only in the\n  #\
    \ range [x, x + 1, x + 2]\n  elsif x.even? && y.odd?\n    x + 2\n  # if x is odd\
    \ and y is even, then even numbers exist, but only in the\n  # range [y - 2, y\
    \ - 1, y]\n  elsif x.odd? && y.even?\n    y\n  # if x is even and y is even, then\
    \ even numbers exist in the range\n  # [x, x + 1, ..., y - 1, y]\n  else\n   \
    \ y\n  end\nend", "  if (x%2 == 0) && (y%2 == 0)\n    if (x<y)\n      return y\n\
    \    else\n      return x\n    end\n  else\n    if (x%2 == 0) && (y%2 != 0)\n\
    \      return x\n    elsif (x%2 != 0) && (y%2 == 0)\n      return y\n    else\n\
    \      return -1\n    end\n  end\nend", "  (x..y).select{|i| i % 2 == 0}.max ||\
    \ -1\nend", "    return x if y-x <= 0\n    z = x.even? ? x : x+1\n    while z\
    \ <= y\n        return z if z.even?\n        z += 1\n    end\n    return -1\n\
    end", "  while x <= y\n    if x % 2 == 0\n      return x\n    end\n    x += 1\n\
    \  end\n  return -1\nend", "  return -1 if x % 2 == 1 and y % 2 == 1\n  return\
    \ -1 if x > y\n  return x if x % 2 == 0 and y % 2 == 0\n  choose_num(x+1, y)\n\
    end\nputs 'choose_num(12, 15) == 14: ' + (choose_num(12, 15) == 14).to_s\nputs\
    \ 'choose_num(13, 12) == -1: ' + (choose_num(13, 12) == -1).to_s\nputs 'choose_num(22,\
    \ 24) == 22: ' + (choose_num(22, 24) == 22).to_s\nputs 'choose_num(25, 25) ==\
    \ -1: ' + (choose_num(25, 25) == -1).to_s\nputs 'choose_num(21, 27) == 21: ' +\
    \ (choose_num(21, 27) == 21).to_s\nputs 'choose_num(24, 22) == -1: ' + (choose_num(24,\
    \ 22) == -1).to_s\nputs 'choose_num(21, 24) == 21: ' + (choose_num(21, 24) ==\
    \ 21).to_s\nputs 'choose_num(27, 21) == -1: ' + (choose_num(27, 21) == -1).to_s\n\
    puts 'choose_num(21, 21) == -1: ' + (choose_num(21, 21) == -1).to_s\nputs 'choose_num(23,\
    \ 25) == 23: ' + (choose_num(23, 25) == 23).to_s\nputs 'choose_num(25, 23) ==\
    \ -1: ' + (choose_num(25, 23) == -1).to_s\nputs 'choose_num(29, 29) == -1: ' +\
    \ (choose_num(29, 29) == -1).to_s\nputs 'choose_num(25, 29) == 25: ' + (choose_num(25,\
    \ 29) == 25).to_s", "  puts x.downto(y).min { |a, b| a.even? ? (b.even? ? a <=>\
    \ b : -1) : (b.even? ? 1 : 0) }\nend", "  return -1 if x > y\n  return -1 if x\
    \ < 0 || y < 0\n  return y if y.even?\n  return (y - 1) if (y - 1).even?\n  return\
    \ (y - 2) if (y - 2).even?\n  return (y - 3) if (y - 3).even?\n  return (y - 4)\
    \ if (y - 4).even?\n  return (y - 5) if (y - 5).even?\n  return (y - 6) if (y\
    \ - 6).even?\n  return (y - 7) if (y - 7).even?\n  return (y - 8) if (y - 8).even?\n\
    \  return (y - 9) if (y - 9).even?\n  return (y - 10) if (y - 10).even?\n  return\
    \ (y - 11) if (y - 11).even?\n  return (y - 12) if (y - 12).even?\n  return (y\
    \ - 13) if (y - 13).even?\n  return (y - 14) if (y - 14).even?\n  return (y -\
    \ 15) if (y - 15).even?\n  return (y - 16) if (y - 16).even?\n  return (y - 17)\
    \ if (y - 17).even?\n  return (y - 18) if (y - 18).even?\n  return (y - 19) if\
    \ (y - 19).even?\n  return (y - 20) if (y - 20).even?\n  return (y - 21) if (y\
    \ - 21).even?\n  return (y - 22) if (y - 22).even?\n  return (y - 23) if (y -\
    \ 23).even?\n  return (y - 24) if (y - 24).even?\n  return (y - 25) if (y - 25).even?\n\
    \  return (y - 26) if (y - 26).even?\n  return (y - 27) if (y - 27).even?\n  return\
    \ (y - 28) if (y - 28).even?\n  return (y - 29) if (y - 29).even?\n  return (y\
    \ - 30) if (y - 30).even?\n", "\tnum = (x..y).to_a\n\tnum.select {|n| n%2 == 0}.max\n\
    end", "  if x % 2 == 0\n    if x > y\n      return -1\n    end\n    (x..y).reverse_each\
    \ do |n|\n      if n % 2 == 0\n        return n\n      end\n    end\n  else\n\
    \    if x + 1 > y\n      return -1\n    end\n    (x+1..y).reverse_each do |n|\n\
    \      if n % 2 == 0\n        return n\n      end\n    end\n  end\nend", "  (x..y).each\
    \ do |num|\n    return num if num.even?\n  end\n  -1\nend", "  current_num = x\n\
    \  largest_even_num = -1\n  while current_num <= y\n    largest_even_num = current_num\
    \ if current_num.even? && current_num > largest_even_num\n    current_num += 1\n\
    \  end\n  largest_even_num\nend", "  raise unless x > 0 and y > 0\n  return -1\
    \ if x > y\n  return x if x.even?\n  choose_num(x + 1, y)\nend", "\nend", "  if\
    \ x % 2 == 0\n    largest_even = x\n  else\n    largest_even = x + 1\n  end\n\
    \  while largest_even <= y\n    return largest_even\n  end\n  -1\nend", "    e\
    \ = x.even? ? x : x + 1\n    if y % 2 == 0 && e.between?(x, y)\n        return\
    \ y\n    end\n    if e.between?(x, y)\n        return e\n    end\n    -1\nend",
  "  # your code here\nend", "  for i in x..y\n    if i % 2 == 0\n      return i\n\
    \    end\n  end\n  return -1\nend", "  if (x > y) || (x % 2 == 1)\n    -1\n  else\n\
    \    x\n  end\nend", "  for n in (x..y)\n    if n % 2 == 0\n      return n\n \
    \   end\n  end\n  return -1\nend", "\nend", "  if x <= y\n    if x % 2 == 0\n\
    \      puts x\n    else\n      puts x + 1\n    end\n  else\n    puts -1\n  end\n\
    end", "  # Write your code here\nend", "  (x..y).each do |z|\n    return z if\
    \ z % 2 == 0\n  end\n  -1\nend", "  (x..y).reverse_each { |i| return i if i.even?\
    \ }\n  -1\nend", "  i = x\n  while i < y + 1\n    if i % 2 == 0\n      return\
    \ i\n    end\n    i += 1\n  end\n  return -1\nend", "  (x..y).each do |i|\n  \
    \  return i if i % 2 == 0\n  end\n  -1\nend", "\tif x % 2 == 0\n\t\tif y % 2 ==\
    \ 0\n\t\t\treturn y\n\t\telse\n\t\t\treturn y - 1\n\t\tend\n\telse\n\t\tif y %\
    \ 2 == 0\n\t\t\treturn y - 2\n\t\telse\n\t\t\treturn y - 3\n\t\tend\n\tend\nend",
  "\nend", "  return -1 if x > y or x.odd? or y.odd?\n  (x..y).reverse_each { |num|\
    \ return num if num.even? }\nend", "  (x..y).each do |i|\n    return i if i %\
    \ 2 == 0\n  end\n  -1\nend", "  if x <= y\n    i = x\n    j = y\n  else\n    i\
    \ = y\n    j = x\n  end\n  for i in i..j\n    if i % 2 == 0\n      return i\n\
    \    end\n  end\n  return -1\nend", "\nend", "  if x == y\n    if x % 2 == 0\n\
    \      x\n    else\n      -1\n    end\n  else\n    if x % 2 == 0 && y % 2 == 0\n\
    \      (x < y) ? y : x\n    elsif x % 2 == 0 && y % 2 != 0\n      y - 1\n    elsif\
    \ x % 2 != 0 && y % 2 == 0\n      x + 1\n    else\n      x + 2\n    end\n  end\n\
    end\nputs \"choose_num(12, 15) = #{choose_num(12, 15)}\"\nputs \"choose_num(13,\
    \ 12) = #{choose_num(13, 12)}\"\nputs \"choose_num(15, 15) = #{choose_num(15,\
    \ 15)}\"\nputs \"choose_num(14, 14) = #{choose_num(14, 14)}\"\nputs \"choose_num(13,\
    \ 14) = #{choose_num(13, 14)}\"\nputs \"choose_num(14, 13) = #{choose_num(14,\
    \ 13)}\"\nputs \"choose_num(11, 12) = #{choose_num(11, 12)}\"\nputs \"choose_num(12,\
    \ 11) = #{choose_num(12, 11)}\"\nputs \"choose_num(0, 0) = #{choose_num(0, 0)}\"\
    \nputs \"choose_num(13, 13) = #{choose_num(13, 13)}\"", "  x.upto(y) do |n|\n\
    \    return n if n.even?\n  end\n  -1\nend", "\teven_numbers = []\n\tfor num in\
    \ x..y\n\t\tif num.even?\n\t\t\teven_numbers << num\n\t\tend\n\tend\n\tif even_numbers.size\
    \ == 0\n\t\treturn -1\n\telse\n\t\treturn even_numbers.max\n\tend\nend", "  if\
    \ x > y\n    return -1\n  elsif x%2 == 0\n    return x\n  else\n    choose_num(x+1,\
    \ y)\n  end\nend", "  # This is your job. :)\n  # 1.upto(y) do |num|\n  #   return\
    \ num if num.even? && num >= x\n  # end\n  # -1\n  x.upto(y) do |num|\n    return\
    \ num if num.even?\n  end\n  -1\nend", "    return -1 if y < x\n    return -1\
    \ if (x % 2 != 0) && (y % 2 != 0) \n    return y if (x % 2 == 0) && (y % 2 ==\
    \ 0)\n    x += 1 if x % 2 != 0\n    x\nend", "\t(x..y).to_a.reverse.each do |num|\n\
    \t\tif num % 2 == 0\n\t\t\treturn num\n\t\tend\n\tend\n\treturn -1\nend", "  if\
    \ x < y\n    (x..y).reverse_each do |n|\n      return n if n % 2 == 0\n    end\n\
    \  elsif x > y\n    (y..x).reverse_each do |n|\n      return n if n % 2 == 0\n\
    \    end\n  else\n    return x if x % 2 == 0\n  end\n  -1\nend", "  return -1\
    \ if y < x\n  return (x%2==0)?x:x+1 if x==y\n  return choose_num(x, y-1) if y%2!=0\n\
    \  y\nend", "  # YOUR CODE HERE\n  if x > y\n    return -1\n  end\n  while x <=\
    \ y\n    if x % 2 == 0\n      return x\n    end\n    x += 1\n  end\n  return -1\n\
    end", "  # Your code here.\nend", "  if x > y\n    return -1\n  end\n  i = x\n\
    \  while i <= y\n    if i % 2 == 0\n      return i\n    end\n    i += 1\n  end\n\
    \  return -1\nend", "  # Your code here\nend", "\nend", "  # Put your code here\n\
    end", "  if x % 2 == 0\n    greater_even = x\n  else\n    greater_even = x + 1\n\
    \  end\n  if y % 2 == 0\n    lesser_even = y\n  else\n    lesser_even = y - 1\n\
    \  end\n  return greater_even if greater_even == lesser_even\n  return -1 if greater_even\
    \ > lesser_even\n  return choose_num(greater_even + 2, lesser_even)\nend", '  result
    = -1', "  if x % 2 == 0 && y % 2 == 0\n    return y\n  elsif x % 2 == 0 && y %\
    \ 2 != 0\n    return x\n  elsif x % 2 != 0 && y % 2 == 0\n    return y - 1\n \
    \ else\n    return -1\n  end\nend", "  if x.even?\n    x\n  elsif y.even?\n  \
    \  y\n  else\n    -1\n  end\nend", "  greatest_even = -1\n  (x..y).each do |num|\n\
    \    if num.even? && num > greatest_even\n      greatest_even = num\n    end\n\
    \  end\n  greatest_even\nend", "  # Put your code here!\nend", "    num = -1\n\
    \    #puts \"x = #{x}\"\n    #puts \"y = #{y}\"\n    (x..y).each do |z|\n    \
    \    if z % 2 == 0\n            num = z\n        end\n    end\n    return num\n\
    end\nputs(\"choose_num(12, 15) = #{choose_num(12, 15)}\")\nputs(\"choose_num(13,\
    \ 12) = #{choose_num(13, 12)}\")\nputs(\"choose_num(13, 14) = #{choose_num(13,\
    \ 14)}\")\nputs(\"choose_num(14, 13) = #{choose_num(14, 13)}\")\nputs(\"choose_num(1,\
    \ 14) = #{choose_num(1, 14)}\")\nputs(\"choose_num(2, 14) = #{choose_num(2, 14)}\"\
    )\nputs(\"choose_num(1, 1) = #{choose_num(1, 1)}\")\nputs(\"choose_num(2, 2) =\
    \ #{choose_num(2, 2)}\")", "  # TODO\nend", "  # This line will be used to generate\
    \ random numbers. You can delete it.\n  # random_number = rand(1..2)\n  if x >\
    \ y\n    puts \"-1\"\n  elsif x == y\n    puts \"#{x}\"\n  else\n    # if even\
    \ number\n    if (x % 2 == 0) && (y % 2 == 0)\n      puts \"#{y}\"\n    # if even\
    \ and odd\n    elsif (x % 2 == 0) && (y % 2 != 0)\n      puts \"#{y - 1}\"\n \
    \   # if odd and even\n    elsif (x % 2 != 0) && (y % 2 == 0)\n      puts \"#{y}\"\
    \n    # if odd\n    elsif (x % 2 != 0) && (y % 2 != 0)\n      puts \"#{y - 1}\"\
    \n    end\n  end\nend", "  (x..y).to_a.find{|i| i.even?} || -1\nend", "  if x%2\
    \ == 0 && y%2 == 0\n    return x if x > y\n    return y\n  end\n  return x + 1\
    \ if x%2 == 1 && y%2 == 0\n  return y - 1 if x%2 == 0 && y%2 == 1\n  return -1\n\
    end", "\treturn -1 if x > y || x <= 0 || y <= 0\n\t(x..y).reverse_each { |num|\
    \ return num if num.even? }\nend", "    x.step(y,2).max\nend\nputs choose_num(12,\
    \ 15)\nputs choose_num(13, 12)", "  # return -1 if x > y\n  (x..y).each do |n|\n\
    \    return n if n.even? && (n >= x && n <= y)\n  end\n  -1\nend", "  if x.even?\n\
    \    return x if y.even?\n    return x - 1 if y.odd?\n  end\n  return x + 1 if\
    \ y.even?\n  return -1\nend", "  r = -1\n  if x > y\n    raise \"Incorrect input\"\
    \n  else\n    (x..y).each do |i|\n      if i % 2 == 0 && i > r\n        r = i\n\
    \      end\n    end\n  end\n  r\nend", "  if (x >= y) \n    return -1\n  end",
  "  if x > y\n    return -1\n  end\n  while (x%2 == 1) and (x < y)\n    x = x + 1\n\
    \  end\n  if x > y\n    return -1\n  end\n  return x\nend", '  return -1 if y
    < x', '  return -1 if x > y', end, "  if x < y\n    for i in x..y\n      if i.even?\n\
    \        return i\n      end\n    end\n  end\n  return -1\nend", "  if (x..y).all?\
    \ { |num| num.odd? }\n    return -1\n  else\n    (x..y).each do |num|\n      if\
    \ num.even?\n        return num\n      end\n    end\n  end\nend", "  # Your code\
    \ here\nend", "  if x < 0 || y < 0\n    return -1\n  end\n  if x > y\n    return\
    \ -1\n  end\n  if x % 2 == 0\n    return x\n  end\n  return x + 1\nend", "\t\n\
    \tif x < y\n\t\t(x..y).each do |num|\n\t\t\tif num.even?\n\t\t\t\treturn num\n\
    \t\t\tend\n\t\tend\n\t\treturn -1\n\telsif x == y\n\t\tif x.even?\n\t\t\treturn\
    \ x\n\t\telse\n\t\t\treturn -1\n\t\tend\n\telse\n\t\tif y.even?\n\t\t\treturn\
    \ y\n\t\telse\n\t\t\treturn -1\n\t\tend\n\tend\nend", "  biggest_even = -1\n \
    \ (x..y).each do |num|\n    if num % 2 == 0\n      biggest_even = num\n    end\n\
    \  end\n  return biggest_even\nend", "  x.upto(y) do |i|\n    return i if i %\
    \ 2 == 0\n  end\n  -1\nend", "  max = -1\n  (x..y).each do |num|\n    if num.even?\n\
    \      max = num if num > max\n    end\n  end\n  max\nend", "  x.upto(y) do |num|\n\
    \    return num if num.even?\n  end\n  -1\nend", "  # write your code here\n \
    \ if x % 2 == 0 and y % 2 == 0\n    return y\n  elsif x % 2 == 0 and y % 2 !=\
    \ 0\n    return x\n  elsif x % 2 != 0 and y % 2 == 0\n    return y\n  else\n \
    \   return -1\n  end\nend", "  while x <= y\n    if x % 2 == 0\n      return x\n\
    \    end\n    x = x + 1\n  end\n  return -1\nend", "  if x > y\n    return -1\n\
    \  elsif x % 2 == 0\n    return x\n  else\n    return x + 1\n  end\nend", "  \
    \  if x%2==0 && y%2==0\n        return y\n    elsif x%2==0 && y%2!=0\n       \
    \ return x\n    elsif x%2!=0 && y%2==0\n        return y-1\n    elsif x%2!=0 &&\
    \ y%2!=0\n        return x-1\n    end\nend", "  while x <= y\n    return x if\
    \ x % 2 == 0\n    x += 1\n  end\n  -1\nend", "  x.upto(y) do |i|\n    return i\
    \ if i.even?\n  end\n  -1\nend", "\tif x%2 == 0 && y%2 == 0\n\t\treturn y\n\t\
    elsif x%2 == 0 && y%2 != 0\n\t\treturn x\n\telsif x%2 != 0 && y%2 == 0\n\t\treturn\
    \ y-1\n\telse\n\t\treturn -1\n\tend\nend\nputs choose_num(12, 15)\nputs choose_num(13,\
    \ 12)", "  (x..y).select { |num| num.even? }.max || -1\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
