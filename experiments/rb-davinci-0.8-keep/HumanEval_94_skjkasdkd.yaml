name: HumanEval_94_skjkasdkd
language: rb
prompt: "# You are given a list of integers.\n# You need to find the largest prime\
  \ value and return the sum of its digits.\n# Examples:\n# For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
  \ the output should be 10\n# For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
  \ the output should be 25\n# For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
  \ the output should be 13\n# For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the\
  \ output should be 11\n# For lst = [0,81,12,3,1,21] the output should be 3\n# For\
  \ lst = [0,8,1,2,1,7] the output should be 7\ndef skjkasdkd(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_skjkasdkd\n\
  \    candidate = method(:skjkasdkd)\n    assert_equal(10, candidate.call([0, 3,\
  \ 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]))\n    assert_equal(25,\
  \ candidate.call([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]))\n\
  \    assert_equal(13, candidate.call([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23,\
  \ 2323, 32, 30, 1, 9, 3]))\n    assert_equal(11, candidate.call([0, 724, 32, 71,\
  \ 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]))\n    assert_equal(3, candidate.call([0, 81,\
  \ 12, 3, 1, 21]))\n    assert_equal(7, candidate.call([0, 8, 1, 2, 1, 7]))\n   \
  \ assert_equal(19, candidate.call([8191]))\n    assert_equal(19, candidate.call([8191,\
  \ 123456, 127, 7]))\n    assert_equal(10, candidate.call([127, 97, 8192]))\n  end\n\
  end\n"
completions: ["    prime_val = 0\n    lst.each do |num|\n        prime_val = num if\
    \ is_prime?(num) && num > prime_val\n    end\n    total = 0\n    prime_val.to_s.each_char\
    \ { |char| total += char.to_i }\n    total\nend", "  lst.sort.reverse.each do\
    \ |x|\n    next if x == 0 || x == 1\n    if x.prime?\n      y = x.to_s.split('').map(&:to_i).reduce(:+)\n\
    \      return y\n    end\n  end\nend", "\trequire 'prime'\n\tlst.each do |x|\n\
    \t\tif Prime.prime?(x)\n\t\t\tans = x\n\t\tend\n\tend\n\tans.to_s.split(\"\").map(&:to_i).inject(:+)\n\
    end", "\tlst = lst.sort.reverse\n\tlst.each do |n|\n\t\tif prime?(n)\n\t\t\tn\
    \ = n.to_s.split('')\n\t\t\t# p n.to_i\n\t\t\treturn n.sum\n\t\tend\n\tend\nend",
  "  lst.map { |n| n if n.prime? }.compact.max.to_s.split('').map(&:to_i).reduce(:+)\n\
    end", "  lst.each do |i|\n    if i == 2\n      return 2\n    elsif i % 2 == 0\n\
    \      return i\n    elsif i % 3 == 0\n      return i\n    elsif i % 5 == 0\n\
    \      return i\n    elsif i % 7 == 0\n      return i\n    end\n  end\nend", "\t\
    prime_numbers = []\n\tlst.each do |i|\n\t\tif prime?(i)\n\t\t\tprime_numbers <<\
    \ i\n\t\tend\n\tend\n\tprime_number = prime_numbers.max\n\treturn prime_number.to_s.split(\"\
    \").map(&:to_i).reduce(:+)\nend", "  lst.map{|n| n.to_s.split('').map(&:to_i).inject(:+)}\n\
    end", "  lst.select { |x| x if prime?(x) }.max.to_s.chars.map(&:to_i).inject(:+)\n\
    end", "  sum = 0\n  lst.each do |num|\n    puts num\n    if(is_prime?(num))\n\
    \      sum += digits(num)\n    end\n  end\n  return sum\nend", "  \nend", "  prime\
    \ = lst.sort.reverse.find{|x| prime?(x)}\n  p prime\n  return sum_of_digits(prime)\n\
    end", "    lst.sort!\n    while lst.last > 1\n        if lst.last % 2 == 0\n \
    \           lst.last /= 2\n        elsif lst.last % 3 == 0\n            lst.last\
    \ /= 3\n        elsif lst.last % 5 == 0\n            lst.last /= 5\n        elsif\
    \ lst.last % 7 == 0\n            lst.last /= 7\n        else\n            lst.last\
    \ -= 1\n        end\n    end\n    lst.last\nend", "  i = lst.length - 1\n  current\
    \ = nil\n  until i < 0\n    next_numb = lst[i]\n    if current.nil?\n      current\
    \ = next_numb\n    else\n      current = current * next_numb\n    end\n    i -=\
    \ 1\n  end\n  puts current\n  j = 0\n  sum = 0\n  until j > current.to_s.length\
    \ - 1\n    sum += current.to_s[j].to_i\n    j += 1\n  end\n  sum\nend", "  n =\
    \ 0\n  lst.each do |x|\n    if (x != 1 && x != 0) && (lst.include?(x)) && (is_prime?(x))\n\
    \      n = x if n < x\n    end\n  end\n  sum(n)\nend", "  lst.select{|e| (2..e-1).all?{|i|\
    \ e % i != 0} && e > 1}.sort.last.to_s.split('').map(&:to_i).reduce(:+)\nend",
  "  largest_prime = 1\n  lst.each do |ele|\n    if largest_prime <= ele\n      if\
    \ prime?(ele)\n        largest_prime = ele\n      end\n    end\n  end\n  larg\
    \ = largest_prime.to_s.split(\"\")\n  larg.map(&:to_i).reduce(:+)\nend", "   \
    \ a = lst.map {|e| e.to_s}.join\n    puts a\nend", "    lst.uniq!\n    lst.sort!\n\
    \    p lst\n    prime = 0\n    lst.each do |item|\n        if item == 0\n    \
    \        prime = 0\n        elsif item == 1\n            prime = 1\n        elsif\
    \ item == 2\n            prime = 2\n        elsif item % 2 == 0\n            prime\
    \ = item\n        else\n            prime = item\n            i = 3\n        \
    \    while i < item\n                if item % i == 0\n                    prime\
    \ = item / i\n                    break\n                end\n               \
    \ i += 2\n            end\n        end\n    end\n    return prime\nend", "  nums\
    \ = lst.uniq.sort\n  (1..nums.length).each do |n|\n    nums.combination(n).to_a.each\
    \ do |combo|\n      if combo.reduce(:+) == combo.inject(:*) && is_prime?(combo.inject(:*))\n\
    \        return combo.reduce(:+).to_s.split('').map(&:to_i).reduce(:+)\n     \
    \ end\n    end\n  end\nend", "  lst.each_with_object([]) do |num, primes|\n  \
    \  if (2..num).none? { |divisor| num % divisor == 0 }\n      primes << num\n \
    \   end\n  end.max.to_s.chars.map(&:to_i).sum\nend", "  lst.map!{|x| x if x >\
    \ 0}.compact!\n  lst.delete_if{|x| x % 2 == 0 || x % 3 == 0 || x % 5 == 0}\n \
    \ lst.delete_if{|x| x == 1 || x == 0}\n  max = lst.sort.last\n  max.to_s.split('').map{|x|\
    \ x.to_i}.reduce(:+)\nend", "  \nend", "  if lst.size <= 1\n    return lst.pop\n\
    \  end\n  lst.each_with_index do |n,i|\n    lst[i+1..-1].each do |m|\n      if\
    \ n%m == 0 && m != 1\n        lst.delete(n)\n      end\n    end\n  end\n  return\
    \ lst.max\nend", "\tlst_of_primes = []\n\tlst.each do |num|\n\t\tif prime?(num)\n\
    \t\t\tlst_of_primes << num\n\t\tend\n\tend\n\tlst_of_primes.max\nend", "  primes_arr\
    \ = []\n  result = 0\n  lst.each do |x|\n    if x.prime? == true\n      primes_arr\
    \ << x\n    end\n  end\n  result = primes_arr.max\n  result = result.to_s.split('').map(&:to_i).reduce(:+)\n\
    \  p result\nend\nskjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\nskjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\nskjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\n\
    skjkasdkd([0,81,12,3,1,21])\nskjkasdkd([0,8,1,2,1,7])", "  prime_numbers = []\n\
    \  lst.each do |num|\n    prime_numbers << num if is_prime?(num)\n  end\n  sum_digits(prime_numbers.max)\n\
    end", "    $prime = 0\n    $prime_ary = []\n    # lst.each do |prime|\n    # \
    \  if prime.prime?\n    #     $prime_ary << prime\n    #   end\n    # end\n  \
    \  $prime_ary = lst.select {|ele| ele.prime? }\n    $prime = $prime_ary.max\n\
    \    $prime_ary.max\nend\nputs skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    puts skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\nputs skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\n\
    puts skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\nputs skjkasdkd([0,81,12,3,1,21])\n\
    puts skjkasdkd([0,8,1,2,1,7])", "  prime_value = 0\n  sum = 0\n  prime_array =\
    \ []\n  p = Prime.new\n  (lst.min..lst.max).each do |x|\n    if p.prime?(x)\n\
    \      prime_array << x\n    end\n  end\n  prime_value = prime_array.max\n  prime_value.to_s.split(\"\
    \").each do |y|\n    sum += y.to_i\n  end\n  sum\nend", "  for i in lst\n    for\
    \ j in (2..i/2)\n      if i % j == 0\n        lst.delete(i)\n      end\n    end\n\
    \  end\n  return lst.max\nend", "lst.delete_if {|n| n < 2}\nputs lst\nlst.each\
    \ do |x|\n  puts x\n  puts lst\n  puts \"----\"\n  lst.each do |y|\n    puts y\n\
    \    puts lst\n    if y != x && y % x == 0\n      lst.delete(y)\n    end\n  end\n\
    end\nreturn lst.max\nend", "  a=lst.join('').split('').map(&:to_i).uniq.sort\n\
    \  if a[-1]<=5\n    return a[-1]\n  end\n  a=a.select{|x| x>0}\n  a.delete_if{|x|\
    \ a.any?{|y| x!=y && x%y==0}}\n  def sumDigits(num)\n    s=0\n    while num>0\n\
    \      s+=num%10\n      num/=10\n    end\n    return s\n  end\n  return sumDigits(a[-1])\n\
    end", "  lst.select{|x|x.prime?}.max.digits.sum\nend", "  # find the largest prime\
    \ number in the list\n  # break the number down into its digits\n  # return the\
    \ sum of the digits\n  # [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\n\
    \  sum = 0\n  lst.sort.reverse.each do |x|\n    prime = x.prime?\n    if prime\n\
    \      puts x\n      x.digits.each do |digit|\n        sum += digit\n      end\n\
    \      break\n    end\n  end\n  sum\nend", "  # Check if all digits of the largest\
    \ prime number sum up to 9\n  # largest_prime = lst.max\n  # largest_prime.to_s.chars.map(&:to_i).inject(:+)\n\
    \  largest_prime = lst.max.to_s.chars.map(&:to_i).inject(:+)\nend", "\nend", " \
    \ max = lst.max\n  (max-1).downto(1) do |i|\n    next if lst.include?(i)\n   \
    \ return i if is_prime?(i)\n  end\nend", "\tlst.map{|x|x.to_s.split(\"\")}.flatten.map{|x|x.to_i}.inject(:+)\n\
    end", "  prime = lst.max { |a, b|\n    if a.prime? && b.prime?\n      a <=> b\n\
    \    elsif a.prime?\n      1\n    elsif b.prime?\n      -1\n    else\n      -1\n\
    \    end\n  }\n  digits = prime.to_s.split('').map(&:to_i)\n  digits.reduce(:+)\n\
    end", "  # find the largest prime value\n  largest_prime = 0\n  lst.each do |n|\n\
    \    if n != 0\n      #check if n is prime\n      is_prime = true\n      lst.each\
    \ do |m|\n        if m == 0\n          next\n        end\n        if n % m ==\
    \ 0 && n != m\n          is_prime = false\n          break\n        end\n    \
    \  end\n      if is_prime\n        largest_prime = n\n      end\n    end\n  end\n\
    \  # convert to array of digits\n  largest_prime_digits = largest_prime.to_s.split('').map(&:to_i)\n\
    \  # return the sum of its digits\n  largest_prime_digits.reduce(:+)\nend", "\t\
    a = lst.sort.reverse\n\tprimes = []\n\ta.each do |n|\n\t\tif prime?(n)\n\t\t\t\
    primes << n\n\t\tend\n\tend\n\tn = primes.sort.last\n\tsum = 0\n\tn.to_s.each_char\
    \ do |c|\n\t\tsum += c.to_i\n\tend\n\treturn sum\nend", "  h = lst.each_with_object(Hash.new(0))\
    \ { |l,counts| counts[l] += 1 }\n  h.max_by{|k,v| k}[0]\nend", "    primes = []\n\
    \    lst.each do |num|\n        if (1..num).select { |n| num % n == 0 }.size ==\
    \ 2\n            primes << num\n        end\n    end\n    if primes.max.digits.sum\
    \ > primes.min.digits.sum\n        return primes.max.digits.sum\n    else\n  \
    \      return primes.min.digits.sum\n    end\nend", "  prime_array = []\n  biggest_prime\
    \ = 0\n  lst.each do |n|\n    if prime?(n)\n      prime_array << n\n    end\n\
    \  end\n  prime_array.each do |n|\n    if n > biggest_prime\n      biggest_prime\
    \ = n\n    end\n  end\n  digits_sum(biggest_prime)\nend", "\trequire 'prime'\n\
    \ta = lst.select{|x| Prime.prime?(x)}.sort.last\n\ta.to_s.split('').map(&:to_i).reduce(:+)\n\
    end", "  return 'There are no integers in this list' if lst.empty?\n  prime =\
    \ lst.detect{|x| lst.count(x) == 1 && x.prime?}\n  sum = prime.to_s.split('').map(&:to_i).inject(:+)\n\
    end", "\tsum = 0\n\thash = Hash.new(0)\n\tlst.each do |el|\n\t\thash[el] += 1\n\
    \tend\n\tmax = hash.values.max\n\tdivisors = []\n\thash.each do |k,v|\n\t\tif\
    \ v == max\n\t\t\tif k == 0\n\t\t\t\tdivisors << k\n\t\t\telse\n\t\t\t\tx = prime?(k)\n\
    \t\t\t\tdivisors << k if x\n\t\t\tend\n\t\tend\n\tend\n\tx = divisors.max\n\t\
    x.to_s.split(\"\").each do |el|\n\t\tsum += el.to_i\n\tend\n\tsum\nend", "  lst.max.to_s.split('').map(&:to_i).reduce(:+)\n\
    end", end, "    a = lst.map {|i| i.to_s.scan(/\\d/).map {|x| x.to_i}.inject(:+)}\n\
    \    b = a.select {|i| i.to_s.scan(/\\d/).map {|x| x.to_i}.inject(:+) == i}\n\
    \    b.last.to_s.scan(/\\d/).map {|x| x.to_i}.inject(:+)\nend\nprint skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]),\"\
    \\n\"\nprint skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]),\"\\n\"\nprint\
    \ skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]),\"\\n\"\nprint\
    \ skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]),\"\\n\"\nprint skjkasdkd([0,81,12,3,1,21]),\"\
    \\n\"\nprint skjkasdkd([0,8,1,2,1,7]),\"\\n\"", "  def largest_prime(n)\n    return\
    \ 2 if n == 2\n    max = Math.sqrt(n).to_i + 1\n    (2..max).each { |i| return\
    \ i if n % i == 0 }\n    n\n  end", "  lst.each do |x|\n    next if x == 0\n \
    \   return true if x % 2 == 0\n    next if x == 1", "  lst.max.to_s.split('').map(&:to_i).reduce(:+)\n\
    end", "  lst.map { |v| v.to_s.split('').map(&:to_i).inject(:+) }.max\nend", " \
    \ all_primes = lst.select{|n| is_prime?(n)}\n  max_prime = all_primes.max\n  digits_sum(max_prime)\n\
    end", "    to_remove = []\n    max = 0\n    lst.each do |val|\n        if val\
    \ == 0 || val == 1\n            to_remove << val\n        end\n    end\n    to_remove.each\
    \ do |val|\n        lst.delete(val)\n    end\n    lst.each do |val|\n        count\
    \ = 0\n        (1..val).each do |i|\n            if val % i == 0\n           \
    \     count += 1\n            end\n        end\n        if count == 2\n      \
    \      if val > max\n                max = val\n            end\n        end\n\
    \    end\n    sum = 0\n    max.to_s.split(\"\").each do |val|\n        sum +=\
    \ val.to_i\n    end\n    return sum\nend\nputs skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    puts skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\nputs skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\n\
    puts skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\nputs skjkasdkd([0,81,12,3,1,21])\n\
    puts skjkasdkd([0,8,1,2,1,7])", "  # lst\n  #   .map{|x| x.to_s}\n  #   .map{|x|\n\
    \  #     if x.length == 1\n  #       x\n  #     else\n  #       x[-1]\n  #   \
    \  end\n  #   }\n  #   .map{|x| x.to_i}\n  #   .inject(:+)\n  n = 0\n  for i in\
    \ 0..lst.length-1\n    x = lst[i].to_s\n    if x.length == 1\n      n += x.to_i\n\
    \    else\n      n += x[-1].to_i\n    end\n  end\n  n\nend", "  lst.map!{|el|\
    \ el.to_s.chars.map(&:to_i).reduce(:+)}\n  lst.each_with_index.map{|el,i| lst[i]\
    \ = [el,i]}.sort.map{|arr| arr[1]}.reverse.map{|i| lst[i]}.reject{|el| el == 1}.each\
    \ do |el|\n    lst.reject!{|num| num % el == 0 and num != el}\n  end\n  lst.max\n\
    end", "  sum = 0\n  x = lst.max\n  while x > 0\n    sum += x % 10\n    x /= 10\n\
    \  end\n  sum\nend", "  s=lst.map{|x|x.to_s}\n  t=lst.map{|x|x.to_s.split(\"\"\
    )}\n  g=[]\n  for i in (0..t.length-1)\n    for j in (0..t[i].length-1)\n    \
    \  g<<t[i][j]\n    end\n  end\n  f=0\n  for i in (2..lst.max)\n    if lst.max%i==0\n\
    \      f=i\n    end\n  end\n  sum=0\n  g.each do |x|\n    sum+=x.to_i\n  end\n\
    \  p sum\nend\nskjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])", "  lst.map\
    \ { |e| e if e.prime? }.compact.max.digits.sum\nend", "  lst.each { |prime| p\
    \ prime }\nend\nskjkasdkd(lst)", "  return 0 if lst.size <= 1\n  lst.delete_if\
    \ { |n| n < 2 }\n  return lst.max if lst.size <= 1\n  lst.delete_if { |n| n %\
    \ 2 == 0 }\n  return lst.max if lst.size <= 1\n  lst.delete_if { |n| n % 3 ==\
    \ 0 }\n  return lst.max if lst.size <= 1\n  lst.delete_if { |n| n % 5 == 0 }\n\
    \  return lst.max if lst.size <= 1\n  lst.delete_if { |n| n % 7 == 0 }\n  return\
    \ lst.max if lst.size <= 1\n  lst.delete_if { |n| n % 11 == 0 }\n  return lst.max\
    \ if lst.size <= 1\n  lst.delete_if { |n| n % 13 == 0 }\n  return lst.max if lst.size\
    \ <= 1\n  lst.delete_if { |n| n % 17 == 0 }\n  return lst.max if lst.size <= 1\n\
    \  lst.delete_if { |n| n % 19 == 0 }\n  return lst.max if lst.size <= 1\n  lst.delete_if\
    \ { |n| n % 23 == 0 }\n  return lst.max if lst.size <= 1\n  lst.delete_if { |n|\
    \ n % 29 == 0 }\n  return lst.max if lst.size <= 1\n  lst.delete_if { |n| n %\
    \ 31 == 0 }\n  return lst.max if lst.size <= 1\n  lst.delete_if { |n| n % 37 ==\
    \ 0 }\n  return lst.max if lst.size <= 1\n  lst.delete_if { |n| n % 41 == 0 }\n\
    \  return lst.max if lst.size <= 1\n  lst.delete_if { |n| n % 43 == 0 }\n  return\
    \ lst.max if lst.size <= 1\n  lst.delete_if { |n| n % 47 == 0 }\n  return lst",
  "  pmax = 0\n  lst.each do |v|\n    n = v\n    i = 2\n    while i*i <= n do\n  \
    \    while n % i == 0 do\n        n /= i\n      end\n      i += 1\n    end\n \
    \   if n > 1\n      pmax = n\n    end\n  end\n  smax = 0\n  while pmax > 0 do\n\
    \    smax += pmax % 10\n    pmax /= 10\n  end\n  return smax\nend\nputs skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    puts skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\nputs skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\n\
    puts skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\nputs skjkasdkd([0,81,12,3,1,21])\n\
    puts skjkasdkd([0,8,1,2,1,7])", "  primes = lst.select{|x| x.prime?}\n  if primes.empty?\n\
    \    return 0\n  else\n    return primes.max.to_s.chars.map(&:to_i).reduce(:+)\n\
    \  end\nend", "    arr = []\n    lst.each do |x|\n        arr.push(x) if lst.count(x)\
    \ > 1\n    end\n    arr.uniq.sort{|x,y| y <=> x}\nend", "  return 0 if lst.empty?\n\
    \  last = lst.sort.last\n  0 if last < 2\n  (2..last).each do |num|\n    is_prime\
    \ = true\n    (2..num - 1).each do |n|\n      if num % n == 0\n        is_prime\
    \ = false\n        break\n      end\n    end\n    return num if is_prime\n  end\n\
    end", "  sum = 0\n  lst.each do |x|\n    if x.prime? && x > sum\n      sum = x\n\
    \    end\n  end\n  arr = sum.to_s.split('')\n  p arr.map(&:to_i).reduce(:+)\n\
    end", "    sum = 0\n    a = lst.sort.last\n    while a > 0\n        sum += a %\
    \ 10\n        a /= 10\n    end\n    return sum\nend", "  prime_lst = []\n  (0..lst.length-1).each\
    \ do |i|\n    if is_prime(lst[i])\n      prime_lst << lst[i]\n    end\n  end\n\
    \  sum_digits(prime_lst.max)\nend", "\tprimes = []\n\tlst.each do |item|\n\t\t\
    if item != 0\n\t\t\tif prime?(item) == true\n\t\t\t\tprimes << item\n\t\t\tend\n\
    \t\tend\n\tend\n\tlargest_prime = primes.sort.last\n\treturn largest_prime.to_s.split(\"\
    \").map{|x| x.to_i}.reduce(:+)\nend", "  \n  lst = lst.select {|i| i if i > 0\
    \ && i.to_s.length > 1}\n  max = lst.max.to_s.chars.map(&:to_i).inject(:+)\n \
    \ puts max\n  return max\nend", "    if lst.size > 1\n        lst = lst.flatten.sort_by\
    \ {|x| -x}\n        lst.each do |x|\n            if is_prime?(x) == true\n   \
    \             p x\n                return x.to_s.split(\"\").map(&:to_i).reduce(:+)\n\
    \            end\n        end\n    else\n        lst = lst.flatten.sort_by {|x|\
    \ -x}\n        lst.each do |x|\n            if is_prime?(x) == true\n        \
    \        p x\n                return x.to_s.split(\"\").map(&:to_i).reduce(:+)\n\
    \            end\n        end\n    end\nend", "    return 0 if lst.size == 0\n\
    \    lst = lst.map{|x| x.to_s}.sort.reverse\n    return lst[0].to_i if lst[0].to_i.prime?\n\
    \    skjkasdkd(lst[1..-1])\nend", "\nend", "  lst.each do |a|\n    (2..a).each\
    \ do |i|\n      if a % i == 0\n        break\n      end\n    end\n  end\nend",
  "  primes = lst.select { |n| (2..n-1).select { |i| n % i == 0 }.count == 0 }\n \
    \ prime = primes.max\n  prime.to_s.split('').map(&:to_i).reduce(:+)\nend", "\t\
    # lst.sort.reverse.each { |i| return i.to_s.split('').map(&:to_i).reduce(:+) if\
    \ (2..i-1).all? { |i2| i % i2 != 0 } }\n\tlst.sort.reverse.find { |i| (2..i-1).all?\
    \ { |i2| i % i2 != 0 } }.to_s.split('').map(&:to_i).reduce(:+)\nend", "  hsh =\
    \ {}\n  lst.each do |x|\n    hsh[x] = {}\n    (1..x).each do |y|\n      if x %\
    \ y == 0\n        hsh[x][y] = true\n      end\n    end\n  end\n  hsh\nend", " \
    \ lst.map{|e| e.to_s.split('').map(&:to_i).reduce(:+)}.max\nend", "\tif lst.length\
    \ <= 1\n\t\treturn lst\n\tend\n\tleft = skjkasdkd(lst[0...lst.length/2])\n\tright\
    \ = skjkasdkd(lst[lst.length/2..-1])\n\treturn jakajkas(left, right)\nend", "\t\
    primes = []\n\tlst.each do |n|\n\t\tif n > 1\n\t\t\tif n % 2 == 0\n\t\t\t\tbreak\n\
    \t\t\telse\n\t\t\t\tprimes << n\n\t\t\tend\n\t\tend\n\tend\n\tprimes.max\nend",
  "  def sdfksdjf(n)\n    a = (1..n).select{|i| n % i == 0}\n    if a.length == 2\n\
    \      return true\n    else\n      return false\n    end\n  end\n  def sdlsjdkl(n)\n\
    \    sum = 0\n    while n > 0\n      sum += n % 10\n      n /= 10\n    end\n \
    \   return sum\n  end\n  lst.select!{|i| sdfksdjf(i)}\n  return sdlsjdkl(lst.max)\n\
    end\np skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\np skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\n\
    p skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\np skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\n\
    p skjkasdkd([0,81,12,3,1,21])\np skjkasdkd([0,8,1,2,1,7])", "  require 'prime'\n\
    \  lst = lst.select { |num| num.prime? }\n  lst.sort!.last.to_s.split('').map(&:to_i).reduce(:+)\n\
    end", "\tlst.sort.max.to_s.chars.map{|i| i.to_i}.inject(:+)\nend", "  val = 0\n\
    \  lst.each do |num|\n    num = num.to_s.split('')\n    num = num.map { |x| x.to_i\
    \ }\n    val += num.inject(:+)\n  end\n  val\nend", "  sum = 0\n  lst.sort!\n\
    \  lst.each_with_index do |element, index|\n    if element > 2\n      for i in\
    \ 2..element\n        if element % i == 0\n          if i == element\n       \
    \     sum += element.to_s.chars.map(&:to_i).reduce(:+)\n          else\n     \
    \       break\n          end\n        end\n      end\n    end\n  end\n  return\
    \ sum\nend\nlst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\nlst =\
    \ [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\nlst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\n\
    lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\nlst = [0,81,12,3,1,21]\nlst = [0,8,1,2,1,7]\n\
    puts skjkasdkd(lst)", "  p lst.select{|i| i.prime?}.max.to_s.split('').map(&:to_i).reduce(:+)\n\
    end\nskjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\nskjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\n\
    skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\nskjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\n\
    skjkasdkd([0,81,12,3,1,21])\nskjkasdkd([0,8,1,2,1,7])", "  lst.select{|i| i.prime?}.map(&:digits).max.sum\n\
    end", "  primes = []\n  lst.each do |i|\n    (2..i).each do |x|\n      if i %\
    \ x == 0\n        primes << i\n        break\n      end\n    end\n  end\n  y =\
    \ primes.uniq.max\n  x = y.to_s.split('').map(&:to_i).inject(:+)\nend", "  lst.map{|i|\
    \ i.to_s.split('').map(&:to_i).inject(:+)}.max\nend", "  # filter list for numbers\
    \ with more than 1 digit \n  nums = lst.filter{|num| num > 9}\n  # get largest\
    \ number \n  largest = nums.max\n  # convert to array of digits \n  digits = largest.to_s.split(\"\
    \")\n  # get prime \n  prime = digits.join(\"\").to_i\n  # get sum \n  sum = digits.map(&:to_i).sum\n\
    \  return sum\nend", "    primes = lst.find_all { |i| prime?(i) }\n    p primes\n\
    \    primes.map!(&:to_s)\n    primes.sort_by!(&:length)\n    p primes.last\n \
    \   largest_prime = primes.last.split('')\n    p largest_prime\n    largest_prime.map!(&:to_i)\n\
    \    largest_prime.reduce(:+)\nend", "\t# your code here\nend", "\tresult = []\n\
    \tfor value in lst\n\t\tcounter = 0\n\t\tfor i in (1..value)\n\t\t\tif value %\
    \ i == 0\n\t\t\t\tcounter += 1\n\t\t\tend\n\t\tend\n\t\tif counter == 2\n\t\t\t\
    result << value\n\t\tend\n\tend\n\tresult\nend", "    prime = 0\n    primelist\
    \ = []\n    test = (2..lst.sort.last).each do |num|\n        index = 2\n     \
    \   while index < num && num % index != 0\n            index += 1\n        end\n\
    \        if index == num\n            primelist << num\n        end\n    end\n\
    \    prime = primelist.last\n    p prime\n    sum = 0\n    while prime != 0\n\
    \        sum += prime % 10\n        prime /= 10\n    end\n    p sum\nend\nskjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\nskjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\n\
    skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\nskjkasdkd([0,81,12,3,1,21])\n\
    skjkasdkd([0,8,1,2,1,7])", "    x = lst.max\n    y = x.to_s.split('').map(&:to_i).inject(:+)\n\
    \    p y\nend\nskjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\nskjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\n\
    skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\nskjkasdkd([0,81,12,3,1,21])\n\
    skjkasdkd([0,8,1,2,1,7])", "  i = 0\n  lst.length.times do |k|\n    if lst[k]\
    \ != 0\n      for j in lst[k]\n        i += j\n      end\n    end\n  end\n  i\n\
    end", "  require 'prime'\n  a = lst.map{|x|x.abs.prime_division}\n  b = a.map{|x|\
    \ x.flatten}.map{|x| x.select{|y|y>1}}\n  c = b.map{|x| x.map{|x|x.to_s.split('')}}\n\
    \  d = c.map{|x| x.map{|x|x.map{|x|x.to_i}}}\n  e = d.map{|x| x.map{|x|x.sum}}\n\
    \  f = e.map{|x| x.sort}\n  g = f.map{|x| x.last}\n  h = g.sort\n  h.last\nend\n\
    lst = [0,81,12,3,1,21]\np skjkasdkd(lst)", "  puts lst.select { |e| e.to_s.split('').map\
    \ { |x| x.to_i }.reduce(:+) }.max.to_s.split('').map { |x| x.to_i }.reduce(:+)\n\
    end", '  return 0 if lst.count(0) > 0', "  prime = lst.select { |n| (2..n-1).none?\
    \ { |i| n % i == 0 } }.max\n  prime.to_s.split('').map(&:to_i).inject(:+)\nend",
  "  nums = []\n  lst.each do |x|\n    if prime?(x)\n      nums << x\n    end\n  end\n\
    \  p nums.max\n  nums.max.to_s.split(\"\").map {|x| x.to_i}.inject(:+)\nend",
  "  \n  highest_prime = 0\n  for i in 0..lst.length\n    puts \"i: #{i}\"\n    puts\
    \ \"lst[i]: #{lst[i]}\"\n    prime = true\n    for j in 2..(lst[i]-1)\n      puts\
    \ \"j: #{j}\"\n      if lst[i] % j == 0\n        prime = false\n      end\n  \
    \  end\n    if prime == true && lst[i] > highest_prime\n      highest_prime =\
    \ lst[i]\n    end\n  end\n  puts \"highest_prime: #{highest_prime}\"\n  highest_prime_arr\
    \ = highest_prime.to_s.split(\"\")\n  puts \"highest_prime_arr: #{highest_prime_arr}\"\
    \n  highest_prime_arr_sum = 0\n  for k in 0..highest_prime_arr.length\n    highest_prime_arr_sum\
    \ += highest_prime_arr[k].to_i\n  end\n  puts \"highest_prime_arr_sum: #{highest_prime_arr_sum}\"\
    \n  return highest_prime_arr_sum\nend", "  lst.each_with_object([]) do |x, arr|\n\
    \    arr << x if arr.last(2).all?{|y| x % y != 0}\n  end.last.to_s.chars.map(&:to_i).inject(:+)\n\
    end", "  sum = 0\n  lst.each do |i|\n    sum += i.to_s.split('').map(&:to_i).inject(:+)\n\
    \  end\n  sum\nend", "\tlst.sort!\n\tlst.reverse!\n\tif lst.index(0) != nil\n\t\
    \tlst.delete_at(lst.index(0))\n\tend\n\ti = 0\n\twhile i < lst.length\n\t\tif\
    \ lst[i] % 2 == 0 || lst[i] % 3 == 0 || lst[i] % 5 == 0 || lst[i] % 7 == 0\n\t\
    \t\tlst.delete_at(i)\n\t\telse\n\t\t\ti += 1\n\t\tend\n\tend\n\tlst[0]\nend",
  "  return lst.inject(:+) if lst.all? { |item| [0,1].include?(item) }\n  largest_prime\
    \ = lst.uniq.sort.reverse.find { |item| item.prime? }\n  largest_prime.to_s.chars.map(&:to_i).inject(:+)\n\
    end", "  lst.reject{|i| !i.prime?}.max.to_s.split('').map(&:to_i).reduce(:+)\n\
    end", "  lst.select { |v| v if v > 1 }.map { |v| v if v.prime? }.compact.max.digits.sum\n\
    end", "  lst.map!{|n| isPrime(n) ? n : 0}.select!{|n| n != 0}.max.to_s.split('').map!{|n|\
    \ n.to_i}.inject(:+)\nend", "  lst.select{|i|prime?(i)}.max.to_s.chars.map(&:to_i).reduce(:+)\n\
    end", "    count = 0\n    prime = 1\n    sum = 0\n    while count < lst.length\n\
    \        if lst[count] == 0\n            count += 1\n            next\n      \
    \  end\n        prime = lst[count]\n        for i in 2..(prime/2)\n          \
    \  if prime % i == 0\n                prime = 1\n                break\n     \
    \       end\n        end\n        if prime != 1\n            count += 1\n    \
    \        next\n        end\n        while prime != 0\n            sum += prime\
    \ % 10\n            prime /= 10\n        end\n        return sum\n    end\nend\n\
    lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\nprint skjkasdkd(lst)",
  "  num = lst.max\n  prime = false\n  while !prime\n    if num > 2\n      prime =\
    \ true\n      for i in 2..(num/2)\n        if num % i == 0\n          prime =\
    \ false\n          break\n        end\n      end\n    else\n      prime = true\n\
    \    end\n    if !prime\n      num -= 1\n    end\n  end\n  sum = 0\n  num.to_s.each_char\
    \ {|d| sum += d.to_i}\n  sum\nend", "  sum = 0\n  largest = 0\n  lst.each do |num|\n\
    \    if num.is_prime?\n      if num > largest\n        largest = num\n      end\n\
    \    end\n  end\n  largest.to_s.each_char do |char|\n    sum += char.to_i\n  end\n\
    \  sum\nend", "  res = []\n  lst.each { |e| res << e if isPrime(e) }\n  res.max.to_s.chars.map(&:to_i).inject(:+)\n\
    end", "    large = 0\n    lst.each do |s|\n        primes = (1..s).to_a.select\
    \ {|n| (1..n).select {|d| n % d == 0}.length == 2}\n        primes.each do |k|\n\
    \            if k > large\n                large = k\n            end\n      \
    \  end\n    end\n    num_array = large.to_s.split(\"\")\n    sum = 0\n    num_array.each\
    \ do |a|\n        sum += a.to_i\n    end\n    return sum\nend", "  lst.select{|n|\
    \ n if n.prime? }.max.digits.sum\nend", "    largest_prime = nil\n    primes =\
    \ []\n    num = 0\n    for i in (0..lst.length)\n        for j in (2..lst[i])\n\
    \            if lst[i] % j == 0\n                num += 1\n            end\n \
    \       end\n        if num == 1\n            primes.push(lst[i])\n        end\n\
    \        num = 0\n    end\n    largest_prime = primes.max\n    sum = 0\n    while\
    \ largest_prime > 0\n        sum += largest_prime % 10\n        largest_prime\
    \ /= 10\n    end\n    return sum\nend", "  (lst - [0,1]).max_by { |e| e if e.prime?\
    \ }.digits.sum\nend", "    y=lst.map{|x| x.prime_division}\n    y.each do |x|\n\
    \        x.delete(1)\n    end\n    arr=[]\n    y.each do |x|\n        arr<<x.flatten[0]\n\
    \    end\n    p arr.sort[-1]\nend\nskjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\nskjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\n\
    skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\nskjkasdkd([0,81,12,3,1,21])\n\
    skjkasdkd([0,8,1,2,1,7])\nskjkasdkd([1,1,1,1,1,8])", "  lst.sort[-1].digits.sum\n\
    end", "  lst.map { |el| el if (el.prime? && el > 9 ) }.compact.max.to_s.split('').map\
    \ { |el| el.to_i }.reduce(:+)\nend", "  arr = []\n  lst.each do |num|\n    arr\
    \ << num if num.prime?\n  end\n  largest = arr.max\n  sum = 0\n  largest.to_s.split('').each\
    \ do |num|\n    sum += num.to_i\n  end\n  sum\nend", "  lst.map do |x|\n    if\
    \ x < 10 && prime(x) == true\n      x\n    elsif x > 10 && prime(x) == true\n\
    \      x.to_s.split('').map { |x| x.to_i }.reduce(:+)\n    end\n  end.compact.max\n\
    end", "  #find the largest prime number\n  max = lst.max\n  for i in (2..max)\n\
    \    max = i if max % i == 0\n  end\n  #find the sum of the digits\n  sum = 0\n\
    \  while max > 0\n    sum += max % 10\n    max /= 10\n  end\n  return sum\nend",
  "\tlst.each_index do |i|\n\t\tlst[i] = lst[i].to_s.chars.map(&:to_i)\n\tend\n\t\
    lst.flatten!\n\tlst.each_index do |i|\n\t\tif lst[i] == 0\n\t\t\tlst.delete_at(i)\n\
    \t\tend\n\tend\n\tlst.sort!.reverse!\n\tlst.each_index do |i|\n\t\tif lst[i] ==\
    \ 0\n\t\t\tlst.delete_at(i)\n\t\tend\n\tend\n\tlst.each_index do |i|\n\t\tif lst[i]\
    \ == 1\n\t\t\tlst.delete_at(i)\n\t\tend\n\tend\n\tlst.each_index do |i|\n\t\t\
    if lst[i] == 2\n\t\t\tlst.delete_at(i)\n\t\tend\n\tend\n\tlst.each_index do |i|\n\
    \t\tif lst[i] % 2 == 0\n\t\t\tlst.delete_at(i)\n\t\tend\n\tend\n\tlst.each_index\
    \ do |i|\n\t\tif lst[i] % 3 == 0\n\t\t\tlst.delete_at(i)\n\t\tend\n\tend\n\tlst.each_index\
    \ do |i|\n\t\tif lst[i] % 5 == 0\n\t\t\tlst.delete_at(i)\n\t\tend\n\tend\n\tlst.each_index\
    \ do |i|\n\t\tif lst[i] % 7 == 0\n\t\t\tlst.delete_at(i)\n\t\tend\n\tend\n\tputs\
    \ lst.max\n\tputs lst.max.to_s.chars.map(&:to_i).inject(:+)\nend\nskjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])",
  "  prime_value = 0\n  lst.each do |number|\n    prime_value = number if prime?(number)\
    \ && number > prime_value\n  end\n  prime_value.to_s.split('').inject(0) { |sum,\
    \ n| sum + n.to_i }\nend", "    # Get all primes\n    # p lst.uniq.map{|i| get_all_prime_numbers(i)}.flatten.max\n\
    \    # p lst.uniq.map{|i| get_all_prime_numbers(i)}.flatten.max.to_s.chars.map(&:to_i).reduce(:+)\n\
    \    lst.uniq.map{|i| get_all_prime_numbers(i)}.flatten.max.to_s.chars.map(&:to_i).reduce(:+)\n\
    end", "  prime_factors = lst.map { |num| factors(num) }.select { |arr| arr.length\
    \ == 1 && arr[0] != 1 }.flatten.sort.uniq\n  largest_prime = prime_factors.last\n\
    \  num_str = largest_prime.to_s\n  num_str.split('').map(&:to_i).inject(:+)\n\
    end", "  arr = []\n  lst.each do |x|\n    arr << isPrime(x)\n  end\n  max = arr.max\n\
    \  max.to_s.split('').map(&:to_i).reduce(:+)\nend", "  lst.map{|c| c.digits}.flatten.uniq.reduce(0,\
    \ :+)\nend", "    arr = []\n    lst.each do |int|\n        arr << int if int.prime?\n\
    \    end\n    return nil if arr.empty?\n    largest = arr.max\n    sum = 0\n \
    \   largest.to_s.each_char do |char|\n        sum += char.to_i\n    end\n    sum\n\
    end", "  m = lst.inject(Hash.new(0)) { |h, v| h[v] += 1; h }\n  prime = m.inject(0)\
    \ { |memo, (k, v)| v >= 3 ? k : memo }\n  a = prime.to_s.split('').map(&:to_i)\n\
    \  a.reduce(:+)\nend", "  lst.map{|x| x.to_s.split('').map(&:to_i).inject(:+)}.max\n\
    end", "  aa = 0\n  lst.each do |i|\n    x = i.to_s.split('')\n    if is_prime?(i)\
    \ && i > aa\n      aa = i\n    end\n  end\n  bb = aa.to_s.split('')\n  bb.inject(0)\
    \ { |sum, n| sum + n.to_i }\nend", "  lst.max_by { |num| num if num.prime? }.digits.sum\n\
    end", "  # your code here\nend", "\tlst.delete_if{|x| x == 0}\n\tlst.delete_if{|x|\
    \ x == 1}\n\tlst.delete_if{|x| x.even?}\n\tlst.delete_if{|x| (3..x-1).any?{|y|\
    \ x % y == 0}}\n\tlst.map!{|x| x.to_s.split(\"\")}\n\tlst.map!{|x| x.map!{|y|\
    \ y.to_i}}\n\tlst.max.max\nend", "  \n  lst.each do |e|\n    puts \"--#{e}--\"\
    \n    sum = 0\n    val = e.abs\n    puts \"val:#{val}\"\n    while val > 0 do\n\
    \      puts val\n      sum += val % 10\n      val /= 10\n    end\n    puts \"\
    sum:#{sum}\"\n  end\n  \nend", "  \nend", "  largest_prime = 0\n  lst.each do\
    \ |num|\n    prime = true\n    if num <= 1\n      prime = false\n    end\n   \
    \ for divisor in 2..(num-1)\n      if num % divisor == 0\n        prime = false\n\
    \      end\n    end\n    if prime == true\n      if num > largest_prime\n    \
    \    largest_prime = num\n      end\n    end\n  end\n  digits = largest_prime.to_s.split('')\n\
    \  sum = 0\n  digits.each do |digit|\n    sum += digit.to_i\n  end\n  return sum\n\
    end\nputs skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\nputs\
    \ skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\nputs skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\n\
    puts skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\nputs skjkasdkd([0,81,12,3,1,21])\n\
    puts skjkasdkd([0,8,1,2,1,7])", "  res = 0\n  lst.uniq.each do |l|\n    if prime?(l)\n\
    \      res = l\n    end\n  end\n  sum = 0\n  while res > 0\n    sum += res % 10\n\
    \    res /= 10\n  end\n  sum\nend", "  lst.map { |n| n.to_s.split('').map(&:to_i).inject(:+)\
    \ }.max\nend", "  lst.max.to_s.split('').map(&:to_i).inject(:+)\nend", "  lst.sort[-1].to_s.split('').map(&:to_i).reduce(:+)\n\
    end", "  lst.delete_if{|x| x < 3 || x.even?}\n  primes = []\n  num = lst.max\n\
    \  while num > 2\n    if num > 3\n      if num % 2 == 0 || num % 3 == 0\n    \
    \    num = num - 1\n        next\n      end\n    end\n    prime = true\n    (2..Math.sqrt(num)).each\
    \ do |y|\n      if num % y == 0\n        prime = false\n        break\n      end\n\
    \    end\n    if prime\n      primes << num\n    end\n    num = num - 1\n  end\n\
    \  primes.sort!\n  primes[-1].to_s.split('').map{|x| x.to_i}.inject(:+)\nend",
  "  primes = []\n  lst.each do |a|\n    if is_prime?(a)\n      primes << a\n    end\n\
    \  end\n  largest_prime = primes.max\n  sum = 0\n  while largest_prime > 0\n \
    \   sum += largest_prime % 10\n    largest_prime /= 10\n  end\n  sum\nend", " \
    \ primes = []\n  p = 2\n  until primes.size == lst.size\n    (2..p/2).each do\
    \ |i|\n      if p % i == 0\n        break\n      end\n      primes << p if i ==\
    \ p/2\n    end\n    p += 1\n  end\n  prime = primes.max\n  sum = 0\n  until prime\
    \ == 0\n    sum += prime % 10\n    prime /= 10\n  end\n  sum\nend", "  primes\
    \ = lst.select{|x| is_prime?(x)}\n  primes.max.to_s.split('').map(&:to_i).reduce(:+)\n\
    end", "  lst.max.to_s.split('').map(&:to_i).reduce(:+)\nend", "  lst.map{|x| x.to_s.split('').map(&:to_i).inject(:+)}.max\n\
    end", "    prime_lst = lst.select {|x| is_prime?(x)}\n    largest_prime = prime_lst.max\n\
    \    largest_prime.to_s.chars.map(&:to_i).reduce(:+)\nend", "  primes = []\n \
    \ lst.each do |i|\n    primes << i if prime?(i)\n  end\n  primes.max.to_s.split('').map(&:to_i).reduce(:+)\n\
    end", "  return lst.max.to_s.split('').map(&:to_i).sum\nend", end, "  #map to\
    \ find primes and flatten to find the largest prime\n  return lst.map{|n| (2..n).to_a.select{|x|\
    \ n % x == 0}[1]}.flatten.max.to_s.chars.map(&:to_i).inject(:+)\nend", "    #\
    \ r = 0\n    # g = lst.max\n    # while g > 0\n    #     if g % 2 == 0 || g %\
    \ 3 == 0 || g % 5 == 0 || g % 7 == 0\n    #         g -= 1\n    #     else\n \
    \   #         r = g\n    #         g = 0\n    #     end\n    # end\n    # a =\
    \ r.to_s.split('')\n    # a.map{|x| x.to_i}.sum\n    # lst.select{|x| x if x %\
    \ 2 != 0 && x % 3 != 0 && x % 5 != 0 && x % 7 != 0}.max.to_s.split('').map{|x|\
    \ x.to_i}.sum\n    # lst.select{|x| x if x % 2 != 0 && x % 3 != 0 && x % 5 !=\
    \ 0 && x % 7 != 0}.max.to_s.chars.map(&:to_i).sum\n    lst.select{|x| x if x %\
    \ 2 != 0 && x % 3 != 0 && x % 5 != 0 && x % 7 != 0}.max.to_s.chars.map(&:to_i).reduce(:+)\n\
    end\np skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10\n\
    p skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25\np skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\
    \ == 13\np skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11\np skjkasdkd([0,81,12,3,1,21])\
    \ == 3\np skjkasdkd([0,8,1,2,", "    arr = []\n    largest = lst.max\n    check\
    \ = (1..largest).to_a\n    prime = check.select {|item| (1..item).to_a.select\
    \ {|ele| item % ele == 0}.length == 2}\n    prime.max\n    # p prime\n    # prime.each\
    \ {|item| item.to_s.split(\"\").map(&:to_i).inject(:+)}\n    # arr.push prime.map\
    \ {|item| item.to_s.split(\"\").map(&:to_i).inject(:+)}\n    # p arr\nend\np skjkasdkd([0,81,12,3,1,21])",
  "    #get largest prime\n    primes = lst.reject {|num| num % 2 == 0}\n    primes\
    \ = primes.reject {|num| num % 3 == 0}\n    primes = primes.reject {|num| num\
    \ % 5 == 0}\n    primes = primes.reject {|num| num % 7 == 0}\n    primes = primes.reject\
    \ {|num| num % 11 == 0}\n    primes = primes.reject {|num| num % 13 == 0}\n  \
    \  primes = primes.reject {|num| num % 17 == 0}\n    primes = primes.reject {|num|\
    \ num % 19 == 0}\n    primes = primes.reject {|num| num % 23 == 0}\n    primes\
    \ = primes.reject {|num| num % 29 == 0}\n    primes = primes.reject {|num| num\
    \ % 31 == 0}\n    primes = primes.reject {|num| num % 37 == 0}\n    primes = primes.reject\
    \ {|num| num % 41 == 0}\n    primes = primes.reject {|num| num % 43 == 0}\n  \
    \  primes = primes.reject {|num| num % 47 == 0}\n    primes = primes.reject {|num|\
    \ num % 53 == 0}\n    primes = primes.reject {|num| num % 59 == 0}\n    primes\
    \ = primes.reject {|num| num % 61 == 0}\n    primes = primes.reject {|num| num\
    \ % 67 == 0}\n    primes = primes.reject {|num| num % 71 == 0}\n    primes = primes.reject\
    \ {|num| num % 73 == 0}\n    primes = primes.reject {|num| num % 79 == 0}\n  \
    \  primes = primes.reject {|num| num % 83 == 0}\n    primes = primes.reject {|num|\
    \ num % 89 == 0}\n    primes = primes.reject {|num| num % 97 == 0}\n    primes\
    \ = pr", "    # your code here\nend", "  primes(lst.max).map(&:digits).map(&:sum).max\n\
    end", "  primes = lst.select{|n| is_prime?(n)}\n  return primes.max.to_s.split('').map(&:to_i).reduce(:+)\n\
    end", "  fk = lst.max\n  while(true)\n    result = true\n    (2..fk-1).each do\
    \ |k|\n      if(fk%k == 0)\n        result = false\n        break\n      end\n\
    \    end\n    if(result)\n      break\n    end\n    fk -= 1\n  end\n  tk = fk.to_s.chars.map(&:to_i)\n\
    \  tk.inject(:+)\nend", "    n = lst.sort.last\n    n.times do |x|\n        if\
    \ n % x == 0\n        if n % x == 0\n            if prime(x)\n               \
    \ x.to_s.split('').map {|y| y.to_i}.reduce(:+)\n            end\n        end\n\
    \    end\nend", "  primes = lst.select { |i| is_prime?(i) }\n  ans = \"\"\n  primes.max.to_s.each_char\
    \ { |c| ans += c }\n  ans.to_i\nend", "    lst.each do |x|\n        if x %\n \
    \   end\nend", "\tlst.map { |i| i.to_s.split('').map(&:to_i).inject(:+) }.max.to_s.split('').map(&:to_i).inject(:+)\n\
    end", "    lst.map { |e| e.to_s.split('').map(&:to_i).reduce(:+) if e.prime? }.compact.max\n\
    end", "  lst.map!{|i| i if i.prime?}.compact!\n  lst.sort.last.to_s.split('').map(&:to_i).reduce(:+)\n\
    end\np skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\np skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\n\
    p skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\np skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\n\
    p skjkasdkd([0,81,12,3,1,21])\np skjkasdkd([0,8,1,2,1,7])", "  lst.max.to_s.split('').map(&:to_i).reduce(:+)\n\
    end", "    lst.sort.select{|x|x.prime?}.last.to_s.chars.map(&:to_i).inject(:+)\n\
    end", "  a=lst.select{|x| x.prime?}\n  return a.max.to_s.split('').map{|x| x.to_i}.inject(:+)\n\
    end", "    p lst.max.to_s.split(\"\").map(&:to_i).inject(:+)\nend\nlst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\n\
    lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\nlst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\n\
    lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\nlst = [0,81,12,3,1,21]\nlst = [0,8,1,2,1,7]\n\
    skjkasdkd(lst)", "  prime = lst.max\n  num = 0\n  while prime != 1\n    if prime\
    \ % 2 == 0\n      prime = prime / 2\n    elsif prime % 3 == 0\n      prime = prime\
    \ / 3\n    elsif prime % 5 == 0\n      prime = prime / 5\n    elsif prime % 7\
    \ == 0\n      prime = prime / 7\n    else\n      break\n    end\n  end\n  if prime\
    \ == 1\n    prime = lst.max(2)[1]\n  end\n  while prime > 9\n    prime = prime.to_s.split('').map(&:to_i).inject(:+)\n\
    \  end\n  prime\nend", "  lst.map!{|i| i.prime?}.map.with_index {|i,j| j if i\
    \ == true}\n  .compact.map {|i| lst[i]}.max.to_s.chars.map(&:to_i).reduce(:+)\n\
    end", "\treturn 0 if lst.empty?\n\tlst.select! { |num| num.prime? }\n\tlst.sort!.reverse!\n\
    \tlst[0].to_s.chars.map { |c| c.to_i }.reduce(:+)\nend", end, "    arr = lst.find_all{|x|\
    \ x.prime?}\n    max = arr.max\n    sum = 0\n    while max > 0\n        sum +=\
    \ max % 10\n        max /= 10\n    end\n    sum\nend\np skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    p skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\np skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\n\
    p skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\np skjkasdkd([0,81,12,3,1,21])\n\
    p skjkasdkd([0,8,1,2,1,7])", "  lst.map { |x| x**0.5 }.map { |x| x.ceil if x ==\
    \ x.ceil }.delete_if { |x| x.nil? }.delete_if { |x| lst.include?(x) }.delete_if\
    \ { |x| x < 2 }.delete_if { |x| x == 2 }.delete_if { |x| x % 2 == 0 }.delete_if\
    \ { |x| lst.find { |y| y % x == 0 && y != x } }.max\nend", "  new_list = []\n\
    \  lst.each do |index|\n    if index > 1\n      if index.prime?\n        new_list\
    \ << index\n      end\n    end\n  end\n  max = new_list.max\n  max.to_s.split(\"\
    \").map(&:to_i).reduce(:+)\nend", "    # first = largest prime in list\n    #\
    \ return sum of digits\n    def isPrime(num)\n        if num < 2\n           \
    \ return false\n        end\n        for i in 2..Math.sqrt(num)\n            if\
    \ num % i == 0\n                return false\n            end\n        end\n \
    \       return true\n    end\n    first = nil\n    largest = 0\n    lst.each do\
    \ |num|\n        if isPrime(num)\n            if first == nil\n              \
    \  first = num\n            end\n            if num > largest\n              \
    \  largest = num\n            end\n        end\n    end\n    largest.to_s.chars.map(&:to_i).reduce(:+)\n\
    end", "  list = []\n  lst.each do |l|\n    list << l if l.prime?\n  end\n  sum\
    \ = list.max.to_s.chars.map(&:to_i).reduce(:+)\nend", "  sum = 0\n  last = -1\n\
    \  lst.uniq.each do |num|\n    next if lst.count(num) > 1\n    c_sum = 0\n   \
    \ num.to_s.split('').each do |c|\n      c_sum += c.to_i\n    end\n    sum = c_sum\
    \ if c_sum > sum\n    last = num if last < num\n  end\n  lst.delete(last)\n  sum\
    \ + skjkasdkd(lst)\nend", "  # your code\nend", "    prime_sum = 0\n    lst.each\
    \ do |num|\n        next if num < 2\n        next if lst.find { |num2| num2 !=\
    \ num && num % num2 == 0 }\n        # lst.find { |num2| num2 != num && num % num2\
    \ == 0 } ? next : nil\n        prime_sum += num.to_s.split('').map(&:to_i).sum\n\
    \    end\n    prime_sum\nend", "  new_arr = []\n  lst.each do |i|\n    if i >\
    \ 1\n      if i % 2 != 0\n        if i % 3 != 0\n          if i % 5 != 0\n   \
    \         if i % 7 != 0\n              new_arr << i\n            end\n       \
    \   end\n        end\n      end\n    end\n  end\n  puts new_arr.last\n  new_arr.last.to_s.split(\"\
    \").map{|i| i.to_i}.reduce(:+)\nend\nskjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])",
  "  #your code here\nend", "  num, digits = nil, []\n  (lst.length - 1).downto(0)\
    \ do |i|\n    n = lst[i]\n    next if n.nil? || n == 0\n    next if n % 2 == 0\n\
    \    next if (n % 2).zero? && (n / 2) % 2 == 0\n    if is_prime?(n)\n      num\
    \ = n\n      break\n    end\n  end\n  digits = num.to_s.chars.map(&:to_i)\n  digits.inject(:+)\n\
    end", "    newlst = []\n    lst.each do |val|\n        newlst.push(val) if prime(val)\n\
    \    end\n    newlst.sort! {|x,y| y <=> x}\n    dsum(newlst[0])\nend", "  lst.map\
    \ { |x| x if x.prime? }.compact.max.to_s.chars.map(&:to_i).reduce(:+)\nend", " \
    \ lst.select{|x| x.prime? }.max.digits.sum\nend", "  # largest_prime = 0\n  #\
    \ check = 3\n  # temp = 0\n  #\n  # loop do\n  #   is_prime = true\n  #   temp\
    \ = check / 2\n  #   temp.downto(2) do |i|\n  #     if check % i == 0\n  #   \
    \    is_prime = false\n  #       break\n  #     end\n  #   end\n  #   if is_prime\n\
    \  #     largest_prime = check\n  #   end\n  #   check += 1\n  #   break if check\
    \ > lst.max\n  # end\n  #\n  # largest_prime.to_s.chars.map(&:to_i).reduce(:+)\n\
    \  return 0 if lst.empty?\n  lst.uniq.each { |number|\n    temp = 2\n    until\
    \ number <= 1\n      if number % temp == 0\n        number /= temp\n      else\n\
    \        temp += 1\n      end\n    end\n    number = temp\n  }.max.to_s.chars.map(&:to_i).reduce(:+)\n\
    end", "  sum = 0\n  lst.sort.reverse.each do |num|\n    unless !(num % 2 == 0\
    \ || num % 3 == 0 || num % 5 == 0 || num % 7 == 0)\n      sum += num\n      break\n\
    \    end\n  end\n  sum.to_s.split('').map(&:to_i).inject(:+)\nend", "\tlst.uniq.sort.reverse.each\
    \ do |x|\n\t\tsum = 0\n\t\twhile x>0\n\t\t\tsum += x%10\n\t\t\tx = x/10\n\t\t\
    end\n\t\treturn sum if prime?(sum)\n\tend\nend", "  #...\nend", "  #your code\
    \ here\nend", "  arr = lst.join('').split('').uniq.map { |x| x.to_i }\n  sum =\
    \ 0\n  arr.each do |x|\n    sum += x\n  end\n  return sum\nend", "  lst.find {\
    \ |x| x.prime? }.digits.sum\nend", "\tlst.map!{|x|\n\t\tif x == 0 or x == 1 or\
    \ x == 2 or x == 3 or x == 5 or x == 7 or x == 11 or x == 13 or x == 17 or x ==\
    \ 19\n\t\t\tx\n\t\telsif x.to_s.length == 1\n\t\t\tx\n\t\telse\n\t\t\tx = (x **\
    \ 0.5).floor\n\t\tend\n\t}\n\tlst.delete_if{|x|\n\t\tx == 0 or x == 1 or x ==\
    \ 2 or x == 3 or x == 5 or x == 7 or x == 11 or x == 13 or x == 17 or x == 19\n\
    \t}\n\tif lst.length == 0\n\t\treturn 0\n\tend\n\tlst.max.to_s.split(\"\").map{|x|\
    \ x.to_i}.reduce(:+)\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
