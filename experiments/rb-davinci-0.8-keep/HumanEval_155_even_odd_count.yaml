name: HumanEval_155_even_odd_count
language: rb
prompt: "# Given an integer. return a tuple that has the number of even and odd digits\
  \ respectively.\n# Example:\n# even_odd_count(-12) ==> (1, 1)\n# even_odd_count(123)\
  \ ==> (1, 2)\ndef even_odd_count(num)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_even_odd_count\n\
  \    candidate = method(:even_odd_count)\n    assert_equal([0, 1], candidate.call(7))\n\
  \    assert_equal([1, 1], candidate.call(-78))\n    assert_equal([2, 2], candidate.call(3452))\n\
  \    assert_equal([3, 3], candidate.call(346211))\n    assert_equal([3, 3], candidate.call(-345821))\n\
  \    assert_equal([1, 0], candidate.call(-2))\n    assert_equal([2, 3], candidate.call(-45347))\n\
  \    assert_equal([1, 0], candidate.call(0))\n  end\nend\n"
completions: ["  even_odd = [0, 0]\n  num.to_s.split('').each do |i|\n    even_odd[0]\
    \ += 1 if i.to_i.even?\n    even_odd[1] += 1 if i.to_i.odd?\n  end\n  even_odd\n\
    end", "  a = num.to_s.split('')\n  num_even = 0\n  num_odd = 0\n  a.each do |n|\n\
    \    n = n.to_i\n    if n % 2 == 0\n      num_even += 1\n    else\n      num_odd\
    \ += 1\n    end\n  end\n  p [num_even, num_odd]\nend", "  if num < 0\n    num\
    \ = num * -1\n  end\n  evens = 0\n  odds = 0\n  num.to_s.split(\"\").each do |num|\n\
    \    num.to_i.even? ? evens += 1 : odds += 1\n  end\n  return [evens, odds]\n\
    end", "  evens = 0\n  odds = 0\n  num.to_s.split('').each do |i|\n    if i.to_i\
    \ % 2 == 0\n      evens += 1\n    else\n      odds += 1\n    end\n  end\n  p [evens,\
    \ odds]\nend", "  count_even = 0\n  count_odd = 0\n  loop do\n    num_remainder\
    \ = num%10\n    if num_remainder%2 == 0\n      count_even += 1\n    else\n   \
    \   count_odd += 1\n    end\n    num = num/10\n    break if num == 0\n  end\n\
    \  return count_even, count_odd\nend\nputs even_odd_count(-12)\nputs even_odd_count(123)",
  "  a, b = 0, 0\n  num.to_s.each_char do |i|\n    if i.to_i.even?\n      a += 1\n\
    \    else\n      b += 1\n    end\n  end\n  [a, b]\nend", "\tnum_str = num.to_s\n\
    \teven = num_str.split('').count { |d| d.to_i.even? }\n\todd = num_str.split('').count\
    \ { |d| d.to_i.odd? }\n\t[even, odd]\nend", "  return [0, 0] if num.zero?\n  [num.abs.to_s.split('').count\
    \ { |digit| digit.to_i.even? }, num.abs.to_s.split('').count { |digit| digit.to_i.odd?\
    \ }]\nend", "  str_num = num.to_s\n  even_count = 0\n  odd_count = 0\n  (0...str_num.length).each\
    \ do |i|\n    if str_num[i].to_i % 2 == 0\n      even_count += 1\n    else\n \
    \     odd_count += 1\n    end\n  end\n  return even_count, odd_count\nend", " \
    \ odd_count = 0\n  even_count = 0\n  num.abs.to_s.each_char do |num|\n    num.to_i.even?\
    \ ? even_count += 1 : odd_count += 1\n  end\n  [even_count, odd_count]\nend",
  "  even_array = []\n  odd_array = []\n  num.to_s.each_char do |num|\n    even_array\
    \ << num if num.to_i.even?\n    odd_array << num if num.to_i.odd?\n  end\n  even_odd_array\
    \ = [even_array.length, odd_array.length]\nend", "  counter = 0\n  evens = 0\n\
    \  odds = 0\n  while num != 0\n    if num % 2 == 0\n      evens += 1\n    else\n\
    \      odds += 1\n    end\n    num /= 10\n  end\n  p evens, odds\nend", "  if\
    \ num > 0\n    evens = num.to_s.chars.map(&:to_i).select { |num| num.even? }.length\n\
    \    odds = num.to_s.chars.map(&:to_i).select { |num| num.odd? }.length\n  else\n\
    \    num = num.abs\n    evens = num.to_s.chars.map(&:to_i).select { |num| num.even?\
    \ }.length\n    odds = num.to_s.chars.map(&:to_i).select { |num| num.odd? }.length\n\
    \  end\n  [evens, odds]\nend", "\teven_count = 0\n\todd_count = 0\n\tnum.to_s.each_char\
    \ do |n|\n\t\tif n.to_i % 2 == 0\n\t\t\teven_count += 1\n\t\telse\n\t\t\todd_count\
    \ += 1\n\t\tend\n\tend\n\treturn even_count, odd_count\nend", "\tarray = num.abs.to_s.split('')\n\
    \teven = 0\n\todd = 0\n\tarray.each do |x|\n\t\tif x.to_i % 2 == 0\n\t\t\teven\
    \ += 1\n\t\telse\n\t\t\todd += 1\n\t\tend\n\tend\n\treturn even, odd\nend", " \
    \ return [num.to_s.scan(/[24680]/).length, num.to_s.scan(/[13579]/).length]\n\
    end", "  even = 0\n  odd = 0\n  num = num.abs\n  while num > 0\n    num % 2 ==\
    \ 0 ? even += 1 : odd += 1\n    num /= 10\n  end\n  return even, odd\nend", " \
    \ even = num.to_s.scan(/[24680]/).count\n  odd = num.to_s.scan(/[13579]/).count\n\
    \  return even, odd\nend", "    # your code here\nend", "  even_count = 0\n  odd_count\
    \ = 0\n  num.to_s.split(\"\").each do |i|\n    if i.to_i.even?\n      even_count\
    \ += 1\n    else\n      odd_count += 1\n    end\n  end\n  return even_count, odd_count\n\
    end", "  evens = num.to_s.chars.count { |i| i.to_i.even? }\n  odds = num.to_s.chars.count\
    \ { |i| i.to_i.odd? }\n  return evens, odds\nend", "  num = num.abs.to_s.split('')\n\
    \  even = num.select { |n| n.to_i.even? }\n  odd = num.select { |n| n.to_i.odd?\
    \ }\n  even_num = even.length\n  odd_num = odd.length\n  tuple = [even_num, odd_num]\n\
    \  return tuple\nend", "\nend", "  # Your code here.\nend", "\tstr = num.to_s\n\
    \tarr = str.split('')\n\tevens = 0\n\todds = 0\n\t\n\tfor i in 0..arr.length-1\n\
    \t\t#puts arr[i]\n\t\tif arr[i].to_i % 2 == 0\n\t\t\tevens += 1\n\t\telse\n\t\t\
    \todds += 1\n\t\tend\n\tend\n\t\n\treturn evens, odds\nend", "    count = num.to_s.chars.map(&:to_i)\n\
    \    even = count.select {|x| x.even?}.count\n    odd = count.select {|x| x.odd?}.count\n\
    \    return even, odd\nend", "  even_count = 0\n  odd_count = 0\n  num.to_s.each_char\
    \ do |digit|\n    digit = digit.to_i\n    if digit.even?\n      even_count +=\
    \ 1\n    else\n      odd_count += 1\n    end\n  end\n  return even_count, odd_count\n\
    end", "  even_count = 0\n  odd_count = 0\n  num.abs.to_s.split('').each do |char|\n\
    \    if char.to_i.even?\n      even_count += 1\n    else\n      odd_count += 1\n\
    \    end\n  end\n  [even_count, odd_count]\nend", "  even = num.to_s.chars.map(&:to_i).select(&:even?).size\n\
    \  odd = num.to_s.chars.map(&:to_i).select(&:odd?).size\n  [even, odd]\nend",
  "    even_count = 0\n    odd_count = 0\n    num.to_s.split(\"\").each do |ch|\n\
    \        if ch.to_i % 2 == 0\n            even_count += 1\n        else\n    \
    \        odd_count += 1\n        end\n    end\n    return even_count, odd_count\n\
    end", "  even_count = 0\n  odd_count = 0\n  num.to_s.split(\"\").each do |num|\n\
    \    if num.to_i % 2 == 0\n      even_count += 1\n    else\n      odd_count +=\
    \ 1\n    end\n  end\n  return [even_count, odd_count]\nend", "  even = 0\n  odd\
    \ = 0\n  num.abs.to_s.chars.each do |char|\n    if char.to_i.even?\n      even\
    \ += 1\n    else\n      odd += 1\n    end\n  end\n  [even, odd]\nend", "  count\
    \ = num.to_s.split('').select{|i| i.to_i.even?}.count\n  count_odd = num.to_s.split('').select{|i|\
    \ i.to_i.odd?}.count\n  [count, count_odd]\nend", "\tif num > 0\n\t\tcount_even\
    \ = num.to_s.split('').count{|x| x.to_i.even?}\n\t\tcount_odd = num.to_s.split('').count{|x|\
    \ x.to_i.odd?}\n\telse\n\t\tcount_even = num.to_s.split('').count{|x| x.to_i.even?\
    \ - 1}\n\t\tcount_odd = num.to_s.split('').count{|x| x.to_i.odd? - 1}\n\tend\n\
    \t[count_even, count_odd]\nend", "  even = num.to_s.scan(/[02468]/).length\n \
    \ odd = num.to_s.scan(/[13579]/).length\n  return even, odd\nend", "  digits =\
    \ num.abs.to_s.chars.map(&:to_i)\n  evens = digits.select(&:even?)\n  odds = digits.select(&:odd?)\n\
    \  [evens.size, odds.size]\nend", "    # TODO\n    return [(num.abs.to_s.chars.map\
    \ {|x| x.to_i}).select {|i| i % 2 == 0}.length,\n            (num.abs.to_s.chars.map\
    \ {|x| x.to_i}).select {|i| i % 2 != 0}.length]\nend", "  even_count = 0\n  odd_count\
    \ = 0\n  num.to_s.each_char { |c| even_count += 1 if c.to_i.even? }\n  num.to_s.each_char\
    \ { |c| odd_count += 1 if c.to_i.odd? }\n  [even_count, odd_count]\nend", "  \
    \  evens = 0\n    odds = 0\n    num = num.abs\n    num.to_s.each_char do |char|\n\
    \        if char.to_i % 2 == 0\n            evens += 1\n        else\n       \
    \     odds += 1\n        end\n    end\n    return evens, odds\nend", "  return\
    \ [num.to_s.scan(/[02468]/).count, num.to_s.scan(/[13579]/).count]\nend", "  counter\
    \ = {odd: 0, even: 0}\n  num = num.abs\n  num.to_s.split('').each do |n|\n   \
    \ n.to_i.even? ? counter[:even] += 1 : counter[:odd] += 1\n  end\n  return counter.values\n\
    end\np even_odd_count(-12)\np even_odd_count(123)\np even_odd_count(888)", "\t\
    digits = num.to_s.split('')\n\teven_count = 0\n\todd_count = 0\n\tdigits.each\
    \ do |digit|\n\t\tif digit.to_i.even?\n\t\t\teven_count += 1\n\t\telse\n\t\t\t\
    odd_count += 1\n\t\tend\n\tend\n\treturn even_count, odd_count\nend", "  even\
    \ = 0\n  odd = 0\n  num.to_s.split('').each do |n|\n    if n.to_i % 2 == 0\n \
    \     even += 1\n    else\n      odd += 1\n    end\n  end\n  return [even, odd]\n\
    end", "  even = 0\n  odd = 0\n  num.to_s.split('').each do |i|\n    if i.to_i\
    \ % 2 == 0\n      even += 1\n    else\n      odd += 1\n    end\n  end\n  puts\
    \ \"#{even}, #{odd}\"\nend", "    return (num.abs.to_s.chars.map(&:to_i).select\
    \ { |num| num.even? }.length, num.abs.to_s.chars.map(&:to_i).select { |num| num.odd?\
    \ }.length)\nend", "  num = num.abs if num < 0\n  evens = []\n  odds = []\n  num.to_s.each_char\
    \ { |c| c.to_i.even? ? evens << c : odds << c }\n  [evens.length, odds.length]\n\
    end", "  return [(num.to_s.split('').map { |i| i.to_i }.select { |i| i.even? }.count),\
    \ (num.to_s.split('').map { |i| i.to_i }.select { |i| i.odd? }.count)]\nend",
  "  even = 0\n  odd = 0\n  num.to_s.each_char do |char|\n    if char.to_i.even?\n\
    \      even += 1\n    else\n      odd += 1\n    end\n  end\n  even = 0 if even.nil?\n\
    \  odd = 0 if odd.nil?\n  [even, odd]\nend", "\tarr = num.to_s.split('')\n\tcount_even\
    \ = 0\n\tcount_odd = 0\n\tarr.each do |x|\n\t\tif x.to_i % 2 == 0\n\t\t\tcount_even\
    \ += 1\n\t\telse\n\t\t\tcount_odd += 1\n\t\tend\n\tend\n\treturn [count_even,\
    \ count_odd]\nend", "  even = num.to_s.scan(/[02468]/).count\n  odd = num.to_s.scan(/[13579]/).count\n\
    \  return even, odd\nend", "  even_count = 0\n  odd_count = 0\n  num.to_s.split(\"\
    \").each do |n|\n    if n.to_i % 2 == 0\n      even_count += 1\n    else\n   \
    \   odd_count += 1\n    end\n  end\n  return even_count, odd_count\nend", "  return\
    \ [num.to_s.count('248'), num.to_s.count('13579')]\nend", "    if num < 0\n  \
    \      num = num.abs\n    end\n    even_count = 0\n    odd_count = 0\n    num.to_s.split(\"\
    \").each do |digit|\n        if digit.to_i.even?\n            even_count += 1\n\
    \        else\n            odd_count += 1\n        end\n    end\n    return even_count,\
    \ odd_count\nend", "  num = num.abs if num < 0\n  evens = 0\n  odds = 0\n  while\
    \ num > 0\n    last_digit = num % 10\n    if last_digit % 2 == 0\n      evens\
    \ += 1\n    else\n      odds += 1\n    end\n    num /= 10\n  end\n  return evens,\
    \ odds\nend", "  even_count = 0\n  odd_count = 0\n  num.to_s.each_char do |char|\n\
    \    if char.to_i.even?\n      even_count += 1\n    else\n      odd_count += 1\n\
    \    end\n  end\n  [even_count, odd_count]\nend", "  # code\nend", end, "  sum_even\
    \ = 0\n  sum_odd = 0\n  arr = num.to_s.split('')\n  arr.each do |i|\n    if i.to_i.even?\n\
    \      sum_even += 1\n    else\n      sum_odd += 1\n    end\n  end\n  return sum_even,\
    \ sum_odd\nend", "  return [0, 0] if num == 0\n  evens = num.to_s.split('').map(&:to_i).select\
    \ { |i| i.even? }.size\n  odds = num.to_s.split('').map(&:to_i).select { |i| i.odd?\
    \ }.size\n  return [evens, odds]\nend", "  num.to_s.split('').map(&:to_i).partition(&:even?).map(&:count)\n\
    end", "  evens = 0\n  odds = 0\n  if num < 0\n    num = num * -1\n  end\n  num.to_s.split('').each\
    \ do |s|\n    s = s.to_i\n    if s % 2 == 0\n      evens += 1\n    else\n    \
    \  odds += 1\n    end\n  end\n  return evens, odds\nend", "  even = 0\n  odd =\
    \ 0\n  num.to_s.each_char { |i| i.to_i.even? ? even += 1 : odd += 1 }\n  return\
    \ [even, odd]\nend", "  even = 0\n  odd = 0\n  arr = num.to_s.split('')\n  arr.each\
    \ do |x|\n    if x.to_i % 2 == 0\n      even += 1\n    else\n      odd += 1\n\
    \    end\n  end\n  return even, odd\nend", "  even_odd = [0, 0]\n  num.abs.to_s.chars.each\
    \ do |n|\n    even_odd[n.to_i.even? ? 0 : 1] += 1\n  end\n  even_odd\nend", " \
    \ if num > 0\n    count1 = 0\n    count2 = 0\n    num.to_s.each_char do |i|\n\
    \      if i.to_i % 2 == 0\n        count1 += 1\n      else\n        count2 +=\
    \ 1\n      end\n    end\n    return count1, count2\n  else\n    count1 = 0\n \
    \   count2 = 0\n    num.to_s.slice(1..-1).each_char do |i|\n      if i.to_i %\
    \ 2 == 0\n        count1 += 1\n      else\n        count2 += 1\n      end\n  \
    \  end\n    return count1, count2\n  end\nend", "    even_odd_count = {even: 0,\
    \ odd: 0}\n    num.to_s.split('').each do |num|\n        if num.to_i.even?\n \
    \           even_odd_count[:even] += 1\n        else\n            even_odd_count[:odd]\
    \ += 1\n        end\n    end\n    even_odd_count.values\nend", "  arr = num.to_s.split('')\n\
    \  even = arr.select { |n| n.to_i.even? }\n  odd = arr.select { |n| n.to_i.odd?\
    \ }\n  [even.length, odd.length]\nend", "  even = num.abs.to_s.chars.count { |i|\
    \ i.to_i.even? }\n  odd = num.abs.to_s.chars.count { |i| i.to_i.odd? }\n  return\
    \ even, odd\nend", "  evens, odds = 0, 0\n  num.abs.to_s.chars do |num|\n    evens\
    \ += 1 if num.to_i.even?\n    odds += 1 if num.to_i.odd?\n  end\n  [evens, odds]\n\
    end", "\tputs \"Enter a number:\"\n\tnum = gets.chomp.to_i\n\teven = []\n\todd\
    \ = []\n\ta = num.to_s.split('')\n\ta.each do |num|\n\t\tif num.to_i % 2 == 0\n\
    \t\t\teven << num\n\t\telse\n\t\t\todd << num\n\t\tend\n\tend\n\teven_count =\
    \ even.count\n\todd_count = odd.count\n\ttuple = even_count, odd_count\n\tp tuple\n\
    end", "  return [num.abs.to_s.count(\"02468\"), num.abs.to_s.count(\"13579\")]\n\
    end", "  arr = num.to_s.split('')\n  even = arr.select { |i| i.to_i.even? }\n\
    \  odd = arr.select { |i| i.to_i.odd? }\n  [even.length, odd.length]\nend", " \
    \ if num < 0\n    num = num * -1\n  end\n  digits = num.to_s.split('')\n  odd\
    \ = 0\n  even = 0\n  digits.each do |i|\n    if i.to_i % 2 == 0\n      even +=\
    \ 1\n    else\n      odd += 1\n    end\n  end\n  [even, odd]\nend", "    e, o\
    \ = 0, 0\n    num.to_s.each_char do |x|\n        if x.to_i % 2 == 0\n        \
    \    e += 1\n        else\n            o += 1\n        end\n    end\n    return\
    \ e, o\nend", "  count = num.abs.to_s.split('').map(&:to_i)\n  even = 0\n  odd\
    \ = 0\n  count.each do |i|\n    if i % 2 == 0\n      even += 1\n    else\n   \
    \   odd += 1\n    end\n  end\n  return even, odd\nend", "\tarr = num.to_s.split('')\n\
    \teven = 0\n\todd = 0\n\tarr.each do |i|\n\t\tif i.to_i % 2 == 0\n\t\t\teven +=\
    \ 1\n\t\telse\n\t\t\todd += 1\n\t\tend\n\tend\n\t[even, odd]\nend", "  num_arr\
    \ = num.to_s.split('')\n  even = num_arr.map { |e| e.to_i }.select { |e| e.even?\
    \ }.count\n  odd = num_arr.map { |e| e.to_i }.select { |e| e.odd? }.count\n  return\
    \ [even, odd]\nend", "  hash = {\n    even_count: 0,\n    odd_count: 0\n  }\n\
    \  num.to_s.split('').each do |x|\n    if x.to_i.even?\n      hash[:even_count]\
    \ += 1\n    else\n      hash[:odd_count] += 1\n    end\n  end\n  [hash[:even_count],\
    \ hash[:odd_count]]\nend", "  a = []\n  b = []\n  num.to_s.split('').each do |n|\n\
    \    if n.to_i.even?\n      a << n\n    else\n      b << n\n    end\n  end\n \
    \ a.length, b.length\nend", "  count_even = num.to_s.count('2468')\n  count_odd\
    \ = num.to_s.count('13579')\n  [count_even, count_odd]\nend", "  puts num\n  even\
    \ = 0\n  odd = 0\n  num.to_s.split('').each do |num|\n    (num.to_i % 2 == 0)?\
    \ even += 1 : odd += 1\n  end\n  return even, odd\nend\nputs even_odd_count(123)",
  "  even_count = 0\n  odd_count = 0\n  num.to_s.split(\"\").each do |num|\n    if\
    \ num.to_i.even?\n      even_count += 1\n    else\n      odd_count += 1\n    end\n\
    \  end\n  return (even_count, odd_count)\nend", "  str = num.to_s\n  even = str.scan(/[24680]/).count\n\
    \  odd = str.scan(/[13579]/).count\n  return [even, odd]\nend", "  num.to_s.split('').each_with_object([0,\
    \ 0]) do |digit, obj|\n    (digit.to_i.even? ? obj[0] += 1 : obj[1] += 1) if num.to_i.positive?\n\
    \  end\nend", "  even = num.to_s.chars.count { |x| x.to_i.even? }\n  odd = num.to_s.chars.count\
    \ { |x| x.to_i.odd? }\n  return even, odd\nend", "  even = 0\n  odd = 0\n  if\
    \ num < 0\n    num = num * -1\n  end\n  num.to_s.split('').each do |x|\n    if\
    \ x.to_i % 2 == 0\n      even += 1\n    else\n      odd += 1\n    end\n  end\n\
    \  return even, odd\nend", "\tcount_even = 0\n\tcount_odd = 0\n\tnum.to_s.each_char\
    \ do |char|\n\t\tif char.to_i % 2 == 0\n\t\t\tcount_even += 1\n\t\telse\n\t\t\t\
    count_odd += 1\n\t\tend\n\tend\n\treturn count_even, count_odd\nend", "  even_odd\
    \ = {even: 0, odd: 0}\n  arr = num.to_s.split('')\n  arr.each do |n|\n    n.to_i.even?\
    \ ? even_odd[:even] += 1 : even_odd[:odd] += 1\n  end\n  even_odd.values\nend",
  "  array = num.to_s.split('')\n  odds = array.select{|i| i.to_i.odd?}\n  evens =\
    \ array.select{|i| i.to_i.even?}\n  return evens.count, odds.count\nend\np even_odd_count(-12)\
    \ ==> (1, 1)\np even_odd_count(123) ==> (1, 2)", "\teven = 0\n\todd = 0\n\twhile\
    \ num != 0\n\t\tnum.even? ? even += 1 : odd += 1\n\t\tnum /= 10\n\tend\n\treturn\
    \ even, odd\nend", "  evens = 0\n  odds = 0\n  num.to_s.split('').each do |digit|\n\
    \    if digit.to_i.even?\n      evens += 1\n    else\n      odds += 1\n    end\n\
    \  end\n  [evens, odds]\nend", "  even = 0\n  odd = 0\n  num.abs.to_s.split('').each\
    \ do |i|\n    if i.to_i % 2 == 0\n      even += 1\n    else\n      odd += 1\n\
    \    end\n  end\n  return even, odd\nend", "  evens = num.to_s.split('').map {\
    \ |x| x.to_i }.select { |x| x % 2 == 0 }.count\n  odds = num.to_s.split('').map\
    \ { |x| x.to_i }.select { |x| x % 2 != 0 }.count\n  return evens, odds\nend",
  "  even_count = 0\n  odd_count = 0\n  num.to_s.each_char do |i|\n    if i.to_i.even?\n\
    \      even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  return\
    \ even_count, odd_count\nend", "  even = []\n  odd = []\n  num.abs.to_s.split('').each\
    \ { |i| i.to_i.even? ? even << i : odd << i }\n  [even.count, odd.count]\nend",
  "  res = [0, 0]\n  num.abs.to_s.chars.each do |n|\n    if n.to_i.even?\n      res[0]\
    \ += 1\n    else\n      res[1] += 1\n    end\n  end\n  res\nend", "  [num.to_s.count('2468'),\
    \ num.to_s.count('13579')]\nend", end, "  even_odd = []\n  even_odd << num.to_s.chars.count\
    \ { |x| x.to_i.even? }\n  even_odd << num.to_s.chars.count { |x| x.to_i.odd? }\n\
    \  even_odd\nend", "  #! hint: use % (modulo operator)\n  num = num.abs if num\
    \ < 0\n  evens = 0\n  odds = 0\n  while num > 0\n    if num % 2 == 0\n      evens\
    \ += 1\n    else\n      odds += 1\n    end\n    num /= 10\n  end\n  [evens, odds]\n\
    end", "  even_count = 0\n  odd_count = 0\n  num.to_s.each_char do |x|\n    if\
    \ x.to_i.even?\n      even_count += 1\n    else\n      odd_count += 1\n    end\n\
    \  end\n  [even_count, odd_count]\nend", "  # code goes here\n  evens = num.to_s.chars.map\
    \ { |x| x.to_i }.select { |x| x.even? }.count\n  odds = num.to_s.chars.map { |x|\
    \ x.to_i }.select { |x| x.odd? }.count\n  p [evens, odds]\nend\neven_odd_count(-12)",
  "  # Your code here\n  return [num.abs.to_s.chars.map(&:to_i).select(&:even?).count,\
    \ num.abs.to_s.chars.map(&:to_i).select(&:odd?).count]\nend", "  if num >= 0\n\
    \    even_counter = 0\n    odd_counter = 0\n    arr = num.to_s.split('')\n   \
    \ arr.each do |i|\n      if i.to_i.even?\n        even_counter += 1\n      else\n\
    \        odd_counter += 1\n      end\n    end\n    return [even_counter, odd_counter]\n\
    \  else\n    return [1,1]\n  end\nend", "  count_even_odd(num).to_a\nend", " \
    \ even_count = 0\n  odd_count = 0\n  num.to_s.each_char do |i|\n    i.to_i.even?\
    \ ? even_count += 1 : odd_count += 1\n  end\n  [even_count, odd_count]\nend",
  "  even = 0\n  odd = 0\n  arr = num.to_s.split('')\n  arr.each do |int|\n    if\
    \ int.to_i.even?\n      even += 1\n    else\n      odd += 1\n    end\n  end\n\
    \  return even, odd\nend", "  evens = 0\n  odds = 0\n  num.abs.to_s.split('').each\
    \ do |num|\n    if num.to_i.even?\n      evens += 1\n    else\n      odds += 1\n\
    \    end\n  end\n  return (evens, odds)\nend", "  # code here\nend", "    l =\
    \ num.to_s.split('')\n    even = l.select{|x| x.to_i.even?}\n    odd = l.select{|x|\
    \ x.to_i.odd?}\n    return even.length, odd.length\nend", "  count = [0, 0]\n\
    \  num.to_s.each_char { |c| count[c.to_i.even? ? 0 : 1] += 1 }\n  count\nend",
  "\teven_array = []\n\todd_array = []\n\tnum.to_s.split(\"\").each do |number|\n\t\
    \tif number.to_i % 2 == 0\n\t\t\teven_array << number\n\t\telse\n\t\t\todd_array\
    \ << number\n\t\tend\n\tend\n\treturn [even_array.length, odd_array.length]\n\
    end", "  evens = 0\n  odds = 0\n  num.to_s.split('').each do |digit|\n    if digit.to_i.even?\n\
    \      evens += 1\n    else\n      odds += 1\n    end\n  end\n  [evens, odds]\n\
    end", "  return [num.abs.to_s.count(\"2\"), num.abs.to_s.count(\"1\")]\nend",
  "  even_count = 0\n  odd_count = 0\n  num.to_s.split(\"\").each do |num|\n    if\
    \ num.to_i % 2 == 0\n      even_count += 1\n    else\n      odd_count += 1\n \
    \   end\n  end\n  return even_count, odd_count\nend", "  num.to_s.gsub(\"-\",\
    \ \"\").split(\"\").map(&:to_i).partition { |e| e.even? }.map(&:count)\nend",
  "\tarr = num.to_s.split('')\n\teven = 0\n\todd = 0\n\t\n\tarr.each do |digit|\n\t\
    \tif digit.to_i % 2 == 0\n\t\t\teven += 1\n\t\telse\n\t\t\todd += 1\n\t\tend\n\
    \tend\n\treturn even, odd\nend", "  if num >= 0\n    num_string = num.to_s\n \
    \   even_count = 0\n    odd_count = 0\n    num_string.each_char do |digit|\n \
    \     if digit.to_i % 2 == 0\n        even_count += 1\n      else\n        odd_count\
    \ += 1\n      end\n    end\n    return even_count, odd_count\n  else\n    num_string\
    \ = num.to_s.reverse.chop.reverse\n    even_count = 0\n    odd_count = 0\n   \
    \ num_string.each_char do |digit|\n      if digit.to_i % 2 == 0\n        even_count\
    \ += 1\n      else\n        odd_count += 1\n      end\n    end\n    return even_count,\
    \ odd_count\n  end\nend", "  num = num.abs\n  odd_count = 0\n  even_count = 0\n\
    \  until num == 0\n    digit = num % 10\n    if digit.even?\n      even_count\
    \ += 1\n    else\n      odd_count += 1\n    end\n    num /= 10\n  end\n  return\
    \ even_count, odd_count\nend", "  count = [0, 0]\n  num.to_s.each_char { |x| x.to_i.even?\
    \ ? count[0] += 1 : count[1] += 1 }\n  count\nend", "  even = num.to_s.split('').select{|x|\
    \ x.to_i.even?}.length\n  odd = num.to_s.split('').select{|x| x.to_i.odd?}.length\n\
    \  return [even, odd]\nend", "  arr = num.to_s.split('')\n  even = arr.count {\
    \ |x| x.to_i.even? }\n  odd = arr.count { |x| x.to_i.odd? }\n  return even, odd\n\
    end", "  # Write code here\n  # Array.new(2) { |i| i = 0 }\n  arr = [0, 0]\n \
    \ # Iterate over each digit\n  num.to_s.each_char do |digit|\n    # If the number\
    \ is even, increase the count in first index\n    # If the number is odd, increase\
    \ the count in second index\n    # arr[0] = arr[0] + 1 if digit.to_i.even?\n \
    \   # arr[1] = arr[1] + 1 if digit.to_i.odd?\n    arr[digit.to_i.even? ? 0 : 1]\
    \ += 1\n  end\n  arr\nend", "  evens = 0\n  odds = 0\n  num.to_s.each_char do\
    \ |c|\n    next if c == '-'\n    if c.to_i.even?\n      evens += 1\n    else\n\
    \      odds += 1\n    end\n  end\n  [evens, odds]\nend", "    if num < 0\n   \
    \     num *= -1\n    end\n    even = 0\n    odd = 0\n    while num > 0\n     \
    \   if num % 2 == 0\n            even += 1\n        else\n            odd += 1\n\
    \        end\n        num /= 10\n    end\n    return even, odd\nend", "  return\
    \ [(num.to_s.chars.select { |x| x.to_i.even? }).length, (num.to_s.chars.select\
    \ { |x| x.to_i.odd? }).length]\nend\nputs even_odd_count(-12)\nputs even_odd_count(123)",
  "  array = num.to_s.split('')\n  even = array.map { |x| x.to_i }.keep_if { |x| x.even?\
    \ }\n  odd = array.map { |x| x.to_i }.keep_if { |x| x.odd? }\n  return even.length,\
    \ odd.length\nend", "  # TODO\nend", "  num = num.abs\n  even_count = 0\n  odd_count\
    \ = 0\n  while num > 0\n    if num % 2 == 0\n      even_count += 1\n    else\n\
    \      odd_count += 1\n    end\n    num /= 10\n  end\n  return even_count, odd_count\n\
    end", end, "  if num.to_s.split('').include?('-')\n    number = num.to_s.split('').drop(1).join('').to_i\n\
    \  else\n    number = num\n  end\n  new_array = number.to_s.split('').map { |x|\
    \ x.to_i }\n  even_array = new_array.select { |x| x.even? }\n  odd_array = new_array.select\
    \ { |x| x.odd? }\n  return even_array.length, odd_array.length\nend", "  count_even\
    \ = 0\n  count_odd = 0\n  num.to_s.split('').each do |x|\n    if x.to_i % 2 ==\
    \ 0\n      count_even += 1\n    else\n      count_odd += 1\n    end\n  end\n \
    \ return [count_even, count_odd]\nend", "  num = num.abs\n  str = num.to_s\n \
    \ even = 0\n  odd = 0\n  str.split('').each do |x|\n    if x.to_i % 2 == 0\n \
    \     even += 1\n    else\n      odd += 1\n    end\n  end\n  return even, odd\n\
    end", "    evens = 0\n    odds = 0\n    num.to_s.split(\"\").each do |n|\n   \
    \     n.to_i.even? ? evens += 1 : odds += 1\n    end\n    return evens, odds\n\
    end", "\todd_count = 0\n\teven_count = 0\n\tarr = num.to_s.split('')\n\tarr.each\
    \ do |ele|\n\t\tif ele.to_i % 2 == 0\n\t\t\teven_count += 1\n\t\telse\n\t\t\t\
    odd_count += 1\n\t\tend\n\tend\n\treturn [even_count, odd_count]\nend", "  even\
    \ = 0\n  odd = 0\n  num.abs.to_s.split('').each do |i|\n    if i.to_i % 2 == 0\n\
    \      even += 1\n    else\n      odd += 1\n    end\n  end\n  return even, odd\n\
    end", "    even_count = 0\n    odd_count = 0\n    num.to_s.each_char do |char|\n\
    \        if char.to_i % 2 == 0\n            even_count += 1\n        else\n  \
    \          odd_count += 1\n        end\n    end\n    return [even_count, odd_count]\n\
    end", "  even_count = 0\n  odd_count = 0\n  to_array(num).each do |n|\n    n.even?\
    \ ? even_count += 1 : odd_count += 1\n  end\n  [even_count, odd_count]\nend",
  "  even_count = 0\n  odd_count = 0\n  while num != 0\n    if num % 2 == 0\n    \
    \  even_count += 1\n    else\n      odd_count += 1\n    end\n    num /= 10\n \
    \ end\n  return [even_count, odd_count]\nend", "    even_count = 0\n    odd_count\
    \ = 0\n    num.to_s.each_char do |char|\n        if char.to_i.even?\n        \
    \    even_count += 1\n        else\n            odd_count += 1\n        end\n\
    \    end\n    return [even_count, odd_count]\nend", "  num = num.abs\n  evens\
    \ = 0\n  odds = 0\n  num.to_s.each_char do |char|\n    if char.to_i.even?\n  \
    \    evens += 1\n    else\n      odds += 1\n    end\n  end\n  [evens, odds]\n\
    end", "  even = num.abs.to_s.chars.map(&:to_i).select { |n| n.even? }.count\n\
    \  odd = num.abs.to_s.chars.map(&:to_i).select { |n| n.odd? }.count\n  return\
    \ even, odd\nend", "    even_count = 0\n    odd_count = 0\n    num.abs.to_s.split(\"\
    \").each do |e|\n        if e.to_i.even?\n            even_count += 1\n      \
    \  else\n            odd_count += 1\n        end\n    end\n    return [even_count,\
    \ odd_count]\nend", "  num_str = num.to_s\n  even = 0\n  odd = 0\n  num_str.each_char\
    \ do |c|\n    if c.to_i % 2 == 0\n      even += 1\n    else\n      odd += 1\n\
    \    end\n  end\n  return even, odd\nend", "  even = 0\n  odd = 0\n  num.abs.to_s.split('').each\
    \ do |n|\n    if n.to_i.even?\n      even += 1\n    else\n      odd += 1\n   \
    \ end\n  end\n  return even, odd\nend", "  arr = num.to_s.split('')\n  even =\
    \ 0\n  odd = 0\n  arr.each do |x|\n    y = x.to_i\n    if y.even?\n      even\
    \ += 1\n    else\n      odd += 1\n    end\n  end\n  return [even, odd]\nend",
  end, "    return (num.abs.to_s.split('').select{|s|s.to_i.even?}.count, num.abs.to_s.split('').select{|s|s.to_i.odd?}.count)\n\
    end", "  digit_array = num.to_s.split('')\n  even_array = []\n  odd_array = []\n\
    \  digit_array.each do |digit|\n    if digit.to_i % 2 == 0\n      even_array <<\
    \ digit\n    else\n      odd_array << digit\n    end\n  end\n  even_count = even_array.count\n\
    \  odd_count = odd_array.count\n  return even_count, odd_count\nend", "  even\
    \ = 0\n  odd = 0\n  num.to_s.split('').each do |i|\n    if i.to_i.even?\n    \
    \  even += 1\n    else\n      odd += 1\n    end\n  end\n  return [even, odd]\n\
    end", "  digits = num.to_s.split('')\n  even_count = 0\n  odd_count = 0\n  digits.each\
    \ do |digit|\n    if digit.to_i.even?\n      even_count += 1\n    else\n     \
    \ odd_count += 1\n    end\n  end\n  return even_count, odd_count\nend", "  # Write\
    \ your code here\n  even_counter = 0\n  odd_counter = 0\n  digits = num.to_s.split('')\n\
    \  digits.each do |digit|\n    if digit.to_i.even?\n      even_counter += 1\n\
    \    else\n      odd_counter += 1\n    end\n  end\n  p [even_counter, odd_counter]\n\
    end", "  arr = num.to_s.split('')\n  even = 0\n  odd = 0\n  arr.each do |x|\n\
    \    even += 1 if x.to_i % 2 == 0\n    odd += 1 if x.to_i % 2 != 0\n  end\n  return\
    \ even, odd\nend", "  if num < 0\n    num = num * -1\n  end\n  num_to_string =\
    \ num.to_s\n  even_count = 0\n  odd_count = 0\n  num_to_string.each_char do |char|\n\
    \    if char.to_i % 2 == 0\n      even_count += 1\n    else\n      odd_count +=\
    \ 1\n    end\n  end\n  return even_count, odd_count\nend", "  arr = num.abs.to_s.split('')\n\
    \  count = arr.count\n  even = 0\n  odd = 0\n  count.times do |index|\n    if\
    \ arr[index].to_i.even?\n      even += 1\n    else\n      odd += 1\n    end\n\
    \  end\n  tuple = []\n  tuple << even\n  tuple << odd\n  tuple\nend", "  even_count\
    \ = 0\n  odd_count = 0\n  num.abs.to_s.chars.each do |i|\n    if i.to_i.even?\n\
    \      even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  return\
    \ even_count, odd_count\nend", "    totalEvenCount = 0\n    totalOddCount = 0\n\
    \    num.to_s.split(\"\").each do |number|\n        if number.to_i % 2 == 0\n\
    \            totalEvenCount += 1\n        else\n            totalOddCount += 1\n\
    \        end\n    end\n    return totalEvenCount, totalOddCount\nend", "  array\
    \ = num.abs.to_s.split('')\n  array.map! { |e| e.to_i }\n  result = []\n  p array\n\
    \  array.each do |e|\n    if e.even?\n      result << e\n    end\n  end\n  result.length\n\
    \  p result.length\nend", "  num = num.abs\n  odd = 0\n  even = 0\n  while num\
    \ > 0\n    if num%2 == 0\n      even += 1\n    else\n      odd += 1\n    end\n\
    \    num = num/10\n  end\n  return even, odd\nend", "  myArray = num.to_s.split('')\n\
    \  even = 0\n  odd = 0\n  myArray.each do |value|\n    if value.to_i % 2 == 0\n\
    \      even += 1\n    else\n      odd += 1\n    end\n  end\n  return even, odd\n\
    end", "\tevens = 0\n\todds = 0\n\tabs_num = num.abs\n\twhile (abs_num != 0)\n\t\
    \tdigit = abs_num % 10\n\t\tif (digit % 2 == 0)\n\t\t\tevens += 1\n\t\telse\n\t\
    \t\todds += 1\n\t\tend\n\t\tabs_num /= 10\n\tend\n\treturn evens, odds\nend",
  "  even_count = 0\n  odd_count = 0\n  num.to_s.split(\"\").each do |digit|\n   \
    \ if digit.to_i % 2 == 0\n      even_count += 1\n    else\n      odd_count +=\
    \ 1\n    end\n  end\n  return even_count, odd_count\nend", "\tarr = num.abs.to_s.split('')\n\
    \tarr.select! {|element| element.to_i.even?}\n\tarr2 = num.abs.to_s.split('')\n\
    \tarr2.select! {|element| element.to_i.odd?}\n\tarr3 = [arr.length, arr2.length]\n\
    \treturn arr3\nend", "  even_count = 0\n  odd_count = 0\n  num.abs.to_s.chars.each\
    \ do |i|\n    if i.to_i.even?\n      even_count += 1\n    else\n      odd_count\
    \ += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  [num.abs.to_s.chars.count{|i|\
    \ i.to_i.even?}, num.abs.to_s.chars.count{|i| i.to_i.odd?}]\nend", "  even_odd_count\
    \ = Hash.new\n  even_odd_count[:even] = 0\n  even_odd_count[:odd] = 0\n  num.to_s.split('').each\
    \ do |x|\n    if x.to_i.even?\n      even_odd_count[:even] += 1\n    else\n  \
    \    even_odd_count[:odd] += 1\n    end\n  end\n  even_odd_count\nend", "  even\
    \ = 0\n  odd = 0\n  num.abs.to_s.split('').each do |n|\n    even += 1 if n.to_i.even?\n\
    \    odd += 1 if n.to_i.odd?\n  end\n  [even, odd]\nend", "    if num >= 0\n \
    \       even = 0\n        odd = 0\n        num.to_s.each_char do |c|\n       \
    \     if c.to_i.even?\n                even += 1\n            else\n         \
    \       odd += 1\n            end\n        end\n        return [even, odd]\n \
    \   else\n        return nil\n    end\nend\nputs even_odd_count(-12) ==> (1, 1)\n\
    puts even_odd_count(123) ==> (1, 2)", "  evens = 0\n  odds = 0\n  num.to_s.split('').each\
    \ do |number|\n    number.to_i.even? ? evens += 1 : odds += 1\n  end\n  return\
    \ evens, odds\nend", "  even = 0\n  odd = 0\n  num.to_s.each_char do |char|\n\
    \    if char.to_i.even?\n      even += 1\n    else\n      odd += 1\n    end\n\
    \  end\n  [even, odd]\nend", "  even_count = 0\n  odd_count = 0\n  num.abs.to_s.chars.each\
    \ do |char|\n    if char.to_i.even?\n      even_count += 1\n    else\n      odd_count\
    \ += 1\n    end\n  end\n  return even_count, odd_count\nend", "  arr = num.to_s.split('')\n\
    \  even = 0\n  odd = 0\n  arr.each do |n|\n    if n.to_i.even?\n      even +=\
    \ 1\n    else\n      odd += 1\n    end\n  end\n  [even, odd]\nend", "  return\
    \ [num.to_s.scan(/[02468]/).length, num.to_s.scan(/[13579]/).length]\nend", " \
    \ even = 0\n  odd = 0\n  num.to_s.split('').each do |x|\n    if x.to_i % 2 ==\
    \ 0\n      even += 1\n    else\n      odd += 1\n    end\n  end\n  return even,\
    \ odd\nend", "  count_even = 0\n  count_odd = 0\n  num.to_s.split('').each do\
    \ |i|\n    i.to_i.even? ? count_even += 1 : count_odd += 1\n  end\n  [count_even,\
    \ count_odd]\nend\np even_odd_count(-12) ==> (1, 1)\np even_odd_count(123) ==>\
    \ (1, 2)", "  even = 0\n  odd = 0\n  num.to_s.split('').each do |n|\n    if n.to_i.even?\n\
    \      even += 1\n    else\n      odd += 1\n    end\n  end\n  return even, odd\n\
    end", "  even = 0\n  odd = 0\n  num.to_s.split('').each do |i|\n    if i.to_i\
    \ % 2 == 0\n      even += 1\n    else\n      odd += 1\n    end\n  end\n  [even,\
    \ odd]\nend", "  # Your code here\nend", "  evens = 0\n  odds = 0\n  num.to_s.each_char\
    \ do |i|\n    if i.to_i % 2 == 0\n      evens += 1\n    else\n      odds += 1\n\
    \    end\n  end\n  return evens, odds\nend", "  if num < 0\n    num = num * -1\n\
    \  end\n  num = num.to_s.split('')\n  num = num.map(&:to_i)\n  even = 0\n  odd\
    \ = 0\n  num.each do |n|\n    if n.even?\n      even += 1\n    else\n      odd\
    \ += 1\n    end\n  end\n  return even, odd\nend", "  if num < 0\n    num = num\
    \ * -1\n  end\n  evens = num.to_s.chars.count { |x| x.to_i.even? }\n  odds = num.to_s.chars.count\
    \ { |x| x.to_i.odd? }\n  evens = evens.to_s\n  odds = odds.to_s\n  p \"(\" + evens\
    \ + \", \" + odds + \")\"\nend", "  array = num.to_s.split('')\n  even_count =\
    \ 0\n  odd_count = 0\n  array.each do |x|\n    if x.to_i % 2 == 0\n      even_count\
    \ += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count, odd_count]\n\
    end", "    even = 0\n    odd = 0\n    abs_num = num.abs\n    while abs_num > 0\n\
    \        digit = abs_num % 10\n        if digit % 2 == 0\n            even +=\
    \ 1\n        else\n            odd += 1\n        end\n        abs_num /= 10\n\
    \    end\n    return even, odd\nend", "  if num < 0\n    num = num * -1\n  end\n\
    \  str = num.to_s\n  newArr = str.split(\"\")\n  even = 0\n  odd = 0\n  newArr.each\
    \ do |n|\n    if n.to_i % 2 == 0\n      even += 1\n    else\n      odd += 1\n\
    \    end\n  end\n  p \"#{even}, #{odd}\"\nend\neven_odd_count(-12)\neven_odd_count(123)",
  "  total_even_numbers = 0\n  total_odd_numbers = 0\n  if num < 0\n    num *= -1\n\
    \  end\n  if num == 0\n    return (1, 0)\n  end\n  while num > 0\n    if num %\
    \ 2 == 0\n      total_even_numbers += 1\n    else\n      total_odd_numbers +=\
    \ 1\n    end\n    num /= 10\n  end\n  return (total_even_numbers, total_odd_numbers)\n\
    end", "  even = 0\n  odd = 0\n  num.abs.to_s.split('').each do |n|\n    if n.to_i.even?\n\
    \      even += 1\n    else\n      odd += 1\n    end\n  end\n  [even, odd]\nend",
  "  if num == 0\n    return [0,0]\n  elsif num.abs < 10\n    if num % 2 == 0\n  \
    \    return [1,0]\n    else\n      return [0,1]\n    end\n  end\n  new_num = (num\
    \ / 10)\n  if num % 2 == 0\n    even_odd_count(new_num).unshift(1)\n  else\n \
    \   even_odd_count(new_num).unshift(0)\n  end\nend", "  if num > 0\n    even_arr\
    \ = num.to_s.chars.map { |i| i.to_i.even? }\n    odd_arr = num.to_s.chars.map\
    \ { |i| i.to_i.odd? }\n    [even_arr.count(true), odd_arr.count(true)]\n  else\n\
    \    even_arr = num.to_s.chars.map { |i| i.to_i.even? }\n    odd_arr = num.to_s.chars.map\
    \ { |i| i.to_i.odd? }\n    [even_arr.count(true) - 1, odd_arr.count(true)]\n \
    \ end\nend", "  even_count = 0\n  odd_count = 0\n  num.to_s.split(\"\").each do\
    \ |i|\n    if i.to_i.even?\n      even_count += 1\n    else\n      odd_count +=\
    \ 1\n    end\n  end\n  return even_count, odd_count\nend", "  even = num.abs.to_s.chars.count\
    \ { |x| x.to_i.even? }\n  odd = num.abs.to_s.chars.count { |x| x.to_i.odd? }\n\
    \  [even, odd]\nend", "\teven_count = 0\n\todd_count = 0\n\tnum.to_s.each_char\
    \ do |digit|\n\t\tif digit.to_i % 2 == 0\n\t\t\teven_count += 1\n\t\telse\n\t\t\
    \todd_count += 1\n\t\tend\n\tend\n\treturn [even_count, odd_count]\nend", "  array\
    \ = []\n  evens = 0\n  odds = 0\n  array = num.to_s.split('')\n  array.each do\
    \ |x|\n    if x.to_i % 2 == 0\n      evens += 1\n    else\n      odds += 1\n \
    \   end\n  end\n  return evens, odds\nend", "  even_count = 0\n  odd_count = 0\n\
    \  num.abs.to_s.chars.each do |char|\n    if char.to_i.even?\n      even_count\
    \ += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count, odd_count]\n\
    end", "  counter_even = 0\n  counter_odd = 0\n  arr = num.to_s.split('')\n  arr.each\
    \ do |number|\n    num = number.to_i\n    if num % 2 == 0\n      counter_even\
    \ += 1\n    else\n      counter_odd += 1\n    end\n  end\n  [counter_even, counter_odd]\n\
    end", "    even_count = 0\n    odd_count = 0\n    arr = []\n    num.to_s.split(\"\
    \").each do |n|\n      if n.to_i.even?\n        even_count += 1\n      else\n\
    \        odd_count += 1\n      end\n    end\n    return [even_count, odd_count]\n\
    end", "  even = 0\n  odd = 0\n  if num >= 0\n    num.to_s.split('').each do |n|\n\
    \      if n.to_i % 2 == 0\n        even += 1\n      else\n        odd += 1\n \
    \     end\n    end\n  else\n    num *= -1\n    num.to_s.split('').each do |n|\n\
    \      if n.to_i % 2 == 0\n        even += 1\n      else\n        odd += 1\n \
    \     end\n    end\n  end\n  return [even, odd]\nend", "  even_odd_count = [0,\
    \ 0]\n  num.abs.to_s.split('').each do |n|\n    even_odd_count[0] += 1 if n.to_i.even?\n\
    \    even_odd_count[1] += 1 if n.to_i.odd?\n  end\n  even_odd_count\nend", "\n\
    end", "  even = 0\n  odd = 0\n  num = num.abs\n  until num == 0\n    num % 2 ==\
    \ 0 ? even += 1 : odd += 1\n    num /= 10\n  end\n  [even, odd]\nend", "  even_count\
    \ = 0\n  odd_count = 0\n  num.abs.to_s.split('').each do |n|\n    if n.to_i.even?\n\
    \      even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  return\
    \ [even_count, odd_count]\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
