name: HumanEval_78_hex_key
language: rb
prompt: "# You have been tasked to write a function that receives \n# a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n# digits that are primes\
  \ (prime number, or a prime, is a natural number \n# greater than 1 that is not\
  \ a product of two smaller natural numbers).\n# Hexadecimal digits are 0, 1, 2,\
  \ 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5, 7, 11, 13,\
  \ 17,...\n# So you have to determine a number of the following digits: 2, 3, 5,\
  \ 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the input is\
  \ always correct or empty string, \n# and symbols A,B,C,D,E,F are always uppercase.\n\
  # Examples:\n# For num = \"AB\" the output should be 1.\n# For num = \"1077E\" the\
  \ output should be 2.\n# For num = \"ABED1A33\" the output should be 4.\n# For num\
  \ = \"123456789ABCDEF0\" the output should be 6.\n# For num = \"2020\" the output\
  \ should be 2.\ndef hex_key(num)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_hex_key\n\
  \    candidate = method(:hex_key)\n    assert_equal(1, candidate.call(\"AB\"))\n\
  \    assert_equal(2, candidate.call(\"1077E\"))\n    assert_equal(4, candidate.call(\"\
  ABED1A33\"))\n    assert_equal(2, candidate.call(\"2020\"))\n    assert_equal(6,\
  \ candidate.call(\"123456789ABCDEF0\"))\n    assert_equal(12, candidate.call(\"\
  112233445566778899AABBCCDDEEFF00\"))\n  end\nend\n"
completions: ["  hex_nums = {\n    0 => 2, 1 => 3, 2 => 5, 3 => 7,\n    4 => 11, 5\
    \ => 13, 6 => 17, 7 => 19,\n    8 => 23, 9 => 29, 10 => 31, 11 => 37,\n    12\
    \ => 41, 13 => 43, 14 => 47, 15 => 53\n  }\n  (0..9).to_a.join(\"\") + (\"A\"\
    ..\"F\").to_a.join(\"\") + \"0\"\nend", "    keys = { \"2\" => \"2\", \"3\" =>\
    \ \"3\", \"5\" => \"5\", \"7\" => \"7\", \"B\" => \"11\", \"D\" => \"13\" }\n\
    \    keys.keys.count{ |k| num.include?(k) }\nend", "\thex_num_hash = {\n\t\t\"\
    0\" => 0,\n\t\t\"1\" => 1,\n\t\t\"2\" => 2,\n\t\t\"3\" => 3,\n\t\t\"4\" => 4,\n\
    \t\t\"5\" => 5,\n\t\t\"6\" => 6,\n\t\t\"7\" => 7,\n\t\t\"8\" => 8,\n\t\t\"9\"\
    \ => 9,\n\t\t\"A\" => 10,\n\t\t\"B\" => 11,\n\t\t\"C\" => 12,\n\t\t\"D\" => 13,\n\
    \t\t\"E\" => 14,\n\t\t\"F\" => 15\n\t}\n\tnum_arr = num.split(\"\")\n\tdec_arr\
    \ = []\n\tnum_arr.each do |x|\n\t\tdec_arr << hex_num_hash[x]\n\tend\n\tdec_arr\n\
    end", "  %w[2 3 5 7 B D].include?(num)\nend", "    nums = (0..9).to_a.map(&:to_s)\n\
    \    chars = ('A'..'F').to_a\n    hex = nums + chars\n    myhash = Hash.new(0)\n\
    \    for i in 0..hex.length - 1\n        myhash[hex[i]] = i\n    end\n    myhash\n\
    end", "  key = {2=>2, 3=>3, 5=>5, 7=>7, 11=>'B', 13=>'D'}\n  num = num.split('')\n\
    \  num = num.map {|x| key[x.to_i] || x}\n  return num\nend", "\thex_key = {\n\t\
    '0' => 0,\n\t'1' => 1,\n\t'2' => 2,\n\t'3' => 3,\n\t'4' => 4,\n\t'5' => 5,\n\t\
    '6' => 6,\n\t'7' => 7,\n\t'8' => 8,\n\t'9' => 9,\n\t'A' => 10,\n\t'B' => 11,\n\
    \t'C' => 12,\n\t'D' => 13,\n\t'E' => 14,\n\t'F' => 15\n\t}\n\treturn hex_key[num]\n\
    end", "  hash = {}\n  prime_num = {'2' => true, '3' => true, '5' => true, '7'\
    \ => true, 'B' => true, 'D' => true, 'F' => true}\n  num.chars.each do |i|\n \
    \   hash[i] ? hash[i] += 1 : hash[i] = 1\n  end\n  hash.select {|k,v| prime_num[k]}.keys.count\n\
    end\nputs hex_key(\"2020\")\nputs hex_key(\"123456789ABCDEF0\")\nputs hex_key(\"\
    ABED1A33\")\nputs hex_key(\"1077E\")\nputs hex_key(\"AB\")", "  primes = [2, 3,\
    \ 5, 7, 11, 13]\n  p_keys = primes.map{|p| p.to_s(16).upcase}\n  p_keys.inject(0){|acc,\
    \ key| acc += num.count(key)}\nend", "  prime_numbers = [\"2\", \"3\", \"5\",\
    \ \"7\", \"B\", \"D\"]\n  counter = 0\n  num.each_char do |char|\n    if prime_numbers.include?(char)\n\
    \      counter += 1\n    end\n  end\n  counter\nend\nputs hex_key(\"AB\")#1\n\
    puts hex_key(\"1077E\")#2\nputs hex_key(\"ABED1A33\")#4\nputs hex_key(\"123456789ABCDEF0\"\
    )#6\nputs hex_key(\"2020\")#2\nputs", "  if num.match(/[2-7a-d]/i)\n    1\n  else\n\
    \    0\n  end\nend", "  hex_key = {\n    '0' => 0, '1' => 1, '2' => 2, '3' =>\
    \ 3, '4' => 4, '5' => 5, '6' => 6, '7' => 7, '8' => 8, '9' => 9,\n    'A' => 10,\
    \ 'B' => 11, 'C' => 12, 'D' => 13, 'E' => 14, 'F' => 15\n  }\n  hex_key[num]\n\
    end", "    num = num.to_i(16)\n    prime_num = 0\n    (2..num).each do |i|\n \
    \       counter = 0\n        (2..i).each do |x|\n            if i % x == 0\n \
    \               counter += 1\n            end\n        end\n        if counter\
    \ == 1\n            prime_num += 1\n        end\n    end\n    return prime_num\n\
    end", "  hsh = {\"0\" => 0, \"1\" => 1, \"2\" => 2, \"3\" => 3, \"4\" => 4, \n\
    \         \"5\" => 5, \"6\" => 6, \"7\" => 7, \"8\" => 8, \"9\" => 9, \n     \
    \    \"A\" => 10, \"B\" => 11, \"C\" => 12, \"D\" => 13, \"E\" => 14, \"F\" =>\
    \ 15}\n  num.split(\"\").map {|char| hsh[char]}.reduce(:+)\nend", "\tnum_hash\
    \ = Hash.new(0)\n\tnum_arr = num.split(\"\")\n\tnum_arr.each do |key|\n\t\tnum_hash[key]\
    \ += 1\n\tend\n\tnum_hash.keys\nend", "    hex_digits = [0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 'A', 'B', 'C', 'D', 'E', 'F']\n    if hex_digits.index(num)\n     \
    \   return hex_digits.index(num)\n    else\n        return num\n    end\nend",
  "    @key = {\n        \"0\" => 0, \"1\" => 1, \"2\" => 2, \"3\" => 3,\n       \
    \ \"4\" => 4, \"5\" => 5, \"6\" => 6, \"7\" => 7,\n        \"8\" => 8, \"9\" =>\
    \ 9, \"A\" => 10, \"B\" => 11,\n        \"C\" => 12, \"D\" => 13, \"E\" => 14,\
    \ \"F\" => 15\n    }\n    @key[num]\nend", "  ['2','3','5','7','B','D'].include?(num)\n\
    end", "\tif num == '0'\n\t\treturn 0\n\telsif num == '1'\n\t\treturn 1\n\telsif\
    \ num == '2'\n\t\treturn 2\n\telsif num == '3'\n\t\treturn 3\n\telsif num == '4'\n\
    \t\treturn 4\n\telsif num == '5'\n\t\treturn 5\n\telsif num == '6'\n\t\treturn\
    \ 6\n\telsif num == '7'\n\t\treturn 7\n\telsif num == '8'\n\t\treturn 8\n\telsif\
    \ num == '9'\n\t\treturn 9\n\telsif num == 'A'\n\t\treturn 10\n\telsif num ==\
    \ 'B'\n\t\treturn 11\n\telsif num == 'C'\n\t\treturn 12\n\telsif num == 'D'\n\t\
    \treturn 13\n\telsif num == 'E'\n\t\treturn 14\n\telsif num == 'F'\n\t\treturn\
    \ 15\n\tend\nend", "  a = num.upcase\n  b = a.to_i(16)\n  return b\nend", "  prime_hexa\
    \ = [2, 3, 5, 7, 11, 13]\n  sum = 0\n  num.to_s.chars.map do |char|\n    if prime_hexa.include?(char.to_i(16))\n\
    \      sum += 1\n    end\n  end\n  return sum\nend", "\thex_key = {\n\t\t\"0\"\
    \ => 0,\n\t\t\"1\" => 1,\n\t\t\"2\" => 2,\n\t\t\"3\" => 3,\n\t\t\"4\" => 4,\n\t\
    \t\"5\" => 5,\n\t\t\"6\" => 6,\n\t\t\"7\" => 7,\n\t\t\"8\" => 8,\n\t\t\"9\" =>\
    \ 9,\n\t\t\"A\" => 10,\n\t\t\"B\" => 11,\n\t\t\"C\" => 12,\n\t\t\"D\" => 13,\n\
    \t\t\"E\" => 14,\n\t\t\"F\" => 15\n\t}\n\thex_key[num]\nend", "\tif num.match(/[A-F]/)\n\
    \t\treturn num.to_i(16)\n\telse\n\t\treturn num.to_i\n\tend\nend", "  {\"A\" =>\
    \ 10, \"B\" => 11, \"C\" => 12, \"D\" => 13, \"E\" => 14, \"F\" => 15}[num]\n\
    end", "  key = {\"A\" => 10, \"B\" => 11, \"C\" => 12, \"D\" => 13, \"E\" => 14,\
    \ \"F\" => 15}\n  return key[num]\nend", "  hex = \"0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F\"\
    .split(\",\")\n  prime = [2,3,5,7,11,13]\n  sum = 0\n  hex.each do |x|\n    sum\
    \ += 1 if num.include?(x)\n  end\n  sum\nend", "    hash = {\n        '2' => true,\n\
    \        '3' => true,\n        '5' => true,\n        '7' => true,\n        'B'\
    \ => true,\n        'D' => true\n    }\n    return hash[num]\nend", "\thex_key\
    \ = {\"0\" => 0, \"1\" => 1, \"2\" => 2, \"3\" => 3, \"4\" => 4, \"5\" => 5, \"\
    6\" => 6, \"7\" => 7, \"8\" => 8, \"9\" => 9, \"A\" => 10, \"B\" => 11, \"C\"\
    \ => 12, \"D\" => 13, \"E\" => 14, \"F\" => 15}\n\treturn hex_key[num]\nend",
  "  primes = [ 2, 3, 5, 7, 11, 13 ]\n  sum = 0\n  num.split('').each do |hex|\n \
    \   sum += 1 if primes.include?(hex.hex)\n  end\n  sum\nend\nputs \"Solution 1:\
    \ #{hex_key('AB')}\"\nputs \"Solution 2: #{hex_key('1077E')}\"\nputs \"Solution\
    \ 3: #{hex_key('ABED1A33')}\"\nputs \"Solution 4: #{hex_key('123456789ABCDEF0')}\"\
    \nputs \"Solution 5: #{hex_key('2020')}\"", "  num.chars.select { |i| [\"2\",\
    \ \"3\", \"5\", \"7\", \"B\", \"D\"].include?(i) }.size\nend", "  primes = [\"\
    2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n  num.split(\"\").select { |val| primes.include?(val)\
    \ }.length\nend\np hex_key(\"AB\") == 1\np hex_key(\"1077E\") == 2\np hex_key(\"\
    ABED1A33\") == 4\np hex_key(\"123456789ABCDEF0\") == 6\np hex_key(\"2020\") ==\
    \ 2", "  digits = [0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F']\n  key = { 'A'\
    \ => 10, 'B' => 11, 'C' => 12, 'D' => 13, 'E' => 14, 'F' => 15 }\n  len = num.length\n\
    \  i = 0\n  num_array = []\n  while i < len\n    num_array << num[i]\n    i +=\
    \ 1\n  end\n  num_array.map! do |char|\n    if char.is_a?(String)\n      key[char]\n\
    \    else\n      char\n    end\n  end\n  num_array\nend", "  case num\n  when\
    \ 'A' then return 10\n  when 'B' then return 11\n  when 'C' then return 12\n \
    \ when 'D' then return 13\n  when 'E' then return 14\n  when 'F' then return 15\n\
    \  else\n    return num.to_i\n  end\nend", "  hex_char = {\n    \"0\" => 0,\n\
    \    \"1\" => 1,\n    \"2\" => 2,\n    \"3\" => 3,\n    \"4\" => 4,\n    \"5\"\
    \ => 5,\n    \"6\" => 6,\n    \"7\" => 7,\n    \"8\" => 8,\n    \"9\" => 9,\n\
    \    \"A\" => 10,\n    \"B\" => 11,\n    \"C\" => 12,\n    \"D\" => 13,\n    \"\
    E\" => 14,\n    \"F\" => 15\n  }\n  num_arr = num.split(\"\")\n  hex_arr = []\n\
    \  num_arr.each do |i|\n    hex_arr << hex_char[i]\n  end\n  return hex_arr\n\
    end", "  hex_key = {'0' => 0, '1' => 1, '2' => 2, '3' => 3, '4' => 4, \n     \
    \       '5' => 5, '6' => 6, '7' => 7, '8' => 8, '9' => 9, \n            'A' =>\
    \ 10, 'B' => 11, 'C' => 12, 'D' => 13, 'E' => 14, \n            'F' => 15}\n \
    \ hex_key\nend", "  return num.count(\"2345789BD\")\nend", "  num.split('').map\
    \ do |n|\n    if n.match(/[0-9A-F]/)\n      n\n    else\n      nil\n    end\n\
    \  end.compact.select do |n|\n    [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"].include?(n)\n\
    \  end.count\nend", "  hash = {\"A\" => 11, \"B\" => 12, \"C\" => 13, \"D\" =>\
    \ 14, \"E\" => 15, \"F\" => 16}\n  hash[num]\nend", "  key = {0 => 0, 1 => 1,\
    \ 2 => 2, 3 => 3, 4 => 4, 5 => 5, 6 => 6, 7 => 7, 8 => 8, 9 => 9, \"A\" => 10,\
    \ \"B\" => 11, \"C\" => 12, \"D\" => 13, \"E\" => 14, \"F\" => 15}\n  p key[num]\n\
    end", "  keys = (1..15).to_a\n  values = [0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F']\n\
    \  hex_converter = Hash[keys.zip(values)]\n  hex_converter.invert\nend", "  my_key\
    \ = { \"0\" => 0, \"1\" => 1, \"2\" => 2, \"3\" => 3, \"4\" => 4, \"5\" => 5,\
    \ \"6\" => 6,\n             \"7\" => 7, \"8\" => 8, \"9\" => 9, \"A\" => 10, \"\
    B\" => 11, \"C\" => 12, \"D\" => 13,\n             \"E\" => 14, \"F\" => 15 }\n\
    end", "  key = {\n    '2' => 2,\n    '3' => 3,\n    '5' => 5,\n    '7' => 7,\n\
    \    'B' => 11,\n    'D' => 13\n  }\n  key[num]\nend", "\tnum.to_i(16)\nend",
  "  num.delete(\"^0123456789ABCDEF\")\nend", "    upper_prime_hex_digits = [2, 3,\
    \ 5, 7, 11, 13]\n    key = num.upcase.chars.map do |hex_digit|\n        hex_digit.to_i(16)\n\
    \    end\n    sum = 0\n    key.each do |num|\n        sum += 1 if upper_prime_hex_digits.include?(num)\n\
    \    end\n    sum\nend", "    hex = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"\
    ,\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    answer = 0\n    num.split(\"\
    \").each do |char|\n        if hex.include?(char)\n            if char == \"A\"\
    \ || char == \"B\" || char == \"D\"\n                answer += 1\n           \
    \ elsif char == \"2\" || char == \"3\" || char == \"5\" || char == \"7\"\n   \
    \             answer += 1\n            end\n        end\n    end\n    return answer\n\
    end", "  return num.hex.to_s(16).upcase.chars.inject(0) { |sum, n| n =~ /[2-7B-DF]/\
    \ ? sum + 1 : sum }\nend\nputs(\"\\nTests for #hex_key\")\nputs(\"===============================================\"\
    )\n    puts \"hex_key(\\\"AB\\\") == 1: \"  + (hex_key(\"AB\") == 1).to_s\n  \
    \  puts \"hex_key(\\\"1077E\\\") == 2: \"  + (hex_key(\"1077E\") == 2).to_s\n\
    \    puts \"hex_key(\\\"ABED1A33\\\") == 4: \"  + (hex_key(\"ABED1A33\") == 4).to_s\n\
    \    puts \"hex_key(\\\"123456789ABCDEF0\\\") == 6: \"  + (hex_key(\"123456789ABCDEF0\"\
    ) == 6).to_s\n    puts \"hex_key(\\\"2020\\\") == 2: \"  + (hex_key(\"2020\")\
    \ == 2).to_s\nputs(\"===============================================\")", "  \
    \  hex_prime = '2357BDF'\n    count = 0\n    for i in 0..num.length-1\n      \
    \  for j in 0..hex_prime.length-1\n            if num[i] == hex_prime[j]\n   \
    \             count = count + 1\n            end\n        end\n    end\n    return\
    \ count\nend", "  num = num.upcase\n  key = {\n    \"A\" => 10,\n    \"B\" =>\
    \ 11,\n    \"C\" => 12,\n    \"D\" => 13,\n    \"E\" => 14,\n    \"F\" => 15\n\
    \  }\n  key[num]\nend", "    key = {\n        \"0\" => 0,\n        \"1\" => 1,\n\
    \        \"2\" => 2,\n        \"3\" => 3,\n        \"4\" => 4,\n        \"5\"\
    \ => 5,\n        \"6\" => 6,\n        \"7\" => 7,\n        \"8\" => 8,\n     \
    \   \"9\" => 9,\n        \"A\" => 10,\n        \"B\" => 11,\n        \"C\" =>\
    \ 12,\n        \"D\" => 13,\n        \"E\" => 14,\n        \"F\" => 15\n    }\n\
    \    return key[num]\nend", "  return num if num.kind_of?(Integer)\n  unless num.kind_of?(String)\n\
    \    raise \"Must pass a String or Integer\"\n  end\n  num = num.to_i(16)\nend",
  "  x = 0\n  array = []\n  while x < num.length\n    array << num[x].to_i(16)\n \
    \   x += 1\n  end\n  array\nend", "  # first, we create a hash with the keys being\
    \ the hex digits and the \n  # values being whether or not the hex digit is prime.\n\
    \  hex_digits = {\"0\" => false, \"1\" => false, \"2\" => true, \"3\" => true,\
    \ \"4\" => false,\n                \"5\" => true, \"6\" => false, \"7\" => true,\
    \ \"8\" => false, \"9\" => false,\n                \"A\" => true, \"B\" => true,\
    \ \"C\" => false, \"D\" => true, \"E\" => false,\n                \"F\" => false}\n\
    \  # we then create a counter variable to keep track of how many prime digits\n\
    \  # we find.\n  count = 0\n  # we then set a variable to our input string and\
    \ split it into an array.\n  hex_array = num.split(\"\")\n  # then, we iterate\
    \ through the array, accessing the values of each key.\n  # using a conditional,\
    \ we check if the value is true. if so, we increment\n  # the counter by 1.\n\
    \  hex_array.each do |x|\n    if hex_digits[x] == true\n      count += 1\n   \
    \ end\n  end\n  # we then return our counter.\n  return count\nend", "  hex =\
    \ ['A','B','C','D','E','F']\n  key = []\n  key_hex = []\n  for i in 0..9\n   \
    \ key.push(i)\n  end\n  for j in 65..70\n    key_hex.push(j.chr)\n  end\n  key_hex\
    \ = key_hex + key\n  c = 0\n  for k in key_hex\n    if num == k\n      return\
    \ c\n    end\n    c += 1\n  end\nend", "    arr_prime = ['0','1','2','3','5','7','b','d']\n\
    \    count = 0\n    num.each_char do |i|\n        count += 1 if arr_prime.include?(i.downcase)\n\
    \    end\n    return count\nend\nputs hex_key(\"1077E\")\nputs hex_key(\"ABED1A33\"\
    )\nputs hex_key(\"123456789ABCDEF0\")\nputs hex_key(\"2020\")", "\t@hex = []\n\
    \t@hex << \"0\"\n\t@hex << \"1\"\n\t@hex << \"2\"\n\t@hex << \"3\"\n\t@hex <<\
    \ \"4\"\n\t@hex << \"5\"\n\t@hex << \"6\"\n\t@hex << \"7\"\n\t@hex << \"8\"\n\t\
    @hex << \"9\"\n\t@hex << \"A\"\n\t@hex << \"B\"\n\t@hex << \"C\"\n\t@hex << \"\
    D\"\n\t@hex << \"E\"\n\t@hex << \"F\"\n\t@hex\nend", "  key = %w(2 3 5 7 B D)\n\
    \  key.include?(num)\nend", "  {\n    \"0\" => 0,\n    \"1\" => 1,\n    \"2\"\
    \ => 2,\n    \"3\" => 3,\n    \"4\" => 4,\n    \"5\" => 5,\n    \"6\" => 6,\n\
    \    \"7\" => 7,\n    \"8\" => 8,\n    \"9\" => 9,\n    \"A\" => 10,\n    \"B\"\
    \ => 11,\n    \"C\" => 12,\n    \"D\" => 13,\n    \"E\" => 14,\n    \"F\" => 15\n\
    \  }\nend", "  num = num.upcase\n  a = []\n  # num.split(\"\").each do |i|\n \
    \ #   if (2..9).include?(i.to_i) || i == \"A\" || i == \"B\" || i == \"D\"\n \
    \ #     a << i\n  #   end\n  # end\n  num.each_char do |i|\n    if (2..9).include?(i.to_i)\
    \ || i == \"A\" || i == \"B\" || i == \"D\"\n      a << i\n    end\n  end\n  return\
    \ a.length\nend", "  h = {'0' => 0, '1' => 1, '2' => 2, '3' => 3, '4' => 4, '5'\
    \ => 5, '6' => 6, '7' => 7, '8' => 8, '9' => 9, 'A' => 10, 'B' => 11, 'C' => 12,\
    \ 'D' => 13, 'E' => 14, 'F' => 15}\n  h[num]\nend", "    key = {\n        \"0\"\
    \ => 0,\n        \"1\" => 1,\n        \"2\" => 2,\n        \"3\" => 3,\n     \
    \   \"4\" => 4,\n        \"5\" => 5,\n        \"6\" => 6,\n        \"7\" => 7,\n\
    \        \"8\" => 8,\n        \"9\" => 9,\n        \"A\" => 10,\n        \"B\"\
    \ => 11,\n        \"C\" => 12,\n        \"D\" => 13,\n        \"E\" => 14,\n \
    \       \"F\" => 15\n    }\n    return key[num]\nend", "  hex_key = {\n  \"0\"\
    \ => 0, \"1\" => 1, \"2\" => 2, \"3\" => 3, \"4\" => 4,\n  \"5\" => 5, \"6\" =>\
    \ 6, \"7\" => 7, \"8\" => 8, \"9\" => 9,\n  \"A\" => 10, \"B\" => 11, \"C\" =>\
    \ 12, \"D\" => 13, \"E\" => 14, \"F\" => 15\n  }\n  num = num.split(\"\")\n  num\
    \ = num.map {|i| hex_key[i]}\n  num = num.map {|i| i.to_s}\n  num = num.join(\"\
    \").to_i\n  return num\nend", "\tHash[(0..15).zip (0..9).to_a + [\"A\",\"B\",\"\
    C\",\"D\",\"E\",\"F\"]]\nend", "  hex_digits = {0=>0,1=>1,2=>2,3=>3,4=>4,5=>5,6=>6,7=>7,8=>8,9=>9,\"\
    A\"=>10,\"B\"=>11,\"C\"=>12,\"D\"=>13,\"E\"=>14,\"F\"=>15}\n  arr = num.split(\"\
    \")\n  p arr\n  sum = 0\n  arr.each do |num|\n    sum += hex_digits[num.to_sym]\n\
    \  end\n  puts sum\nend\nhex_key(\"AB\")", "  hx_primes = [\"2\", \"3\", \"5\"\
    , \"7\", \"B\", \"D\"]\n  count = 0\n  num.each_char do |x|\n    count += 1 if\
    \ hx_primes.include?(x)\n  end\n  count\nend", "  num_letters = \"ABCDEF\"\n \
    \ num_numbers = \"0123456789\"\n  key = []\n  (0..num_letters.length - 1).each\
    \ do |i|\n    key.push(num_letters[i] + \" = \" + (i + 10).to_s)\n  end\n  (0..num_numbers.length\
    \ - 1).each do |i|\n    key.push(num_numbers[i] + \" = \" + (i).to_s)\n  end\n\
    \  return key\nend", "  if num.length == 0\n    puts \"0\"\n  else\n    key =\
    \ 0\n    num.chars.each do |a|\n      if a == \"A\" || a == \"B\" || a == \"D\"\
    \n        key += 1\n      elsif a == \"2\" || a == \"3\" || a == \"5\" || a ==\
    \ \"7\"\n        key += 1\n      end\n    end\n    puts key\n  end\nend", "  key\
    \ = {\"A\" => 10, \"B\" => 11, \"C\" => 12, \"D\" => 13, \"E\" => 14, \"F\" =>\
    \ 15}\n  primes = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n  count = 0\n  num.split(\"\
    \").each do |i|\n    if primes.include?(i)\n      count += 1\n    end\n  end\n\
    \  return count\nend\np hex_key(\"AB\") == 1\np hex_key(\"1077E\") == 2\np hex_key(\"\
    ABED1A33\") == 4\np hex_key(\"123456789ABCDEF0\") == 6\np hex_key(\"2020\") ==\
    \ 2", "    key = {\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n\
    \        '3' => 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n\
    \        '7' => 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n\
    \        'B' => 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n\
    \        'F' => 15\n    }\n    return key[num]\nend", "  key = {\n    0 => 0,\n\
    \    1 => 1,\n    2 => 2,\n    3 => 3,\n    4 => 4,\n    5 => 5,\n    6 => 6,\n\
    \    7 => 7,\n    8 => 8,\n    9 => 9,\n    'A' => 10,\n    'B' => 11,\n    'C'\
    \ => 12,\n    'D' => 13,\n    'E' => 14,\n    'F' => 15\n  }\n  key[num]\nend",
  "  prime_key = \"2,3,5,7,B,D\"\n  return num.count(prime_key)\nend\nputs hex_key(\"\
    2020\")\nputs hex_key(\"123456789ABCDEF0\")\nputs hex_key(\"ABED1A33\")\nputs\
    \ hex_key(\"1077E\")\nputs hex_key(\"AB\")\nputs", "  return 0 if num.size ==\
    \ 0\n  return 1 if num == \"A\" || num == \"B\" || num == \"D\" || num == \"C\"\
    \ || num == \"E\" || num == \"F\"\n  return 1 if num.to_i.prime?\n  return 1 if\
    \ num.to_i == 11 || num.to_i == 13\n  return 0\nend", "  hex_key = {\"0\" => 0,\
    \ \"1\" => 1, \"2\" => 2, \"3\" => 3, \"4\" => 4, \"5\" => 5, \"6\" => 6, \"7\"\
    \ => 7, \"8\" => 8, \"9\" => 9, \"A\" => 10, \"B\" => 11, \"C\" => 12, \"D\" =>\
    \ 13, \"E\" => 14, \"F\" => 15}\n  hex_value = []\n  hex_string = \"\"\n  num.split(\"\
    \").each do |s|\n    hex_value << hex_key[s]\n  end\n  hex_value.each do |v|\n\
    \    hex_string << v.to_s\n  end\n  puts \"hex_value = #{hex_value}\"\n  puts\
    \ \"hex_string = #{hex_string}\"\n  return hex_string.to_i\nend", "  key = {\"\
    A\" => 10, \"B\" => 11, \"C\" => 12, \"D\" => 13, \"E\" => 14, \"F\" => 15}\n\
    \  number = num.split(\"\").map {|x| key[x] ? key[x] : x.to_i}\n  number\nend",
  "  hex_digits = {\n    \"0\" => 0, \"1\" => 1, \"2\" => 2, \"3\" => 3, \"4\" =>\
    \ 4, \"5\" => 5,\n    \"6\" => 6, \"7\" => 7, \"8\" => 8, \"9\" => 9, \"A\" =>\
    \ 10, \"B\" => 11,\n    \"C\" => 12, \"D\" => 13, \"E\" => 14, \"F\" => 15\n \
    \ }\n  # puts hex_digits[num]\n  return hex_digits[num]\nend", "  primes = \"\
    2357BDF\"\n  count = 0\n  num.upcase.split(\"\").each do |n|\n    if primes.include?(n)\n\
    \      count += 1\n    end\n  end\n  count\nend", "  return nil if num.length\
    \ != 2\n  num_hash = {\n    \"0\" => 0,\n    \"1\" => 1,\n    \"2\" => 2,\n  \
    \  \"3\" => 3,\n    \"4\" => 4,\n    \"5\" => 5,\n    \"6\" => 6,\n    \"7\" =>\
    \ 7,\n    \"8\" => 8,\n    \"9\" => 9,\n    \"A\" => 10,\n    \"B\" => 11,\n \
    \   \"C\" => 12,\n    \"D\" => 13,\n    \"E\" => 14,\n    \"F\" => 15\n  }\n \
    \ # for each char in num\n  num.each_char do |char|\n    # check if in num_hash,\
    \ if not return nil\n    return nil unless num_hash.key?(char)\n  end\n  # if\
    \ all chars are in num_hash, return num_hash[num]\n  num_hash[num]\nend", "  hex_key\
    \ = {\"A\" => 10, \"B\" => 11, \"C\" => 12, \"D\" => 13, \"E\" => 14, \"F\" =>\
    \ 15}\n  num_str = num.to_s\n  num_str.chars.map { |x| x = hex_key[x] || x.to_i\
    \ }\nend", "  return [2,3,5,7,11,13] if num =~ /[^0-9A-F]/\n  hex_primes = {\n\
    \    '2' => 2,\n    '3' => 3,\n    '5' => 5,\n    '7' => 7,\n    'B' => 11,\n\
    \    'D' => 13\n  }\n  return hex_primes.keys if num =~ /[^0-9A-F]/\n  num.split('').map\
    \ do |n|\n    hex_primes[n]\n  end\nend", "  arr = num.chars\n  hex = [\"0\",\
    \ \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\"\
    , \"C\", \"D\", \"E\", \"F\"]\n  counter = 0\n  for i in 0..arr.length - 1\n \
    \   if hex.include?(arr[i])\n      if arr[i] == \"0\" || arr[i] == \"1\"\n   \
    \     next\n      elsif arr[i] == \"2\" || arr[i] == \"3\" || arr[i] == \"5\"\
    \ || arr[i] == \"7\" || arr[i] == \"B\" || arr[i] == \"D\"\n        counter +=\
    \ 1\n      end\n    end\n  end\n  puts counter\nend\nhex_key(\"AB\")\nhex_key(\"\
    1077E\")\nhex_key(\"ABED1A33\")\nhex_key(\"123456789ABCDEF0\")\nhex_key(\"2020\"\
    )", "    hash = {}\n    key = ['A','B','C','D','E','F']\n    value = [10,11,12,13,14,15]\n\
    \    for i in 0..key.length-1\n        hash[key[i]] = value[i]\n    end\n    return\
    \ hash\nend", "  key = {\"0\" => 0, \"1\" => 1, \"2\" => 2, \"3\" => 3, \"4\"\
    \ => 4, \"5\" => 5, \n    \"6\" => 6, \"7\" => 7, \"8\" => 8, \"9\" => 9, \"A\"\
    \ => 10, \"B\" => 11, \n    \"C\" => 12, \"D\" => 13, \"E\" => 14, \"F\" => 15}\n\
    \  sum = 0\n  num.each_char {|char| sum += key[char]}\n  sum\nend", "  digits\
    \ = { \"0\" => 0, \"1\" => 1, \"2\" => 2, \"3\" => 3, \"4\" => 4, \n    \"5\"\
    \ => 5, \"6\" => 6, \"7\" => 7, \"8\" => 8, \"9\" => 9, \"A\" => 10, \n    \"\
    B\" => 11, \"C\" => 12, \"D\" => 13, \"E\" => 14, \"F\" => 15 }\n  return digits[num]\n\
    end", "  key = {\n    \"A\" => 10,\n    \"B\" => 11,\n    \"C\" => 12,\n    \"\
    D\" => 13,\n    \"E\" => 14,\n    \"F\" => 15\n  }\n  key[num]\nend", "    hex\
    \ = {\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15\n    }\n    return hex[num]\nend", "  key = [\"0\", \"1\", \"2\", \"3\"\
    , \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\"\
    , \"F\"]\n  value = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n \
    \ hex_list = key.zip(value).to_h\n  prime_list = [2, 3, 5, 7, 11, 13]\n  prime_list.map\
    \ do |i|\n    hex_list.select { |k, v| k if v == i }\n  end.flatten\nend", " \
    \ dict = {'0' => 0, '1' => 1, '2' => 2, '3' => 3, '4' => 4, '5' => 5, '6' => 6,\n\
    \  '7' => 7, '8' => 8, '9' => 9, 'A' => 10, 'B' => 11, 'C' => 12, 'D' => 13, 'E'\
    \ => 14, 'F' => 15}\n  sum = 0\n  num.chars.each do |ch|\n    sum = sum * 16 +\
    \ dict[ch]\n  end\n  return sum\nend", "    result = []\n    num.to_s.upcase.split(\"\
    \").each do |x|\n        if x == \"2\" || x == \"3\" || x == \"5\" || x == \"\
    7\" || x == \"B\" || x == \"D\"\n            result << x\n        end\n    end\n\
    \    return result.length\nend\nputs hex_key(\"AB\")\nputs hex_key(\"1077E\")\n\
    puts hex_key(\"ABED1A33\")\nputs hex_key(\"123456789ABCDEF0\")\nputs hex_key(\"\
    2020\")", "    num.chars.keep_if { |x| x =~ /[2357BD]/ }.length\nend\np hex_key(\"\
    AB\") == 1\np hex_key(\"1077E\") == 2\np hex_key(\"ABED1A33\") == 4\np hex_key(\"\
    123456789ABCDEF0\") == 6\np hex_key(\"2020\") == 2", "\tr = num.to_i(16)\n\tr\n\
    end", "  (num.length - num.gsub(/[A-DF]/, '').length)\nend", "  dict = {'2' =>\
    \ 2, '3' => 3, '5' => 5, '7' => 7, 'B' => 11, 'D' => 13}\n  cnt = 0\n  num.each_char\
    \ do |i|\n    dict.each do |k, v|\n      if i == k\n        cnt += 1\n      end\n\
    \    end\n  end\n  cnt\nend", "  primes = '2357BDF'\n  count = 0\n  num.split('').each\
    \ do |n|\n    count += 1 if primes.include?(n)\n  end\n  count\nend", "\tkey_list\
    \ = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"\
    C\",\"D\",\"E\",\"F\"]\n\tprime_list = [2,3,5,7,11,13]\n\tarr = num.chars\n\t\
    counter = 0\n\tarr.each do |i|\n\t\tif prime_list.include?(key_list.index(i))\n\
    \t\t\tcounter += 1\n\t\tend\n\tend\n\treturn counter\nend", "  res = 0\n  dic\
    \ = {'2' => true, '3' => true, '5' => true, '7' => true, 'B' => true, 'D' => true}\n\
    \  num.each_char do |c|\n    res += 1 if dic[c]\n  end\n  res\nend", "\thex_primes\
    \ = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n\thex_primes.each_with_index do\
    \ |hex, index|\n\t\tif num == hex\n\t\t\treturn index\n\t\tend\n\tend\nend", " \
    \ primes = {2 => 0, 3 => 0, 5 => 0, 7 => 0, 11 => 0, 13 => 0}\n  digits = {\n\
    \      '0' => 0, '1' => 1, '2' => 2, '3' => 3, '4' => 4, '5' => 5,\n      '6'\
    \ => 6, '7' => 7, '8' => 8, '9' => 9, 'A' => 10, 'B' => 11,\n      'C' => 12,\
    \ 'D' => 13, 'E' => 14, 'F' => 15\n  }\n  counter = 0\n  num.each_char do |i|\n\
    \    if primes.has_key?(digits[i])\n      counter += 1\n    end\n  end\n  counter\n\
    end", "  primes = [2, 3, 5, 7, 11, 13]\n  hex_key = {\n    0 => 0,\n    1 => 1,\n\
    \    2 => 2,\n    3 => 3,\n    4 => 4,\n    5 => 5,\n    6 => 6,\n    7 => 7,\n\
    \    8 => 8,\n    9 => 9,\n    'A' => 10,\n    'B' => 11,\n    'C' => 12,\n  \
    \  'D' => 13,\n    'E' => 14,\n    'F' => 15\n  }\n  sum = 0\n  num.each_char\
    \ do |char|\n    sum += hex_key[char]\n  end\n  sum\nend", "  key = []\n  ('0'..'9').each\
    \ {|i| key << i}\n  ('A'..'F').each {|i| key << i}\n  num.split('').map{|i| key.index(i)}\n\
    end", "  (2..10).include?(num) || [\"B\", \"D\"].include?(num)\nend", "  digits\
    \ = num.split('')\n  result = []\n  digits.each do |digit|\n    if digit.to_i.to_s\
    \ == digit || digit.upcase == 'A' || digit.upcase == 'B' || digit.upcase == 'D'\
    \ || digit.upcase == 'E' || digit.upcase == 'F'\n      result << digit\n    end\n\
    \  end\n  result\nend", "  hex_key = {'A' => 10, 'B' => 11, 'C' => 12, 'D' =>\
    \ 13, 'E' => 14, 'F' => 15}\n  return hex_key[num] if hex_key.key?(num)\n  num.to_i\n\
    end", "    hex_array = { \n        \"0\" => 0,\n        \"1\" => 1,\n        \"\
    2\" => 2,\n        \"3\" => 3,\n        \"4\" => 4,\n        \"5\" => 5,\n   \
    \     \"6\" => 6,\n        \"7\" => 7,\n        \"8\" => 8,\n        \"9\" =>\
    \ 9,\n        \"A\" => 10,\n        \"B\" => 11,\n        \"C\" => 12,\n     \
    \   \"D\" => 13,\n        \"E\" => 14,\n        \"F\" => 15\n    }\nend", "  key\
    \ = %w(0 1 2 3 4 5 6 7 8 9 A B C D E F)\n  key.inject({}) { |acc, num| acc[num]\
    \ = true; acc }\nend", "\tarray = []\n\tprimes = 0\n\tdecimal = {\n\t\t\"0\" =>\
    \ 0,\n\t\t\"1\" => 1,\n\t\t\"2\" => 2,\n\t\t\"3\" => 3,\n\t\t\"4\" => 4,\n\t\t\
    \"5\" => 5,\n\t\t\"6\" => 6,\n\t\t\"7\" => 7,\n\t\t\"8\" => 8,\n\t\t\"9\" => 9,\n\
    \t\t\"A\" => 10,\n\t\t\"B\" => 11,\n\t\t\"C\" => 12,\n\t\t\"D\" => 13,\n\t\t\"\
    E\" => 14,\n\t\t\"F\" => 15\n\t}\n\tnum.split(\"\").each do |n|\n\t\tarray <<\
    \ decimal[n]\n\tend\n\tarray.each do |a|\n\t\tif a == 2 || a == 3 || a == 5 ||\
    \ a == 7 || a == 11 || a == 13\n\t\t\tprimes += 1\n\t\tend\n\tend\n\treturn primes\n\
    end", "  num.delete!('^2-7B-DF')\n  num.delete!('^B') if num.length == 2 && num[0]\
    \ == '1'\n  num.delete!('^2-7') if num.length == 2 && num[0] == 'B'\n  num.delete!('^2-5')\
    \ if num.length == 2 && num[0] == 'D'\n  p num.length\nend", "    hex_hash = {\n\
    \        \"0\" => 0,\n        \"1\" => 1,\n        \"2\" => 2,\n        \"3\"\
    \ => 3,\n        \"4\" => 4,\n        \"5\" => 5,\n        \"6\" => 6,\n     \
    \   \"7\" => 7,\n        \"8\" => 8,\n        \"9\" => 9,\n        \"A\" => 10,\n\
    \        \"B\" => 11,\n        \"C\" => 12,\n        \"D\" => 13,\n        \"\
    E\" => 14,\n        \"F\" => 15\n    }\n    num_array = num.split(\"\")\n    num_array.map!\
    \ do |value|\n        hex_hash[value]\n    end\n    num_array\nend", "  if num\
    \ == \"0\" || num == \"1\"\n    return false\n  end\n  for i in 2..(num - 1)\n\
    \    if num % i == 0\n      return false\n    end\n  end\n  return true\nend",
  "    num = num.to_i(16)\n    primes = [2, 3, 5, 7, 11, 13]\n    div_count = 0\n\
    \    primes.each do |prime|\n        if num % prime == 0\n            div_count\
    \ += 1\n        end\n    end\n    if div_count > 0\n        return 1\n    else\n\
    \        return 0\n    end\nend", "\t# number as a string\n\thex_num = num.split(\"\
    \")\n\tcount = 0\n\t# hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
    \ B, C, D, E, F.\n\thex_keys = (0..9).to_a.map(&:to_s) + (\"A\"..\"F\").to_a\n\
    \t# prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n\tprime_numbers = [2, 3, 5,\
    \ 7, 11, 13, 17]\n\thex_num.each do |x|\n\t\tif prime_numbers.include?(hex_keys.index(x))\n\
    \t\t\tcount += 1\n\t\tend\n\tend\n\tcount\nend", "  key = { \"0\" => 0, \"1\"\
    \ => 1, \"2\" => 2, \"3\" => 3, \"4\" => 4, \"5\" => 5,\n  \"6\" => 6, \"7\" =>\
    \ 7, \"8\" => 8, \"9\" => 9, \"A\" => 10, \"B\" => 11,\n  \"C\" => 12, \"D\" =>\
    \ 13, \"E\" => 14, \"F\" => 15}\n  sum = 0\n  key.each do |k, v|\n    if num.chars.include?(k)\n\
    \      sum += v\n    end\n  end\n  sum\nend", "  count = 0\n  num.split(\"\").each\
    \ do |n|\n    if(['2','3','5','7','B','D'].include?(n))\n      count += 1\n  \
    \  end\n  end\n  return count\nend", "    (1..num.to_i).each do |x|\n        return\
    \ x if (x ** 2) > num\n    end\nend", "  key = {}\n  (0..9).each {|n| key[n.to_s]\
    \ = n}\n  %w(A B C D E F).each_with_index {|letter, i| key[letter] = i + 10}\n\
    \  key\nend", "\t#hex numbers\n\thex_numbers = {\"0\" => 0, \"1\" => 1, \"2\"\
    \ => 2, \"3\" => 3, \"4\" => 4, \"5\" => 5, \"6\" => 6, \"7\" => 7, \"8\" => 8,\
    \ \"9\" => 9, \"A\" => 10, \"B\" => 11, \"C\" => 12, \"D\" => 13, \"E\" => 14,\
    \ \"F\" => 15}\n\t\n\t#prime number\n\tprime_numbers = [2, 3, 5, 7, 11, 13]\n\t\
    \n\t#split hex num into array\n\thex_to_num = num.split(\"\")\n\t\n\t#create a\
    \ new array of numbers to test\n\tnumbers_to_test = []\n\t\n\t#convert hex to\
    \ num\n\thex_to_num.each do |hex|\n\t\tnumbers_to_test << hex_numbers[hex]\n\t\
    end\n\t\n\t#check if num is prime\n\tprime_counter = 0\n\tnumbers_to_test.each\
    \ do |num|\n\t\tif prime_numbers.include?(num)\n\t\t\tprime_counter += 1\n\t\t\
    end\n\tend\n\t\n\treturn prime_counter\nend", "  # your code goes here\nend",
  "  hex = {\n    \"A\" => 10,\n    \"B\" => 11,\n    \"C\" => 12,\n    \"D\" => 13,\n\
    \    \"E\" => 14,\n    \"F\" => 15\n  }\n  num.chars.map { |n| hex.key?(n) ? hex[n]\
    \ : n.to_i }\nend", "\treturn {\n\t\t'0' => 0,\n\t\t'1' => 1,\n\t\t'2' => 2,\n\
    \t\t'3' => 3,\n\t\t'4' => 4,\n\t\t'5' => 5,\n\t\t'6' => 6,\n\t\t'7' => 7,\n\t\t\
    '8' => 8,\n\t\t'9' => 9,\n\t\t'A' => 10,\n\t\t'B' => 11,\n\t\t'C' => 12,\n\t\t\
    'D' => 13,\n\t\t'E' => 14,\n\t\t'F' => 15\n\t}[num]\nend", "    key = \"0123456789ABCDEF\"\
    \n    key.chars.select.with_index { |c,i| i.odd? }\nend", "    nums = {'2' =>\
    \ 1, '3' => 1, '5' => 1, '7' => 1, 'B' => 1, 'D' => 1, 'F' => 1}\n    nums.keys.each\
    \ do |k|\n        if num.include?(k)\n            nums[k] += 1\n        end\n\
    \    end\n    return nums.values.reduce(:+)\nend", "  num = num.to_i(16)\n  return\
    \ 0 if num <= 1\n  return 1 if num == 2 || num == 3 || num == 5 || num == 7 ||\
    \ num == 11 || num == 13\n  return 0 if num % 2 == 0 || num % 3 == 0 || num %\
    \ 5 == 0 || num % 7 == 0 || num % 11 == 0 || num % 13 == 0\n  true\nend", "\t\
    hex_keys = {\"A\" => 10, \"B\" => 11, \"C\" => 12, \"D\" => 13, \"E\" => 14, \"\
    F\" => 15}\n\tnum = num.split(\"\")\n\tfor i in 0..num.length-1\n\t\tif hex_keys.key?(num[i])\n\
    \t\t\tnum[i] = hex_keys[num[i]]\n\t\tend\n\tend\n\tnum.map {|i| i.to_i}\nend",
  "  hex = Hash[('0'..'9').to_a.zip((0..9).to_a)]\n  hex.merge!(Hash[('A'..'F').to_a.zip((10..15).to_a)])\n\
    \  return hex[num]\nend", "  num.split('').map { |x| x =~ /^(0|1|2|3|4|5|6|7|8|9|A|B|C|D|E|F)$/\
    \ }.compact.count\nend", "    hex = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"\
    ,\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    dec_num = []\n  \
    \  for i in 0..num.length-1\n        # print num[i],\"\\n\"\n        dec_num <<\
    \ hex.index(num[i])\n    end\n    dec_num = dec_num.join(\"\").to_i\n    puts\
    \ dec_num\n    dec_num\nend", "  array = [2, 3, 5, 7, 11, 13]\n  hex_key = {\"\
    0\" => 0, \"1\" => 1, \"2\" => 2, \"3\" => 3, \"4\" => 4, \"5\" => 5, \"6\" =>\
    \ 6, \"7\" => 7, \"8\" => 8, \"9\" => 9, \"A\" => 10, \"B\" => 11, \"C\" => 12,\
    \ \"D\" => 13, \"E\" => 14, \"F\" => 15}\n  counter = 0\n  num = num.split(\"\"\
    )\n  num.each do |a|\n    if array.include?(hex_key[a])\n      counter += 1\n\
    \    end\n  end\n  return counter\nend", "\tkey = {\"2\" => 2, \"3\" => 3, \"\
    5\" => 5, \"7\" => 7, \"B\" => 11, \"D\" => 13}\n\tif key.has_key?(num)\n\t\t\
    return key[num]\n\telse\n\t\treturn false\n\tend\nend", "    array = ['A','B','C','D','E','F']\n\
    \    array.each do |i|\n        num.delete!(i)\n    end\n    num.to_i\nend", " \
    \ key = {\n    \"A\" => 10,\n    \"B\" => 11,\n    \"C\" => 12,\n    \"D\" =>\
    \ 13,\n    \"E\" => 14,\n    \"F\" => 15\n  }\n  key[num]\nend", "  key = (\"\
    0\"..\"9\").to_a + (\"A\"..\"F\").to_a\n  key.index(num)\nend", "  a = num.split('')\n\
    \  b = {'A' => 10, 'B' => 11, 'C' => 12, 'D' => 13, 'E' => 14, 'F' => 15}\n  for\
    \ i in 0..(a.length - 1)\n    if a[i] == 'A' || a[i] == 'B' || a[i] == 'C' ||\
    \ a[i] == 'D' || a[i] == 'E' || a[i] == 'F'\n      a[i] = b[a[i]]\n    end\n \
    \ end\n  return a\nend", "  hex_key = Hash.new\n  x = 0\n  for i in 2..9\n   \
    \ hex_key[i.to_s] = x\n    x += 1\n  end\n  for i in \"A\"..\"F\"\n    hex_key[i]\
    \ = x\n    x += 1\n  end\n  hex_key\nend", "\tout = 0\n\thexa = [\"0\",\"1\",\"\
    2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"\
    F\"]\n\t(0..num.length-1).each do |i|\n\t\tif hexa.include?(num[i])\n\t\t\tout\
    \ += 1\n\t\tend\n\tend\n\tout\nend", "  key = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F']\n\
    \  h = Hash[*key.zip(Array(0..16)).flatten]\n  h\nend", "  key = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F']\n\
    \  h = Hash[key.map.with_index.to_a]\n  if h.has_key?(num)\n    return h[num]\n\
    \  end\nend", "    key_hash = {}\n    alphabet = ('A'..'F').to_a\n    10.times\
    \ do |n|\n        key_hash[n.to_s] = n\n    end\n    alphabet.each_with_index\
    \ do |letter, index|\n        key_hash[letter] = index + 10\n    end\n    key_hash\n\
    end", "\thex_prime = {\n\t\t\"2\" => 2,\n\t\t\"3\" => 3,\n\t\t\"5\" => 5,\n\t\t\
    \"7\" => 7,\n\t\t\"B\" => 11,\n\t\t\"D\" => 13\n\t}\n\thex_prime.keys.include?(num)\n\
    end", "  primes = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n  count = 0\n  num.each_char\
    \ do |char|\n    if primes.include?(char)\n      count += 1\n    end\n  end\n\
    \  count\nend\nputs hex_key(\"AB\")\nputs hex_key(\"1077E\")\nputs hex_key(\"\
    ABED1A33\")\nputs hex_key(\"123456789ABCDEF0\")\nputs hex_key(\"2020\")", "  num\
    \ = num.split('')\n  count = 0\n  hex_key = {\"A\" => 10, \"B\" => 11, \"C\" =>\
    \ 12, \"D\" => 13, \"E\" => 14, \"F\" => 15}\n  num.each do |x|\n    if hex_key.has_key?(x)\n\
    \      num.delete(x)\n      num << hex_key[x]\n    end\n  end\n  num = num.map(&:to_i)\n\
    \  # Your code here\n  return count\nend\nputs hex_key(\"AB\")\nputs hex_key(\"\
    1077E\")\nputs hex_key(\"ABED1A33\")\nputs hex_key(\"123456789ABCDEF0\")\nputs\
    \ hex_key(\"2020\")\nputs hex_key(\"FF\")", "\tkey = {\n\t\t\"A\" => 10,\n\t\t\
    \"B\" => 11,\n\t\t\"C\" => 12,\n\t\t\"D\" => 13,\n\t\t\"E\" => 14,\n\t\t\"F\"\
    \ => 15\n\t}\n\tnum_arr = num.split(\"\")\n\tcount = 0\n\tnum_arr.each do |digit|\n\
    \t\tcount += 1 if key[digit]\n\tend\n\tcount\nend", "  key = {\n    0 => 0,\n\
    \    1 => 1,\n    2 => 2,\n    3 => 3,\n    4 => 4,\n    5 => 5,\n    6 => 6,\n\
    \    7 => 7,\n    8 => 8,\n    9 => 9,\n    'A' => 10,\n    'B' => 11,\n    'C'\
    \ => 12,\n    'D' => 13,\n    'E' => 14,\n    'F' => 15\n  }\n  # create new key\
    \ from value\n  new_key = key.invert\n  # create array with all hex values\n \
    \ arr = []\n  # iterate through each key in the new key\n  new_key.each do |k,v|\n\
    \    # for each key push the value into the array\n    arr.push(v)\n  end\n  #\
    \ return array\n  arr\nend", "  key = 'ABCDEF'\n  key.each_char.with_index do\
    \ |value, index|\n    key[index] = value.ord - 55\n  end\n  key\nend", "\tnums\
    \ = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n\tif nums.include?(num)\n\t\t\
    return true\n\telse\n\t\treturn false\n\tend\nend", "  {\n    '0' => 0,\n    '1'\
    \ => 1,\n    '2' => 2,\n    '3' => 3,\n    '4' => 4,\n    '5' => 5,\n    '6' =>\
    \ 6,\n    '7' => 7,\n    '8' => 8,\n    '9' => 9,\n    'A' => 10,\n    'B' =>\
    \ 11,\n    'C' => 12,\n    'D' => 13,\n    'E' => 14,\n    'F' => 15\n  }[num]\n\
    end", "  prime_key = {\n    2 => true,\n    3 => true,\n    5 => true,\n    7\
    \ => true,\n    11 => true,\n    13 => true,\n    17 => true,\n    19 => true,\n\
    \    23 => true,\n    29 => true,\n    31 => true,\n    37 => true,\n    41 =>\
    \ true,\n    43 => true,\n    47 => true,\n    53 => true,\n    59 => true,\n\
    \    61 => true,\n    67 => true,\n    71 => true,\n    73 => true,\n    79 =>\
    \ true,\n    83 => true,\n    89 => true,\n    97 => true,\n    101 => true,\n\
    \    103 => true,\n    107 => true,\n    109 => true,\n    113 => true,\n    127\
    \ => true,\n    131 => true,\n    137 => true,\n    139 => true,\n    149 => true,\n\
    \    151 => true,\n    157 => true,\n    163 => true,\n    167 => true,\n    173\
    \ => true,\n    179 => true,\n    181 => true,\n    191 => true,\n    193 => true,\n\
    \    197 => true,\n    199 => true,\n    211 => true,\n    223 => true,\n    227\
    \ => true,\n    229 => true,\n    233 => true,\n    239 => true,\n    241 => true,\n\
    \    251 => true,\n    257 => true,\n    263 => true,\n    269 => true,\n    271\
    \ => true,\n    277 => true,\n    281 => true,\n    283 => true,\n    293 => true,\n\
    \    307 => true,\n    311 => true,\n    313 => true,\n    317 => true,\n    331\
    \ => true,\n    337 => true,\n    347 => true,\n    349 => true,\n    353 => true,\n\
    \    359 => true,\n    367 => true,\n    373 => true,\n    379 => true,\n    383\
    \ => true,\n    389 => true,\n    397 => true,\n    401 => true,\n    409 => true,\n\
    \    419 => true,\n    421 => true,\n    431 => true,\n    433 => true", "  hex_list\
    \ = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n  count = 0\n  for i in num.chars\n\
    \    if hex_list.include?(i)\n      count += 1\n    end\n  end\n  return count\n\
    end", "  num = num.upcase\n  num = num.split('')\n  num = num.map {|x| (x =~ /[0-9A-F]/)\
    \ ?  x.to_i(16) : 0 }\n  num = num.delete_if {|x| x > 13}\n  num = num.delete_if\
    \ {|x| x < 2}\n  num = num.delete_if {|x| x == 4}\n  num = num.delete_if {|x|\
    \ x == 6}\n  num = num.delete_if {|x| x == 8}\n  num = num.delete_if {|x| x ==\
    \ 9}\n  num = num.delete_if {|x| x == 10}\n  num = num.delete_if {|x| x == 12}\n\
    \  num.length\nend\nputs hex_key(\"AB\")\nputs hex_key(\"1077E\")\nputs hex_key(\"\
    ABED1A33\")\nputs hex_key(\"123456789ABCDEF0\")\nputs hex_key(\"2020\")", "\t\
    hex_arr = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"\
    B\",\"C\",\"D\",\"E\",\"F\"]\n\tprime_arr = [\"2\",\"3\",\"5\",\"7\",\"B\",\"\
    D\"]\n\tcount = 0\n\tnum.each_char {|char| \n\t\tif prime_arr.include?(char) \n\
    \t\t\tcount+=1\n\t\tend\n\t}\n\tcount\nend\nputs hex_key(\"2\")\nputs hex_key(\"\
    AB\")\nputs hex_key(\"1077E\")\nputs hex_key(\"ABED1A33\")\nputs hex_key(\"123456789ABCDEF0\"\
    )\nputs hex_key(\"2020\")", "  key = {\"A\" => 10, \"B\" => 11, \"C\" => 12, \"\
    D\" => 13, \"E\" => 14, \"F\" => 15}\n  num.upcase.chars.each {|x| key[x] = x.to_i}\n\
    \  key\nend", "    h_num = num.upcase.split('')\n    h_num.map! do |i|\n     \
    \   if i.match(/[0-9]/)\n            i.to_i\n        else\n            i.ord -\
    \ 55\n        end\n    end\n    h_num\nend", "  hex = {0 => 0, 1 => 1, 2 => 2,\
    \ 3 => 3, 4 => 4, 5 => 5, 6 => 6, 7 => 7, 8 => 8,\n    9 => 9, \"A\" => 10, \"\
    B\" => 11, \"C\" => 12, \"D\" => 13, \"E\" => 14, \"F\" => 15}\n  array = num.chars.map\
    \ {|char| hex[char]}\n  sum = 0\n  array.each {|x| sum += x}\n  sum\nend", " \
    \ key = {\n    \"A\" => 10,\n    \"B\" => 11,\n    \"C\" => 12,\n    \"D\" =>\
    \ 13,\n    \"E\" => 14,\n    \"F\" => 15\n  }\n  num_arr = num.split(\"\")\n \
    \ result = []\n  num_arr.each do |n|\n    if key.keys.include?(n)\n      result\
    \ << key[n]\n    else\n      result << n.to_i\n    end\n  end\n  result\nend",
  "    key = {\"2\" => true, \"3\" => true, \"5\" => true, \"7\" => true, \"B\" =>\
    \ true, \"D\" => true}\n    count = 0\n    num.each_char do |n|\n        if key[n]\n\
    \            count += 1\n        end\n    end\n    return count\nend\nputs hex_key(\"\
    1077E\")\nputs hex_key(\"ABED1A33\")", "  hex_array = [\"0\", \"1\", \"2\", \"\
    3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"\
    E\", \"F\"]\n  prime_numbers = [2, 3, 5, 7, 11, 13, 17]\n  split_num = num.split(\"\
    \")\n  hex_value = split_num.map do |i|\n    if hex_array.include?(i)\n      hex_array.index(i)\n\
    \    end\n  end\n  prime_value = prime_numbers.map do |i|\n    if hex_value.include?(i)\n\
    \      hex_value.index(i)\n    end\n  end\n  prime_value.compact.count\nend",
  "  key = {\n    \"0\" => 0,\n    \"1\" => 1,\n    \"2\" => 2,\n    \"3\" => 3,\n\
    \    \"4\" => 4,\n    \"5\" => 5,\n    \"6\" => 6,\n    \"7\" => 7,\n    \"8\"\
    \ => 8,\n    \"9\" => 9,\n    \"A\" => 10,\n    \"B\" => 11,\n    \"C\" => 12,\n\
    \    \"D\" => 13,\n    \"E\" => 14,\n    \"F\" => 15\n  }\n  key[num]\nend", " \
    \ num.split('').map do |e|\n    case e\n    when 'A', 'B', 'D', 'E'\n      1\n\
    \    when '2', '3', '5', '7'\n      1\n    else\n      0\n    end\n  end.reduce(:+)\n\
    end", "  h = {\"A\" => 10, \"B\" => 11, \"C\" => 12, \"D\" => 13, \"E\" => 14,\
    \ \"F\" => 15}\n  h.default = 0\n  num.chars.map { |e| h[e] }\nend", "  prime_hex\
    \ = {2 => 0, 3 => 0, 5 => 0, 7 => 0, 11 => 0, 13 => 0}\n  prime_hex.keys.each\
    \ do |key|\n    if num.include?(key.to_s(16).upcase)\n      prime_hex[key] +=\
    \ 1\n    end\n  end\n  prime_hex.values.inject(:+)\nend", "\thex_primes = [\"\
    2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n\thex_numbers = num.split(\"\")\n\thex_numbers.select\
    \ { |hex| hex_primes.include?(hex) }.length\nend", "    hexes = { 0 => 0, 1 =>\
    \ 1, 2 => 2, 3 => 3, 4 => 4, 5 => 5, 6 => 6, 7 => 7, 8 => 8, 9 => 9, \"A\" =>\
    \ 10, \"B\" => 11, \"C\" => 12, \"D\" => 13, \"E\" => 14, \"F\" => 15 }\n    arr\
    \ = num.split(\"\")\n    p arr\n    dig = []\n    tot = 0\n    for i in arr\n\
    \        dig << hexes[i]\n    end\n    p dig\n    for k in dig\n        if k ==\
    \ 2\n            tot += 1\n        elsif k == 3\n            tot += 1\n      \
    \  elsif k == 5\n            tot += 1\n        elsif k == 7\n            tot +=\
    \ 1\n        elsif k == 11\n            tot += 1\n        elsif k == 13\n    \
    \        tot += 1\n        end\n    end\n    tot\nend\nnum = \"AB\"\np hex_key(num)\n\
    num = \"1077E\"\np hex_key(num)\nnum = \"ABED1A33\"\np hex_key(num)\nnum = \"\
    123456789ABCDEF0\"\np hex_key(num)\nnum = \"2020\"\np hex_key(num)", "  primes\
    \ = { \n            \"2\" => true,\n            \"3\" => true,\n            \"\
    5\" => true,\n            \"7\" => true,\n            \"B\" => true,\n       \
    \     \"D\" => true\n            }\n  sum = 0\n  num.split(\"\").each { |a| sum\
    \ += 1 if primes[a] }\n  sum\nend", "  hash = {}\n  (0..9).each { |x| hash[x.to_s]\
    \ = x }\n  (\"A\"..\"F\").each_with_index { |x,y| hash[x] = 10 + y }\n  hash\n\
    end", "  if num == \"A\"\n    return 10\n  elsif num == \"B\"\n    return 11\n\
    \  elsif num == \"C\"\n    return 12\n  elsif num == \"D\"\n    return 13\n  elsif\
    \ num == \"E\"\n    return 14\n  elsif num == \"F\"\n    return 15\n  else\n \
    \   return num.to_i\n  end\nend", "    key_prime = {\"2\" => \"2\", \"3\" => \"\
    3\", \"5\" => \"5\", \"7\" => \"7\", \"B\" => \"11\", \"D\" => \"13\"}\n    count\
    \ = 0\n    num.upcase.each_char do |char|\n        if key_prime.has_key?(char)\n\
    \            count += 1\n        end\n    end\n    puts count\nend", "  hex_key\
    \ = { \"2\" => 2, \"3\" => 3, \"5\" => 5, \"7\" => 7, \"B\" => 11, \"D\" => 13\
    \ }\n  num.chars.map { |n| hex_key[n] }.compact\nend", "  digits = \"0123456789ABCDEF\"\
    \n  hex_digit = (0..15).map { |i| i.to_s(16).upcase }\n  hex_hash = Hash[hex_digit.zip(digits.chars)]\n\
    \  key = []\n  num.chars.each do |x|\n    key << hex_hash[x]\n  end\n  key.join.to_i\n\
    end", "  h = Hash[(0..9).zip((0..9).to_a)]\n  hex = [\"A\", \"B\", \"C\", \"D\"\
    , \"E\", \"F\"]\n  (0..5).each do |i|\n    h[hex[i]] = 10 + i\n  end\n  return\
    \ h[num]\nend", "   hk = {0 => 0,\n         1 => 1,\n         2 => 2,\n      \
    \   3 => 3,\n         4 => 4,\n         5 => 5,\n         6 => 6,\n         7\
    \ => 7,\n         8 => 8,\n         9 => 9,\n         \"A\" => 10,\n         \"\
    B\" => 11,\n         \"C\" => 12,\n         \"D\" => 13,\n         \"E\" => 14,\n\
    \         \"F\" => 15}\n  hk[num]\nend", "  dict = {0 => 0, 1 => 1, 2 => 2, 3\
    \ => 3, 4 => 4, 5 => 5, 6 => 6, 7 => 7, 8 => 8, 9 => 9, 'A' => 10, 'B' => 11,\
    \ 'C' => 12, 'D' => 13, 'E' => 14, 'F' => 15}\n  num_array = num.split('')\n \
    \ result = []\n  num_array.each do |item|\n    if dict[item.to_sym]\n      result\
    \ << dict[item.to_sym]\n    else\n      result << item.to_i\n    end\n  end\n\
    \  result\nend", "  hex = (0..9).to_a.map(&:to_s) + %w(A B C D E F)\n  hex.map.with_index\
    \ do |e, i|\n    i\n  end.to_h\nend", "  h = {'2' => true, '3' => true, '5' =>\
    \ true, '7' => true, 'B' => true, 'D' => true}\n  count = 0\n  num.split('').each\
    \ do |n|\n    count += 1 if h[n]\n  end\n  count\nend\nputs \"############# hex_key(num)#############\"\
    \nputs hex_key(\"AB\") == 1\nputs hex_key(\"1077E\") == 2\nputs hex_key(\"ABED1A33\"\
    ) == 4\nputs hex_key(\"123456789ABCDEF0\") == 6\nputs hex_key(\"2020\") == 2\n\
    puts hex_key(\"\") == 0\nputs hex_key(\"1\") == 0\nputs hex_key(\"4F\") == 0\n\
    puts hex_key(\"B8\") == 1\nputs hex_key(\"FD\") == 2\nputs hex_key(\"A\") == 0\n\
    puts hex_key(\"F0\") == 0\nputs hex_key(\"A0\") == 0\nputs hex_key(\"A1\") ==\
    \ 0\nputs hex_key(\"A2\") == 1\nputs hex_key(\"A3\") == 1\nputs hex_key(\"A4\"\
    ) == 0\nputs hex_key(\"A5\") == 1\nputs hex_key(\"A6\") == 0\nputs hex_key(\"\
    A7\") == 1\nputs hex_key(\"A8\") == 0\nputs hex_key(\"A9\") == 0\nputs hex_key(\"\
    AA\") == 0\nputs hex_key(\"AB\") == 1\nputs hex_key(\"AC\") == 0\nputs hex_key(\"\
    AD\") == 1\nputs hex_key(\"AE\") == 0\nputs hex_key(\"AF\") == 0\nputs hex_key(\"\
    B0\") == 0\nputs hex_key(\"B1\") == 0\nputs hex_key(\"B2\") == 1\nputs hex_key(\"\
    B3\") == 1\nputs hex_key(\"B4\") == 0\nputs hex_key(\"B5\") == 1\nputs hex_key(\"\
    B6\") == 0\nput", "  prime_numbers = [2, 3, 5, 7, 11, 13]\n  count = 0\n  num.each_char\
    \ do |c|\n    if (prime_numbers.include?(c.to_i(16))) || (prime_numbers.include?(c.ord\
    \ - 55))\n      count += 1\n    end\n  end\n  count\nend\np hex_key(\"AB\") ==\
    \ 1\np hex_key(\"1077E\") == 2\np hex_key(\"ABED1A33\") == 4\np hex_key(\"123456789ABCDEF0\"\
    ) == 6\np hex_key(\"2020\") == 2", "  counter = 0\n  key = \"2 3 5 7 B D\".split(\"\
    \ \")\n  num.upcase.split(\"\").each do |x|\n    counter += 1 if key.include?(x)\n\
    \  end\n  return counter\nend", "    key = {'A' => 10, 'B' => 11, 'C' => 12, 'D'\
    \ => 13, 'E' => 14, 'F' => 15}\n    prime_hex_counter = 0\n    arr = num.split('')\n\
    \    arr.each do |i|\n        if key.key?(i)\n            if is_prime(key[i])\n\
    \                prime_hex_counter += 1\n            end\n        elsif is_prime(i.to_i)\n\
    \            prime_hex_counter += 1\n        end\n    end\n    prime_hex_counter\n\
    end", "  @@hex_key = {\n    \"0\" => 0,\n    \"1\" => 1,\n    \"2\" => 2,\n  \
    \  \"3\" => 3,\n    \"4\" => 4,\n    \"5\" => 5,\n    \"6\" => 6,\n    \"7\" =>\
    \ 7,\n    \"8\" => 8,\n    \"9\" => 9,\n    \"A\" => 10,\n    \"B\" => 11,\n \
    \   \"C\" => 12,\n    \"D\" => 13,\n    \"E\" => 14,\n    \"F\" => 15\n  }\nend",
  "  hex = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F']\n  hex_primes\
    \ = ['2','3','5','7','B','D']\n  key = []\n  num.split('').each do |n|\n    key\
    \ << n if hex_primes.include?(n)\n  end\n  key.size\nend", "  hex = {'0' => 0,\
    \ '1' => 1, '2' => 2, '3' => 3, '4' => 4, '5' => 5, '6' => 6, '7' => 7, '8' =>\
    \ 8, '9' => 9, 'A' => 10, 'B' => 11, 'C' => 12, 'D' => 13, 'E' => 14, 'F' => 15}\n\
    \  hex.select{|k,v| v.prime?}.keys.size\nend\np hex_key('AB')\np hex_key('1077E')\n\
    p hex_key('ABED1A33')\np hex_key('123456789ABCDEF0')\np hex_key('2020')", "  h\
    \ = {\"A\" => 10, \"B\" => 11, \"C\" => 12, \"D\" => 13, \"E\" => 14, \"F\" =>\
    \ 15}\n  hex_arr = num.split(\"\")\n  hex_arr.map! do |hex|\n    if hex == \"\
    A\" || hex == \"B\" || hex == \"C\" || hex == \"D\" || hex == \"E\" || hex ==\
    \ \"F\"\n      h[hex]\n    else\n      hex.to_i\n    end\n  end\n  hex_arr\nend",
  "  hash = {0 => 0, 1 => 1, 2 => 2, 3 => 3, 4 => 4, 5 => 5, 6 => 6, 7 => 7, 8 =>\
    \ 8, 9 => 9, 'A' => 10, 'B' => 11, 'C' => 12, 'D' => 13, 'E' => 14, 'F' => 15}\n\
    \  arr = num.split('')\n  result = []\n  arr.each do |n|\n    result << hash[n]\n\
    \  end\n  p result\nend", "    key = {\n        0 => 0,\n        1 => 1,\n   \
    \     2 => 2,\n        3 => 3,\n        4 => 4,\n        5 => 5,\n        6 =>\
    \ 6,\n        7 => 7,\n        8 => 8,\n        9 => 9,\n        'A' => 10,\n\
    \        'B' => 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n\
    \        'F' => 15\n    }\n    key[num]\nend", "  key = {}\n  symbols = [0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F']\n\
    \  hex_prime = [2,3,5,7,11,13]\n  symbols.each_with_index do |v,i|\n    key[v]\
    \ = i\n  end\n  key\nend", "  { \n    '2' => true,\n    '3' => true,\n    '5'\
    \ => true,\n    '7' => true,\n    'B' => true,\n    'D' => true\n  }\nend", " \
    \ key = {\"0\" => 0, \"1\" => 1, \"2\" => 2, \"3\" => 3, \"4\" => 4, \"5\" =>\
    \ 5, \"6\" => 6, \"7\" => 7, \"8\" => 8, \"9\" => 9, \"A\" => 10, \"B\" => 11,\
    \ \"C\" => 12, \"D\" => 13, \"E\" => 14, \"F\" => 15}\n  key\nend", "  h = {'0'\
    \ => 0, '1' => 1, '2' => 2, '3' => 3, '4' => 4, '5' => 5, '6' => 6, \n  '7' =>\
    \ 7, '8' => 8, '9' => 9, 'A' => 10, 'B' => 11, 'C' => 12, 'D' => 13, \n  'E' =>\
    \ 14, 'F' => 15}\n  return h[num]\nend", "\tnum_array = num.split(\"\")\n\tnum_array.each_with_index\
    \ do |i, index|\n\t\tif i == \"A\"\n\t\t\tnum_array[index] = \"10\"\n\t\telsif\
    \ i == \"B\"\n\t\t\tnum_array[index] = \"11\"\n\t\telsif i == \"C\"\n\t\t\tnum_array[index]\
    \ = \"12\"\n\t\telsif i == \"D\"\n\t\t\tnum_array[index] = \"13\"\n\t\telsif i\
    \ == \"E\"\n\t\t\tnum_array[index] = \"14\"\n\t\telsif i == \"F\"\n\t\t\tnum_array[index]\
    \ = \"15\"\n\t\tend\n\tend\n\tnum_array\nend", "  num.gsub(/[G-Z]/,\"\").gsub(/[a-f]/,\"\
    \").gsub(/\\d/,\"\").size\nend", "  hex_key = {2 => \"2\", 3 => \"3\", 5 => \"\
    5\", 7 => \"7\", 11 => \"B\", 13 => \"D\"}\n  hex_key.keys.inject(0) {|sum, el|\
    \ sum += (num.count(hex_key[el]) > 0) ? 1 : 0}\nend\nputs hex_key(\"1077E\") #\
    \ 2\nputs hex_key(\"123456789ABCDEF0\") # 6\nputs hex_key(\"ABED1A33\") # 4\n\
    puts hex_key(\"AB\") # 1\nputs hex_key(\"2020\") # 2", "  number = num.split('')\n\
    \  arr = []\n  number.each do |x|\n    if x.to_i.to_s == x\n      arr << x.to_i\n\
    \    elsif x == 'A'\n      arr << 10\n    elsif x == 'B'\n      arr << 11\n  \
    \  elsif x == 'C'\n      arr << 12\n    elsif x == 'D'\n      arr << 13\n    elsif\
    \ x == 'E'\n      arr << 14\n    elsif x == 'F'\n      arr << 15\n    end\n  end\n\
    \  return arr\nend", "  (num.to_i(16)).to_s(16)\nend", "  hex_digits = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F']\n\
    \  prime_digits = ['2','3','5','7','B','D']\n  key = {}\n  prime_digits.each do\
    \ |digit|\n    key[digit] = 0\n  end\n  num.each_char do |ch|\n    if prime_digits.include?(ch)\n\
    \      key[ch] += 1\n    end\n  end\n  key\nend", "  return 0 if num.empty?\n\
    \  num.scan(/[2-7ABD]/).count\nend", "  hexes = [\"0\", \"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"\
    F\"]\n  key = {}\n  hexes.each_with_index do |hex, i|\n    key[hex] = i\n  end\n\
    \  key\nend", "\tkey = { \n\t\"0\" => 0,\n\t\"1\" => 1,\n\t\"2\" => 2,\n\t\"3\"\
    \ => 3,\n\t\"4\" => 4,\n\t\"5\" => 5,\n\t\"6\" => 6,\n\t\"7\" => 7,\n\t\"8\" =>\
    \ 8,\n\t\"9\" => 9,\n\t\"A\" => 10,\n\t\"B\" => 11,\n\t\"C\" => 12,\n\t\"D\" =>\
    \ 13,\n\t\"E\" => 14,\n\t\"F\" => 15\n\t}\n\tkey\nend", "  hex = ['A','B','C','D','E','F']\n\
    \  index = 0\n  hex.each do |value|\n    if value == num\n      return index +\
    \ 10\n    end\n    index += 1\n  end\n  return num.to_i\nend", "  hex_numbers\
    \ = { \n    \"2\" => \"2\",\n    \"3\" => \"3\",\n    \"4\" => \"4\",\n    \"\
    5\" => \"5\",\n    \"6\" => \"6\",\n    \"7\" => \"7\",\n    \"8\" => \"8\",\n\
    \    \"9\" => \"9\",\n    \"A\" => \"10\",\n    \"B\" => \"11\",\n    \"C\" =>\
    \ \"12\",\n    \"D\" => \"13\",\n    \"E\" => \"14\",\n    \"F\" => \"15\"\n \
    \ }\n  count = 0\n  num.each_char do |num|\n    count += 1 if hex_numbers[num]\
    \ == \"2\" || hex_numbers[num] == \"3\" || hex_numbers[num] == \"5\" || hex_numbers[num]\
    \ == \"7\" || hex_numbers[num] == \"11\" || hex_numbers[num] == \"13\"\n  end\n\
    \  count\nend", "  key = {\n    \"0\" => 0,\n    \"1\" => 1,\n    \"2\" => 2,\n\
    \    \"3\" => 3,\n    \"4\" => 4,\n    \"5\" => 5,\n    \"6\" => 6,\n    \"7\"\
    \ => 7,\n    \"8\" => 8,\n    \"9\" => 9,\n    \"A\" => 10,\n    \"B\" => 11,\n\
    \    \"C\" => 12,\n    \"D\" => 13,\n    \"E\" => 14,\n    \"F\" => 15\n  }\n\
    \  key\nend", "\thex = {0=>0, 1=>1, 2=>2, 3=>3, 4=>4, 5=>5, 6=>6, 7=>7, 8=>8,\
    \ 9=>9, 'A'=>10, 'B'=>11, 'C'=>12, 'D'=>13, 'E'=>14, 'F'=>15}\n\tnum = num.split('')\n\
    \tresult = []\n\tprime = []\n\tnum.each do |x|\n\t\tresult << hex[x]\n\tend\n\t\
    result.each do |x|\n\t\tif x == 2 || x == 3 || x == 5 || x == 7 || x == 11 ||\
    \ x == 13\n\t\t\tprime << x\n\t\tend\n\tend\n\treturn prime.length\nend\nputs\
    \ \"Please enter your number: \"\nnum = gets.chomp\nputs hex_key(num)", "\t#convert\
    \ hexadecimal to integer\n\thex_hash = {\n\t\t\"0\" => 0,\n\t\t\"1\" => 1,\n\t\
    \t\"2\" => 2,\n\t\t\"3\" => 3,\n\t\t\"4\" => 4,\n\t\t\"5\" => 5,\n\t\t\"6\" =>\
    \ 6,\n\t\t\"7\" => 7,\n\t\t\"8\" => 8,\n\t\t\"9\" => 9,\n\t\t\"A\" => 10,\n\t\t\
    \"B\" => 11,\n\t\t\"C\" => 12,\n\t\t\"D\" => 13,\n\t\t\"E\" => 14,\n\t\t\"F\"\
    \ => 15\n\t}\n\ti = num.length - 1\n\tsum = 0\n\twhile i >= 0\n\t\tsum += (16\
    \ ** (num.length - 1 - i)) * hex_hash[num[i]]\n\t\ti -= 1\n\tend\n\tsum\nend",
  "  output = 0\n  hex = {\"2\" => 2, \"3\" => 3, \"5\" => 5, \"7\" => 7, \"B\" =>\
    \ 11, \"D\" => 13}\n  num.split(\"\").each do |x|\n    puts x\n    output += 1\
    \ if hex.keys.include?(x)\n  end\n  output\nend", "    key = [\n        [\"2\"\
    , \"3\", \"5\", \"7\", \"B\", \"D\"],\n        [0, 0, 0, 0, 0, 0]\n    ]\n   \
    \ num.each_char do |item|\n        if key[0].include?(item)\n            key[1][key[0].index(item)]\
    \ += 1\n        end\n    end\n    key[1].inject{|sum,x| sum + x }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
