name: HumanEval_74_total_match
language: rb
prompt: "# Write a function that accepts two lists of strings and returns the list\
  \ that has \n# total number of chars in the all strings of the list less than the\
  \ other list.\n# if the two lists have the same number of chars, return the first\
  \ list.\n# Examples\n# total_match([], []) \u279E []\n# total_match(['hi', 'admin'],\
  \ ['hI', 'Hi']) \u279E ['hI', 'Hi']\n# total_match(['hi', 'admin'], ['hi', 'hi',\
  \ 'admin', 'project']) \u279E ['hi', 'admin']\n# total_match(['hi', 'admin'], ['hI',\
  \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n# total_match(['4'], ['1', '2', '3', '4',\
  \ '5']) \u279E ['4']\ndef total_match(lst1, lst2)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_total_match\n\
  \    candidate = method(:total_match)\n    assert_equal([], candidate.call([], []))\n\
  \    assert_equal([\"hi\", \"hi\"], candidate.call([\"hi\", \"admin\"], [\"hi\"\
  , \"hi\"]))\n    assert_equal([\"hi\", \"admin\"], candidate.call([\"hi\", \"admin\"\
  ], [\"hi\", \"hi\", \"admin\", \"project\"]))\n    assert_equal([\"4\"], candidate.call([\"\
  4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]))\n    assert_equal([\"hI\", \"Hi\"],\
  \ candidate.call([\"hi\", \"admin\"], [\"hI\", \"Hi\"]))\n    assert_equal([\"hI\"\
  , \"hi\", \"hi\"], candidate.call([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]))\n\
  \    assert_equal([\"hi\", \"admin\"], candidate.call([\"hi\", \"admin\"], [\"hI\"\
  , \"hi\", \"hii\"]))\n    assert_equal([], candidate.call([], [\"this\"]))\n   \
  \ assert_equal([], candidate.call([\"this\"], []))\n  end\nend\n"
completions: ["\treturn lst1 if lst1.join.length < lst2.join.length\n  lst2\nend\n\
    p total_match(['hi', 'admin'], ['hI', 'Hi'])\np total_match(['hi', 'admin'], ['hi',\
    \ 'hi', 'admin', 'project'])\np total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\n\
    p total_match(['4'], ['1', '2', '3', '4', '5'])", "  lst1.join.length < lst2.join.length\
    \ ? lst1 : lst2\nend", "    char1 = 0\n    char2 = 0\n    lst1.each {|str| char1\
    \ += str.length}\n    lst2.each {|str| char2 += str.length}\n    if char1 < char2\n\
    \        return lst1\n    elsif char2 < char1\n        return lst2\n    else\n\
    \        return lst1\n    end\nend\nputs total_match(['hi', 'admin'], ['hI', 'Hi'])\n\
    puts total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\nputs total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi'])\nputs total_match(['4'], ['1', '2', '3', '4',\
    \ '5'])", "  return lst1 if lst1.join.length < lst2.join.length\n  return lst2\
    \ if lst2.join.length < lst1.join.length\n  lst1\nend", "    lst1_length = 0\n\
    \    lst2_length = 0\n    lst1.each {|i| lst1_length += i.length}\n    lst2.each\
    \ {|i| lst2_length += i.length}\n    if lst1_length < lst2_length\n        return\
    \ lst1\n    elsif lst1_length > lst2_length\n        return lst2\n    else\n \
    \       return lst1\n    end\nend\nputs total_match(['hi', 'admin'], ['hI', 'Hi'])\n\
    puts total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\nputs total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi'])\nputs total_match(['4'], ['1', '2', '3', '4',\
    \ '5'])", "    total_chars_1 = lst1.join.length\n    total_chars_2 = lst2.join.length\n\
    \    if total_chars_1 == total_chars_2\n        return lst1\n    elsif total_chars_1\
    \ < total_chars_2\n        return lst1\n    else\n        return lst2\n    end\n\
    end\nputs total_match(['hi', 'admin'], ['hI', 'Hi'])\nputs total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project'])\nputs total_match(['hi', 'admin'],\
    \ ['hI', 'hi', 'hi'])\nputs total_match(['4'], ['1', '2', '3', '4', '5'])", " \
    \ sum1 = 0\n  sum2 = 0\n  if lst1.empty?\n    lst1\n  else\n    lst1.each {|x|\
    \ sum1 += x.length}\n    lst2.each {|x| sum2 += x.length}\n    if sum1 < sum2\n\
    \      lst1\n    else\n      lst2\n    end\n  end\nend", "    len1=0\n    len2=0\n\
    \    for i in 0...lst1.length do\n        len1+=lst1[i].length\n    end\n    for\
    \ i in 0...lst2.length do\n        len2+=lst2[i].length\n    end\n    if len1>len2\n\
    \        return lst2\n    elsif len1<len2\n        return lst1\n    else\n   \
    \     return lst1\n    end\nend\nputs total_match(['4'], ['1', '2', '3', '4',\
    \ '5'])", "    lst1.each {|str| str.downcase!}\n    lst2.each {|str| str.downcase!}\n\
    \    return lst1 if lst1.size == lst2.size\n    return lst1 if lst1.size < lst2.size\n\
    \    return lst2 if lst2.size < lst1.size\nend\np total_match(['hi', 'admin'],\
    \ ['hI', 'Hi'])\np total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n\
    p total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\np total_match(['4'], ['1',\
    \ '2', '3', '4', '5'])", "    if lst1.join.length <= lst2.join.length\n      \
    \  return lst1\n    else\n        return lst2\n    end\nend\nputs total_match(['hi',\
    \ 'admin'], ['hI', 'Hi'])\nputs total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project'])\nputs total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\nputs total_match(['4'],\
    \ ['1', '2', '3', '4', '5'])", "  if lst1.join.length > lst2.join.length\n   \
    \ lst2\n  else\n    lst1\n  end\nend\ntotal_match(['4'], ['1', '2', '3', '4',\
    \ '5'])", "    if lst1.join(\"\").length > lst2.join(\"\").length\n        return\
    \ lst2\n    else\n        return lst1\n    end\nend\nputs total_match(['hi', 'admin'],\
    \ ['hI', 'Hi'])\nputs total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n\
    puts total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\nputs total_match(['4'],\
    \ ['1', '2', '3', '4', '5'])", "  lst1_total = lst1.inject(0) {|sum, str| sum\
    \ + str.length}\n  lst2_total = lst2.inject(0) {|sum, str| sum + str.length}\n\
    \  if lst1_total < lst2_total\n    return lst1\n  elsif lst1_total > lst2_total\n\
    \    return lst2\n  else\n    return lst1\n  end\nend", "  if lst1.join.length\
    \ < lst2.join.length\n    lst1\n  else\n    lst2\n  end\nend\ntotal_match(['hi',\
    \ 'admin'], ['hI', 'Hi'])", "  count1 = lst1.map {|e| e.length}.sum\n  count2\
    \ = lst2.map {|e| e.length}.sum\n  if count1 == count2\n    return lst1\n  elsif\
    \ count1 < count2\n    return lst1\n  else\n    return lst2\n  end\nend", "  \
    \  if lst1.join.length > lst2.join.length\n        return lst2\n    else\n   \
    \     return lst1\n    end\nend\ntotal_match(['hi', 'admin'], ['hI', 'Hi'])",
  "    if lst1.join(\"\").length < lst2.join(\"\").length\n        return lst1\n \
    \   elsif lst1.join(\"\").length > lst2.join(\"\").length\n        return lst2\n\
    \    else\n        return lst1\n    end\nend", "  lst1_count = 0\n  lst2_count\
    \ = 0\n  lst1.each {|i| lst1_count += i.length}\n  lst2.each {|i| lst2_count +=\
    \ i.length}\n  if lst1_count < lst2_count\n    return lst1\n  elsif lst1_count\
    \ > lst2_count\n    return lst2\n  else\n    return lst1\n  end\nend", "    lst1_len\
    \ = 0\n    lst2_len = 0\n    lst1.each {|x| lst1_len += x.length}\n    lst2.each\
    \ {|x| lst2_len += x.length}\n    if lst1_len < lst2_len\n        return lst1\n\
    \    elsif lst1_len > lst2_len\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend", "\tlst1.length > lst2.length ? lst2 : lst1\nend", "  total1\
    \ = lst1.map{|x| x.length}.sum\n  total2 = lst2.map{|x| x.length}.sum\n  total1\
    \ < total2 ? lst1 : lst2\nend\np total_match(['hi', 'admin'], ['hI', 'Hi']) ==\
    \ ['hI', 'Hi']\np total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ == ['hi', 'admin']\np total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI',\
    \ 'hi', 'hi']\np total_match(['4'], ['1', '2', '3', '4', '5']) == ['4']", "  \
    \  sum_lst1 = lst1.map {|el| el.length}.sum\n    sum_lst2 = lst2.map {|el| el.length}.sum\n\
    \    if sum_lst1 == sum_lst2\n        return lst1\n    end\n    if sum_lst1 <\
    \ sum_lst2\n        return lst1\n    else\n        return lst2\n    end\nend\n\
    puts total_match(['hi', 'admin'], ['hI', 'Hi'])\nputs total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project'])\nputs total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi'])\nputs total_match(['4'], ['1', '2', '3', '4', '5'])", "    if lst1.join.length\
    \ <= lst2.join.length\n        return lst1\n    else\n        return lst2\n  \
    \  end\nend\nputs total_match(['hi', 'admin'], ['hI', 'Hi'])\nputs total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project'])\nputs total_match(['hi', 'admin'],\
    \ ['hI', 'hi', 'hi'])\nputs total_match(['4'], ['1', '2', '3', '4', '5'])", " \
    \ total_length_1 = 0\n  total_length_2 = 0\n  lst1.each {|word| total_length_1\
    \ += word.length}\n  lst2.each {|word| total_length_2 += word.length}\n  if total_length_1\
    \ == total_length_2\n    return lst1\n  elsif total_length_1 < total_length_2\n\
    \    return lst1\n  else \n    return lst2\n  end\nend", "\tlist1 = lst1.join.length\n\
    \tlist2 = lst2.join.length\n\tif list1 <= list2\n\t\treturn lst1\n\telse\n\t\t\
    return lst2\n\tend\nend", "  if lst1.sum{|x| x.size} > lst2.sum{|x| x.size}\n\
    \    return lst2\n  else\n    return lst1\n  end\nend", "    if lst1.reduce(0)\
    \ {|sum, el| sum + el.length} < lst2.reduce(0) {|sum, el| sum + el.length}\n \
    \       return lst1\n    else\n        return lst2\n    end\nend", "\nend", "\t\
    if lst1.length == lst2.length\n\t\treturn lst1\n\telsif lst1.length > lst2.length\n\
    \t\treturn lst2\n\telse\n\t\treturn lst1\n\tend\nend", "    if lst1.join.length\
    \ < lst2.join.length\n        lst1\n    else\n        lst2\n    end\nend", " \
    \   total_length_1 = total_length(lst1)\n    total_length_2 = total_length(lst2)\n\
    \    if total_length_1 < total_length_2\n        return lst1\n    else\n     \
    \   return lst2\n    end\nend", "  s1 = lst1.join.size\n  s2 = lst2.join.size\n\
    \  s1 > s2 ? lst2 : s1 < s2 ? lst1 : lst1\nend\np total_match(['hi', 'admin'],\
    \ ['hI', 'Hi']) \np total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \np total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \np total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) ", "\tlst1.join.length < lst2.join.length ? lst1\
    \ : lst2\nend", "\tif lst1.join.length > lst2.join.length\n\t\treturn lst2\n\t\
    else\n\t\treturn lst1\n\tend\nend\nputs total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ #\u279E ['hI', 'Hi']\nputs total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) #\u279E ['hi', 'admin']\nputs total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) #\u279E ['hI', 'hi', 'hi']\nputs total_match(['4'], ['1', '2',\
    \ '3', '4', '5']) #\u279E ['4']", "\tsum1 = lst1.map{|x| x.length}.sum\n\tsum2\
    \ = lst2.map{|x| x.length}.sum\n\tif sum1 == sum2\n\t\treturn lst1\n\telsif sum1\
    \ > sum2\n\t\treturn lst2\n\telse\n\t\treturn lst1\n\tend\nend\np total_match(['4'],\
    \ ['1', '2', '3', '4', '5'])\np total_match(['hi', 'admin'], ['hI', 'Hi'])\np\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\np total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi'])\np total_match([], [])", "  lst1.join.length >\
    \ lst2.join.length ? lst2 : lst1\nend\ntotal_match(['4'], ['1', '2', '3', '4',\
    \ '5'])", "  lst1_count = lst1.join.size\n  lst2_count = lst2.join.size\n  if\
    \ lst1_count == lst2_count\n    lst1\n  elsif lst1_count < lst2_count\n    lst1\n\
    \  else\n    lst2\n  end\nend\np total_match(['hi', 'admin'], ['hI', 'Hi'])",
  "  if lst1.join('').length > lst2.join('').length\n    return lst2\n  else\n   \
    \ return lst1\n  end\nend\nputs total_match(['4'], ['1', '2', '3', '4', '5'])",
  "  if lst1.join(\"\").length < lst2.join(\"\").length\n    lst1\n  else\n    lst2\n\
    \  end\nend", "    count1 = 0\n    count2 = 0\n    lst1.each do |item|\n     \
    \   count1 += item.length\n    end\n    lst2.each do |item|\n        count2 +=\
    \ item.length\n    end\n    if count1 > count2\n        return lst2\n    elsif\
    \ count1 < count2\n        return lst1\n    else\n        return lst1\n    end\n\
    end", "  if lst1.join.length == lst2.join.length\n    lst1\n  elsif lst1.join.length\
    \ > lst2.join.length\n    lst2\n  else\n    lst1\n  end\nend", "\tif lst1.join('').length\
    \ > lst2.join('').length\n\t\treturn lst2\n\telsif lst1.join('').length < lst2.join('').length\n\
    \t\treturn lst1\n\telse\n\t\treturn lst1\n\tend\nend\nputs total_match(['hi',\
    \ 'admin'], ['hI', 'Hi'])\nputs total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project'])\nputs total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\nputs total_match(['4'],\
    \ ['1', '2', '3', '4', '5'])", "  lst1_count = lst1.join.length\n  lst2_count\
    \ = lst2.join.length\n  if lst1_count > lst2_count\n    return lst2\n  elsif lst1_count\
    \ < lst2_count\n    return lst1\n  else\n    return lst1\n  end\nend", "    total_string_length_one\
    \ = lst1.join.length\n    total_string_length_two = lst2.join.length\n    if total_string_length_one\
    \ < total_string_length_two\n        return lst1\n    elsif total_string_length_one\
    \ > total_string_length_two\n        return lst2\n    else\n        return lst1\n\
    \    end\nend\np total_match(['hi', 'admin'], ['hI', 'Hi'])\np total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project'])\np total_match(['hi', 'admin'],\
    \ ['hI', 'hi', 'hi'])\np total_match(['4'], ['1', '2', '3', '4', '5'])", "  sum1\
    \ = 0\n  sum2 = 0\n  lst1.each do |e|\n    sum1 += e.length\n  end\n  lst2.each\
    \ do |e|\n    sum2 += e.length\n  end\n  if sum1 < sum2\n    return lst1\n  elsif\
    \ sum1 > sum2\n    return lst2\n  else\n    return lst1\n  end\nend", "    if\
    \ lst1.join.length > lst2.join.length\n        return lst2\n    elsif lst1.join.length\
    \ < lst2.join.length\n        return lst1\n    else\n        return lst1\n   \
    \ end\nend", "\ta = lst1.join.length\n\tb = lst2.join.length\n\tif a < b\n\t\t\
    return lst1\n\telsif a > b\n\t\treturn lst2\n\telse \n\t\treturn lst1\n\tend\n\
    end", "  return lst1 if lst1.length <= lst2.length\n  return lst2 if lst2.length\
    \ <= lst1.length\nend", "  first = lst1.join.length\n  second = lst2.join.length\n\
    \  if first > second\n    return lst2\n  elsif first < second\n    return lst1\n\
    \  else\n    return lst1\n  end\nend", "  if lst1.join.length > lst2.join.length\n\
    \    lst2\n  else\n    lst1\n  end\nend", "\ttotal1 = 0\n\ttotal2 = 0\n\tlst1.each\
    \ do |char|\n\t\ttotal1 += char.length\n\tend\n\tlst2.each do |char|\n\t\ttotal2\
    \ += char.length\n\tend\n\tif total1 < total2\n\t\treturn lst1\n\telsif total2\
    \ < total1\n\t\treturn lst2\n\telse\n\t\treturn lst1\n\tend\nend\np total_match(['4'],\
    \ ['1', '2', '3', '4', '5'])", "    if lst1.join.length > lst2.join.length\n \
    \       return lst2\n    else\n        return lst1\n    end\nend\nputs total_match(['hi',\
    \ 'admin'], ['hI', 'Hi'])\nputs total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project'])\nputs total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\nputs total_match(['4'],\
    \ ['1', '2', '3', '4', '5'])", "  if lst1.join.length < lst2.join.length\n   \
    \ return lst1\n  elsif lst1.join.length > lst2.join.length\n    return lst2\n\
    \  else\n    return lst1\n  end\nend\nputs total_match(['hi', 'admin'], ['hI',\
    \ 'Hi'])\nputs total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n\
    puts total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\nputs total_match(['4'],\
    \ ['1', '2', '3', '4', '5'])", "    a = lst1.join.size\n    b = lst2.join.size\n\
    \    a < b ? lst1 : lst2\nend", "  lst1_count = lst1.join(\"\").length\n  lst2_count\
    \ = lst2.join(\"\").length\n  lst1_count < lst2_count ? lst1 : lst2\nend\np total_match(['hi',\
    \ 'admin'], ['hI', 'Hi'])\np total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \np total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \np total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) ", "    if lst1.join.length < lst2.join.length\n\
    \        return lst1\n    elsif lst1.join.length > lst2.join.length\n        return\
    \ lst2\n    else\n        return lst1\n    end\nend\nputs total_match(['hi', 'admin'],\
    \ ['hI', 'Hi'])\nputs total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n\
    puts total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\nputs total_match(['4'],\
    \ ['1', '2', '3', '4', '5'])", "  sum_lst1 = lst1.join.length\n  sum_lst2 = lst2.join.length\n\
    \  return lst1 if sum_lst1 == sum_lst2\n  return lst1 if sum_lst1 < sum_lst2\n\
    \  return lst2 if sum_lst1 > sum_lst2\nend\np total_match(['hi', 'admin'], ['hI',\
    \ 'Hi']) #\u279E ['hI', 'Hi']\np total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) #\u279E ['hi', 'admin']\np total_match(['hi', 'admin'], ['hI', 'hi',\
    \ 'hi']) #\u279E ['hI', 'hi', 'hi']\np total_match(['4'], ['1', '2', '3', '4',\
    \ '5']) #\u279E ['4']", "    if lst1.join.length < lst2.join.length\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend", "\ta1 = lst1.join().size\n\
    \ta2 = lst2.join().size\n\ta1 == a2 ? lst1 : a1 < a2 ? lst1 : lst2\nend", "  \
    \  if lst1.join.length > lst2.join.length\n        return lst2\n    elsif lst1.join.length\
    \ < lst2.join.length\n        return lst1\n    else\n        return lst1\n   \
    \ end\nend\nputs total_match(['hi', 'admin'], ['hI', 'Hi'])\nputs total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project'])\nputs total_match(['hi', 'admin'],\
    \ ['hI', 'hi', 'hi'])\nputs total_match(['4'], ['1', '2', '3', '4', '5'])", " \
    \   len1 = 0\n    len2 = 0\n    lst1.each do |x|\n        len1 += x.length\n \
    \   end\n    lst2.each do |x|\n        len2 += x.length\n    end\n    len1 < len2\
    \ ? lst1 : lst2\nend\nputs total_match(['hi', 'admin'], ['hI', 'Hi'])\nputs total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project'])\nputs total_match(['hi', 'admin'],\
    \ ['hI', 'hi', 'hi'])\nputs total_match(['4'], ['1', '2', '3', '4', '5'])", " \
    \ sum1 = lst1.join.length\n  sum2 = lst2.join.length\n  if sum1 < sum2\n    return\
    \ lst1\n  elsif sum1 > sum2\n    return lst2\n  else\n    return lst1\n  end\n\
    end\nputs total_match(['4'], ['1', '2', '3', '4', '5']) #\u279E ['4']\nputs total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) #\u279E ['hI', 'hi', 'hi']\nputs total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) #\u279E ['hi', 'admin']\nputs total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) #\u279E ['hI', 'Hi']\nputs total_match([], []) #\u279E\
    \ []", "  if lst1.join.length < lst2.join.length\n    lst1\n  else\n    lst2\n\
    \  end\nend", "  lst1.sum {|x| x.length} < lst2.sum {|x| x.length} ? lst2 : lst1\n\
    end", "    counter = 0\n    counter2 = 0\n    lst1.each do |i|\n        counter\
    \ += i.length\n    end\n    lst2.each do |i|\n        counter2 += i.length\n \
    \   end\n    if counter < counter2\n        return lst1\n    elsif counter > counter2\n\
    \        return lst2\n    else\n        return lst1\n    end\nend", "  lst1.join(\"\
    \").length < lst2.join(\"\").length ? lst1 : lst2\nend\np total_match(['hi', 'admin'],\
    \ ['hI', 'Hi']) #\u279E ['hI', 'Hi']\np total_match(['hi', 'admin'], ['hi', 'hi',\
    \ 'admin', 'project']) #\u279E ['hi', 'admin']\np total_match(['hi', 'admin'],\
    \ ['hI', 'hi', 'hi']) #\u279E ['hI', 'hi', 'hi']\np total_match(['4'], ['1', '2',\
    \ '3', '4', '5']) #\u279E ['4']", "  if lst1.empty? && lst2.empty?\n    return\
    \ []\n  end\n  chars_sum_lst1 = lst1.map{|word| word.size}.sum\n  chars_sum_lst2\
    \ = lst2.map{|word| word.size}.sum\n  if chars_sum_lst1 <= chars_sum_lst2\n  \
    \  return lst1\n  end\n  return lst2\nend", "\tlst1_size = lst1.map{|w| w.size}.sum\n\
    \tlst2_size = lst2.map{|w| w.size}.sum\n\tif lst1_size == lst2_size \n\t\tlst1\n\
    \telsif lst1_size < lst2_size\n\t\tlst1\n\telse\n\t\tlst2\n\tend\nend\np total_match(['hi',\
    \ 'admin'], ['hI', 'Hi'])\np total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \np total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \np total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) ", "  if lst1.join.length == lst2.join.length\n \
    \   return lst1\n  elsif lst1.join.length > lst2.join.length\n    return lst2\n\
    \  else\n    return lst1\n  end\nend", "\tif lst1.join('').length < lst2.join('').length\n\
    \t\treturn lst1\n\telsif lst1.join('').length > lst2.join('').length\n\t\treturn\
    \ lst2\n\telse\n\t\treturn lst1\n\tend\nend", "  lst1.length + lst1.join.length\
    \ <= lst2.length + lst2.join.length ? lst1 : lst2\nend", "  sum_lst1 = 0\n  sum_lst2\
    \ = 0\n  if lst1.empty? && lst2.empty?\n    return []\n  end\n  lst1.each do |i|\n\
    \    sum_lst1 += i.length\n  end\n  lst2.each do |i|\n    sum_lst2 += i.length\n\
    \  end\n  if sum_lst1 < sum_lst2\n    return lst1\n  else\n    return lst2\n \
    \ end\nend\nputs total_match(['hi', 'admin'], ['hI', 'Hi'])\nputs total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project'])\nputs total_match(['hi', 'admin'],\
    \ ['hI', 'hi', 'hi'])\nputs total_match(['4'], ['1', '2', '3', '4', '5'])\nputs\
    \ total_match([], [])", "\tlst1.length <= lst2.length ? lst1 : lst2\nend", " \
    \   a = lst1.map {|x| x.length}.sum\n    b = lst2.map {|x| x.length}.sum\n   \
    \ if a == b\n        return lst1\n    elsif a > b\n        return lst2\n    else\n\
    \        return lst1\n    end\nend\nputs total_match(['4'], ['1', '2', '3', '4',\
    \ '5'])", "\tif lst1.join.length < lst2.join.length\n\t\tlst1\n\telse\n\t\tlst2\n\
    \tend\nend\np total_match(['hi', 'admin'], ['hI', 'Hi'])\np total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project'])\np total_match(['hi', 'admin'],\
    \ ['hI', 'hi', 'hi'])\np total_match(['4'], ['1', '2', '3', '4', '5'])", end,
  "  lst1_char = lst1.join(\"\").length\n  lst2_char = lst2.join(\"\").length\n  if\
    \ lst1_char < lst2_char\n    return lst1\n  elsif lst1_char > lst2_char\n    return\
    \ lst2\n  else\n    return lst1\n  end\nend\np total_match(['hi', 'admin'], ['hI',\
    \ 'Hi'])", "    return lst1 if lst1.join.length == lst2.join.length\n    lst1.join.length\
    \ < lst2.join.length ? lst1 : lst2\nend\np total_match(['hi', 'admin'], ['hI',\
    \ 'Hi'])\np total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\np\
    \ total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\np total_match(['4'], ['1',\
    \ '2', '3', '4', '5'])", "    sum1 = 0\n    sum2 = 0\n    lst1.each {|str| sum1\
    \ += str.length}\n    lst2.each {|str| sum2 += str.length}\n    sum1 < sum2 ?\
    \ lst1 : lst2\nend\np total_match(['hi', 'admin'], ['hI', 'Hi']) \np total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \np total_match(['hi', 'admin'],\
    \ ['hI', 'hi', 'hi']) \np total_match(['4'], ['1', '2', '3', '4', '5']) ", " \
    \ lst1.join.length < lst2.join.length ? lst1 : lst2\nend\np total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \np total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \np total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \np total_match(['4'],\
    \ ['1', '2', '3', '4', '5'])", "  sum1 = 0\n  sum2 = 0\n  lst1.each do |i|\n \
    \   sum1 = sum1 + i.length\n  end\n  lst2.each do |i|\n    sum2 = sum2 + i.length\n\
    \  end\n  if sum1 < sum2\n    return lst1\n  elsif sum1 > sum2\n    return lst2\n\
    \  else\n    return lst1\n  end\nend", "  lst1.join.length > lst2.join.length\
    \ ? lst2 : lst1\nend\np total_match(['hi', 'admin'], ['hI', 'Hi'])\np total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project'])\np total_match(['hi', 'admin'],\
    \ ['hI', 'hi', 'hi'])\np total_match(['4'], ['1', '2', '3', '4', '5'])", "  if\
    \ lst1.join.length < lst2.join.length\n    return lst1\n  elsif lst1.join.length\
    \ > lst2.join.length\n    return lst2\n  else\n    return lst1\n  end\nend\nputs\
    \ total_match(['4'], ['1', '2', '3', '4', '5'])", "    if lst1.join.length < lst2.join.length\n\
    \        return lst1\n    elsif lst1.join.length > lst2.join.length\n        return\
    \ lst2\n    else\n        return lst1\n    end\nend\nputs total_match(['4'], ['1',\
    \ '2', '3', '4', '5'])", "  sum1 = 0\n  sum2 = 0\n  for i in lst1\n    sum1 +=\
    \ i.length\n  end\n  for i in lst2\n    sum2 += i.length\n  end\n  if sum1 > sum2\n\
    \    return lst2\n  else\n    return lst1\n  end\nend", "  sum1 = lst1.join.size\n\
    \  sum2 = lst2.join.size\n  return lst1 if sum1 == sum2\n  if sum1 > sum2\n  \
    \  lst2\n  else\n    lst1\n  end\nend", "    new_lst1 = lst1.join(\"\").length\n\
    \    new_lst2 = lst2.join(\"\").length\n    new_lst1 > new_lst2 ? lst2 : lst1\n\
    end\np total_match(['hi', 'admin'], ['hI', 'Hi']) \np total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \np total_match(['hi', 'admin'], ['hI', 'hi',\
    \ 'hi']) \np total_match(['4'], ['1', '2', '3', '4', '5']) ", "  lst1.length <\
    \ lst2.length ? lst1 : lst2\nend", "\tif lst1.size < lst2.size\n\t\tlst1\n\telsif\
    \ lst1.size > lst2.size\n\t\tlst2\n\telse\n\t\tlst1\n\tend\nend\np total_match(['hi',\
    \ 'admin'], ['hI', 'Hi'])\np total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project'])\np total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\np total_match(['4'],\
    \ ['1', '2', '3', '4', '5'])", "    if lst1.join('').length < lst2.join('').length\n\
    \        return lst1\n    else \n        return lst2\n    end\nend", "  lst1.join.length\
    \ == lst2.join.length ? lst1 : lst1.join.length < lst2.join.length ? lst1 : lst2\n\
    end\np total_match(['4'], ['1', '2', '3', '4', '5'])\np total_match(['hi', 'admin'],\
    \ ['hI', 'Hi'])\np total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n\
    p total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\np total_match([], [])", " \
    \ firstTotal = 0\n  secondTotal = 0\n  lst1.each do |word|\n    firstTotal +=\
    \ word.length\n  end\n  lst2.each do |word|\n    secondTotal += word.length\n\
    \  end\n  if firstTotal < secondTotal\n    lst1\n  elsif secondTotal < firstTotal\n\
    \    lst2\n  else\n    lst1\n  end\nend", "\tsum1 = lst1.join.length\n\tsum2 =\
    \ lst2.join.length\n\tsum1 > sum2 ? lst2 : lst1\nend\np total_match(['hi', 'admin'],\
    \ ['hI', 'Hi'])\np total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n\
    p total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\np total_match(['4'], ['1',\
    \ '2', '3', '4', '5'])", "\tif lst1.join.length > lst2.join.length\n\t\treturn\
    \ lst2\n\telse\n\t\treturn lst1\n\tend\nend\nputs total_match(['hi', 'admin'],\
    \ ['hI', 'Hi'])", "  lst1.sum{|e| e.size} > lst2.sum{|e| e.size} ? lst2 : lst1\n\
    end", "    if lst1.sum(&:length) < lst2.sum(&:length)\n        return lst1\n \
    \   elsif lst1.sum(&:length) > lst2.sum(&:length)\n        return lst2\n    else\n\
    \        return lst1\n    end\nend\np total_match(['hi', 'admin'], ['hI', 'Hi'])\n\
    p total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\np total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi'])\np total_match(['4'], ['1', '2', '3', '4', '5'])",
  "    lst1.join.length < lst2.join.length ? lst1 : lst2\nend", "    if lst1.join.length\
    \ < lst2.join.length\n      return lst1\n    elsif lst1.join.length > lst2.join.length\n\
    \      return lst2\n    else\n      return lst1\n    end\nend", "\tsum1 = lst1.join.length\n\
    \tsum2 = lst2.join.length\n\tsum1 < sum2 ? lst1 : sum1 > sum2 ? lst2 : lst1\n\
    end", "    len1 = lst1.map{|x| x.length}.sum\n    len2 = lst2.map{|x| x.length}.sum\n\
    \    if len1 > len2\n        return lst2\n    elsif len1 < len2\n        return\
    \ lst1\n    else\n        return lst1\n    end\nend", "  lst1.join.length > lst2.join.length\
    \ ? lst2 : lst1\nend", "    lst_1_count = 0\n    lst_2_count = 0\n    lst1.each\
    \ do |item|\n        lst_1_count += item.length\n    end\n    lst2.each do |item|\n\
    \        lst_2_count += item.length\n    end\n    if lst_1_count > lst_2_count\n\
    \        return lst2\n    else\n        return lst1\n    end\nend", "  return\
    \ lst1 if lst1.size == lst2.size\n  lst1.map { |e| e.size }.sum < lst2.map { |e|\
    \ e.size }.sum ? lst1 : lst2\nend", "  if lst1.join('').length < lst2.join('').length\n\
    \    lst1\n  else\n    lst2\n  end\nend", "    lst1_length = 0\n    lst2_length\
    \ = 0\n    lst1.each do |item|\n        lst1_length += item.length\n    end\n\
    \    lst2.each do |item|\n        lst2_length += item.length\n    end\n    if\
    \ lst1_length < lst2_length\n        return lst1\n    else\n        return lst2\n\
    \    end\nend", "  # if lst1.size == lst2.size\n  #   lst1\n  # else\n  #   return\
    \ lst1 if lst1.size < lst2.size\n  #   lst2\n  # end\n  lst1.size == lst2.size\
    \ ? lst1 : (lst1.size < lst2.size ? lst1 : lst2)\nend", "    if lst1.join.length\
    \ < lst2.join.length\n        return lst1\n    else\n        return lst2\n   \
    \ end\nend\nputs total_match(['hi', 'admin'], ['hI', 'Hi'])\nputs total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project'])\nputs total_match(['hi', 'admin'],\
    \ ['hI', 'hi', 'hi'])\nputs total_match(['4'], ['1', '2', '3', '4', '5'])", " \
    \   if lst1.join.length == lst2.join.length\n      return lst1\n    elsif lst1.join.length\
    \ > lst2.join.length\n      return lst2\n    else\n      return lst1\n    end\n\
    end\nputs total_match(['hi', 'admin'], ['hI', 'Hi'])\nputs total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project'])\nputs total_match(['hi', 'admin'],\
    \ ['hI', 'hi', 'hi'])\nputs total_match(['4'], ['1', '2', '3', '4', '5'])", " \
    \   \nend", "  lst1_total = lst1.map{|w| w.length}.sum\n  lst2_total = lst2.map{|w|\
    \ w.length}.sum\n  lst1_total > lst2_total ? lst2 : lst1\nend\np total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) #\u279E ['hI', 'Hi']\np total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) #\u279E ['hi', 'admin']\np total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) #\u279E ['hI', 'hi', 'hi']\np total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) #\u279E ['4']", "  lst1_len = lst1.join(\"\").length\n\
    \  lst2_len = lst2.join(\"\").length\n  lst1_len > lst2_len ? lst2 : lst1\nend",
  "\tsum_lst1 = 0\n\tsum_lst2 = 0\n\tlst1.each {|x| sum_lst1+=x.length}\n\tlst2.each\
    \ {|x| sum_lst2+=x.length}\n\tif sum_lst1 < sum_lst2\n\t\treturn lst1\n\telsif\
    \ sum_lst1 > sum_lst2\n\t\treturn lst2\n\telse\n\t\treturn lst1\n\tend\nend\n\
    p total_match(['hi', 'admin'], ['hI', 'Hi'])\np total_match(['hi', 'admin'], ['hi',\
    \ 'hi', 'admin', 'project'])\np total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\n\
    p total_match(['4'], ['1', '2', '3', '4', '5'])\np total_match([], [])", "  if\
    \ lst1.join(\"\").length > lst2.join(\"\").length\n    return lst2\n  else\n \
    \   return lst1\n  end\nend", "  if lst1.join.length == lst2.join.length\n   \
    \ return lst1\n  elsif lst1.join.length > lst2.join.length\n    return lst2\n\
    \  else \n    return lst1\n  end\nend", "\tif lst1.join.length < lst2.join.length\n\
    \t\treturn lst1\n\telsif lst1.join.length > lst2.join.length\n\t\treturn lst2\n\
    \telse\n\t\treturn lst1\n\tend\nend\np total_match(['hi', 'admin'], ['hI', 'Hi'])",
  "\tif lst1.map {|x| x.length}.sum == lst2.map {|x| x.length}.sum\n\t\treturn lst1\n\
    \telsif lst1.map {|x| x.length}.sum > lst2.map {|x| x.length}.sum\n\t\treturn\
    \ lst2\n\telse\n\t\treturn lst1\n\tend\nend\np total_match(['hi', 'admin'], ['hI',\
    \ 'Hi'])\np total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\np\
    \ total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\np total_match(['4'], ['1',\
    \ '2', '3', '4', '5'])", "  total_count = 0\n  lst1.each {|str| total_count +=\
    \ str.length}\n  total_count2 = 0\n  lst2.each {|str| total_count2 += str.length}\n\
    \  if total_count < total_count2\n    return lst1\n  elsif total_count > total_count2\n\
    \    return lst2\n  else\n    return lst1\n  end\nend\nputs total_match(['hi',\
    \ 'admin'], ['hI', 'Hi'])\nputs total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project'])\nputs total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\nputs total_match(['4'],\
    \ ['1', '2', '3', '4', '5'])", "  count1 = lst1.join.size\n  count2 = lst2.join.size\n\
    \  if count1 < count2\n    return lst1\n  elsif count1 > count2\n    return lst2\n\
    \  else\n    return lst1\n  end\nend\np total_match(['hi', 'admin'], ['hI', 'Hi'])\n\
    p total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\np total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi'])\np total_match(['4'], ['1', '2', '3', '4', '5'])",
  "    total1 = 0\n    total2 = 0\n    lst1.each {|x| total1 += x.length}\n    lst2.each\
    \ {|x| total2 += x.length}\n    total1 < total2 ? lst1 : lst2\nend", "  c1 = lst1.join.length\n\
    \  c2 = lst2.join.length\n  c1 > c2 ? lst2 : c1 < c2 ? lst1 : lst1\nend\np total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\np total_match(['hi', 'admin'], ['hi',\
    \ 'hi', 'admin', 'project']) == ['hi', 'admin']\np total_match(['hi', 'admin'],\
    \ ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\np total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) == ['4']", "  lst1_length = lst1.join('').length\n  lst2_length =\
    \ lst2.join('').length\n  if lst1_length < lst2_length\n    lst1\n  elsif lst1_length\
    \ > lst2_length\n    lst2\n  else\n    lst1\n  end\nend\np total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \np total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \np total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \np total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) ", "    lst1_total = 0\n    lst2_total = 0\n    lst1.each\
    \ do |str|\n        lst1_total += str.length\n    end\n    lst2.each do |str|\n\
    \        lst2_total += str.length\n    end\n    if lst1_total < lst2_total\n \
    \       return lst1\n    elsif lst2_total < lst1_total\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nputs total_match(['hi', 'admin'],\
    \ ['hI', 'Hi']) # ['hI', 'Hi']\nputs total_match(['hi', 'admin'], ['hi', 'hi',\
    \ 'admin', 'project']) # ['hi', 'admin']\nputs total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) # ['hI', 'hi', 'hi']\nputs total_match(['4'], ['1', '2', '3', '4',\
    \ '5']) # ['4']\nputs total_match([], []) # []", "\treturn lst1 if lst1.join.length\
    \ == lst2.join.length\n\tlen1 = lst1.join.length\n\tlen2 = lst2.join.length\n\t\
    len1 < len2 ? lst1 : lst2\nend", "\nend", "  lst1_sum = lst1.map {|x| x.length}.sum\n\
    \  lst2_sum = lst2.map {|x| x.length}.sum\n  lst1_sum < lst2_sum ? lst1 : lst2\n\
    end", "  lst1_chars = lst1.map{|word| word.length}.sum\n  lst2_chars = lst2.map{|word|\
    \ word.length}.sum\n  if lst1_chars < lst2_chars\n    return lst1\n  elsif lst1_chars\
    \ > lst2_chars\n    return lst2\n  else\n    return lst1\n  end\nend\np total_match(['hi',\
    \ 'admin'], ['hI', 'Hi'])\np total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project'])\np total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\np total_match(['4'],\
    \ ['1', '2', '3', '4', '5'])\np total_match([], [])", "    sum1 = 0\n    sum2\
    \ = 0\n    lst1.each {|x| sum1 += x.length}\n    lst2.each {|x| sum2 += x.length}\n\
    \    return lst1 if sum1 == sum2\n    return lst1 if sum1 < sum2\n    return lst2\
    \ if sum2 < sum1\nend", "  total_of_lst1 = total_of_lst2 = 0\n  lst1.each { |x|\
    \ total_of_lst1 += x.length }\n  lst2.each { |x| total_of_lst2 += x.length }\n\
    \  if total_of_lst1 > total_of_lst2\n    return lst2\n  else\n    return lst1\n\
    \  end\nend", "    if lst1.length < lst2.length\n        return lst1\n    elsif\
    \ lst1.length > lst2.length\n        return lst2\n    else\n        return lst1\n\
    \    end\nend\np total_match(['hi', 'admin'], ['hI', 'Hi'])\np total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project'])\np total_match(['hi', 'admin'],\
    \ ['hI', 'hi', 'hi'])\np total_match(['4'], ['1', '2', '3', '4', '5'])", "  total1\
    \ = lst1.reduce(0) { |acc, ele| acc + ele.length }\n  total2 = lst2.reduce(0)\
    \ { |acc, ele| acc + ele.length }\n  if total1 < total2\n    lst1\n  elsif total2\
    \ < total1\n    lst2\n  else\n    lst1\n  end\nend\np total_match(['hi', 'admin'],\
    \ ['hI', 'Hi'])\np total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \np total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \np total_match(['4'],\
    \ ['1', '2', '3', '4', '5'])", "    if lst1.join(\"\").length < lst2.join(\"\"\
    ).length\n        return lst1\n    else\n        return lst2\n    end\nend", " \
    \ if lst1.join.length > lst2.join.length\n    lst2\n  else\n    lst1\n  end\n\
    end\np total_match(['hi', 'admin'], ['hI', 'Hi'])", "    count1 = 0\n    count2\
    \ = 0\n    if lst1.empty? || lst2.empty?\n        return []\n    end\n    lst1.each\
    \ do |x|\n        count1 += x.length\n    end\n    lst2.each do |x|\n        count2\
    \ += x.length\n    end\n    if count1 == count2\n        return lst1\n    end\n\
    \    count1 < count2 ? lst1 : lst2\nend", "\tcount1 = 0\n\tcount2 = 0\n\tlst1.each\
    \ do |x|\n\t\tcount1 += x.length\n\tend\n\tlst2.each do |x|\n\t\tcount2 += x.length\n\
    \tend\n\tif count1 < count2\n\t\treturn lst1\n\telsif count2 < count1\n\t\treturn\
    \ lst2\n\telse\n\t\treturn lst1\n\tend\nend\nputs total_match(['hi', 'admin'],\
    \ ['hI', 'Hi'])\nputs total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n\
    puts total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\nputs total_match(['4'],\
    \ ['1', '2', '3', '4', '5'])", "    arr = lst1.map {|word| word.length}\n    arr2\
    \ = lst2.map {|word| word.length}\n    sum = arr.reduce(:+)\n    sum2 = arr2.reduce(:+)\n\
    \    if sum < sum2\n        lst1\n    elsif sum2 < sum\n        lst2\n    else\n\
    \        lst1\n    end\nend", "  len1 = 0\n  len2 = 0\n  lst1.each {|x| len1 +=\
    \ x.length}\n  lst2.each {|x| len2 += x.length}\n  len1 < len2 ? lst1 : lst2\n\
    end\np total_match(['4'], ['1', '2', '3', '4', '5'])", "  list1_size = lst1.map{|i|\
    \ i.size}.sum\n  list2_size = lst2.map{|i| i.size}.sum\n  if list1_size < list2_size\n\
    \    return lst1\n  elsif list1_size > list2_size\n    return lst2\n  else\n \
    \   return lst1\n  end\nend", "\tlst1_sum = 0\n\tlst2_sum = 0\n\tlst1.each {|x|\
    \ lst1_sum += x.length}\n\tlst2.each {|x| lst2_sum += x.length}\n\tlst1_sum <\
    \ lst2_sum ? lst1 : lst2\nend\np total_match(['hi', 'admin'], ['hI', 'Hi'])\n\
    p total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\np total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi'])\np total_match(['4'], ['1', '2', '3', '4', '5'])",
  "  if lst1.join.length < lst2.join.length\n    return lst1\n  elsif lst1.join.length\
    \ > lst2.join.length\n    return lst2\n  else \n    return lst1\n  end\nend\n\
    puts total_match(['4'], ['1', '2', '3', '4', '5']) #\u279E ['4']", "  sum1 = 0\n\
    \  sum2 = 0\n  lst1.each do |i|\n    sum1 += i.length\n  end\n  lst2.each do |i|\n\
    \    sum2 += i.length\n  end\n  if sum1 < sum2\n    lst1\n  elsif sum1 > sum2\n\
    \    lst2\n  else\n    lst1\n  end\nend\nputs total_match(['hi', 'admin'], ['hI',\
    \ 'Hi'])\nputs total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n\
    puts total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\nputs total_match(['4'],\
    \ ['1', '2', '3', '4', '5'])", "\tlst1 = lst1.join.size\n\tlst2 = lst2.join.size\n\
    \tif lst1 < lst2\n\t\treturn lst1\n\telse\n\t\treturn lst2\n\tend\nend\np total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \np total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \np total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \np total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) ", "    lst1.inject(0) {|sum, x| sum + x.length}\
    \ < lst2.inject(0) {|sum, x| sum + x.length} ? lst2 : lst1\nend\np total_match(['hi',\
    \ 'admin'], ['hI', 'Hi'])\np total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project'])\np total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\np total_match(['4'],\
    \ ['1', '2', '3', '4', '5'])", "  if lst1.join.length <= lst2.join.length\n  \
    \  lst1\n  else\n    lst2\n  end\nend\np total_match(['hi', 'admin'], ['hI', 'Hi'])\n\
    p total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\np total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi'])\np total_match(['4'], ['1', '2', '3', '4', '5'])",
  "  lst1_count = 0\n  lst2_count = 0\n  lst1.each {|str| lst1_count += str.size}\n\
    \  lst2.each {|str| lst2_count += str.size}\n  return lst1 if lst1_count == lst2_count\n\
    \  return lst1_count < lst2_count ? lst1 : lst2\nend\np total_match(['hi', 'admin'],\
    \ ['hI', 'Hi']) #\u279E ['hI', 'Hi']\np total_match(['hi', 'admin'], ['hi', 'hi',\
    \ 'admin', 'project']) #\u279E ['hi', 'admin']\np total_match(['hi', 'admin'],\
    \ ['hI', 'hi', 'hi']) #\u279E ['hI', 'hi', 'hi']\np total_match(['4'], ['1', '2',\
    \ '3', '4', '5']) #\u279E ['4']", "  tot1 = lst1.join.length\n  tot2 = lst2.join.length\n\
    \  tot1 < tot2 ? lst1 : lst2\nend", "  \n  puts lst1.length < lst2.length\nend\n\
    total_match(['4'], ['1', '2', '3', '4', '5'])", "\treturn lst1 if lst1.join.length\
    \ == lst2.join.length\n\tlst1.join.length < lst2.join.length ? lst1 : lst2\nend\n\
    p total_match(['hi', 'admin'], ['hI', 'Hi'])", "\nend", "    return [] if lst1.empty?\
    \ && lst2.empty?\n    return lst1 if lst1.join.length == lst2.join.length\n  \
    \  return lst1 if lst1.join.length < lst2.join.length\n    return lst2 if lst1.join.length\
    \ > lst2.join.length\nend", "\tlst1.map {|x| x.size}.sum < lst2.map {|x| x.size}.sum\
    \ ? lst1 : lst2\nend", "    number1 = 0\n    number2 = 0\n    lst1.each {|x| number1\
    \ += x.length}\n    lst2.each {|x| number2 += x.length}\n    if number1 < number2\n\
    \        return lst1\n    elsif number1 > number2\n        return lst2\n    else\n\
    \        return lst1\n    end\nend\nputs total_match(['hi', 'admin'], ['hI', 'Hi'])\n\
    puts total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\nputs total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi'])\nputs total_match(['4'], ['1', '2', '3', '4',\
    \ '5'])", "  len_lst1 = lst1.join.length\n  len_lst2 = lst2.join.length\n  if\
    \ len_lst1 == len_lst2\n    lst1\n  elsif len_lst1 > len_lst2\n    lst2\n  else\n\
    \    lst1\n  end\nend", "    return lst1 if lst1.join('').length <= lst2.join('').length\n\
    \    lst2\nend", "\t# total_characters = 0\n\t# total_characters1 = 0\n\t# lst1.each\
    \ do |i|\n\t# \ttotal_characters += i.length\n\t# end\n\t# lst2.each do |i|\n\t\
    # \ttotal_characters1 += i.length\n\t# end\n\t# total_characters < total_characters1\
    \ ? lst1 : lst2\n\tlst1.join.length < lst2.join.length ? lst1 : lst2\nend", " \
    \   lst1.join.length < lst2.join.length ? lst1 : lst2\nend", "  if lst1.length\
    \ == lst2.length\n    return lst1\n  elsif lst1.length > lst2.length\n    return\
    \ lst2\n  else\n    return lst1\n  end\nend", "  sum1 = lst1.map{|x| x.length}.reduce(:+)\n\
    \  sum2 = lst2.map{|x| x.length}.reduce(:+)\n  if sum1 > sum2\n    return lst2\n\
    \  elsif sum1 < sum2\n    return lst1\n  else\n    return lst1\n  end\nend", " \
    \ lst1_size = lst1.join.size\n  lst2_size = lst2.join.size\n  return lst1 if lst1_size\
    \ <= lst2_size\n  return lst2 if lst2_size <= lst1_size\nend\np total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) #\u279E ['hI', 'Hi']\np total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) #\u279E ['hi', 'admin']\np total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) #\u279E ['hI', 'hi', 'hi']\np total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) #\u279E ['4']", "  if lst1.join.length < lst2.join.length\n\
    \    lst1\n  else\n    lst2\n  end\nend", "    a = 0\n    b = 0\n    lst1.each\
    \ do |x|\n        a += x.length\n    end\n    lst2.each do |x|\n        b += x.length\n\
    \    end\n    if a < b\n        return lst1\n    elsif a > b\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nputs total_match(['4'], ['1', '2',\
    \ '3', '4', '5'])\nputs total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\nputs\
    \ total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\nputs total_match(['hi',\
    \ 'admin'], ['hI', 'Hi'])\nputs total_match([], [])", "    puts lst1.join.length\n\
    \    puts lst2.join.length\n    if lst1.join.length < lst2.join.length\n     \
    \   return lst1\n    else\n        return lst2\n    end\nend", "    sum1 = 0\n\
    \    sum2 = 0\n    lst1.each {|x| sum1 += x.length}\n    lst2.each {|x| sum2 +=\
    \ x.length}\n    sum1 > sum2 ? lst2 : lst1\nend", "  s = 0\n  lst1.each {|x| s\
    \ += x.length}\n  return lst1 if s == lst2.reduce(0) {|x, y| x + y.length}\n \
    \ s2 = 0\n  lst2.each {|x| s2 += x.length}\n  return lst2 if s2 == lst1.reduce(0)\
    \ {|x, y| x + y.length}\n  s2 > s ? lst1 : lst2\nend", "    total = 0\n    total2\
    \ = 0\n    lst1.each do |str|\n        total += str.length\n    end\n    lst2.each\
    \ do |str|\n        total2 += str.length\n    end\n    return lst1 if total <\
    \ total2\n    return lst2 if total > total2\n    return lst1 if total == total2\n\
    end", "    return lst1 if lst1.join.length > lst2.join.length\n    return lst2\
    \ if lst2.join.length > lst1.join.length\n    return lst1\nend", "    if lst1.join.length\
    \ < lst2.join.length\n        lst1\n    else\n        lst2\n    end\nend\np total_match(['hi',\
    \ 'admin'], ['hI', 'Hi'])\np total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \np total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\np total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) ", "    if lst1.join.length == lst2.join.length\n\
    \        return lst1\n    elsif lst1.join.length > lst2.join.length\n        return\
    \ lst2\n    else\n        return lst1\n    end\nend\np total_match(['hi', 'admin'],\
    \ ['hI', 'Hi']) # \u279E ['hI', 'Hi']\np total_match(['hi', 'admin'], ['hi', 'hi',\
    \ 'admin', 'project']) # \u279E ['hi', 'admin']\np total_match(['hi', 'admin'],\
    \ ['hI', 'hi', 'hi']) # \u279E ['hI', 'hi', 'hi']\np total_match(['4'], ['1',\
    \ '2', '3', '4', '5']) # \u279E ['4']\np total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ # \u279E ['hI', 'Hi']", "  sum_chars_1 = lst1.join.length\n  sum_chars_2 = lst2.join.length\n\
    \  if sum_chars_1 > sum_chars_2\n    return lst2\n  elsif sum_chars_1 < sum_chars_2\n\
    \    return lst1\n  else\n    return lst1\n  end\nend\np total_match(['4'], ['1',\
    \ '2', '3', '4', '5'])", "  lst1_total = 0\n  lst2_total = 0\n  lst1.each do |str|\n\
    \    lst1_total += str.length\n  end\n  lst2.each do |str|\n    lst2_total +=\
    \ str.length\n  end\n  if lst1_total < lst2_total\n    return lst1\n  elsif lst2_total\
    \ < lst1_total\n    return lst2\n  elsif lst1_total == lst2_total\n    return\
    \ lst1\n  end\nend", "   lst1_count = lst1.map {|i| i.length}.sum\n   lst2_count\
    \ = lst2.map {|i| i.length}.sum\n   lst1_count < lst2_count ? lst1 : lst2\nend",
  "    lst1 = lst1.join.length\n    lst2 = lst2.join.length\n    if lst1 < lst2\n\
    \        return lst1\n    elsif lst1 > lst2\n        return lst2\n    else\n \
    \       return lst1\n    end\nend\np total_match(['hi', 'admin'], ['hI', 'Hi'])",
  "\tif lst1.join.length < lst2.join.length\n\t\treturn lst1\n\telsif lst1.join.length\
    \ > lst2.join.length\n\t\treturn lst2\n\telse\n\t\treturn lst1\n\tend\nend", " \
    \   if lst1.join.length < lst2.join.length\n        lst1\n    else\n        lst2\n\
    \    end\nend", "  lst1.join.length > lst2.join.length ? lst2 : lst1\nend", " \
    \ match = {}\n  match[lst1] = lst1.join.length\n  match[lst2] = lst2.join.length\n\
    \  match.sort_by {|k,v| v}.flatten[0]\nend\np total_match(['hi', 'admin'], ['hI',\
    \ 'Hi'])\np total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\np\
    \ total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\np total_match(['4'], ['1',\
    \ '2', '3', '4', '5'])\np total_match([], [])", "  if lst1.join(\"\").length <\
    \ lst2.join(\"\").length\n    lst1\n  else\n    lst2\n  end\nend\nputs total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) #\u279E ['4']", "  return lst1 if lst1.length < lst2.length\n\
    \  return lst2 if lst2.length < lst1.length\n  return lst1\nend\np total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) #\u279E ['hI', 'Hi']\np total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) #\u279E ['hi', 'admin']\np total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) #\u279E ['hI', 'hi', 'hi']\np total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) #\u279E ['4']", "  lst1.join.length < lst2.join.length\
    \ ? lst1 : lst2\nend\ntotal_match(['hi', 'admin'], ['hI', 'Hi'])", "    return\
    \ lst1 if lst1.join.length == lst2.join.length\n    lst1.join.length < lst2.join.length\
    \ ? lst1 : lst2\nend\np total_match(['hi', 'admin'], ['hI', 'Hi'])\np total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project'])\np total_match(['hi', 'admin'],\
    \ ['hI', 'hi', 'hi'])\np total_match(['4'], ['1', '2', '3', '4', '5'])", "  chars1\
    \ = lst1.join('').length\n  chars2 = lst2.join('').length\n  chars1 > chars2 ?\
    \ lst2 : lst1\nend", "  if lst1.map {|x| x.size}.sum < lst2.map {|x| x.size}.sum\n\
    \    lst1\n  else\n    lst2\n  end\nend\np total_match(['hi', 'admin'], ['hI',\
    \ 'Hi']) == ['hI', 'Hi']\np total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) == ['hi', 'admin']\np total_match(['hi', 'admin'], ['hI', 'hi',\
    \ 'hi']) == ['hI', 'hi', 'hi']\np total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ == ['4']", "  total1 = 0\n  total2 = 0\n  return lst1 if lst1.empty? && lst2.empty?\n\
    \  lst1.each do |x|\n    total1 += x.length\n  end\n  lst2.each do |x|\n    total2\
    \ += x.length\n  end\n  if total1 < total2\n    return lst1\n  elsif total1 >\
    \ total2\n    return lst2\n  else\n    return lst1\n  end\nend\nputs total_match(['hi',\
    \ 'admin'], ['hI', 'Hi'])", "  lst1.reduce(0) { |s1, c1| s1 + c1.length } <= lst2.reduce(0)\
    \ { |s2, c2| s2 + c2.length } ? lst1 : lst2\nend", "\tlst1, lst2 = [lst1, lst2].sort_by{|x|\
    \ x.join.length}\n\tlst1.join.length < lst2.join.length ? lst1 : lst2\nend", "\t\
    total_chars1 = 0\n\ttotal_chars2 = 0\n\tlst1.each do |word|\n\t\ttotal_chars1\
    \ += word.length\n\tend\n\tlst2.each do |word|\n\t\ttotal_chars2 += word.length\n\
    \tend\n\tif total_chars1 == total_chars2\n\t\treturn lst1\n\telsif total_chars1\
    \ < total_chars2\n\t\treturn lst1\n\telse\n\t\treturn lst2\n\tend\nend\nputs total_match(['hi',\
    \ 'admin'], ['hI', 'Hi'])\nputs total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project'])\nputs total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\nputs total_match(['4'],\
    \ ['1', '2', '3', '4', '5'])", "  return [] if lst1.empty? && lst2.empty?\n  if\
    \ lst1.join.length < lst2.join.length\n    lst1\n  elsif lst1.join.length > lst2.join.length\n\
    \    lst2\n  else\n    lst1\n  end\nend\np total_match([], [])\np total_match(['hi',\
    \ 'admin'], ['hI', 'Hi'])\np total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project'])\np total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\np total_match(['4'],\
    \ ['1', '2', '3', '4', '5'])", "  len1 = lst1.inject(0) {|s, w| s + w.length}\n\
    \  len2 = lst2.inject(0) {|s, w| s + w.length}\n  return lst1 if len1 == len2\n\
    \  len1 < len2 ? lst1 : lst2\nend", "  if lst1.join.length <= lst2.join.length\n\
    \    lst1\n  else\n    lst2\n  end\nend\ntotal_match(['hi', 'admin'], ['hI', 'Hi'])",
  "\ttotal1=0\n\ttotal2=0\n\tlst1.each do |x|\n\t\ttotal1+=x.length\n\tend\n\tlst2.each\
    \ do |x|\n\t\ttotal2+=x.length\n\tend\n\tif total1==total2\n\t\tlst1\n\telsif\
    \ total1<total2\n\t\tlst1\n\telse\n\t\tlst2\n\tend\nend\nputs total_match(['4'],\
    \ ['1', '2', '3', '4', '5'])", "  if lst1.join.length < lst2.join.length\n   \
    \ return lst1\n  elsif lst1.join.length > lst2.join.length\n    return lst2\n\
    \  else\n    return lst1\n  end\nend", "\tnew_lst = []\n\tlst1.each do |ele|\n\
    \t\tnew_lst << ele.length\n\tend\n\tlst2.each do |ele|\n\t\tnew_lst << ele.length\n\
    \tend\n\tsum_lst1 = new_lst[0..(new_lst.length/2)-1].sum\n\tsum_lst2 = new_lst[(new_lst.length/2)..-1].sum\n\
    \tif sum_lst1 < sum_lst2\n\t\treturn lst1\n\telsif sum_lst1 > sum_lst2\n\t\treturn\
    \ lst2\n\telse\n\t\treturn lst1\n\tend\nend", "  return [] if lst1.empty? && lst2.empty?\n\
    \  lst1.join.length < lst2.join.length ? lst1 : lst2\nend", "    return lst1 if\
    \ lst1.join.length == lst2.join.length\n    return lst1 if lst1.join.length <\
    \ lst2.join.length\n    return lst2 if lst1.join.length > lst2.join.length\nend\n\
    p total_match(['hi', 'admin'], ['hI', 'Hi'])\np total_match(['hi', 'admin'], ['hi',\
    \ 'hi', 'admin', 'project'])\np total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\n\
    p total_match(['4'], ['1', '2', '3', '4', '5'])", "    if lst1.join.length > lst2.join.length\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nputs total_match(['hi',\
    \ 'admin'], ['hI', 'Hi'])\nputs total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project'])\nputs total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\nputs total_match(['4'],\
    \ ['1', '2', '3', '4', '5'])", "  if lst1.join(\"\").length < lst2.join(\"\").length\n\
    \    lst1\n  else\n    lst2\n  end\nend", "  return lst1 if lst1.join.length <\
    \ lst2.join.length\n  return lst2 if lst2.join.length < lst1.join.length\n  lst1\n\
    end\np total_match(['hi', 'admin'], ['hI', 'Hi'])\np total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project'])\np total_match(['hi', 'admin'], ['hI', 'hi',\
    \ 'hi'])\np total_match(['4'], ['1', '2', '3', '4', '5'])", "  fst_total = lst1.join.size\n\
    \  snd_total = lst2.join.size\n  if fst_total < snd_total\n    lst1\n  elsif fst_total\
    \ > snd_total\n    lst2\n  else\n    lst1\n  end\nend\np total_match(['hi', 'admin'],\
    \ ['hI', 'Hi'])", "    len1 = 0\n    len2 = 0\n    lst1.each {|i| len1 += i.length}\n\
    \    lst2.each {|i| len2 += i.length}\n    len1 > len2 ? lst2 : lst1\nend", " \
    \ if lst1.join.length < lst2.join.length\n    lst1\n  else\n    lst2\n  end\n\
    end\nputs total_match(['hi', 'admin'], ['hI', 'Hi'])\nputs total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project'])\nputs total_match(['hi', 'admin'],\
    \ ['hI', 'hi', 'hi'])\nputs total_match(['4'], ['1', '2', '3', '4', '5'])", "\t\
    lst1_len = 0\n\tlst2_len = 0\n\tlst1.each {|x| lst1_len += x.length}\n\tlst2.each\
    \ {|x| lst2_len += x.length}\n\treturn (lst1_len == lst2_len) ? lst1 : ((lst1_len\
    \ < lst2_len) ? lst1 : lst2)\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
