name: HumanEval_29_filter_by_prefix
language: rb
prompt: "# Filter an input list of strings only for ones that start with a given prefix.\n\
  # >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc', 'bcd', 'cde',\
  \ 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings, prefix)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
  \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
  \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
  xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
  end\n"
completions: ["    # BEGIN ####################################################################\n\
    \    strings.select { |s| s.start_with?(prefix) }\n    # END ######################################################################\n\
    end", "  strings.select { |string| string.start_with?(prefix) }\nend", "  strings.select\
    \ { |str| str.start_with?(prefix) }\nend", "  strings.select { |string| string.start_with?(prefix)\
    \ }\nend", "  strings.select { |str| str.start_with?(prefix) }\nend", "  strings.select\
    \ { |string| string.start_with?(prefix) }\nend", "  strings.select { |str| str.start_with?(prefix)\
    \ }\nend", "  # TODO: implement me\nend", "  strings.select{|str| str.start_with?(prefix)}\n\
    end", "  strings.select { |str| str.start_with?(prefix) }\nend", "\tfiltered =\
    \ []\n\tstrings.each do |word|\n\t\tfiltered << word if word.include?(prefix)\n\
    \tend\n\tfiltered\nend", "  strings.filter { |s| s.start_with?(prefix) }\nend",
  "  strings.select { |string| string.start_with?(prefix) }\nend", "  strings.select\
    \ { |str| str.start_with?(prefix) }\nend", "  new_array = []\n  strings.each do\
    \ |string|\n    if string.start_with?(prefix)\n      new_array << string\n   \
    \ end\n  end\n  new_array\nend", "    # Write your code here\nend", "  strings.select\
    \ { |str| str.start_with?(prefix) }\nend", "  strings.find_all { |str| str.start_with?(prefix)\
    \ }\nend", "  strings.select { |string| string.start_with?(prefix) }\nend", " \
    \ strings.select { |string| string.start_with?(prefix) }\nend", "  filter(strings)\
    \ { |string| starts_with(string, prefix) }\nend", "  strings.select { |s| s.start_with?(prefix)\
    \ }\nend", "  strings.select{|s| s.start_with?(prefix)}\nend", "  strings.select\
    \ { |s| s.start_with?(prefix) }\nend", "  strings.select { |string| string.start_with?(prefix)\
    \ }\nend", "  # TODO: complete this method\nend", "  strings.select { |s| s.start_with?(prefix)\
    \ }\nend", "    # YOUR CODE HERE\n    strings.select { |x| x.start_with?(prefix)\
    \ }\nend", "    return strings.select { |word| word.start_with?(prefix) }\nend",
  end, "  # TODO: Your code here!\n  array = []\n  strings.each do |string|\n    if\
    \ string.start_with?(prefix)\n      array << string\n    end\n  end\n  array\n\
    end", "  strings.select { |word| word.start_with?(prefix) }\nend", "  strings.select\
    \ { |str| str.start_with?(prefix) }\nend", "  strings.select { |string| string.start_with?(prefix)\
    \ }\nend", "  strings.select { |string| string.start_with?(prefix) }\nend", " \
    \ strings.select { |s| s.start_with?(prefix) }\nend", "  strings.select { |s|\
    \ s.start_with?(prefix) }\nend", "  strings.select { |str| str.start_with?(prefix)\
    \ }\nend", "\tfilter(strings) { |string| string.start_with?(prefix) }\nend", " \
    \ strings.select { |str| str.start_with?(prefix) }\nend", "  strings.select {\
    \ |str| str.start_with?(prefix) }\nend", "  # TODO\nend", "  strings.select {\
    \ |string| string.start_with?(prefix) }\nend", "  strings.select{|s| s.index(prefix)\
    \ == 0}\nend", "  # TODO: your code here\nend", "  strings.select { |s| s.start_with?(prefix)\
    \ }\nend", "  strings.select { |str| str.start_with?(prefix) }\nend", "  strings.select\
    \ { |string| string.start_with?(prefix) }\nend", "  # TODO: Implement me!\n  #\
    \       Use the Array#select method.\n  strings.select { |str| str.start_with?(prefix)\
    \ }\nend", "  strings.filter { |x| x.start_with?(prefix) }\nend", "    strings.select\
    \ { |s| s.start_with?(prefix) }\nend", "  strings.select { |string| string.start_with?(prefix)\
    \ }\nend", "  result = []\n  strings.each do |string|\n    if string.start_with?(prefix)\n\
    \      result << string\n    end\n  end\n  result\nend", "  string_to_array =\
    \ strings.map{|string| string.split(\"\")}\n  string_to_array.keep_if{|array|array[0]\
    \ == prefix}\n  string_to_array.map{|array| array.join(\"\")}\nend", "  # YOUR\
    \ CODE HERE\nend", "  # THIS IS A STUB\n  strings.select { |s| s.start_with?(prefix)\
    \ }\nend", "  new_array = []\n  strings.each do |word|\n    if word.start_with?(prefix)\n\
    \      new_array << word\n    end\n  end\n  new_array\nend", end, "  strings.select\
    \ { |str| str.start_with?(prefix) }\nend", "  filtered = []\n  strings.each do\
    \ |word|\n    if word.start_with?(prefix)\n      filtered << word\n    end\n \
    \ end\n  filtered\nend", "  strings.select { |string| string.start_with?(prefix)\
    \ }\nend", "  strings.select { |string| string.start_with?(prefix) }\nend", " \
    \ strings.select { |str| str.start_with?(prefix) }\nend", "  strings.select{|string|\
    \ string.start_with?(prefix)}\nend", "  strings.select { |string| string.start_with?(prefix)\
    \ }\nend", "  strings.select { |x| x.start_with?(prefix) }\nend", "\tresult =\
    \ []\n\tstrings.each do |string|\n\t\tif string.start_with?(prefix)\n\t\t\tresult\
    \ << string\n\t\tend\n\tend\n\tresult\nend", "  strings.keep_if { |item| item.start_with?(prefix)\
    \ }\nend", "  # TODO: implement me\nend", "  strings.select { |str| str.start_with?(prefix)\
    \ }\nend", "  strings.select { |s| s.start_with?(prefix) }\nend", "  strings.select\
    \ { |string| string.start_with?(prefix) }\nend", "  strings.select { |string|\
    \ string.start_with?(prefix) }\nend", "  strings.select { |s| s.start_with?(prefix)\
    \ }\nend", "  strings.select { |e| e.start_with?(prefix) }\nend", "  strings.select\
    \ { |string| string.start_with?(prefix) }\nend", "    return strings.select{|string|\
    \ string.start_with?(prefix)}\nend", "  # YOUR CODE HERE\nend", "  # ANSWER\n\
    \  # ======\n  # We initialize an empty array to which we will add only the strings\
    \ that\n  # start with the given prefix.\n  # We iterate through the given `strings`\
    \ and check if the `prefix` matches\n  # any part of the current string, we add\
    \ it to the array, else we ignore it.\n  filtered_strings = []\n  strings.each\
    \ do |string|\n    if string.start_with?(prefix)\n      filtered_strings << string\n\
    \    end\n  end\n  filtered_strings\nend", "  strings.select { |s| s.start_with?(prefix)\
    \ }\nend", "  strings.select { |string| string.start_with?(prefix) }\nend", " \
    \ strings.select { |str| str.start_with?(prefix) }\nend", "  strings.select {\
    \ |string| string.start_with?(prefix) }\nend", "  strings.select { |s| s.start_with?(prefix)\
    \ }\nend", "  # we can use a for loop in a more compact way with `each`\n  # the\
    \ argument to each will be the current value from `strings`\n  # don't forget\
    \ that each is a method of Array and can be used directly\n  # on the given array.\n\
    \  ret = []\n  strings.each do |s|\n    # notice how we can use `start_with?`\
    \ to check whether a string starts\n    # with another string\n    ret << s if\
    \ s.start_with?(prefix)\n  end\n  ret\nend", "  return [] if strings.empty?\n\
    \  strings.select { |str| str.start_with?(prefix) }\nend", "  strings.filter {\
    \ |x| x.start_with?(prefix) }\nend", "  strings.select { |s| s.start_with?(prefix)\
    \ }\nend", "  strings.select { |string| string.start_with?(prefix) }\nend", " \
    \ strings.select { |string| string.start_with?(prefix) }\nend", "  strings.select\
    \ { |str| str.start_with?(prefix) }\nend", "    strings.select{|s| s.start_with?(prefix)}\n\
    end", end, "  strings.filter { |str| str.index(prefix) == 0 }\nend", "  result\
    \ = []\n  strings.each do |string|\n    if string.start_with?(prefix)\n      result\
    \ << string\n    end\n  end\n  result\nend", "  strings.select { |word| word.start_with?(prefix)\
    \ }\nend", "  results = []\n  strings.each do |string|\n    if string.start_with?(prefix)\n\
    \      results << string\n    end\n  end\n  results\nend", "  strings.select {\
    \ |string| string.start_with?(prefix) }\nend", "  strings.select { |string| string.start_with?(prefix)\
    \ }\nend", "  strings.select { |str| str.start_with?(prefix) }\nend", "  strings.select\
    \ { |string| string.start_with?(prefix) }\nend", "  strings.select{|word| word.start_with?(prefix)}\n\
    end", "  strings.select { |s| s.start_with?(prefix) }\nend", "  strings.select\
    \ { |string| string.start_with?(prefix) }\nend", "\tif strings.empty?\n\t\tstrings\n\
    \telse\n\t\tstrings.select { |item| item.start_with?(prefix) }\n\tend\nend", " \
    \ strings.select { |s| s.start_with?(prefix) }\nend", "  strings.select { |string|\
    \ string.start_with?(prefix) }\nend", "  strings.select { |string| string.start_with?(prefix)\
    \ }\nend", "  strings.select{|s| s.start_with?(prefix)}\nend", "  strings.select\
    \ { |str| str.start_with?(prefix) }\nend", "  strings.select { |e| e.start_with?(prefix)\
    \ }\nend", "    strings.select{|s| s.start_with?(prefix)}\nend", "  strings.select\
    \ { |str| str.start_with?(prefix) }\nend", "  result = []\n  strings.each do |string|\n\
    \    if string.start_with?(prefix)\n      result << string\n    end\n  end\n \
    \ result\nend", "  strings.select { |string| string.start_with?(prefix) }\nend",
  "  strings.select { |s| s.start_with?(prefix) }\nend", "    res = []\n    strings.each\
    \ do |x|\n        if x.start_with?(prefix)\n            res.push(x)\n        end\n\
    \    end\n    return res\nend", "  strings.select { |string| string.start_with?(prefix)\
    \ }\nend", "  strings.select { |s| s.start_with?(prefix) }\nend", "  strings.select{|string|\
    \ string.start_with?(prefix)}\nend", "  strings.select { |string| string.start_with?(prefix)\
    \ }\nend", "  results = []\n  strings.each do |string|\n    results << string\
    \ if string.start_with?(prefix)\n  end\n  results\nend", "\treturn strings.select{|x|\
    \ x[0] == prefix}\nend", "  return [] if strings.empty?\n  strings.select { |x|\
    \ x.match(/^#{prefix}/) }\nend", "  strings.select{|string| string.start_with?(prefix)}\n\
    end", "  prefix_strings = []\n  strings.each do |string|\n    if string.start_with?(prefix)\n\
    \      prefix_strings << string\n    end\n  end\n  prefix_strings\nend", "  strings.select\
    \ { |string| string.match(/^#{prefix}/) }\nend", "  # TODO: Implement this\nend",
  "  # TODO: implement this\n  strings.select { |string| string.include? prefix }\n\
    end", "  strings.select { |s| s.start_with?(prefix) }\nend", "\toutput = []\n\t\
    strings.each do |string|\n\t\tif string.start_with?(prefix)\n\t\t\toutput << string\n\
    \t\tend\n\tend\n\toutput\nend", "  strings.select { |string| string.start_with?(prefix)\
    \ }\nend", "  strings.select { |s| s.start_with?(prefix) }\nend", "  strings.select\
    \ { |str| str.start_with?(prefix) }\nend", "  strings.select { |string| string.start_with?(prefix)\
    \ }\nend", "  return strings.select{|word| word.start_with?(prefix)}\nend", " \
    \ strings.select { |string| string.start_with?(prefix) }\nend", "  filter_words\
    \ = strings.select { |word| word.start_with?(prefix) }\n  return filter_words\n\
    end", "  # TODO: fill in this function\n  return strings.select { |element| element.start_with?(prefix)\
    \ }\nend", "  strings.select { |s| s.start_with?(prefix) }\nend", "  strings.select\
    \ { |string| string.start_with?(prefix) }\nend", "\tresult = Array.new\n\tfor\
    \ i in strings\n\t\tif i.start_with?(prefix)\n\t\t\tresult.push(i)\n\t\tend\n\t\
    end\n\treturn result\nend", "  index = 0\n  pre_arr = []\n  while index < strings.length\n\
    \    if strings[index].start_with?(prefix)\n      pre_arr << strings[index]\n\
    \    end\n    index += 1\n  end\n  pre_arr\nend", "  strings.select { |string|\
    \ string.start_with?(prefix) }\nend", "  # TODO: Return a list of strings that\
    \ start with a given prefix\n  # hint: you can use strings.select and start_with?\n\
    \  strings.select { |string| string.start_with?(prefix) }\nend", "  strings.select\
    \ { |string| string.start_with?(prefix) }\nend", "  strings.select { |string|\
    \ string.start_with?(prefix) }\nend", "    strings.select { |s| s.start_with?(prefix)\
    \ }\nend", "  strings.find_all { |s| s.start_with?(prefix) }\nend", "\treturn\
    \ strings.select { |element| element.start_with?(prefix) }\nend", "  strings.select\
    \ { |string| string.start_with?(prefix) }\nend", "  strings.select { |string|\
    \ string.start_with?(prefix) }\nend", "  strings.select { |s| s.start_with?(prefix)\
    \ }\nend", "  strings.select { |string| string.start_with?(prefix) }\nend", " \
    \   strings.select { |string| string.start_with?(prefix) }\nend", "  strings.select\
    \ { |str| str.start_with?(prefix) }\nend", "  answer = []\n  strings.each do |string|\n\
    \    if string.start_with?(prefix)\n      answer << string\n    end\n  end\n \
    \ answer\nend", "\tstrings.select { |string| string.start_with?(prefix) }\nend",
  "  # strings.select { |string| string[0] == prefix }\n  strings.select { |string|\
    \ string.start_with?(prefix) }\nend", "  strings.select { |str| str.start_with?(prefix)\
    \ }\nend", "\tstrings.select { |str| str.start_with?(prefix) }\nend", "  strings.select\
    \ { |string| string.start_with?(prefix) }\nend", "  strings.select { |string|\
    \ string.start_with?(prefix) }\nend", "    strings.select { |item| item.start_with?(prefix)\
    \ }\nend", "  strings.select { |str| str.start_with?(prefix) }\nend", "  strings.select\
    \ { |str| str.start_with?(prefix) }\nend", "  filtered = []\n  strings.each do\
    \ |word|\n    if word.start_with?(prefix)\n      filtered << word\n    end\n \
    \ end\n  filtered\nend", "  filtered = []\n  strings.each do |string|\n    if\
    \ string.start_with?(prefix)\n      filtered << string\n    end\n  end\n  filtered\n\
    end", "    return strings.select { |word| word.start_with?(prefix) }\nend", " \
    \ # TODO: implement this\n  strings.select { |s| s.start_with?(prefix) }\nend",
  "  strings.select { |str| str.start_with?(prefix) }\nend", "  array = []\n  i =\
    \ 0\n  while i < strings.length\n    if strings[i].start_with?(prefix)\n     \
    \ array << strings[i]\n    end\n    i += 1\n  end\n  array\nend", "  strings.select\
    \ { |str| str.start_with?(prefix) }\nend", "\treturn strings.select { |element|\
    \ element.start_with?(prefix) }\nend", "  strings.select { |string| string.start_with?(prefix)\
    \ }\nend", "  #strings.select { |str| str.start_with?(prefix) }\n  strings.select\
    \ { |str| str.start_with?(prefix) }\nend", "\tstrings.select { |x| x.start_with?(prefix)\
    \ }\nend", "\tstrings.select { |string| string.start_with?(prefix) }\nend", " \
    \ strings.select { |string| string.start_with?(prefix) }\nend", "  strings.select\
    \ { |s| s.start_with?(prefix) }\nend", "  strings.select { |word| word.start_with?(prefix)\
    \ }\nend", "  result = []\n  strings.each do |s|\n    if s.start_with?(prefix)\n\
    \      result << s\n    end\n  end\n  result\nend", "  strings.select { |i| i.start_with?(prefix)\
    \ }\nend", "  strings.select { |string| string.start_with?(prefix) }\nend", " \
    \ strings.select { |string| string.start_with?(prefix) }\nend", "  strings.select\
    \ { |string| string.start_with?(prefix) }\nend", "  strings.find_all do |s|\n\
    \    s.start_with?(prefix)\n  end\nend", "  strings.select { |string| string.start_with?(prefix)\
    \ }\nend", "    strings.select { |string| string.start_with?(prefix) }\nend",
  "    strings.select{|str| str.start_with?(prefix)}\nend", "  strings.filter { |word|\
    \ word.start_with?(prefix) }\nend", "  strings.select{|string| string.start_with?(prefix)}\n\
    end", "  strings.select { |string| string.start_with?(prefix) }\nend", "  strings.select\
    \ { |s| s.start_with?(prefix) }\nend", "    strings.select { |s| s.start_with?(prefix)\
    \ }\nend", "  strings.select { |string| string.start_with?(prefix) }\nend", " \
    \ strings.select { |str| str.start_with?(prefix) }\nend", "    answer = []\n \
    \   strings.each do |string|\n        if string.start_with?(prefix)\n        \
    \    answer << string\n        end\n    end\n    return answer\nend", "  strings.select\
    \ { |x| x.start_with?(prefix) }\nend", "    strings.select { |string| string.start_with?(prefix)\
    \ }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
