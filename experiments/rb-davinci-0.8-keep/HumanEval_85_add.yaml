name: HumanEval_85_add
language: rb
prompt: "# Given a non-empty list of integers lst. add the even elements that are\
  \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n\
  \    candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
  \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
  \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6, 8]))\n\
  \  end\nend\n"
completions: ["  sum = 0\n  lst.each_with_index do |x, i|\n    if x.even? && i.odd?\n\
    \      sum += x\n    end\n  end\n  sum\nend", "  sum = 0\n  lst.each_with_index\
    \ do |number, index|\n    if number.even? && index.odd?\n      sum += number\n\
    \    end\n  end\n  sum\nend", "  lst.select.with_index { |num, index| num.even?\
    \ && index.odd? }.sum\nend", "  sum = 0\n  i = 0\n  while i < lst.length\n   \
    \ if lst[i] % 2 == 0 && i % 2 != 0\n      sum += lst[i]\n    end\n    i += 1\n\
    \  end\n  sum\nend", "  lst.select.with_index { |x, i| x.even? && i.odd? }.sum\n\
    end", "  result = 0\n  lst.each_with_index do |num, index|\n    result += num\
    \ if index.odd? && num.even?\n  end\n  result\nend", "  lst.select.with_index{|x,\
    \ i| i.odd? && x.even?}.sum\nend", "  sum = 0\n  lst.each_with_index do |item,\
    \ index|\n    sum += item if item.even? && index.odd?\n  end\n  sum\nend", " \
    \ sum = 0\n  lst.each_with_index do |el, i|\n    if el.even? && i.odd?\n     \
    \ sum += el\n    end\n  end\n  sum\nend", "  \nend", "  lst.values_at(* lst.each_index.select\
    \ {|i| i.even?}).inject(:+)\nend", "  i = 1\n  sum = 0\n  while i < lst.length\n\
    \    sum += lst[i] if lst[i].even?\n    i += 2\n  end\n  sum\nend", "  lst.select.with_index\
    \ { |e, i| e.even? && i.odd? }.sum\nend", "  sum = 0\n  for i in (0...lst.length)\n\
    \    if lst[i] % 2 == 0 and i % 2 != 0\n      sum += lst[i]\n    end\n  end\n\
    \  sum\nend", "  lst.values_at(* lst.each_index.select {|i| i.even?}).inject(:+)\n\
    end", "  sum = 0\n  i = 0\n  while i < lst.length\n    if i.odd? && lst[i].even?\n\
    \      sum += lst[i]\n    end\n    i += 1\n  end\n  sum\nend", "  sum = 0\n  lst.each_with_index\
    \ do |num, idx|\n    sum += num if idx.odd? && num.even?\n  end\n  sum\nend",
  "  sum = 0\n  lst.each_with_index { |i, index| sum += i if i.even? && index.odd?\
    \ }\n  sum\nend", "  lst.select.with_index{|x,i| x%2==0 && i%2!=0}.reduce(:+)\n\
    end", "  lst.each_with_index.map{|num,index| num if num.even? && index.odd?}.compact.reduce(:+)\n\
    end", "  lst.values_at(* lst.each_index.select {|i| i.even?}).inject(:+)\nend",
  "  odds = lst.select.with_index{|_,i| i.odd?}\n  odds.select{|i| i.even?}.reduce(:+)\n\
    end", "  sum = 0\n  lst.each_with_index do |v,i|\n    sum += v if v.even? && i.odd?\n\
    \  end\n  sum\nend", "    total = 0\n    lst.each_with_index do |element, index|\n\
    \        total += element if element.even? && index.odd?\n    end\n    total\n\
    end", "  lst.select.with_index { |x, i| x.even? && i.odd? }.sum\nend", "  sum\
    \ = 0\n  lst.each_with_index do |value, index|\n    sum += value if index.odd?\
    \ && value.even?\n  end\n  sum\nend", "  lst.each_with_index.inject(0) { |sum,\
    \ (num, index)| sum + (num if index.odd? && num.even?) }\nend", "  sum = 0\n \
    \ lst.each_with_index { |element, index| sum += element if element.even? && index.odd?\
    \ }\n  sum\nend", "  sum = 0\n  i = 0\n  while i < lst.length\n    if i % 2 ==\
    \ 1 && lst[i] % 2 == 0\n      sum += lst[i]\n    end\n    i += 1\n  end\n  sum\n\
    end", "   lst.select.with_index{|x,i|x.even? if i.odd?}.reduce(:+)\nend", "  \
    \ total = 0\n   lst.each_with_index do |element, index|\n     total += element\
    \ if index.odd? && element.even?\n   end\n   total\nend", "    lst = lst.select.with_index\
    \ { |e, i| i.odd? }\n    # lst = lst.select.with_index { |e, i| i % 2 != 0 }\n\
    \    lst = lst.select { |e| e.even? }\n    return lst.reduce(:+)\nend", "  # return\
    \ sum of even elements at odd indices\n  lst.each_with_index.map { |n, i| i.odd?\
    \ ? n : 0 }.reduce(:+)\nend", "  lst.each_index.inject(0) { |a, i| i.odd? && lst[i].even?\
    \ ? a + lst[i] : a }\nend", "  sum = 0\n  lst.each_with_index { |val, idx| sum\
    \ += val if val.even? && idx.odd? }\n  sum\nend", "  r = 0\n  (1..lst.length-1).step(2)\
    \ { |i| r += lst[i] if lst[i].even? }\n  r\nend", "\tlst.select.with_index { |x,i|\
    \ x.even? && i.odd? }.reduce(:+)\nend", "  # loop to iterate over the array\n\
    \  # conditional statement to check if the value is even and the index is odd\n\
    \  # push even value to new array\n  # sum\n  sum = 0\n  even_at_odd = []\n  lst.each_with_index\
    \ do |number, index|\n    if number.even? && index.odd?\n      even_at_odd <<\
    \ number\n    end\n  end\n  even_at_odd.each do |number|\n    sum += number\n\
    \  end\n  sum\nend", "  sum = 0\n  lst.each_with_index do |n, i|\n    if n.even?\
    \ && i.odd?\n      sum += n\n    end\n  end\n  sum\nend", "  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(:+)\nend", "  # Your code here\nend", "  lst.select.with_index{|e,i|\
    \ e.even? && i.odd?}.reduce(:+)\nend", "  lst.values_at(* lst.each_index.select\
    \ {|i| i.even?}).inject(:+)\nend", "  total = 0\n  lst.each_with_index do |number,\
    \ index|\n    if index.odd? && number.even?\n      total += number\n    end\n\
    \  end\n  total\nend", "    sum = 0\n    lst.each_with_index do |num, index|\n\
    \        if num.even? && index.odd?\n            sum += num\n        end\n   \
    \ end\n    sum\nend", "\tlst.select { |e| e.even? && lst.index(e).odd? }.sum\n\
    end", "  sum = 0\n  lst.each_with_index { |num, i| sum += num if num.even? &&\
    \ i.odd? }\n  sum\nend\np add([4, 2, 6, 7]) #==> 2\np add([4, 2, 6, 7, 8]) #==>\
    \ 10\np add([1, 3, 5, 7, 9]) #==> 0", "  lst.select.with_index { |x, i| x.even?\
    \ && i.odd? }.reduce(:+)\nend", "  lst.select.with_index { |x, i| i.odd? }.select(&:even?).sum\n\
    end", "  a = lst.values_at(* lst.each_index.select {|i| i.even?})\n  a.reduce(:+)\n\
    end", "  lst.select.with_index { |_, i| i.odd? }.sum\nend", "  list_evens = []\n\
    \  lst.each_with_index do |e, i|\n    if i.odd? && e.even?\n      list_evens <<\
    \ e\n    end\n  end\n  list_evens.reduce(:+)\nend", "  result = 0\n  lst.each_with_index\
    \ { |number, index| result += number if index.odd? && number.even? }\n  result\n\
    end", "  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend", " \
    \ sum = 0\n  lst.each_with_index do |item, index|\n    sum += item if item.even?\
    \ && index.odd?\n  end\n  sum\nend", "  # your code here\n  lst.values_at(* lst.each_index.select\
    \ {|i| i.even?})\nend", "  cnt = 1\n  sum = 0\n  lst.each do |num|\n    if num.even?\
    \ && cnt.odd?\n      sum += num\n    end\n    cnt += 1\n  end\n  sum\nend", " \
    \ (0...lst.length).select(&:odd?).map { |i| lst[i] }.reduce(:+)\nend", "  lst.values_at(*\
    \ lst.each_index.select {|i| i.even?})\nend", "  lst.select.with_index { |n, i|\
    \ i.odd? && n.even? }.sum\nend", "  sum = 0\n  lst.each_with_index { |e, i| sum\
    \ += e if i.odd? && e.even? }\n  sum\nend", "  sum = 0\n  lst.each_with_index\
    \ do |e, i|\n    sum += e if i.odd? && e.even?\n  end\n  sum\nend", "  lst.select.with_index\
    \ { |e, i| e.even? && i.odd? }.sum\nend", "  total = 0\n  lst.each_with_index\
    \ do |item, index|\n    if index.odd? && item.even?\n      total += item\n   \
    \ end\n  end\n  total\nend", "  sum = 0\n  lst.each_with_index { |v, i|\n    sum\
    \ += v if i.odd? && v.even?\n  }\n  sum\nend", "  lst.values_at(* lst.each_index.select\
    \ {|i| i.even?}).inject(:+)\nend", "  lst.select.with_index { |n, i| n.even? &&\
    \ i.odd? }.sum\nend", "  # Your code here\n  if lst.count % 2 == 0\n  add = 0\n\
    \  lst.each_with_index {|x, i| add += x if x.even? && i.odd?}\n  add\n  else\n\
    \  add = 0\n  lst.each_with_index {|x, i| add += x if x.even? && i.even?}\n  add\n\
    \  end\nend", "    lst.each_with_index.inject(0) { |sum, (x, i)| i.odd? && x.even?\
    \ ? sum + x : sum }\nend", "    # your code here\n    lst.select.with_index {\
    \ |_, i| (i + 1).odd? }.map(&:even?).inject(:+)\n  end", "  result = 0\n  for\
    \ i in 0..lst.length\n    result += lst[i] if i % 2 != 0 && lst[i] % 2 == 0\n\
    \  end\n  result\nend", "    total = 0\n    lst.each_with_index { |value, index|\
    \ total += value if value.even? && index.odd? }\n    total\nend", "  answer =\
    \ 0\n  lst.each_with_index do |x, i|\n    if i.odd?\n      answer += x\n    end\n\
    \  end\n  answer\nend", "  lst.select.with_index { |e, i| e.even? && i.odd? }.reduce(:+)\n\
    end", "  sum = 0\n  lst.each_with_index do |item, index|\n    if item.even? &&\
    \ index.odd?\n      sum += item\n    end\n  end\n  sum\nend", "  lst.select.with_index\
    \ { |_, index| index.odd? }.sum\nend", "  lst.each_with_index.reduce(0) { |sum,\
    \ (n, i)| n.even? && i.odd? ? sum + n : sum }\nend", "  ans = 0\n  lst.each_with_index\
    \ { |v, i| ans += v if i.odd? && v.even? }\n  ans\nend", "  lst.select.with_index{|_,\
    \ index| index.odd?}.select(&:even?).reduce(:+)\nend\np add([4, 2, 6, 7]) #=>\
    \ 2", "  sum = 0\n  lst.each_with_index do |n, index|\n    sum += n if index.odd?\
    \ && n.even?\n  end\n  sum\nend", "  lst.select.with_index { |v, i| v.even? &&\
    \ i.odd? }.sum\nend", "  odd_lst = lst.values_at(* lst.each_index.select {|i|\
    \ i.odd?})\n  odd_lst.select {|n| n.even?}.sum\nend", "  result = 0\n  lst.each_with_index\
    \ { |v,i| result += v if v.even? && i.odd? }\n  result\nend", "  lst.map.with_index\
    \ { |i,j| i.odd? && j.even? ? i : 0 }.inject(:+)\nend", end, "  lst.select.with_index\
    \ { |x, i| i.odd? && x.even? }.sum\nend", "  sum = 0\n  lst.each_with_index {\
    \ |item, index| sum += item if index.odd? && item.even? }\n  sum\nend", "  lst.values_at(*\
    \ lst.each_index.select{|i| i.even?})\nend", "    odd = lst.select.with_index\
    \ { |x,i| x.even? && i.odd? }\n    odd.inject(:+)\nend", "  # YOUR CODE HERE\n\
    end", "\tlst.select.with_index { |val, idx| val.even? && idx.odd? }.sum\nend",
  "  result = 0\n  lst.each_with_index { |v, i| result += v if v.even? && i.odd? }\n\
    \  result\nend", "   lst.map.with_index { |e, i| e if (i+1).odd? }.compact.reduce(:+)\n\
    end", "  sum = 0\n  lst.each_with_index { |num, index| sum += num if num.even?\
    \ && index.odd? }\n  sum\nend", "  odd_indices = []\n  even_indices = []\n  lst.each_with_index\
    \ do |element, index|\n    if index.odd?\n      odd_indices << element\n    else\n\
    \      even_indices << element\n    end\n  end\n  odd_indices.select(&:even?).sum\n\
    end", "  lst.values_at(* lst.each_index.select {|i| i.even?}).sum\nend", "  lst.select.with_index\
    \ { |el, i| el.even? && i.odd? }.reduce(:+)\nend", "  lst.select.with_index{|v,\
    \ i| i.odd? and v.even?}.reduce(:+)\nend", "  lst.select.with_index{|_, i| i.odd?}.select(&:even?).sum\n\
    end", "    total = 0\n    index = 0\n    while index < lst.length\n        if\
    \ index % 2 != 0 && lst[index] % 2 == 0\n            total += lst[index]\n   \
    \     end\n        index += 1\n    end\n    return total\nend", "\tadd = 0\n\t\
    lst.each_with_index { |item, index| add += item if index.odd? && item.even? }\n\
    \tadd\nend", "  sum = 0\n  lst.each_with_index { |value, index| sum += value if\
    \ value.even? && index.odd? }\n  sum\nend", "  sum = 0\n  lst.each_with_index\
    \ do |number, i|\n    if number.even? && i.odd?\n      sum += number\n    end\n\
    \  end\n  sum\nend", "  lst.select { |num| num.even? && lst.index(num).odd? }.reduce(:+)\n\
    end", "  lst.select.with_index { |n, i| n.even? && i.odd? }.sum\nend", "  sum\
    \ = 0\n  lst.each_with_index do |item, index|\n    sum += item if item.even? &&\
    \ index.odd?\n  end\n  sum\nend", "  # lst.find_all.with_index{|x,i| (x.even?\
    \ && i.odd?)}.reduce(:+)\n  # lst.select.with_index{|x,i| x.even? && i.odd?}.reduce(:+)\n\
    \  lst.select.with_index{|x,i| x.even? && i.odd?}.sum\nend", "  lst.map.with_index\
    \ { |num, idx| num if idx.odd? && num.even? }.compact.sum\nend", "    index =\
    \ 1\n    result = 0\n    while index < lst.length\n        if lst[index] % 2 ==\
    \ 0\n            result += lst[index]\n        end\n        index += 2\n    end\n\
    \    return result\nend", "  result = 0\n  lst.each_with_index { |num, i| result\
    \ += num if i.odd? && num.even? }\n  result\nend", "  lst.map.with_index(1) {\
    \ |num, idx| idx.odd? && num.even? ? num : 0 }.sum\nend", "  add_me = []\n  lst.each_with_index\
    \ { |num, idx| add_me << num if num.even? && idx.odd? }\n  add_me.reduce(:+)\n\
    end", "  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend", "    total\
    \ = 0\n    lst.each_with_index do |number, index|\n        if number.even? &&\
    \ index.odd?\n            total += number\n        end\n    end\n    return total\n\
    end", "    return lst.values_at(* lst.each_index.select{|i| i.even?}).inject(:+)\n\
    \  end\n  \n  ###################################################################################################################################\n\
    \  # Given a list of integers, return the difference between the largest and smallest\
    \ integers in the list.\n  # Examples:\n  # difference([10, 15, 20, 2, 10, 6])\
    \ ==> 18\n  # difference([-3, 4, -9, -1, -2, 15]) ==> 24\n  def difference(nums)\n\
    \    return nums.max - nums.min\n  end\n  \n  ###################################################################################################################################\n\
    \  # Create a function that takes a string and returns a string in which each\
    \ character is repeated once.\n  # Examples:\n  # double_char(\"String\") ==>\
    \ \"SSttrriinngg\"\n  # double_char(\"Hello World!\") ==> \"HHeelllloo  WWoorrlldd!!\"\
    \n  # double_char(\"1234!_ \") ==> \"11223344!!__  \"\n  def double_char(str)\n\
    \    return str.chars.map{|x| x*2}.join(\"\")\n  end\n  \n  ###################################################################################################################################\n\
    \  # If a person is wearing a hat it is \"sunny\", otherwise it is \"rainy\".\
    \ Given an array of people and their hat status, return a count of all those who\
    \ are wearing a hat.\n  # Examples:\n  # count_hats([\"Arturo\", \"Juan\", \"\
    Rene\", \"Sebastian\"]) ==> 3\n  # count_hats([\"Arturo\", \"Juan\", \"Rene\"\
    , \"Sebastian\"], {Sebastian: false}) ==> 2\n  def count_hats(people, hats={})\n\
    \    return people.map{|x| hats[x.to_sym] == false ? 0 : 1}.inject(:+)\n  end\n\
    \  \n  ###################################################################################################################################\n\
    \  # Write a function that will create the following object when invoked:\n  #\
    \ {\n  #   key1: {\n  #     key2: {\n  #       key3: [1,2,3,4]", "    evens =\
    \ lst.select{|x| x.even? && lst.index(x).odd?}\n    evens.reduce(:+)\nend", " \
    \ sum = 0\n  lst.each_with_index { |num, idx| sum += num if num.even? && idx.odd?\
    \ }\n  sum\nend", "  lst.select.with_index { |v, i| i.odd? && v.even? }.sum\n\
    end", "  lst.each_with_index.select { |v, i| i.odd? && v.even? }.map(&:first).sum\n\
    end", "  sum = 0\n  lst.each_with_index { |e, i| sum += e if e.even? && i.odd?\
    \ }\n  sum\nend", "  lst.values_at(* lst.each_index.select {|i| i.even?}).sum\n\
    end", "  result = 0\n  lst.each_with_index do |item,index|\n    result += item\
    \ if item.even? && index.odd?\n  end\n  result\nend", "  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend", "  lst.select.with_index { |x, i| i.odd?\
    \ && x.even? }.sum\nend", "  sum = 0\n  lst.each_with_index { |x, i| sum += x\
    \ if x.even? && i.odd? }\n  sum\nend", "  lst.select.with_index { |a, i| a.even?\
    \ if i.odd? }.sum\nend", "    lst.each_with_index.map { |n,i| n if i.odd? && n.even?\
    \ }.compact.reduce(:+)\nend", "    sum = 0\n    lst.each_with_index do |num, index|\n\
    \        if num.even? && index.odd?\n            sum += num\n        end\n   \
    \ end\n    sum\nend\np add([4, 2, 6, 7]) #==> 2\np add([4, 2, 4, 7]) #==> 4\n\
    p add([9, 4, 5, 3]) #==> 4", "  new_list = []\n  lst.each_with_index { |x,i| new_list\
    \ << x if x.even? && i.odd? }\n  new_list.inject(:+)\nend", "  i = 1\n  sum =\
    \ 0\n  while i < lst.length\n    sum += lst[i] if lst[i].even?\n    i += 2\n \
    \ end\n  sum\nend", "  lst.select.with_index { |x, i| x.even? && i.odd? }.reduce(:+)\n\
    end", "  lst.select.with_index { |n, i| i.odd? && n.even? }.sum\nend", "  sum\
    \ = 0\n  lst.each_with_index do |element, index|\n    sum += element if index.odd?\
    \ && element.even?\n  end\n  sum\nend", "  lst.select.with_index { |_, i| i.odd?\
    \ }.reduce(:+)\nend", "  lst.values_at(* lst.each_index.select {|i| i.even?}).inject(:+)\n\
    end", "  lst.each_with_index.map{|x,i| x if i.odd? && x.even?}.compact.reduce(:+)\n\
    end", "  ans = 0\n  lst.each_with_index { |x,i| ans += x if i.odd? && x.even?\
    \ }\n  ans\nend", "  lst.each_index.select{|i| i.odd?}.map{|i| lst[i]}.select{|i|\
    \ i.even?}.reduce(:+)\nend", "  even_odd = []\n  counter = 0\n  lst.each do |l|\n\
    \    even_odd << l if l.even? && counter.odd?\n    counter += 1\n  end\n  p even_odd.sum\n\
    end", "  lst.each_with_index.select{|x, i| x.even? && i.odd?}.map(&:first).reduce(:+)\n\
    end", "  lst.select(&:even?).select.with_index { |_, i| i.odd? }.sum\nend", " \
    \ lst.select.with_index { |x, i| x.even? && i.odd? }.reduce(:+)\nend", "  sum\
    \ = 0\n  lst.each_with_index { |x, i| sum += x if i.odd? && x.even? }\n  sum\n\
    end", "    sum = 0\n    lst.each_with_index { |n, i| sum += n if n.even? && i.odd?\
    \ }\n    sum\nend", "  # lst.values_at(* lst.each_index.select {|i| i.even?}).inject(:+)\n\
    \  lst.values_at(* lst.each_index.select(&:even?)).inject(:+)\nend", "  total\
    \ = 0\n  i = 0\n  while i < lst.length\n    if lst[i] % 2 == 0 && i % 2 != 0\n\
    \      total += lst[i]\n    end\n    i += 1\n  end\n  total\nend", "  return lst.each_with_index.inject(0)\
    \ { |sum, (x, i)| (i.odd? && x.even?) ? sum + x : sum }\nend", "  # your code\
    \ here\n  sum = 0\n  lst.each_with_index { |x, i| sum += x if x.even? && i.odd?\
    \ }\n  sum\nend", "  return lst.select.with_index { |_, i| i.odd? }.sum\nend",
  "  add = 0\n  for i in lst\n    add += i if lst.index(i).odd? && i.even?\n  end\n\
    \  add\nend", "  total = 0\n  new_lst = []\n  lst.each_with_index { |x, i| new_lst\
    \ << x if i.odd? && x.even? }\n  new_lst.each { |x| total += x }\n  total\nend",
  "\tresult = 0\n\tlst.each_with_index do |v, i|\n\t\tif i.odd? && v.even?\n\t\t\t\
    result += v\n\t\tend\n\tend\n\tresult\nend", "  lst.select.with_index{|_, i| i.odd?}.select(&:even?).sum\n\
    end", "  result = 0\n  lst.each_with_index { |num, idx|\n    result += num if\
    \ idx.odd? && num.even?\n  }\n  result\nend", "    sum = 0\n    for i in 0..lst.length-1\n\
    \        if lst[i] % 2 == 0 and i % 2 != 0\n            sum += lst[i]\n      \
    \  end\n    end\n    return sum\nend", "  lst.select.with_index { |item, index|\
    \ item.even? && index.odd? }.sum\nend", "  lst.select.with_index{|e, i| e.even?\
    \ && i.odd?}.sum\nend", "  lst.select.with_index{|v,i| v.even? and i.odd?}.reduce(:+)\n\
    end", "  lst.each_index.inject(0) { |result, index| index.odd? && lst[index].even?\
    \ ? result + lst[index] : result }\nend", "  lst.each_index.select { |i| i.odd?\
    \ }.map { |i| lst[i] }.inject(:+)\nend", "  lst.select.with_index { |x, i| x.even?\
    \ && i.odd? }.sum\nend", "  lst.select.with_index { |num, idx| num.even? && idx.odd?\
    \ }.sum\nend", "  lst.each_with_index.inject(0) { |a, (e, i)| i.odd? && e.even?\
    \ ? a + e : a }\nend", "  lst.values_at(* lst.each_index.select {|i| i.even?}).reduce(:+)\n\
    end", "  lst.values_at(* lst.each_index.select {|i| i.even?}).inject(:+)\nend",
  "  lst.select.with_index { |e, i| e.even? && i.odd? }.sum\nend", "  lst.values_at(*\
    \ lst.each_index.select{|i| i.even?}).inject(:+)\nend", "  lst.values_at(* lst.each_index.select\
    \ {|i| i.even?}).inject(:+)\nend", "  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\n\
    end", "  sum = 0\n  lst.each_with_index { |num, index| sum += num if num.even?\
    \ && index.odd? }\n  sum\nend", "\tlst.select { |n| n.even? && lst.index(n).odd?\
    \ }.reduce(:+)\nend", "    new_arr = []\n    lst.each_with_index do |num, index|\n\
    \        if num.even? && index.odd?\n            new_arr << num\n        end\n\
    \    end\n    new_arr.sum\nend", "\tlst.each_with_index.map { |x, i| x if i.odd?\
    \ && x.even? }.compact.reduce(:+)\nend", "    n = 0\n    lst.each_with_index do\
    \ |x, i|\n        if x.even? && i.odd?\n            n += x\n        end\n    end\n\
    \    return n\nend", "    # lst.select{|x| lst.index(x).even? and x.even?}.reduce(:+)\n\
    \    (0...lst.length).step(2) {|i| lst[i] += lst[i+1] if lst[i+1] && lst[i+1].even?\
    \ }\n    lst.select(&:even?).reduce(:+)\nend", "    lst.each_with_index.inject(0)\
    \ { |sum, (el, idx)| idx.odd? && el.even? ? sum + el : sum }\nend", "  lst.select.with_index\
    \ { |v, i| v.even? && i.odd? }.reduce(:+)\nend", "  count = 1\n  sum = 0\n  lst.each\
    \ do |num|\n    if num.even? && count.odd?\n      sum += num\n    end\n    count\
    \ += 1\n  end\n  return sum\nend", "  odds = lst.select.with_index { |_, i| i.odd?\
    \ }\n  odds.inject(0) { |acc, e| e.even? ? acc + e : acc }\nend", "  lst.select.with_index\
    \ { |x, i| i.odd? && x.even? }.sum\nend", "  res = 0\n  lst.each_with_index {\
    \ |i, index| res += i if i.even? && index.odd? }\n  res\nend", "  lst.select.with_index{|x,\
    \ i| x.even? && i.odd?}.reduce(:+)\nend", "  i = 0\n  lst.each_with_object([])\
    \ do |num, accum|\n    accum << num if i.odd? && num.even?\n    i += 1\n  end.reduce(:+)\n\
    end", "  new_lst = []\n  lst.each_with_index do |val, index|\n    if val.even?\
    \ && index.odd?\n      new_lst << val\n    end\n  end\n  new_lst.sum\nend", " \
    \ lst.select.with_index { |x, i| x.even? && i.odd? }.sum\nend", "  lst.select.with_index\
    \ { |x, i| i.odd? && x.even? }.reduce(:+)\nend", "  result = []\n  lst.each_with_index\
    \ do |number, index|\n    if number.even? && index.odd?\n      result << number\n\
    \    end\n  end\n  result.sum\nend", "  lst.each_with_index.reduce(0) { |a, (v,\
    \ i)| a + v if i.odd? && v.even? }\nend", "  lst.select.with_index { |_, i| i.odd?\
    \ }.select(&:even?).sum\nend", "  total = 0\n  lst.each_with_index do |element,\
    \ index|\n    total += element if index.odd? && element.even?\n  end\n  total\n\
    end", "  lst.select { |num| num.even? }.select.with_index { |num, index| index.odd?\
    \ }.sum\nend", "  sum = 0\n  lst.each_with_index { |n, i| sum += n if n.even?\
    \ && i.odd? }\n  sum\nend", "  lst.each_with_index.map { |x, i| x if i.odd? }.compact.sum\n\
    end", "  sum = 0\n  lst.each_with_index do |x,i|\n    sum += x if i.odd? && x.even?\n\
    \  end\n  sum\nend", "  lst.select.with_index { |x, i| x.even? && i.odd? }.sum\n\
    end", "  sum = 0\n  lst.each_with_index do |number, index|\n    sum += number\
    \ if number.even? && index.odd?\n  end\n  sum\nend", "  sum = 0\n  lst.each_with_index\
    \ { |x, idx| sum += x if x.even? && idx.odd? }\n  sum\nend", "    lst.select.with_index\
    \ { |num, i| i.odd? }.inject(:+)\nend", "\tlst.select.with_index { |e,i| e.even?\
    \ && i.odd? }.reduce(:+)\nend", "  sum = 0\n  counter = 0\n  while counter < lst.length\n\
    \    if lst[counter] % 2 == 0\n      sum += lst[counter]\n    end\n    counter\
    \ += 2\n  end\n  sum\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
