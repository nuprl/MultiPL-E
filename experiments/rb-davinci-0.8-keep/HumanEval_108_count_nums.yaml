name: HumanEval_108_count_nums
language: rb
prompt: "# Write a function count_nums which takes an array of integers and returns\n\
  # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
  \ then its first signed digit will be negative:\n# e.g. -123 has signed digits -1,\
  \ 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) == 1\n#\
  \ >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
  \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
  \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
  \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n\
  \    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
  \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
  \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
completions: ["  sum_digits = 0\n  count = 0\n  arr.each do |i|\n    if i < 0\n  \
    \    sum_digits = sum_digits + (i * -1)\n    else\n      sum_digits = sum_digits\
    \ + i\n    end\n  end\n  arr.each do |i|\n    if i < 0\n      if sum_digits -\
    \ i < 0\n        count = count + 1\n      end\n    else\n      if sum_digits -\
    \ i > 0\n        count = count + 1\n      end\n    end\n  end\n  return count\n\
    end", "  arr.select{|num| num.abs.to_s.chars.map(&:to_i).reduce(:+) > 0}.length\n\
    end", end, "  arr.count { |x| sum_digits(x) > 0 }\nend", "  count = 0\n  arr.each\
    \ do |num|\n    digits = num.abs.to_s.split('').map { |i| i.to_i }\n    count\
    \ += 1 if digits.inject(:+) > 0\n  end\n  count\nend", "    ret = 0\n    for i\
    \ in arr\n        if sum_digits(i) > 0\n            ret += 1\n        end\n  \
    \  end\n    return ret\nend", "  arr.select { |i| i.abs.digits.sum > 0 }.count\n\
    end", "  # TODO: Implement this function.\nend", "  # your code here\nend", " \
    \ counter = 0\n  arr.each do |num|\n    if sum_of_digits(num) != 0\n      counter\
    \ += 1\n    end\n  end\n  counter\nend", "    arr.select { |n| n < 0 ? n.abs.digits.sum\
    \ > 0 : n.digits.sum > 0 }.count\nend", "  # count variable\n  count = 0\n  #\
    \ loop through each element in the array\n  arr.each do |num|\n    # initialize\
    \ sum variable\n    sum = 0\n    # break if num is 0\n    break if num == 0\n\
    \    # set num to be positive\n    num = num.abs\n    # loop until num is 0\n\
    \    while num > 0\n      # add the last digit of num to sum\n      sum += num\
    \ % 10\n      # divide num by 10 to truncate the last digit\n      num /= 10\n\
    \    end\n    # if sum is greater than 0, increment count by 1\n    count += 1\
    \ if sum > 0\n  end\n  # return count\n  count\nend", "  # YOUR CODE HERE\nend",
  "  arr.select { |n| n.abs.digits.sum > 0 }.size\nend", "  arr.select{|x| x < 0 ?\
    \ x.to_s.delete(\"-\").split(\"\").map(&:to_i).reduce(:+) > 0 : x.to_s.split(\"\
    \").map(&:to_i).reduce(:+) > 0}.length\nend", "  # TODO: implement this\nend",
  "  arr.count { |n| sum_digits(n) > 0 }\nend", "  # count = 0\n  # arr.each do |number|\n\
    \  #   if number > 0\n  #     if number.to_s.split('').map { |element| element.to_i\
    \ }.reduce(:+) > 0\n  #       count += 1\n  #     end\n  #   else\n  #     if\
    \ number.to_s.split('').map { |element| element.to_i }.reduce(:+) < 0\n  #   \
    \    count += 1\n  #     end\n  #   end\n  # end\n  # count\n  arr.select { |number|\
    \ (number > 0 && number.to_s.split('').map { |element| element.to_i }.reduce(:+)\
    \ > 0) || (number < 0 && number.to_s.split('').map { |element| element.to_i }.reduce(:+)\
    \ < 0) }.count\nend", "  arr.map(&:abs).map { |num| num.to_s.chars.map(&:to_i).reduce(:+)\
    \ }.select { |el| el > 0 }.count\nend", "  arr.select{|x| sum_digits(x) > 0}.length\n\
    end", "  # TODO: complete this function\nend", "\tcounter = 0\n\tarr.each do |i|\n\
    \t\tif (i >= 0) && (i < 10)\n\t\t\tcounter += 1\n\t\telsif (i > -10) && (i < 0)\n\
    \t\t\tcounter += 1\n\t\telse\n\t\t\ti = i.to_s.split('')\n\t\t\tnew_array = []\n\
    \t\t\ti.each do |x|\n\t\t\t\tnew_array << x.to_i\n\t\t\tend\n\t\t\tif new_array.reduce(:+)\
    \ > 0\n\t\t\t\tcounter += 1\n\t\t\tend\n\t\tend\n\tend\n\tcounter\nend", "  count\
    \ = 0\n  arr.each do |x|\n    count += 1 if sum_digits(x) > 0\n  end\n  count\n\
    end", "  count = 0\n  arr.each do |num|\n    if sum_of_digits(num) > 0\n     \
    \ count += 1\n    end\n  end\n  count\nend", "  n = 0\n  arr.each do |el|\n  \
    \  n += 1 if sum_digits(el) > 0\n  end\n  n\nend", "  arr.count { |x| x.abs.digits.sum\
    \ > 0 }\nend", "  arr.select { |x| sum_digits(x) > 0 }.count\nend", "  i = 0\n\
    \  count = 0\n  while i < arr.length\n    digits = arr[i].to_s.split('')\n   \
    \ sum = 0\n    j = 0\n    while j < digits.length\n      sum += digits[j].to_i\n\
    \      j += 1\n    end\n    if sum > 0\n      count += 1\n    end\n    i += 1\n\
    \  end\n  count\nend", end, "    if arr.length == 0\n        return 0\n    end\n\
    \    count = 0\n    arr.each do |x|\n        abs_sum = 0\n        num = x\n  \
    \      if x < 0\n            num = x * -1\n        end\n        while num != 0\n\
    \            abs_sum += num % 10\n            num = num / 10\n        end\n  \
    \      if abs_sum > 0\n            count += 1\n        end\n    end\n    return\
    \ count\nend", "  signed_digits = arr.map do |n|\n    digits = n.abs.to_s.split('').map(&:to_i)\n\
    \    if n < 0\n      digits.map { |d| -d }\n    else\n      digits\n    end\n\
    \  end\n  signed_digits.select { |d| d.reduce(:+) > 0 }.count\nend", "  counter\
    \ = 0\n  arr.each do |x|\n    if num_total(x) > 0\n      counter += 1\n    end\n\
    \  end\n  counter\nend", "  arr.count { |e| e.abs.digits.sum > 0 }\nend", "  arr.count\
    \ { |x| x.abs.digits.sum.positive? }\nend", "    arr.length.times do |i|\n   \
    \     if arr[i] < 0\n            arr[i] = arr[i] * -1\n        end\n    end\n\
    \    count = 0\n    arr.each do |num|\n        num = num.to_s.split('')\n    \
    \    sum = 0\n        num.each do |i|\n            sum += i.to_i\n        end\n\
    \        if sum > 0\n            count += 1\n        end\n    end\n    return\
    \ count\nend", "  arr.count { |num| num.digits.sum > 0 }\nend", "  # your code\
    \ here\nend", "  # YOUR CODE HERE\nend", "  arr.select{|i| i.abs.to_s.split('').map(&:to_i).reduce(:+)\
    \ > 0}.count\nend", "  arr.count do |num|\n    num < 0 ? sum_digits(-num) > 0\
    \ : sum_digits(num) > 0\n  end\nend", "  arr.count do |i|\n    # convert number\
    \ to string, split into chars and convert back to ints\n    arr = i.to_s.split('').map(&:to_i)\n\
    \    # use reduce to add all of the numbers in the array\n    # if the sum is\
    \ greater than 0, return true\n    arr.reduce(:+) > 0\n  end\nend", "\t# This\
    \ is your job. :)\n\t\nend", "  arr.inject(0) { |acc, elem| elem.abs.to_s.each_char.map(&:to_i).reduce(:+)\
    \ > 0 ? acc + 1 : acc }\nend", "    count = 0\n    arr.each do |num|\n       \
    \ if num < 0\n            num = num * -1\n        end\n        if (num % 10) +\
    \ (num / 10) > 0\n            count += 1\n        end\n    end\n    return count\n\
    end", end, "  non_zero_digits = []\n  arr.each do |num|\n    sign = num < 0 ?\
    \ -1 : 1\n    digits = num.abs.to_s.split('').map { |num| num.to_i }\n    non_zero_digits\
    \ << num if digits.inject(:+) * sign > 0\n  end\n  non_zero_digits.length\nend",
  "  arr.count { |x| x != 0 && sum_digits(x) > 0 }\nend", "  # your code here\nend",
  "  count = 0\n  arr.each do |n|\n    str = n.to_s\n    sum = 0\n    str.split('').each\
    \ do |char|\n      if char != '-'\n        sum += char.to_i\n      end\n    end\n\
    \    if sum > 0\n      count += 1\n    end\n  end\n  count\nend", "\tcount = 0\n\
    \tarr.each do |i|\n\t\tsum = 0\n\t\twhile i > 0\n\t\t\tsum += i % 10\n\t\t\ti\
    \ /= 10\n\t\tend\n\t\tcount += 1 if sum > 0\n\tend\n\tcount\nend", "  arr.reject\
    \ { |x| x < 0 }.select { |x| x.digits.sum > 0 }.length\nend", "  x = 0\n  arr.each\
    \ do |i|\n    if i.abs.to_s.split('').map { |s| s.to_i }.inject(:+) > 0\n    \
    \  x += 1\n    end\n  end\n  x\nend", "  # your code here\nend", "  # Your code\
    \ here\nend", "  count = 0\n  arr.each do |num|\n    sum = 0\n    while num !=\
    \ 0\n      sum += num % 10\n      num /= 10\n    end\n    if sum > 0\n      count\
    \ += 1\n    end\n  end\n  count\nend", "  # YOUR CODE HERE\nend", "  arr.count\
    \ { |num| num_sum(num) > 0 }\nend", "  return 0 if arr.empty?\n  sum = 0\n  arr.each\
    \ do |num|\n    num = num.abs\n    until num == 0\n      sum += num % 10\n   \
    \   num /= 10\n    end\n  end\n  return sum\nend", "  count = 0\n  arr.each do\
    \ |element|\n    count += 1 if sum_digits(element) > 0\n  end\n  count\nend",
  "\tarr.count { |n| n != 0 }\nend", "  # TODO: Implement this.\nend", "  # YOUR CODE\
    \ HERE\nend", "  # creates a variable to hold the number of positive integers\n\
    \  positive_nums = 0\n  # begins looping through each item in the array\n  arr.each\
    \ do |item|\n    # creates a variable to hold the absolute value of each item\n\
    \    absolute_value = item.abs\n    # creates a variable to hold the sum of the\
    \ digits\n    digit_sum = 0\n    # begins looping through each digit\n    while\
    \ absolute_value > 0\n      # adds the digit value to the digit sum\n      digit_sum\
    \ += absolute_value % 10\n      # cuts off the last digit of the integer\n   \
    \   absolute_value /= 10\n    end\n    # checks to see if the digit sum is positive\n\
    \    if digit_sum > 0\n      # adds one to the variable holding the number of\
    \ positive integers\n      positive_nums += 1\n    end\n  end\n  # returns the\
    \ number of positive integers\n  positive_nums\nend", "  # your code here\nend",
  "  arr.count { |x| x.abs.digits.sum > 0 }\nend", "  # your code here\nend", "  arr.map\
    \ { |x| x.abs.to_s.split('').map(&:to_i).reduce(:+) }.count { |x| x > 0 }\nend",
  "  arr.select{|num| num.abs.to_s.chars.map(&:to_i).reduce(:+) > 0}.length\nend",
  "  arr.count { |x| x.digits.sum.positive? }\nend", "  return arr.count{|x| signed_digits_sum(x)\
    \ > 0}\nend", "  counter = 0\n  arr.each do |x|\n    if x.abs.to_s.split('').inject(0)\
    \ { |acc, y| acc + y.to_i } > 0\n      counter += 1\n    end\n  end\n  counter\n\
    end", "  return 0 if arr.empty?\n  arr.count { |num| num < 0 ? sum_digits(num\
    \ * -1) > 0 : sum_digits(num) > 0 }\nend", "  arr.count { |i| i.abs.digits.sum\
    \ > 0 }\nend", "  arr.count { |num| num.abs.digits.sum > 0 }\nend", "  arr.select\
    \ { |num| num.abs.digits.sum.positive? }.size\nend", "    ans = 0\n    for x in\
    \ arr\n        if x.to_s.split('').map(&:to_i).reduce(:+) > 0\n            ans\
    \ += 1\n        end\n    end\n    return ans\nend", "  num = 0\n  arr.each do\
    \ |n|\n    if n.abs.to_s.split('').reduce(0) { |sum, n| sum + n.to_i } > 0\n \
    \     num += 1\n    end\n  end\n  num\nend", "  arr.count do |i|\n    i < 0 ?\
    \ i.abs.digits.sum > 0 : i.digits.sum > 0\n  end\nend", "  arr.find_all { |num|\n\
    \    num.abs.to_s.split('').map(&:to_i).reduce(:+) > 0\n  }.count\nend", "  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend", "  arr.count { |x| (x.abs == x ? x :\
    \ -x).to_s.split('').map(&:to_i).reduce(:+) > 0 }\nend", "\tarr.count{|x| x.abs.to_s.split('').map(&:to_i).reduce(:+)\
    \ > 0}\nend", "  counter = 0\n  arr.each do |x|\n    if x > 0\n      sum = 0\n\
    \      x = x.to_s.split('')\n      x.each do |i|\n        sum += i.to_i\n    \
    \  end\n      if sum > 0\n        counter += 1\n      end\n    elsif x < 0\n \
    \     sum = 0\n      x = x.to_s.split('')\n      x.each do |i|\n        sum +=\
    \ i.to_i\n      end\n      if sum < 0\n        counter += 1\n      end\n    end\n\
    \  end\n  counter\nend", "  sum = 0\n  arr.each do |num|\n    temp = 0\n    if\
    \ num < 0\n      temp += -num % 10\n      num = -num / 10\n    end\n    while\
    \ num > 0\n      temp += num % 10\n      num /= 10\n    end\n    sum += 1 if temp\
    \ > 0\n  end\n  sum\nend", "  count = 0\n  arr.each do |i|\n    count += 1 if\
    \ sum_digits(i) > 0\n  end\n  count\nend", "  # your code here\nend", "  arr.select\
    \ { |e| e > 0 ? e.digits.sum > 0 : e.digits.sum < 0 }.size\nend", "  # 1 - get\
    \ one big number\n  # 2 - iterate over each digit\n  # 3 - check if sum of digits\
    \ is more than 0\n  # 4 - return count of numbers\n  arr.select { |num| num.abs.digits.sum\
    \ > 0 }.count\nend", "  arr.count do |x|\n    sum_digits(x) > 0\n  end\nend",
  "  arr.count { |num| num.digits.reduce(:+) > 0 }\nend", "  arr.count { |n| sum_digits(n)\
    \ > 0 }\nend", "    # REPLACE THIS LINE WITH YOUR CODE\nend", "  count = 0\n \
    \ arr.each do |x|\n    if x < 0\n      num = x * -1\n    else\n      num = x\n\
    \    end\n    sum = 0\n    while num != 0\n      sum += num % 10\n      num =\
    \ num / 10\n    end\n    if sum > 0\n      count += 1\n    end\n  end\n  return\
    \ count\nend", "  count = 0\n  arr.each do |num|\n    count += 1 if sum_signed_digits(num)\
    \ > 0\n  end\n  count\nend", "  count = 0\n  arr.each do |i|\n    if i < 0\n \
    \     i = -i\n    end\n    nums = i.to_s.split('')\n    sum = 0\n    nums.each\
    \ do |j|\n      sum += j.to_i\n    end\n    if sum > 0\n      count += 1\n   \
    \ end\n  end\n  return count\nend", "  count = 0\n  arr.each do |num|\n    if\
    \ num < 0\n      num = num * -1\n    end\n    while num > 0\n      count += num\
    \ % 10\n      num = num / 10\n    end\n  end\n  count\nend", "  count = 0\n  arr.each\
    \ do |x|\n    sum = 0\n    if x < 0\n      x = x * -1\n    end\n    while x >\
    \ 0\n      sum += x % 10\n      x = x / 10\n    end\n    if sum > 0\n      count\
    \ += 1\n    end\n  end\n  return count\nend", "  arr.reduce(0) { |sum, x| sum\
    \ + (x.abs.digits.sum > 0 ? 1 : 0) }\nend", "  # Your code here\nend", "  # YOUR\
    \ CODE HERE\nend", "  arr.count do |num|\n    digits = num.to_s.chars.map(&:to_i)\n\
    \    sum = digits.inject(:+)\n    sum > 0\n  end\nend", "\t# return 0 if arr.length\
    \ == 0\n\t# count = 0\n\t# arr.each do |num|\n\t# \tsum = 0\n\t# \tif num < 0\n\
    \t# \t\tsum += num.abs.to_s[0].to_i\n\t# \t\tnum = num.abs.to_s[1..-1].to_i\n\t\
    # \tend\n\t# \twhile num > 0\n\t# \t\tsum += num % 10\n\t# \t\tnum /= 10\n\t#\
    \ \tend\n\t# \tif sum > 0\n\t# \t\tcount += 1\n\t# \tend\n\t# end\n\t# count\n\
    \tarr.inject(0) { |sum, num| sum + (num < 0 ? num.abs.to_s[0].to_i : 0) + num.abs.to_s.chars.map(&:to_i).inject(:+)\
    \ }\nend", "\tarr.select { |x| x.abs.to_s.split('').map(&:to_i).reduce(:+) > 0\
    \ }.length\nend", "  # your code here\nend", "  arr.count { |x| x.abs.digits.sum\
    \ > 0 }\nend", "  return arr.count { |x| (x < 0 ? -x : x).digits.sum > 0 }\nend",
  "  arr.select { |e| e.abs.digits.sum.positive? }.size\nend", "    return arr.count{|i|\
    \ i.abs.digits.sum > 0}\nend", "  return 0 if arr.empty?\n  positive_elements\
    \ = arr.reject { |el| el < 0 }\n  negative_elements = arr.reject { |el| el > 0\
    \ }\n  positive_count = positive_elements.map { |el| el.digits.reduce(:+) }.count\
    \ { |el| el > 0 }\n  negative_count = negative_elements.map { |el| el.digits.reduce(:+)\
    \ }.count { |el| el < 0 }\n  positive_count + negative_count\nend", "  count =\
    \ 0\n  arr.each do |x|\n    count += 1 if x.abs > 0 && x.abs % 10 > 0\n  end\n\
    \  count\nend", "  arr.select{|x| x.digits.sum > 0}.count\nend", "  count = 0\n\
    \  arr.each do |n|\n    sign = 1\n    if n < 0\n      sign = -1\n    end\n   \
    \ count += 1 if sum_digits(n*sign) > 0\n  end\n  count\nend", "  arr.count { |n|\
    \ n.abs.digits.sum > 0 }\nend", "  arr.find_all { |x| sum_of_digits(x) > 0 }.length\n\
    end", "  sum = 0\n  arr.each do |num|\n    sum += num.abs.to_s.split('').map(&:to_i).reduce(:+)\n\
    \  end\n  sum\nend", "  # YOUR CODE HERE\nend", "  arr.count { |num| num.digits.sum\
    \ > 0 }\nend", "\t# your code here\nend", "  arr.count { |n| n.abs.digits.sum.positive?\
    \ }\nend", "  arr.select { |x| x.digits.sum > 0 }.length\nend", "  arr.count {\
    \ |number| number.digits.sum > 0 }\nend", "  arr.count { |x| x != 0 && x != -x\
    \ && arr.reduce(:+) != 0 }\nend", "  arr.count do |x|\n    x.digits.reduce(:+)\
    \ > 0\n  end\nend", "  arr.count { |n| sum_digits(n) > 0 }\nend", end, "\tindex\
    \ = 0\n\twhile index < arr.length\n\t\tif arr[index] < 0\n\t\t\tsign = -1\n\t\t\
    else\n\t\t\tsign = 1\n\t\tend\n\t\tsum = 0\n\t\tnum = arr[index]\n\t\twhile num\
    \ != 0\n\t\t\tsum += num % 10\n\t\t\tnum = num / 10\n\t\tend\n\t\tsum = sum *\
    \ sign\n\t\tif sum <= 0\n\t\t\tarr.delete_at(index)\n\t\telse\n\t\t\tindex +=\
    \ 1\n\t\tend\n\tend\n\treturn arr.length\nend", "  count = 0\n  if arr == []\n\
    \    count\n  else\n    arr.each do |num|\n      if signed_digits(num).reduce(:+)\
    \ > 0\n        count += 1\n      end\n    end\n    count\n  end\nend", "  # your\
    \ code here\nend", "    arr.count { |x| x.abs.digits.sum > 0 }\nend", "  count\
    \ = 0\n  arr.each do |num|\n    if sum_digits(num) > 0\n      count += 1\n   \
    \ end\n  end\n  count\nend", "  sum = 0\n  x = 0\n  # your code here\n  while\
    \ x < arr.length\n    for i in arr[x].to_s.split('')\n      sum += i.to_i\n  \
    \  end\n    if sum > 0\n      count += 1\n    end\n    sum = 0\n    x += 1\n \
    \ end\n  return count\nend", "  arr.count { |x| x.abs.digits.sum > 0 }\nend",
  "  count = 0\n  arr.each do |number|\n    count += 1 if signed_digits(number).sum\
    \ > 0\n  end\n  count\nend", "  arr.count { |i| get_sum_of_digits(i) > 0 }\nend",
  "  arr.select { |el|\n    el >= 0 ? el.to_s.chars.map(&:to_i).sum > 0 : (el * -1).to_s.chars.map(&:to_i).sum\
    \ > 0\n  }.count\nend", "  arr.select { |n| n.digits.sum > 0 }.count\nend", " \
    \ if arr.empty?\n    return 0\n  else\n    arr.select! { |x| x < 0 }\n    arr.map!\
    \ { |x| x.abs }\n    arr.map! { |x| x.to_s.split('').map(&:to_i) }\n    arr.map!\
    \ { |x| x.reduce(:+) }\n    arr.map! { |x| x > 0 }\n    arr.count(true)\n  end\n\
    end", "  count = 0\n  for i in arr\n    if sum_digits(i) > 0\n      count += 1\n\
    \    end\n  end\n  return count\nend", "  arr.select { |num| sum_digits(num) >\
    \ 0 }.length\nend", "    number = 0\n    arr.each { |x| number += 1 if x.abs.digits.sum\
    \ > 0 }\n    number\nend", "  count = 0\n  arr.each do |num|\n    num_sum = 0\n\
    \    num_str = num.to_s\n    if num < 0\n      num_str.slice!(0)\n    end\n  \
    \  num_str.each_char do |c|\n      num_sum += c.to_i\n    end\n    if num_sum\
    \ > 0\n      count += 1\n    end\n  end\n  count\nend", "  sum = 0\n  arr.each\
    \ do |x|\n    sum += x.abs.to_s.split('').map { |digit| digit.to_i }.reduce(:+)\n\
    \  end\n  sum > 0 ? sum : 0\nend", "  positive_count = 0\n  arr.each do |num|\n\
    \    if num > 0\n      digits = num.digits\n      total = 0\n      digits.each\
    \ do |d|\n        total += d\n      end\n      if total > 0\n        positive_count\
    \ += 1\n      end\n    else\n      digits = num.digits\n      total = 0\n    \
    \  digits.each do |d|\n        total += d\n      end\n      if total < 0\n   \
    \     positive_count += 1\n      end\n    end\n  end\n  positive_count\nend",
  "  arr.count { |num| num.digits.sum.positive? }\nend", "\t\nend", "  arr.select\
    \ { |num| sum_digits(num) > 0 }.length\nend", "  # YOUR CODE HERE\nend", "  arr.count\
    \ { |num| num.to_s.chars.map(&:to_i).sum > 0 }\nend", "  if arr.length == 0\n\
    \    return 0\n  end\n  nums = 0\n  arr.each do |num|\n    if num < 0\n      num\
    \ *= -1\n    end\n    nums += num_digits(num)\n  end\n  return nums\nend", " \
    \   # YOUR CODE HERE\nend", "  return 0 if arr.empty?\n  arr.select { |x| x.abs.digits.sum\
    \ > 0 }.size\nend", "  count = 0\n  if arr.empty?\n    return count\n  else\n\
    \    arr.each do |x|\n      if x < 0\n        arr = arr.delete(x)\n        arr.push(x.abs)\n\
    \      end\n    end\n    arr.each do |x|\n      if x > 0\n        arr2 = x.to_s.split('')\n\
    \        sum = 0\n        arr2.each do |y|\n          sum += y.to_i\n        end\n\
    \        if sum > 0\n          count += 1\n        end\n      end\n    end\n \
    \ end\n  return count\nend", "\tcounter = 0\n\tsum = 0\n\tarr.each do |x|\n\t\t\
    if x.abs < 10\n\t\t\tcounter += 1\n\t\t\tsum += x.abs\n\t\telsif x.abs >= 10 &&\
    \ x.abs < 100\n\t\t\tcounter += 1\n\t\t\tsum += (x.abs / 10) + (x.abs % 10)\n\t\
    \telsif x.abs >= 100 && x.abs < 1000\n\t\t\tcounter += 1\n\t\t\tsum += (x.abs\
    \ / 100) + ((x.abs % 100) / 10) + ((x.abs % 100) % 10)\n\t\telsif x.abs >= 1000\
    \ && x.abs < 10000\n\t\t\tcounter += 1\n\t\t\tsum += (x.abs / 1000) + ((x.abs\
    \ % 1000) / 100) + (((x.abs % 1000) % 100) / 10) + (((x.abs % 1000) % 100) % 10)\n\
    \t\telsif x.abs >= 10000 && x.abs < 100000\n\t\t\tcounter += 1\n\t\t\tsum += (x.abs\
    \ / 10000) + ((x.abs % 10000) / 1000) + (((x.abs % 10000) % 1000) / 100) + ((((x.abs\
    \ % 10000) % 1000) % 100) / 10) + ((((x.abs % 10000) % 1000) % 100) % 10)\n\t\t\
    elsif x.abs >= 100000 && x.abs < 1000000\n\t\t\tcounter += 1\n\t\t\tsum += (x.abs\
    \ / 100000) + ((x.abs % 100000) / 10000) + (((x.abs % 100000) % 10000) / 1000)\
    \ + ((((x.abs % 100000) % 10000) % 1000) / 100) + (((((x.abs % 100000) % 10000)\
    \ % 1000) % 100) / 10) + (((((x.abs % 100000) % 10000) % 1000) % 100) % 10)\n\t\
    \telsif x.abs >= 1000000 && x.abs < 10000000\n\t\t\tcounter += 1\n\t\t\tsum +=\
    \ (x.abs / 1000000) + ((x.abs % 1000000) / 100000) + (((x.abs", "  count = 0\n\
    \  arr.each do |element|\n    abs_value = element.abs.to_s.split('').inject(0)\
    \ { |sum, i| sum + i.to_i }\n    count += 1 if abs_value > 0\n  end\n  count\n\
    end", "  counter = 0\n  arr.each do |num|\n    sum = 0\n    num.to_s.each_char\
    \ do |x|\n      if x == \"-\"\n        next\n      else\n        sum += x.to_i\n\
    \      end\n    end\n    if sum > 0\n      counter += 1\n    end\n  end\n  counter\n\
    end", "\t# write your code here\nend", "  arr.select { |x| x.digits.sum > 0 }.length\n\
    end", "  arr.select { |num| num.abs.digits.sum > 0 }.length\nend", "  count =\
    \ 0\n  arr.each do |x|\n    digits = x.to_s.split('')\n    digits.map! { |y| y.to_i\
    \ }\n    if digits.inject(:+) > 0\n      count += 1\n    end\n  end\n  count\n\
    end", "  def sign_digit(num)\n    num < 0 ? num.abs % 10 : num % 10\n  end", " \
    \ total = 0\n  i = 0\n  while i < arr.length\n    if is_positive?(arr[i]) == true\n\
    \      total += 1\n    end\n    i += 1\n  end\n  return total\nend", "  arr.count\
    \ do |i|\n    i.abs.digits.sum > 0\n  end\nend", "  # Solution:\n  arr.count {\
    \ |n| n.abs.digits.sum > 0 }\nend", "  if arr.length == 0\n    0\n  else\n   \
    \ arr.find_all { |i| sum_digits(i) > 0 }.length\n  end\nend", "  arr.count { |a|\
    \ sum_digits(a) > 0 }\nend", "  arr.count do |el|\n    sum_of_digits(el) > 0\n\
    \  end\nend", "  arr.reduce(0) { |acc, num| acc + (num.abs.digits.sum > 0 ? 1\
    \ : 0) }\nend", "  # YOUR CODE HERE\nend", "  # YOUR CODE HERE\nend", "  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend", "  arr.count { |n| n.abs.digits.sum\
    \ > 0 }\nend", "  arr.count { |n| n.abs.digits.sum > 0 }\nend", "  # your code\
    \ here\nend", "  arr.count { |num| num.abs.digits.sum.positive? }\nend", "  arr.map{|i|\
    \ i.abs.to_s.chars.map(&:to_i).inject(:+)}.select{|i| i > 0}.count\nend", "  arr.count\
    \ do |x|\n    digits(x).sum > 0\n  end\nend", "  arr.count { |x| x.digits.sum\
    \ > 0 }\nend", "  return 0 if arr.empty?\n  arr.map { |num| num.abs.digits.sum\
    \ }.count { |sum| sum > 0 }\nend", "  count = 0\n  arr.each do |x|\n    num =\
    \ x.abs\n    while num > 0\n      count += num % 10\n      num /= 10\n    end\n\
    \  end\n  return count\nend", "    # check to see if array is empty. If so, return\
    \ 0.\n    return 0 if arr.empty?", "  arr.inject(0) { |s, n| s + (n.abs.to_s.chars.map(&:to_i).inject(:+)\
    \ > 0 ? 1 : 0) }\nend", "  if arr.empty?\n    return 0\n  end\n  new_arr = arr.map\
    \ do |ele|\n    sum = 0\n    if ele < 0\n      ele = ele * -1\n    end\n    while\
    \ ele > 0\n      sum += ele % 10\n      ele = ele / 10\n    end\n    sum\n  end\n\
    \  new_arr.delete(0)\n  return new_arr.length\nend", "  def sum_of_digits(num)\n\
    \    num.abs.to_s.chars.map(&:to_i).reduce(:+)\n  end", "  arr.count do |num|\n\
    \    num.abs.digits.sum > 0\n  end\nend", "    sum = 0\n    arr.each do |num|\n\
    \        if num < 0\n            a = num.abs\n            sum += a.to_s.split('').map(&:to_i).reduce(:+)\n\
    \        else\n            sum += num.to_s.split('').map(&:to_i).reduce(:+)\n\
    \        end\n    end\n    return sum\nend", "  sum_arr = arr.map do |num|\n \
    \   if num < 0\n      num = -num\n    end\n    num.to_s.split(\"\").map(&:to_i).reduce(:+)\n\
    \  end\n  sum_arr.count { |num| num > 0 }\nend", "  arr.count { |x| sum_digits(x)\
    \ > 0 }\nend", "  arr.count { |number| positive_number?(number) }\nend", "  arr.select\
    \ { |num| signed_digits(num).reduce(:+) > 0 }.count\nend", "  nums = 0\n  arr.each\
    \ do |n|\n    digits = n.abs.to_s.split('').map(&:to_i)\n    nums += 1 if digits.reduce(:+)\
    \ > 0\n  end\n  nums\nend", "  # your code here\nend", "  # == NOTE ==\n  # arr.select\
    \ => Returns a new array containing all elements of\n  #               ary for\
    \ which the given block returns a true value.\n  arr.select { |n| sum_of_digits(n)\
    \ > 0 }.length\nend", "    count = 0\n    arr.each do |i|\n        count += 1\
    \ if i.abs.digits.sum > 0\n    end\n    count\nend", "  count = 0\n  arr.each\
    \ do |n|\n    count += 1 if n < 0 ? n % 10 < 0 || n % 100 < 0 : n % 10 > 0 ||\
    \ n % 100 > 0\n  end\n  count\nend", "  # complete\nend", "\treturn arr.count\
    \ { |num| num.digits.sum > 0 }\nend", "  arr.count { |num| num.abs.digits.sum\
    \ > 0 }\nend", "    count = 0\n    for num in arr\n        if num.abs.to_s.split('').map(&:to_i).sum\
    \ > 0\n            count += 1\n        end\n    end\n    return count\nend", " \
    \ result = 0\n  arr.each do |num|\n    result += 1 if sum_digits(num) > 0\n  end\n\
    \  result\nend", "  return arr.count { |num| num.abs.digits.sum > 0 }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
