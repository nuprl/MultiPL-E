name: HumanEval_79_decimal_to_binary
language: rb
prompt: "# You will be given a number in decimal form and your task is to convert\
  \ it to\n# binary format. The function should return a string, with each character\
  \ representing a binary\n# number. Each character in the string will be '0' or '1'.\n\
  # There will be an extra couple of characters 'db' at the beginning and at the end\
  \ of the string.\n# The extra characters are there to help with the format.\n# Examples:\n\
  # decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)   # returns\
  \ \"db100000db\"\ndef decimal_to_binary(decimal)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_decimal_to_binary\n\
  \    candidate = method(:decimal_to_binary)\n    assert_equal(\"db0db\", candidate.call(0))\n\
  \    assert_equal(\"db100000db\", candidate.call(32))\n    assert_equal(\"db1100111db\"\
  , candidate.call(103))\n    assert_equal(\"db1111db\", candidate.call(15))\n  end\n\
  end\n"
completions: ["  binary = 'db'\n  while decimal != 0\n    if decimal % 2 == 0\n  \
    \    binary += '0'\n    else\n      binary += '1'\n    end\n    decimal /= 2\n\
    \  end\n  binary.reverse + 'db'\nend", end, "  # your code here\n  binary = \"\
    \"\n  while decimal >= 1\n    binary += (decimal % 2).to_s\n    decimal /= 2\n\
    \  end\n  binary = binary.reverse\n  \"db\" + binary + \"db\"\nend", "  # code\
    \ to convert decimal number to binary\n  binary_array = []\n  while decimal >\
    \ 0\n    remainder = decimal % 2\n    binary_array.unshift(remainder)\n    decimal\
    \ = decimal / 2\n  end\n  binary_array = \"db\" + binary_array.join + \"db\"\n\
    end", "\tbinary = decimal.to_s(2)\n\tbinary = \"db\" + binary + \"db\"\nend",
  "  'db'+decimal.to_s(2)+'db'\nend", "  string = \"db\"\n  while decimal != 0\n \
    \   string << \"1\" if decimal % 2 == 1\n    string << \"0\" if decimal % 2 ==\
    \ 0\n    decimal /= 2\n  end\n  string.reverse + \"db\"\nend", "    binary_string\
    \ = \"db\"\n    while decimal > 0\n        binary_string += decimal % 2 == 0 ?\
    \ \"0\" : \"1\"\n        decimal /= 2\n    end\n    binary_string += \"db\"\n\
    \    binary_string.reverse\nend", "    number = ''\n    while decimal > 0\n  \
    \      number = (decimal % 2).to_s + number\n        decimal /= 2\n    end\n \
    \   'db' + number + 'db'\nend", "  \"db#{decimal.to_s(2)}db\"\nend", "  binary\
    \ = \"db\"\n  loop do\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  \
    \  break if decimal == 0\n  end\n  binary += \"db\"\n  binary.reverse\nend", " \
    \ # TODO: Return the number converted from decimal to binary\n  binary = \"db\"\
    \n  while decimal > 0\n    mod = decimal % 2\n    binary += mod.to_s\n    decimal\
    \ = decimal / 2\n  end\n  binary + \"db\"\nend", "  # Remove the line below and\
    \ write your code here.\nend", "  binary = []\n  while decimal != 0\n    binary.unshift(decimal\
    \ % 2)\n    decimal /= 2\n  end\n  \"db#{binary.join}db\"\nend", "  binary = decimal.to_s(2)\n\
    \  binary.insert(0, \"db\")\n  binary.insert(-1, \"db\")\nend", "  raise ArgumentError.new(\"\
    Argument is not a positive integer\") unless decimal.is_a?(Integer) && decimal\
    \ >= 0\n  return \"db0db\" if decimal == 0\n  binary = []\n  while decimal > 0\n\
    \    binary.unshift(decimal % 2)\n    decimal /= 2\n  end\n  \"db#{binary.join}db\"\
    \nend", "  binary = \"\"\n  while decimal > 0\n    bit = decimal % 2\n    binary\
    \ = bit.to_s + binary\n    decimal = decimal / 2\n  end\n  \"db\" + binary + \"\
    db\"\nend", "  decimal_to_binary = 'db' + (decimal.to_s(2)) + 'db'\nend", "  bin\
    \ = decimal.to_s(2)\n  bin = bin.insert(0, \"db\")\n  bin << \"db\"\nend", "\t\
    binary = \"db\"\n\tdecimal_to_binary = []\n\twhile decimal >= 1 do\n\t\tdecimal_to_binary\
    \ << decimal % 2\n\t\tdecimal = decimal / 2\n\tend\n\tbinary += decimal_to_binary.reverse.join\
    \ + \"db\"\nend", "  binary = []\n  if decimal == 0\n    return \"db0db\"\n  end\n\
    \  until decimal == 0\n    remainder = decimal % 2\n    decimal = decimal / 2\n\
    \    binary.unshift(remainder)\n  end\n  binary.unshift(\"db\")\n  binary.push(\"\
    db\")\n  binary.join\nend", "  decimal.to_s(2).insert(0, 'db').insert(-1, 'db')\n\
    end", "  'db' + decimal.to_s(2) + 'db'\nend", "  # your code here\n  decimal.to_s(2)\n\
    end", "  # As the string will be read from left to right, we'll be working in\
    \ reverse\n  # This will allow us to write the strings in the correct order.\n\
    \  binary = ''\n  # We are going to be subtracting from our original number, so\
    \ let's store it.\n  saved_decimal = decimal\n  # Let's loop through the possible\
    \ powers of 2, starting at the biggest\n  (0..8).reverse_each do |exponent|\n\
    \    # Is the current number bigger than 2 ** exponent?\n    if decimal >= 2 **\
    \ exponent\n      # Great, it is! So let's add a 1 to our string and subtract\
    \ the number\n      # 2 ** exponent from our decimal\n      binary += '1'\n  \
    \    decimal -= 2 ** exponent\n    else\n      # There wasn't enough left to subtract\
    \ 2 ** exponent from the current\n      # number, so let's just add a 0 to our\
    \ string\n      binary += '0'\n    end\n  end\n  # This is simply a helper to\
    \ return the number in binary form\n  \"db#{binary}db (#{saved_decimal})\"\nend",
  "  # increment counter to keep track of string length\n  counter = 0\n  # ensure\
    \ that the number is a non-negative integer\n  decimal = decimal.to_i.abs\n  #\
    \ initialize an empty string to hold the binary number\n  binary = \"\"\n  # if\
    \ number is 0, then return a string representing the first binary number\n  if\
    \ decimal == 0\n    return \"db0db\"\n  end\n  # use a loop to perform the conversion\n\
    \  loop do\n    # add the remainder of (decimal number divided by 2) to the front\
    \ of the string\n    binary.prepend(decimal % 2)\n    # increment the counter\n\
    \    counter += 1\n    # divide the number by 2 and store the result back into\
    \ the number\n    decimal /= 2\n    # break when the number is equal to 0\n  \
    \  break if decimal == 0\n  end\n  # add db to the front and end of the string\n\
    \  binary.prepend(\"db\")\n  binary << \"db\"\n  # return the string\n  binary\n\
    end", "  \"db#{decimal.to_s(2)}db\"\nend", "  binary = \"\"\n  while decimal >\
    \ 0\n    binary.prepend(\"#{decimal % 2}\")\n    decimal /= 2\n  end\n  binary.prepend(\"\
    db\")\n  binary << \"db\"\nend", "  if decimal.is_a?(Integer)\n    'db' + decimal.to_s(2)\
    \ + 'db'\n  else\n    'Please enter an integer'\n  end\nend", "  binary = \"db\"\
    \n  until decimal == 0\n    if decimal % 2 == 0\n      binary += \"0\"\n    else\n\
    \      binary += \"1\"\n    end\n    decimal /= 2\n  end\n  binary += \"db\"\n\
    \  binary.reverse\nend", "  # TODO: Convert decimal to binary\nend", "  # p binary\
    \ = sprintf('%b', decimal)\n  # p binary = decimal.to_s(2)\n  # p binary = decimal.to_s(2).gsub(/^0+/,\
    \ '')\n  # p binary = decimal.to_s(2).delete('0')\n  # p binary = decimal.to_s(2).gsub(/0/,\
    \ '')\n  # p binary = \"db#{decimal.to_s(2)}db\"\n  # p binary = \"db#{decimal.to_s(2).gsub(/^0+/,\
    \ '')}db\"\n  # p binary = \"db#{decimal.to_s(2).delete('0')}db\"\n  # p binary\
    \ = \"db#{decimal.to_s(2).gsub(/0/, '')}db\"\n  # p binary = \"db#{decimal.to_s(2).gsub(/^0+/,\
    \ '').delete('0')}db\"\n  # p binary = \"db#{decimal.to_s(2).gsub(/0/, '').delete('0')}db\"\
    \n  # p binary = \"db#{decimal.to_s(2).gsub(/^0+|0/, '')}db\"\n  # p binary =\
    \ \"db#{decimal.to_s(2).gsub(/0/, '')}db\"\n  # p binary = \"db#{decimal.to_s(2).gsub(/^0+|0/,\
    \ '')}db\"\n  # p binary = \"db#{decimal.to_s(2).gsub(/0+/, '')}db\"\n  # p binary\
    \ = \"db#{decimal.to_s(2).gsub(/^0+|0+/, '')}db\"\n  p binary = \"db#{decimal.to_s(2).gsub(/^0+|0+/,\
    \ '')}db\"\nend", "\t\n\tif decimal == 0\n\t\treturn \"db00000000db\"\n\tend",
  "  binary = ''\n  binary << 'db'\n  until decimal.zero?\n    binary << (decimal\
    \ % 2).to_s\n    decimal /= 2\n  end\n  binary << 'db'\n  binary.reverse\nend",
  "  binary = []\n  divisible = 1\n  until divisible > decimal\n    divisible *= 2\n\
    \  end\n  divisible /= 2\n  until divisible == 0\n    if decimal >= divisible\n\
    \      binary << 1\n      decimal -= divisible\n    else\n      binary << 0\n\
    \    end\n    divisible /= 2\n  end\n  \"db#{binary.join}db\"\nend", "  binary\
    \ = []\n  while decimal > 0\n    if decimal % 2 == 0\n      binary.push(\"0\"\
    )\n    else\n      binary.push(\"1\")\n    end\n    decimal = decimal / 2\n  end\n\
    \  binary.reverse.join\nend", "  output = []\n  binary = %w(0 1)\n  count = 0\n\
    \  until decimal == 0\n    output.unshift((decimal % 2).to_s)\n    decimal /=\
    \ 2\n  end\n  output.join(\"\")\nend", "  decimal.to_s(2).prepend('db').concat('db')\n\
    end", "  binary = []\n  while decimal > 0\n    binary.unshift(decimal % 2)\n \
    \   decimal /= 2\n  end\n  return 'db' + binary.join + 'db'\nend", "  'db' + decimal.to_s(2)\
    \ + 'db'\nend", "  # your code here\n  bits = decimal.to_s(2)\n  \"db#{bits}db\"\
    \nend", "  binary = decimal.to_s(2)\n  binary = \"0\" * (8 - binary.length) +\
    \ binary if binary.length < 8\n  \"db#{binary}db\"\nend", "  # Code here!\nend",
  "  # Your code here\nend", "    reverse_binary = ''\n    begin\n        if decimal\
    \ % 2 == 0\n            reverse_binary += '0'\n        else\n            reverse_binary\
    \ += '1'\n        end\n        decimal /= 2\n    end until decimal <= 0\n    puts\
    \ 'db' + reverse_binary.reverse + 'db'\nend\ndecimal_to_binary(15)\ndecimal_to_binary(32)",
  "  binary = decimal.to_s(2)\n  \"db#{binary}db\"\nend", "  binary = \"\"\n  while\
    \ decimal != 0\n    binary.prepend(decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  return \"db\" + binary + \"db\"\nend", "  binary = 'db'\n  while decimal >\
    \ 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n  binary + 'db'\n\
    end", "  return \"db#{decimal.to_s(2)}db\"\nend", "    binary = decimal.to_s(2)\n\
    \    binary = binary.prepend(\"db\")\n    binary << \"db\"\nend", "  if (decimal\
    \ == 0)\n    return \"db0db\"\n  end\n  binary = \"db\"\n  while decimal > 0\n\
    \    result = decimal % 2\n    decimal = decimal / 2\n    binary += \"#{result}\"\
    \n  end\n  binary += \"db\"\n  binary.reverse\nend", "  decimal = decimal.to_s(2)\n\
    \  \"db#{decimal}db\"\nend", "  binary = [decimal.to_s(2)].join\n  \"db#{binary}db\"\
    \nend", "  digits = decimal.digits\n  binary = []\n  digits.each do |digit|\n\
    \    if digit % 2 == 0\n      binary.unshift('0')\n    else\n      binary.unshift('1')\n\
    \    end\n  end\n  \"db#{binary.join}db\"\nend", "\tbinary = decimal.to_s(2)\n\
    \treturn \"db\" + binary + \"db\"\nend", "  binary = \"db\"\n  while decimal !=\
    \ 0\n    if decimal % 2 == 0\n      binary << \"0\"\n    else\n      binary <<\
    \ \"1\"\n    end\n    decimal /= 2\n  end\n  binary << \"db\"\n  binary.reverse\n\
    end", "  decimal.to_s(2).prepend('db').concat('db')\nend", "  if decimal == 0\n\
    \    \"db0db\"\n  else\n    \"db\" + decimal.to_s(2) + \"db\"\n  end\nend", " \
    \ return \"db#{decimal.to_s(2)}db\"\nend", "  number = decimal.to_s(2)\n  'db'\
    \ + number + 'db'\nend", "  binary = []\n  while decimal > 0\n    if decimal %\
    \ 2 == 0\n      binary.push(0)\n    else\n      binary.push(1)\n    end\n    decimal\
    \ = decimal / 2\n  end\n  binary.reverse.join.insert(0, \"db\").insert(-1, \"\
    db\")\nend", "  binary = ''\n  binary << 'db'\n  binary << '1' * decimal\n  binary\
    \ << 'db'\n  binary\nend", "\tbinary_string = \"db\"\n\tbinary_array = []\n\t\
    binary_number = decimal\n\t\n\tuntil binary_number == 0\n\t\tbinary_array << binary_number\
    \ % 2\n\t\tbinary_number = binary_number / 2\n\tend\n\t\n\tuntil binary_array.empty?\n\
    \t\tbinary_string << binary_array.pop.to_s\n\tend\n\t\n\tbinary_string << \"db\"\
    \n\tbinary_string\nend", "  bin_array = []\n  1.upto(decimal) do |i|\n    bin_array\
    \ << i if (decimal/i) % 2 == 1\n  end\n  bin_array.reverse\nend", "  # your code\
    \ here\n  binary = []\n  divide = 2\n  while decimal > 0\n    binary.unshift(decimal\
    \ % divide)\n    decimal = decimal / divide\n  end\n  binary.unshift('db')\n \
    \ binary.push('db')\n  return binary.join\nend", "  binary = \"db\"\n  while decimal\
    \ > 0\n    if decimal % 2 == 0\n      binary += \"0\"\n    else\n      binary\
    \ += \"1\"\n    end\n    decimal /= 2\n  end\n  binary += \"db\"\n  binary.reverse\n\
    end", "  binary = 'db'\n  until decimal.zero?\n    binary.prepend(decimal % 2\
    \ == 0 ? '0' : '1')\n    decimal /= 2\n  end\n  binary.concat('db')\nend", " \
    \ # TODO: implement this function\n  i = 0\n  while 2**i <= decimal\n    i +=\
    \ 1\n  end\n  i = i - 1\n  binary = \"db\"\n  while i >= 0\n    if 2**i <= decimal\n\
    \      binary += \"1\"\n      decimal -= 2**i\n    else\n      binary += \"0\"\
    \n    end\n    i -= 1\n  end\n  binary += \"db\"\nend", "  # Write your code here\n\
    end", "  if decimal > 0\n    return \"db\" + decimal.to_s(2) + \"db\"\n  else\n\
    \    return \"db0db\"\n  end\nend", "  number = []\n  while decimal > 0\n    number.unshift(decimal\
    \ % 2)\n    decimal /= 2\n  end\n  \"db#{number.join}db\"\nend", "  sign = decimal\
    \ < 0 ? \"1\" : \"0\"\n  binary = decimal.abs.to_s(2)\n  sign + '0' * (8 - binary.length)\
    \ + binary + 'db'\nend", "  b = \"\"\n  if (decimal % 2 == 0)\n    b = \"0\"\n\
    \  else\n    b = \"1\"\n  end\n  if (decimal == 0)\n    b = \"0\"\n  end\n  if\
    \ (decimal == 1)\n    b = \"1\"\n  end\n  if (decimal >= 2)\n    b = decimal_to_binary(decimal\
    \ / 2) + b\n  end\n  return \"db\" + b + \"db\"\nend", "  num = decimal.to_s(2)\n\
    \  'db' + num + 'db'\nend", "    binary = \"db\"\n    if decimal == 0\n      \
    \  binary += \"0\"\n    else\n        until decimal == 0\n            binary +=\
    \ (decimal % 2).to_s\n            decimal /= 2\n        end\n    end\n    binary\
    \ + \"db\"\nend", "  decimal.to_s(2).insert(0, 'db').insert(-1, 'db')\nend", " \
    \ # the extra characters are to help\n  # with the formatting\n  \"db#{decimal.to_s(2)}db\"\
    \nend", "  decimal_to_binary = decimal.to_s(2)\n  \"db#{decimal_to_binary}db\"\
    \nend", "  binary = \"\"\n  binary += \"db\"\n  until decimal == 0\n    if decimal\
    \ % 2 == 0\n      binary += \"0\"\n    else\n      binary += \"1\"\n    end\n\
    \    decimal /= 2\n  end\n  binary += \"db\"\n  binary.reverse\nend", "  binary\
    \ = \"db\"\n  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal\
    \ /= 2\n  end\n  binary += \"db\"\n  binary.reverse\nend", "  binary = ''\n  while\
    \ decimal > 0\n    binary.prepend(decimal % 2 == 0 ? '0' : '1')\n    decimal /=\
    \ 2\n  end\n  \"db#{binary}db\"\nend", "  \nend", "  # something\nend", "  \"\
    #{'db'}#{decimal.to_s(2)}#{'db'}\"\nend", "  binary = \"db\"\n  while decimal\
    \ > 0\n    binary << ((decimal%2).to_s)\n    decimal /= 2\n  end\n  binary <<\
    \ \"db\"\n  binary.reverse\nend", "  binary = 'db' + decimal.to_s(2) + 'db'\n\
    end", "    binary = \"\"\n    if decimal == 0\n        binary = \"db0db\"\n  \
    \  else\n        while decimal != 0\n            if decimal%2 == 0\n         \
    \       binary.prepend(\"0\")\n            else\n                binary.prepend(\"\
    1\")\n            end\n            decimal /= 2\n        end\n        binary.prepend(\"\
    db\")\n        binary.concat(\"db\")\n    end\n    return binary\nend", "  'db'\
    \ + decimal.to_s(2) + 'db'\nend", "  return 'db' + decimal.to_s(2) + 'db'\nend",
  "  binary = []\n  while decimal > 0\n    if decimal % 2 == 0\n      binary.push('0')\n\
    \    else\n      binary.push('1')\n    end\n    decimal = decimal / 2\n  end\n\
    \  binary.push('db')\n  binary.reverse.join('')\nend", "  binary = \"\"\n  while\
    \ decimal > 0\n    binary.insert(0, (decimal % 2).to_s)\n    decimal /= 2\n  end\n\
    \  \"db#{binary}db\"\nend", "  binary = 'db'\n  until decimal == 0\n    binary\
    \ << ((decimal % 2).to_s)\n    decimal /= 2\n  end\n  binary << 'db'\n  binary.reverse\n\
    end", "  binary = 'db'\n  while decimal != 0\n    binary += (decimal % 2).to_s\n\
    \    decimal /= 2\n  end\n  binary += 'db'\n  binary.reverse\nend", "  binary\
    \ = \"db\"\n  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal\
    \ /= 2\n  end\n  binary << \"db\"\n  binary.reverse\nend", "  binary = \"\"\n\
    \  binary += \"db\"\n  decimal.times do\n    binary += \"1\"\n  end\n  binary\
    \ += \"db\"\n  binary\nend", "  binary = decimal.to_s(2)\n  \"db#{binary}db\"\n\
    end", "  binary = 'db'\n  while decimal > 0\n    binary += (decimal % 2).to_s\n\
    \    decimal /= 2\n  end\n  binary += 'db'\n  binary.reverse\nend", "  \"db#{decimal.to_s(2)}db\"\
    \nend", "  # to_s(2) returns the string representation of the number in base 2\n\
    \  # The padding method adds the leading '0' to fit the number to the given length\n\
    \  \"db#{decimal.to_s(2).rjust(7, '0')}db\"\nend", "  binary = \"db\"\n  while\
    \ decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n  binary.reverse\
    \ + \"db\"\nend", "  return 'db' + decimal.to_s(2) + 'db'\nend", "  # your code\
    \ here\nend", "\tbinary = decimal.to_s(2)\n\tbinary = \"db\" + binary + \"db\"\
    \nend", "  my_binary = \"db\"\n  while decimal > 0\n    my_binary << (decimal\
    \ % 2).to_s\n    decimal /= 2\n  end\n  my_binary << \"db\"\n  my_binary.reverse\n\
    end", "  #TODO: implement\nend", "  string = 'db'\n  while decimal > 0\n    if\
    \ decimal % 2 == 0\n      string += '0'\n    else\n      string += '1'\n    end\n\
    \    decimal /= 2\n  end\n  string += 'db'\n  string.reverse\nend", "  binary\
    \ = \"db\"\n  remainder = []\n  until remainder.size == 8 do\n    remainder <<\
    \ (decimal % 2)\n    decimal = decimal / 2\n  end\n  8.times do\n    binary <<\
    \ remainder.pop.to_s\n  end\n  binary << \"db\"\nend", "  binary = \"\"\n  while\
    \ decimal > 0\n    if decimal % 2 == 0\n      binary.prepend(\"0\")\n    else\n\
    \      binary.prepend(\"1\")\n    end\n    decimal /= 2\n  end\n  \"db#{binary}db\"\
    \nend", "  \"db#{decimal.to_s(2)}db\"\nend", "  number = decimal.to_s(2)\n  \"\
    db#{number}db\"\nend", "  binary = ''\n  while decimal > 0\n    binary.prepend(decimal\
    \ % 2 == 0 ? '0' : '1')\n    decimal /= 2\n  end\n  \"db#{binary}db\"\nend", " \
    \ \"db#{decimal.to_s(2)}db\"\nend", "  #Convert decimal to binary string\n  puts\
    \ \"db#{decimal.to_s(2)}db\"\nend", "    return 'db' + decimal.to_s(2) + 'db'\n\
    end", "  # TODO: Implement me!\nend", "  binary = 'db'\n  while decimal > 0\n\
    \    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n  binary << 'db'\n\
    \  binary.reverse\nend", "    # Your code here\nend", "  if decimal == 0\n   \
    \ return \"db0db\"\n  end\n  binary = \"db\"\n  while decimal > 0\n    binary\
    \ += (decimal % 2).to_s\n    decimal /= 2\n  end\n  binary + \"db\"\nend", " \
    \ binary = decimal.to_s(2)\n  \"db#{binary}db\"\nend", "  binary = \"\"\n  binary\
    \ << 'db'\n  return binary + '0' if decimal == 0\n  while decimal != 0\n    binary\
    \ << (decimal % 2).to_s\n    decimal /= 2\n  end\n  binary << 'db'\n  binary.reverse\n\
    end", "  binary = \"\"\n  if decimal == 0\n    binary = \"db0db\"\n  else\n  \
    \  while decimal > 0\n      binary = (decimal % 2).to_s + binary\n      decimal\
    \ = decimal / 2\n    end\n    binary = \"db\" + binary + \"db\"\n  end\n  binary\n\
    end", "  binary = ''\n  until decimal == 0\n    decimal, remainder = decimal.divmod(2)\n\
    \    binary = remainder.to_s + binary\n  end\n  'db' + binary + 'db'\nend", " \
    \ binary = \"\"\n  while decimal > 0\n    binary.prepend(decimal % 2)\n    decimal\
    \ /= 2\n  end\n  return \"db#{binary}db\"\nend", "  raise TypeError, 'Argument\
    \ is not a number' unless decimal.is_a? Numeric\n  binary = decimal.to_s(2)\n\
    \  binary = '0' + binary if binary.length == 1\n  'db' + binary + 'db'\nend",
  "  binary = ''\n  while decimal > 0\n    if decimal % 2 == 0\n      binary = \"\
    0\" + binary\n    else\n      binary = \"1\" + binary\n    end\n    decimal /=\
    \ 2\n  end\n  \"db\" + binary + \"db\"\nend", "  # TODO: return the binary string\
    \ representation of the given number\nend", "  # convert decimal to binary\n \
    \ # \"db\" + \"binary num\" + \"db\"\n  \"db\" + decimal.to_s(2) + \"db\"\nend",
  "  binary = 'db'\n  until decimal == 0\n    rem = decimal % 2\n    decimal = decimal\
    \ / 2\n    if rem == 0\n      binary = '0' + binary\n    else\n      binary =\
    \ '1' + binary\n    end\n  end\n  binary + 'db'\nend", "  binary = []\n  1.upto(decimal)\
    \ do |i|\n    binary << i.to_s(2)\n  end\n  binary.join.tr('01','10')\nend", " \
    \ binary = \"\"\n  until decimal == 0\n    binary.prepend((decimal % 2).to_s)\n\
    \    decimal /= 2\n  end\n  binary.prepend(\"db\")\n  binary << \"db\"\nend",
  "    binary = \"db\"\n    until decimal == 0 do\n        temp = decimal%2\n    \
    \    binary = binary + temp.to_s\n        decimal = decimal/2\n    end\n    bin_arr\
    \ = binary.split(\"\")\n    bin_arr.reverse!\n    bin_arr.push(\"db\")\n    bin_arr.join\n\
    end", "  binary = \"\"\n  a = [0,0,0,0,0,0,0,0]\n  i = 0\n  while decimal > 0\n\
    \    a[i] = decimal % 2\n    decimal = decimal / 2\n    i = i + 1\n  end\n  a.reverse.each\
    \ { |n| binary = binary + n.to_s }\n  'db' + binary + 'db'\nend", "  decimal.to_s(2).split('').reverse.join\n\
    end\nputs decimal_to_binary(15)", "  binary = \"db\"\n  while decimal > 0\n  \
    \  binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n  binary + \"db\"\n\
    end", "  bin = decimal.to_s(2)\n  \"db#{bin}db\"\nend", "  binary = []\n  until\
    \ decimal == 0\n    binary.unshift((decimal % 2).to_s)\n    decimal /= 2\n  end\n\
    \  \"db#{binary.join}db\"\nend", "  binary = ''\n  until decimal == 0\n    binary.prepend((decimal\
    \ % 2).to_s)\n    decimal /= 2\n  end\n  'db' + binary + 'db'\nend", "  # TODO:\
    \ implement\n  puts 'Not implemented'\nend", "    decimal.to_s(2).gsub(/\\b(0+)([1-9a-z]+)/i,'\\\
    2\\1').reverse.gsub(/\\b(0+)([1-9a-z]+)/i,'\\2\\1').reverse\nend", "  decimal.to_s(2).prepend('db').concat('db')\n\
    end", "  binary = \"db\"\n  if decimal == 0\n    binary = \"db0db\"\n  else\n\
    \    until decimal == 0\n      if decimal % 2 == 0\n        binary += \"0\"\n\
    \      else\n        binary += \"1\"\n      end\n      decimal /= 2\n    end\n\
    \  end\n  binary.reverse! + \"db\"\nend", "  'db' + decimal.to_s(2) + 'db'\nend",
  "  binary = 'db'\n  until decimal == 0\n    remainder = decimal % 2\n    binary\
    \ << remainder.to_s\n    decimal = decimal / 2\n  end\n  binary.reverse + 'db'\n\
    end", "  # Your code here\nend", "  binary = \"\"\n  binary = '1' + binary until\
    \ decimal == 0\n  binary = '0' + binary if binary.empty?\n  binary = 'db' + binary\
    \ + 'db'\nend", "  bin = 'db'\n  while decimal > 0\n    bin += (decimal % 2).to_s\n\
    \    decimal /= 2\n  end\n  bin += 'db'\n  bin.reverse\nend", "  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend", "  dec_array = decimal.to_s.split('')\n  binary_number\
    \ = []\n  until dec_array.empty?\n    dec_array.shift.to_i.times do\n      binary_number.unshift(0)\n\
    \    end\n    binary_number.unshift(1)\n  end\n  binary_number.join('')\nend",
  "  binary = 'db'\n  until decimal == 0\n    binary.prepend(decimal % 2)\n    decimal\
    \ /= 2\n  end\n  binary << 'db'\nend", "  remainder_stack = Stack.new\n  binary_string\
    \ = \"db\"\n  while decimal > 0\n    remainder = decimal % 2\n    remainder_stack.push(remainder)\n\
    \    decimal = decimal / 2\n  end\n  while !remainder_stack.is_empty?\n    binary_string\
    \ += remainder_stack.pop.to_s\n  end\n  binary_string += \"db\"\n  binary_string\n\
    end", "  decimal.to_s(2).prepend('db').concat('db')\nend", "  string = \"\"\n\
    \  string << \"db\"\n  int = decimal\n  while int > 0\n    if int % 2 == 0\n \
    \     string << \"0\"\n    else\n      string << \"1\"\n    end\n    int = int\
    \ / 2\n  end\n  reverse_str = \"\"\n  string.length.times do |i|\n    reverse_str\
    \ << string[string.length - i - 1]\n  end\n  reverse_str << \"db\"\nend", "  binary\
    \ = \"\"\n  while decimal > 0\n    binary.prepend((decimal % 2).to_s)\n    decimal\
    \ /= 2\n  end\n  binary = \"0\" if binary == \"\"\n  binary = \"0\" * (8 - binary.length)\
    \ + binary if binary.length < 8\n  \"db#{binary}db\"\nend", "  binary = \"db\"\
    \n  while decimal > 0\n    if decimal % 2 == 0\n      binary += \"0\"\n    else\n\
    \      binary += \"1\"\n    end\n    decimal /= 2\n  end\n  binary += \"db\"\n\
    \  binary.reverse\nend", "  binary = [decimal].pack('N').unpack('B*').first\n\
    \  \"db#{binary}db\"\nend", "\tbinary = []\n\tbinary.unshift(decimal%2) while\
    \ decimal/=2\n\tbinary = binary.join('')\n\tbinary = \"db#{binary}db\"\nend",
  "  b = ''\n  until decimal == 0\n    b.prepend(decimal % 2)\n    decimal /= 2\n\
    \  end\n  b = '0' * (8 - b.length) + b\n  \"db#{b}db\"\nend", "  bin_str = 'db'\n\
    \  bin_str += decimal.to_s(2)\n  bin_str += 'db'\nend", "  \"#{decimal.to_s(2)}\"\
    \nend", "  binary = []\n  until decimal == 0\n    if decimal % 2 == 0\n      binary.unshift(0)\n\
    \    else\n      binary.unshift(1)\n    end\n    decimal = decimal / 2\n  end\n\
    \  binary = binary.unshift(\"db\").push(\"db\").join(\"\")\nend", "  decimal.to_s(2).gsub(/^1/,\
    \ 'db1').gsub(/1$/, '1db')\nend", "  (decimal.to_s(2)).to_s\nend", "  binary =\
    \ 'db'\n  while decimal > 0\n    binary << (decimal%2).to_s\n    decimal /= 2\n\
    \  end\n  binary << 'db'\n  binary.reverse\nend", "  binary = \"db\"\n  while\
    \ decimal > 0\n    remainder = decimal % 2\n    binary << remainder.to_s\n   \
    \ decimal = decimal / 2\n  end\n  if binary.length < 8\n    8 - binary.length.times\
    \ do\n      binary << \"0\"\n    end\n  end\n  return binary.reverse + \"db\"\n\
    end", "  result = \"db\"\n  until decimal == 0\n    result << (decimal % 2).to_s\n\
    \    decimal /= 2\n  end\n  result.reverse << \"db\"\nend", "  # code your method\
    \ here\nend", "  dec_array = decimal.to_s.chars\n  bin_array = []\n  binary =\
    \ \"db\"\n  if decimal == 0\n    binary << \"0\"\n  else\n    while dec_array.count\
    \ != 0\n      temp = dec_array.shift.to_i\n      while temp >= 1\n        bin_array\
    \ << temp % 2\n        temp = temp / 2\n      end\n      dec_array.each do |dec|\n\
    \        temp = dec.to_i\n        if temp >= 1\n          bin_array << 0\n   \
    \     else\n          bin_array << 0\n        end\n      end\n    end\n  end\n\
    \  binary << bin_array.reverse.join << \"db\"\nend", "  (\"db\" + decimal.to_s(2)\
    \ + \"db\").scan(/[01]/).join\nend", "  binary = 'db'\n  while decimal > 0\n \
    \   binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n  binary.reverse <<\
    \ 'db'\nend", "  db = 'db'\n  db + '%b' % decimal + db\nend", "  # convert decimal\
    \ to binary\n  # return string\n  return \"db#{decimal.to_s(2)}db\"\nend", " \
    \ binary = \"db\"\n  while decimal > 0\n    binary += decimal % 2 == 0 ? \"0\"\
    \ : \"1\"\n    decimal /= 2\n  end\n  binary + \"db\"\nend", "  return 'db' +\
    \ decimal.to_s(2) + 'db'\nend", "  'db' + decimal.to_s(2) + 'db'\nend", "\tanswer\
    \ = \"\"\n\tdecimal = decimal.to_s\n\t# if decimal.to_i < 0\n\t# \tdecimal = decimal.to_i.abs\n\
    \t# end\n\twhile decimal.to_i > 0\n\t\tanswer = (decimal.to_i % 2).to_s + answer\n\
    \t\tdecimal = (decimal.to_i / 2).to_s\n\tend\n\treturn \"db\" + answer + \"db\"\
    \nend", "\t# your code goes here\nend", "  binary = decimal.to_s(2)\n  \"db#{binary}db\"\
    \nend", "  'db' + (decimal & 1).to_s + ('0' * (decimal / 2)) + ('1' * (decimal\
    \ / 2)) + 'db'\nend", "  binary = \"\"\n  until decimal == 0\n    binary.prepend((decimal\
    \ % 2).to_s)\n    decimal /= 2\n  end\n  binary = binary.rjust(8, \"0\")\n  \"\
    db#{binary}db\"\nend", end, "  number = decimal.to_s(2)\n  \"db#{number}db\"\n\
    end", "  # your code here\nend", "  str = \"\"\n  while decimal > 0\n    str <<\
    \ (decimal % 2).to_s\n    decimal /= 2\n  end\n  \"db\" + str.reverse + \"db\"\
    \nend", "  binary = \"db\"\n  while decimal > 0\n    binary << (decimal % 2).to_s\n\
    \    decimal /= 2\n  end\n  binary + \"db\"\nend", "    binary = decimal.to_s(2)\n\
    \    binary.prepend(\"db\")\n    binary.concat(\"db\")\nend", "  binary = []\n\
    \  while decimal > 0\n    remainder = decimal % 2\n    binary.unshift(remainder)\n\
    \    decimal = decimal / 2\n  end\n  \"db#{binary.join('')}db\"\nend", "\treturn\
    \ \"db#{decimal.to_s(2)}db\"\nend", "  return 'db' + decimal.to_s(2) + 'db'\n\
    end", "  #your code here\nend", "    return \"db#{decimal.to_s(2)}db\"\nend",
  "  binary = ''\n  until decimal == 0\n    binary.prepend(decimal % 2)\n    decimal\
    \ /= 2\n  end\n  'db' + binary + 'db'\nend", "  'db' + decimal.to_s(2) + 'db'\n\
    end", "  binary = 'db'\n  while decimal > 0\n    binary += (decimal % 2).to_s\n\
    \    decimal /= 2\n  end\n  binary += 'db'\n  binary.reverse\nend", "  remainder\
    \ = ''\n  while decimal != 0\n    remainder += (decimal % 2).to_s\n    decimal\
    \ /= 2\n  end\n  \"db#{remainder.reverse}db\"\nend", "  'db' + decimal.to_s(2)\
    \ + 'db'\nend", "  binary = ''\n  if decimal.is_a?(Integer)\n    return false\
    \ unless decimal.positive?\n    value = decimal\n    loop do\n      binary <<\
    \ value % 2\n      value /= 2\n      break if value.zero?\n    end\n    binary\
    \ << 'db'\n    binary.reverse\n  else\n    false\n  end\nend", "  'db' + decimal.to_s(2)\
    \ + 'db'\nend", "  if decimal == 0\n    return \"db00000000db\"\n  end\n  result\
    \ = \"db\"\n  while decimal > 0\n    if decimal % 2 == 0\n      result << \"0\"\
    \n    else\n      result << \"1\"\n    end\n    decimal /= 2\n  end\n  until result.length\
    \ == 10\n    result << \"0\"\n  end\n  result.reverse!\n  result << \"db\"\nend",
  "  binary = \"db\"\n  until decimal == 0\n    binary += (decimal % 2).to_s\n   \
    \ decimal /= 2\n  end\n  binary += \"db\"\n  binary.reverse\nend", "  string =\
    \ \"db\"\n  until decimal == 0\n    if decimal % 2 == 0\n      string += \"0\"\
    \n    else\n      string += \"1\"\n    end\n    decimal /= 2\n  end\n  string\
    \ += \"db\"\n  string.reverse\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
