language: rb
name: HumanEval_22_filter_integers
results:
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  result = []\n  for i in values\n    if i.is_a?(Integer)\n\
    \      result.push(i)\n    end\n  end\n  return result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpi2j66rsh

    Started

    .

    Finished in 0.000418481 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2389.59 tests/s, 7168.78 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  # Your code here\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpsm98a4mv\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmpsm98a4mv.rb:13:in `test_filter_integers'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_filter_integers\n\
    \     12:     candidate = method(:filter_integers)\n  => 13:     assert_equal([],\
    \ candidate.call([]))\n     14:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     15:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     16:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.011352618 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    88.09 tests/s, 88.09 assertions/s\n"
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  results = []\n  values.each do |value|\n\
    \    results << value if value.is_a?(Integer)\n  end\n  results\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp7t_quwqr

    Started

    .

    Finished in 0.000412342 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2425.17 tests/s, 7275.51 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  arr = []\n  values.each do |i|\n    if i.is_a?(Integer)\n\
    \      arr << i\n    end\n  end\n  return arr\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpixm72p_o

    Started

    .

    Finished in 0.000647382 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1544.68 tests/s, 4634.05 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp71i6zsf

    Started

    .

    Finished in 0.001092334 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    915.47 tests/s, 2746.41 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy6rybfce\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmpy6rybfce.rb:13:in `test_filter_integers'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_filter_integers\n\
    \     12:     candidate = method(:filter_integers)\n  => 13:     assert_equal([],\
    \ candidate.call([]))\n     14:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     15:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     16:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.006724272 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.71 tests/s, 148.71 assertions/s\n"
  timestamp: 1659823116
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  # TODO: write your code here\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4m_2xtg3\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmp4m_2xtg3.rb:13:in `test_filter_integers'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_filter_integers\n\
    \     12:     candidate = method(:filter_integers)\n  => 13:     assert_equal([],\
    \ candidate.call([]))\n     14:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     15:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     16:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.006566433 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.29 tests/s, 152.29 assertions/s\n"
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n\tvalues.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3jgj218h

    Started

    .

    Finished in 0.000618421 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1617.02 tests/s, 4851.06 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp71i6zsf

    Started

    .

    Finished in 0.001092334 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    915.47 tests/s, 2746.41 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |element| element.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpb9en0c_c

    Started

    .

    Finished in 0.000557217 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1794.63 tests/s, 5383.90 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |item| item.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpy1snlbzu

    Started

    .

    Finished in 0.000632701 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1580.53 tests/s, 4741.58 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxbjopzo3

    Started

    .

    Finished in 0.000639662 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1563.33 tests/s, 4689.98 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxbjopzo3

    Started

    .

    Finished in 0.000639662 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1563.33 tests/s, 4689.98 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp71i6zsf

    Started

    .

    Finished in 0.001092334 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    915.47 tests/s, 2746.41 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select{|i| i.is_a? Integer}\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp69w_mig3

    Started

    .

    Finished in 0.000634746 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1575.43 tests/s, 4726.30 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp71i6zsf

    Started

    .

    Finished in 0.001092334 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    915.47 tests/s, 2746.41 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp71i6zsf

    Started

    .

    Finished in 0.001092334 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    915.47 tests/s, 2746.41 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp71i6zsf

    Started

    .

    Finished in 0.001092334 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    915.47 tests/s, 2746.41 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp71i6zsf

    Started

    .

    Finished in 0.001092334 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    915.47 tests/s, 2746.41 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n    # <YOUR CODE HERE>\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpngdb_2bm\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmpngdb_2bm.rb:13:in `test_filter_integers'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_filter_integers\n\
    \     12:     candidate = method(:filter_integers)\n  => 13:     assert_equal([],\
    \ candidate.call([]))\n     14:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     15:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     16:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.011987825 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    83.42 tests/s, 83.42 assertions/s\n"
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp71i6zsf

    Started

    .

    Finished in 0.001092334 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    915.47 tests/s, 2746.41 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n\tvalues.select{|i| i.is_a? Integer}\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp2uwh64e4

    Started

    .

    Finished in 0.000702528 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1423.43 tests/s, 4270.29 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select{|x| x.is_a? Integer}\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpyvgwsrsb

    Started

    .

    Finished in 0.000638076 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1567.21 tests/s, 4701.63 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptzbh14zi\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmptzbh14zi.rb:12:in `test_filter_integers'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_filter_integers\n\
    \     11:     candidate = method(:filter_integers)\n  => 12:     assert_equal([],\
    \ candidate.call([]))\n     13:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     14:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     15:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.011869686 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    84.25 tests/s, 84.25 assertions/s\n"
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select{|n| n.is_a?(Integer)}\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmprcp44tfd

    Started

    .

    Finished in 0.000612192 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1633.47 tests/s, 4900.42 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n\tvalues.select { |x| x.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4tomtv3f

    Started

    .

    Finished in 0.000631558 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1583.39 tests/s, 4750.16 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  # use select and is_a?\n  values.select{|i|\
    \ i.is_a? Integer}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpt1bzqrn9

    Started

    .

    Finished in 0.00114616 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    872.48 tests/s, 2617.44 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n\t# values.select { |value| value.is_a? Integer\
    \ }\n\tvalues.select { |value| value.to_s.match(/^\\d+$/) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplxmp__bl

    Started

    .

    Finished in 0.000674806 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1481.91 tests/s, 4445.72 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptzbh14zi\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmptzbh14zi.rb:12:in `test_filter_integers'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_filter_integers\n\
    \     11:     candidate = method(:filter_integers)\n  => 12:     assert_equal([],\
    \ candidate.call([]))\n     13:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     14:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     15:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.011869686 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    84.25 tests/s, 84.25 assertions/s\n"
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp71i6zsf

    Started

    .

    Finished in 0.001092334 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    915.47 tests/s, 2746.41 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |x| x.is_a? Integer }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpy4tztmtk

    Started

    .

    Finished in 0.00063382 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1577.74 tests/s, 4733.21 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select{|x|x.is_a? Integer}\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp2gfhrmnp

    Started

    .

    Finished in 0.000639288 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1564.24 tests/s, 4692.72 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  return [] if values.nil? || values.empty?\n\
    \  values.select { |x| x.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxf13lay3

    Started

    .

    Finished in 0.000565449 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1768.51 tests/s, 5305.52 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  # your code here\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1vqc5d9a\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmp1vqc5d9a.rb:13:in `test_filter_integers'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_filter_integers\n\
    \     12:     candidate = method(:filter_integers)\n  => 13:     assert_equal([],\
    \ candidate.call([]))\n     14:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     15:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     16:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.006895906 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.01 tests/s, 145.01 assertions/s\n"
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxbjopzo3

    Started

    .

    Finished in 0.000639662 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1563.33 tests/s, 4689.98 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxbjopzo3

    Started

    .

    Finished in 0.000639662 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1563.33 tests/s, 4689.98 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  # TODO: implement me!\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgs1265bp\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmpgs1265bp.rb:13:in `test_filter_integers'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_filter_integers\n\
    \     12:     candidate = method(:filter_integers)\n  => 13:     assert_equal([],\
    \ candidate.call([]))\n     14:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     15:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     16:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.006917491 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.56 tests/s, 144.56 assertions/s\n"
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n    values.select { |item| item.is_a? Integer\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppelin3rt

    Started

    .

    Finished in 0.000568971 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1757.56 tests/s, 5272.68 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.filter { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpw1kzep60

    Started

    .

    Finished in 0.000632903 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1580.02 tests/s, 4740.06 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  return values.select{|x| x.is_a?(Integer)}\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpo2j7b8ic

    Started

    .

    Finished in 0.000619559 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1614.05 tests/s, 4842.15 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  #TODO: implement me\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpkb9lvcvv\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmpkb9lvcvv.rb:13:in `test_filter_integers'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_filter_integers\n\
    \     12:     candidate = method(:filter_integers)\n  => 13:     assert_equal([],\
    \ candidate.call([]))\n     14:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     15:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     16:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.006828524 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    146.44 tests/s, 146.44 assertions/s\n"
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp71i6zsf

    Started

    .

    Finished in 0.001092334 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    915.47 tests/s, 2746.41 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  # todo: implement me\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpt2fu4l5v\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmpt2fu4l5v.rb:13:in `test_filter_integers'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_filter_integers\n\
    \     12:     candidate = method(:filter_integers)\n  => 13:     assert_equal([],\
    \ candidate.call([]))\n     14:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     15:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     16:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.006719272 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.83 tests/s, 148.83 assertions/s\n"
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp71i6zsf

    Started

    .

    Finished in 0.001092334 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    915.47 tests/s, 2746.41 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.keep_if { |val| val.instance_of? Integer\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproqgptdi

    Started

    .

    Finished in 0.000567815 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1761.14 tests/s, 5283.41 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select{|v| v.is_a?(Integer)}\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp59_wkah5

    Started

    .

    Finished in 0.000611456 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1635.44 tests/s, 4906.32 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp71i6zsf

    Started

    .

    Finished in 0.001092334 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    915.47 tests/s, 2746.41 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |x| x.is_a? Integer }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpy4tztmtk

    Started

    .

    Finished in 0.00063382 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1577.74 tests/s, 4733.21 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  return values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpllpzt6hw

    Started

    .

    Finished in 0.001155153 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    865.69 tests/s, 2597.06 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n    # TODO: Your code goes here\n    values.filter{|x|\
    \ x.instance_of? Integer}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpeh4p4cn6

    Started

    .

    Finished in 0.000641491 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1558.87 tests/s, 4676.60 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxbjopzo3

    Started

    .

    Finished in 0.000639662 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1563.33 tests/s, 4689.98 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.kind_of?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcd0z2k93

    Started

    .

    Finished in 0.0006079 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1645.01 tests/s, 4935.02 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp71i6zsf

    Started

    .

    Finished in 0.001092334 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    915.47 tests/s, 2746.41 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  return values.select{|x| x.is_a? Integer}\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4cysntys

    Started

    .

    Finished in 0.000720401 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1388.12 tests/s, 4164.35 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.filter{|item| item.is_a? Integer}\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp285q1bvg

    Started

    .

    Finished in 0.000562255 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1778.55 tests/s, 5335.66 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp71i6zsf

    Started

    .

    Finished in 0.001092334 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    915.47 tests/s, 2746.41 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |i| i.is_a? Integer }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppb063zxo

    Started

    .

    Finished in 0.000615543 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1624.58 tests/s, 4873.75 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |x| x.is_a? Integer }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpy4tztmtk

    Started

    .

    Finished in 0.00063382 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1577.74 tests/s, 4733.21 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxbjopzo3

    Started

    .

    Finished in 0.000639662 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1563.33 tests/s, 4689.98 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp71i6zsf

    Started

    .

    Finished in 0.001092334 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    915.47 tests/s, 2746.41 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |i| i.is_a? Integer }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppb063zxo

    Started

    .

    Finished in 0.000615543 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1624.58 tests/s, 4873.75 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select{|i| i.is_a? Integer}\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp69w_mig3

    Started

    .

    Finished in 0.000634746 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1575.43 tests/s, 4726.30 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  result = []\n  values.each do |value|\n \
    \   if value.is_a?(Integer)\n      result << value\n    end\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqy5j4jkw

    Started

    .

    Finished in 0.000582681 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1716.20 tests/s, 5148.61 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  return values.reject { |v| !v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpuxu1vurm

    Started

    .

    Finished in 0.000568089 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1760.29 tests/s, 5280.86 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  # Your code here\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpsm98a4mv\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmpsm98a4mv.rb:13:in `test_filter_integers'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_filter_integers\n\
    \     12:     candidate = method(:filter_integers)\n  => 13:     assert_equal([],\
    \ candidate.call([]))\n     14:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     15:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     16:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.011352618 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    88.09 tests/s, 88.09 assertions/s\n"
  timestamp: 1659823116
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy6rybfce\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmpy6rybfce.rb:13:in `test_filter_integers'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_filter_integers\n\
    \     12:     candidate = method(:filter_integers)\n  => 13:     assert_equal([],\
    \ candidate.call([]))\n     14:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     15:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     16:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.006724272 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.71 tests/s, 148.71 assertions/s\n"
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n    values.select { |value| value.is_a? Integer\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpgp7qhokq

    Started

    .

    Finished in 0.000745066 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1342.16 tests/s, 4026.49 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n    values.select { |value| value.is_a? Integer\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpgp7qhokq

    Started

    .

    Finished in 0.000745066 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1342.16 tests/s, 4026.49 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp71i6zsf

    Started

    .

    Finished in 0.001092334 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    915.47 tests/s, 2746.41 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxbjopzo3

    Started

    .

    Finished in 0.000639662 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1563.33 tests/s, 4689.98 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n\treturn values.select { |val| val.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzo78cckj

    Started

    .

    Finished in 0.000585181 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.87 tests/s, 5126.62 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp71i6zsf

    Started

    .

    Finished in 0.001092334 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    915.47 tests/s, 2746.41 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  filter(values, :is_integer)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp6soi7uu6\nStarted\nE\n===============================================================================\n\
    Error: test_filter_integers(TestHumanEval):\n  NoMethodError: undefined method\
    \ `filter' for #<TestHumanEval:0x00002b5f0f595d28 @method_name=\"test_filter_integers\"\
    , @internal_data=#<Test::Unit::TestCase::InternalData:0x00002b5f0f595cb0 @start_time=2022-08-06\
    \ 17:58:36.791452811 -0400, @elapsed_time=nil, @passed=false, @interrupted=true,\
    \ @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x00002b5f0f5cb720\
    \ @assertion_count=0, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x00002b5f0f6c9ca8\
    \ @test_name=\"test_filter_integers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `filter' for #<TestHumanEval:0x00002b5f0f595d28 ...>\n  \n\
    \    filter(values, :is_integer)\n    ^^^^^^>, @method_name=\"test_filter_integers\"\
    >], @stop_tag=#<Object:0x00002b5f0f5cac08>, @failures=[], @errors=[#<Test::Unit::Error:0x00002b5f0f6c9ca8\
    \ @test_name=\"test_filter_integers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `filter' for #<TestHumanEval:0x00002b5f0f595d28 ...>\n  \n\
    \    filter(values, :is_integer)\n    ^^^^^^>, @method_name=\"test_filter_integers\"\
    >], @pendings=[], @omissions=[], @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"\
    =>{#<Test::Unit::Util::ProcWrapper:0x00002b5f0f5ca960 @a_proc=#<Proc:0x00002b5f0f5ca988\
    \ /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=47687279618440>=>#<Proc:0x00002b5f0f5ca988 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x00002b5f0f5ca208\
    \ @a_proc=#<Proc:0x00002b5f0f5ca258 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-uni"
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxbjopzo3

    Started

    .

    Finished in 0.000639662 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1563.33 tests/s, 4689.98 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxbjopzo3

    Started

    .

    Finished in 0.000639662 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1563.33 tests/s, 4689.98 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  # your code goes here\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp2rdv2o6p\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmp2rdv2o6p.rb:13:in `test_filter_integers'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_filter_integers\n\
    \     12:     candidate = method(:filter_integers)\n  => 13:     assert_equal([],\
    \ candidate.call([]))\n     14:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     15:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     16:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.007094903 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    140.95 tests/s, 140.95 assertions/s\n"
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.reject { |value| !value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpkp2wjc41

    Started

    .

    Finished in 0.000631812 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1582.75 tests/s, 4748.25 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp71i6zsf

    Started

    .

    Finished in 0.001092334 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    915.47 tests/s, 2746.41 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |i| i.is_a? Integer }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppb063zxo

    Started

    .

    Finished in 0.000615543 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1624.58 tests/s, 4873.75 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  # Your code here\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpsm98a4mv\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmpsm98a4mv.rb:13:in `test_filter_integers'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_filter_integers\n\
    \     12:     candidate = method(:filter_integers)\n  => 13:     assert_equal([],\
    \ candidate.call([]))\n     14:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     15:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     16:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.011352618 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    88.09 tests/s, 88.09 assertions/s\n"
  timestamp: 1659823116
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n\t#\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp85q1ax2z\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmp85q1ax2z.rb:13:in `test_filter_integers'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_filter_integers\n\
    \     12:     candidate = method(:filter_integers)\n  => 13:     assert_equal([],\
    \ candidate.call([]))\n     14:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     15:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     16:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.006590398 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.74 tests/s, 151.74 assertions/s\n"
  timestamp: 1659823116
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  # TODO: Your code here\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp71is82wf\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmp71is82wf.rb:13:in `test_filter_integers'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_filter_integers\n\
    \     12:     candidate = method(:filter_integers)\n  => 13:     assert_equal([],\
    \ candidate.call([]))\n     14:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     15:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     16:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.007492654 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.46 tests/s, 133.46 assertions/s\n"
  timestamp: 1659823117
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  raise NotImplementedError()\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpp5jqw7jh\nStarted\nE\n===============================================================================\n\
    Error: test_filter_integers(TestHumanEval):\n  NoMethodError: undefined method\
    \ `NotImplementedError' for #<TestHumanEval:0x00002ada49c95f38 @method_name=\"\
    test_filter_integers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x00002ada49c95d58\
    \ @start_time=2022-08-06 17:58:37.054803807 -0400, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x00002ada49cc75d8\
    \ @assertion_count=0, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x00002ada49dc5d40\
    \ @test_name=\"test_filter_integers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `NotImplementedError' for #<TestHumanEval:0x00002ada49c95f38\
    \ ...>\n  \n    raise NotImplementedError()\n          ^^^^^^^^^^^^^^^^^^^>, @method_name=\"\
    test_filter_integers\">], @stop_tag=#<Object:0x00002ada49cc6d40>, @failures=[],\
    \ @errors=[#<Test::Unit::Error:0x00002ada49dc5d40 @test_name=\"test_filter_integers(TestHumanEval)\"\
    , @exception=#<NoMethodError: undefined method `NotImplementedError' for #<TestHumanEval:0x00002ada49c95f38\
    \ ...>\n  \n    raise NotImplementedError()\n          ^^^^^^^^^^^^^^^^^^^>, @method_name=\"\
    test_filter_integers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x00002ada49cc6a70\
    \ @a_proc=#<Proc:0x00002ada49cc6ae8 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=47117029370600>=>#<Proc:0x00002ada49cc6ae8 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x00002ada49cc6340\
    \ @a_proc=#<Proc:0x00002ad"
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n\tvalues.select { |v| v.is_a? Integer }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3u7w5wgo

    Started

    .

    Finished in 0.000761835 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1312.62 tests/s, 3937.86 assertions/s

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |x| x.kind_of?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5vtffptc

    Started

    .

    Finished in 0.000572865 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1745.61 tests/s, 5236.84 assertions/s

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n    values.select { |x| x.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmprlwpjt1d

    Started

    .

    Finished in 0.000665473 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1502.69 tests/s, 4508.07 assertions/s

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n    values.select{|v| v.is_a? Integer}\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9qarlzdf

    Started

    .

    Finished in 0.000612693 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1632.14 tests/s, 4896.42 assertions/s

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  # TODO: implement me\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpu2fp4zjw\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmpu2fp4zjw.rb:13:in `test_filter_integers'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_filter_integers\n\
    \     12:     candidate = method(:filter_integers)\n  => 13:     assert_equal([],\
    \ candidate.call([]))\n     14:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     15:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     16:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.007014091 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    142.57 tests/s, 142.57 assertions/s\n"
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxbjopzo3

    Started

    .

    Finished in 0.000639662 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1563.33 tests/s, 4689.98 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  # use Array#select\n  values.select { |value|\
    \ value.class == Fixnum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0bxa2b1m

    Started

    .

    Finished in 0.000581146 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1720.74 tests/s, 5162.21 assertions/s

    '
  stdout: '/tmp/tmp0bxa2b1m.rb:8: warning: constant ::Fixnum is deprecated

    '
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp71i6zsf

    Started

    .

    Finished in 0.001092334 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    915.47 tests/s, 2746.41 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.keep_if { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3zuu3b3r

    Started

    .

    Finished in 0.000932841 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1071.99 tests/s, 3215.98 assertions/s

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |n| n.is_a? Integer }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp78wjrll9

    Started

    .

    Finished in 0.000601383 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1662.83 tests/s, 4988.50 assertions/s

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp71i6zsf

    Started

    .

    Finished in 0.001092334 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    915.47 tests/s, 2746.41 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp71i6zsf

    Started

    .

    Finished in 0.001092334 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    915.47 tests/s, 2746.41 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |i| i.is_a? Integer }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppb063zxo

    Started

    .

    Finished in 0.000615543 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1624.58 tests/s, 4873.75 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp71i6zsf

    Started

    .

    Finished in 0.001092334 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    915.47 tests/s, 2746.41 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp71i6zsf

    Started

    .

    Finished in 0.001092334 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    915.47 tests/s, 2746.41 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |x| x.is_a? Integer }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpy4tztmtk

    Started

    .

    Finished in 0.00063382 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1577.74 tests/s, 4733.21 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp71i6zsf

    Started

    .

    Finished in 0.001092334 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    915.47 tests/s, 2746.41 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  # TODO: Write your code here\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfmb3t4ln\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmpfmb3t4ln.rb:13:in `test_filter_integers'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_filter_integers\n\
    \     12:     candidate = method(:filter_integers)\n  => 13:     assert_equal([],\
    \ candidate.call([]))\n     14:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     15:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     16:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.007366159 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.76 tests/s, 135.76 assertions/s\n"
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.delete_if { |x| !x.is_a? Integer }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5z1kcpad

    Started

    .

    Finished in 0.000577686 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1731.04 tests/s, 5193.13 assertions/s

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp71i6zsf

    Started

    .

    Finished in 0.001092334 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    915.47 tests/s, 2746.41 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n    return values.select{|x| x.is_a? Integer}\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp8jqt9zy6

    Started

    .

    Finished in 0.000564879 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1770.29 tests/s, 5310.87 assertions/s

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptzbh14zi\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmptzbh14zi.rb:12:in `test_filter_integers'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_filter_integers\n\
    \     11:     candidate = method(:filter_integers)\n  => 12:     assert_equal([],\
    \ candidate.call([]))\n     13:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     14:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     15:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.011869686 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    84.25 tests/s, 84.25 assertions/s\n"
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n    # Find list of only integers\n    filter_integer\
    \ = values.select do |value|\n        value.is_a? Integer\n    end\n    return\
    \ filter_integer\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp777cfpf

    Started

    .

    Finished in 0.000605204 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1652.34 tests/s, 4957.01 assertions/s

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |i| i.is_a? Integer }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppb063zxo

    Started

    .

    Finished in 0.000615543 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1624.58 tests/s, 4873.75 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  # TODO: implement me!\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgs1265bp\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmpgs1265bp.rb:13:in `test_filter_integers'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_filter_integers\n\
    \     12:     candidate = method(:filter_integers)\n  => 13:     assert_equal([],\
    \ candidate.call([]))\n     14:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     15:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     16:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.006917491 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.56 tests/s, 144.56 assertions/s\n"
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n    values.reject { |value| ! value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpyzj1nffy

    Started

    .

    Finished in 0.000557085 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1795.06 tests/s, 5385.17 assertions/s

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxbjopzo3

    Started

    .

    Finished in 0.000639662 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1563.33 tests/s, 4689.98 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  # ...\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp2r8ywn40\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmp2r8ywn40.rb:13:in `test_filter_integers'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_filter_integers\n\
    \     12:     candidate = method(:filter_integers)\n  => 13:     assert_equal([],\
    \ candidate.call([]))\n     14:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     15:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     16:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.006595983 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.61 tests/s, 151.61 assertions/s\n"
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |x| x.is_a? Integer }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpy4tztmtk

    Started

    .

    Finished in 0.00063382 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1577.74 tests/s, 4733.21 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n    values.select { |val| val.is_a? Integer\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpmexa21ym

    Started

    .

    Finished in 0.000624262 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1601.89 tests/s, 4805.67 assertions/s

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  result = []\n  result = values.select { |x|\
    \ x.is_a? Integer }\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmps2sj_fsu

    Started

    .

    Finished in 0.00065051 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1537.26 tests/s, 4611.77 assertions/s

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |n| n.is_a? Integer }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp78wjrll9

    Started

    .

    Finished in 0.000601383 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1662.83 tests/s, 4988.50 assertions/s

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.filter { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpw1kzep60

    Started

    .

    Finished in 0.000632903 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1580.02 tests/s, 4740.06 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |i| i.is_a? Integer }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppb063zxo

    Started

    .

    Finished in 0.000615543 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1624.58 tests/s, 4873.75 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  # your code here\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1vqc5d9a\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmp1vqc5d9a.rb:13:in `test_filter_integers'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_filter_integers\n\
    \     12:     candidate = method(:filter_integers)\n  => 13:     assert_equal([],\
    \ candidate.call([]))\n     14:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     15:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     16:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.006895906 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.01 tests/s, 145.01 assertions/s\n"
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp71i6zsf

    Started

    .

    Finished in 0.001092334 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    915.47 tests/s, 2746.41 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  # your code here\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1vqc5d9a\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmp1vqc5d9a.rb:13:in `test_filter_integers'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_filter_integers\n\
    \     12:     candidate = method(:filter_integers)\n  => 13:     assert_equal([],\
    \ candidate.call([]))\n     14:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     15:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     16:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.006895906 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.01 tests/s, 145.01 assertions/s\n"
  timestamp: 1659823116
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  # YOUR CODE GOES HERE\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpx8bn22yo\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmpx8bn22yo.rb:13:in `test_filter_integers'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_filter_integers\n\
    \     12:     candidate = method(:filter_integers)\n  => 13:     assert_equal([],\
    \ candidate.call([]))\n     14:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     15:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     16:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.006538347 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.94 tests/s, 152.94 assertions/s\n"
  timestamp: 1659823117
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptzbh14zi\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmptzbh14zi.rb:12:in `test_filter_integers'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_filter_integers\n\
    \     11:     candidate = method(:filter_integers)\n  => 12:     assert_equal([],\
    \ candidate.call([]))\n     13:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     14:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     15:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.011869686 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    84.25 tests/s, 84.25 assertions/s\n"
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |x| x.is_a? Integer }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpy4tztmtk

    Started

    .

    Finished in 0.00063382 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1577.74 tests/s, 4733.21 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |x| x.is_a? Integer }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpy4tztmtk

    Started

    .

    Finished in 0.00063382 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1577.74 tests/s, 4733.21 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.reject { |value| !value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpkp2wjc41

    Started

    .

    Finished in 0.000631812 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1582.75 tests/s, 4748.25 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.filter { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp19wmr7db

    Started

    .

    Finished in 0.000578526 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1728.53 tests/s, 5185.59 assertions/s

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp71i6zsf

    Started

    .

    Finished in 0.001092334 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    915.47 tests/s, 2746.41 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.filter { |e| e.is_a? Integer }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpmhlssq80

    Started

    .

    Finished in 0.000539847 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1852.38 tests/s, 5557.13 assertions/s

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  # TODO: implement me\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpu2fp4zjw\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmpu2fp4zjw.rb:13:in `test_filter_integers'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_filter_integers\n\
    \     12:     candidate = method(:filter_integers)\n  => 13:     assert_equal([],\
    \ candidate.call([]))\n     14:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     15:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     16:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.007014091 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    142.57 tests/s, 142.57 assertions/s\n"
  timestamp: 1659823117
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  # TODO write me\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5bt2dlts\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmp5bt2dlts.rb:13:in `test_filter_integers'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_filter_integers\n\
    \     12:     candidate = method(:filter_integers)\n  => 13:     assert_equal([],\
    \ candidate.call([]))\n     14:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     15:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     16:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.006749764 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.15 tests/s, 148.15 assertions/s\n"
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |x| x.is_a? Integer }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpy4tztmtk

    Started

    .

    Finished in 0.00063382 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1577.74 tests/s, 4733.21 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |x| x.is_a? Integer }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpy4tztmtk

    Started

    .

    Finished in 0.00063382 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1577.74 tests/s, 4733.21 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp71i6zsf

    Started

    .

    Finished in 0.001092334 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    915.47 tests/s, 2746.41 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n    values.select { |v| v.class == Fixnum }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp842_tn1h

    Started

    .

    Finished in 0.000601702 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1661.95 tests/s, 4985.86 assertions/s

    '
  stdout: '/tmp/tmp842_tn1h.rb:7: warning: constant ::Fixnum is deprecated

    '
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxbjopzo3

    Started

    .

    Finished in 0.000639662 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1563.33 tests/s, 4689.98 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.keep_if { |x| x.is_a? Integer }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpmgo9eha8

    Started

    .

    Finished in 0.000550525 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1816.45 tests/s, 5449.34 assertions/s

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n\tfilter = values.find_all {|e| e.is_a? Integer}\n\
    \treturn filter\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpt5puzwmx

    Started

    .

    Finished in 0.000502367 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1990.58 tests/s, 5971.73 assertions/s

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select{|value| value.is_a? Integer}\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp576ta3eg

    Started

    .

    Finished in 0.000768378 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1301.44 tests/s, 3904.33 assertions/s

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp71i6zsf

    Started

    .

    Finished in 0.001092334 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    915.47 tests/s, 2746.41 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp71i6zsf

    Started

    .

    Finished in 0.001092334 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    915.47 tests/s, 2746.41 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select{|value| value.is_a?(Integer)}\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz8xqc_nb

    Started

    .

    Finished in 0.000512231 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1952.24 tests/s, 5856.73 assertions/s

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  # begin\n  #   values.each do |value|\n \
    \ #     value.integer?\n  #   end\n  # rescue NoMethodError\n  #   return []\n\
    \  # end\n  # return values\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: SyntaxError
  stderr: '/tmp/tmp2wzz68wx.rb:16: class definition in method body

    class TestHumanEval < Test::Unit::TestCase

    ^~~~~~~~~~~~~~~~~~~

    /tmp/tmp2wzz68wx.rb:23: syntax error, unexpected end-of-input, expecting `end''

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  #values.select { |value|  }\n  values.select\
    \ { |value| value.is_a?(Integer) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz9awm4lt

    Started

    .

    Finished in 0.000454527 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2200.09 tests/s, 6600.27 assertions/s

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  # Your code here\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpsm98a4mv\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmpsm98a4mv.rb:13:in `test_filter_integers'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_filter_integers\n\
    \     12:     candidate = method(:filter_integers)\n  => 13:     assert_equal([],\
    \ candidate.call([]))\n     14:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     15:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     16:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.011352618 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    88.09 tests/s, 88.09 assertions/s\n"
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.class == Fixnum }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpv4rsssm5

    Started

    .

    Finished in 0.000603782 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1656.23 tests/s, 4968.68 assertions/s

    '
  stdout: '/tmp/tmpv4rsssm5.rb:7: warning: constant ::Fixnum is deprecated

    '
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n    return values.select{|x| x.is_a? Integer}\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp8jqt9zy6

    Started

    .

    Finished in 0.000564879 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1770.29 tests/s, 5310.87 assertions/s

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp71i6zsf

    Started

    .

    Finished in 0.001092334 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    915.47 tests/s, 2746.41 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n    return values.filter { |v| v.is_a? Integer\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplzgiygip

    Started

    .

    Finished in 0.000554368 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1803.86 tests/s, 5411.57 assertions/s

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  # TODO\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpaatmnpr0\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmpaatmnpr0.rb:13:in `test_filter_integers'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_filter_integers\n\
    \     12:     candidate = method(:filter_integers)\n  => 13:     assert_equal([],\
    \ candidate.call([]))\n     14:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     15:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     16:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.00672591 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.68 tests/s, 148.68 assertions/s\n"
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |i| i.is_a? Integer }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppb063zxo

    Started

    .

    Finished in 0.000615543 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1624.58 tests/s, 4873.75 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n\tresult = values.select { |value| (value.is_a?\
    \ Integer) }\n\tresult.sort!{ |val1, val2| val2 <=> val1 }\n\treturn result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprhg_54j0\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmprhg_54j0.rb:16:in `test_filter_integers'\n\
    \     13:   def test_filter_integers\n     14:     candidate = method(:filter_integers)\n\
    \     15:     assert_equal([], candidate.call([]))\n  => 16:     assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n     17:     assert_equal([3,\
    \ 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n     18:   end\n   \
    \  19: end\n<[4, 9]> expected but was\n<[9, 4]>\n\ndiff:\n? [9, 4, 9]\n===============================================================================\n\
    \nFinished in 0.007870892 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.05 tests/s, 254.10 assertions/s\n"
  timestamp: 1659823117
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  # write your code here\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqhxyz9wj\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmpqhxyz9wj.rb:13:in `test_filter_integers'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_filter_integers\n\
    \     12:     candidate = method(:filter_integers)\n  => 13:     assert_equal([],\
    \ candidate.call([]))\n     14:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     15:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     16:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.006265241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.61 tests/s, 159.61 assertions/s\n"
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |i| i.is_a? Integer }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppb063zxo

    Started

    .

    Finished in 0.000615543 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1624.58 tests/s, 4873.75 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  # code goes here\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg871o5o4\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmpg871o5o4.rb:13:in `test_filter_integers'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_filter_integers\n\
    \     12:     candidate = method(:filter_integers)\n  => 13:     assert_equal([],\
    \ candidate.call([]))\n     14:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     15:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     16:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.00662988 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.83 tests/s, 150.83 assertions/s\n"
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |x| x.is_a? Integer }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpy4tztmtk

    Started

    .

    Finished in 0.00063382 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1577.74 tests/s, 4733.21 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptzbh14zi\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmptzbh14zi.rb:12:in `test_filter_integers'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_filter_integers\n\
    \     11:     candidate = method(:filter_integers)\n  => 12:     assert_equal([],\
    \ candidate.call([]))\n     13:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     14:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     15:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.011869686 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    84.25 tests/s, 84.25 assertions/s\n"
  timestamp: 1659823116
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptzbh14zi\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmptzbh14zi.rb:12:in `test_filter_integers'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_filter_integers\n\
    \     11:     candidate = method(:filter_integers)\n  => 12:     assert_equal([],\
    \ candidate.call([]))\n     13:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     14:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     15:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.011869686 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    84.25 tests/s, 84.25 assertions/s\n"
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp71i6zsf

    Started

    .

    Finished in 0.001092334 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    915.47 tests/s, 2746.41 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  # your code goes here\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp2rdv2o6p\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmp2rdv2o6p.rb:13:in `test_filter_integers'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_filter_integers\n\
    \     12:     candidate = method(:filter_integers)\n  => 13:     assert_equal([],\
    \ candidate.call([]))\n     14:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     15:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     16:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.007094903 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    140.95 tests/s, 140.95 assertions/s\n"
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxbjopzo3

    Started

    .

    Finished in 0.000639662 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1563.33 tests/s, 4689.98 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  # TODO: implement\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp92oar9hb\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmp92oar9hb.rb:13:in `test_filter_integers'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_filter_integers\n\
    \     12:     candidate = method(:filter_integers)\n  => 13:     assert_equal([],\
    \ candidate.call([]))\n     14:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     15:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     16:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.006616464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.14 tests/s, 151.14 assertions/s\n"
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select{|val| val.is_a? Integer}\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp6ea44vha

    Started

    .

    Finished in 0.000631961 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1582.38 tests/s, 4747.13 assertions/s

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxbjopzo3

    Started

    .

    Finished in 0.000639662 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1563.33 tests/s, 4689.98 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |val| val.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpjfshf5pv

    Started

    .

    Finished in 0.000497631 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2009.52 tests/s, 6028.56 assertions/s

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n    # Your code goes here!\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd2iepis_\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmpd2iepis_.rb:13:in `test_filter_integers'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_filter_integers\n\
    \     12:     candidate = method(:filter_integers)\n  => 13:     assert_equal([],\
    \ candidate.call([]))\n     14:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     15:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     16:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.006505584 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.71 tests/s, 153.71 assertions/s\n"
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.filter { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp19wmr7db

    Started

    .

    Finished in 0.000578526 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1728.53 tests/s, 5185.59 assertions/s

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  raise NotImplementedError()\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpp5jqw7jh\nStarted\nE\n===============================================================================\n\
    Error: test_filter_integers(TestHumanEval):\n  NoMethodError: undefined method\
    \ `NotImplementedError' for #<TestHumanEval:0x00002ada49c95f38 @method_name=\"\
    test_filter_integers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x00002ada49c95d58\
    \ @start_time=2022-08-06 17:58:37.054803807 -0400, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x00002ada49cc75d8\
    \ @assertion_count=0, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x00002ada49dc5d40\
    \ @test_name=\"test_filter_integers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `NotImplementedError' for #<TestHumanEval:0x00002ada49c95f38\
    \ ...>\n  \n    raise NotImplementedError()\n          ^^^^^^^^^^^^^^^^^^^>, @method_name=\"\
    test_filter_integers\">], @stop_tag=#<Object:0x00002ada49cc6d40>, @failures=[],\
    \ @errors=[#<Test::Unit::Error:0x00002ada49dc5d40 @test_name=\"test_filter_integers(TestHumanEval)\"\
    , @exception=#<NoMethodError: undefined method `NotImplementedError' for #<TestHumanEval:0x00002ada49c95f38\
    \ ...>\n  \n    raise NotImplementedError()\n          ^^^^^^^^^^^^^^^^^^^>, @method_name=\"\
    test_filter_integers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x00002ada49cc6a70\
    \ @a_proc=#<Proc:0x00002ada49cc6ae8 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=47117029370600>=>#<Proc:0x00002ada49cc6ae8 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x00002ada49cc6340\
    \ @a_proc=#<Proc:0x00002ad"
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp71i6zsf

    Started

    .

    Finished in 0.001092334 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    915.47 tests/s, 2746.41 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |i| i.class == Fixnum }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1g_xhovq

    Started

    .

    Finished in 0.000533073 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1875.92 tests/s, 5627.75 assertions/s

    '
  stdout: '/tmp/tmp1g_xhovq.rb:7: warning: constant ::Fixnum is deprecated

    '
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |item| item.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpy1snlbzu

    Started

    .

    Finished in 0.000632701 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1580.53 tests/s, 4741.58 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp71i6zsf

    Started

    .

    Finished in 0.001092334 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    915.47 tests/s, 2746.41 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp71i6zsf

    Started

    .

    Finished in 0.001092334 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    915.47 tests/s, 2746.41 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |val| val.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpjfshf5pv

    Started

    .

    Finished in 0.000497631 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2009.52 tests/s, 6028.56 assertions/s

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp71i6zsf

    Started

    .

    Finished in 0.001092334 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    915.47 tests/s, 2746.41 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n\t# YOUR CODE HERE\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp0rmzschv\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmp0rmzschv.rb:13:in `test_filter_integers'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_filter_integers\n\
    \     12:     candidate = method(:filter_integers)\n  => 13:     assert_equal([],\
    \ candidate.call([]))\n     14:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     15:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     16:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.006681834 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    149.66 tests/s, 149.66 assertions/s\n"
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp71i6zsf

    Started

    .

    Finished in 0.001092334 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    915.47 tests/s, 2746.41 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  # Your code goes here\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4r_rtymv\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmp4r_rtymv.rb:13:in `test_filter_integers'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_filter_integers\n\
    \     12:     candidate = method(:filter_integers)\n  => 13:     assert_equal([],\
    \ candidate.call([]))\n     14:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     15:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     16:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.006958478 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.71 tests/s, 143.71 assertions/s\n"
  timestamp: 1659823117
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  # TODO: implement the method.\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp_2o_ji1m\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmp_2o_ji1m.rb:13:in `test_filter_integers'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_filter_integers\n\
    \     12:     candidate = method(:filter_integers)\n  => 13:     assert_equal([],\
    \ candidate.call([]))\n     14:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     15:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     16:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.006607197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.35 tests/s, 151.35 assertions/s\n"
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxbjopzo3

    Started

    .

    Finished in 0.000639662 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1563.33 tests/s, 4689.98 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n\tvalues.select{|value| value.is_a? Integer}\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpy3f4w3v2

    Started

    .

    Finished in 0.000505786 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1977.12 tests/s, 5931.36 assertions/s

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |n| n.is_a? Integer }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp78wjrll9

    Started

    .

    Finished in 0.000601383 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1662.83 tests/s, 4988.50 assertions/s

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select{|value| value.is_a? Integer}\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp576ta3eg

    Started

    .

    Finished in 0.000768378 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1301.44 tests/s, 3904.33 assertions/s

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.keep_if{|v| v.is_a? Integer}\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpi21ur6kg

    Started

    .

    Finished in 0.000518896 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1927.17 tests/s, 5781.51 assertions/s

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select{|v| v.is_a?(Integer)}\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp59_wkah5

    Started

    .

    Finished in 0.000611456 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1635.44 tests/s, 4906.32 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  # Using select!\n  values.select! { |value|\
    \ value.is_a? Integer }\n  # Using each\n  # new_values = []\n  # values.each\
    \ { |value| new_values << value if value.is_a? Integer }\n  # new_values\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5zqyqfcx\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmp5zqyqfcx.rb:18:in `test_filter_integers'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_filter_integers\n\
    \     17:     candidate = method(:filter_integers)\n  => 18:     assert_equal([],\
    \ candidate.call([]))\n     19:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     20:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     21:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.006261561 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.70 tests/s, 159.70 assertions/s\n"
  timestamp: 1659823117
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptzbh14zi\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmptzbh14zi.rb:12:in `test_filter_integers'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_filter_integers\n\
    \     11:     candidate = method(:filter_integers)\n  => 12:     assert_equal([],\
    \ candidate.call([]))\n     13:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     14:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     15:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.011869686 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    84.25 tests/s, 84.25 assertions/s\n"
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select{|v| v.is_a? Integer}\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp628giltk

    Started

    .

    Finished in 0.00047828 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2090.83 tests/s, 6272.48 assertions/s

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n    values.select { |value| value.is_a? Integer\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpgp7qhokq

    Started

    .

    Finished in 0.000745066 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1342.16 tests/s, 4026.49 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select{|v| v.class == Fixnum}\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqxj9lvyt

    Started

    .

    Finished in 0.000513935 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1945.77 tests/s, 5837.31 assertions/s

    '
  stdout: '/tmp/tmpqxj9lvyt.rb:7: warning: constant ::Fixnum is deprecated

    '
  timestamp: 1659823117
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  # your code here\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1vqc5d9a\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmp1vqc5d9a.rb:13:in `test_filter_integers'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_filter_integers\n\
    \     12:     candidate = method(:filter_integers)\n  => 13:     assert_equal([],\
    \ candidate.call([]))\n     14:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     15:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     16:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.006895906 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.01 tests/s, 145.01 assertions/s\n"
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |e| e.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpmxcpqvn1

    Started

    .

    Finished in 0.000486801 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2054.23 tests/s, 6162.68 assertions/s

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |val| val.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpjfshf5pv

    Started

    .

    Finished in 0.000497631 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2009.52 tests/s, 6028.56 assertions/s

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  return values.select { |i| i.is_a? Integer\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzxixmg4l

    Started

    .

    Finished in 0.000434481 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2301.60 tests/s, 6904.79 assertions/s

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n    values.select { |x| x.is_a? Integer }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpaphdlfil

    Started

    .

    Finished in 0.000427702 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2338.08 tests/s, 7014.23 assertions/s

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_filter_integers\n    candidate = method(:filter_integers)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([4, 9], candidate.call([4,\
    \ {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptzbh14zi\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmptzbh14zi.rb:12:in `test_filter_integers'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_filter_integers\n\
    \     11:     candidate = method(:filter_integers)\n  => 12:     assert_equal([],\
    \ candidate.call([]))\n     13:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     14:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     15:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.011869686 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    84.25 tests/s, 84.25 assertions/s\n"
  timestamp: 1659823116
- exit_code: 1
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  # your code goes here\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n    candidate\
    \ = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n    assert_equal([4,\
    \ 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n    assert_equal([3, 3,\
    \ 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp2rdv2o6p\nStarted\nF\n===============================================================================\n\
    Failure: test_filter_integers(TestHumanEval)\n/tmp/tmp2rdv2o6p.rb:13:in `test_filter_integers'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_filter_integers\n\
    \     12:     candidate = method(:filter_integers)\n  => 13:     assert_equal([],\
    \ candidate.call([]))\n     14:     assert_equal([4, 9], candidate.call([4, {},\
    \ [], 23.2, 9, \"adasd\"]))\n     15:     assert_equal([3, 3, 3], candidate.call([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]))\n     16:   end\n<[]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.007094903 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    140.95 tests/s, 140.95 assertions/s\n"
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |x| x.is_a? Integer }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpy4tztmtk

    Started

    .

    Finished in 0.00063382 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1577.74 tests/s, 4733.21 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n\tvalues.select { |x| x.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4tomtv3f

    Started

    .

    Finished in 0.000631558 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1583.39 tests/s, 4750.16 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxbjopzo3

    Started

    .

    Finished in 0.000639662 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1563.33 tests/s, 4689.98 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
- exit_code: 0
  program: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
    \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2,\
    \ 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
    \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n \
    \   assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxbjopzo3

    Started

    .

    Finished in 0.000639662 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1563.33 tests/s, 4689.98 assertions/s

    '
  stdout: ''
  timestamp: 1659823116
