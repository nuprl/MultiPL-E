name: HumanEval_151_double_the_difference
language: rb
prompt: "# Given a list of numbers, return the sum of squares of the numbers\n# in\
  \ the list that are odd. Ignore numbers that are negative or not integers.\n# double_the_difference([1,\
  \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1, -2, 0]) == 0\n#\
  \ double_the_difference([9, -2]) == 81\n# double_the_difference([0]) == 0  \n# If\
  \ the input list is empty, return 0.\ndef double_the_difference(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
  \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
  \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
  \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0,\
  \ candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
  \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
  \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
completions: ["  lst.select{|x| x.is_a? Integer and x >= 0}.inject(0){|s,x| s + x%2\
    \ == 1 ? x**2 : 0}\nend", "  lst.select { |e| e.odd? }.map { |e| e * e }.sum\n\
    end", "\t# create and save hash of odd numbers\n\todds = Hash.new(0)\n\tlst.each\
    \ { |n| odds[n] += 1 if n.to_i.odd? }\n\todds = odds.keys\n\t# check if empty,\
    \ return 0 if so, or iterate\n\treturn 0 if odds.empty?\n\todds.inject(0) { |sum,\
    \ n| sum + n**2 }\nend", "\treturn lst.inject(0) { |sum, n| n.odd? ? sum + n**2\
    \ : sum }\nend", "  lst.select { |number| number.is_a?(Integer) && number > 0\
    \ }\n      .map { |number| number * number }\n      .inject(0, :+)\nend", "  #\
    \ your code here\nend", "  return 0 if lst.empty?\n  sum = 0\n  lst.each do |n|\n\
    \    if n.is_a?(Integer) && n >= 0\n      sum += n if n.odd?\n    end\n  end\n\
    \  sum * 2\nend", "  new_list = []\n  lst.each do |num|\n    if num.is_a?(Integer)\
    \ && num > 0\n      if num.odd?\n        new_list << num**2\n      end\n    end\n\
    \  end\n  return new_list.inject(:+)\nend", "  # your code here\nend", "  lst.inject(0)\
    \ { |acc, el| el.is_a?(Integer) && el > 0 ? acc + el**2 : acc }\nend", "  return\
    \ 0 if lst.empty?\n  lst.reject!{|x| x < 0}\n  lst.reject!{|x| x%1 != 0}\n  lst.map!{|x|\
    \ x = x**2}\n  lst.inject(:+)\nend", "  # Your code here\nend", "  sum = 0\n \
    \ lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      if num.odd?\n\
    \        sum += num**2\n      end\n    end\n  end\n  sum\nend", "    filtered_list\
    \ = lst.select{|n| n % 2 == 1 && n > 0}\n    sum = 0\n    filtered_list.each{|n|\
    \ sum += n**2}\n    return sum\nend", "  sum_of_squares = 0\n  if lst.empty?\n\
    \    sum_of_squares\n  else\n    lst.each do |num|\n      if num.is_a?(Integer)\
    \ && num > 0 && num.odd?\n        sum_of_squares += num**2\n      end\n    end\n\
    \    sum_of_squares\n  end\nend", end, "\tsum = 0\n\tlst.each { |x| \n\t\tif x.to_f\
    \ % 2 == 1 && x > 0\n\t\t\tsum += x * x\n\t\tend\n\t}\n\treturn sum\nend", " \
    \   if lst.empty?\n        return 0\n    end\n    sum = 0\n    lst.each do |x|\n\
    \        if x > 0 and x.is_a? Integer and x.odd?\n            sum += x**2\n  \
    \      end\n    end\n    return sum\nend", end, "    lst.select { |x| x if x.is_a?(Integer)\
    \ && x > 0 }.map { |x| x ** 2 }.reduce(:+) || 0\nend", "  lst.select{|n| n.is_a?(Integer)\
    \ && n.odd?}.inject(0){|sum, n| sum + n**2}\nend", "  sum = 0\n  lst.each do |n|\n\
    \    sum += n**2 if n.is_a?(Integer) && n > 0\n  end\n  sum\nend\nputs double_the_difference([1,\
    \ 3, 2, 0])\nputs double_the_difference([-1, -2, 0])\nputs double_the_difference([9,\
    \ -2])\nputs double_the_difference([0])\nputs double_the_difference([1, 2, -4,\
    \ 5, -10, -9, -4, 4, -11, -2, 3, -8, -1, 2, 0, -4, 6, -9, -9, -7, -3, -5, 2, -8,\
    \ 1, -7, -10, -5, 2, -8, -2, 3, -1, -6, 1, -2, 4, -2, -3, -6, -3, -9, -3, -1,\
    \ 5, -1, -6, 5, -8, 4, -2, 4, 0, -9, 5, 4, -10, 2, 3, -2, -5, -8, -5, 2, -3, -3,\
    \ -3, 0, -4, -4, -4, -4, -4, -4, -7, -4, -2, 0, 3, -2, -7, -1, -6, -2, 3, -6,\
    \ -7, -9, -9, -9, -10, -1, -3, -6, -3, -3, -2, -6, 3, -9, 0, -1, -6, -3, -3, -3,\
    \ -3, -3, -3, -2, -6, -8, -1, -7, -6, -10, -7, -2, -6, -9, -9, -9, -9, -4, -7,\
    \ -4, -4, -4, -4, -4, -4, -4, -7, -2, -10, -10, -2, -7, -8, -10, -7, -3", "  nonnegints\
    \ = lst.select { |x| x >= 0 && x.is_a?(Integer) }\n  squares = nonnegints.map\
    \ { |x| x * x }\n  return squares.reduce(:+)\nend", "  # YOUR CODE HERE\nend",
  "  lst.keep_if{|i| i > 0 && i % 2 == 1}\n  lst.map!{|i| i * i}\n  if lst.empty?\n\
    \    return 0\n  else\n    return lst.reduce(:+)\n  end\nend", "  return 0 if\
    \ lst.empty?\n  lst.inject(0) { |sum, n| n.abs.is_a?(Integer) && n.odd? ? sum\
    \ + n**2 : sum }\nend", "    lst.select { |x| x.is_a?(Integer) && x % 2 != 0 }.map\
    \ { |x| x * x }.reduce(0, :+)\nend", "  lst.map{|i| i**2 if i.odd?}.compact.sum\n\
    end", "  sum = 0\n  lst.each do |number|\n    if number % 2 == 1\n      sum +=\
    \ number ** 2\n    end\n  end\n  sum\nend", "  x = lst.map{|n| n.is_a?(Integer)\
    \ && n > 0 ? n**2 : 0}.inject(:+)\n  x = 0 if x.nil?\n  return x\nend", "  lst\
    \ = lst.find_all { |x| x.is_a?(Integer) && x.odd? }\n  lst.map { |x| x ** 2 }.reduce(:+)\
    \ || 0\nend", "  sum = 0\n  lst.each do |num|\n    if num % 2 == 1 && num > 0\n\
    \      sum += num**2\n    end\n  end\n  sum\nend", "    if lst.empty?\n      \
    \  return 0\n    end\n    sum = 0\n    lst.each do |val|\n        if val.is_a?\
    \ Integer and val % 2 == 1\n            sum += val ** 2\n        end\n    end\n\
    \    return sum\nend", "    lst.select{|x| x.is_a?(Integer) && x > 0}.map{|x|\
    \ x**2}.inject(0, :+)\nend", "\tsum = 0\n\tif lst.empty?\n\t\treturn 0\n\tend\n\
    \tlst.each do |x|\n\t\tif (x % 2 != 0) && (x.class == Fixnum)\n\t\t\tsum += x\
    \ * x\n\t\tend\n\tend\n\treturn sum\nend", "  return 0 if lst.empty?\n  lst.select!\
    \ { |num| num.is_a?(Integer) && num >= 0 }\n  lst.select! { |num| num.odd? }\n\
    \  lst.map! { |num| num * num }\n  lst.reduce(:+)\nend", "  sum = 0\n  for x in\
    \ lst\n    if x.is_a?(Integer) && x > 0\n      if x % 2 == 1\n        sum += x\
    \ ** 2\n      end\n    end\n  end\n  return sum\nend", "  sum = 0\n  lst.each\
    \ do |num|\n    sum += num.abs ** 2 if num.abs % 2 == 1 && num.is_a?(Integer)\n\
    \  end\n  sum\nend", "  total = 0\n  lst.each do |num|\n    if num.is_a?(Integer)\
    \ && num > 0\n      total += num * num\n    end\n  end\n  total\nend", "  (lst.select\
    \ { |n| n.odd? && n.integer? }).inject(0) { |sum, n| sum + n * n }\nend", "  arr\
    \ = []\n  lst.each { |n| arr << n if n.is_a?(Integer) && n > 0 && n % 2 != 0 }\n\
    \  return 0 if arr.empty?\n  arr.map { |i| i ** 2 }.reduce(:+)\nend", "  if lst.empty?\n\
    \    0\n  else\n    lst.map{|num| num.abs}.select{|num| num.is_a?(Integer) &&\
    \ num.odd?}.inject(0){|sum, num| sum + num ** 2}\n  end\nend", "  return 0 if\
    \ lst.empty?\n  lst.select { |n| n.is_a?(Integer) && n.odd? }.map { |n| n ** 2\
    \ }.reduce(:+)\nend", "    return 0 if lst.empty?\n    lst.reject { |num| num.class\
    \ != Integer || num < 0 }.map { |num| num**2 if num.odd? }.compact.sum\nend",
  "  # your code here\nend", "  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer)\
    \ && num > 0\n      sum += num * num if num.odd?\n    end\n  end\n  sum\nend",
  "  lst = lst.select{|num| num.is_a?(Integer) && num > 0}\n  lst.map!{|num| num *\
    \ 2}\n  return 0 if lst.empty?\n  lst.reduce(:+)\nend", "  # your code here\n\
    end", "  lst.select { |item| item.is_a?(Integer) && item.odd? }.map { |item| item\
    \ * item }.sum\nend", "  filtered_list = lst.select { |num| num.is_a?(Integer)\
    \ && num > 0}\n  filtered_list.map { |num| num**2 }.sum\nend", "  lst.select{|x|\
    \ x % 2 == 1 || x % 2 == -1}.map{|x| x**2}.inject(:+) || 0\nend", '  return 0
    if lst.empty?', "  # replace this with your code\nend", "  \n  # \n  if(lst.empty?)\n\
    \    return 0\n  end\n  \n  # \n  odds = lst.select { |n| n.odd? }\n  sums = odds.map\
    \ { |n| n * n }\n  double_the_difference(sums)\nend", "  sum_square_odds = 0\n\
    \  lst.each do |x|\n    if (x%2) == 1 && x.class == Fixnum\n      sum_square_odds\
    \ += x**2\n    end\n  end\n  sum_square_odds\nend", "  lst = lst.reject{|i| i\
    \ < 0 || i.to_i != i}\n  lst.map{|i| i * i}.inject(0, &:+)\nend", "    evens =\
    \ lst.select { |x| x.is_a?(Integer) && x > 0 && x.even? }\n    odds = lst.select\
    \ { |x| x.is_a?(Integer) && x > 0 && x.odd? }\n    return (evens.reduce(:+) -\
    \ odds.reduce(:+)).abs * 2\nend", "  lst.select { |num| num.is_a?(Integer) &&\
    \ num.odd? }.map { |num| num ** 2 }.sum\nend", "  #your code here\nend", "  return\
    \ 0 if lst.empty?\n  lst.map { |num| num ** 2 if num.is_a?(Integer) && num > 0\
    \ }.compact.sum\nend", "  # Your Code Here\nend", "  # your code here\nend", " \
    \   # added 0 as the first argument to avoid issues with the first\n    # item\
    \ being negative\n    lst.reduce(0) { |sum, num| num.integer? && num > 0 ? sum\
    \ + num**2 : sum }\nend", "  return 0 if lst.empty?\n  lst.map { |x| x**2 }.inject(0)\
    \ { |sum, num| sum + num unless num.negative? }\nend", "  lst.map { |x| x.is_a?(Integer)\
    \ && x.abs % 2 == 1 ? x ** 2 : 0 }.sum\nend", "  puts \"~\" * 50\n  puts \"INPUT:\
    \ #{lst}\"\n  puts \"~\" * 50\n  \n  # SOLUTION HERE\n  # input list is empty\n\
    \  return 0 if lst.empty?\n  \n  # list of positive integers\n  positive_integers\
    \ = lst.select { |num| num > 0 }\n  \n  # positive integers that are odd\n  odd_integers\
    \ = positive_integers.select { |num| num.odd? }\n  \n  # square the odd integers\n\
    \  odd_integers_squared = odd_integers.map { |num| num ** 2 }\n  \n  # sum of\
    \ odd squared integers\n  odd_integers_squared.sum\nend", "  sum = 0\n  lst.each\
    \ do |num|\n    if num.is_a?(Integer) && num.odd?\n      sum += num**2\n    end\n\
    \  end\n  sum\nend", "  sum = 0\n  lst.each do |number|\n    if number.to_i %\
    \ 2 == 1 && number.to_i > 0\n      sum += number.to_i ** 2\n    end\n  end\n \
    \ sum\nend", "  lst = lst.select { |num| num.is_a?(Integer) && num > 0 }\n  lst.select!\
    \ { |num| num.odd? }\n  lst.map! { |num| num * num }\n  lst.reduce(:+)\nend",
  "  lst = lst.select do |num|\n    num.is_a?(Integer) && num.odd?\n  end\n  lst.empty?\
    \ ? 0 : lst.map { |num| num**2 }.sum\nend", "  # Your Code Here\nend", "  sum\
    \ = 0\n  lst.each do |number|\n    if number > 0 && number % 2 != 0\n      sum\
    \ += number ** 2\n    end\n  end\n  sum\nend", "  # your code here\n  sum = 0\n\
    \  lst.each do |x|\n    sum += x**2 if x.is_a?(Integer) && x > 0\n  end\n  sum\n\
    end", "\treturn 0 if lst.empty?\n\ttotal = 0\n\tlst.each { |x| total += x.abs2\
    \ if x.is_a?(Integer) && x.odd? }\n\ttotal\nend", "\tlst.select {|num| num % 2\
    \ == 1 && num > 0}.map {|num| num * num}.reduce(:+) || 0\nend", "  lst.collect{|n|\
    \ n.is_a?(Integer) && n > 0 ? n**2 : 0}.reduce(:+)\nend", "   sum = 0\n   lst.each\
    \ do |i|\n     if i.is_a? Integer and i > 0\n       sum += i*i\n     end\n   end\n\
    \   return sum\nend", "  lst.select { |num| num.odd? && num.integer? && num >\
    \ 0 }.map { |odd_num| odd_num ** 2 }.sum\nend", "  return 0 if lst.empty?\n  lst\n\
    \    .map { |n| n.abs }\n    .reject { |n| n.to_i != n || n.even? }\n    .map\
    \ { |n| n**2 }\n    .reduce(:+)\nend", "    sum = 0\n    lst.each do |num|\n \
    \       if num.is_a?(Integer) && num > 0\n            if num % 2 == 1\n      \
    \          sum += num**2\n            end\n        end\n    end\n    return sum\n\
    end", "  return 0 if lst.empty?\n  lst.map { |num| num.is_a?(Integer) && num >\
    \ 0 ? num ** 2 : 0 }.sum\nend", "  # insert your code here\nend", "  lst.reduce(0)\
    \ { |s, n| (n.is_a?(Integer) && n > 0) ? s + n**2 : s }\nend", "\t# initializing\
    \ variables that we will need. \n\t# Will store total at the end\n\ttotal = 0\n\
    \t# will use each to iterate over the list\n\tlst.each do |num|\n\t\t# check to\
    \ see if the number is an integer\n\t\tif num.is_a? Integer\n\t\t\t# check to\
    \ see if the number is odd\n\t\t\tif num.odd?\n\t\t\t\t# if number is odd and\
    \ integer, square it and add to total\n\t\t\t\ttotal += num**2\n\t\t\tend\n\t\t\
    end\n\tend\n\treturn total\nend", "  lst.select{|e| e.odd? && e.integer? && e\
    \ > 0}.map{|e| e ** 2}.reduce(:+) || 0\nend", "  sum = 0\n  lst.each do |num|\n\
    \    next if !num.is_a?(Integer) || num < 0 || num % 2 == 0\n    sum += num **\
    \ 2\n  end\n  sum\nend", "    sum = 0\n    lst.each { |x| sum += x*x if x.is_a?(Integer)\
    \ && x.odd? }\n    sum\nend", "  lst.inject(0) { |sum, n| n.to_i.odd? ? sum +\
    \ n**2 : sum }\nend", "  return 0 if lst.empty?\n  lst.map { |x| x.is_a?(Integer)\
    \ && x >= 0 ? x**2 : 0 }.reduce(:+)\nend", "    # code\n    return nil\nend",
  "  return 0 if lst.empty?\n  lst.map { |i| i.to_i }.select { |i| i.odd? }.map {\
    \ |i| i ** 2 }.reduce(:+)\nend", "    lst.select { |x| x.odd? && x.is_a?(Integer)\
    \ && x > 0}.map { |x| x * x }.reduce(:+)\nend", "  if lst.empty?\n    return 0\n\
    \  end\n  count = 0\n  for i in 0..lst.length-1\n    if (lst[i] % 2 != 0) && (lst[i]\
    \ >= 0)\n      count += lst[i]**2\n    end\n  end\n  return count\nend", "  squares\
    \ = []\n  lst.each do |num|\n    if num > 0 && num % 2 == 1\n      squares <<\
    \ num ** 2\n    end\n  end\n  return squares.sum\nend", "  # lst.map{|num| num**2\
    \ if num.is_a?(Integer) && num % 2 != 0 }.compact.reduce(:+) || 0\n  lst.select{|num|\
    \ num.is_a?(Integer) && num % 2 != 0 }.map{|num| num**2 }.reduce(:+) || 0\nend",
  "  #return 0 if lst.empty?\n  #lst.find_all { |n| n.is_a?(Integer) && n > 0 }.map\
    \ { |n| n * n }.inject(:+)\n  lst.find_all { |n| n.is_a?(Integer) && n > 0 }.map\
    \ { |n| n * n }.reduce(0, :+)\nend", "  # since we have to use a basic loop, use\
    \ Enumerable#each\n  total = 0\n  lst.each do |num|\n    # if num.is_a?(Integer)\
    \ && num.odd?\n    #   total += num**2\n    # end\n    # or use Enumerable#grep\n\
    \    total += num**2 if num.is_a?(Integer) && num.odd?\n  end\n  total\nend",
  "    lst.select { |num| num.odd? }.map { |num| num ** 2 }.sum\nend", "  # BEGIN\
    \ SOLUTION\n  lst.inject(0) { |sum, n| n.is_a?(Integer) && n > 0 ? sum + n**2\
    \ : sum }\n  # END SOLUTION\nend", "\tsum = 0\n\tlst.each do |x|\n\t\tif x.is_a?(Integer)\n\
    \t\t\tif x > 0\n\t\t\t\tif x % 2 != 0\n\t\t\t\t\tsum += x ** 2\n\t\t\t\tend\n\t\
    \t\tend\n\t\tend\n\tend\n\tsum\nend", "  lst.select { |num| num > 0 && num.integer?\
    \ }.map { |num| num ** 2 }.reduce(:+)\nend", "  # code goes here\nend", "\tsum\
    \ = 0\n\tlst.each do |a|\n\t\tsum += a**2 if a % 2 == 1\n\tend\n\tsum\nend", " \
    \ return 0 if lst.empty?\n  result = 0\n  lst.each do |x|\n    result += x**2\
    \ if x.odd? && x > 0\n  end\n  result\nend", "  lst.reject { |num| num < 0 ||\
    \ num % 1 != 0 }.select { |num| num.odd? }.map { |num| num * num }.sum\nend",
  "    lst.select { |i| i.odd? }.map { |i| i * i }.reduce(0, :+)\nend", "\tsum = 0\n\
    \tlst.each { |x|\n\t\tsum += x * x if x.is_a?(Integer) && x > 0\n\t}\n\tsum\n\
    end", "  if lst.empty?\n    return 0\n  end\n  sum = 0\n  lst.each do |n|\n  \
    \  if n.is_a?(Integer) && n > 0\n      sum += n**2\n    end\n  end\n  return sum\n\
    end", "    new_lst = lst.reject{|x| x < 0 || x % 1 != 0}\n    squared_odds = new_lst.select{|x|\
    \ x % 2 != 0}.map{|x| x ** 2}\n    squared_odds.inject(0){|sum, x| sum + x}\n\
    end", "  return 0 if lst.empty?\n  lst.inject(0) { |sum, n| n.is_a?(Integer) &&\
    \ n.odd? ? sum + n**2 : sum }\nend", "\tlst.map! {|i| i**2 if i.odd? }.compact!.inject(:+)\n\
    end", "  lst.select{|num| num.odd? }.map{|num| num**2 }.sum  \nend", "    count\
    \ = 0\n    lst.each do |x|\n        if x % 2 == 1 && x > 0\n            count\
    \ += x * x\n        end\n    end\n    return count\nend", "  lst.delete_if { |x|\
    \ x < 0 || x % 1 != 0 }\n  lst.inject(0) { |sum, x| sum + x**2 }\nend", "  unless\
    \ lst.empty?\n    sum = 0\n    lst.each do |n|\n      sum += n if n > 0 && n.is_a?(Integer)\
    \ && n % 2 != 0\n    end\n    sum * 2\n  else\n    0\n  end\nend", "\tlst.inject(0)\
    \ { |sum, num| num % 2 == 1 && num.is_a?(Integer) ? sum + num ** 2 : sum }\nend",
  "  return 0 if lst.empty?\n  lst.select { |n| n.is_a?(Integer) && n > 0 }.reduce(0)\
    \ { |sum,n| n.odd? ? sum + n**2 : sum }\nend", "    lst.map! {|x|\n        if\
    \ x.is_a?(Integer) && x > 0\n            x ** 2\n        else\n            0\n\
    \        end\n    }\n    lst.reduce(:+)\nend", "  return 0 if lst.empty?\n  lst.map\
    \ { |n| (n.is_a? Integer) && (n > 0) ? n**2 : 0 }.inject(:+)\nend", "  lst.select\
    \ { |n| n.abs.to_s == n.to_s && n.odd? }.map { |n| n ** 2 }.reduce(0, :+)\nend",
  "  lst.map! { |x| x if x.is_a?(Integer) && x > 0 }.compact!\n  lst.map! { |x| x\
    \ ** 2 if x.odd? }.compact!\n  lst.reduce(:+) || 0\nend", "  lst = lst.select\
    \ { |i| i.is_a?(Integer) && i > 0 }\n  return 0 if lst.empty?\n  lst.select {\
    \ |i| i.odd? }.map { |j| j * j }.reduce(:+)\nend", "  if lst.length < 1\n    return\
    \ 0\n  end\n  ans = 0\n  for i in lst\n    if i%2 == 1 && i.is_a?(Integer) &&\
    \ i > 0\n      ans += i**2\n    end\n  end\n  return ans\nend", "  sum = 0\n \
    \ lst.each do |number|\n    if number.is_a?(Integer) && number >= 0\n      sum\
    \ += number**2 if number % 2 != 0\n    end\n  end\n  sum\nend", "  if lst.empty?\n\
    \    0\n  else\n    lst.map{|num| num.odd? ? num**2 : 0}.sum\n  end\nend", " \
    \ # Your code here.\nend", "  sum = 0\n  lst.each do |num|\n    if num % 2 ==\
    \ 1 && num > 0\n      sum += num * num\n    end\n  end\n  sum\nend", "    new_list\
    \ = []\n    lst.each do |num|\n        if num > 0\n            num = num * num\n\
    \            new_list << num\n        end\n    end\n    sum = 0\n    new_list.each\
    \ do |n|\n        sum += n\n    end\n    return sum\nend", "  # TODO\nend", "\t\
    result = 0\n\tfor elem in lst\n\t\tresult += elem**2 if elem.is_a?(Integer) &&\
    \ elem > 0\n\tend\n\tresult\nend", "  lst.reduce(0) { |diff, num| num.is_a?(Integer)\
    \ && num > 0 ? diff + num*num : diff }\nend", "  lst.map { |v| v**2 if v.is_a?(Integer)\
    \ && v > 0 }.compact.sum\nend", "  sum = 0\n  lst.each do |x|\n    if x.is_a?(Integer)\
    \ && x % 2 != 0 && x > 0\n      sum += x ** 2\n    end\n  end\n  sum\nend", " \
    \   # YOUR CODE HERE\nend", "\treturn 0 if lst.empty?\n\tlst.select { |x| x %\
    \ 2 == 1 }.inject(0) { |sum, x| sum + x**2 }\nend", "  # Your code here\nend",
  "\tnewlst = lst.select {|num| num.is_a?(Integer) && num.odd? && num > 0}\n\tputs\
    \ newlst.map {|num| num**2}.inject(:+)\nend\ndouble_the_difference([1, 3, 2, 0])\
    \ #== 10\ndouble_the_difference([-1, -2, 0]) #== 0\ndouble_the_difference([9,\
    \ -2]) #== 81\ndouble_the_difference([0]) #== 0  \ndouble_the_difference([]) #==\
    \ 0", "\tsum = 0\n\tlst.each do |i|\n\t\tif i.is_a?(Integer) && i % 2 != 0\n\t\
    \t\tsum += i**2\n\t\tend\n\tend\n\tsum\nend", "  arr = lst.select { |n| n.is_a?(Integer)\
    \ }\n  num = arr.select { |n| n.odd? }\n  return 0 if num.empty?\n  num.map! {\
    \ |n| n * n }\n  num.reduce(:+)\nend", "  lst.select(&:odd?).sum(&:abs2)\nend",
  "  output = 0\n  lst.each do |val|\n    if val > 0 && val % 2 == 1\n      output\
    \ += val * val\n    end\n  end\n  output\nend", "\tsquare_sum = 0\n\tlst.each\
    \ do |x|\n\t\tif x.is_a?(Integer) && x % 2 != 0\n\t\t\tsquare_sum += x ** 2\n\t\
    \tend\n\tend\n\tsquare_sum\nend", "  sum = 0\n  lst.each do |x|\n    if x.is_a?(Integer)\
    \ && x > 0\n      if x % 2 == 1\n        sum += x * x\n      end\n    end\n  end\n\
    \  return sum\nend", "    lst.keep_if{|x| x.is_a? Integer and x > 0}\n    lst.map!{|x|\
    \ x**2}\n    lst.select!{|x| x.odd?}\n    lst.reduce(:+)\nend", "  # CODE HERE\n\
    end", "  if lst.length == 0\n    return 0\n  end\n  sum = 0\n  for i in 0..lst.length-1\n\
    \    if lst[i]%2 != 0 and lst[i] > 0\n      sum += lst[i]*lst[i]\n    end\n  end\n\
    \  return sum\nend", "  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer)\
    \ && num.odd?\n      sum += num ** 2\n    end\n  end\n  sum\nend", "  \n  if lst.length\
    \ == 0\n    0\n  else\n    sum = 0\n    lst.each do |num|\n      if (num.is_a?\
    \ Integer) && (num > 0) && (num % 2 != 0)\n        sum += num**2\n      end\n\
    \    end\n    sum\n  end\n  \nend", "  # Your code here\nend", "  #@TODO\nend",
  "  lst.reduce(0) { |acc, num|\n    if num < 0 || !num.is_a?(Integer)\n      acc\n\
    \    elsif num.odd?\n      acc + num ** 2\n    else\n      acc\n    end\n  }\n\
    end", "  lst.select{|x| x % 2 == 1 && x > 0}.reduce(0){|sum, x| sum + x**2}\n\
    end", "    sum = 0\n    lst.each do |x|\n        if x.is_a? Integer && x.odd?\n\
    \            sum += x**2\n        end\n    end\n    return sum\nend", "  total\
    \ = 0\n  lst.each do |e|\n    if e.is_a?(Integer) && e > 0\n      total += e**2\
    \ if e.odd?\n    end\n  end\n  total\nend", "  return 0 if lst.empty?\n  lst\n\
    \    .map { |val| val.to_i }\n    .select { |val| val.odd? && val >= 0 }\n   \
    \ .map { |val| val ** 2 }\n    .reduce(:+)\nend", "  sum = 0\n  lst.each do |val|\n\
    \    if val.class == Fixnum && val % 2 != 0 && val > 0\n      sum += val**2\n\
    \    end\n  end\n  sum\nend", "\ttotal = 0\n\tif lst.empty?\n\t\treturn 0\n\t\
    else\n\t\tlst.each do |x|\n\t\t\tif x > 0 && x % 2 == 1\n\t\t\t\ttotal += x**2\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn total\nend", "  sum = 0\n  lst.each do |num|\n\
    \    sum += num.to_i ** 2 if num.to_i % 2 == 1 && num.is_a?(Integer)\n  end\n\
    \  sum\nend", "   \n    # Your code here\n    sum = 0", "  total = 0\n  lst.each\
    \ do |num|\n    if num.is_a?(Integer) && num.odd?\n      total += num ** 2\n \
    \   end\n  end\n  total\nend", "  count = 0\n  lst.each do |x|\n    if x.to_i.odd?\n\
    \      count += x**2\n    end\n  end\n  count\nend", "  # Your code here\nend",
  "    count = 0\n    squared = []\n    lst.each do |x|\n        if x > 0 && x.is_a?(Integer)\n\
    \            squared << x**2\n        end\n    end\n    squared.each do |x|\n\
    \        if x.odd?\n            count += x\n        end\n    end\n    count\n\
    end", "  # write your code here\nend", "  # Your Code Here\nend", "    lst.select{|x|\
    \ x % 2 == 1 && x.is_a?(Integer) && x > 0}.reduce(0, :+)\nend", "  \n  # Handle\
    \ empty lists\n  if lst.empty?\n    return 0\n  end\n  \n  # Find the sum of numbers\
    \ that are odd and positive\n  lst.inject(0) do |sum, num|\n    sum += num**2\
    \ if num.is_a?(Integer) && num > 0 && num.odd?\n    sum\n  end\nend", "\tsum =\
    \ 0\n\tsum += lst.select{|x| x.is_a? Integer}.select{|x| x.odd?}.map{|x| x**2}.reduce(:+)\
    \ || 0\n\tsum\nend", "  lst.select { |e| e.is_a?(Integer) && e >= 0 && e.odd?\
    \ }.map { |e| e**2 }.sum\nend", "\t# YOUR CODE HERE\nend", "    return 0 if lst.empty?\n\
    \    lst.select { |i| i > 0 && i.is_a?(Integer) }.map { |i| i**2 }.reduce(:+)\n\
    end", "  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n\
    \      if num % 2 == 1\n        sum += num * num\n      end\n    end\n  end\n\
    \  sum\nend", "  # TODO\nend", "    #enter code here\n    square = lst.map {|x|\
    \ x * x}\n    square.select! {|x| x.odd?}\n    if square.length == 0\n       \
    \ return 0\n    else\n        return square.reduce(:+)\n    end\nend", "  lst.map{|x|\
    \ x.abs.is_a?(Integer) ? (x.abs**2) : 0}.reduce(:+)\nend", "    lst.select { |n|\
    \ n.is_a?(Integer) && n > 0 }.map { |n| n ** 2 }.reduce(0, :+)\nend", "  # CODE\
    \ GOES HERE\nend", "  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer)\
    \ and num % 2 == 1\n      sum += num * num\n    end\n  end\n  sum\nend", "   \
    \ sum = 0\n    lst.each do |num|\n        if num.abs.class == Integer && num >\
    \ 0\n            sum += num * num\n        end\n    end\n    return sum\nend",
  "  # if lst.empty?\n  #   0\n  # else\n  #   new_lst = lst.select { |num| num >\
    \ 0 && num.to_i == num }\n  #   new_lst.select { |num| num.odd? }.map { |num|\
    \ num ** 2 }.sum\n  # end\n  \n  lst.select { |num| num > 0 && num.to_i == num\
    \ }\n     .select { |num| num.odd? }\n     .map { |num| num ** 2 }\n     .sum\n\
    end", "  return 0 if lst.empty?\n  lst.reject { |num| num < 0 || num % 1 != 0\
    \ }.select { |num| num.odd? }.reduce(0) { |sum, num| sum + num ** 2 }\nend", " \
    \ if lst.length == 0\n    return 0\n  end\n  sum = 0\n  lst.each do |num|\n  \
    \  if num.is_a?(Integer) and num > 0\n      if num % 2 == 1\n        sum += num\
    \ ** 2\n      end\n    end\n  end\n  return sum\nend", "  nums = lst.select {\
    \ |num| num.is_a?(Integer) && num >= 0 }\n  nums.map { |num| num ** 2 }.select\
    \ { |num| num.odd? }.reduce(:+) || 0\nend", "  sum = 0\n  if lst.length == 0\n\
    \    return 0\n  else\n    for num in lst\n      if num > 0 && num.instance_of?(Integer)\n\
    \        sum += num**2\n      end\n    end\n  end\n  return sum\nend", "  # ---\
    \ your code here ---\n  if lst.empty?\n    return 0\n  else\n    lst.reject!{|x|\
    \ x < 0 or x.to_s.to_i != x}\n    lst.map!{|x| x*x}\n    lst.reject!{|x| x%2 ==\
    \ 0}\n    return lst.inject(:+)\n  end\nend", "  lst.select { |num| (num%2).nonzero?\
    \ }.inject(0) { |sum, num| sum + num**2 }\nend", "    # YOUR CODE HERE\nend",
  "  sum = 0\n  lst.each do |x|\n    sum += x**2 if x.is_a?(Integer) && x > 0\n  end\n\
    \  sum\nend", "   sum_of_squares = 0\n   lst.each do |l|\n      if l.abs.to_s\
    \ == l.to_s && l > 0 && l % 2 == 1\n         sum_of_squares += l * l\n      end\n\
    \   end\n   return sum_of_squares\nend", "  sum = 0\n  for i in lst\n    sum +=\
    \ i * i if i.is_a?(Integer) && i % 2 != 0 && i >= 0\n  end\n  sum\nend", "  #\
    \ NOTE: Using `lst.reduce(0) { |sum, n| sum + n * n }` instead of\n  # `lst.reduce(0,\
    \ :+)` causes a surprising result.\n  # What is the difference between the two\
    \ syntaxes?\n  sum = lst.select { |n| n.is_a?(Integer) && n.odd? }.reduce(0, :+)\n\
    \  return sum\nend", "  # lst.select{|i| i % 2 == 1 && i > 0}.reduce(0) {|sum,\
    \ i| sum + i * i}\n  lst.map{|i| i.to_i}.select{|i| i % 2 == 1 && i > 0}.reduce(0)\
    \ {|sum, i| sum + i * i}\nend", "  # your code here\nend", "  if lst.empty?\n\
    \    return 0\n  end\n  odd_numbers = []\n  for n in lst\n    if n%2 == 1\n  \
    \    odd_numbers.push(n)\n    end\n  end\n  doubled_numbers = []\n  for n in odd_numbers\n\
    \    doubled_numbers.push(n*2)\n  end\n  if doubled_numbers.empty?\n    return\
    \ 0\n  end\n  sum = 0\n  for n in doubled_numbers\n    sum = sum + n\n  end\n\
    \  return sum\nend", "  lst.select { |num| num.odd? }.map { |num| num * num }.sum\n\
    end", "    sum = 0\n    lst.each { |num| sum += num**2 if num > 0 && num.is_a?(Integer)\
    \ }\n    sum\nend", "    lst.select{|i| i.is_a?(Integer) && i > 0 && i % 2 !=\
    \ 0}.map{|i| i ** 2}.sum\nend", "  lst.map{|x|x.is_a?(Integer)&& x>0 ? x : 0}.map{|x|\
    \ x.odd? ? x : 0}.map{|x| x*x}.reduce(:+)\nend", "    lst.map { |num|\n      \
    \  if num.class == Integer && num > 0 && num.odd?\n            num ** 2\n    \
    \    else\n            0\n        end\n    }.reduce(:+)\nend", "  # your code\
    \ here\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
