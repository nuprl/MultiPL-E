name: HumanEval_84_solve
language: rb
prompt: "# Given a positive integer N, return the total sum of its digits in binary.\n\
  # Example\n# For N = 1000, the sum of digits will be 1 the output should be \"1\"\
  .\n# For N = 150, the sum of digits will be 6 the output should be \"110\".\n# For\
  \ N = 147, the sum of digits will be 12 the output should be \"1100\".\n# Variables:\n\
  # @N integer\n# Constraints: 0 \u2264 N \u2264 10000.\n# Output:\n# a string of\
  \ binary number\ndef solve(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
  \    candidate = method(:solve)\n    assert_equal(\"1\", candidate.call(1000))\n\
  \    assert_equal(\"110\", candidate.call(150))\n    assert_equal(\"1100\", candidate.call(147))\n\
  \    assert_equal(\"1001\", candidate.call(333))\n    assert_equal(\"10010\", candidate.call(963))\n\
  \  end\nend\n"
completions: ["\tn.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  sum = 0\n  binary\
    \ = n.to_s(2)\n  binary.split('').each do |num|\n    sum += num.to_i\n  end\n\
    \  sum\nend", "  n.to_s(2).chars.map(&:to_i).reduce(:+)\nend", "  return n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "  # Write your code here\n  return \"0\" if n == 0\n  n.to_s(2).split(\"\
    \").map(&:to_i).inject(:+)\nend", "  sum = 0\n  n.to_s(2).split('').each do |i|\n\
    \    sum += i.to_i\n  end\n  sum\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  # binary = n.to_s(2)\n  # sum = 0\n  # binary.split('').each { |bin|\
    \ sum += bin.to_i }\n  # sum\n  # n.to_s(2).split('').reduce(0) { |sum, ch| sum\
    \ + ch.to_i }\n  n.to_s(2).chars.map(&:to_i).reduce(:+)\nend", "  n.to_s(2).chars.map(&:to_i).reduce(:+)\n\
    end", "  return n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  #x = 10\n\
    \  #y = 1101\n  #puts '%010b' % x\n  #puts '%010b' % y\n  #puts n.to_s(2)\n  n.to_s(2).split('').map{|x|\
    \ x.to_i }.inject(:+)\nend", "  n.to_s(2).chars.map(&:to_i).reduce(:+)\nend\n\
    p solve(N)", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  sum = 0\n\
    \  while n >= 1\n    sum += n % 2\n    n /= 2\n  end\n  sum\nend", "  s = \"\"\
    \n  j = 1\n  while j < n\n    j = j*2\n  end\n  # puts \"j = #{j}\"\n  while j\
    \ > 0\n    if n >= j\n      s += \"1\"\n      n -= j\n    else\n      s += \"\
    0\"\n    end\n    j = j/2\n  end\n  s\nend", "  binary_string = n.to_s(2)\n  binary_string.split('').map(&:to_i).inject(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  n.to_s(2).chars.map(&:to_i).reduce(:+)\n\
    end", "    binary_number = n.to_s(2)\n    sum = 0\n    binary_number.each_char\
    \ do |num|\n        sum += num.to_i\n    end\n    sum\nend", "  n.to_s(2).chars.map(&:to_i).inject(:+)\n\
    end", end, "  # n to binary\n  # join into string\n  # characters to array\n \
    \ # inject total\n  n.to_s(2).chars.map(&:to_i).inject(:+)\nend", "  # Write your\
    \ code here\n  bin = n.to_s(2)\n  sum = 0\n  bin.split('').each do |b|\n    sum\
    \ = sum + b.to_i\n  end\n  return sum\nend", "  binary_num = n.to_s(2)\n  binary_num.split('').map(&:to_i).inject(:+)\n\
    end", "    # write your code here\n    n = n.to_s(2)\n    n = n.split('')\n  \
    \  n = n.map(&:to_i)\n    puts n.inject(:+)\nend", "  bin = n.to_s(2)\n  count\
    \ = 0\n  bin.split('').each do |c|\n    count += c.to_i\n  end\n  count\nend",
  "    n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  p n.to_s(2).split('').map{|x| x.to_i}.inject(:+)\nend", "  n.to_s(2).chars.map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).split('').inject(0) { |sum, n| sum += n.to_i }\nend", "  sum\
    \ = 0\n  binary = n.to_s(2)\n  binary.each_char do |c|\n    sum += c.to_i\n  end\n\
    \  sum\nend", "    temp = n.to_s(2)\n    total = 0\n    temp.split(\"\").each\
    \ do |num|\n      total += num.to_i\n    end\n    return total\nend", "  n.to_s(2).split('').inject(0)\
    \ { |sum, i| sum + i.to_i }\nend", "  n.to_s(2).chars.map(&:to_i).reduce(:+)\n\
    end", "\treturn n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "  # Write your code here\n  n.to_s(2).chars.map(&:to_i).reduce(:+)\nend",
  "  if n.is_a? Integer\n    sum = 0\n    n.to_s(2).split('').each { |x| sum += x.to_i\
    \ }\n    sum.to_s\n  else\n    'Input is not an integer'\n  end\nend", "  ans\
    \ = []\n  until n == 0\n    ans << n % 2\n    n /= 2\n  end\n  ans.join('')\n\
    end", "  ans = []\n  for i in (1..n)\n    ans.push(i.to_s(2))\n  end\n  puts ans.join\n\
    end", "  binary = n.to_s(2)\n  binary.split('').map { |d| d.to_i }.reduce(:+)\n\
    end\nputs solve(1000)", "    n.to_s(2).split('').map{|x| x.to_i}.inject{|sum,\
    \ x| sum + x}\nend", "\treturn n.to_s(2).split('').map(&:to_i).inject(:+)\nend",
  "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  n.to_s(2).chars.map(&:to_i).inject(:+)\n\
    end\nputs solve(5)\nputs solve(150)\nputs solve(14)\nputs solve(10)\nputs solve(11)\n\
    puts solve(12)\nputs solve(13)\nputs solve(14)\nputs solve(15)\nputs solve(16)\n\
    puts solve(18)\nputs solve(19)\nputs solve(20)\nputs solve(21)\nputs solve(22)\n\
    puts solve(23)\nputs solve(24)\nputs solve(25)\nputs solve(26)\nputs solve(27)\n\
    puts solve(28)\nputs solve(29)\nputs solve(30)\nputs solve(31)\nputs solve(32)\n\
    puts solve(33)\nputs solve(34)\nputs solve(35)\nputs solve(36)\nputs solve(37)\n\
    puts solve(38)\nputs solve(39)\nputs solve(40)\nputs solve(41)\nputs solve(42)\n\
    puts solve(43)\nputs solve(44)\nputs solve(45)\nputs solve(46)\nputs solve(47)\n\
    puts solve(48)\nputs solve(49)\nputs solve(50)\nputs solve(51)\nputs solve(52)\n\
    puts solve(53)\nputs solve(54)\nputs solve(55)\nputs solve(56)\nputs solve(57)\n\
    puts solve(58)\nputs solve(59)\nputs solve(60)\nputs solve(61)\nputs solve(62)\n\
    puts solve(63)\nputs solve(64)\nputs solve(65)\nputs solve(66)\nputs solve(67)\n\
    puts solve(68)\nputs solve(69)\nputs solve(70)\nputs solve(71)\nputs solve(72)\n\
    puts solve(73)\nputs solve(74)\nputs solve(75)\nputs solve(76)\nput", "  n.to_s(2).chars.inject(0)\
    \ { |sum, d| sum + d.to_i }\nend", "  #..\nend", "  (n.to_s(2).chars.map { |x|\
    \ x.to_i }).reduce(:+)\nend", "  bin_ary = []\n  while n >= 1\n    bin_ary <<\
    \ n % 2\n    n /= 2\n  end\n  if bin_ary.empty?\n    bin_ary << 0\n  end\n  bin_ary.reverse.join\n\
    end", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  # write your code\
    \ here\n  x = n.to_s(2)\n  sum = 0\n  x.each_char { |i| sum += i.to_i }\n  sum\n\
    end", "  n.to_s(2).chars.map(&:to_i).inject(:+)\nend", "  n.to_s(2).chars.map(&:to_i).reduce(:+)\n\
    end", "  # write your code here\n  n.to_s(2).chars.inject(0) { |s, c| s + c.to_i\
    \ }\nend", "  str = \"\"\n  while n > 0\n    str += n % 2\n    n /= 2\n  end\n\
    \  return str.reverse\nend", "  #..\n  to_binary(n).chars.reduce(0) { |sum, i|\
    \ sum + i.to_i }\nend", "  n.to_s(2).chars.map(&:to_i).reduce(:+)\nend", "  n.to_s(2).split('').inject(0)\
    \ { |sum, i| sum + i.to_i }\nend", "  # your code here\n  sum=0\n  l_bin=[]\n\
    \  while n>0\n    b=n%2\n    n=n/2\n    l_bin<<b\n  end\n  puts l_bin.reverse\n\
    \  l_bin.reverse.each do |i|\n    sum+=i\n  end\n  puts sum\nend", "  s = 0\n\
    \  bin = n.to_s(2)\n  bin.each_char do |c|\n    s += c.to_i\n  end\n  s\nend",
  "  b = n.to_s(2)\n  sum = 0\n  b.each_char do |i|\n    sum += i.to_i\n  end\n  sum\n\
    end", "  n.to_s(2).chars.map(&:to_i).inject(:+)\nend", "  return \"\" if n ==\
    \ 0\n  solve(n / 2) + (n % 2).to_s\nend", "  n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "  return n.to_s(2).chars.map(&:to_i).reduce(:+)\nend", "    s = 0\n   \
    \ a = n.to_s(2)\n    for i in 0..a.length\n        s += a[i].to_i\n    end\n \
    \   s\nend\nputs solve(150)\nputs solve(147)\nputs solve(1000)", "  n.to_s(2).chars.map(&:to_i).inject(:+)\n\
    end", "  str = \"\"\n  while n > 0\n    str += (n % 2).to_s\n    n /= 2\n  end\n\
    \  sum = 0\n  str.each_char do |num|\n    sum += num.to_i\n  end\n  sum\nend",
  "  n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  # write your code here\n\
    \  return n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  # write your code\
    \ here\n  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", '  #..', "  sum =\
    \ 0\n  n.to_s(2).split('').each do |i|\n    sum += i.to_i\n  end\n  sum\nend",
  "  bin_num = n.to_s(2)\n  bin_sum = 0\n  bin_num.each_char { |ch| bin_sum += ch.to_i\
    \ }\n  bin_sum\nend", "  sum = 0\n  n.to_s(2).each_char { |c| sum += c.to_i }\n\
    \  sum\nend", "    binary = n.to_s(2)\n    binary.chars.map(&:to_i).inject(:+)\n\
    end", "  p n.to_s(2).split('').map(&:to_i).reduce(:+)\nend\nsolve(147)", "  n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "  return n.to_s(2).chars.map(&:to_i).inject(:+)\nend", "  #\n  # this is\
    \ an easy one, just convert the number to binary and do a split and sum\n  #\n\
    \  n.to_s(2).split('').map(&:to_i).sum\nend", "  # Your code here\nend\n```",
  "  n.to_s(2).split('').inject(0) { |sum, i| sum + i.to_i }\nend", "  n.to_s(2).scan(/\\\
    d/).inject(0) { |s, i| s + i.to_i }\nend", "  n.to_s(2).chars.map(&:to_i).inject(:+)\n\
    end\nsolve(1000)\nsolve(150)\nsolve(147)", "  sum = 0\n  while n > 0\n    a =\
    \ n % 2\n    n = n / 2\n    sum += a\n  end\n  return sum\nend", "  # write your\
    \ code here\n  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  # convert\
    \ to binary, and sum the digits\n  n.to_s(2).chars.map(&:to_i).inject(:+)\nend",
  "    # 1's and 0's\n    # positive integer N\n    # return sum of digits in binary\n\
    \    \n    # convert N to binary string\n    binary_string = n.to_s(2)\n    #\
    \ print binary_string\n    # sum all digits\n    sum = 0\n    binary_string.each_char\
    \ do |char|\n        sum += char.to_i\n    end\n    # print sum\n    # return\
    \ sum as string\n    return sum.to_s\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end\nputs solve(1000)", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", " \
    \ n.to_s(2).split('').inject(0) { |sum, char| sum + char.to_i }\nend", "  binary\
    \ = n.to_s(2)\n  binary.split('').map(&:to_i).inject(:+)\nend", "  binary = []\n\
    \  sum = 0\n  (n).to_s(2).split('').each { |x| binary << x }\n  binary.map! {\
    \ |x| x.to_i }\n  binary.each { |x| sum += x }\n  sum\nend", "  # your code here\n\
    end", "  n.to_s(2).chars.map(&:to_i).reduce(:+)\nend", "  return nil if n.nil?\n\
    \  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  s = 0\n  while n > 0\n\
    \    s += n % 2\n    n /= 2\n  end\n  s\nend", "  ans = 0\n  while n > 0\n   \
    \ ans += n % 2\n    n /= 2\n  end\n  ans\nend", "  sum = 0\n  binary = []\n  until\
    \ n == 0\n    binary << n % 2\n    n /= 2\n  end\n  binary.reverse.each { |num|\
    \ sum += num }\n  sum\nend", "  n.to_s(2).split('').map(&:to_i).inject(:+)\nend",
  "  n.to_s(2).chars.map(&:to_i).inject(:+)\nend", "  n.to_s(2).chars.map(&:to_i).inject(:+)\n\
    end", "  n.to_s(2).split('').map{|x| x.to_i}.reduce(:+)\nend\nputs solve(1000)\n\
    puts solve(150)\nputs solve(147)", "  # Write your code here\n  array = n.to_s(2).split('')\n\
    \  array.map! { |e| e.to_i}\n  array.inject { |sum, n| sum + n }\nend", "  n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "    sum = 0\n    binary_string\
    \ = \"\"\n    while(n > 0)\n      if n % 2 == 0\n        binary_string.prepend(\"\
    0\")\n      else\n        binary_string.prepend(\"1\")\n      end\n      n = n\
    \ / 2\n    end\n    binary_string.each_char do |c|\n      sum += c.to_i\n    end\n\
    \    return sum\nend", "  return n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end\nn = 1000\nputs solve(n)", "    sum = 0\n    # iterate over the binary representation\n\
    \    # which is the equivalent of a modulo 2\n    # which is the equivalent of\
    \ a bit-wise AND operation\n    # with 1\n    while n != 0\n        sum += n &\
    \ 1\n        n >>= 1\n    end\n    return sum\nend", "  # Solve here\n  # A slice\
    \ of the cake\n  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "\tn.to_s(2).split('').map{|i|\
    \ i.to_i}.reduce(:+)\nend\nn = gets.chomp.to_i\nputs solve(n)", "    n.to_s(2).chars.map(&:to_i).reduce(:+)\n\
    end", "  sum = 0\n  until n == 0\n    sum += n % 2\n    n /= 2\n  end\n  sum\n\
    end", "  sum = 0\n  binary = n.to_s(2)\n  binary.each_char { |c| sum += c.to_i\
    \ }\n  sum\nend", "  return n.to_s(2).split('').map(&:to_i).inject(:+)\nend",
  "  output = []\n  n.to_s(2).split('').each { |num| output << num.to_i }\n  output.inject(:+)\n\
    end", "  i = 0\n  bin = 0\n  while n > 0\n    bin += ((n % 2) * 10**i)\n    n\
    \ /= 2\n    i += 1\n  end\n  return bin.to_s.split('').map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).chars.map(&:to_i).inject(:+)\nend", "  n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "\tsum_digit(n.to_s(2))\nend", "  n.to_s(2).chars.map(&:to_i).inject(:+)\n\
    end", "  n.to_s(2).chars.map(&:to_i).inject(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  sum = 0\n  n = n.to_s(2)\n  n.split('').each do |x|\n    sum += x.to_i\n\
    \  end\n  sum\nend", "  if n == 0\n    \"0\"\n  else\n    binary = Array.new\n\
    \    remain = 0\n    while n > 0\n      remain = n % 2\n      n = n / 2\n    \
    \  binary.push(remain)\n    end\n    binary.reverse!\n    binary.join\n  end\n\
    end", "  # Write your code here\n  n.to_s(2).chars.map(&:to_i).reduce(:+)\nend",
  "  n.to_s(2).chars.map(&:to_i).inject(:+)\nend\nputs solve(147)", "  n.to_s(2).chars.inject(0)\
    \ { |sum, num| sum + num.to_i }\nend", "  # n.to_s(2).chars.map(&:to_i).reduce(:+)\n\
    \  n.to_s(2).chars.map(&:to_i).sum\nend", "  # Write your code here\n  # Convert\
    \ from decimal to binary\n  # Return the sum of its digits\n  sum = 0\n  binary\
    \ = n.to_s(2)\n  binary.each_char do |digit|\n    sum += digit.to_i\n  end\n \
    \ return sum\nend", "  n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  n.to_s(2).chars.map(&:to_i).inject(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  # your code here\n\
    \  #n.to_s(2).split('').reduce(0) { |s,v| s+=v.to_i}\n  n.to_s(2).chars.map(&:to_i).reduce(:+)\n\
    end", "  # sum = 0\n  # n.to_s(2).split('').each do |e|\n  #   sum += e.to_i\n\
    \  # end\n  # sum.to_s\n  #\n  # a = n.to_s(2)\n  # (0..a.length - 1).reduce(0)\
    \ { |acc, x| acc + a[x].to_i }.to_s\n  #\n  # sum = 0\n  # n.to_s(2).each_char\
    \ { |char| sum += char.to_i }\n  # sum.to_s\n  #\n  n.to_s(2).split('').map(&:to_i).sum.to_s\n\
    end", "  n.to_s(2).chars.map(&:to_i).reduce(:+)\nend", "  # convert n to binary\n\
    \  # split the binary number as characters\n  # convert each character back to\
    \ integer\n  # sum the integers\n  binary = n.to_s(2)\n  binary.split('').map\
    \ { |s| s.to_i }.sum\nend", "  n.to_s(2).split('').map(&:to_i).inject(:+)\nend\n\
    p solve(1000)\np solve(150)\np solve(147)", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "    return n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  # get binary\
    \ value of the integer\n  # split the number into an array\n  # sum the binary\
    \ digits\n  # return the answer\n  # sum = 0\n  # n.to_s(2).split('').each { |x|\
    \ sum += x.to_i }\n  # return sum.to_s\n  n.to_s(2).split('').inject(0) { |sum,\
    \ x| sum += x.to_i }.to_s\nend", "  n.to_s(2).chars.map(&:to_i).reduce(:+)\nend",
  "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  sum = 0\n  binary = n.to_s(2)\n\
    \  binary.split('').each do |digit|\n    sum += digit.to_i\n  end\n  return sum\n\
    end", "  # convert n to binary string\n  binary_string = n.to_s(2)\n  # split\
    \ string into array\n  binary_array = binary_string.split('')\n  # sum array\n\
    \  binary_array.map(&:to_i).reduce(:+)\nend", "  n.to_s(2).chars.inject(0) { |sum,\
    \ c| sum + c.to_i }\nend", "  # Write your code here\n  sum = 0\n  bin = []\n\
    \  bin = n.to_s(2).split('')\n  bin.each do |num|\n    sum += num.to_i\n  end\n\
    \  puts sum\nend", "  # your code here\n  return n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "  # Define an array of 2 characters: [0, 1]\n  b = [0, 1]\n  # Convert\
    \ the integer to string\n  s = n.to_s\n  # Initiate a new array called bits which\
    \ will store the binary number\n  bits = []\n  # Iterate through each character\
    \ in the string\n  s.each_char do |c|\n    # Convert the character to integer\n\
    \    n = c.to_i\n    # Append to the bits array the first b elements from the\
    \ end\n    # of the array\n    bits.unshift(*b.slice(-n, n))\n    # Slice from\
    \ the end of the array the first n elements\n    b.slice!(-n, n)\n  end\n  # Join\
    \ the bits array with '' to return a string\n  bits.join('')\nend", "  bin = n.to_s(2)\n\
    \  array = bin.split('')\n  sum = 0\n  array.each do |b|\n    sum += b.to_i\n\
    \  end\n  sum\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  sum\
    \ = 0\n  n.to_s(2).split('').each { |i| sum += i.to_i }\n  return sum\nend", " \
    \ # convert to binary, to array, convert each to integer, get sum\n  n.to_s(2).chars.map(&:to_i).sum\n\
    end", "  result = 0\n  binary = ''\n  if n == 0\n    puts binary << '0'\n  else\n\
    \    while n > 0\n      if n % 2 == 0\n        binary.prepend('0')\n      else\n\
    \        binary.prepend('1')\n      end\n      n /= 2\n    end\n    puts binary\n\
    \  end\nend", "  a = []\n  c = 0\n  p = 0\n  i = 0\n  b = 1\n  while n >= 1\n\
    \    a[i] = n % 2\n    n = n / 2\n    i += 1\n  end\n  a.each do |x|\n    p +=\
    \ x * b\n    b *= 10\n  end\n  p\nend", "  puts n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  binary = n.to_s(2)\n\
    \  binary.split('').map{|i| i.to_i}.inject(:+)\nend", "  a = \"\"\n  while n >\
    \ 0\n    r = n % 2\n    a = r.to_s + a\n    n = n / 2\n  end\n  return a\nend",
  "  n.to_s(2).split('').inject(0) { |sum, n| sum += n.to_i }\nend", "    puts n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  n.to_s(2).chars.map(&:to_i).reduce(:+)\n\
    end", "  # your code here\n  answer = \"\"\n  while n > 0\n  \tanswer << (n %\
    \ 2).to_s\n  \tn /= 2\n  end\n  answer.reverse\nend", "  n.to_s(2).chars.map(&:to_i).inject(:+)\n\
    end", "    return n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  n.to_s(2).each_char.map(&:to_i).inject(:+)\n\
    end", "  # write your code here\n  # puts n\n  # n = n.to_s(2)\n  # puts n\n \
    \ # n.count(\"1\")\n  # or\n  n.to_s(2).count(\"1\")\nend", "  n.to_s(2).chars.map(&:to_i).reduce(:+)\n\
    end", "  result = 0\n  while n > 0\n    result += n % 2\n    n /= 2\n  end\n \
    \ result\nend", "  n.to_s(2).split('').inject(0) { |sum, c| sum + c.to_i }\nend\n\
    puts solve(1000)", "  n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  s =\
    \ []\n  if n == 0\n    return \"0\"\n  end\n  until n <= 0\n    s.push(n % 2)\n\
    \    n = n / 2\n  end\n  s.join('')\nend", "    # Write your code here\n    #\
    \ \u4EE52\u9032\u4F4D\u8868\u793A\u6642\uFF0C\u82E5N\u662F2\u7684\u5E73\u65B9\u6578\
    \uFF0C\u5247N\u9032\u4F4D\u8868\u793A\u53EA\u6709\u4E00\u500B1\u3002\n    # The\
    \ value of N is a power of 2.\n    count = 0\n    sum = 0\n    while n > 0\n \
    \       count += 1\n        if n % 2 == 1\n            sum += count\n        end\n\
    \        n /= 2\n    end\n    return sum\nend", "  # convert to base 2\n  # then\
    \ add all numbers\n  puts n.to_s(2).chars.map(&:to_i).inject(:+)\nend", "  n.to_s(2).chars.map(&:to_i).inject(:+)\n\
    end", "  sum = 0\n  binary = n.to_s(2)\n  binary.split('').each do |i|\n    sum\
    \ += i.to_i\n  end\n  sum\nend\nputs solve(1000)", "  # 10000:  1 10000\n  # \
    \ 1000:  1 1000\n  #   100:  1 100\n  #    10:  1 10\n  #     1:  1 1\n  #   \
    \   :  0\n  if n == 0\n    return \"0\"\n  end\n  while n > 0\n    print n % 2\n\
    \    n = n / 2\n  end\nend", "  n.to_s(2).chars.inject(0) { |sum, i| sum + i.to_i\
    \ }\nend", "  n.to_s(2).each_char.map(&:to_i).reduce(:+)\nend\nputs solve(1000)\
    \ #=> 1\nputs solve(150) #=> 6\nputs solve(147) #=> 12", "  n.to_s(2).chars.map(&:to_i).inject(:+)\n\
    end", "  # your code here\n  #\tn.to_s(2).split('').map(&:to_i).reduce(:+)\nend",
  "  # iterate through each number\n  # convert number to binary\n  # split into array\
    \ of strings\n  # add up digits\n  # make sure sum is less than or equal to 10000",
  "    # Convert the decimal to a binary string.\n    # Return the sum of the binary\
    \ number.\n    n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "    n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "    n.to_s(2).split('').inject(0) { |sum,x| sum + x.to_i }\nend", "  #\
    \ write your code here\n  a = n.to_s(2)\n  counter = 0\n  (0..a.length-1).each\
    \ do |i|\n    if a[i] == \"1\"\n      counter += 1\n    end\n  end\n  counter\n\
    end", "  n.to_s(2).split('').inject(0) { |sum, i| sum + i.to_i }\nend", "  n.to_s(2).each_char.inject(0)\
    \ { |sum, char| sum + char.to_i }\nend", "    \"#{n.to_s(2).chars.map(&:to_i).inject(:+)}\"\
    \nend", "  sum = 0\n  n.to_s(2).chars.each { |ch| sum += ch.to_i }\n  sum\nend",
  "  binary = n.to_s(2)\n  total = 0\n  binary.split('').each do |number|\n    total\
    \ += number.to_i\n  end\n  total\nend", "  if n.is_a?(Integer)\n    return n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    \  else\n    return nil\n  end\nend\np solve(1000) # 1\np solve(150) # 6\np solve(147)\
    \ # 12", "  new_array = []\n  total = 0\n  while n > 0\n    sum = n % 2\n    new_array\
    \ << sum\n    n = n / 2\n  end\n  new_array.map(&:to_s).inject(:+)\nend", "  binary\
    \ = n.to_s(2)\n  binary.split('').map(&:to_i).reduce(:+)\nend", "    return (n.to_s(2).split(\"\
    \").map(&:to_i).inject(:+)).to_s\nend", "  n.to_s(2).chars.map(&:to_i).reduce(:+)\n\
    end", "  binary = n.to_s(2)\n  sum = 0\n  binary.chars.each do |digit|\n    sum\
    \ += digit.to_i\n  end\n  sum\nend", "  # Write your code here\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
