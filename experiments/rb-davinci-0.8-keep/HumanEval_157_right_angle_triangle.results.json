{
  "language": "rb",
  "name": "HumanEval_157_right_angle_triangle",
  "results": [
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  a, b, c = [a, b, c].sort\n  c**2 == a**2 + b**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpp_jgpicu\nStarted\n.\nFinished in 0.000946408 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1056.63 tests/s, 11622.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823497
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  angle = [a, b, c].sort\n  angle[0]**2 + angle[1]**2 == angle[2]**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpa724s1rf\nStarted\n.\nFinished in 0.000579091 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1726.84 tests/s, 18995.29 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823497
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  arr = [a, b, c].sort\n  arr[0]**2 + arr[1]**2 == arr[2]**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp2iw2nk97\nStarted\n.\nFinished in 0.000469091 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2131.78 tests/s, 23449.61 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823497
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpnthtrmgg\nStarted\n.\nFinished in 0.000448297 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2230.66 tests/s, 24537.30 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823497
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp5qntd90h\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp5qntd90h.rb:15:in `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006751175 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.12 tests/s, 148.12 assertions/s\n",
      "timestamp": 1659823497
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  max = [a, b, c].max\n  min = [a, b, c].min\n  hypotenuse = [a, b, c].delete_if { |x| x == max || x == min }[0]\n  if hypotenuse ** 2 == max ** 2 + min ** 2\n    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp2pplf5u9\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp2pplf5u9.rb:22:in `test_right_angle_triangle'\n     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_right_angle_triangle\n     21:     candidate = method(:right_angle_triangle)\n  => 22:     assert_equal(true, candidate.call(3, 4, 5))\n     23:     assert_equal(false, candidate.call(1, 2, 3))\n     24:     assert_equal(true, candidate.call(10, 6, 8))\n     25:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\nFinished in 0.007526476 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.86 tests/s, 132.86 assertions/s\n",
      "timestamp": 1659823497
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  return true if a**2 + b**2 == c**2\n  return true if a**2 + c**2 == b**2\n  return true if b**2 + c**2 == a**2\n  false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp9pjj7jrq\nStarted\n.\nFinished in 0.000496004 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2016.11 tests/s, 22177.24 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823497
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code goes here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpo2bk4pvh\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpo2bk4pvh.rb:15:in `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006793295 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.20 tests/s, 147.20 assertions/s\n",
      "timestamp": 1659823497
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  ## If a > b, b > c, and a^2 + b^2 = c^2, then it is a right triangle\n  if (a > b) && (b > c) && ((a ** 2) + (b ** 2) == (c ** 2))\n    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpzn3qnuo4\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpzn3qnuo4.rb:20:in `test_right_angle_triangle'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_right_angle_triangle\n     19:     candidate = method(:right_angle_triangle)\n  => 20:     assert_equal(true, candidate.call(3, 4, 5))\n     21:     assert_equal(false, candidate.call(1, 2, 3))\n     22:     assert_equal(true, candidate.call(10, 6, 8))\n     23:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\nFinished in 0.00673853 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.40 tests/s, 148.40 assertions/s\n",
      "timestamp": 1659823497
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  return true if (a ** 2) + (b ** 2) == (c ** 2)\n  return true if (a ** 2) + (c ** 2) == (b ** 2)\n  return true if (b ** 2) + (c ** 2) == (a ** 2)\n  false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp2pz6lksi\nStarted\n.\nFinished in 0.000507672 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1969.78 tests/s, 21667.53 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823497
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  return c**2 == a**2 + b**2 if c > a && c > b\n  return a**2 == b**2 + c**2 if a > b && a > c\n  return b**2 == a**2 + c**2 if b > a && b > c\nend\nputs right_angle_triangle(3, 4, 5)\nputs right_angle_triangle(1, 2, 3)\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "true\nfalse\nLoaded suite /tmp/tmp4o43g6w5\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp4o43g6w5.rb:22:in `test_right_angle_triangle'\n     19:     assert_equal(true, candidate.call(3, 4, 5))\n     20:     assert_equal(false, candidate.call(1, 2, 3))\n     21:     assert_equal(true, candidate.call(10, 6, 8))\n  => 22:     assert_equal(false, candidate.call(2, 2, 2))\n     23:     assert_equal(true, candidate.call(7, 24, 25))\n     24:     assert_equal(false, candidate.call(10, 5, 7))\n     25:     assert_equal(true, candidate.call(5, 12, 13))\n<false> expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n? ?? --\n===============================================================================\n\nFinished in 0.007139584 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n140.06 tests/s, 560.26 assertions/s\n",
      "timestamp": 1659823497
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpwxc1hc5k\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpwxc1hc5k.rb:15:in `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006695007 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.37 tests/s, 149.37 assertions/s\n",
      "timestamp": 1659823497
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  angle = [a, b, c].sort\n  angle[0]**2 + angle[1]**2 == angle[2]**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpa724s1rf\nStarted\n.\nFinished in 0.000579091 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1726.84 tests/s, 18995.29 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823497
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  a, b, c = [a, b, c].sort\n  (a**2 + b**2) == c**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpmkmvfnls\nStarted\n.\nFinished in 0.000508869 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1965.14 tests/s, 21616.57 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823497
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  sides = [a, b, c].sort\n  sides[0]**2 + sides[1]**2 == sides[2]**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmppzf2v0as\nStarted\n.\nFinished in 0.000516442 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1936.33 tests/s, 21299.58 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823497
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  longest_side = [a, b, c].max\n  return false if longest_side == a && a > b + c\n  return false if longest_side == b && b > a + c\n  return false if longest_side == c && c > a + b\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp5s_q3fph\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp5s_q3fph.rb:20:in `test_right_angle_triangle'\n     17:   def test_right_angle_triangle\n     18:     candidate = method(:right_angle_triangle)\n     19:     assert_equal(true, candidate.call(3, 4, 5))\n  => 20:     assert_equal(false, candidate.call(1, 2, 3))\n     21:     assert_equal(true, candidate.call(10, 6, 8))\n     22:     assert_equal(false, candidate.call(2, 2, 2))\n     23:     assert_equal(true, candidate.call(7, 24, 25))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\nFinished in 0.007087539 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n141.09 tests/s, 282.19 assertions/s\n",
      "timestamp": 1659823497
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  x, y, z = [a, b, c].sort\n  x**2 + y**2 == z**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpyqtu_87o\nStarted\n.\nFinished in 0.000518207 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1929.73 tests/s, 21227.04 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823497
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  x, y, z = [a, b, c].sort\n  x**2 + y**2 == z**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpyqtu_87o\nStarted\n.\nFinished in 0.000518207 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1929.73 tests/s, 21227.04 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823497
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp5qntd90h\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp5qntd90h.rb:15:in `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006751175 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.12 tests/s, 148.12 assertions/s\n",
      "timestamp": 1659823497
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  return true if a**2 + b**2 == c**2\n  return true if a**2 + c**2 == b**2\n  return true if b**2 + c**2 == a**2\n  false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp9pjj7jrq\nStarted\n.\nFinished in 0.000496004 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2016.11 tests/s, 22177.24 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823497
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  ary = [a, b, c].sort\n  ary[0]**2 + ary[1]**2 == ary[2]**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp1gsfodgs\nStarted\n.\nFinished in 0.00050602 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1976.21 tests/s, 21738.27 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823497
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  return a**2 + b**2 == c**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpbs51_ta4\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpbs51_ta4.rb:17:in `test_right_angle_triangle'\n     14:     candidate = method(:right_angle_triangle)\n     15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n  => 17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n     19:     assert_equal(true, candidate.call(7, 24, 25))\n     20:     assert_equal(false, candidate.call(10, 5, 7))\n<true> expected but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\nFinished in 0.007131082 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n140.23 tests/s, 420.69 assertions/s\n",
      "timestamp": 1659823497
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  a, b, c = [a, b, c].sort\n  # If a triangle is right angle triangle\n  # then a^2 + b^2 = c^2\n  # also a + b > c\n  # also a, b, c are positive. \n  return true if a > 0 && b > 0 && c > 0 && (a ** 2 + b ** 2 == c ** 2) && (a + b > c)\n  false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpthckaapg\nStarted\n.\nFinished in 0.000540042 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1851.71 tests/s, 20368.79 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823497
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  a2 = a * a\n  b2 = b * b\n  c2 = c * c\n  if a2 + b2 == c2 || a2 + c2 == b2 || b2 + c2 == a2\n    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpabnd9o4x\nStarted\n.\nFinished in 0.000804885 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1242.41 tests/s, 13666.55 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823497
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 + c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpqcmjbfzo\nStarted\n.\nFinished in 0.000517778 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1931.33 tests/s, 21244.63 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823497
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n    # TODO: implement\n    c_squared = c**2\n    a_squared = a**2\n    b_squared = b**2\n    if a_squared + b_squared == c_squared\n      return true\n    elsif b_squared + c_squared == a_squared\n      return true\n    elsif a_squared + c_squared == b_squared\n      return true\n    else\n      return false\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp8do6_vb7\nStarted\n.\nFinished in 0.000515437 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1940.10 tests/s, 21341.11 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823497
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if [a, b, c].permutation.to_a.any? { |x, y, z| y**2 + z**2 == x**2 }\n    true\n  else\n    false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp_p9th9e0\nStarted\n.\nFinished in 0.000565121 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1769.53 tests/s, 19464.86 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823497
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  (a ** 2 + b ** 2 == c ** 2) || (a ** 2 + c ** 2 == b ** 2) || (b ** 2 + c ** 2 == a ** 2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpcxkpbwjd\nStarted\n.\nFinished in 0.000518359 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1929.16 tests/s, 21220.81 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  arr = [a, b, c].sort\n  max = arr.last\n  sum = arr.inject(:+) - max\n  max * max == sum * sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp5ud1s04j\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp5ud1s04j.rb:18:in `test_right_angle_triangle'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_right_angle_triangle\n     17:     candidate = method(:right_angle_triangle)\n  => 18:     assert_equal(true, candidate.call(3, 4, 5))\n     19:     assert_equal(false, candidate.call(1, 2, 3))\n     20:     assert_equal(true, candidate.call(10, 6, 8))\n     21:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\nFinished in 0.006836645 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n146.27 tests/s, 146.27 assertions/s\n",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Remember, that each side must be smaller than the sum of other two\n  # and greater than the difference of other two.\n  # And, the longest side is always opposite to right angle.\n  # Let the longest side be c. Then, a^2 + b^2 = c^2\n  a, b, c = [a, b, c].sort\n  return a**2 + b**2 == c**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp64l9mlwn\nStarted\n.\nFinished in 0.000445455 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2244.90 tests/s, 24693.85 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n\tif a**2 + b**2 == c**2 \n\t\treturn true\n\telsif a**2 + c**2 == b**2\n\t\treturn true\n\telsif b**2 + c**2 == a**2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpl7mvqycm\nStarted\n.\nFinished in 0.000438693 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2279.50 tests/s, 25074.48 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a == Math.sqrt(b**2 + c**2) || b == Math.sqrt(a**2 + c**2) || c == Math.sqrt(a**2 + b**2)\n    true\n  else\n    false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpt060pa0d\nStarted\n.\nFinished in 0.000489562 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2042.64 tests/s, 22469.06 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  hyp = []\n  cat = []\n  [a, b, c].sort!\n  hyp << a\n  hyp << b\n  cat << c\n  if hyp[0]**2 + hyp[1]**2 == cat[0]**2\n    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpq1f4c484\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpq1f4c484.rb:27:in `test_right_angle_triangle'\n     24:     candidate = method(:right_angle_triangle)\n     25:     assert_equal(true, candidate.call(3, 4, 5))\n     26:     assert_equal(false, candidate.call(1, 2, 3))\n  => 27:     assert_equal(true, candidate.call(10, 6, 8))\n     28:     assert_equal(false, candidate.call(2, 2, 2))\n     29:     assert_equal(true, candidate.call(7, 24, 25))\n     30:     assert_equal(false, candidate.call(10, 5, 7))\n<true> expected but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\nFinished in 0.006694042 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.39 tests/s, 448.16 assertions/s\n",
      "timestamp": 1659823498
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpwxc1hc5k\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpwxc1hc5k.rb:15:in `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006695007 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.37 tests/s, 149.37 assertions/s\n",
      "timestamp": 1659823497
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  [(a**2), (b**2), (c**2)].sort == [(a - b), (b - c), (c - a)].map { |side| side**2 }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmphe90aj7g\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmphe90aj7g.rb:15:in `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\nFinished in 0.006619166 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n151.08 tests/s, 151.08 assertions/s\n",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  return true if c**2 == a**2 + b**2\n  return true if a**2 == b**2 + c**2\n  return true if b**2 == a**2 + c**2\n  false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp86n1_otc\nStarted\n.\nFinished in 0.000494407 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2022.63 tests/s, 22248.88 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  hypotenuse, leg1, leg2 = [a, b, c].sort\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp96b8u93g.rb:11: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp96b8u93g.rb:26: syntax error, unexpected end-of-input, expecting `end'\n",
      "stdout": "",
      "timestamp": 1659823497
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n    true if (a*a)+(b*b) == (c*c)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpdcpq6axt\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpdcpq6axt.rb:16:in `test_right_angle_triangle'\n     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n     15:     assert_equal(true, candidate.call(3, 4, 5))\n  => 16:     assert_equal(false, candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n     19:     assert_equal(true, candidate.call(7, 24, 25))\n<false> expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n? ?? --\n===============================================================================\n\nFinished in 0.007401108 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n135.11 tests/s, 270.23 assertions/s\n",
      "timestamp": 1659823498
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpwxc1hc5k\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpwxc1hc5k.rb:15:in `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006695007 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.37 tests/s, 149.37 assertions/s\n",
      "timestamp": 1659823497
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpwxc1hc5k\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpwxc1hc5k.rb:15:in `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006695007 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.37 tests/s, 149.37 assertions/s\n",
      "timestamp": 1659823497
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # only needed because of example test\n  return false if a + b <= c\n  return false if a + c <= b\n  return false if b + c <= a\n  (a ** 2) + (b ** 2) == (c ** 2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpygd1n2ns\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpygd1n2ns.rb:21:in `test_right_angle_triangle'\n     18:     candidate = method(:right_angle_triangle)\n     19:     assert_equal(true, candidate.call(3, 4, 5))\n     20:     assert_equal(false, candidate.call(1, 2, 3))\n  => 21:     assert_equal(true, candidate.call(10, 6, 8))\n     22:     assert_equal(false, candidate.call(2, 2, 2))\n     23:     assert_equal(true, candidate.call(7, 24, 25))\n     24:     assert_equal(false, candidate.call(10, 5, 7))\n<true> expected but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\nFinished in 0.006768548 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.74 tests/s, 443.23 assertions/s\n",
      "timestamp": 1659823498
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  a*a + b*b == c*c\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpboak_ooh\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpboak_ooh.rb:17:in `test_right_angle_triangle'\n     14:     candidate = method(:right_angle_triangle)\n     15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n  => 17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n     19:     assert_equal(true, candidate.call(7, 24, 25))\n     20:     assert_equal(false, candidate.call(10, 5, 7))\n<true> expected but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\nFinished in 0.006484874 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n154.21 tests/s, 462.62 assertions/s\n",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  sorted = [a, b, c].sort\n  sorted[0]**2 + sorted[1]**2 == sorted[2]**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp30vveg1l\nStarted\n.\nFinished in 0.000835699 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1196.60 tests/s, 13162.63 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpwxc1hc5k\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpwxc1hc5k.rb:15:in `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006695007 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.37 tests/s, 149.37 assertions/s\n",
      "timestamp": 1659823497
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n    return a**2 + b**2 == c**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpgrwz1nf0\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpgrwz1nf0.rb:17:in `test_right_angle_triangle'\n     14:     candidate = method(:right_angle_triangle)\n     15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n  => 17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n     19:     assert_equal(true, candidate.call(7, 24, 25))\n     20:     assert_equal(false, candidate.call(10, 5, 7))\n<true> expected but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\nFinished in 0.006457925 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n154.85 tests/s, 464.55 assertions/s\n",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  angles = [a, b, c].map { |v| v ** 2 }.sort\n  angles[0] + angles[1] == angles[2]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpd5ksh01a\nStarted\n.\nFinished in 0.000514873 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1942.23 tests/s, 21364.49 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpmtx1o87p\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpmtx1o87p.rb:15:in `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006623713 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n150.97 tests/s, 150.97 assertions/s\n",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  x, y, z = [a, b, c].sort\n  z**2 == x**2 + y**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpu5e4clty\nStarted\n.\nFinished in 0.000524249 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1907.49 tests/s, 20982.40 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  a**2 + b**2 == c**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpis457owo\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpis457owo.rb:17:in `test_right_angle_triangle'\n     14:     candidate = method(:right_angle_triangle)\n     15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n  => 17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n     19:     assert_equal(true, candidate.call(7, 24, 25))\n     20:     assert_equal(false, candidate.call(10, 5, 7))\n<true> expected but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\nFinished in 0.006710947 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.01 tests/s, 447.03 assertions/s\n",
      "timestamp": 1659823498
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n    # Your code goes here.\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpmw8e5jgi\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpmw8e5jgi.rb:15:in `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006378204 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n156.78 tests/s, 156.78 assertions/s\n",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  a, b, c = [a, b, c].sort\n  return false if c > a + b\n  (a**2 + b**2) == c**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmphcujig_l\nStarted\n.\nFinished in 0.000502019 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1991.96 tests/s, 21911.52 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  max = [a, b, c].max\n  return (a**2 + b**2 == c**2) || (a**2 + c**2 == b**2) || (b**2 + c**2 == a**2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmps9fagysc\nStarted\n.\nFinished in 0.000501191 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1995.25 tests/s, 21947.72 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n    if a.to_f ** 2 + b.to_f ** 2 == c.to_f ** 2\n        return true\n    else\n        return false\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpgjd_288f\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpgjd_288f.rb:21:in `test_right_angle_triangle'\n     18:     candidate = method(:right_angle_triangle)\n     19:     assert_equal(true, candidate.call(3, 4, 5))\n     20:     assert_equal(false, candidate.call(1, 2, 3))\n  => 21:     assert_equal(true, candidate.call(10, 6, 8))\n     22:     assert_equal(false, candidate.call(2, 2, 2))\n     23:     assert_equal(true, candidate.call(7, 24, 25))\n     24:     assert_equal(false, candidate.call(10, 5, 7))\n<true> expected but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\nFinished in 0.010662842 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n93.78 tests/s, 281.35 assertions/s\n",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n    return true\n  elsif b**2 + c**2 == a**2\n    return true\n  elsif c**2 + a**2 == b**2\n    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpphno0l97\nStarted\n.\nFinished in 0.000506244 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1975.33 tests/s, 21728.65 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Write your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpymjzznli\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpymjzznli.rb:15:in `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006724733 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.70 tests/s, 148.70 assertions/s\n",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  (a**2 + b**2 == c**2) || (a**2 + c**2 == b**2) || (b**2 + c**2 == a**2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp57bquib2\nStarted\n.\nFinished in 0.00043953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2275.16 tests/s, 25026.73 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  arr = [a, b, c].sort\n  arr[0]**2 + arr[1]**2 == arr[2]**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp2iw2nk97\nStarted\n.\nFinished in 0.000469091 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2131.78 tests/s, 23449.61 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823497
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # do your magic here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp7mbuqa95\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp7mbuqa95.rb:15:in `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006856501 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n145.85 tests/s, 145.85 assertions/s\n",
      "timestamp": 1659823498
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Complete the code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpitk8k6ul\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpitk8k6ul.rb:15:in `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.011957851 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n83.63 tests/s, 83.63 assertions/s\n",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  a2 = a * a\n  b2 = b * b\n  c2 = c * c\n  if a2 + b2 == c2 || a2 + c2 == b2 || b2 + c2 == a2\n    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpabnd9o4x\nStarted\n.\nFinished in 0.000804885 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1242.41 tests/s, 13666.55 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823497
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  \n  if a**2 + b**2 == c**2\n    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 + c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpvu61c7f3\nStarted\n.\nFinished in 0.000463618 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2156.95 tests/s, 23726.43 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  arr = [a, b, c].sort\n  (arr[0] ** 2) + (arr[1] ** 2) == (arr[2] ** 2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpx_1s26kf\nStarted\n.\nFinished in 0.000588101 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1700.39 tests/s, 18704.27 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n    if a > b && a > c\n      hypotenuse = a\n      opposite = b\n      adjacent = c\n    elsif b > a && b > c\n      hypotenuse = b\n      opposite = a\n      adjacent = c\n    else\n      hypotenuse = c\n      opposite = a\n      adjacent = b\n    end\n    Math.hypot(opposite, adjacent) == hypotenuse\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpp1cfs8z7\nStarted\n.\nFinished in 0.000508653 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1965.98 tests/s, 21625.74 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  sides = [a, b, c].sort\n  sides[0]**2 + sides[1]**2 == sides[2]**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmppzf2v0as\nStarted\n.\nFinished in 0.000516442 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1936.33 tests/s, 21299.58 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823497
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n    if (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a)\n        return true\n    else\n        return false\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp_tzryxzt\nStarted\n.\nFinished in 0.000509473 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1962.81 tests/s, 21590.94 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp5qntd90h\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp5qntd90h.rb:15:in `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006751175 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.12 tests/s, 148.12 assertions/s\n",
      "timestamp": 1659823497
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # TODO: complete it\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpn7ewra5i\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpn7ewra5i.rb:15:in `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006866649 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n145.63 tests/s, 145.63 assertions/s\n",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  squares = [a**2, b**2, c**2]\n  squares.sort!\n  squares[0] + squares[1] == squares[2]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpm2veuy0m\nStarted\n.\nFinished in 0.000489247 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2043.96 tests/s, 22483.53 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Write your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpymjzznli\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpymjzznli.rb:15:in `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006724733 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.70 tests/s, 148.70 assertions/s\n",
      "timestamp": 1659823498
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  list = [a, b, c].sort\n  if (a**2 + b**2 == c**2)\n    true\n  else\n    false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp0919xz5y\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp0919xz5y.rb:22:in `test_right_angle_triangle'\n     19:     candidate = method(:right_angle_triangle)\n     20:     assert_equal(true, candidate.call(3, 4, 5))\n     21:     assert_equal(false, candidate.call(1, 2, 3))\n  => 22:     assert_equal(true, candidate.call(10, 6, 8))\n     23:     assert_equal(false, candidate.call(2, 2, 2))\n     24:     assert_equal(true, candidate.call(7, 24, 25))\n     25:     assert_equal(false, candidate.call(10, 5, 7))\n<true> expected but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\nFinished in 0.006509177 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.63 tests/s, 460.89 assertions/s\n",
      "timestamp": 1659823498
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # write your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp84wh51jc\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp84wh51jc.rb:15:in `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006392911 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n156.42 tests/s, 156.42 assertions/s\n",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a ** 2 + b ** 2 == c ** 2 || a ** 2 + c ** 2 == b ** 2 || b ** 2 + c ** 2 == a ** 2\n    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmptja_nmq1\nStarted\n.\nFinished in 0.000725577 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1378.21 tests/s, 15160.35 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n    puts \"The following 3 lengths (#{a}, #{b}, #{c}) form a right angle triangle: #{((a**2) + (b**2)) == (c**2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpp_v5il7c\nStarted\nThe following 3 lengths (3, 4, 5) form a right angle triangle: true\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpp_v5il7c.rb:15:in `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006347223 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n157.55 tests/s, 157.55 assertions/s\n",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n    if a == 0 or b == 0 or c == 0\n        return false\n    end\n    arr = [a, b, c].sort\n    if arr[0] ** 2 + arr[1] ** 2 == arr[2] ** 2\n        return true\n    else\n        return false\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp6q51m1et\nStarted\n.\nFinished in 0.000650158 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1538.09 tests/s, 16918.96 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a > b && a > c\n    return b**2 + c**2 == a**2\n  elsif b > a && b > c\n    return a**2 + c**2 == b**2\n  else\n    return a**2 + b**2 == c**2\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp1639zelx\nStarted\n.\nFinished in 0.000504199 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1983.34 tests/s, 21816.78 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # puts a, b, c\n  if a > b && a > c\n    # puts \"a > b & c\"\n    if (a**2) == (b**2) + (c**2)\n      return true\n    else\n      return false\n    end\n  elsif b > a && b > c\n    # puts \"b > a & c\"\n    if (b**2) == (a**2) + (c**2)\n      return true\n    else\n      return false\n    end\n  elsif c > a && c > b\n    # puts \"c > a & b\"\n    if (c**2) == (a**2) + (b**2)\n      return true\n    else\n      return false\n    end\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpcn1wfqmd\nStarted\n.\nFinished in 0.000462234 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2163.41 tests/s, 23797.47 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  [a, b, c].max == a**2 + b**2 + c**2 - [a, b, c].max**2\nend\nputs \"--------------------\"\nputs right_angle_triangle(3, 4, 5) == True\nputs right_angle_triangle(1, 2, 3) == False\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwh1tynqk.rb:12:in `<main>': uninitialized constant True (NameError)\n\nputs right_angle_triangle(3, 4, 5) == True\n                                      ^^^^\n",
      "stdout": "--------------------\n",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  list = [a, b, c].sort\n  list[0]**2 + list[1]**2 == list[2]**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmplajbnvnv\nStarted\n.\nFinished in 0.000442911 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2257.79 tests/s, 24835.69 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  return false if a == b || b == c || a == c\n  a_squared = a ** 2\n  b_squared = b ** 2\n  c_squared = c ** 2\n  c_squared == a_squared + b_squared || a_squared == b_squared + c_squared || b_squared == a_squared + c_squared\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpl86lntmd\nStarted\n.\nFinished in 0.000453626 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2204.46 tests/s, 24249.05 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  array = [a, b, c].sort\n  array[0]**2 + array[1]**2 == array[2]**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmptsvdmg3k\nStarted\n.\nFinished in 0.000483351 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2068.89 tests/s, 22757.79 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  return (a**2 + b**2 == c**2) || (a**2 + c**2 == b**2) || (b**2 + c**2 == a**2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpz1m410ne\nStarted\n.\nFinished in 0.000515843 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1938.57 tests/s, 21324.32 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n\ta**2 + b**2 == c**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmptvl5n2jr\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmptvl5n2jr.rb:17:in `test_right_angle_triangle'\n     14:     candidate = method(:right_angle_triangle)\n     15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n  => 17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n     19:     assert_equal(true, candidate.call(7, 24, 25))\n     20:     assert_equal(false, candidate.call(10, 5, 7))\n<true> expected but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\nFinished in 0.00651685 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.45 tests/s, 460.35 assertions/s\n",
      "timestamp": 1659823498
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpwtf2wja9\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpwtf2wja9.rb:15:in `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006285727 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n159.09 tests/s, 159.09 assertions/s\n",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  return [a, b, c].sort[2] ** 2 == [a, b, c].sort[0] ** 2 + [a, b, c].sort[1] ** 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp8wd301l9\nStarted\n.\nFinished in 0.00053106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1883.03 tests/s, 20713.29 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  sides = [a, b, c].sort\n  return sides[0]**2 + sides[1]**2 == sides[2]**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpz5tt57__\nStarted\n.\nFinished in 0.000449023 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2227.06 tests/s, 24497.63 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  a2 = a * a\n  b2 = b * b\n  c2 = c * c\n  if a2 == b2 + c2\n    return true\n  elsif b2 == a2 + c2\n    return true\n  elsif c2 == a2 + b2\n    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpzq40941o\nStarted\n.\nFinished in 0.000442699 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2258.87 tests/s, 24847.58 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if (a ** 2) + (b ** 2) == (c ** 2) || (b ** 2) + (c ** 2) == (a ** 2) || (c ** 2) + (a ** 2) == (b ** 2)\n    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpankgmn2c\nStarted\n.\nFinished in 0.00046814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2136.11 tests/s, 23497.24 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n    # write your code here\n    return true if a*a+b*b==c*c\n    return true if a*a+c*c==b*b\n    return true if b*b+c*c==a*a\n    return false\nend\nputs right_angle_triangle(1, 2, 3)\nputs right_angle_triangle(3, 4, 5)\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "false\ntrue\nLoaded suite /tmp/tmp9zanz536\nStarted\n.\nFinished in 0.00059272 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1687.14 tests/s, 18558.51 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # yor code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmphp1tss54\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmphp1tss54.rb:15:in `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.00717026 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n139.46 tests/s, 139.46 assertions/s\n",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n    return if a <= 0 || b <= 0 || c <= 0\n    aa = a**2\n    bb = b**2\n    cc = c**2\n    return aa + bb == cc || aa + cc == bb || bb + cc == aa\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmph0qvt474\nStarted\n.\nFinished in 0.000473669 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2111.18 tests/s, 23222.97 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  sides = [a, b, c].sort\n  sides[0]**2 + sides[1]**2 == sides[2]**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmppzf2v0as\nStarted\n.\nFinished in 0.000516442 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1936.33 tests/s, 21299.58 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823497
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # the longest side squared equals the sum of the other two squared\n  c**2 == a**2 + b**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpe976stsj\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpe976stsj.rb:18:in `test_right_angle_triangle'\n     15:     candidate = method(:right_angle_triangle)\n     16:     assert_equal(true, candidate.call(3, 4, 5))\n     17:     assert_equal(false, candidate.call(1, 2, 3))\n  => 18:     assert_equal(true, candidate.call(10, 6, 8))\n     19:     assert_equal(false, candidate.call(2, 2, 2))\n     20:     assert_equal(true, candidate.call(7, 24, 25))\n     21:     assert_equal(false, candidate.call(10, 5, 7))\n<true> expected but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\nFinished in 0.006587162 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n151.81 tests/s, 455.43 assertions/s\n",
      "timestamp": 1659823498
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpmtx1o87p\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpmtx1o87p.rb:15:in `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006623713 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n150.97 tests/s, 150.97 assertions/s\n",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  arr = [a, b, c].sort\n  arr[0]**2 + arr[1]**2 == arr[2]**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp2iw2nk97\nStarted\n.\nFinished in 0.000469091 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2131.78 tests/s, 23449.61 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823497
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # I suggest you to use the each method to check out each side with the other ones\n  # if one of the two combination is equal to the last one, it will be a right angle triangle\n  sides = [a, b, c]\n  sides.each do |side|\n    if sides.max == side\n      if sides.max**2 == (sides.min**2 + sides.sort[1]**2)\n        return true\n      end\n    end\n  end\n  return false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp1d4ak9c1\nStarted\n.\nFinished in 0.000473146 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2113.51 tests/s, 23248.64 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpwtf2wja9\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpwtf2wja9.rb:15:in `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006285727 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n159.09 tests/s, 159.09 assertions/s\n",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  a_sq = a**2\n  b_sq = b**2\n  c_sq = c**2\n  # either the sum of the squares of two sides will equal the square of the \n  # hypotenuse or the difference between the two squares of the smaller sides\n  # will equal the square of the largest side\n  (a_sq + b_sq == c_sq) || (a_sq - b_sq == c_sq) || (b_sq - a_sq == c_sq)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpv90uqc9z\nStarted\n.\nFinished in 0.000492305 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2031.26 tests/s, 22343.87 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n    if a**2 == b**2 + c**2 || b**2 == a**2 + c**2 || c**2 == a**2 + b**2\n      return true\n    else\n      return false\n    end\nend\nputs right_angle_triangle(3, 4, 5)\nputs right_angle_triangle(5, 4, 3)\nputs right_angle_triangle(6, 8, 10)\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "true\ntrue\ntrue\nLoaded suite /tmp/tmpm0jy79l1\nStarted\n.\nFinished in 0.000670047 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1492.43 tests/s, 16416.76 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  ar = [a, b, c].sort\n  ar[0] ** 2 + ar[1] ** 2 == ar[2] ** 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpz5esr40u\nStarted\n.\nFinished in 0.000490092 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2040.43 tests/s, 22444.77 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a == Math.sqrt(b**2 + c**2) || b == Math.sqrt(a**2 + c**2) || c == Math.sqrt(a**2 + b**2)\n    true\n  else\n    false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpt060pa0d\nStarted\n.\nFinished in 0.000489562 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2042.64 tests/s, 22469.06 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  a = a ** 2\n  b = b ** 2\n  c = c ** 2\n  if (a + b == c) || (a + c == b) || (b + c == a)\n    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpwy1wm283\nStarted\n.\nFinished in 0.000445949 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2242.41 tests/s, 24666.50 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  a = [a, b, c].sort\n  return (a[0]**2 + a[1]**2) == a[2]**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp8smzznjw\nStarted\n.\nFinished in 0.000475276 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2104.04 tests/s, 23144.45 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a > b && a > c\n    if a**2 == b**2 + c**2\n      return true\n    else\n      return false\n    end\n  elsif b > a && b > c\n    if b**2 == a**2 + c**2\n      return true\n    else\n      return false\n    end\n  elsif c > a && c > b\n    if c**2 == a**2 + b**2\n      return true\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp07r2jrhr\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp07r2jrhr.rb:36:in `test_right_angle_triangle'\n     33:     assert_equal(true, candidate.call(3, 4, 5))\n     34:     assert_equal(false, candidate.call(1, 2, 3))\n     35:     assert_equal(true, candidate.call(10, 6, 8))\n  => 36:     assert_equal(false, candidate.call(2, 2, 2))\n     37:     assert_equal(true, candidate.call(7, 24, 25))\n     38:     assert_equal(false, candidate.call(10, 5, 7))\n     39:     assert_equal(true, candidate.call(5, 12, 13))\n<false> expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n? ?? --\n===============================================================================\n\nFinished in 0.006506331 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.70 tests/s, 614.79 assertions/s\n",
      "timestamp": 1659823498
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  #your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpqzssn078\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpqzssn078.rb:15:in `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006336071 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n157.83 tests/s, 157.83 assertions/s\n",
      "timestamp": 1659823498
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  angles = [a, b, c].sort\n  pythagorean_theorem(angles[0], angles[1], angles[2])\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmplxj4u6fe\nStarted\nE\n===============================================================================\nError: test_right_angle_triangle(TestHumanEval):\n  NoMethodError: undefined method `pythagorean_theorem' for #<TestHumanEval:0x00002b82446b4940 @method_name=\"test_right_angle_triangle\", @internal_data=#<Test::Unit::TestCase::InternalData:0x00002b82446b4918 @start_time=2022-08-06 18:04:58.701057558 -0400, @elapsed_time=nil, @passed=false, @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x00002b82447db7b0 @assertion_count=0, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary, :error_summary, :pending_summary, :omission_summary, :notification_summary], @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x00002b82447d33a8 @test_name=\"test_right_angle_triangle(TestHumanEval)\", @exception=#<NoMethodError: undefined method `pythagorean_theorem' for #<TestHumanEval:0x00002b82446b4940 ...>\n  \n    pythagorean_theorem(angles[0], angles[1], angles[2])\n    ^^^^^^^^^^^^^^^^^^^>, @method_name=\"test_right_angle_triangle\">], @stop_tag=#<Object:0x00002b82447db328>, @failures=[], @errors=[#<Test::Unit::Error:0x00002b82447d33a8 @test_name=\"test_right_angle_triangle(TestHumanEval)\", @exception=#<NoMethodError: undefined method `pythagorean_theorem' for #<TestHumanEval:0x00002b82446b4940 ...>\n  \n    pythagorean_theorem(angles[0], angles[1], angles[2])\n    ^^^^^^^^^^^^^^^^^^^>, @method_name=\"test_right_angle_triangle\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x00002b82447db120 @a_proc=#<Proc:0x00002b82447db148 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>, @hash=47838494830920>=>#<Proc:0x00002b82447db148 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>}, \"Test::Unit::TestResult::CHANGED\"=>{#<Test:",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if (a ** 2 + b ** 2 == c ** 2) || (a ** 2 + c ** 2 == b ** 2) || (b ** 2 + c ** 2 == a ** 2)\n    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpa4ug3fqm\nStarted\n.\nFinished in 0.000503913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1984.47 tests/s, 21829.16 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  #Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp475wwxno\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp475wwxno.rb:15:in `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006263094 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n159.67 tests/s, 159.67 assertions/s\n",
      "timestamp": 1659823498
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpwxc1hc5k\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpwxc1hc5k.rb:15:in `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006695007 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.37 tests/s, 149.37 assertions/s\n",
      "timestamp": 1659823497
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpwxc1hc5k\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpwxc1hc5k.rb:15:in `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006695007 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.37 tests/s, 149.37 assertions/s\n",
      "timestamp": 1659823497
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  array = [a, b, c].sort\n  if array[0] ** 2 + array[1] ** 2 == array[2] ** 2\n    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp4y6nno_t\nStarted\n.\nFinished in 0.000441792 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2263.51 tests/s, 24898.59 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2 || a**2 + c**2 == b**2 || b**2 + c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpdfi2vpbu\nStarted\n.\nFinished in 0.000459197 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2177.71 tests/s, 23954.86 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  arr = [a, b, c].sort\n  arr[0]**2 + arr[1]**2 == arr[2]**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp2iw2nk97\nStarted\n.\nFinished in 0.000469091 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2131.78 tests/s, 23449.61 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823497
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpwxc1hc5k\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpwxc1hc5k.rb:15:in `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006695007 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.37 tests/s, 149.37 assertions/s\n",
      "timestamp": 1659823497
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if (a ** 2 + b ** 2 == c ** 2) || (a ** 2 + c ** 2 == b ** 2) || (b ** 2 + c ** 2 == a ** 2)\n    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpa4ug3fqm\nStarted\n.\nFinished in 0.000503913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1984.47 tests/s, 21829.16 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Write your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpymjzznli\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpymjzznli.rb:15:in `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006724733 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.70 tests/s, 148.70 assertions/s\n",
      "timestamp": 1659823498
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  max = [a, b, c].max\n  return (a**2 + b**2) == (max**2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpk3oxq7mx\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpk3oxq7mx.rb:18:in `test_right_angle_triangle'\n     15:     candidate = method(:right_angle_triangle)\n     16:     assert_equal(true, candidate.call(3, 4, 5))\n     17:     assert_equal(false, candidate.call(1, 2, 3))\n  => 18:     assert_equal(true, candidate.call(10, 6, 8))\n     19:     assert_equal(false, candidate.call(2, 2, 2))\n     20:     assert_equal(true, candidate.call(7, 24, 25))\n     21:     assert_equal(false, candidate.call(10, 5, 7))\n<true> expected but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\nFinished in 0.006444109 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n155.18 tests/s, 465.54 assertions/s\n",
      "timestamp": 1659823498
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n    largest = [a, b, c].max\n    if largest == a\n        largest == (b**2 + c**2)\n    elsif largest == b\n        largest == (a**2 + c**2)\n    else\n        largest == (a**2 + b**2)\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpwq47l75z\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpwq47l75z.rb:22:in `test_right_angle_triangle'\n     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_right_angle_triangle\n     21:     candidate = method(:right_angle_triangle)\n  => 22:     assert_equal(true, candidate.call(3, 4, 5))\n     23:     assert_equal(false, candidate.call(1, 2, 3))\n     24:     assert_equal(true, candidate.call(10, 6, 8))\n     25:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\nFinished in 0.006718103 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.85 tests/s, 148.85 assertions/s\n",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  d = []\n  d.push(a)\n  d.push(b)\n  d.push(c)\n  d.sort!\n  if d[0]**2 + d[1]**2 == d[2]**2\n    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpz2a5yq4r\nStarted\n.\nFinished in 0.000544249 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1837.39 tests/s, 20211.34 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if (a ** 2) + (b ** 2) == (c ** 2) || (a ** 2) + (c ** 2) == (b ** 2) ||\n     (b ** 2) + (c ** 2) == (a ** 2)\n    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp9byd2hf2\nStarted\n.\nFinished in 0.000514811 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1942.46 tests/s, 21367.06 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  hypotenuse = Math.hypot(a, b)\n  hypotenuse == c\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp84eig6ev\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp84eig6ev.rb:18:in `test_right_angle_triangle'\n     15:     candidate = method(:right_angle_triangle)\n     16:     assert_equal(true, candidate.call(3, 4, 5))\n     17:     assert_equal(false, candidate.call(1, 2, 3))\n  => 18:     assert_equal(true, candidate.call(10, 6, 8))\n     19:     assert_equal(false, candidate.call(2, 2, 2))\n     20:     assert_equal(true, candidate.call(7, 24, 25))\n     21:     assert_equal(false, candidate.call(10, 5, 7))\n<true> expected but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\nFinished in 0.007123135 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n140.39 tests/s, 421.16 assertions/s\n",
      "timestamp": 1659823498
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Write your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpymjzznli\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpymjzznli.rb:15:in `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006724733 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.70 tests/s, 148.70 assertions/s\n",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  (a**2 + b**2 == c**2) || (a**2 + c**2 == b**2) || (b**2 + c**2 == a**2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp57bquib2\nStarted\n.\nFinished in 0.00043953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2275.16 tests/s, 25026.73 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  arr = [a, b, c].sort!\n  x = arr[0]\n  y = arr[1]\n  z = arr[2]\n  return false if z >= x + y || x == y || y == z\n  z ** 2 == x ** 2 + y ** 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpm7qm2l5n\nStarted\n.\nFinished in 0.00060839 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1643.68 tests/s, 18080.51 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n    # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp4kd3qies\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp4kd3qies.rb:15:in `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007245804 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.01 tests/s, 138.01 assertions/s\n",
      "timestamp": 1659823498
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n\tif a**2 + b**2 == c**2\n\t\ttrue\n\telse\n\t\tfalse\n\tend\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpjnczeu84\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpjnczeu84.rb:21:in `test_right_angle_triangle'\n     18:     candidate = method(:right_angle_triangle)\n     19:     assert_equal(true, candidate.call(3, 4, 5))\n     20:     assert_equal(false, candidate.call(1, 2, 3))\n  => 21:     assert_equal(true, candidate.call(10, 6, 8))\n     22:     assert_equal(false, candidate.call(2, 2, 2))\n     23:     assert_equal(true, candidate.call(7, 24, 25))\n     24:     assert_equal(false, candidate.call(10, 5, 7))\n<true> expected but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\nFinished in 0.006989349 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.07 tests/s, 429.22 assertions/s\n",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a == 0 || b == 0 || c == 0\n    return false\n  elsif a ** 2 + b ** 2 == c ** 2 || a ** 2 + c ** 2 == b ** 2 || b ** 2 + c ** 2 == a ** 2\n    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp3yx5vrxy\nStarted\n.\nFinished in 0.000520438 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1921.46 tests/s, 21136.04 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a == b && a == c\n    return true\n  elsif a**2 + b**2 == c**2\n    return true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 + c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmppvv5ji1u\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmppvv5ji1u.rb:28:in `test_right_angle_triangle'\n     25:     assert_equal(true, candidate.call(3, 4, 5))\n     26:     assert_equal(false, candidate.call(1, 2, 3))\n     27:     assert_equal(true, candidate.call(10, 6, 8))\n  => 28:     assert_equal(false, candidate.call(2, 2, 2))\n     29:     assert_equal(true, candidate.call(7, 24, 25))\n     30:     assert_equal(false, candidate.call(10, 5, 7))\n     31:     assert_equal(true, candidate.call(5, 12, 13))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\nFinished in 0.007782184 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.50 tests/s, 513.99 assertions/s\n",
      "timestamp": 1659823498
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpdvtal1ry\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpdvtal1ry.rb:15:in `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006631839 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n150.79 tests/s, 150.79 assertions/s\n",
      "timestamp": 1659823499
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  hypotenuse = [a, b, c].max\n  other_side = [a, b, c].min\n  third_side = [a, b, c].sort[1]\n  hypotenuse ** 2 == other_side ** 2 + third_side ** 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpg6yjlkal\nStarted\n.\nFinished in 0.000477098 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2096.01 tests/s, 23056.06 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823499
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  ary = [a, b, c].sort\n  ary[0]**2 + ary[1]**2 == ary[2]**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp1gsfodgs\nStarted\n.\nFinished in 0.00050602 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1976.21 tests/s, 21738.27 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823497
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  a, b, c = [a, b, c].sort\n  a**2 + b**2 == c**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp_7uhmmmt\nStarted\n.\nFinished in 0.00045413 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2202.01 tests/s, 24222.14 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823499
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  c = a**2 + b**2\n  d = Math.sqrt(c)\n  e = d.to_i\n  f = d.to_f\n  if e == f\n    return true\n  else\n    return false\n  end\nend\nputs right_angle_triangle(3, 4, 5)\nputs right_angle_triangle(1, 2, 3)\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "true\nfalse\nLoaded suite /tmp/tmp8csfr5gh\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp8csfr5gh.rb:27:in `test_right_angle_triangle'\n     24:     candidate = method(:right_angle_triangle)\n     25:     assert_equal(true, candidate.call(3, 4, 5))\n     26:     assert_equal(false, candidate.call(1, 2, 3))\n  => 27:     assert_equal(true, candidate.call(10, 6, 8))\n     28:     assert_equal(false, candidate.call(2, 2, 2))\n     29:     assert_equal(true, candidate.call(7, 24, 25))\n     30:     assert_equal(false, candidate.call(10, 5, 7))\n<true> expected but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\nFinished in 0.006731139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.56 tests/s, 445.69 assertions/s\n",
      "timestamp": 1659823499
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # See the hint here https://www.mathsisfun.com/pythagoras.html\n  return false if a <= 0 || b <= 0 || c <= 0\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5d2l_db1.rb:12: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp5d2l_db1.rb:27: syntax error, unexpected end-of-input, expecting `end'\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  c > a && c > b ? c**2 == a**2 + b**2 : a > b && a > c ? a**2 == b**2 + c**2 : b**2 == a**2 + c**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpkod1x7cr\nStarted\n.\nFinished in 0.000494615 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2021.77 tests/s, 22239.52 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823499
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n    ary = [a, b, c].sort\n    ary[0]**2 + ary[1]**2 == ary[2]**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpj5uubkyc\nStarted\n.\nFinished in 0.000453124 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2206.90 tests/s, 24275.92 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823499
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Check if the sum of the squared lengths of the two shorter sides is equal \n  # to the squared length of the longest side.\n  (a**2 + b**2 == c**2) || (a**2 + c**2 == b**2) || (b**2 + c**2 == a**2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpknla6_oo\nStarted\n.\nFinished in 0.000506594 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1973.97 tests/s, 21713.64 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823499
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if (a**2 + b**2 == c**2) || (a**2 + c**2 == b**2) || (b**2 + c**2 == a**2)\n    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpo_fqcqum\nStarted\n.\nFinished in 0.000445129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2246.54 tests/s, 24711.94 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823499
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n    true\n  elsif a**2 + c**2 == b**2\n    true\n  elsif b**2 + c**2 == a**2\n    true\n  else\n    false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpw3znn3k7\nStarted\n.\nFinished in 0.000457018 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2188.10 tests/s, 24069.07 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823499
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  sides = [a, b, c].sort\n  if sides[0]**2 + sides[1]**2 == sides[2]**2\n    return true\n  else\n    return false\n  end\nend\nputs right_angle_triangle(3, 4, 5)\nputs right_angle_triangle(1, 2, 3)\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "true\nfalse\nLoaded suite /tmp/tmpihbqzx1f\nStarted\n.\nFinished in 0.000455502 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2195.38 tests/s, 24149.18 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823499
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if [a, b, c].combination(2).map { |x, y| x ** 2 + y ** 2 }.include?(c ** 2)\n    true\n  else\n    false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpi447jnyz\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpi447jnyz.rb:21:in `test_right_angle_triangle'\n     18:     candidate = method(:right_angle_triangle)\n     19:     assert_equal(true, candidate.call(3, 4, 5))\n     20:     assert_equal(false, candidate.call(1, 2, 3))\n  => 21:     assert_equal(true, candidate.call(10, 6, 8))\n     22:     assert_equal(false, candidate.call(2, 2, 2))\n     23:     assert_equal(true, candidate.call(7, 24, 25))\n     24:     assert_equal(false, candidate.call(10, 5, 7))\n<true> expected but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\nFinished in 0.00944387 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n105.89 tests/s, 317.67 assertions/s\n",
      "timestamp": 1659823499
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  a2 = a**2\n  b2 = b**2\n  c2 = c**2\n  if a2 + b2 == c2 || b2 + c2 == a2 || c2 + a2 == b2\n    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpnizh48bo\nStarted\n.\nFinished in 0.00048801 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2049.14 tests/s, 22540.52 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823499
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a > b && a > c\n    return b**2 + c**2 == a**2\n  elsif b > a && b > c\n    return a**2 + c**2 == b**2\n  else\n    return a**2 + b**2 == c**2\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp1639zelx\nStarted\n.\nFinished in 0.000504199 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1983.34 tests/s, 21816.78 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  first = a**2 + b**2\n  second = b**2 + c**2\n  third = a**2 + c**2\n  if first == c**2\n    return true\n  elsif second == a**2\n    return true\n  elsif third == b**2\n    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpez3pqitt\nStarted\n.\nFinished in 0.000501738 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1993.07 tests/s, 21923.79 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823499
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a==0 || b==0 || c==0 then\n    return false\n  end\n  if a**2 == b**2 + c**2 then\n    return true\n  elsif b**2 == a**2 + c**2 then\n    return true\n  elsif c**2 == a**2 + b**2 then\n    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpe3qe2hyh\nStarted\n.\nFinished in 0.000494794 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2021.04 tests/s, 22231.47 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823499
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Write your code here!\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpj_f3bjwe\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpj_f3bjwe.rb:15:in `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007117305 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n140.50 tests/s, 140.50 assertions/s\n",
      "timestamp": 1659823499
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  array = [a, b, c].sort\n  array[0]**2 + array[1]**2 == array[2]**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmptsvdmg3k\nStarted\n.\nFinished in 0.000483351 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2068.89 tests/s, 22757.79 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a > b && a > c && b**2 + c**2 == a**2\n    return true\n  elsif b > a && b > c && a**2 + c**2 == b**2\n    return true\n  elsif c > a && c > b && a**2 + b**2 == c**2\n    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpyzoawkom\nStarted\n.\nFinished in 0.000433203 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2308.39 tests/s, 25392.25 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823499
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  arr = [a, b, c].sort\n  return false if arr[0] <= 0\n  return true if arr[0] ** 2 + arr[1] ** 2 == arr[2] ** 2\n  false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpodcqx3ok\nStarted\n.\nFinished in 0.000462906 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2160.27 tests/s, 23762.92 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823499
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a == Math.sqrt(b**2 + c**2) || b == Math.sqrt(a**2 + c**2) || c == Math.sqrt(a**2 + b**2)\n    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpq02ikdaf\nStarted\n.\nFinished in 0.000538463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1857.14 tests/s, 20428.52 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823499
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Hint: the Pythagorean Theorem is the sum of the squares of the two shorter\n  # sides is equal to the square of the longest side\n  # i.e. a^2 + b^2 = c^2 where c is the longest side and a and b are the shorter\n  # ones\n  # Hint: you will need to use a comparison operator to compare values\n  # Fill in your solution here\n  nums = [a, b, c].sort\n  (nums[0]**2 + nums[1]**2) == nums[2]**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpqsxfo7wq\nStarted\n.\nFinished in 0.000496659 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2013.45 tests/s, 22147.99 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823499
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # TODO\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpd4eusxu5\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpd4eusxu5.rb:15:in `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006482016 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n154.27 tests/s, 154.27 assertions/s\n",
      "timestamp": 1659823499
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if (a**2 + b**2 == c**2) || (a**2 + c**2 == b**2) || (b**2 + c**2 == a**2)\n    true\n  else\n    false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpt1bqjr_z\nStarted\n.\nFinished in 0.000514151 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1944.95 tests/s, 21394.49 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823499
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 == b**2 + c**2 || b**2 == a**2 + c**2 || c**2 == a**2 + b**2\n    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpudukklhj\nStarted\n.\nFinished in 0.000484414 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2064.35 tests/s, 22707.85 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823499
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  hyp = [a, b, c].max\n  s = [a, b, c].sort\n  s[0]**2 + s[1]**2 == hyp**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpk08_eknh\nStarted\n.\nFinished in 0.000530089 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1886.48 tests/s, 20751.23 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823499
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n\t# @TODO: write your program here!\n\t# return true if a^2 + b^2 = c^2, else return false\n\t\n\tif (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2)\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmprgzxlid1\nStarted\n.\nFinished in 0.000498139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2007.47 tests/s, 22082.19 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823499
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  arr = [a, b, c].sort\n  arr[0]**2 + arr[1]**2 == arr[2]**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp2iw2nk97\nStarted\n.\nFinished in 0.000469091 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2131.78 tests/s, 23449.61 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823497
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  array = [a, b, c].sort\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk13ki77g.rb:11: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpk13ki77g.rb:26: syntax error, unexpected end-of-input, expecting `end'\n",
      "stdout": "",
      "timestamp": 1659823499
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  array = [a, b, c].sort.reverse!\n  if array[2] ** 2 + array[1] ** 2 == array[0] ** 2\n    true\n  else\n    false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpgivnrtv3\nStarted\n.\nFinished in 0.000512541 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1951.06 tests/s, 21461.70 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823499
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  #raise Exception, \"need to be implemented\"\n  # Does any side have a negative length?\n  return false if a < 0 || b < 0 || c < 0\n  # Do all sides have a length?\n  return false if a == 0 || b == 0 || c == 0\n  # Does the triangle satisfy the Pythagorean theorem?\n  sides = [a, b, c].sort\n  sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpbg1gzf6z\nStarted\n.\nFinished in 0.000541709 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1846.01 tests/s, 20306.11 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823499
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n    # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmputjexf8r\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmputjexf8r.rb:15:in `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006980135 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.26 tests/s, 143.26 assertions/s\n",
      "timestamp": 1659823499
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2 || a**2 + c**2 == b**2 || b**2 + c**2 == a**2\n    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpdfi2vpbu\nStarted\n.\nFinished in 0.000459197 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2177.71 tests/s, 23954.86 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  arr = [a, b, c].sort\n  arr[0]**2 + arr[1]**2 == arr[2]**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp2iw2nk97\nStarted\n.\nFinished in 0.000469091 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2131.78 tests/s, 23449.61 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823497
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a == c\n    return false\n  elsif a*a + b*b == c*c\n    return true\n  elsif a*a + c*c == b*b\n    return true\n  elsif b*b + c*c == a*a\n    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp7xxysy2t\nStarted\n.\nFinished in 0.000434057 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2303.84 tests/s, 25342.29 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823499
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a == b && b == c\n    return false\n  elsif a > b && a > c\n    return a**2 == b**2 + c**2\n  elsif b > a && b > c\n    return b**2 == a**2 + c**2\n  elsif c > a && c > b\n    return c**2 == a**2 + b**2\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpm0xtbdnc\nStarted\n.\nFinished in 0.000522207 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.95 tests/s, 21064.44 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823499
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  arr = [a, b, c].sort\n  arr[0]**2 + arr[1]**2 == arr[2]**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp2iw2nk97\nStarted\n.\nFinished in 0.000469091 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2131.78 tests/s, 23449.61 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823497
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp6p5g4fzy\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp6p5g4fzy.rb:14:in `test_right_angle_triangle'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_right_angle_triangle\n     13:     candidate = method(:right_angle_triangle)\n  => 14:     assert_equal(true, candidate.call(3, 4, 5))\n     15:     assert_equal(false, candidate.call(1, 2, 3))\n     16:     assert_equal(true, candidate.call(10, 6, 8))\n     17:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006783676 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.41 tests/s, 147.41 assertions/s\n",
      "timestamp": 1659823499
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a > b && a > c \n    return a**2 == b**2 + c**2\n  elsif b > a && b > c\n    return b**2 == a**2 + c**2\n  else\n    return c**2 == a**2 + b**2\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmprtshuoqc\nStarted\n.\nFinished in 0.000502545 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1989.87 tests/s, 21888.59 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823499
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  sides = [a, b, c].sort\n  return sides[0]**2 + sides[1]**2 == sides[2]**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpz5tt57__\nStarted\n.\nFinished in 0.000449023 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2227.06 tests/s, 24497.63 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n    a, b, c = [a, b, c].sort!\n    c**2 == a**2 + b**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5v1v2blk\nStarted\n.\nFinished in 0.000488766 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2045.97 tests/s, 22505.66 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823499
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if (a**2) + (b**2) == (c**2)\n    return true\n  elsif (b**2) + (c**2) == (a**2)\n    return true\n  elsif (c**2) + (a**2) == (b**2)\n    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpschkh_w1\nStarted\n.\nFinished in 0.000446891 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2237.68 tests/s, 24614.50 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823499
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  s = [a, b, c].sort\n  if s[0] ** 2 + s[1] ** 2 == s[2] ** 2\n    return true\n  else\n    return false\n  end\nend\nputs right_angle_triangle(3, 4, 5)\nputs right_angle_triangle(1, 2, 3)\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "true\nfalse\nLoaded suite /tmp/tmpbn76e4rz\nStarted\n.\nFinished in 0.000565809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1767.38 tests/s, 19441.19 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823499
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n    # Write your code here\n    return nil\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpvtcng1x2\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpvtcng1x2.rb:16:in `test_right_angle_triangle'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_right_angle_triangle\n     15:     candidate = method(:right_angle_triangle)\n  => 16:     assert_equal(true, candidate.call(3, 4, 5))\n     17:     assert_equal(false, candidate.call(1, 2, 3))\n     18:     assert_equal(true, candidate.call(10, 6, 8))\n     19:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006549197 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.69 tests/s, 152.69 assertions/s\n",
      "timestamp": 1659823499
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # For the triangle abc to be a right-angled triangle, square of the longest\n  # side (Hypotenuse) must be equal to the sum of the squares of the remaining\n  # two sides.\n  # Reference: https://en.wikipedia.org/wiki/Pythagorean_theorem#Formula_using_triangle_sides\n  if (c > a && c > b)\n    ((c**2) == (a**2 + b**2)) ? true : false\n  elsif (b > a && b > c)\n    ((b**2) == (a**2 + c**2)) ? true : false\n  elsif (a > b && a > c)\n    ((a**2) == (b**2 + c**2)) ? true : false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp6q_ii1tn\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp6q_ii1tn.rb:28:in `test_right_angle_triangle'\n     25:     assert_equal(true, candidate.call(3, 4, 5))\n     26:     assert_equal(false, candidate.call(1, 2, 3))\n     27:     assert_equal(true, candidate.call(10, 6, 8))\n  => 28:     assert_equal(false, candidate.call(2, 2, 2))\n     29:     assert_equal(true, candidate.call(7, 24, 25))\n     30:     assert_equal(false, candidate.call(10, 5, 7))\n     31:     assert_equal(true, candidate.call(5, 12, 13))\n<false> expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n? ?? --\n===============================================================================\n\nFinished in 0.007214052 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.62 tests/s, 554.47 assertions/s\n",
      "timestamp": 1659823499
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  (a**2 + b**2 == c**2) || (a**2 + c**2 == b**2) || (b**2 + c**2 == a**2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp57bquib2\nStarted\n.\nFinished in 0.00043953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2275.16 tests/s, 25026.73 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823498
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a > b && a > c\n    if a ** 2 == b ** 2 + c ** 2\n      return true\n    else\n      return false\n    end\n  elsif b > a && b > c\n    if b ** 2 == a ** 2 + c ** 2\n      return true\n    else\n      return false\n    end\n  elsif c > a && c > b\n    if c ** 2 == a ** 2 + b ** 2\n      return true\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpj6phx6gs\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpj6phx6gs.rb:36:in `test_right_angle_triangle'\n     33:     assert_equal(true, candidate.call(3, 4, 5))\n     34:     assert_equal(false, candidate.call(1, 2, 3))\n     35:     assert_equal(true, candidate.call(10, 6, 8))\n  => 36:     assert_equal(false, candidate.call(2, 2, 2))\n     37:     assert_equal(true, candidate.call(7, 24, 25))\n     38:     assert_equal(false, candidate.call(10, 5, 7))\n     39:     assert_equal(true, candidate.call(5, 12, 13))\n<false> expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n? ?? --\n===============================================================================\n\nFinished in 0.006526353 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.22 tests/s, 612.90 assertions/s\n",
      "timestamp": 1659823499
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  [a, b, c].sort!\n  ([*a, b, c] - [*a, b, c].sort).empty? && a**2 + b**2 == c**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpg7aechb7\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpg7aechb7.rb:18:in `test_right_angle_triangle'\n     15:     candidate = method(:right_angle_triangle)\n     16:     assert_equal(true, candidate.call(3, 4, 5))\n     17:     assert_equal(false, candidate.call(1, 2, 3))\n  => 18:     assert_equal(true, candidate.call(10, 6, 8))\n     19:     assert_equal(false, candidate.call(2, 2, 2))\n     20:     assert_equal(true, candidate.call(7, 24, 25))\n     21:     assert_equal(false, candidate.call(10, 5, 7))\n<true> expected but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\nFinished in 0.006579137 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.00 tests/s, 455.99 assertions/s\n",
      "timestamp": 1659823499
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  max = a > b ? a : b\n  max = max > c ? max : c\n  if (max * max == a * a + b * b + c * c - max * max)\n    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp7x6nbvkl\nStarted\n.\nFinished in 0.000513355 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1947.97 tests/s, 21427.67 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823499
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Unnecessary to check all three potential right angles.\n  # Also, <code>max</code> is sufficient (first or last will do, by convention)\n  hypotenuse = [a, b, c].max\n  non_hypotenuse = [a, b, c].sort[0..1].inject(:+)\n  non_hypotenuse**2 == hypotenuse**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp220olkiz\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp220olkiz.rb:19:in `test_right_angle_triangle'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_right_angle_triangle\n     18:     candidate = method(:right_angle_triangle)\n  => 19:     assert_equal(true, candidate.call(3, 4, 5))\n     20:     assert_equal(false, candidate.call(1, 2, 3))\n     21:     assert_equal(true, candidate.call(10, 6, 8))\n     22:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\nFinished in 0.006948241 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.92 tests/s, 143.92 assertions/s\n",
      "timestamp": 1659823499
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpmtx1o87p\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpmtx1o87p.rb:15:in `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006623713 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n150.97 tests/s, 150.97 assertions/s\n",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  a, b, c = [a, b, c].sort\n  return a**2 + b**2 == c**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpauzhql05\nStarted\n.\nFinished in 0.00044091 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2268.04 tests/s, 24948.40 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823499
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  a, b, c = [a, b, c].sort\n  a**2 + b**2 == c**2\nend\nputs right_angle_triangle(3, 4, 5) == true\nputs right_angle_triangle(5, 4, 3) == true\nputs right_angle_triangle(3, 5, 4) == true\nputs right_angle_triangle(1, 2, 3) == false\nputs right_angle_triangle(1, 3, 2) == false\nputs right_angle_triangle(2, 1, 3) == false\nputs right_angle_triangle(2, 3, 1) == false\nputs right_angle_triangle(3, 1, 2) == false\nputs right_angle_triangle(3, 2, 1) == false\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\nLoaded suite /tmp/tmplai8r3i8\nStarted\n.\nFinished in 0.000497425 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2010.35 tests/s, 22113.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823499
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a**2 + b**2 == c**2\n    true\n  elsif a**2 + c**2 == b**2\n    true\n  elsif b**2 + c**2 == a**2\n    true\n  else\n    false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpw3znn3k7\nStarted\n.\nFinished in 0.000457018 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2188.10 tests/s, 24069.07 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823499
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Write your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpymjzznli\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpymjzznli.rb:15:in `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006724733 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.70 tests/s, 148.70 assertions/s\n",
      "timestamp": 1659823498
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # Math.sqrt(a*a + b*b) == c || Math.sqrt(a*a + c*c) == b || Math.sqrt(b*b + c*c) == a\n  # Math.sqrt(a*a + b*b) == c || Math.sqrt(a*a + c*c) == b || Math.sqrt(b*b + c*c) == a\n  [a, b, c].max ** 2 == [a, b, c].min(2).map { |x| x ** 2 }.sum\nend\nputs right_angle_triangle(3, 4, 5) == true\nputs right_angle_triangle(1, 2, 3) == false\nputs right_angle_triangle(10, 18, 26) == true\nputs right_angle_triangle(6, 10, 12) == true\nputs right_angle_triangle(1, 2, 3) == false\nputs right_angle_triangle(6, 6, 6) == false\nputs right_angle_triangle(6, 10, 17) == false\nputs right_angle_triangle(1, 10, 14) == false\nputs right_angle_triangle(7, 12, 12) == false\nputs right_angle_triangle(1, 1, 1) == false\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "true\ntrue\nfalse\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\nLoaded suite /tmp/tmpm9hzoqzb\nStarted\n.\nFinished in 0.000433313 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2307.80 tests/s, 25385.81 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823499
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  max = [a, b, c].max\n  hyp = max\n  side = [a, b, c].reject { |e| e == max }\n  right_angle_triangle = hyp**2 == side[0]**2 + side[1]**2\n  return right_angle_triangle\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp9ihnr38o\nStarted\nE\n===============================================================================\nError: test_right_angle_triangle(TestHumanEval):\n  NoMethodError: undefined method `**' for nil:NilClass\n  \n    right_angle_triangle = hyp**2 == side[0]**2 + side[1]**2\n                                            ^^\n/tmp/tmp9ihnr38o.rb:12:in `right_angle_triangle'\n/tmp/tmp9ihnr38o.rb:22:in `call'\n/tmp/tmp9ihnr38o.rb:22:in `test_right_angle_triangle'\n     19:     assert_equal(true, candidate.call(3, 4, 5))\n     20:     assert_equal(false, candidate.call(1, 2, 3))\n     21:     assert_equal(true, candidate.call(10, 6, 8))\n  => 22:     assert_equal(false, candidate.call(2, 2, 2))\n     23:     assert_equal(true, candidate.call(7, 24, 25))\n     24:     assert_equal(false, candidate.call(10, 5, 7))\n     25:     assert_equal(true, candidate.call(5, 12, 13))\n===============================================================================\n\nFinished in 0.002115747 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n472.65 tests/s, 1417.94 assertions/s\n",
      "timestamp": 1659823499
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a == Math.sqrt(b**2 + c**2) || b == Math.sqrt(a**2 + c**2) || c == Math.sqrt(a**2 + b**2)\n    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpq02ikdaf\nStarted\n.\nFinished in 0.000538463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1857.14 tests/s, 20428.52 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823499
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n    # If a is smallest side, so must be c, the hypotenuse\n    if a > b && a > c\n        # pythagorean theorem\n        ((b**2) + (c**2)) == (a**2)\n    # If b is smallest side, so must be c, the hypotenuse\n    elsif b > a && b > c\n        # pythagorean theorem\n        ((a**2) + (c**2)) == (b**2)\n    # Else, c is smallest side, so must be a, the hypotenuse\n    else\n        # pythagorean theorem\n        ((a**2) + (b**2)) == (c**2)\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp42evnviq\nStarted\n.\nFinished in 0.000547344 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1827.00 tests/s, 20097.05 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823499
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpwtf2wja9\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpwtf2wja9.rb:15:in `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006285727 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n159.09 tests/s, 159.09 assertions/s\n",
      "timestamp": 1659823498
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # a^2 + b^2 = c^2 => a, b, c form a right angle triangle\n  # calling square root on the sum of squares of a, b is equivalent to \n  # squaring c => O(1) constant time\n  # Math.sqrt(a**2 + b**2) == c\n  # squaring both sides, we get\n  a**2 + b**2 == c**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpl1nefs32\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpl1nefs32.rb:22:in `test_right_angle_triangle'\n     19:     candidate = method(:right_angle_triangle)\n     20:     assert_equal(true, candidate.call(3, 4, 5))\n     21:     assert_equal(false, candidate.call(1, 2, 3))\n  => 22:     assert_equal(true, candidate.call(10, 6, 8))\n     23:     assert_equal(false, candidate.call(2, 2, 2))\n     24:     assert_equal(true, candidate.call(7, 24, 25))\n     25:     assert_equal(false, candidate.call(10, 5, 7))\n<true> expected but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\nFinished in 0.006343867 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n157.63 tests/s, 472.90 assertions/s\n",
      "timestamp": 1659823499
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  # TODO: Return true if the three sides form a right-angled triangle\n  if (a ** 2 + b ** 2 == c ** 2) || (b ** 2 + c ** 2 == a ** 2) || (a ** 2 + c ** 2 == b ** 2)\n  \treturn true\n  else\n  \treturn false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmplx4irtcf\nStarted\n.\nFinished in 0.000427948 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2336.73 tests/s, 25704.06 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823499
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp6p5g4fzy\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp6p5g4fzy.rb:14:in `test_right_angle_triangle'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_right_angle_triangle\n     13:     candidate = method(:right_angle_triangle)\n  => 14:     assert_equal(true, candidate.call(3, 4, 5))\n     15:     assert_equal(false, candidate.call(1, 2, 3))\n     16:     assert_equal(true, candidate.call(10, 6, 8))\n     17:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006783676 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.41 tests/s, 147.41 assertions/s\n",
      "timestamp": 1659823499
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  a2 = a * a\n  b2 = b * b\n  c2 = c * c\n  if a2 + b2 == c2 or b2 + c2 == a2 or c2 + a2 == b2\n    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmptx_0chwn\nStarted\n.\nFinished in 0.00052959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1888.25 tests/s, 20770.78 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823499
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  #Your code here!\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpeax7tvzi\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpeax7tvzi.rb:15:in `test_right_angle_triangle'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_right_angle_triangle\n     14:     candidate = method(:right_angle_triangle)\n  => 15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n     17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006134679 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n163.01 tests/s, 163.01 assertions/s\n",
      "timestamp": 1659823499
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  return false if a + b <= c\n  return false if a + c <= b\n  return false if b + c <= a\n  x, y, z = [a, b, c].sort\n  x ** 2 + y ** 2 == z ** 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpuyqzbipj\nStarted\n.\nFinished in 0.000455321 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2196.25 tests/s, 24158.78 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823499
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if ((a**2 + b**2) == c**2) || ((a**2 + c**2) == b**2) || ((b**2 + c**2) == a**2)\n    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpw64qutk6\nStarted\n.\nFinished in 0.000445976 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2242.27 tests/s, 24665.00 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823499
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  return false if a == 0 || b == 0 || c == 0\n  hyp = Math.hypot(a, b).round(5)\n  hyp == c.round(5) || hyp == a.round(5) || hyp == b.round(5)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp_gdc8jmk\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmp_gdc8jmk.rb:19:in `test_right_angle_triangle'\n     16:     candidate = method(:right_angle_triangle)\n     17:     assert_equal(true, candidate.call(3, 4, 5))\n     18:     assert_equal(false, candidate.call(1, 2, 3))\n  => 19:     assert_equal(true, candidate.call(10, 6, 8))\n     20:     assert_equal(false, candidate.call(2, 2, 2))\n     21:     assert_equal(true, candidate.call(7, 24, 25))\n     22:     assert_equal(false, candidate.call(10, 5, 7))\n<true> expected but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\nFinished in 0.005731393 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n174.48 tests/s, 523.43 assertions/s\n",
      "timestamp": 1659823499
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  if a > b && a > c\n    if a**2 == b**2 + c**2\n      true\n    else\n      false\n    end\n  elsif b > a && b > c\n    if b**2 == a**2 + c**2\n      true\n    else\n      false\n    end\n  elsif c > a && c > b\n    if c**2 == a**2 + b**2\n      true\n    else\n      false\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpz3b8tg46\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpz3b8tg46.rb:36:in `test_right_angle_triangle'\n     33:     assert_equal(true, candidate.call(3, 4, 5))\n     34:     assert_equal(false, candidate.call(1, 2, 3))\n     35:     assert_equal(true, candidate.call(10, 6, 8))\n  => 36:     assert_equal(false, candidate.call(2, 2, 2))\n     37:     assert_equal(true, candidate.call(7, 24, 25))\n     38:     assert_equal(false, candidate.call(10, 5, 7))\n     39:     assert_equal(true, candidate.call(5, 12, 13))\n<false> expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n? ?? --\n===============================================================================\n\nFinished in 0.005779516 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n173.02 tests/s, 692.10 assertions/s\n",
      "timestamp": 1659823499
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  sides = [a, b, c].sort\n  sides[0]**2 + sides[1]**2 == sides[2]**2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmppzf2v0as\nStarted\n.\nFinished in 0.000516442 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1936.33 tests/s, 21299.58 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823497
    },
    {
      "exit_code": 1,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  [a, b, c].combination(2).to_a.map { |x, y| x**2 + y**2 }.include?(c**2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpbifshz5_\nStarted\nF\n===============================================================================\nFailure: test_right_angle_triangle(TestHumanEval)\n/tmp/tmpbifshz5_.rb:17:in `test_right_angle_triangle'\n     14:     candidate = method(:right_angle_triangle)\n     15:     assert_equal(true, candidate.call(3, 4, 5))\n     16:     assert_equal(false, candidate.call(1, 2, 3))\n  => 17:     assert_equal(true, candidate.call(10, 6, 8))\n     18:     assert_equal(false, candidate.call(2, 2, 2))\n     19:     assert_equal(true, candidate.call(7, 24, 25))\n     20:     assert_equal(false, candidate.call(10, 5, 7))\n<true> expected but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\nFinished in 0.006072888 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n164.67 tests/s, 494.00 assertions/s\n",
      "timestamp": 1659823499
    },
    {
      "exit_code": 0,
      "program": "# Given the lengths of the three sides of a triangle. Return True if the three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c)\n  ary = [a, b, c].sort\n  return true if ary[0]**2 + ary[1]**2 == ary[2]**2\n  false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3, 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true, candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10, 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true, candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2, 2, 10))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmphjd9e04q\nStarted\n.\nFinished in 0.000516059 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1937.76 tests/s, 21315.39 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823499
    }
  ]
}