name: HumanEval_161_solve
language: rb
prompt: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
  \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
  \ contains no letters, reverse the string.\n# The function should return the resulted\
  \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
  # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
  \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"\
  ))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\"\
  , candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n\
  \    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
  2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
  #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
completions: ["    return s.swapcase if s.match(/[a-zA-Z]/)\n    s.reverse\nend",
  "  if s.length > 0\n    s.reverse.gsub(/[a-z]/, &:upcase).gsub(/[A-Z]/, &:downcase)\n\
    \  else\n    s.reverse\n  end\nend", "  # regex : /[a-z]/\n  s.gsub(/[a-z]/){|match|\
    \ match == match.upcase ? match.downcase : match.upcase}\nend", "  s.gsub(/[a-z]/i,\
    \ '') == '' ? s.reverse : s.chars.map{|x| x.match(/[a-z]/i) ? x == x.upcase ?\
    \ x.downcase : x.upcase : x}.join\nend", "    #Solution 1\n    # array = s.split(\"\
    \")\n    # array.map! {|element| element == element.upcase ? element.downcase\
    \ : element.upcase}\n    # array.join(\"\")\n    # Solution 2\n    # regex = /[a-zA-Z]/\n\
    \    # if regex =~ s\n    #     s.swapcase\n    # else\n    #     s.reverse\n\
    \    # end\n    # Solution 3\n    s.tr('a-zA-Z', 'A-Za-z').reverse\nend", "  temp\
    \ = \"\"\n  if s.scan(/[a-zA-Z]/).empty?\n    s.reverse\n  else\n    s.each_char\
    \ do |ch|\n      if ch.match?(/[a-zA-Z]/)\n        temp << ch.swapcase\n     \
    \ else\n        temp << ch\n      end\n    end\n    temp\n  end\nend", "  s.chars.map\
    \ { |v| v.ord.between?(65, 90) ? v.downcase : v.upcase }.join\nend", "    if s.count(\"\
    a-zA-Z\") == 0\n        s.reverse\n    else\n        s.swapcase\n    end\nend",
  "    (0...s.length).each do |i|\n        if s[i] =~ /[a-z]/\n            s[i] =\
    \ s[i].upcase\n        elsif s[i] =~ /[A-Z]/\n            s[i] = s[i].downcase\n\
    \        end\n    end\n    s.reverse\nend", "    x = []\n    j = 0\n    s.each_char\
    \ do |i|\n        if i.match(/^[[:alpha:]]$/)\n            x << i.swapcase\n \
    \       else\n            x << i\n        end\n    end\n    return x.join\nend\n\
    puts solve(\"1234\")\nputs solve(\"ab\")\nputs solve(\"#a@C\")", "  if s.match?(/[a-zA-Z]/)\n\
    \    s.swapcase\n  else\n    s.reverse\n  end\nend", "  # your code\n  a = []\n\
    \  if s.length == 0\n    return s\n  end\n  s.split(\"\").each do |x|\n    if\
    \ x.downcase.ord != x.ord\n      a.push(x.downcase)\n    elsif x.downcase.ord\
    \ == x.ord\n      a.push(x.upcase)\n    else\n      a.push(x)\n    end\n  end\n\
    \  a.join(\"\")\nend", "  if s.match(/[a-zA-Z]/)\n    s.reverse\n  else\n    s.reverse.gsub(/[a-zA-Z]/)\
    \ { |letter| letter.match(/[a-z]/) ? letter.upcase : letter.downcase }\n  end\n\
    end", "  s.tr('a-zA-Z', 'A-Za-z').reverse! || s.reverse!\nend", "  # your code\n\
    \  if s.empty?\n    return s\n  else\n    s.swapcase\n  end\nend", "  s.reverse.gsub(/[a-z]/,\
    \ &:upcase).gsub(/[A-Z]/, &:downcase)\nend", "  s.tr(\"a-zA-Z\", \"A-Za-z\").reverse\n\
    end", "  letters = ('a'..'z').to_a\n  if letters.any? { |x| s.include?(x) }\n\
    \    s.chars.map { |x| letters.include?(x) ? x.swapcase : x }.join\n  else\n \
    \   s.reverse\n  end\nend\np solve(\"1234\") #=> \"4321\"\np solve(\"ab\") #=>\
    \ \"AB\"\np solve(\"#a@C\") #=> \"#A@c\"", "  s.chars.each_with_object(\"\") do\
    \ |char, str|\n    if /[a-zA-Z]/.match(char)\n      str << if char.upcase == char\n\
    \              char.downcase\n            else\n              char.upcase\n  \
    \          end\n    else\n      str << char\n    end\n  end.reverse\nend", " \
    \   s.reverse!\n    arr = s.split(\"\")\n    arr.each_with_index do |value,index|\n\
    \        if (value =~ /[a-z]/)\n            arr[index] = value.upcase\n      \
    \  elsif (value =~ /[A-Z]/)\n            arr[index] = value.downcase\n       \
    \ end\n    end\n    return arr.join(\"\")\nend", "  #..\n  return s.swapcase if\
    \ s.count(\"a-zA-Z\") == 0\n  s.chars.map{|c| c =~ /[a-zA-Z]/ ? c.swapcase : c}.join\n\
    end", "  flag = false\n  for i in 0..s.length - 1\n    if s[i] =~ /[a-zA-Z]/\n\
    \      flag = true\n      if s[i] == s[i].upcase\n        s[i] = s[i].downcase\n\
    \      else\n        s[i] = s[i].upcase\n      end\n    end\n  end\n  return flag\
    \ ? s : s.reverse\nend", "  letters = s.chars.select { |c| c =~ /[a-z]/i }\n \
    \ letters.empty? ? s.reverse : s.gsub(/[a-z]/i) { |c| c == c.upcase ? c.downcase\
    \ : c.upcase }\nend", "  s.gsub(/\\d/, '').reverse.tr('a-zA-Z', 'A-Za-z')\nend",
  "  s.tr(\"a-z\", \"A-Z\").reverse!\nend", "  return s.reverse if s.tr('a-zA-Z',\
    \ '') == s\n  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\n\
    end", "    string = s.scan(/[a-zA-Z]/)\n    if string.length == 0\n        return\
    \ s.reverse\n    else\n        return s.tr('a-z', 'A-Z').tr('A-Z', 'a-z')\n  \
    \  end\nend", "  chars = s.chars\n  chars.each_with_index do |char, index|\n \
    \   chars[index] = char.reverse if char.scan(/[[:alpha:]]/).any?\n  end\n  chars.join.reverse\n\
    end", "  return s.reverse if !s.match(/[a-zA-Z]/)\n  (0...s.length).each do |i|\n\
    \    if s[i].match(/[a-zA-Z]/)\n      if s[i] == s[i].upcase\n        s[i] = s[i].downcase\n\
    \      else\n        s[i] = s[i].upcase\n      end\n    end\n  end\n  s\nend",
  "  #your code here\nend", "  s = s.reverse\n  s.tr!('A-Za-z', 'a-zA-Z')\nend", " \
    \ return s.reverse unless s =~ /[a-zA-Z]/\n  s.gsub(/[a-zA-Z]/) { |match| match\
    \ == match.upcase ? match.downcase : match.upcase }\nend", "  s = s.chars.reverse.join\n\
    \  s = s.tr(\"a-zA-Z\", \"A-Za-z\")\nend", "    return s.reverse if s.gsub(/[a-zA-Z]/,\
    \ '').length == s.length\n    s.chars.map{|char| char.match(/[a-zA-Z]/) ? char.swapcase\
    \ : char}.join\nend", "  s.reverse.gsub(/[a-z]/i, &:swapcase)\nend", "  if (s.scan(/[a-zA-Z]/).empty?)\n\
    \    return s.reverse\n  else\n    return s.tr(\"a-zA-Z\", \"A-Za-z\")\n  end\n\
    end", "  s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z' => 'a-z')\nend", "  #s.chars.map\
    \ { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\n  s.chars.map { |c| c =~\
    \ /[a-z]/ ? c.swapcase : c }.join\nend", "    letters = ('a'..'z').to_a + ('A'..'Z').to_a\n\
    \    word = s.split('')\n    word.each_with_index do |let, i|\n        if letters.include?(let)\n\
    \            if let == let.upcase\n                word[i] = let.downcase\n  \
    \          else\n                word[i] = let.upcase\n            end\n     \
    \   end\n    end\n    if s == s.reverse\n        word.join('')\n    else\n   \
    \     word.join('').reverse\n    end\nend", "  str = s.each_char.map { |x| x =~\
    \ /[a-z]/ ? x.swapcase : x }\n  str.all? { |x| x =~ /[^a-z]/ } ? str.reverse.join\
    \ : str.join\nend", "    flag = true\n    s.each_char.map do |i|\n        if flag\n\
    \            flag = false\n            i.swapcase!\n        else\n           \
    \ flag = true\n            i\n        end\n    end.join\nend", "  out=[]\n  s.chars.each\
    \ do |ch|\n    if ch =~ /[a-zA-Z]/\n      out << ch.swapcase\n    else\n     \
    \ out << ch\n    end\n  end\n  return out.join('')\nend", "  # TODO: Implement\
    \ me\n  return \"\" if s.empty?\n  return s.reverse unless s.match(/[a-zA-Z]/)\n\
    \  arr = s.split(\"\")\n  arr.map! do |e|\n    if e.match(/[a-zA-Z]/)\n      e\
    \ == e.upcase ? e.downcase : e.upcase\n    else\n      e\n    end\n  end\n  arr.join(\"\
    \")\nend", "\tletters = s.scan(/[a-zA-Z]/)\n\t# Non-letters could be arbitrary\
    \ characters, so swap them\n\tswapped = s.split('').map { |c| letters.include?(c)\
    \ ? c.swapcase : c }\n\tswapped.join\nend", "  if s.match(/[a-zA-Z]/)\n    # If\
    \ there are letters in the string\n    s.chars.map { |x| x.match(/[a-zA-Z]/) ?\
    \ x.swapcase : x }.join(\"\")\n  else\n    # If there are no letters in the string\n\
    \    s.reverse\n  end\nend", "  s.each_char.inject(\"\") { |res, c| (c =~ /[a-z]/i)\
    \ ? res + c.swapcase : res + c }.reverse\nend", "  return s.reverse if s.count(\"\
    a-zA-Z\") == 0\n  s.chars.map { |c| (\"a\"..\"z\").include?(c) ? c.upcase : c.downcase\
    \ }.join\nend", "  if s.match(/[a-zA-Z]/)\n    s.tr('a-zA-Z', 'A-Za-z')\n  else\n\
    \    s.reverse\n  end\nend", "  s.split('').reverse.join('')\nend", "  return\
    \ s.reverse if s.scan(/[a-zA-Z]/).empty?\n  s.split('').map{|c| c.upcase == c\
    \ ? c.downcase : c.upcase}.join\nend", "  s.tr('a-z', 'A-Z').reverse.tr('A-Z',\
    \ 'a-z')\nend", "  letters = s.scan(/[a-zA-Z]/)\n  numbers = s.scan(/[0-9]/)\n\
    \  reversed_letters = letters.map { |l| l == l.upcase ? l.downcase : l.upcase\
    \ }\n  if letters.empty?\n    s.reverse\n  else\n    reversed_letters.join(\"\"\
    ) + numbers.join(\"\")\n  end\nend", "  return s.reverse unless s.match(/[a-zA-Z]/)\n\
    \  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend\nputs \"\
    Solution of 'solve' = #{solve('ab')}\"", "    letters = s.chars.select { |ch|\
    \ ('a'..'z').include?(ch) || ('A'..'Z').include?(ch) }\n    return s.reverse if\
    \ letters.empty?\n    s.gsub(/[a-zA-Z]/) { |letter| letter.upcase == letter ?\
    \ letter.downcase : letter.upcase }\nend", "  s.reverse.gsub(/[a-z]/i) { |letter|\
    \ letter == letter.upcase ? letter.downcase : letter.upcase }\nend", "  s.chars.map{|c|\
    \ c =~ /[a-z]/ ? c.upcase : c.downcase}.join\nend", "  #..\n  return s.reverse\
    \ unless s =~ /[a-zA-Z]/\n  s.chars.map { |char| char.match(/[a-zA-Z]/) ? char.swapcase\
    \ : char }.join\nend", "  #your code here\n  string = s.chars\n  string.each do\
    \ |x|\n    if x =~ /[a-z]/ \n      string[string.index(x)] = x.upcase\n    elsif\
    \ x =~ /[A-Z]/\n      string[string.index(x)] = x.downcase\n    end\n  end\n \
    \ string.join(\"\")\nend", "  if s.gsub(/[a-zA-Z]/, '').length == s.length\n \
    \   s.reverse\n  else\n    s.split('').map { |x| x.gsub(/[a-zA-Z]/, x == x.downcase\
    \ ? x.upcase : x.downcase) }.join('')\n  end\nend", "  str=\"\"\n  if s.match(/[a-zA-Z]/)\
    \ == nil\n    return s.reverse\n  else\n    s.chars.each do |x|\n      if x.match(/[a-zA-Z]/)\
    \ != nil\n        str << x.swapcase\n      else\n        str << x\n      end\n\
    \    end\n  end\n  return str\nend", "  s.swapcase\nend", "  if s.match(/[a-zA-Z]/)\n\
    \    s.swapcase\n  else\n    s.reverse\n  end\nend", "    s.reverse.gsub(/\\w/,\
    \ &:swapcase)\nend", "    count_letters = 0\n    s.chars.map do |char|\n     \
    \   if char.ord > 96 && char.ord < 123\n            count_letters += 1\n     \
    \       char.upcase\n        elsif char.ord > 64 && char.ord < 91\n          \
    \  count_letters += 1\n            char.downcase\n        else\n            char\n\
    \        end\n    end.join(\"\").reverse\nend\nputs solve(\"1234\") == \"4321\"\
    \nputs solve(\"ab\") == \"AB\"\nputs solve(\"#a@C\") == \"#A@c\"", "    char_array\
    \ = s.split(\"\")\n    reverse_char_array = []\n    char_array.each do |char|\n\
    \        if (/[a-zA-Z]/ =~ char)\n            reverse_char_array << char.swapcase\n\
    \        else\n            reverse_char_array << char\n        end\n    end\n\
    \    reverse_char_array.join\nend", "  if s.chars.any? { |char| ('a'..'z').include?(char)\
    \ || ('A'..'Z').include?(char) }\n    s.chars.map { |char| ('a'..'z').include?(char)\
    \ ? char.upcase : char.downcase }.join\n  else\n    s.reverse\n  end\nend", " \
    \ s.gsub(/\\w/, &:swapcase)\nend", "  s.scan(/[a-zA-Z]/).empty? ? s.reverse :\
    \ s.tr('a-zA-Z', 'A-Za-z')\nend", "    s.tr('a-zA-Z', 'A-Za-z').reverse\nend",
  "  s.reverse.split('').map do |char|\n    if char == char.upcase\n      char.downcase\n\
    \    elsif char == char.downcase\n      char.upcase\n    else\n      char\n  \
    \  end\n  end.join('')\nend", "  letters = ('a'..'z').to_a\n  s.reverse.chars.map\
    \ { |c| letters.include?(c.downcase) ? c.swapcase : c }.join\nend", "  s.chars.map\
    \ { |i| ('a'..'z').include?(i) ? i.upcase : i.downcase }.join\nend", "    reversed\
    \ = s.reverse\n    count = 0\n    is_letter = false\n    if (s.size == 0)\n  \
    \      return s\n    end\n    while count < s.size\n        if (/[a-zA-Z]/.match(s[count]))\n\
    \            is_letter = true\n            break\n        end\n        count +=\
    \ 1\n    end\n    if (is_letter)\n        s.size.times do |i|\n            if\
    \ (/[a-z]/.match(s[i]))\n                reversed[i] = reversed[i].upcase\n  \
    \          elsif (/[A-Z]/.match(s[i]))\n                reversed[i] = reversed[i].downcase\n\
    \            end\n        end\n    end\n    return reversed\nend", "  if s.empty?\n\
    \    \"\"\n  else\n    s.chars.map{|c| c =~ /[a-z]/ ? c.upcase : c.downcase}.join\n\
    \  end\nend", "  s.gsub(/[a-z]|[A-Z]/, 'a' => 'A', 'A' => 'a', 'b' => 'B', 'B'\
    \ => 'b', 'c' => 'C', 'C' => 'c', 'd' => 'D', 'D' => 'd', 'e' => 'E', 'E' => 'e',\
    \ 'f' => 'F', 'F' => 'f', 'g' => 'G', 'G' => 'g', 'h' => 'H', 'H' => 'h', 'i'\
    \ => 'I', 'I' => 'i', 'j' => 'J', 'J' => 'j', 'k' => 'K', 'K' => 'k', 'l' => 'L',\
    \ 'L' => 'l', 'm' => 'M', 'M' => 'm', 'n' => 'N', 'N' => 'n', 'o' => 'O', 'O'\
    \ => 'o', 'p' => 'P', 'P' => 'p', 'q' => 'Q', 'Q' => 'q', 'r' => 'R', 'R' => 'r',\
    \ 's' => 'S', 'S' => 's', 't' => 'T', 'T' => 't', 'u' => 'U', 'U' => 'u', 'v'\
    \ => 'V', 'V' => 'v', 'w' => 'W', 'W' => 'w', 'x' => 'X', 'X' => 'x', 'y' => 'Y',\
    \ 'Y' => 'y', 'z' => 'Z', 'Z' => 'z')\nend", "  if s.match(/[a-zA-Z]/)\n    s.swapcase\n\
    \  else\n    s.reverse\n  end\nend", "  str_arr = s.split('')\n  upper_case =\
    \ str_arr.select { |char| char.match(/[A-Z]/) }\n  lower_case = str_arr.select\
    \ { |char| char.match(/[a-z]/) }\n  reversed_str = \"\"\n  upper_case.each do\
    \ |char|\n    reversed_str << char.downcase\n  end\n  lower_case.each do |char|\n\
    \    reversed_str << char.upcase\n  end\n  reversed_str.reverse\nend", "  if s.gsub(/[^a-zA-Z]/,\
    \ '').length == 0\n    return s.reverse\n  else\n    return s.swapcase\n  end\n\
    end", "  s.swapcase! if s =~ /[a-zA-Z]/\n  s.reverse\nend", "  if s.count(\"a-zA-Z\"\
    ) == 0\n    return s.reverse\n  end\n  arr = s.split(\"\")\n  res = []\n  arr.each\
    \ do |i|\n    if i =~ /[a-zA-Z]/\n      if i == i.upcase\n        res << i.downcase\n\
    \      else\n        res << i.upcase\n      end\n    else\n      res << i\n  \
    \  end\n  end\n  res.join(\"\")\nend\nputs solve(\"1234\")\nputs solve(\"ab\"\
    )\nputs solve(\"#a@C\")", "  # your code\n  letters = ('a'..'z').to_a\n  letters.concat(('A'..'Z').to_a)\n\
    \  rev = \"\"\n  if s.split(\"\").all? {|char| !letters.include?(char)}\n    s.reverse\n\
    \  else\n    s.each_char do |char|\n      if letters.include?(char)\n        rev\
    \ << char.swapcase\n      else\n        rev << char\n      end\n    end\n    rev\n\
    \  end\nend", "    output = \"\"\n    s.each_char do |c|\n        if ('a'..'z').cover?(c)\n\
    \            output += c.upcase\n        elsif ('A'..'Z').cover?(c)\n        \
    \    output += c.downcase\n        else\n            output += c\n        end\n\
    \    end\n    if output.match(/[a-zA-Z]/)\n        output\n    else\n        output.reverse\n\
    \    end\nend", "  #..\n  if s.scan(/[a-zA-Z]/).empty?\n    return s.reverse\n\
    \  else\n    return s.tr(\"a-zA-Z\", \"A-Za-z\")\n  end\nend", "  if (str = s.scan(/[a-zA-Z]/)).length\
    \ > 0\n    str.reverse.join\n  else\n    s.reverse\n  end\nend", "  if s.match(/\\\
    d/)\n    return s.reverse\n  else\n    return s.split(\"\").map do |x|\n     \
    \ if (\"a\"..\"z\").include?(x)\n        x.upcase\n      elsif (\"A\"..\"Z\").include?(x)\n\
    \        x.downcase\n      else\n        x\n      end\n    end.join(\"\")\n  end\n\
    end", "  if s.scan(/[a-zA-Z]/).empty?\n    s.reverse\n  else\n    s.chars.map\
    \ { |c| c[/[a-zA-Z]/] ? c.swapcase : c }.join\n  end\nend", "  s.chars.each do\
    \ |c|\n    if (\"a\"..\"z\").include?(c) || (\"A\"..\"Z\").include?(c)\n     \
    \ if c == c.upcase\n        c.downcase!\n      else\n        c.upcase!\n     \
    \ end\n    end\n  end\n  s.reverse\nend", "  s.tr('A-Za-z', 'a-zA-Z').reverse\n\
    end", "  s.swapcase\nend", "    s.tr('a-zA-Z', 'A-Za-z').reverse\nend", "  only_chars\
    \ = s.chars.select { |c| c =~ /[a-zA-Z]/ }\n  only_chars.size == 0 ? s.reverse\
    \ : s.tr('a-zA-Z', 'A-Za-z')\nend", "  s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z'\
    \ => 'a-z')\nend", "  #your code here\nend", "  s.gsub(/[a-z]/i, \"\").empty?\
    \ ? s.reverse : s.swapcase\nend", "  !(s =~ /[a-zA-Z]/) ? s.reverse : s.swapcase\n\
    end", "\tif s.match?(/[a-zA-Z]/)\n\t\ts.swapcase!\n\telse\n\t\ts.reverse!\n\t\
    end\nend", "  return s.reverse if s.tr('a-zA-Z', '') == s\n  s.swapcase\nend",
  "  s = s.chars.map{|c| ('a'..'z').include?(c) ? c.upcase : ('A'..'Z').include?(c)\
    \ ? c.downcase : c}.join\n  s = s.reverse if s.scan(/\\p{Alpha}/).empty?\n  s\n\
    end", "  s.gsub(/[a-z]/, 'a' => 'A', 'b' => 'B', 'c' => 'C', 'd' => 'D', 'e' =>\
    \ 'E', 'f' => 'F', 'g' => 'G', 'h' => 'H', 'i' => 'I', 'j' => 'J', 'k' => 'K',\
    \ 'l' => 'L', 'm' => 'M', 'n' => 'N', 'o' => 'O', 'p' => 'P', 'q' => 'Q', 'r'\
    \ => 'R', 's' => 'S', 't' => 'T', 'u' => 'U', 'v' => 'V', 'w' => 'W', 'x' => 'X',\
    \ 'y' => 'Y', 'z' => 'Z')\n  .gsub(/[A-Z]/, 'A' => 'a', 'B' => 'b', 'C' => 'c',\
    \ 'D' => 'd', 'E' => 'e', 'F' => 'f', 'G' => 'g', 'H' => 'h', 'I' => 'i', 'J'\
    \ => 'j', 'K' => 'k', 'L' => 'l', 'M' => 'm', 'N' => 'n', 'O' => 'o', 'P' => 'p',\
    \ 'Q' => 'q', 'R' => 'r', 'S' => 's', 'T' => 't', 'U' => 'u', 'V' => 'v', 'W'\
    \ => 'w', 'X' => 'x', 'Y' => 'y', 'Z' => 'z')\nend", "  #..\n  if s.include?(\"\
    [a-zA-Z]\")\n    s.gsub(/[a-zA-Z]/) { |i| i.upcase == i ? i.downcase : i.upcase\
    \ }\n  else\n    s.reverse\n  end\nend", "    str = []\n    for i in 0..s.length\
    \ - 1\n        if s[i] =~ /[A-Za-z]/\n            if s[i] == s[i].upcase\n   \
    \             str << s[i].downcase\n            else\n                str << s[i].upcase\n\
    \            end\n        else\n            str << s[i]\n        end\n    end\n\
    \    str.join\nend", "  s == s.reverse ? s.reverse : s.gsub(/[a-zA-Z]/, 'a'=>'A',\
    \ 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I',\
    \ 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q',\
    \ 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y',\
    \ 'z'=>'Z', 'A'=>'a', 'B'=>'b', 'C'=>'c', 'D'=>'d', 'E'=>'e', 'F'=>'f', 'G'=>'g',\
    \ 'H'=>'h', 'I'=>'i', 'J'=>'j', 'K'=>'k', 'L'=>'l', 'M'=>'m', 'N'=>'n', 'O'=>'o',\
    \ 'P'=>'p', 'Q'=>'q', 'R'=>'r', 'S'=>'s', 'T'=>'t', 'U'=>'u', 'V'=>'v', 'W'=>'w',\
    \ 'X'=>'x', 'Y'=>'y', 'Z'=>'z')\nend", "  if s.length > 0 \n    s.gsub(/[a-zA-Z]/,\
    \ \"abCDEFghIJKLMNopqRSTUVWXYz\" [0..25])\n  else\n    s.reverse\n  end\nend",
  "  s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z' => 'a-z')\nend", "  s.tr(\"a-zA-Z\", \"\
    A-Za-z\").reverse\nend", "  s.tr(\"a-zA-Z\", \"A-Za-z\").reverse\nend", "  s =\
    \ s.chars.map { |x| x =~ /[a-z]/ ? x.upcase : x =~ /[A-Z]/ ? x.downcase : x }.join\n\
    \  s.chars.any? { |x| x =~ /[a-z]/i } ? s : s.reverse\nend", "  (s.chars.map {\
    \ |c| c[/[a-z]/] ? c.swapcase : c }.join).reverse\nend", "  s.gsub(/[a-z]/i) {\
    \ |x| x.swapcase }.reverse\nend", "  # solution 1\n  # str = ''\n  # s.each_char\
    \ do |char|\n  #   if char =~ /[a-zA-Z]/\n  #     char.downcase == char ? str\
    \ << char.upcase : str << char.downcase\n  #   else\n  #     str << char\n  #\
    \   end\n  # end\n  # str.reverse\n  \n  # solution 2\n  s.reverse.tr('a-zA-Z',\
    \ 'A-Za-z')\nend", "  return s.reverse if s.scan(/[a-zA-Z]/).empty?\n  s.gsub(/[a-zA-Z]/)\
    \ { |m| m == m.upcase ? m.downcase : m.upcase }\nend", "    s.chars.map{|x| x\
    \ =~ /[a-z]/ ? x.upcase : x.downcase}.join\nend", "\treturn s.reverse if s[/[a-zA-Z]/].nil?\n\
    \t\n\ts.gsub(/[a-zA-Z]/) { |l| l == l.upcase ? l.downcase : l.upcase }\nend",
  "  if s.length > 0\n    if s[0].match?(/[a-zA-Z]/)\n      s[0] = s[0].upcase\n \
    \   else\n      return s.reverse\n    end\n    s.length > 1 ? s[1..-1] = s[1..-1].downcase\
    \ : nil\n  else\n    return s.reverse\n  end\n  s\nend", "  s.chars.map { |char|\
    \ char.ord.between?(65, 90) ? char.downcase : char.upcase }.join(\"\")\nend\n\
    p solve(\"1234\") # = \"4321\"\np solve(\"ab\") # = \"AB\"\np solve(\"#a@C\")\
    \ # = \"#A@c\"", "\treturn s.swapcase if s.gsub(/[a-zA-Z]/, '').length == s.length\n\
    \ts.gsub(/[a-zA-Z]/, 'x').split('').map{|c| c == 'x' ? s[s.index(c)].swapcase\
    \ : c}.join('')\nend\nputs solve(\"#a@C\") # \"#A@c\"", "    s.chars.map { |c|\
    \ c.match(/[a-z]/i) ? c.swapcase : c }.join\nend", "    arr = []\n    s.split(\"\
    \").each do |x|\n        arr << x.swapcase\n    end\n    arr.join(\"\")\nend",
  "  #s.tr('a-z', 'A-Z')\n  s.tr('a-zA-Z', 'A-Za-z')\nend", "  s.gsub(/[a-z]/i, &:swapcase)\n\
    end", "   new_string = []\n   s.each_char do |char|\n    if ('a'..'z').include?(char)\n\
    \      new_string << char.upcase\n    elsif ('A'..'Z').include?(char)\n      new_string\
    \ << char.downcase\n    else\n      new_string << char\n    end\n  end\n  if s\
    \ == new_string.join\n    new_string.reverse.join\n  else\n    new_string.join\n\
    \  end\nend", "  s.chars.map{|x| x.match(/[a-z]/i) ? x.upcase != x ? x.upcase\
    \ : x.downcase : x}.join\nend", "  str = \"\"\n  s.each_char do |char|\n    if\
    \ char.match(/[a-zA-Z]/)\n      str << char.swapcase\n    else\n      str << char\n\
    \    end\n  end\n  str\nend", "  chars = s.chars\n  reversed = []\n  chars.each\
    \ do |char|\n    if char == char.downcase\n      reversed << char.upcase\n   \
    \ elsif char == char.upcase\n      reversed << char.downcase\n    else\n     \
    \ reversed << char\n    end\n  end\n  reversed.join(\"\")\nend", "  s.gsub(/[a-z]/i,\
    \ 'a-z' => 'A-Z', 'A-Z' => 'a-z')\nend", "  s =~ /[a-zA-Z]/ ? s.swapcase : s.reverse\n\
    end", "    s.tr('a-zA-Z', 'A-Za-z').reverse\nend", "  res = []\n  split = s.split('')\n\
    \  split.each do |letter|\n    if letter == letter.upcase\n      res << letter.downcase\n\
    \    elsif letter == letter.downcase\n      res << letter.upcase\n    else\n \
    \     res << letter\n    end\n  end\n  res.join('')\nend\np solve(\"ab\")", " \
    \ if s.count(\"a-zA-Z\") == 0\n    s.reverse\n  else\n    s.split(\"\").map{|char|\
    \ char =~ /[a-zA-Z]/ ? char.swapcase : char}.join(\"\")\n  end\nend", "  return\
    \ s.reverse if s.match(/[a-zA-Z]/).nil?\n  s.chars.map{|x| x.match(/[a-zA-Z]/)\
    \ ? x.upcase == x ? x.downcase : x.upcase : x}.join\nend", "  return s.reverse\
    \ if s.gsub(/[a-zA-Z]/, '').length == s.length\n  s.split('').map { |c| ('a'..'z').include?(c)\
    \ ? c.upcase : ('A'..'Z').include?(c) ? c.downcase : c }.join('')\nend", "  s\
    \ = s.split(\"\")\n  if s.all? {|char| char =~ /[^a-zA-Z]/}\n    s.reverse.join\n\
    \  else\n    s.map do |char|\n      if char =~ /[a-z]/\n        char.upcase\n\
    \      elsif char =~ /[A-Z]/\n        char.downcase\n      else\n        char\n\
    \      end\n    end.join\n  end\nend", "    s.split(\"\").map { |x| x.match(/[a-zA-Z]/)\
    \ ? x.swapcase : x}.join\nend", "  s.reverse!\n  s.gsub!(/[a-z]/, 'a' => 'A',\
    \ 'b' => 'B', 'c' => 'C', 'd' => 'D', 'e' => 'E', 'f' => 'F', 'g' => 'G', 'h'\
    \ => 'H', 'i' => 'I', 'j' => 'J', 'k' => 'K', 'l' => 'L', 'm' => 'M', 'n' => 'N',\
    \ 'o' => 'O', 'p' => 'P', 'q' => 'Q', 'r' => 'R', 's' => 'S', 't' => 'T', 'u'\
    \ => 'U', 'v' => 'V', 'w' => 'W', 'x' => 'X', 'y' => 'Y', 'z' => 'Z')\n  s.gsub!(/[A-Z]/,\
    \ 'A' => 'a', 'B' => 'b', 'C' => 'c', 'D' => 'd', 'E' => 'e', 'F' => 'f', 'G'\
    \ => 'g', 'H' => 'h', 'I' => 'i', 'J' => 'j', 'K' => 'k', 'L' => 'l', 'M' => 'm',\
    \ 'N' => 'n', 'O' => 'o', 'P' => 'p', 'Q' => 'q', 'R' => 'r', 'S' => 's', 'T'\
    \ => 't', 'U' => 'u', 'V' => 'v', 'W' => 'w', 'X' => 'x', 'Y' => 'y', 'Z' => 'z')\n\
    \  s\nend", "  if s.scan(/[a-zA-Z]/).length == 0\n    return s.reverse\n  else\n\
    \    s.split(\"\").map{|i| /[a-zA-Z]/.match(i) ? i == i.upcase ? i.downcase :\
    \ i.upcase : i}.join(\"\")\n  end\nend", "  s.tr('a-z', 'A-Z').reverse\nend",
  "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join('')\nend", "  #your\
    \ code here\nend", "  return s.reverse unless /[a-zA-Z]/.match(s)\n  s.split('').map{|c|\
    \ c.match(/[a-zA-Z]/) ? c.swapcase : c}.join('')\nend\np solve(\"mY-mAn\")", " \
    \ if s.scan(/[a-zA-Z]/).empty?\n    s.reverse\n  else\n    s.gsub(/[a-zA-Z]/)\
    \ { |letter| letter == letter.upcase ? letter.downcase : letter.upcase }\n  end\n\
    end", "  s == s.reverse\nend", "  s.chars.map { |char| (char =~ /[a-z]/i) ? char.swapcase\
    \ : char }.join\nend", "  return s.reverse if s.gsub(/[A-Za-z]/, '').length ==\
    \ s.length\n  s.chars.map { |x| x.downcase == x ? x.upcase : x.downcase }.join('')\n\
    end", "  s.reverse.tr(\"a-z\", \"A-Z\").tr(\"A-Z\", \"a-z\")\nend", "  s.swapcase!\
    \ if s[/[a-zA-Z]/]\n  s.reverse\nend", "  #your code here\n  if s.match(/[a-zA-Z]/)\n\
    \    s.split(\"\").map {|x| x.match(/[a-zA-Z]/) ? x.swapcase : x}.join(\"\")\n\
    \  else\n    s.reverse\n  end\nend", "    #..\n    if s.empty?\n        return\
    \ s\n    end\n    s=s.reverse\n    s=s.chars.map{|x|if (x=~/[a-z]/)==0 then x.upcase\
    \ else x.downcase end}.join(\"\")\n    return s\nend", "  s.chars.map{|x| x =~\
    \ /[a-z]/ ? x.swapcase : x}.join\nend", "  s = s.split(\"\")\n  s.map! do |char|\n\
    \    if char =~ /[a-z]/i\n      char == char.upcase ? char.downcase : char.upcase\n\
    \    else\n      char\n    end\n  end\n  s.join(\"\")\nend", "  s.reverse.split(\"\
    \").map { |x| x.match(/[a-zA-Z]/) ? x.swapcase : x }.join(\"\")\nend", "  alpha_indexes\
    \ = []\n  s.split('').each_with_index do |x, i|\n    alpha_indexes << i if x.match(/[a-zA-Z]/)\n\
    \  end\n  alpha_indexes.each do |i|\n    s[i] = s[i].swapcase\n  end\n  return\
    \ s.reverse if alpha_indexes.empty?\n  s\nend", "    s.gsub(/\\w/, &:swapcase)\n\
    end", "    n = ''\n    (0...s.length).each do |i|\n        if s[i] == s[i].upcase\n\
    \            n << s[i].downcase\n        elsif s[i] == s[i].downcase\n       \
    \     n << s[i].upcase\n        else\n            n << s[i]\n        end\n   \
    \ end\n    n\nend", "    res = []\n    s.split(\"\").each do |l|\n        res\
    \ << l.swapcase\n    end\n    res.join\nend\nputs solve(\"ab\")\nputs solve(\"\
    #a@C\")", "  #two cases\n  #not letters at all => reverse\n  #letters? reverse\
    \ cases\n  s.chars.inject([]) {|arr, c| arr << c.match(/[a-zA-Z]/) ? c.upcase\
    \ == c ? c.downcase : c.upcase : c}.join\nend", "  if s.empty?\n    s.reverse\n\
    \  else\n    s.split(\"\").map{|letter| letter.match(/[a-zA-Z]/) ? letter.swapcase\
    \ : letter}.join\n  end\nend", "  s.reverse.tr(\"A-Za-z\", \"a-zA-Z\")\nend",
  "  if s.match(/[a-zA-Z]/) == nil\n    s.reverse\n  else\n    s.swapcase\n  end\n\
    end", "    arr = s.split(\"\")\n    arr.each_with_index do |x, i|\n        if\
    \ x.ord >= 97 and x.ord <= 122\n            arr[i] = x.upcase\n        elsif x.ord\
    \ >= 65 and x.ord <= 90\n            arr[i] = x.downcase\n        end\n    end\n\
    \    s = arr.join(\"\")\n    if s.match(/[a-zA-Z]/)\n        s\n    else\n   \
    \     s.reverse\n    end\nend", "  reverse_str = \"\"\n  s.each_char do |char|\n\
    \    if char.match(/[a-zA-Z]/)\n      reverse_str += char.swapcase\n    else\n\
    \      reverse_str += char\n    end\n  end\n  reverse_str\nend", "  letters =\
    \ (0..9).to_a + ('a'..'z').to_a + ('A'..'Z').to_a\n  result = []\n  s.split('').each\
    \ do |char|\n    if letters.include?(char)\n      if char == char.upcase\n   \
    \     result << char.downcase\n      else\n        result << char.upcase\n   \
    \   end\n    else\n      result << char\n    end\n  end\n  result.join\nend",
  "  num_letters = ('a'..'z').to_a.concat(('A'..'Z').to_a)\n  return s.reverse if\
    \ s.split('').select{|n|num_letters.include?(n)}.empty?\n  s.split('').map do\
    \ |i|\n    if num_letters.include?(i)\n      i == i.upcase ? i.downcase : i.upcase\n\
    \    else\n      i\n    end\n  end.join('')\nend", "  # your code\n  chars = s.split('')\n\
    \  chars.each_with_index do |char, index|\n    chars[index] = char.upcase! ||\
    \ char.downcase! if char =~ /[a-zA-Z]/\n  end\n  chars.reverse.join\nend", " \
    \ s.gsub(/[a-z]/i) { |letter| letter == letter.upcase ? letter.downcase : letter.upcase\
    \ }.reverse\nend", "    case s.chars.all? { |c| !(\"a\"..\"z\").include?(c) }\n\
    \        when true\n            s.reverse\n        when false\n            s.chars.map\
    \ { |c| c.ord.between?(65, 90) ? c.downcase : c.upcase }.join(\"\")\n    end\n\
    end", "\t# write your code here\nend", "  p = ('a'..'z').to_a\n  q = ('A'..'Z').to_a\n\
    \  rev = []\n  if s.chars.all? {|x| p.include?(x) || q.include?(x)}\n    s.chars.each\
    \ do |i|\n      if p.include?(i)\n        rev << i.upcase\n      else\n      \
    \  rev << i.downcase\n      end\n    end\n    return rev.join('')\n  elsif s.chars.all?\
    \ {|x| p.include?(x) == false && q.include?(x) == false}\n    return s.reverse\n\
    \  end\nend", "    newString = \"\"\n    count = 0\n    if !s.chars.any? {|x|\
    \ (\"a\"..\"z\").include?(x)}\n        newString = s.reverse\n    else\n     \
    \   for i in 0..s.length - 1\n            if !s[i].match(/[a-z]/)\n          \
    \      newString = newString + s[i]\n            else\n                count =\
    \ 1\n                newString = newString + s[i].swapcase\n            end\n\
    \        end\n    end\n    if count == 0\n        newString = newString.reverse\n\
    \    end\n    return newString\nend", "    s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z'\
    \ => 'a-z')\nend", "  if s.match?(/[a-zA-Z]/)\n    s.swapcase\n  else\n    s.reverse\n\
    \  end\nend", "  s.reverse.gsub(/./) { |c| ('a'..'z').cover?(c) ? c.upcase : c.downcase\
    \ }\nend", "  if s.count(\"a-zA-Z\") == 0\n    s.reverse\n  else\n    s.chars.map{|c|\
    \ c =~ /[a-z]/ ? c.upcase : c.downcase}.join\n  end\nend", "  s.reverse.gsub(/\\\
    w/) { |x| x == x.upcase ? x.downcase : x.upcase }\nend\nputs solve(\"#a@C\")",
  "    a = s.split(\"\")\n    if a.any?{|x| x =~ /[a-zA-Z]/}\n        b = a.map do\
    \ |x|\n            if x =~ /[a-z]/\n                x.upcase\n            elsif\
    \ x =~ /[A-Z]/\n                x.downcase\n            else\n               \
    \ x\n            end\n        end\n        return b.join(\"\")\n    else\n   \
    \     return s.reverse\n    end\nend", "  new_str = \"\"\n  s.each_char do |c|\n\
    \    if c =~ /[[:alpha:]]/\n      new_str << c.swapcase\n    else\n      new_str\
    \ << c\n    end\n  end\n  new_str.reverse\nend", "    s.gsub(/[a-z]|[A-Z]/, 'a'=>'A',\
    \ 'A'=>'a', 'b'=>'B', 'B'=>'b', 'c'=>'C', 'C'=>'c', 'd'=>'D', 'D'=>'d', 'e'=>'E',\
    \ 'E'=>'e', 'f'=>'F', 'F'=>'f', 'g'=>'G', 'G'=>'g', 'h'=>'H', 'H'=>'h', 'i'=>'I',\
    \ 'I'=>'i', 'j'=>'J', 'J'=>'j', 'k'=>'K', 'K'=>'k', 'l'=>'L', 'L'=>'l', 'm'=>'M',\
    \ 'M'=>'m', 'n'=>'N', 'N'=>'n', 'o'=>'O', 'O'=>'o', 'p'=>'P', 'P'=>'p', 'q'=>'Q',\
    \ 'Q'=>'q', 'r'=>'R', 'R'=>'r', 's'=>'S', 'S'=>'s', 't'=>'T', 'T'=>'t', 'u'=>'U',\
    \ 'U'=>'u', 'v'=>'V', 'V'=>'v', 'w'=>'W', 'W'=>'w', 'x'=>'X', 'X'=>'x', 'y'=>'Y',\
    \ 'Y'=>'y', 'z'=>'Z', 'Z'=>'z')\nend", "  s.swapcase\nend", "  s.chars.map{|x|\
    \ ('a'..'z').include?(x) ? x.upcase : ('A'..'Z').include?(x) ? x.downcase : x}.join\n\
    end", "  if s.gsub(/[^a-zA-Z]/, '').empty?\n    s.reverse\n  else\n    s.reverse!.chars.map\
    \ do |char|\n      if char =~ /[a-zA-Z]/\n        char == char.upcase ? char.downcase\
    \ : char.upcase\n      else\n        char\n      end\n    end.join\n  end\nend",
  "    if s.count(\"a-zA-Z\") == 0\n        s.reverse\n    else\n        answer =\
    \ \"\"\n        s.each_char do |char|\n            if char =~ /[[:alpha:]]/\n\
    \                char.match(/[[:upper:]]/) ? answer += char.downcase : answer\
    \ += char.upcase\n            else\n                answer += char\n         \
    \   end\n        end\n        answer\n    end\nend", "    s.chars.map { |c| c\
    \ =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "    s.chars.map { |letter|\
    \ letter.swapcase }.join\nend", "  ans = \"\"\n  s.each_char do |ch|\n    ans\
    \ += ch.swapcase!\n  end\n  ans\nend", "    # 1. Solution\n    # s.gsub(/[a-z]/,\
    \ &:swapcase)\n    \n    # 2. Solution\n    # s.gsub(/[a-z]/, '\\0'.swapcase)\n\
    \    \n    # 3. Solution\n    # s.tr(\"a-z\", \"A-Z\").reverse.tr(\"a-z\", \"\
    A-Z\").reverse\n    \n    # 4. Solution\n    # s.gsub(/[a-z]/i, &:swapcase)\n\
    \    \n    # 5. Solution\n    # s.swapcase\nend", "  s.gsub(/[a-z]/i, {'a'=>'A',\
    \ 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I',\
    \ 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q',\
    \ 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y',\
    \ 'z'=>'Z', 'A'=>'a', 'B'=>'b', 'C'=>'c', 'D'=>'d', 'E'=>'e', 'F'=>'f', 'G'=>'g',\
    \ 'H'=>'h', 'I'=>'i', 'J'=>'j', 'K'=>'k', 'L'=>'l', 'M'=>'m', 'N'=>'n', 'O'=>'o',\
    \ 'P'=>'p', 'Q'=>'q', 'R'=>'r', 'S'=>'s', 'T'=>'t', 'U'=>'u', 'V'=>'v', 'W'=>'w',\
    \ 'X'=>'x', 'Y'=>'y', 'Z'=>'z'})\nend", "  s.chars.reverse.map { |c| c =~ /[a-z]/\
    \ ? c.upcase : c.downcase }.join\nend", "  letters = s.scan(/[a-zA-Z]/)\n  if\
    \ letters.empty?\n    s.reverse\n  else\n    new_s = \"\"\n    s.each_char do\
    \ |char|\n      if /[a-zA-Z]/.match(char)\n        if char == char.upcase\n  \
    \        new_s << char.downcase\n        else\n          new_s << char.upcase\n\
    \        end\n      else\n        new_s << char\n      end\n    end\n    new_s\n\
    \  end\nend", "\tputs s.chars.reverse_each.each_with_index.map { |c,i| i.even?\
    \ ? c.swapcase : c}.join\nend", "    s.reverse.gsub(/[a-z]/i, &:swapcase)\nend",
  "    s.chars.map{|c| c.count(\"a-zA-Z\")==1 ? c.swapcase : c}.join\nend", "  s.gsub(/[a-z]/i,\
    \ 'a-z' => 'A-Z', 'A-Z' => 'a-z')\nend", "  s.chars.each_with_object('') do |c,\
    \ r|\n    c =~ /[a-z]/ ? r << c.swapcase : r << c\n  end.reverse\nend", "\t(0...s.length).each\
    \ do |i|\n\t\tif s[i] =~ /[[:alpha:]]/\n\t\t\ts[i] = (s[i] == s[i].upcase ? s[i].downcase\
    \ : s[i].upcase)\n\t\tend\n\tend\n\ts.length > 0 ? s : s.reverse\nend", "  str\
    \ = s.scan(/\\w/).join\n  str.empty? ? s.reverse : str.swapcase\nend", "  reversed\
    \ = s.reverse\n  new_str = \"\"\n  s.length.times do |i|\n    if s[i] == s[i].upcase\n\
    \      new_str << reversed[i].downcase\n    elsif s[i] == s[i].downcase\n    \
    \  new_str << reversed[i].upcase\n    else\n      new_str << reversed[i]\n   \
    \ end\n  end\n  if s == s.downcase || s == s.upcase\n    new_str\n  else\n   \
    \ s\n  end\nend", "  s.reverse.tr(\"a-zA-Z\", \"A-Za-z\")\nend", "    s.reverse.gsub(/[a-z]/,\
    \ &:upcase).gsub(/[A-Z]/, &:downcase)\nend", "    letters = s.scan(/[a-zA-Z]/)\n\
    \    letters.each do |letter|\n        # if s.include?(letter) == true\n     \
    \   s = s.gsub(letter, letter.swapcase)\n        end\n    s.reverse!\nend", " \
    \ s = s.reverse\n  a = \"\"\n  if s.match(/[a-zA-Z]/)\n    s.each_char do |i|\n\
    \      if i.match(/[a-z]/)\n        a += i.upcase\n      elsif i.match(/[A-Z]/)\n\
    \        a += i.downcase\n      else\n        a += i\n      end\n    end\n  else\n\
    \    a = s\n  end\n  a\nend", "  return s.reverse if s[/[a-zA-Z]/].nil?\n  s.chars.map\
    \ { |c| c =~ /[a-zA-Z]/ ? c == c.upcase ? c.downcase : c.upcase : c }.join\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
