name: HumanEval_157_right_angle_triangle
language: rb
prompt: "# Given the lengths of the three sides of a triangle. Return True if the\
  \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n#\
  \ Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2,\
  \ 3) == False\ndef right_angle_triangle(a, b, c)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
  \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
  \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
  \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
  \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
  \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
  \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
  \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
  \ 2, 10))\n  end\nend\n"
completions: ["  a, b, c = [a, b, c].sort\n  c**2 == a**2 + b**2\nend", "  angle =\
    \ [a, b, c].sort\n  angle[0]**2 + angle[1]**2 == angle[2]**2\nend", "  arr = [a,\
    \ b, c].sort\n  arr[0]**2 + arr[1]**2 == arr[2]**2\nend", "  (a**2 + b**2 == c**2)\
    \ or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2)\nend", "  \nend", "  max =\
    \ [a, b, c].max\n  min = [a, b, c].min\n  hypotenuse = [a, b, c].delete_if { |x|\
    \ x == max || x == min }[0]\n  if hypotenuse ** 2 == max ** 2 + min ** 2\n   \
    \ return true\n  else\n    return false\n  end\nend", "  return true if a**2 +\
    \ b**2 == c**2\n  return true if a**2 + c**2 == b**2\n  return true if b**2 +\
    \ c**2 == a**2\n  false\nend", "  # your code goes here\nend", "  ## If a > b,\
    \ b > c, and a^2 + b^2 = c^2, then it is a right triangle\n  if (a > b) && (b\
    \ > c) && ((a ** 2) + (b ** 2) == (c ** 2))\n    return true\n  else\n    return\
    \ false\n  end\nend", "  return true if (a ** 2) + (b ** 2) == (c ** 2)\n  return\
    \ true if (a ** 2) + (c ** 2) == (b ** 2)\n  return true if (b ** 2) + (c ** 2)\
    \ == (a ** 2)\n  false\nend", "  return c**2 == a**2 + b**2 if c > a && c > b\n\
    \  return a**2 == b**2 + c**2 if a > b && a > c\n  return b**2 == a**2 + c**2\
    \ if b > a && b > c\nend\nputs right_angle_triangle(3, 4, 5)\nputs right_angle_triangle(1,\
    \ 2, 3)", "  # Your code here\nend", "  angle = [a, b, c].sort\n  angle[0]**2\
    \ + angle[1]**2 == angle[2]**2\nend", "  a, b, c = [a, b, c].sort\n  (a**2 + b**2)\
    \ == c**2\nend", "  sides = [a, b, c].sort\n  sides[0]**2 + sides[1]**2 == sides[2]**2\n\
    end", "  longest_side = [a, b, c].max\n  return false if longest_side == a &&\
    \ a > b + c\n  return false if longest_side == b && b > a + c\n  return false\
    \ if longest_side == c && c > a + b\n  true\nend", "  x, y, z = [a, b, c].sort\n\
    \  x**2 + y**2 == z**2\nend", "  x, y, z = [a, b, c].sort\n  x**2 + y**2 == z**2\n\
    end", "  \nend", "  return true if a**2 + b**2 == c**2\n  return true if a**2\
    \ + c**2 == b**2\n  return true if b**2 + c**2 == a**2\n  false\nend", "  ary\
    \ = [a, b, c].sort\n  ary[0]**2 + ary[1]**2 == ary[2]**2\nend", "  return a**2\
    \ + b**2 == c**2\nend", "  a, b, c = [a, b, c].sort\n  # If a triangle is right\
    \ angle triangle\n  # then a^2 + b^2 = c^2\n  # also a + b > c\n  # also a, b,\
    \ c are positive. \n  return true if a > 0 && b > 0 && c > 0 && (a ** 2 + b **\
    \ 2 == c ** 2) && (a + b > c)\n  false\nend", "  a2 = a * a\n  b2 = b * b\n  c2\
    \ = c * c\n  if a2 + b2 == c2 || a2 + c2 == b2 || b2 + c2 == a2\n    return true\n\
    \  else\n    return false\n  end\nend", "  if a**2 + b**2 == c**2\n    return\
    \ true\n  elsif a**2 + c**2 == b**2\n    return true\n  elsif b**2 + c**2 == a**2\n\
    \    return true\n  else\n    return false\n  end\nend", "    # TODO: implement\n\
    \    c_squared = c**2\n    a_squared = a**2\n    b_squared = b**2\n    if a_squared\
    \ + b_squared == c_squared\n      return true\n    elsif b_squared + c_squared\
    \ == a_squared\n      return true\n    elsif a_squared + c_squared == b_squared\n\
    \      return true\n    else\n      return false\n    end\nend", "  if [a, b,\
    \ c].permutation.to_a.any? { |x, y, z| y**2 + z**2 == x**2 }\n    true\n  else\n\
    \    false\n  end\nend", "  (a ** 2 + b ** 2 == c ** 2) || (a ** 2 + c ** 2 ==\
    \ b ** 2) || (b ** 2 + c ** 2 == a ** 2)\nend", "  arr = [a, b, c].sort\n  max\
    \ = arr.last\n  sum = arr.inject(:+) - max\n  max * max == sum * sum\nend", " \
    \ # Remember, that each side must be smaller than the sum of other two\n  # and\
    \ greater than the difference of other two.\n  # And, the longest side is always\
    \ opposite to right angle.\n  # Let the longest side be c. Then, a^2 + b^2 = c^2\n\
    \  a, b, c = [a, b, c].sort\n  return a**2 + b**2 == c**2\nend", "\tif a**2 +\
    \ b**2 == c**2 \n\t\treturn true\n\telsif a**2 + c**2 == b**2\n\t\treturn true\n\
    \telsif b**2 + c**2 == a**2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\n\
    end", "  if a == Math.sqrt(b**2 + c**2) || b == Math.sqrt(a**2 + c**2) || c ==\
    \ Math.sqrt(a**2 + b**2)\n    true\n  else\n    false\n  end\nend", "  hyp = []\n\
    \  cat = []\n  [a, b, c].sort!\n  hyp << a\n  hyp << b\n  cat << c\n  if hyp[0]**2\
    \ + hyp[1]**2 == cat[0]**2\n    return true\n  else\n    return false\n  end\n\
    end", "  # Your code here\nend", "  [(a**2), (b**2), (c**2)].sort == [(a - b),\
    \ (b - c), (c - a)].map { |side| side**2 }.sort\nend", "  return true if c**2\
    \ == a**2 + b**2\n  return true if a**2 == b**2 + c**2\n  return true if b**2\
    \ == a**2 + c**2\n  false\nend", '  hypotenuse, leg1, leg2 = [a, b, c].sort',
  "    true if (a*a)+(b*b) == (c*c)\nend", "  # Your code here\nend", "  # Your code\
    \ here\nend", "  # only needed because of example test\n  return false if a +\
    \ b <= c\n  return false if a + c <= b\n  return false if b + c <= a\n  (a **\
    \ 2) + (b ** 2) == (c ** 2)\nend", "  a*a + b*b == c*c\nend", "  sorted = [a,\
    \ b, c].sort\n  sorted[0]**2 + sorted[1]**2 == sorted[2]**2\nend", "  # Your code\
    \ here\nend", "    return a**2 + b**2 == c**2\nend", "  angles = [a, b, c].map\
    \ { |v| v ** 2 }.sort\n  angles[0] + angles[1] == angles[2]\nend", "  # YOUR CODE\
    \ HERE\nend", "  x, y, z = [a, b, c].sort\n  z**2 == x**2 + y**2\nend", "  a**2\
    \ + b**2 == c**2\nend", "    # Your code goes here.\nend", "  a, b, c = [a, b,\
    \ c].sort\n  return false if c > a + b\n  (a**2 + b**2) == c**2\nend", "  max\
    \ = [a, b, c].max\n  return (a**2 + b**2 == c**2) || (a**2 + c**2 == b**2) ||\
    \ (b**2 + c**2 == a**2)\nend", "    if a.to_f ** 2 + b.to_f ** 2 == c.to_f **\
    \ 2\n        return true\n    else\n        return false\n    end\nend", "  if\
    \ a**2 + b**2 == c**2\n    return true\n  elsif b**2 + c**2 == a**2\n    return\
    \ true\n  elsif c**2 + a**2 == b**2\n    return true\n  else\n    return false\n\
    \  end\nend", "  # Write your code here\nend", "  (a**2 + b**2 == c**2) || (a**2\
    \ + c**2 == b**2) || (b**2 + c**2 == a**2)\nend", "  arr = [a, b, c].sort\n  arr[0]**2\
    \ + arr[1]**2 == arr[2]**2\nend", "  # do your magic here\nend", "  # Complete\
    \ the code here\nend", "  a2 = a * a\n  b2 = b * b\n  c2 = c * c\n  if a2 + b2\
    \ == c2 || a2 + c2 == b2 || b2 + c2 == a2\n    return true\n  else\n    return\
    \ false\n  end\nend", "  \n  if a**2 + b**2 == c**2\n    return true\n  elsif\
    \ a**2 + c**2 == b**2\n    return true\n  elsif b**2 + c**2 == a**2\n    return\
    \ true\n  else\n    return false\n  end\nend", "  arr = [a, b, c].sort\n  (arr[0]\
    \ ** 2) + (arr[1] ** 2) == (arr[2] ** 2)\nend", "    if a > b && a > c\n     \
    \ hypotenuse = a\n      opposite = b\n      adjacent = c\n    elsif b > a && b\
    \ > c\n      hypotenuse = b\n      opposite = a\n      adjacent = c\n    else\n\
    \      hypotenuse = c\n      opposite = a\n      adjacent = b\n    end\n    Math.hypot(opposite,\
    \ adjacent) == hypotenuse\nend", "  sides = [a, b, c].sort\n  sides[0]**2 + sides[1]**2\
    \ == sides[2]**2\nend", "    if (a * a + b * b == c * c) || (a * a + c * c ==\
    \ b * b) || (b * b + c * c == a * a)\n        return true\n    else\n        return\
    \ false\n    end\nend", "  \nend", "  # TODO: complete it\nend", "  squares =\
    \ [a**2, b**2, c**2]\n  squares.sort!\n  squares[0] + squares[1] == squares[2]\n\
    end", "  # Write your code here\nend", "  list = [a, b, c].sort\n  if (a**2 +\
    \ b**2 == c**2)\n    true\n  else\n    false\n  end\nend", "  # write your code\
    \ here\nend", "  if a ** 2 + b ** 2 == c ** 2 || a ** 2 + c ** 2 == b ** 2 ||\
    \ b ** 2 + c ** 2 == a ** 2\n    return true\n  else\n    return false\n  end\n\
    end", "    puts \"The following 3 lengths (#{a}, #{b}, #{c}) form a right angle\
    \ triangle: #{((a**2) + (b**2)) == (c**2)}\"\nend", "    if a == 0 or b == 0 or\
    \ c == 0\n        return false\n    end\n    arr = [a, b, c].sort\n    if arr[0]\
    \ ** 2 + arr[1] ** 2 == arr[2] ** 2\n        return true\n    else\n        return\
    \ false\n    end\nend", "  if a > b && a > c\n    return b**2 + c**2 == a**2\n\
    \  elsif b > a && b > c\n    return a**2 + c**2 == b**2\n  else\n    return a**2\
    \ + b**2 == c**2\n  end\nend", "  # puts a, b, c\n  if a > b && a > c\n    # puts\
    \ \"a > b & c\"\n    if (a**2) == (b**2) + (c**2)\n      return true\n    else\n\
    \      return false\n    end\n  elsif b > a && b > c\n    # puts \"b > a & c\"\
    \n    if (b**2) == (a**2) + (c**2)\n      return true\n    else\n      return\
    \ false\n    end\n  elsif c > a && c > b\n    # puts \"c > a & b\"\n    if (c**2)\
    \ == (a**2) + (b**2)\n      return true\n    else\n      return false\n    end\n\
    \  else\n    return false\n  end\nend", "  [a, b, c].max == a**2 + b**2 + c**2\
    \ - [a, b, c].max**2\nend\nputs \"--------------------\"\nputs right_angle_triangle(3,\
    \ 4, 5) == True\nputs right_angle_triangle(1, 2, 3) == False", "  list = [a, b,\
    \ c].sort\n  list[0]**2 + list[1]**2 == list[2]**2\nend", "  return false if a\
    \ == b || b == c || a == c\n  a_squared = a ** 2\n  b_squared = b ** 2\n  c_squared\
    \ = c ** 2\n  c_squared == a_squared + b_squared || a_squared == b_squared + c_squared\
    \ || b_squared == a_squared + c_squared\nend", "  array = [a, b, c].sort\n  array[0]**2\
    \ + array[1]**2 == array[2]**2\nend", "  return (a**2 + b**2 == c**2) || (a**2\
    \ + c**2 == b**2) || (b**2 + c**2 == a**2)\nend", "\ta**2 + b**2 == c**2\nend",
  "  # your code here\nend", "  return [a, b, c].sort[2] ** 2 == [a, b, c].sort[0]\
    \ ** 2 + [a, b, c].sort[1] ** 2\nend", "  sides = [a, b, c].sort\n  return sides[0]**2\
    \ + sides[1]**2 == sides[2]**2\nend", "  a2 = a * a\n  b2 = b * b\n  c2 = c *\
    \ c\n  if a2 == b2 + c2\n    return true\n  elsif b2 == a2 + c2\n    return true\n\
    \  elsif c2 == a2 + b2\n    return true\n  else\n    return false\n  end\nend",
  "  if (a ** 2) + (b ** 2) == (c ** 2) || (b ** 2) + (c ** 2) == (a ** 2) || (c **\
    \ 2) + (a ** 2) == (b ** 2)\n    return true\n  else\n    return false\n  end\n\
    end", "    # write your code here\n    return true if a*a+b*b==c*c\n    return\
    \ true if a*a+c*c==b*b\n    return true if b*b+c*c==a*a\n    return false\nend\n\
    puts right_angle_triangle(1, 2, 3)\nputs right_angle_triangle(3, 4, 5)", "  #\
    \ yor code here\nend", "    return if a <= 0 || b <= 0 || c <= 0\n    aa = a**2\n\
    \    bb = b**2\n    cc = c**2\n    return aa + bb == cc || aa + cc == bb || bb\
    \ + cc == aa\nend", "  sides = [a, b, c].sort\n  sides[0]**2 + sides[1]**2 ==\
    \ sides[2]**2\nend", "  # the longest side squared equals the sum of the other\
    \ two squared\n  c**2 == a**2 + b**2\nend", "  # YOUR CODE HERE\nend", "  arr\
    \ = [a, b, c].sort\n  arr[0]**2 + arr[1]**2 == arr[2]**2\nend", "  # I suggest\
    \ you to use the each method to check out each side with the other ones\n  # if\
    \ one of the two combination is equal to the last one, it will be a right angle\
    \ triangle\n  sides = [a, b, c]\n  sides.each do |side|\n    if sides.max == side\n\
    \      if sides.max**2 == (sides.min**2 + sides.sort[1]**2)\n        return true\n\
    \      end\n    end\n  end\n  return false\nend", "  # your code here\nend", " \
    \ a_sq = a**2\n  b_sq = b**2\n  c_sq = c**2\n  # either the sum of the squares\
    \ of two sides will equal the square of the \n  # hypotenuse or the difference\
    \ between the two squares of the smaller sides\n  # will equal the square of the\
    \ largest side\n  (a_sq + b_sq == c_sq) || (a_sq - b_sq == c_sq) || (b_sq - a_sq\
    \ == c_sq)\nend", "    if a**2 == b**2 + c**2 || b**2 == a**2 + c**2 || c**2 ==\
    \ a**2 + b**2\n      return true\n    else\n      return false\n    end\nend\n\
    puts right_angle_triangle(3, 4, 5)\nputs right_angle_triangle(5, 4, 3)\nputs right_angle_triangle(6,\
    \ 8, 10)", "  ar = [a, b, c].sort\n  ar[0] ** 2 + ar[1] ** 2 == ar[2] ** 2\nend",
  "  if a == Math.sqrt(b**2 + c**2) || b == Math.sqrt(a**2 + c**2) || c == Math.sqrt(a**2\
    \ + b**2)\n    true\n  else\n    false\n  end\nend", "  a = a ** 2\n  b = b **\
    \ 2\n  c = c ** 2\n  if (a + b == c) || (a + c == b) || (b + c == a)\n    return\
    \ true\n  else\n    return false\n  end\nend", "  a = [a, b, c].sort\n  return\
    \ (a[0]**2 + a[1]**2) == a[2]**2\nend", "  if a > b && a > c\n    if a**2 == b**2\
    \ + c**2\n      return true\n    else\n      return false\n    end\n  elsif b\
    \ > a && b > c\n    if b**2 == a**2 + c**2\n      return true\n    else\n    \
    \  return false\n    end\n  elsif c > a && c > b\n    if c**2 == a**2 + b**2\n\
    \      return true\n    else\n      return false\n    end\n  end\nend", "  #your\
    \ code here\nend", "  angles = [a, b, c].sort\n  pythagorean_theorem(angles[0],\
    \ angles[1], angles[2])\nend", "  if (a ** 2 + b ** 2 == c ** 2) || (a ** 2 +\
    \ c ** 2 == b ** 2) || (b ** 2 + c ** 2 == a ** 2)\n    return true\n  else\n\
    \    return false\n  end\nend", "  #Your code here\nend", "  # Your code here\n\
    end", "  # Your code here\nend", "  array = [a, b, c].sort\n  if array[0] ** 2\
    \ + array[1] ** 2 == array[2] ** 2\n    return true\n  else\n    return false\n\
    \  end\nend", "  if a**2 + b**2 == c**2 || a**2 + c**2 == b**2 || b**2 + c**2\
    \ == a**2\n    return true\n  else\n    return false\n  end\nend", "  arr = [a,\
    \ b, c].sort\n  arr[0]**2 + arr[1]**2 == arr[2]**2\nend", "  # Your code here\n\
    end", "  if (a ** 2 + b ** 2 == c ** 2) || (a ** 2 + c ** 2 == b ** 2) || (b **\
    \ 2 + c ** 2 == a ** 2)\n    return true\n  else\n    return false\n  end\nend",
  "  # Write your code here\nend", "  max = [a, b, c].max\n  return (a**2 + b**2)\
    \ == (max**2)\nend", "    largest = [a, b, c].max\n    if largest == a\n     \
    \   largest == (b**2 + c**2)\n    elsif largest == b\n        largest == (a**2\
    \ + c**2)\n    else\n        largest == (a**2 + b**2)\n    end\nend", "  d = []\n\
    \  d.push(a)\n  d.push(b)\n  d.push(c)\n  d.sort!\n  if d[0]**2 + d[1]**2 == d[2]**2\n\
    \    return true\n  else\n    return false\n  end\nend", "  if (a ** 2) + (b **\
    \ 2) == (c ** 2) || (a ** 2) + (c ** 2) == (b ** 2) ||\n     (b ** 2) + (c **\
    \ 2) == (a ** 2)\n    return true\n  else\n    return false\n  end\nend", "  hypotenuse\
    \ = Math.hypot(a, b)\n  hypotenuse == c\nend", "  # Write your code here\nend",
  "  (a**2 + b**2 == c**2) || (a**2 + c**2 == b**2) || (b**2 + c**2 == a**2)\nend",
  "  arr = [a, b, c].sort!\n  x = arr[0]\n  y = arr[1]\n  z = arr[2]\n  return false\
    \ if z >= x + y || x == y || y == z\n  z ** 2 == x ** 2 + y ** 2\nend", "    #\
    \ Your code here\nend", "\tif a**2 + b**2 == c**2\n\t\ttrue\n\telse\n\t\tfalse\n\
    \tend\nend", "  if a == 0 || b == 0 || c == 0\n    return false\n  elsif a **\
    \ 2 + b ** 2 == c ** 2 || a ** 2 + c ** 2 == b ** 2 || b ** 2 + c ** 2 == a **\
    \ 2\n    return true\n  else\n    return false\n  end\nend", "  if a == b && a\
    \ == c\n    return true\n  elsif a**2 + b**2 == c**2\n    return true\n  elsif\
    \ a**2 + c**2 == b**2\n    return true\n  elsif b**2 + c**2 == a**2\n    return\
    \ true\n  else\n    return false\n  end\nend", " \nend", "  hypotenuse = [a, b,\
    \ c].max\n  other_side = [a, b, c].min\n  third_side = [a, b, c].sort[1]\n  hypotenuse\
    \ ** 2 == other_side ** 2 + third_side ** 2\nend", "  ary = [a, b, c].sort\n \
    \ ary[0]**2 + ary[1]**2 == ary[2]**2\nend", "  a, b, c = [a, b, c].sort\n  a**2\
    \ + b**2 == c**2\nend", "  c = a**2 + b**2\n  d = Math.sqrt(c)\n  e = d.to_i\n\
    \  f = d.to_f\n  if e == f\n    return true\n  else\n    return false\n  end\n\
    end\nputs right_angle_triangle(3, 4, 5)\nputs right_angle_triangle(1, 2, 3)",
  "  # See the hint here https://www.mathsisfun.com/pythagoras.html\n  return false\
    \ if a <= 0 || b <= 0 || c <= 0", "  c > a && c > b ? c**2 == a**2 + b**2 : a\
    \ > b && a > c ? a**2 == b**2 + c**2 : b**2 == a**2 + c**2\nend", "    ary = [a,\
    \ b, c].sort\n    ary[0]**2 + ary[1]**2 == ary[2]**2\nend", "  # Check if the\
    \ sum of the squared lengths of the two shorter sides is equal \n  # to the squared\
    \ length of the longest side.\n  (a**2 + b**2 == c**2) || (a**2 + c**2 == b**2)\
    \ || (b**2 + c**2 == a**2)\nend", "  if (a**2 + b**2 == c**2) || (a**2 + c**2\
    \ == b**2) || (b**2 + c**2 == a**2)\n    return true\n  else\n    return false\n\
    \  end\nend", "  if a**2 + b**2 == c**2\n    true\n  elsif a**2 + c**2 == b**2\n\
    \    true\n  elsif b**2 + c**2 == a**2\n    true\n  else\n    false\n  end\nend",
  "  sides = [a, b, c].sort\n  if sides[0]**2 + sides[1]**2 == sides[2]**2\n    return\
    \ true\n  else\n    return false\n  end\nend\nputs right_angle_triangle(3, 4,\
    \ 5)\nputs right_angle_triangle(1, 2, 3)", "  if [a, b, c].combination(2).map\
    \ { |x, y| x ** 2 + y ** 2 }.include?(c ** 2)\n    true\n  else\n    false\n \
    \ end\nend", "  a2 = a**2\n  b2 = b**2\n  c2 = c**2\n  if a2 + b2 == c2 || b2\
    \ + c2 == a2 || c2 + a2 == b2\n    return true\n  else\n    return false\n  end\n\
    end", "  if a > b && a > c\n    return b**2 + c**2 == a**2\n  elsif b > a && b\
    \ > c\n    return a**2 + c**2 == b**2\n  else\n    return a**2 + b**2 == c**2\n\
    \  end\nend", "  first = a**2 + b**2\n  second = b**2 + c**2\n  third = a**2 +\
    \ c**2\n  if first == c**2\n    return true\n  elsif second == a**2\n    return\
    \ true\n  elsif third == b**2\n    return true\n  else\n    return false\n  end\n\
    end", "  if a==0 || b==0 || c==0 then\n    return false\n  end\n  if a**2 == b**2\
    \ + c**2 then\n    return true\n  elsif b**2 == a**2 + c**2 then\n    return true\n\
    \  elsif c**2 == a**2 + b**2 then\n    return true\n  else\n    return false\n\
    \  end\nend", "  # Write your code here!\nend", "  array = [a, b, c].sort\n  array[0]**2\
    \ + array[1]**2 == array[2]**2\nend", "  if a > b && a > c && b**2 + c**2 == a**2\n\
    \    return true\n  elsif b > a && b > c && a**2 + c**2 == b**2\n    return true\n\
    \  elsif c > a && c > b && a**2 + b**2 == c**2\n    return true\n  else\n    return\
    \ false\n  end\nend", "  arr = [a, b, c].sort\n  return false if arr[0] <= 0\n\
    \  return true if arr[0] ** 2 + arr[1] ** 2 == arr[2] ** 2\n  false\nend", " \
    \ if a == Math.sqrt(b**2 + c**2) || b == Math.sqrt(a**2 + c**2) || c == Math.sqrt(a**2\
    \ + b**2)\n    return true\n  else\n    return false\n  end\nend", "  # Hint:\
    \ the Pythagorean Theorem is the sum of the squares of the two shorter\n  # sides\
    \ is equal to the square of the longest side\n  # i.e. a^2 + b^2 = c^2 where c\
    \ is the longest side and a and b are the shorter\n  # ones\n  # Hint: you will\
    \ need to use a comparison operator to compare values\n  # Fill in your solution\
    \ here\n  nums = [a, b, c].sort\n  (nums[0]**2 + nums[1]**2) == nums[2]**2\nend",
  "  # TODO\nend", "  if (a**2 + b**2 == c**2) || (a**2 + c**2 == b**2) || (b**2 +\
    \ c**2 == a**2)\n    true\n  else\n    false\n  end\nend", "  if a**2 == b**2\
    \ + c**2 || b**2 == a**2 + c**2 || c**2 == a**2 + b**2\n    return true\n  else\n\
    \    return false\n  end\nend", "  hyp = [a, b, c].max\n  s = [a, b, c].sort\n\
    \  s[0]**2 + s[1]**2 == hyp**2\nend", "\t# @TODO: write your program here!\n\t\
    # return true if a^2 + b^2 = c^2, else return false\n\t\n\tif (a**2 + b**2 ==\
    \ c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2)\n\t\treturn true\n\t\
    else\n\t\treturn false\n\tend\nend", "  arr = [a, b, c].sort\n  arr[0]**2 + arr[1]**2\
    \ == arr[2]**2\nend", '  array = [a, b, c].sort', "  array = [a, b, c].sort.reverse!\n\
    \  if array[2] ** 2 + array[1] ** 2 == array[0] ** 2\n    true\n  else\n    false\n\
    \  end\nend", "  #raise Exception, \"need to be implemented\"\n  # Does any side\
    \ have a negative length?\n  return false if a < 0 || b < 0 || c < 0\n  # Do all\
    \ sides have a length?\n  return false if a == 0 || b == 0 || c == 0\n  # Does\
    \ the triangle satisfy the Pythagorean theorem?\n  sides = [a, b, c].sort\n  sides[0]\
    \ ** 2 + sides[1] ** 2 == sides[2] ** 2\nend", "    # YOUR CODE HERE\nend", " \
    \ if a**2 + b**2 == c**2 || a**2 + c**2 == b**2 || b**2 + c**2 == a**2\n    return\
    \ true\n  else\n    return false\n  end\nend", "  arr = [a, b, c].sort\n  arr[0]**2\
    \ + arr[1]**2 == arr[2]**2\nend", "  if a == c\n    return false\n  elsif a*a\
    \ + b*b == c*c\n    return true\n  elsif a*a + c*c == b*b\n    return true\n \
    \ elsif b*b + c*c == a*a\n    return true\n  else\n    return false\n  end\nend",
  "  if a == b && b == c\n    return false\n  elsif a > b && a > c\n    return a**2\
    \ == b**2 + c**2\n  elsif b > a && b > c\n    return b**2 == a**2 + c**2\n  elsif\
    \ c > a && c > b\n    return c**2 == a**2 + b**2\n  end\nend", "  arr = [a, b,\
    \ c].sort\n  arr[0]**2 + arr[1]**2 == arr[2]**2\nend", end, "  if a > b && a >\
    \ c \n    return a**2 == b**2 + c**2\n  elsif b > a && b > c\n    return b**2\
    \ == a**2 + c**2\n  else\n    return c**2 == a**2 + b**2\n  end\nend", "  sides\
    \ = [a, b, c].sort\n  return sides[0]**2 + sides[1]**2 == sides[2]**2\nend", " \
    \   a, b, c = [a, b, c].sort!\n    c**2 == a**2 + b**2\nend", "  if (a**2) + (b**2)\
    \ == (c**2)\n    return true\n  elsif (b**2) + (c**2) == (a**2)\n    return true\n\
    \  elsif (c**2) + (a**2) == (b**2)\n    return true\n  else\n    return false\n\
    \  end\nend", "  s = [a, b, c].sort\n  if s[0] ** 2 + s[1] ** 2 == s[2] ** 2\n\
    \    return true\n  else\n    return false\n  end\nend\nputs right_angle_triangle(3,\
    \ 4, 5)\nputs right_angle_triangle(1, 2, 3)", "    # Write your code here\n  \
    \  return nil\nend", "  # For the triangle abc to be a right-angled triangle,\
    \ square of the longest\n  # side (Hypotenuse) must be equal to the sum of the\
    \ squares of the remaining\n  # two sides.\n  # Reference: https://en.wikipedia.org/wiki/Pythagorean_theorem#Formula_using_triangle_sides\n\
    \  if (c > a && c > b)\n    ((c**2) == (a**2 + b**2)) ? true : false\n  elsif\
    \ (b > a && b > c)\n    ((b**2) == (a**2 + c**2)) ? true : false\n  elsif (a >\
    \ b && a > c)\n    ((a**2) == (b**2 + c**2)) ? true : false\n  end\nend", "  (a**2\
    \ + b**2 == c**2) || (a**2 + c**2 == b**2) || (b**2 + c**2 == a**2)\nend", " \
    \ if a > b && a > c\n    if a ** 2 == b ** 2 + c ** 2\n      return true\n   \
    \ else\n      return false\n    end\n  elsif b > a && b > c\n    if b ** 2 ==\
    \ a ** 2 + c ** 2\n      return true\n    else\n      return false\n    end\n\
    \  elsif c > a && c > b\n    if c ** 2 == a ** 2 + b ** 2\n      return true\n\
    \    else\n      return false\n    end\n  end\nend", "  [a, b, c].sort!\n  ([*a,\
    \ b, c] - [*a, b, c].sort).empty? && a**2 + b**2 == c**2\nend", "  max = a > b\
    \ ? a : b\n  max = max > c ? max : c\n  if (max * max == a * a + b * b + c * c\
    \ - max * max)\n    return true\n  else\n    return false\n  end\nend", "  # Unnecessary\
    \ to check all three potential right angles.\n  # Also, <code>max</code> is sufficient\
    \ (first or last will do, by convention)\n  hypotenuse = [a, b, c].max\n  non_hypotenuse\
    \ = [a, b, c].sort[0..1].inject(:+)\n  non_hypotenuse**2 == hypotenuse**2\nend",
  "  # YOUR CODE HERE\nend", "  a, b, c = [a, b, c].sort\n  return a**2 + b**2 ==\
    \ c**2\nend", "  a, b, c = [a, b, c].sort\n  a**2 + b**2 == c**2\nend\nputs right_angle_triangle(3,\
    \ 4, 5) == true\nputs right_angle_triangle(5, 4, 3) == true\nputs right_angle_triangle(3,\
    \ 5, 4) == true\nputs right_angle_triangle(1, 2, 3) == false\nputs right_angle_triangle(1,\
    \ 3, 2) == false\nputs right_angle_triangle(2, 1, 3) == false\nputs right_angle_triangle(2,\
    \ 3, 1) == false\nputs right_angle_triangle(3, 1, 2) == false\nputs right_angle_triangle(3,\
    \ 2, 1) == false", "  if a**2 + b**2 == c**2\n    true\n  elsif a**2 + c**2 ==\
    \ b**2\n    true\n  elsif b**2 + c**2 == a**2\n    true\n  else\n    false\n \
    \ end\nend", "  # Write your code here\nend", "  # Math.sqrt(a*a + b*b) == c ||\
    \ Math.sqrt(a*a + c*c) == b || Math.sqrt(b*b + c*c) == a\n  # Math.sqrt(a*a +\
    \ b*b) == c || Math.sqrt(a*a + c*c) == b || Math.sqrt(b*b + c*c) == a\n  [a, b,\
    \ c].max ** 2 == [a, b, c].min(2).map { |x| x ** 2 }.sum\nend\nputs right_angle_triangle(3,\
    \ 4, 5) == true\nputs right_angle_triangle(1, 2, 3) == false\nputs right_angle_triangle(10,\
    \ 18, 26) == true\nputs right_angle_triangle(6, 10, 12) == true\nputs right_angle_triangle(1,\
    \ 2, 3) == false\nputs right_angle_triangle(6, 6, 6) == false\nputs right_angle_triangle(6,\
    \ 10, 17) == false\nputs right_angle_triangle(1, 10, 14) == false\nputs right_angle_triangle(7,\
    \ 12, 12) == false\nputs right_angle_triangle(1, 1, 1) == false", "  max = [a,\
    \ b, c].max\n  hyp = max\n  side = [a, b, c].reject { |e| e == max }\n  right_angle_triangle\
    \ = hyp**2 == side[0]**2 + side[1]**2\n  return right_angle_triangle\nend", " \
    \ if a == Math.sqrt(b**2 + c**2) || b == Math.sqrt(a**2 + c**2) || c == Math.sqrt(a**2\
    \ + b**2)\n    return true\n  else\n    return false\n  end\nend", "    # If a\
    \ is smallest side, so must be c, the hypotenuse\n    if a > b && a > c\n    \
    \    # pythagorean theorem\n        ((b**2) + (c**2)) == (a**2)\n    # If b is\
    \ smallest side, so must be c, the hypotenuse\n    elsif b > a && b > c\n    \
    \    # pythagorean theorem\n        ((a**2) + (c**2)) == (b**2)\n    # Else, c\
    \ is smallest side, so must be a, the hypotenuse\n    else\n        # pythagorean\
    \ theorem\n        ((a**2) + (b**2)) == (c**2)\n    end\nend", "  # your code\
    \ here\nend", "  # a^2 + b^2 = c^2 => a, b, c form a right angle triangle\n  #\
    \ calling square root on the sum of squares of a, b is equivalent to \n  # squaring\
    \ c => O(1) constant time\n  # Math.sqrt(a**2 + b**2) == c\n  # squaring both\
    \ sides, we get\n  a**2 + b**2 == c**2\nend", "  # TODO: Return true if the three\
    \ sides form a right-angled triangle\n  if (a ** 2 + b ** 2 == c ** 2) || (b **\
    \ 2 + c ** 2 == a ** 2) || (a ** 2 + c ** 2 == b ** 2)\n  \treturn true\n  else\n\
    \  \treturn false\n  end\nend", end, "  a2 = a * a\n  b2 = b * b\n  c2 = c * c\n\
    \  if a2 + b2 == c2 or b2 + c2 == a2 or c2 + a2 == b2\n    return true\n  else\n\
    \    return false\n  end\nend", "  #Your code here!\nend", "  return false if\
    \ a + b <= c\n  return false if a + c <= b\n  return false if b + c <= a\n  x,\
    \ y, z = [a, b, c].sort\n  x ** 2 + y ** 2 == z ** 2\nend", "  if ((a**2 + b**2)\
    \ == c**2) || ((a**2 + c**2) == b**2) || ((b**2 + c**2) == a**2)\n    return true\n\
    \  else\n    return false\n  end\nend", "  return false if a == 0 || b == 0 ||\
    \ c == 0\n  hyp = Math.hypot(a, b).round(5)\n  hyp == c.round(5) || hyp == a.round(5)\
    \ || hyp == b.round(5)\nend", "  if a > b && a > c\n    if a**2 == b**2 + c**2\n\
    \      true\n    else\n      false\n    end\n  elsif b > a && b > c\n    if b**2\
    \ == a**2 + c**2\n      true\n    else\n      false\n    end\n  elsif c > a &&\
    \ c > b\n    if c**2 == a**2 + b**2\n      true\n    else\n      false\n    end\n\
    \  end\nend", "  sides = [a, b, c].sort\n  sides[0]**2 + sides[1]**2 == sides[2]**2\n\
    end", "  [a, b, c].combination(2).to_a.map { |x, y| x**2 + y**2 }.include?(c**2)\n\
    end", "  ary = [a, b, c].sort\n  return true if ary[0]**2 + ary[1]**2 == ary[2]**2\n\
    \  false\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
