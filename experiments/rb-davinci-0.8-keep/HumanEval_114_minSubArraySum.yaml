name: HumanEval_114_minSubArraySum
language: rb
prompt: "# Given an array of integers nums, find the minimum sum of any non-empty\
  \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
  # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_minSubArraySum\n\
  \    candidate = method(:minSubArraySum)\n    assert_equal(1, candidate.call([2,\
  \ 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1, -2, -3]))\n    assert_equal(-14,\
  \ candidate.call([-1, -2, -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
  \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
  \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
  \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n\
  \    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10,\
  \ candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n    assert_equal(-1,\
  \ candidate.call([1, -1]))\n  end\nend\n"
completions: ["  curr_sum = nums[0]\n  min_sum = nums[0]", "  min_sum = Float::INFINITY\n\
    \  curr_sum = 0\n  nums.each do |num|\n    curr_sum += num\n    min_sum = curr_sum\
    \ if curr_sum < min_sum\n    curr_sum = 0 if curr_sum < 0\n  end\n  min_sum\n\
    end", "  min_sum = 0\n  current_sum = 0\n  if nums.min < 0\n    min_sum = nums.min\n\
    \  end\n  nums.each do |num|\n    current_sum += num\n    if current_sum < min_sum\n\
    \      min_sum = current_sum\n    end\n    if current_sum > 0\n      current_sum\
    \ = 0\n    end\n  end\n  min_sum\nend", "  min_sum = Float::INFINITY\n  current_sum\
    \ = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum = current_sum\
    \ if current_sum < min_sum\n    current_sum = 0 if current_sum < 0\n  end\n  min_sum\n\
    end", "    minSum = nil\n    for i in 0..nums.length - 1\n        for j in i..nums.length\
    \ - 1\n            subArray = nums[i..j]\n            sum = subArray.inject(:+)\n\
    \            if minSum == nil || sum < minSum\n                minSum = sum\n\
    \            end\n        end\n    end\n    return minSum\nend\nputs minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) #== 1\nputs minSubArraySum([-1, -2, -3]) #== -6", "    min_sum\
    \ = nil\n    sum = 0\n    nums.each do |num|\n        sum += num\n        if !min_sum\
    \ || sum < min_sum\n            min_sum = sum\n        end\n        if sum < 0\n\
    \            sum = 0\n        end\n    end\n    min_sum\nend", "    minSum = nums[0]\n\
    \    currSum = 0\n    \n    nums.each do |num|\n        currSum += num\n     \
    \   minSum = currSum if currSum < minSum\n        currSum = 0 if currSum < 0\n\
    \    end\n    \n    minSum\nend", "    s = nums.length\n    t = 0\n    e = 0\n\
    \    min = nums[0]\n    sum = 0\n    while e < s do\n        sum += nums[e]\n\
    \        e += 1\n        if sum < min\n            min = sum\n        end\n  \
    \      if sum > 0\n            sum = 0\n            t = e\n        end\n    end\n\
    \    return min\nend", "    min = nums[0]\n    sum = nums[0]\n    for i in 1...nums.length\n\
    \        if sum > 0\n            sum = nums[i]\n        else\n            sum\
    \ += nums[i]\n        end\n        min = sum if sum < min\n    end\n    min\n\
    end", "  max_sum = nums.min\n  nums.each_with_index do |num, idx|\n    sum = num\n\
    \    max_sum = sum if sum > max_sum\n    idx += 1\n    while idx < nums.length\n\
    \      sum += nums[idx]\n      max_sum = sum if sum > max_sum\n      idx += 1\n\
    \    end\n  end\n  max_sum\nend", "  min_sum = Array.new(nums.length, 0)\n  min_sum[0]\
    \ = nums[0]\n  for i in 1...nums.length\n    min_sum[i] = [min_sum[i - 1] + nums[i],\
    \ nums[i]].min\n  end\n  min_sum.min\nend", '  return nums.reduce(:+) if nums.length
    == 1', "  return nums.min if nums.length == 1\n  return 0 if nums.length == 0\n\
    \  min = nums[0]\n  i = 0\n  while i < nums.length\n    j = i\n    while j < nums.length\n\
    \      sum = nums[i..j].reduce(:+)\n      min = sum if sum < min\n      j += 1\n\
    \    end\n    i += 1\n  end\n  min\nend", "    min_sum = nums[0]\n    nums.each_with_index\
    \ do |num, i|\n        sum = num\n        (i+1...nums.length).each do |j|\n  \
    \          sum += nums[j]\n            min_sum = sum if sum < min_sum\n      \
    \  end\n    end\n    min_sum\nend\nputs minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\nputs minSubArraySum([-1, -2, -3]) == -6\nputs minSubArraySum([-1, 2, -3])\
    \ == -1\nputs minSubArraySum([1, 2, 3]) == 1", "  new_arr = []\n  if nums.length\
    \ == 1\n    nums[0]\n  else\n    for i in 0..nums.length - 1\n      for j in i..nums.length\
    \ - 1\n        new_arr << nums[i..j]\n      end\n    end\n    new_arr.map { |arr|\
    \ arr.sum }.min\n  end\nend", "  min_sum = nil\n  sum = 0\n  curr_start = 0\n\
    \  while curr_start < nums.length\n    sum = 0\n    curr_end = curr_start\n  \
    \  while curr_end < nums.length\n      sum += nums[curr_end]\n      min_sum =\
    \ sum if min_sum.nil? || sum < min_sum\n      curr_end += 1\n    end\n    curr_start\
    \ += 1\n  end\n  min_sum\nend", "  return 0 if nums.empty?\n  min_sum = nums[0]\n\
    \  sum = 0\n  nums.each do |num|\n    sum += num\n    min_sum = sum if sum < min_sum\n\
    \    sum = 0 if sum < 0\n  end\n  min_sum\nend", "  return nums.min if nums.length\
    \ == 1\n  return 0 if nums.length == 0\n  small_sum = nums[0]", "  # TODO\nend",
  "  min = nil\n  sum = 0\n  nums.each_with_index do |num, i|\n    sum += num\n  \
    \  if min.nil? || sum < min\n      min = sum\n    end\n    nums[i + 1..-1].each\
    \ do |num2|\n      sum += num2\n      if sum < min\n        min = sum\n      end\n\
    \    end\n    sum = 0\n  end\n  min\nend", '  return if nums.empty?', "  counter\
    \ = 0\n  total = []\n  while counter < nums.length\n    i = counter\n    while\
    \ i < nums.length\n      total << nums[counter..i].reduce(:+)\n      i += 1\n\
    \    end\n    counter += 1\n  end\n  total.min\nend", "  min_sum = nil\n  max_sum\
    \ = 0\n  current_sum = 0\n  nums.each do |n|\n    current_sum += n\n    if current_sum\
    \ < max_sum\n      max_sum = current_sum\n    end\n    if min_sum.nil? || min_sum\
    \ > current_sum\n      min_sum = current_sum\n    end\n  end\n  min_sum - max_sum\n\
    end", "    min_sum = nums[0]\n    current_sum = 0\n    nums.each_with_index do\
    \ |num, i|\n        current_sum += num\n        if current_sum < min_sum\n   \
    \         min_sum = current_sum\n        end\n        if current_sum > 0\n   \
    \         current_sum = 0\n        end\n    end\n    min_sum\nend", "  min = nums[0]\n\
    \  sum = nums[0]\n  n = nums.length\n  n.times do |i|\n    sum = nums[i]\n   \
    \ min = sum if sum < min\n    (i + 1).upto(n - 1) do |j|\n      sum += nums[j]\n\
    \      min = sum if sum < min\n    end\n  end\n  min\nend", "    # Used Kadane's\
    \ Algorithm\n    # Set first max value to -Infinity because if the max\n    #\
    \ value is at 0 then we cannot subtract from it.\n    max_value = -Float::INFINITY\n\
    \    # Set current_sum to 0 for comparison purposes\n    current_sum = 0\n   \
    \ nums.each do |element|\n        # Add current element to the current sum.\n\
    \        current_sum += element\n        # Compare current sum to max value.\n\
    \        max_value = [max_value, current_sum].max\n        # If current sum goes\
    \ below 0 then reset current sum to 0\n        # This is the key to the algorithm.\
    \ If we have the sub array\n        # [1, -2, 3, -4] then current sum should go\
    \ to zero since \n        # the negative element is greater than the sum.\n  \
    \      current_sum = 0 if current_sum < 0\n    end\n    max_value\nend", "   \
    \ min_sum = nums[0]\n    nums.each_with_index do |num, i|\n        curr_sum =\
    \ num\n        j = i + 1\n        while j < nums.length\n            curr_sum\
    \ += nums[j]\n            if curr_sum < min_sum\n                min_sum = curr_sum\n\
    \            end\n            j += 1\n        end\n    end\n    min_sum\nend",
  "  min = Float::INFINITY\n  i = 0\n  j = 0\n  current_sum = 0\n  while i < nums.length\n\
    \    current_sum += nums[i]\n    min = current_sum if current_sum < min\n    if\
    \ current_sum > 0\n      current_sum = 0\n      j = i + 1\n    end\n    i += 1\n\
    \  end\n  min\nend", "  nums.min(nums.size) { |a, b| nums[a..b].sum }.sum\nend",
  "  min_sum = nums[0]\n  current_sum = 0\n  nums.each do |n|\n    current_sum +=\
    \ n\n    min_sum = current_sum if current_sum < min_sum\n    current_sum = 0 if\
    \ current_sum < 0\n  end\n  min_sum\nend", "  min_sum = nums[0]\n  current_sum\
    \ = 0\n  nums.each do |n|\n    current_sum += n\n    min_sum = current_sum if\
    \ current_sum < min_sum\n    current_sum = 0 if current_sum < 0\n  end\n  min_sum\n\
    end", "  min = nums[0]\n  sum = nums[0]\n  nums[1..-1].each do |num|\n    sum\
    \ += num\n    min = sum if sum < min\n    sum = num if sum < num\n  end\n  min\n\
    end", "  # brute force double loop solution\n  # min = nums.inject(:+)\n  # nums.each_with_index\
    \ do |val, i|\n  #   nums.each_with_index do |j, k|\n  #     if k > i\n  #   \
    \    if (nums[i..k].inject(:+) < min)\n  #         min = nums[i..k].inject(:+)\n\
    \  #       end\n  #     end\n  #   end\n  # end\n  # min", "  min_sum = nums[0]\n\
    \  current_sum = nums[0]\n  (1...nums.length).each do |i|\n    current_sum = [nums[i],\
    \ current_sum + nums[i]].min\n    min_sum = [min_sum, current_sum].min\n  end\n\
    \  min_sum\nend", "  min = Float::INFINITY\n  sum = 0\n  nums.each do |num|\n\
    \    sum += num\n    min = sum if sum < min\n    sum = 0 if sum < 0\n  end\n \
    \ min\nend", "  min = Float::INFINITY\n  sum = 0\n  nums.each do |n|\n    sum\
    \ += n\n    min = sum if sum < min\n    sum = 0 if sum < 0\n  end\n  min\nend",
  "  min_sum = 0\n  i = 0\n  j = 0\n  sum = 0\n  loop do\n    j += 1\n    break if\
    \ j > nums.length\n    sum += nums[j - 1]\n    if sum < min_sum\n      min_sum\
    \ = sum\n    end\n    if j == nums.length\n      i += 1\n      j = i\n      sum\
    \ = 0\n    end\n  end\n  return min_sum\nend\nputs minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 1\nputs minSubArraySum([-1, -2, -3]) == -6", "  min_sum = Float::INFINITY\n\
    \  return 0 if nums.length == 0\n  curr_sum = 0\n  nums.each do |n|\n    curr_sum\
    \ += n\n    min_sum = curr_sum if curr_sum < min_sum\n    curr_sum = 0 if curr_sum\
    \ < 0\n  end\n  min_sum\nend", "  min_sum = nums[0]\n  start = 0\n  current_sum\
    \ = 0\n  nums.each_with_index do |num, idx|\n    if num < min_sum\n      min_sum\
    \ = num\n    end\n    current_sum += num\n    if current_sum < min_sum\n     \
    \ min_sum = current_sum\n    end\n    # if current_sum < 0\n    #   current_sum\
    \ = 0\n    #   start = idx + 1\n    # end\n  end\n  min_sum\nend", "  # provide\
    \ your solution here!\nend", "  min_sum = nil\n  nums.each_with_index do |num,\
    \ idx|\n    (idx...nums.length).each do |idx2|\n      sub_array = nums[idx..idx2]\n\
    \      sum = sub_array.reduce(:+)\n      min_sum = sum if !min_sum || sum < min_sum\n\
    \    end\n  end\n  min_sum\nend", "    s = 0\n    min = nums[0]\n    j = 0\n \
    \   for i in (0...nums.length)\n        s += nums[i]\n        min = s if s < min\n\
    \        while s >= 0\n            s -= nums[j]\n            j += 1\n        end\n\
    \        min = s if s < min\n    end\n    min\nend", "  return nil if nums.empty?\n\
    \  return nums.min if nums.size == 1", "  # code here\nend", "  current_sum =\
    \ 0\n  min_sum = Float::INFINITY\n  return min_sum if nums.nil? || nums.empty?\n\
    \  nums.each do |num|\n    current_sum += num\n    if current_sum < min_sum\n\
    \      min_sum = current_sum\n    end\n    if current_sum > 0\n      current_sum\
    \ = 0\n    end\n  end\n  min_sum\nend", "  min_sum = nil\n  min_starting_idx =\
    \ nil\n  min_length = nil", "  current_sum = 0\n  min_sum = Float::INFINITY\n\
    \  nums.each do |num|\n    current_sum += num\n    min_sum = [min_sum, current_sum].min\n\
    \    current_sum = 0 if current_sum < 0\n  end\n  min_sum\nend", "  # add code\
    \ here\nend", "    # write your code here\n    return 0 if nums.empty?\n    min_sum\
    \ = nil\n    (0...nums.length).each do |i|\n        current_sum = 0\n        (i...nums.length).each\
    \ do |j|\n            current_sum += nums[j]\n            min_sum = current_sum\
    \ if min_sum.nil? || current_sum < min_sum\n        end\n    end\n    min_sum\n\
    end", "  new_array = []\n  i = 0\n  while i < nums.length\n    nums.each_with_index\
    \ do |n,idx|\n      if nums[idx] + nums[idx+1] < nums[idx] + nums[idx+2]\n   \
    \     new_array << nums[idx] + nums[idx+1]\n      else\n        new_array << nums[idx]\
    \ + nums[idx+2]\n      end\n    end\n    nums.shift\n    i += 1\n  end\n  new_array.min\n\
    end", "  min_sum = nil\n  (0...nums.length).each do |start|\n    sum = 0\n   \
    \ (start...nums.length).each do |stop|\n      sum += nums[stop]\n      min_sum\
    \ = sum if min_sum.nil? || sum < min_sum\n    end\n  end\n  min_sum\nend", " \
    \ min_sum = nums[0]\n  curr_sum = nums[0]\n  (1...nums.length).each do |i|\n \
    \   curr_sum = [nums[i], curr_sum + nums[i]].min\n    min_sum = [min_sum, curr_sum].min\n\
    \  end\n  min_sum\nend", "  # O(n*n)\n  # min = nums.reduce(:+)\n  # (0...nums.length).each\
    \ do |i|\n  #   (i...nums.length).each do |j|\n  #     min = nums[i..j].reduce(:+)\
    \ if nums[i..j].reduce(:+) < min\n  #   end\n  # end\n  # min", "  min = nums[0]\n\
    \  sum = 0\n  nums.each do |n|\n    sum += n\n    min = sum if sum < min\n   \
    \ sum = 0 if sum < 0\n  end\n  min\nend", "  min = Float::INFINITY\n  sum = 0\n\
    \  nums.each do |num|\n    sum += num\n    if sum < min\n      min = sum\n   \
    \ end\n    if sum > 0\n      sum = 0\n    end\n  end\n  min\nend", "    currentSum\
    \ = nums[0]\n    minSum = currentSum\n    for i in 1...nums.length\n        currentSum\
    \ = [nums[i], currentSum + nums[i]].min\n        minSum = [minSum, currentSum].min\n\
    \    end\n    minSum\nend", "    # we have to go through the entire array, so\
    \ a nested loop\n    # need to keep track of min subarray sum\n    min_sub_array_sum\
    \ = nums[0]\n    nums.each_with_index do |num, i|\n        # start at the end\
    \ of the array and keep looping backwards\n        # as long as j is greater than\
    \ or equal to 0\n        j = nums.length - 1\n        while j >= i\n         \
    \   temp_sub_array = nums[i..j]\n            sum = temp_sub_array.reduce(:+)\n\
    \            if sum < min_sub_array_sum\n                min_sub_array_sum = sum\n\
    \            end\n            j -= 1\n        end\n    end\n    min_sub_array_sum\n\
    end", "  # find minimum\n  nums.min\nend", "  min = nums[0]\n  current_sum = nums[0]\n\
    \  (1...nums.length).each do |i|\n    current_sum = [nums[i], current_sum + nums[i]].min\n\
    \    min = [min, current_sum].min\n  end\n  min\nend", "  min_sum = nums[0]\n\
    \  i = 0\n  j = 0\n  sum = 0\n  while j < nums.length\n    sum += nums[j]\n  \
    \  min_sum = sum if sum < min_sum\n    if sum < 0\n      i = j + 1\n      sum\
    \ = 0\n    end\n    j += 1\n  end\n  min_sum\nend", "\tmin_sum = nums[0]\n\tcurr_sum\
    \ = nums[0]\n\t(1...nums.length).each do |i|\n\t\tcurr_sum = [nums[i], curr_sum\
    \ + nums[i]].min\n\t\tmin_sum = [min_sum, curr_sum].min\n\tend\n\tmin_sum\nend",
  "  answer = nums.first\n  current_sum = 0\n  nums.each do |num|\n    current_sum\
    \ += num\n    answer = current_sum if current_sum < answer\n    current_sum =\
    \ 0 if current_sum < 0\n  end\n  answer\nend", "  min = nums[0]\n  sum = 0\n \
    \ nums.each do |num|\n    sum += num\n    min = sum if sum < min\n    sum = 0\
    \ if sum < 0\n  end\n  min\nend", "  sums = [nums[0]]\n  (1...nums.length).each\
    \ do |i|\n    sums[i] = sums[i - 1] + nums[i]\n  end\n  min = sums[-1]\n  (0...sums.length).each\
    \ do |i|\n    (i...sums.length).each do |j|\n      min = sums[j] - sums[i] + nums[i]\
    \ if min > sums[j] - sums[i] + nums[i]\n    end\n  end\n  min\nend", "    min_sum\
    \ = nums[0]\n    sum = 0\n    nums.each do |n|\n        sum += n\n        min_sum\
    \ = sum if sum < min_sum\n        sum = 0 if sum < 0\n    end\n    min_sum\nend",
  "  sum = nums[0]\n  min = nums[0]\n  for i in 1...nums.length\n    sum = [nums[i],\
    \ sum + nums[i]].min\n    min = [min, sum].min\n  end\n  min\nend", "    0\nend",
  "  n = nums.length\n  min_sum = nums[0]\n  curr_sum = 0\n  0.upto(n - 1) do |i|\n\
    \    curr_sum += nums[i]\n    min_sum = curr_sum if curr_sum < min_sum\n    curr_sum\
    \ = 0 if curr_sum > 0\n  end\n  min_sum\nend", "  min_sum = nums[0]\n  current_sum\
    \ = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum = current_sum\
    \ if current_sum < min_sum\n    current_sum = 0 if current_sum < 0\n  end\n  min_sum\n\
    end", "  cur_sum = res = nums[0]\n  nums[1..-1].each do |n|\n    cur_sum = [n,\
    \ cur_sum + n].min\n    res = [res, cur_sum].min\n  end\n  res\nend", "  min =\
    \ nums[0]\n  curr = 0\n  return min if nums.size == 1\n  nums.each do |num|\n\
    \    curr += num\n    min = curr if curr < min\n    curr = 0 if curr < 0\n  end\n\
    \  min\nend", "  smallest = Float::INFINITY\n  total = 0\n  start = 0\n  for i\
    \ in 0...nums.length\n    total += nums[i]\n    while total >= 0\n      smallest\
    \ = total if total < smallest\n      total -= nums[start]\n      start += 1\n\
    \    end\n  end\n  smallest\nend", "  arr = []\n  for i in 0..nums.length\n  \
    \  for j in i..nums.length\n      arr << nums[i..j]\n    end\n  end\n  p arr\n\
    \  min = arr[0].reduce(:+)\n  for i in 1..arr.length-1\n    sum = arr[i].reduce(:+)\n\
    \    min = sum if sum < min\n  end\n  min\nend", "  min_sum = nil\n  (0...nums.length).each\
    \ do |i|\n    sum = 0\n    (i...nums.length).each do |j|\n      sum += nums[j]\n\
    \      min_sum = sum if min_sum.nil? || sum < min_sum\n    end\n  end\n  min_sum\n\
    end", "  return 0 if nums.nil? || nums.length < 1\n  min_sum = nums[0]\n  sum\
    \ = nums[0]\n  (1...nums.length).each do |i|\n    sum = [nums[i], sum + nums[i]].min\n\
    \    min_sum = [min_sum, sum].min\n  end\n  min_sum\nend", "  # Write your code\
    \ here\n  min_sum = nums[0]\n  current_sum = nums[0]\n  1.upto(nums.length - 1)\
    \ do |i|\n    current_sum = [nums[i], current_sum + nums[i]].min\n    min_sum\
    \ = [min_sum, current_sum].min\n  end\n  min_sum\nend", "  min = nums[0]\n  sum\
    \ = 0\n  nums.each do |num|\n    sum += num\n    min = sum if sum < min\n    sum\
    \ = 0 if sum < 0\n  end\n  min\nend", "  return nums.first if nums.length == 1\n\
    \  min = nums.first\n  sum = nums.first\n  i = 1\n  while i < nums.length\n  \
    \  sum += nums[i]\n    if sum < min\n      min = sum\n    end\n    i += 1\n  end\n\
    \  min\nend", "\trunning_sum = 0\n\tmin_sum = nums[0]\n\tnums.each do |num|\n\t\
    \trunning_sum += num\n\t\tmin_sum = running_sum if running_sum < min_sum\n\t\t\
    running_sum = 0 if running_sum < 0\n\tend\n\tmin_sum\nend", "  min = nums[0]\n\
    \  for i in (0...nums.length)\n    for j in (i...nums.length)\n      sum = nums[i..j].sum\n\
    \      min = sum if sum < min\n    end\n  end\n  min\nend", "  min_sum = nums[0]\n\
    \  curr_sum = nums[0]\n  i = 1\n  while i < nums.length\n    curr_sum = [nums[i],\
    \ curr_sum + nums[i]].min\n    min_sum = [min_sum, curr_sum].min\n    i += 1\n\
    \  end\n  min_sum\nend", '  window_size = nums.length', "  min = nums[0]\n  sum\
    \ = nums[0]\n  (1...nums.length).each do |i|\n    if sum + nums[i] < nums[i]\n\
    \      sum = nums[i]\n    else\n      sum += nums[i]\n    end\n    min = sum if\
    \ sum < min\n  end\n  min\nend", "  min = 0\n  first = 0\n  last = 0\n  sum =\
    \ 0\n  for first in 0..nums.length - 1\n    for last in first..nums.length - 1\n\
    \      sum += nums[last]\n      min = sum if min == 0 || sum < min\n    end\n\
    \    sum = 0\n  end\n  min\nend\nputs minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    puts minSubArraySum([-1, -2, -3]) == -6", "  raise(ArgumentError, 'There must\
    \ be at least one number in the array') if nums.empty?\n  min_sum = nums.first\n\
    \  curr_sum = nums.first\n  prev_max = nil\n  nums[1..-1].each do |num|\n    curr_sum\
    \ += num\n    min_sum = curr_sum if curr_sum < min_sum\n    prev_max = curr_sum\
    \ if prev_max.nil? || prev_max < curr_sum\n    curr_sum = [curr_sum, num].min\n\
    \  end\n  [min_sum, prev_max].min\nend", "  min_sum = nil\n  start_idx = 0\n \
    \ sum = 0\n  nums.each_with_index do |num, idx|\n    sum += num\n    if min_sum.nil?\
    \ || sum < min_sum\n      min_sum = sum\n    end\n    if sum > 0\n      while\
    \ start_idx < idx\n        sum -= nums[start_idx]\n        start_idx += 1\n  \
    \      if sum < min_sum\n          min_sum = sum\n        end\n        break if\
    \ sum >= 0\n      end\n    end\n  end\n  min_sum\nend", "    curr_min = nums[0]\n\
    \    curr_sum = nums[0]\n    nums[1..-1].each do |num|\n        curr_sum = [num,\
    \ curr_sum + num].min\n        curr_min = [curr_min, curr_sum].min\n    end\n\
    \    curr_min\nend", "  return 0 if nums.empty?\n  # set the first value as the\
    \ minimum\n  # iterate through the array starting at the next index\n  # add the\
    \ value at the current index to the value at previous index\n  # if value at the\
    \ current index is less than the value at the previous index\n  # then set the\
    \ current index value as the minimum\n  min = nums[0]\n  (1...nums.length).each\
    \ do |i|\n    nums[i] += nums[i - 1]\n    min = nums[i] if nums[i] < min\n  end\n\
    \  min\nend", "  # Write your code here\n  # find out if the array as a whole\
    \ is greater than 0, if it is then we can return\n  # 0 because that is the minimum\
    \ sum of the array.\n  # else we will return the minumum sum in the array or the\
    \ sum of the array itself\n  min_sum = 0\n  if nums.sum < 0\n    # there is no\
    \ need to calculate the minimum sum because the array already is the\n    # minimum\
    \ sum\n    return nums.sum\n  end\n  # make a loop starting at 0, iterating through\
    \ the array\n  nums.each_with_index do |num, i|\n    # make a temporary variable\n\
    \    temp_sum = 0\n    # make a loop from the first number of the array to the\
    \ end of the array\n    (i..nums.length - 1).each do |j|\n      # add the number\
    \ to the temporary variable\n      temp_sum += nums[j]\n      # if the number\
    \ is less than the minimum sum then make the temporary sum the\n      # minimum\
    \ sum\n      if temp_sum < min_sum\n        min_sum = temp_sum\n      end\n  \
    \  end\n  end\n  # return the minimum sum\n  min_sum\nend", "  if nums.empty?\n\
    \    0\n  else\n    min_sum = nums.first\n    current_sum = 0\n    nums.each do\
    \ |num|\n      current_sum += num\n      min_sum = current_sum if current_sum\
    \ < min_sum\n      current_sum = 0 if current_sum < 0\n    end\n    min_sum\n\
    \  end\nend", "  min_sum = nums[0]\n  curr_sum = 0\n  nums.each do |n|\n    curr_sum\
    \ += n\n    min_sum = curr_sum if curr_sum < min_sum\n    curr_sum = 0 if curr_sum\
    \ < 0\n  end\n  min_sum\nend", "  smallest_sum = 0\n  sum = 0\n  for num in nums\n\
    \    sum += num\n    if sum < smallest_sum\n      smallest_sum = sum\n    end\n\
    \  end\n  smallest_sum\nend", "  min_sum = nums[0]\n  sum = 0\n  nums.each do\
    \ |num|\n    sum += num\n    min_sum = sum if sum < min_sum\n    sum = 0 if sum\
    \ < 0\n  end\n  min_sum\nend", "\tmin_sum = nil\n\ti = 0\n\tj = 0\n\tsum = 0\n\
    \twhile i < nums.length && j < nums.length\n\t\tsum += nums[j]\n\t\tif sum < 0\n\
    \t\t\tif min_sum.nil? || sum < min_sum\n\t\t\t\tmin_sum = sum\n\t\t\tend\n\t\t\
    \ti = j + 1\n\t\t\tj = i\n\t\t\tsum = 0\n\t\telse\n\t\t\tif min_sum.nil? || sum\
    \ < min_sum\n\t\t\t\tmin_sum = sum\n\t\t\tend\n\t\t\tj += 1\n\t\tend\n\tend\n\t\
    return min_sum\nend", "  return nil if nums.empty?\n  min_sum = nums[0]\n  curr_sum\
    \ = 0\n  nums.each do |num|\n    curr_sum += num\n    min_sum = curr_sum if curr_sum\
    \ < min_sum\n    curr_sum = 0 if curr_sum < 0\n  end\n  min_sum\nend", "  # do\
    \ the Kadane's algorithm, but this time, track the minimum\n  max_current, max_global\
    \ = nums[0], nums[0]\n  for i in 1...nums.length\n    max_current = [nums[i],\
    \ max_current + nums[i]].min\n    max_global = [max_global, max_current].min\n\
    \  end\n  max_global\nend", "  if nums.length < 1\n    return false\n  end\n \
    \ if nums.length == 1\n    return nums[0]\n  end\n  curr_sum = nums[0]\n  min_sum\
    \ = nums[0]\n  for i in 1...nums.length\n    curr_sum = [nums[i], curr_sum + nums[i]].min\n\
    \    min_sum = [min_sum, curr_sum].min\n  end\n  return min_sum\nend", "    min_sum\
    \ = Float::INFINITY\n    current_sum = 0\n    nums.each do |num|\n        current_sum\
    \ += num\n        min_sum = current_sum if current_sum < min_sum\n        current_sum\
    \ = 0 if current_sum < 0\n    end\n    min_sum\nend", "  min_sum = nums[0]\n \
    \ sub_sum = nums[0]\n  return min_sum if nums.length == 1\n  nums[1..-1].each\
    \ do |num|\n    sub_sum = [num, sub_sum + num].min\n    min_sum = [min_sum, sub_sum].min\n\
    \  end\n  min_sum\nend", "  # TODO\nend", "  nums.empty? ? 0 : nums.min\nend",
  "  r = nums.length - 1\n  sum = nums[0]\n  min = nums[0]\n  l = 0\n  return nums.min\
    \ if nums.all? { |n| n < 0 }\n  while r < nums.length && l < nums.length\n   \
    \ if sum > 0\n      sum -= nums[l]\n      l += 1\n    else\n      sum += nums[r]\n\
    \      r += 1\n    end\n    min = sum if sum.abs < min.abs\n  end\n  min\nend",
  "  min_sum = Float::INFINITY\n  current_sum = 0\n  start_index = 0", "  min_value\
    \ = nums[0]\n  current_sum = nums[0]\n  (1...nums.length).each do |idx|\n    current_sum\
    \ = [nums[idx], current_sum + nums[idx]].min\n    min_value = [min_value, current_sum].min\n\
    \  end\n  min_value\nend", "  min_sum = nums[0]\n  current_sum = 0\n  nums.each\
    \ do |num|\n    current_sum += num\n    min_sum = current_sum if current_sum <\
    \ min_sum\n    current_sum = 0 if current_sum < 0\n  end\n  min_sum\nend", " \
    \ # sum = 0\n  # nums.each do |num|\n  #   sum += num\n  # end\n  # return sum\
    \ if sum > 0\n  # min = nums[0]\n  # current_sum = nums[0]\n  # nums[1..-1].each\
    \ do |num|\n  #   current_sum += num\n  #   min = current_sum if current_sum <\
    \ min\n  #   current_sum = 0 if current_sum < 0\n  # end\n  # min\n  min_sum =\
    \ nums[0]\n  current_sum = nums[0]\n  nums[1..-1].each do |num|\n    current_sum\
    \ += num\n    min_sum = current_sum if current_sum < min_sum\n    current_sum\
    \ = 0 if current_sum < 0\n  end\n  min_sum\nend", "  len = nums.length\n  len.times\
    \ do |i|\n    if i > 0\n      nums[i] += nums[i - 1]\n    end\n  end\n  min_sum\
    \ = nums[0]\n  min_curr = nums[0]\n  len.times do |i|\n    if i > 0\n      min_curr\
    \ = nums[i] if nums[i] < min_curr\n      min_sum = [min_sum, nums[i] - min_curr].min\n\
    \    end\n  end\n  min_sum\nend", "  min = nil\n  for i in 0..nums.length - 1\n\
    \    for j in i..nums.length - 1\n      current_min = nums[i..j].sum\n      min\
    \ = current_min if min.nil? || current_min < min\n    end\n  end\n  min\nend",
  "  i = 1\n  first_sum = 0\n  second_sum = 0\n  while i < nums.length\n    first_sum\
    \ += nums[i]\n    second_sum += nums[i - 1]\n    i += 1\n  end\n  return first_sum\
    \ if first_sum < second_sum\n  second_sum\nend", "  min_sum = nums[0]\n  sum =\
    \ 0\n  nums.each do |num|\n    sum += num\n    min_sum = sum if sum < min_sum\n\
    \    sum = 0 if sum < 0\n  end\n  min_sum\nend", "  i = 0\n  smallest_sum = nums[0]\n\
    \  j = 1\n  while i < nums.length\n    sum = nums[i]\n    j = i + 1\n    while\
    \ j < nums.length\n      sum += nums[j]\n      if sum < smallest_sum\n       \
    \ smallest_sum = sum\n      end\n      j += 1\n    end\n    i += 1\n  end\n  smallest_sum\n\
    end\np minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\np minSubArraySum([-1, -2, -3])\
    \ == -6", "    min = nums[0]\n    currentSum = nums[0]\n    for i in 1...nums.length\n\
    \        currentSum = [nums[i], nums[i] + currentSum].min\n        min = [min,\
    \ currentSum].min\n    end\n    min\nend\nputs \"minSubArraySum([2, 3, 4, 1, 2,\
    \ 4]) == 1 : #{minSubArraySum([2, 3, 4, 1, 2, 4]) == 1}\"\nputs \"minSubArraySum([-1,\
    \ -2, -3]) == -6 : #{minSubArraySum([-1, -2, -3]) == -6}\"\nputs \"minSubArraySum([-1,\
    \ -2, -3, -4]) == -10 : #{minSubArraySum([-1, -2, -3, -4]) == -10}\"", "  array_sums\
    \ = Array.new(nums.length, 0)\n  array_sums[0] = nums[0]\n  min_value = nums[0]\n\
    \  for i in 1..nums.length - 1\n    array_sums[i] = array_sums[i - 1] + nums[i]\n\
    \    min_value = array_sums[i] if array_sums[i] < min_value\n  end\n  for i in\
    \ 0..nums.length - 1\n    for j in i + 1..nums.length - 1\n      min_value = array_sums[j]\
    \ - array_sums[i] if array_sums[j] - array_sums[i] < min_value\n    end\n  end\n\
    \  min_value\nend", "  return 0 if nums.empty?\n  return nums.min if nums.length\
    \ == 1", "  min_sum = nums[0]\n  sum = nums[0]\n  (1...nums.length).each do |i|\n\
    \    sum = [nums[i], sum + nums[i]].min\n    min_sum = [min_sum, sum].min\n  end\n\
    \  min_sum\nend", "  min_sum = 0\n  current_sum = 0\n  nums.each do |num|\n  \
    \  current_sum += num\n    min_sum = current_sum if current_sum < min_sum\n  \
    \  current_sum = 0 if current_sum < 0\n  end\n  min_sum\nend", "  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend", "  min_sum = nil\n  # Idea:\n  #   - Iterate over\
    \ the array, starting at the first element\n  #   - For each element\n  #    \
    \   - Sum the array elements up to and including the current element\n  #    \
    \   - Check to see if the current sum is less than the current min\n  #   - Return\
    \ the min sum\n  (0...nums.length).each do |i|\n    sum = 0\n    (0..i).each do\
    \ |j|\n      sum += nums[j]\n    end\n    if sum < min_sum || min_sum.nil?\n \
    \     min_sum = sum\n    end\n  end\n  min_sum\nend", "  return nil if nums.length\
    \ < 1\n  min_sum = nil\n  for i in 0..nums.length - 1\n    for j in i..nums.length\
    \ - 1\n      curr_sum = nums[i..j].reduce(:+)\n      min_sum = curr_sum if min_sum.nil?\
    \ || curr_sum < min_sum\n    end\n  end\n  min_sum\nend", "  sum = 0\n  min_sum\
    \ = nil\n  i = 0\n  j = 0\n  while i < nums.length\n    sum += nums[i]\n    if\
    \ sum < min_sum || min_sum.nil?\n      min_sum = sum\n    end\n    i += 1\n  end\n\
    \  min_sum\nend", "  current_sum = nums[0]\n  min_sum = nums[0]", "  sum = nums[0]\n\
    \  min = nums[0]\n  for num in 1...nums.length\n    sum += nums[num]\n    sum\
    \ = nums[num] if sum < nums[num]\n    min = sum if sum < min\n  end\n  min\nend",
  "    running_sum = 0\n    min_sum = nums[0]\n    running_minimum = nums[0]\n   \
    \ nums.each do |num|\n        running_sum += num\n        if running_sum < running_minimum\n\
    \            running_minimum = running_sum\n        end\n        if running_sum\
    \ - running_minimum < min_sum\n            min_sum = running_sum - running_minimum\n\
    \        end\n    end\n    min_sum\nend", "    return nums.min if nums.all? {\
    \ |num| num < 0 }\n    min_sum = nil\n    nums.each_with_index do |num, i|\n \
    \       idx = i\n        sum = 0\n        while idx < nums.length\n          \
    \  sum += nums[idx]\n            min_sum = sum if min_sum.nil? || sum < min_sum\n\
    \            idx += 1\n        end\n    end\n    min_sum\nend", "  current_sum\
    \ = 0\n  min_sum = nil\n  left = 0\n  right = 0\n  while right < nums.length\n\
    \    current_sum += nums[right]\n    if min_sum.nil? || current_sum < min_sum\n\
    \      min_sum = current_sum\n    end\n    if current_sum > 0\n      current_sum\
    \ = 0\n      left = right + 1\n    end\n    right += 1\n  end\n  min_sum\nend",
  "  min = minSum = 0\n  for i in 0...nums.length\n    minSum += nums[i]\n    min\
    \ = minSum if minSum < min\n    minSum = 0 if minSum > 0\n  end\n  min\nend",
  end, "  min_sum = nil\n  (0...nums.length).each do |i|\n    (i...nums.length).each\
    \ do |j|\n      sub_array = nums[i..j]\n      sum = sub_array.reduce(:+)\n   \
    \   min_sum = sum if min_sum.nil? || sum < min_sum\n    end\n  end\n  min_sum\n\
    end", "  current = max = 0\n  nums.each do |n|\n    current += n\n    max = current\
    \ if current > max\n    current = 0 if current < 0\n  end\n  max\nend", "  min\
    \ = 0\n  sum = 0\n  nums.each do |num|\n    sum += num\n    min = sum if sum <\
    \ min\n    sum = 0 if sum < 0\n  end\n  min\nend", "  # this assumes that the\
    \ array has at least one integer\n  return nums.min if nums.length == 1\n  min_sum\
    \ = nums.first\n  current_sum = nums.first\n  nums[1..-1].each do |num|\n    current_sum\
    \ = [num, current_sum + num].min\n    min_sum = [min_sum, current_sum].min\n \
    \ end\n  min_sum\nend", "  min_sum = nums[0]\n  curr_sum = 0\n  nums.each do |num|\n\
    \    curr_sum += num\n    min_sum = curr_sum if curr_sum < min_sum\n    curr_sum\
    \ = 0 if curr_sum < 0\n  end\n  min_sum\nend", "  total = nums.inject(:+)\n  count\
    \ = 0\n  sums = []\n  while count < nums.length\n    sums << nums[count..-1].inject(:+)\n\
    \    count += 1\n  end\n  sums.min\nend\np minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\np minSubArraySum([-1, -2, -3]) == -6", "    smallest = nums[0]\n    sum\
    \ = 0\n    nums.each do |num|\n        if num < smallest\n            smallest\
    \ = num\n        end\n        sum += num\n    end\n    if sum < smallest\n   \
    \     smallest = sum\n    end\n    smallest\nend", "  return nil if nums.empty?\n\
    \  min_sum = nums[0]\n  curr_sum = nums[0]\n  (1...nums.length).each do |i|\n\
    \    curr_sum = [nums[i], curr_sum + nums[i]].min\n    min_sum = [min_sum, curr_sum].min\n\
    \  end\n  min_sum\nend", "  return 0 if nums.nil? || nums.empty?\n  min_sum =\
    \ nums[0]\n  sum = 0\n  i = 0\n  while i < nums.length\n    sum += nums[i]\n \
    \   min_sum = sum if sum < min_sum\n    sum = 0 if sum < 0\n    i += 1\n  end\n\
    \  min_sum\nend", "  return nil if nums.length == 0\n  return nums[0] if nums.length\
    \ == 1\n  result = nums[0]\n  (1...nums.length).each do |i|\n    nums[i] = [nums[i],\
    \ nums[i] + nums[i - 1]].min\n    result = [result, nums[i]].min\n  end\n  result\n\
    end", "  # TODO\nend", "  array = []\n  (0...nums.length).each do |i|\n    (i...nums.length).each\
    \ do |j|\n      array << nums[i..j]\n    end\n  end\n  array.map { |sub| sub.reduce(:+)\
    \ }.min\nend", "    min = nil\n    sum = 0\n    # O(n)\n    nums.each do |num|\n\
    \        sum += num\n        if min == nil || sum < min\n            min = sum\n\
    \        end\n    end\n    return min\nend", "  min_sum = 0\n  nums.each_with_index\
    \ do |num, idx|\n    sum = num\n    min_sum = sum if min_sum == 0\n    (idx +\
    \ 1...nums.length).each do |jdx|\n      sum += nums[jdx]\n      min_sum = sum\
    \ if sum < min_sum\n    end\n  end\n  min_sum\nend", "  smallest = nil\n  nums.length.times\
    \ do |i|\n    0.upto(nums.length - i) do |j|\n      current = nums[j..(j + i)].reduce(:+)\n\
    \      smallest = current if smallest.nil? || current < smallest\n    end\n  end\n\
    \  smallest\nend", "  return nums.min if nums.length == 1\n  min = nums[0]\n \
    \ (0...nums.length).each do |i|\n    (i...nums.length).each do |j|\n      min\
    \ = nums[i..j].sum if nums[i..j].sum < min\n    end\n  end\n  min\nend", "  #\
    \ Write your code here\nend", "\t# Compare the first element to the sum of all\
    \ elements\n\t# Compare the second element to the sum of all elements\n\t# Compare\
    \ the third element to the sum of all elements\n\t# etc.\n\tminimum = nums.first\n\
    \tcurrent_sum = 0\n\tnums.each do |n|\n\t\tcurrent_sum += n\n\t\tminimum = current_sum\
    \ if current_sum < minimum\n\tend\n\treturn minimum\nend", "  min_sum = nums[0]\n\
    \  current_sum = 0\n  (0...nums.length).each do |i|\n    current_sum += nums[i]\n\
    \    if current_sum < min_sum\n      min_sum = current_sum\n    end\n    if current_sum\
    \ > 0\n      current_sum = 0\n    end\n  end\n  min_sum\nend", "  # minimum sum\
    \ of any sub-array is -2147483648 when all numbers are negative\n  min_sum = -2147483648\n\
    \  curr_sum = 0\n  nums.each do |num|\n    # if the current sum is less than 0,\
    \ then we can't include it in the next\n    # sum, so we make the current sum\
    \ 0\n    if curr_sum < 0\n      curr_sum = 0\n    end\n    curr_sum += num\n \
    \   # if the current sum is less than the current minimum sum\n    # then replace\
    \ the minimum sum with the current sum\n    if curr_sum < min_sum\n      min_sum\
    \ = curr_sum\n    end\n  end\n  min_sum\nend", "  # Edge case\n  return nums.min\
    \ if nums.size == 1", "  min = nil\n  current_sum = 0\n  nums.each do |num|\n\
    \    current_sum += num\n    if min.nil? || current_sum < min\n      min = current_sum\n\
    \    end\n    if current_sum > 0\n      current_sum = 0\n    end\n  end\n  min\n\
    end", "  min_sum = nil\n  min_subarray = nil\n  nums.each_with_index do |num,\
    \ i|\n    nums[i..-1].each_with_index do |num2, j|\n      curr_sum = nums[i..i+j].reduce(:+)\n\
    \      if min_sum.nil? || curr_sum < min_sum\n        min_sum = curr_sum\n   \
    \     min_subarray = nums[i..i+j]\n      end\n    end\n  end\n  min_sum\nend",
  "  min = nums[0]\n  sum = 0\n  nums.each do |n|\n    sum += n\n    min = sum if\
    \ sum < min\n    sum = 0 if sum < 0\n  end\n  min\nend", "    min_sum = nil\n\
    \    0.upto(nums.length - 1) do |i|\n        1.upto(nums.length - i) do |j|\n\
    \            min_sum = nums[i...i+j].sum unless min_sum\n            min_sum =\
    \ nums[i...i+j].sum if nums[i...i+j].sum < min_sum\n        end\n    end\n   \
    \ min_sum\nend", "  min_sum = nil\n  min_sum_start_index = nil\n  min_sum_end_index\
    \ = nil\n  (0...nums.length).each do |i|\n    sum = 0\n    j = i\n    while j\
    \ < nums.length\n      sum += nums[j]\n      if min_sum.nil? || sum < min_sum\n\
    \        min_sum = sum\n        min_sum_start_index = i\n        min_sum_end_index\
    \ = j\n      end\n      j += 1\n    end\n  end\n  min_sum\nend", "  curr_min =\
    \ nums[0]\n  curr_sum = nums[0]\n  i = 1\n  while i < nums.length\n    curr_sum\
    \ += nums[i]\n    curr_min = curr_sum if curr_sum < curr_min\n    curr_sum = 0\
    \ if curr_sum < 0\n    i += 1\n  end\n  curr_min\nend", "  min = Float::INFINITY\n\
    \  sum = 0\n  i = 0\n  while i < nums.length\n    sum += nums[i]\n    min = sum\
    \ if sum < min\n    sum = 0 if sum < 0\n    i += 1\n  end\n  min\nend", "  return\
    \ 0 if nums.empty?\n  min_sum = nums[0]\n  curr_sum = nums[0]\n  (1...nums.length).each\
    \ do |i|\n    curr_sum = [nums[i], curr_sum + nums[i]].min\n    min_sum = [min_sum,\
    \ curr_sum].min\n  end\n  min_sum\nend", "    min_sum = 0\n    if nums.size ==\
    \ 1\n        return nums[0]\n    end\n    (0...nums.size).each do |i|\n      \
    \  (i+1...nums.size).each do |j|\n            sum = nums[i..j].sum\n         \
    \   if sum < min_sum || min_sum == 0\n                min_sum = sum\n        \
    \    end\n        end\n    end\n    min_sum\nend", "  min_sum = nums[0]\n  current_sum\
    \ = nums[0]\n  i = 1\n  while i < nums.length\n    current_sum = current_sum.positive?\
    \ ? current_sum + nums[i] : nums[i]\n    min_sum = current_sum if current_sum\
    \ < min_sum\n    i += 1\n  end\n  min_sum\nend", "  return nums.min if nums.length\
    \ == 1\n  i = 0\n  sums = []\n  while i < nums.length\n    sums << nums[i..-1].reduce(:+)\n\
    \    i += 1\n  end\n  sums.min\nend", "  min_sum = nil\n  (0...nums.length).each\
    \ do |s|\n    (s...nums.length).each do |e|\n      sub_array = nums[s..e]\n  \
    \    curr_sum = sub_array.reduce(:+)\n      min_sum = curr_sum if min_sum.nil?\
    \ || curr_sum < min_sum\n    end\n  end\n  min_sum\nend", "  prev = curr = 0\n\
    \  min = nums[0]\n  nums.each do |e|\n    curr = [curr + e, e].min\n    min =\
    \ [min, curr].min\n  end\n  min\nend", "  current_sum = nums[0]\n  minimum_sum\
    \ = nums[0]", "  # Write your code here\nend", "  return nil if nums.empty?\n\
    \  min_sum = 0\n  sum = 0\n  nums.each do |num|\n    sum += num\n    min_sum =\
    \ sum if sum < min_sum\n  end\n  min_sum\nend", "  return nil if nums.empty?\n\
    \  curr_min = nums[0]\n  temp_sum = nums[0]\n  nums[1..-1].each do |n|\n    temp_sum\
    \ += n\n    if temp_sum < curr_min\n      curr_min = temp_sum\n    end\n    if\
    \ temp_sum > 0\n      temp_sum = 0\n    end\n  end\n  curr_min\nend", "  return\
    \ nil if nums.empty?\n  min_sum = nums[0]\n  current_sum = 0\n  nums.each do |num|\n\
    \    current_sum += num\n    min_sum = current_sum if current_sum < min_sum\n\
    \    current_sum = 0 if current_sum < 0\n  end\n  min_sum\nend", "  min_sum =\
    \ Float::INFINITY\n  current_sum = 0\n  nums.each do |num|\n    current_sum +=\
    \ num\n    min_sum = current_sum if current_sum < min_sum\n    current_sum = 0\
    \ if current_sum < 0\n  end\n  min_sum\nend\np minSubArraySum([2, 3, 4, 1, 2,\
    \ 4]) == 1\np minSubArraySum([-1, -2, -3]) == -6\np minSubArraySum([5, -2, 3,\
    \ 4, -5, 2, 4]) == -4", "  min_value = nums[0]\n  tmp_value = nums[0]\n  (1...nums.length).each\
    \ do |idx|\n    tmp_value = [nums[idx], tmp_value + nums[idx]].min\n    min_value\
    \ = [min_value, tmp_value].min\n  end\n  min_value\nend", "  min_sum = nums[0]\n\
    \  current_sum = nums[0]\n  nums[1..-1].each do |num|\n    current_sum = [num,\
    \ current_sum + num].min\n    min_sum = [min_sum, current_sum].min\n  end\n  min_sum\n\
    end", "  min_so_far = nums[0]\n  sum = 0\n  nums.each do |n|\n    sum += n\n \
    \   min_so_far = sum if sum < min_so_far\n    sum = 0 if sum < 0\n  end\n  min_so_far\n\
    end", "  return nil if nums.empty?\n  min_sum = nums[0]\n  curr_sum = nums[0]\n\
    \  i = 1\n  while i < nums.length\n    curr_sum = [nums[i], curr_sum + nums[i]].min\n\
    \    min_sum = [min_sum, curr_sum].min\n    i += 1\n  end\n  min_sum\nend", " \
    \   # time: O(n^2)\n    # space: O(1)\n    min = nums[0]\n    (0...nums.length).each\
    \ do |i|\n        sum = 0\n        (i...nums.length).each do |j|\n           \
    \ sum += nums[j]\n            min = sum if sum < min\n        end\n    end\n \
    \   min\nend", "  min_num = nums[0]\n  sum = 0\n  nums.each do |num|\n    sum\
    \ += num\n    min_num = sum if sum < min_num\n    sum = 0 if sum < 0\n  end\n\
    \  min_num\nend", "  min_sum = min_ending_here = nums[0]\n  (1...nums.length).each\
    \ do |i|\n    min_ending_here = [nums[i], min_ending_here + nums[i]].min\n   \
    \ min_sum = [min_sum, min_ending_here].min\n  end\n  min_sum\nend", "  min = nums[0]\n\
    \  i = 0\n  until i == nums.length\n    j = i\n    until j == nums.length\n  \
    \    sub_array = nums[i..j]\n      min = sub_array.sum if sub_array.sum < min\n\
    \      j += 1\n    end\n    i += 1\n  end\n  min\nend", "  return 0 if nums.empty?\n\
    \  min = nums[0]\n  (0...nums.length).each do |i|\n    (i...nums.length).each\
    \ do |j|\n      min = [min, nums[i..j].sum].min\n    end\n  end\n  min\nend",
  "  min_sum = nums[0]\n  current_sum = 0\n  (0...nums.length).each do |i|\n    current_sum\
    \ += nums[i]\n    min_sum = current_sum if current_sum < min_sum\n    current_sum\
    \ = 0 if current_sum < 0\n  end\n  min_sum\nend", "    min_sum = nums[0]\n   \
    \ current_sum = nums[0]\n    (1...nums.length).each do |i|\n        current_sum\
    \ = nums[i] if current_sum < 0\n        current_sum += nums[i]\n        min_sum\
    \ = current_sum if current_sum < min_sum\n    end\n    min_sum\nend", "    min_sum\
    \ = Float::INFINITY\n    sub_sum = 0\n    nums.each do |num|\n        sub_sum\
    \ += num\n        min_sum = sub_sum if sub_sum < min_sum\n        sub_sum = 0\
    \ if sub_sum < 0\n    end\n    min_sum\nend", "  min_sum = nums[0]\n  start_idx\
    \ = 0\n  current_sum = 0", "  min_sum = nil\n  first = 0\n  last = 0\n  sum =\
    \ 0\n  while first < nums.length && last < nums.length\n    sum += nums[last]\n\
    \    if min_sum.nil? || sum < min_sum\n      min_sum = sum\n    end\n    if sum\
    \ < 0\n      first = last + 1\n      last = first\n      sum = 0\n    else\n \
    \     last += 1\n    end\n  end\n  min_sum\nend", "  min_sum = nil\n  current_sum\
    \ = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum = current_sum\
    \ if min_sum.nil? || current_sum < min_sum\n    current_sum = 0 if current_sum\
    \ < 0\n  end\n  min_sum\nend", "  return nil if nums.empty?\n  return nums.min\
    \ if nums.length == 1\n  result = nums.sum\n  (0...nums.length).each do |i|\n\
    \    (i...nums.length).each do |j|\n      result = [result, nums[i..j].sum].min\n\
    \    end\n  end\n  result\nend", "  min = nums[0]\n  total = 0\n  nums.each do\
    \ |num|\n    total += num\n    min = total if total < min\n    total = 0 if total\
    \ < 0\n  end\n  min\nend", "  min = nil\n  current_sum = 0\n  nums.each do |num|\n\
    \    current_sum += num\n    if min.nil? || current_sum < min\n      min = current_sum\n\
    \    end\n    if current_sum < 0\n      current_sum = 0\n    end\n  end\n  min\n\
    end", "  current_sum = nums[0]\n  min_sum = nums[0]", "  min = nil\n  nums.each_with_index\
    \ do |num, i|\n    nums[i..-1].each_with_index do |num, j|\n      i = nums[i..j].sum\n\
    \      min = i if min.nil? || i < min\n    end\n  end\n  min\nend", "    smallest_sum\
    \ = nums[0]\n    sum = 0\n    nums.each do |num|\n        sum += num\n       \
    \ smallest_sum = sum if sum < smallest_sum\n        sum = 0 if sum < 0\n    end\n\
    \    smallest_sum\nend", "  min = Float::INFINITY\n  sum = 0\n  start = 0\n  nums.each_with_index\
    \ do |num, idx|\n    sum += num\n    if sum < min\n      min = sum\n      start\
    \ = idx\n    end\n    if sum > 0\n      sum = 0\n    end\n  end\n  start += 1\
    \ if start == nums.length\n  nums[0...start].sum\nend", "    min_sum = nil\n \
    \   prev_sum = 0\n    nums.each do |n|\n        sum = prev_sum + n\n        min_sum\
    \ = sum if min_sum.nil? || sum < min_sum\n        prev_sum = sum\n    end\n  \
    \  min_sum\nend", "  if nums.length < 1\n    return 0\n  end\n  if nums.length\
    \ == 1\n    return nums[0]\n  end\n  min_sum = nums[0]\n  current_sum = nums[0]\n\
    \  (1...nums.length).each do |i|\n    current_sum = [nums[i], current_sum + nums[i]].min\n\
    \    min_sum = [min_sum, current_sum].min\n  end\n  min_sum\nend", "  min_sum\
    \ = nums[0]\n  sum = nums[0]\n  for i in 1...nums.length\n    if nums[i] > sum\
    \ + nums[i]\n      sum = nums[i]\n    else\n      sum += nums[i]\n    end\n  \
    \  min_sum = sum if sum < min_sum\n  end\n  min_sum\nend", "  min_sum = nil\n\
    \  (0...nums.length).each do |start|\n    (start...nums.length).each do |last|\n\
    \      current_sum = nums[start..last].reduce(:+)\n      min_sum = current_sum\
    \ if min_sum.nil? || current_sum < min_sum\n    end\n  end\n  min_sum\nend", " \
    \ return if nums.length < 1\n  min_sum = nums[0]\n  current_sum = nums[0]\n  start\
    \ = 0\n  nums.each_with_index do |num, i|\n    next if i == 0\n    if num > current_sum\
    \ + num\n      start = i\n      current_sum = num\n    else\n      current_sum\
    \ += num\n    end\n    min_sum = current_sum if current_sum < min_sum\n  end\n\
    \  min_sum\nend", "  # ...\nend", "  min_sum = nums[0]\n  current_sum = 0\n  (0...nums.length).each\
    \ do |i|\n    current_sum += nums[i]\n    if current_sum < min_sum\n      min_sum\
    \ = current_sum\n    end\n    if current_sum > 0\n      current_sum = 0\n    end\n\
    \  end\n  min_sum\nend", "    minimum = nums[0]\n    current_min = nums[0]\n \
    \   (1...nums.length).each do |i|\n        current_min = [nums[i], nums[i] + current_min].min\n\
    \        minimum = [minimum, current_min].min\n    end\n    minimum\nend", " \
    \ window_start = 0\n  window_sum = 0\n  min_sum = Float::INFINITY", "  min_sum\
    \ = nums[0]\n  current_sum = nums[0]\n  # You can start your window at 0\n  #\
    \ For each window, grab the current_sum and compare it to the min_sum\n  # If\
    \ the current_sum is less than the min_sum, reassign it to min_sum\n  # When you\
    \ need to shrink the window, use a rolling sum technique\n  # Subtract the element\
    \ from the left side of the window from the current_sum\n  # Add the element from\
    \ the right side of the window to the current_sum\n  for i in 1...nums.length\n\
    \    current_sum = [current_sum + nums[i], nums[i]].min\n    min_sum = [current_sum,\
    \ min_sum].min\n  end\n  min_sum\nend", "  current_min = nil\n  sum = 0\n  nums.each\
    \ do |num|\n    sum += num\n    current_min = sum if current_min.nil? || sum <\
    \ current_min\n    sum = 0 if sum < 0\n  end\n  current_min\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
