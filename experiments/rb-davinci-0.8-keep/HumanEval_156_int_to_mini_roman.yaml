name: HumanEval_156_int_to_mini_roman
language: rb
prompt: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
  # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n#\
  \ >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n#\
  \ >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
  \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
  \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
  \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
  \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
  \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
  \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
  \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
  \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
completions: ["\tromans = { 1000 => 'm', 900 => 'cm', 500 => 'd', 400 => 'cd', 100\
    \ => 'c',\n\t\t\t\t\t\t 90 => 'xc', 50 => 'l', 40 => 'xl', 10 => 'x', 9 => 'ix',\
    \ 5 => 'v',\n\t\t\t\t\t\t 4 => 'iv', 1 => 'i' }\n\tresult = ''\n\tromans.each\
    \ { | key, value |\n\t\tresult << value * (number / key)\n\t\tnumber = number\
    \ % key\n\t}\n\tresult\nend", "    result = \"\"\n    while number > 0 do\n  \
    \      if number >= 1000\n            result << \"m\"\n            number -= 1000\n\
    \        elsif number >= 900\n            result << \"cm\"\n            number\
    \ -= 900\n        elsif number >= 500\n            result << \"d\"\n         \
    \   number -= 500\n        elsif number >= 400\n            result << \"cd\"\n\
    \            number -= 400\n        elsif number >= 100\n            result <<\
    \ \"c\"\n            number -= 100\n        elsif number >= 90\n            result\
    \ << \"xc\"\n            number -= 90\n        elsif number >= 50\n          \
    \  result << \"l\"\n            number -= 50\n        elsif number >= 40\n   \
    \         result << \"xl\"\n            number -= 40\n        elsif number >=\
    \ 10\n            result << \"x\"\n            number -= 10\n        elsif number\
    \ >= 9\n            result << \"ix\"\n            number -= 9\n        elsif number\
    \ >= 5\n            result << \"v\"\n            number -= 5\n        elsif number\
    \ >= 4\n            result << \"iv\"\n            number -= 4\n        elsif number\
    \ >= 1\n            result << \"i\"\n            number -= 1\n        end\n  \
    \  end\n    return result\nend", "  # create a hash of roman numerals\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  #\
    \ create a blank string to add the roman numerals to\n  converted_roman_numeral\
    \ = ''\n  # loop over the hash key value pairs until number is zero\n  while number\
    \ > 0\n    # loop over the hash key value pairs\n    roman_numerals.each do |key,\
    \ value|\n      # divide the number by the key and the remainder will be the new\
    \ number\n      # add the value to the blank string\n      if number % key ==\
    \ 0\n        (number / key).times do\n          converted_roman_numeral << value\n\
    \        end\n        number = 0\n      else\n        number -= key\n        converted_roman_numeral\
    \ << value\n      end\n    end\n  end\n  # returns the blank string with the roman\
    \ numerals\n  converted_roman_numeral\nend", "  answer = ''\n  if number <= 1000\n\
    \    roman_mapping.each do |key, value|\n      (number / key).times {answer <<\
    \ value}\n      number = number % key\n    end\n  end\n  answer\nend", "  roman_hash\
    \ = { 1 => 'i', 4 => 'iv', 5 => 'v', 9 => 'ix', 10 => 'x', 40 => 'xl', 50 => 'l',\
    \ 90 => 'xc', 100 => 'c', 400 => 'cd', 500 => 'd', 900 => 'cm', 1000 => 'm' }\n\
    \  answer = \"\"\n  roman_hash.keys.reverse.each do |num|\n    while number >=\
    \ num\n      answer << roman_hash[num]\n      number -= num\n    end\n  end\n\
    \  answer\nend", "  # Insert your code here, and delete these comments\nend",
  "  raise NotImplementedError\nend", "  # TODO: write this code\nend", "  number_hash\
    \ = {\n      1000 => 'm',\n      900 => 'cm',\n      500 => 'd',\n      400 =>\
    \ 'cd',\n      100 => 'c',\n      90 => 'xc',\n      50 => 'l',\n      40 => 'xl',\n\
    \      10 => 'x',\n      9 => 'ix',\n      5 => 'v',\n      4 => 'iv',\n     \
    \ 1 => 'i'\n  }\n  roman_numeral = ''\n  number_hash.each do |key, value|\n  \
    \  while number >= key\n      roman_numeral += value\n      number -= key\n  \
    \  end\n  end\n  roman_numeral\nend", "  rom_num = ''\n  rom_hash = {1000 => 'm',\
    \ 900 => 'cm', 500 => 'd', 400 => 'cd', 100 => 'c',\n              90 => 'xc',\
    \ 50 => 'l', 40 => 'xl', 10 => 'x', 9 => 'ix',\n              5 => 'v', 4 => 'iv',\
    \ 1 => 'i'}\n  rom_hash.each { |key, value| rom_num << value * (number / key)\n\
    \                                number = number % key}\n  rom_num\nend", "  result\
    \ = ''\n  array_numbers = []\n  array_romans = []\n  array_numbers = [1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n  array_romans = %w[m cm d cd c\
    \ xc l xl x ix v iv i]\n  array_numbers.each_with_index do |n, i|\n    while number\
    \ >= n\n      result += array_romans[i]\n      number -= n\n    end\n  end\n \
    \ result\nend", "  roman = \"\"\n  roman << \"c\" * (number / 100)\n  roman <<\
    \ \"l\" * (number % 100 / 50)\n  roman << \"x\" * (number % 50 / 10)\n  roman\
    \ << \"v\" * (number % 10 / 5)\n  roman << \"i\" * (number % 5 / 1)\n  roman\n\
    end", "  raise NotImplementedError\nend", "  # reference to roman numerals,\n\
    \  # keys -> arabic numerals,\n  # values -> roman numerals\n  roman_numerals\
    \ = {\n    1 => 'i',\n    4 => 'iv',\n    5 => 'v',\n    9 => 'ix',\n    10 =>\
    \ 'x',\n    40 => 'xl',\n    50 => 'l',\n    90 => 'xc',\n    100 => 'c',\n  \
    \  400 => 'cd',\n    500 => 'd',\n    900 => 'cm',\n    1000 => 'm'\n  }", " \
    \ roman = [\"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"]\n  x = 0\n  i = 0\n\
    \  split_num = number.to_s.split('')\n  mini_roman = []\n  until i >= split_num.length\n\
    \    digit = split_num[i].to_i\n    if digit == 9\n      mini_roman << roman[x]\
    \ + roman[x + 2]\n    elsif digit == 4\n      mini_roman << roman[x] + roman[x\
    \ + 1]\n    elsif digit >= 5\n      mini_roman << roman[x + 1] + roman[x] * (digit\
    \ - 5)\n    else\n      mini_roman << roman[x] * digit\n    end\n    x += 2\n\
    \    i += 1\n  end\n  return mini_roman.join\nend", "  roman = \"\"\n  while number\
    \ > 0\n    if number >= 100\n      x = (number/100).floor\n      roman += \"c\"\
    \ * x\n      number -= 100 * x\n    elsif number >= 50\n      if number >= 90\n\
    \        roman += \"xc\"\n        number -= 90\n      else\n        roman += \"\
    l\"\n        number -= 50\n      end\n    elsif number >= 10\n      if number\
    \ >= 40\n        roman += \"xl\"\n        number -= 40\n      else\n        x\
    \ = (number/10).floor\n        roman += \"x\" * x\n        number -= 10 * x\n\
    \      end\n    elsif number >= 5\n      if number == 9\n        roman += \"ix\"\
    \n        number -= 9\n      else\n        roman += \"v\"\n        number -= 5\n\
    \      end\n    elsif number >= 1\n      if number == 4\n        roman += \"iv\"\
    \n        number -= 4\n      else\n        roman += \"i\" * number\n        number\
    \ -= number\n      end\n    end\n  end\n  roman\nend", "  roman_numerals = {\n\
    \    \"I\" => 1,\n    \"IV\" => 4,\n    \"V\" => 5,\n    \"IX\" => 9,\n    \"\
    X\" => 10,\n    \"XL\" => 40,\n    \"L\" => 50,\n    \"XC\" => 90,\n    \"C\"\
    \ => 100,\n    \"CD\" => 400,\n    \"D\" => 500,\n    \"CM\" => 900,\n    \"M\"\
    \ => 1000\n  }\n  roman_numerals = roman_numerals.to_a.reverse\n  index = 0\n\
    \  result = \"\"\n  until number == 0\n    roman_numerals.each do |elem|\n   \
    \   if number >= elem[1]\n        index = roman_numerals.index(elem)\n       \
    \ number -= elem[1]\n        result += elem[0]\n        break\n      end\n   \
    \ end\n  end\n  result\nend", "    if number > 1000\n        return 'too large'\n\
    \    end\n    if number < 1\n        return 'too small'\n    end\n    result =\
    \ ''\n    while number > 1000\n        number -= 1000\n        result += 'm'\n\
    \    end\n    while number > 500\n        number -= 500\n        result += 'd'\n\
    \    end\n    while number > 100\n        number -= 100\n        result += 'c'\n\
    \    end\n    while number > 50\n        number -= 50\n        result += 'l'\n\
    \    end\n    while number > 10\n        number -= 10\n        result += 'x'\n\
    \    end\n    while number > 5\n        number -= 5\n        result += 'v'\n \
    \   end\n    while number > 1\n        number -= 1\n        result += 'i'\n  \
    \  end\n    return result\nend", "  string = []\n  while number > 0\n    if number\
    \ >= 100\n      string << \"c\"\n      number -= 100\n    elsif number >= 90\n\
    \      string << \"xc\"\n      number -= 90\n    elsif number >= 50\n      string\
    \ << \"l\"\n      number -= 50\n    elsif number >= 40\n      string << \"xl\"\
    \n      number -= 40\n    elsif number >= 10\n      string << \"x\"\n      number\
    \ -= 10\n    elsif number >= 9\n      string << \"ix\"\n      number -= 9\n  \
    \  elsif number >= 5\n      string << \"v\"\n      number -= 5\n    elsif number\
    \ >= 4\n      string << \"iv\"\n      number -= 4\n    elsif number >= 1\n   \
    \   string << \"i\"\n      number -= 1\n    end\n  end\n  string.join\nend", "\t\
    temp = \"\"\n\ti = 0\n\twhile number != 0\n\t\tif number >= 1000\n\t\t\ttemp <<\
    \ \"m\"\n\t\t\tnumber -= 1000\n\t\telsif number >= 500\n\t\t\ttemp << \"d\"\n\t\
    \t\tnumber -= 500\n\t\telsif number >= 100\n\t\t\ttemp << \"c\"\n\t\t\tnumber\
    \ -= 100\n\t\telsif number >= 50\n\t\t\ttemp << \"l\"\n\t\t\tnumber -= 50\n\t\t\
    elsif number >= 10\n\t\t\ttemp << \"x\"\n\t\t\tnumber -= 10\n\t\telsif number\
    \ >= 5\n\t\t\ttemp << \"v\"\n\t\t\tnumber -= 5\n\t\telsif number >= 1\n\t\t\t\
    temp << \"i\"\n\t\t\tnumber -= 1\n\t\tend\n\tend\n\twhile i < temp.length\n\t\t\
    if temp[i] == \"i\" && temp[i+1] == \"i\" && temp[i+2] == \"i\"\n\t\t\ttemp[i..i+2]\
    \ = \"iv\"\n\t\t\ti += 1\n\t\telsif temp[i] == \"i\" && temp[i+1] == \"i\"\n\t\
    \t\ttemp[i..i+1] = \"ix\"\n\t\t\ti += 1\n\t\telsif temp[i] == \"v\" && temp[i+1]\
    \ == \"i\" && temp[i+2] == \"i\" && temp[i+3] == \"i\"\n\t\t\ttemp[i..i+3] = \"\
    ix\"\n\t\t\ti += 1\n\t\telsif temp[i] == \"x\" && temp[i+1] == \"x\" && temp[i+2]\
    \ == \"x\"\n\t\t\ttemp[i..i+2] = \"xc\"\n\t\t\ti += 1\n\t\telsif temp[i] == \"\
    x\" && temp[i+1] == \"x\"\n\t\t\ttemp[i..i+1] = \"xl\"\n\t\t\ti += 1\n\t\telsif\
    \ temp[i] == \"l\" && temp[i+1] == \"x\" && temp[i+2] == \"x\"", "  remainder\
    \ = number\n  result = ''\n  m = remainder / 1000\n  result += 'm' * m\n  remainder\
    \ -= m * 1000\n  d = remainder / 500\n  result += 'd' * d\n  remainder -= d *\
    \ 500\n  c = remainder / 100\n  result += 'c' * c\n  remainder -= c * 100\n  l\
    \ = remainder / 50\n  result += 'l' * l\n  remainder -= l * 50\n  x = remainder\
    \ / 10\n  result += 'x' * x\n  remainder -= x * 10\n  v = remainder / 5\n  result\
    \ += 'v' * v\n  remainder -= v * 5\n  i = remainder\n  result += 'i' * i\n  remainder\
    \ -= i\n  result\nend", "  roman_letters = ['i', 'v', 'x', 'l', 'c', 'd', 'm']\n\
    \  romans = []\n  current_index = 0\n  while number > 0\n    if number % 10 >\
    \ 3\n      if number % 10 == 4\n        romans.push(roman_letters[current_index])\n\
    \        romans.push(roman_letters[current_index + 1])\n      elsif number % 10\
    \ == 9\n        romans.push(roman_letters[current_index])\n        romans.push(roman_letters[current_index\
    \ + 2])\n      else\n        romans.push(roman_letters[current_index + 1])\n \
    \       (number % 10 - 5).times { romans.push(roman_letters[current_index]) }\n\
    \      end\n    else\n      number % 10.times { romans.push(roman_letters[current_index])\
    \ }\n    end\n    number /= 10\n    current_index += 2\n  end\n  return romans.reverse.join\n\
    end", "  # Your code here\nend", "  divmod_array = [1000, 500, 100, 50, 10, 5,\
    \ 1]\n  roman_array = %w(m d c l x v i)\n  roman_divmod_array = []\n  final_string\
    \ = \"\"\n  divmod_array.each_with_index do |div, index|\n    if index % 2 ==\
    \ 0\n      number, remainder = number.divmod(div)\n      roman_divmod_array <<\
    \ number << remainder\n    else\n      roman_divmod_array << number\n    end\n\
    \  end\n  roman_divmod_array.each_with_index do |n, i|\n    if (i + 1) % 2 ==\
    \ 0\n      if n == 4\n        final_string += roman_array[i - 1] + roman_array[i\
    \ + 1]\n      elsif n == 9\n        final_string += roman_array[i - 3] + roman_array[i\
    \ - 1]\n      elsif n == 5\n        final_string += roman_array[i + 1]\n     \
    \ else\n        final_string += roman_array[i] * n\n      end\n    end\n  end\n\
    \  final_string\nend", "  roman_letters = {\n    1000 => 'm', 900 => 'cm', 500\
    \ => 'd', 400 => 'cd',\n    100 => 'c', 90 => 'xc', 50 => 'l', 40 => 'xl',\n \
    \   10 => 'x', 9 => 'ix', 5 => 'v', 4 => 'iv',\n    1 => 'i'\n  }\n  roman_letters.each_with_object('')\
    \ do |(arabic, roman), result|\n    result << roman * (number / arabic)\n    number\
    \ %= arabic\n  end\nend", "  # your code here\nend", "  result = \"\"\n  result\
    \ += \"m\" * (number / 1000)\n  result += \"d\" * (number % 1000 / 500)\n  result\
    \ += \"c\" * (number % 500 / 100)\n  result += \"l\" * (number % 100 / 50)\n \
    \ result += \"x\" * (number % 50 / 10)\n  result += \"v\" * (number % 10 / 5)\n\
    \  result += \"i\" * (number % 5)\n  result\nend", "  roman_string = ''\n  roman_numerals\
    \ = {\n    1 => 'i',\n    4 => 'iv',\n    5 => 'v',\n    9 => 'ix',\n    10 =>\
    \ 'x',\n    40 => 'xl',\n    50 => 'l',\n    90 => 'xc',\n    100 => 'c',\n  \
    \  400 => 'cd',\n    500 => 'd',\n    900 => 'cm',\n    1000 => 'm'\n  }\n  roman_numerals.reverse_each\
    \ do |key, value|\n    while number >= key\n      roman_string << value\n    \
    \  number -= key\n    end\n  end\n  roman_string\nend", "  number.to_roman.downcase\n\
    end", "  if number <= 0 || number > 1000\n    return \"Invalid Number\"\n  end\n\
    \  result = ''\n  mini_roman_hash = {1000 => 'm', 900 => 'cm', 500 => 'd', 400\
    \ => 'cd', 100 => 'c', 90 => 'xc', 50 => 'l', 40 => 'xl', 10 => 'x', 9 => 'ix',\
    \ 5 => 'v', 4 => 'iv', 1 => 'i'}\n  mini_roman_hash.each do |key, value|\n   \
    \ while number >= key\n      result += value\n      number -= key\n    end\n \
    \ end\n  result\nend", "    #your code here\n    mappings = {1000 => 'm', 900\
    \ => 'cm', 500 => 'd', 400 => 'cd', 100 => 'c', 90 => 'xc', 50 => 'l', 40 => 'xl',\
    \ 10 => 'x', 9 => 'ix', 5 => 'v', 4 => 'iv', 1 => 'i'}\n    output = \"\"\n  \
    \  mappings.each do |num, roman|\n        while number >= num\n            output\
    \ += roman\n            number -= num\n        end\n    end\n    output\nend",
  "  roman = \"\"\n  roman = roman + \"m\" * (number / 1000)\n  roman = roman + \"\
    d\" * (number % 1000 / 500)\n  roman = roman + \"c\" * (number % 500 / 100)\n\
    \  roman = roman + \"l\" * (number % 100 / 50)\n  roman = roman + \"x\" * (number\
    \ % 50 / 10)\n  roman = roman + \"v\" * (number % 10 / 5)\n  roman = roman + \"\
    i\" * (number % 5 / 1)\n  roman\nend", "  mini_roman_numeral = []\n  number.to_s.chars.each_with_index\
    \ do |digit, index|\n    digit = digit.to_i", "  thousand = (number / 1000)\n\
    \  hundred = (number % 1000 / 100)\n  ten = (number % 100 / 10)\n  one = (number\
    \ % 10)", "  roman = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n\
    \    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 =>\
    \ 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1\
    \ => 'i'\n  }\n  result = \"\"\n  roman.each do |key, value|\n    result << value\
    \ * (number / key)\n    number = number % key\n  end\n  result\nend", "  roman_numeral\
    \ = {1000 => 'm', 500 => 'd', 100 => 'c', 50 => 'l', 10 => 'x', 5 => 'v', 1 =>\
    \ 'i'}\n  output = ''\n  roman_numeral.each do |k, v|\n    output += (v * (number\
    \ / k))\n    number = number % k\n  end\n  output\nend", "  # write your code\
    \ here\nend", "  arr = [[\"M\", 1000], [\"CM\", 900], [\"D\", 500], [\"CD\", 400],\
    \ [\"C\", 100], [\"XC\", 90], [\"L\", 50], [\"XL\", 40], [\"X\", 10], [\"IX\"\
    , 9], [\"V\", 5], [\"IV\", 4], [\"I\", 1]]\n  arr.map { |a| a * (number / a[1])\
    \ }.inject(:+).join.downcase\nend", "  roman_numerals = {\n    1000 => 'm',\n\
    \    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90\
    \ => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n\
    \    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each\
    \ do |k, v|\n    result << v * (number / k)\n    number = number % k\n  end\n\
    \  result\nend", "  # ===== code goes here =====\n  num = ''\n  return 'i' if\
    \ number == 1\n  return 'v' if number == 5\n  return 'x' if number == 10\n  return\
    \ 'l' if number == 50\n  return 'c' if number == 100\n  return 'd' if number ==\
    \ 500\n  return 'm' if number == 1000\n  roman = {'i' => 1, 'v' => 5, 'x' => 10,\
    \ 'l' => 50, 'c' => 100, 'd' => 500, 'm' => 1000}\n  roman.reverse_each do |k,\
    \ v|\n    quotient = number / v\n    remainder = number % v\n    if quotient >=\
    \ 4\n      if (v == 50 && remainder >= 40) || (v == 500 && remainder >= 400)\n\
    \        # num << 'c'\n        num << 'c' * (quotient - 4)\n        num << 'l'\n\
    \        num << 'x' * ((number - 50) / 10)\n      elsif (v == 100 && remainder\
    \ >= 90) || (v == 1000 && remainder >= 900)\n        # num << 'c'\n        num\
    \ << 'c' * (quotient - 4)\n        num << 'd'\n        num << 'x' * ((number -\
    \ 100) / 10)\n      else\n        num << k\n        num << 'i' * (quotient - 4)\n\
    \      end\n    else\n      num << k * quotient\n    end\n    number = remainder\n\
    \  end\n  num\nend", "  result = \"\"\n  roman_numerals.each do |key, value|\n\
    \    while number >= key\n      result << value\n      number -= key\n    end\n\
    \  end\n  result\nend", "  # your code here\nend", "  remainder = number\n  roman_numeral\
    \ = \"\"\n  one_decimal = 1000 / 10\n  remaining_decimal = 1000 % 10\n  one_hundred\
    \ = one_decimal / 10\n  remaining_hundred = one_decimal % 10\n  one_thousand =\
    \ one_hundred / 10\n  remaining_thousand = one_hundred % 10", "  raise ArgumentError.new('Number\
    \ must be between 1 and 1000') unless (1..1000).include?(number)\n  arabic_to_roman_mapping\
    \ = {\n    1 => 'i',\n    4 => 'iv',\n    5 => 'v',\n    9 => 'ix',\n    10 =>\
    \ 'x',\n    40 => 'xl',\n    50 => 'l',\n    90 => 'xc',\n    100 => 'c',\n  \
    \  400 => 'cd',\n    500 => 'd',\n    900 => 'cm',\n    1000 => 'm'\n  }\n  roman_equivalent\
    \ = ''\n  arabic_to_roman_mapping.keys.reverse.each do |key|\n    while number\
    \ >= key\n      roman_equivalent << arabic_to_roman_mapping[key]\n      number\
    \ -= key\n    end\n  end\n  roman_equivalent\nend", "  result = \"\"\n  while\
    \ number > 0\n    if number >= 500\n      number -= 500\n      result += \"d\"\
    \n    elsif number >= 100\n      number -= 100\n      result += \"c\"\n    elsif\
    \ number >= 50\n      number -= 50\n      result += \"l\"\n    elsif number >=\
    \ 10\n      number -= 10\n      result += \"x\"\n    elsif number >= 5\n     \
    \ number -= 5\n      result += \"v\"\n    elsif number >= 1\n      number -= 1\n\
    \      result += \"i\"\n    end\n  end\n  result\nend", "  roman_numeral = \"\"\
    \n  m_length = 0\n  d_length = 0\n  c_length = 0\n  l_length = 0\n  x_length =\
    \ 0\n  v_length = 0\n  i_length = 0", "  # 1: I, 5: V, 10: X, 50: L, 100: C, 500:\
    \ D, 1000: M\n  # 2: II, 3: III, 4: IV, 6: VI, 7: VII, 8: VIII, 9: IX\n  # 11:\
    \ XI, 12: XII, 14: XIV, 15: XV, 16: XVI, 17: XVII, 18: XVIII, 19: XIX\n  # 20:\
    \ XX, 30: XXX, 40: XL, 60: LX, 70: LXX, 80: LXXX, 90: XC\n  # 21: XXI, 22: XXII,\
    \ 23: XXIII, 24: XXIV, 25: XXV, 26: XXVI, 27: XXVII, 28: XXVIII, 29: XXIX\n  #\
    \ 31: XXXI, 32: XXXII, 33: XXXIII, 34: XXXIV, 35: XXXV, 36: XXXVI, 37: XXXVII,\
    \ 38: XXXVIII, 39: XXXIX\n  # 41: XLI, 42: XLII, 43: XLIII, 44: XLIV, 45: XLV,\
    \ 46: XLVI, 47: XLVII, 48: XLVIII, 49: XLIX\n  # 51: LI, 52: LII, 53: LIII, 54:\
    \ LIV, 55: LV, 56: LVI, 57: LVII, 58: LVIII, 59: LIX\n  # 61: LXI, 62: LXII, 63:\
    \ LXIII, 64: LXIV, 65: LXV, 66: LXVI, 67: LXVII, 68: LXVIII, 69: LXIX\n  # 71:\
    \ LXXI, 72: LXXII, 73: LXXIII, 74: LXXIV, 75: LXXV, 76: LXXVI, 77: LXXVII, 78:\
    \ LXXVIII, 79: LXXIX\n  # 81: LXXXI, 82: LXXXII, 83: LXXXIII, 84: LXXXIV, 85:\
    \ LXXXV, 86: LXXXVI, 87: LXXXVII, 88: LXXXVIII, 89: LXXXIX\n  # 91: XCI, 92: XCII,\
    \ 93: XCIII, 94: XCIV, 95: XCV,", "\nend", end, "\trm1 = [\"i\", \"x\", \"c\"\
    , \"m\"]\n\trm5 = [\"v\", \"l\", \"d\"]\n\tif number == 0\n\t\treturn \"\"\n\t\
    end\n\tif number < 4\n\t\treturn rm1[0] * number\n\tend\n\tif number < 9\n\t\t\
    return rm5[0] + rm1[0] * (number - 5)\n\tend\n\tif number < 40\n\t\treturn rm1[1]\
    \ + int_to_mini_roman(number - 10)\n\tend\n\tif number < 90\n\t\treturn rm5[1]\
    \ + int_to_mini_roman(number - 50)\n\tend\n\tif number < 400\n\t\treturn rm1[2]\
    \ + int_to_mini_roman(number - 100)\n\tend\n\tif number < 900\n\t\treturn rm5[2]\
    \ + int_to_mini_roman(number - 500)\n\tend\n\tif number < 4000\n\t\treturn rm1[3]\
    \ + int_to_mini_roman(number - 1000)\n\tend\nend", "  result = []\n  roman_numerals\
    \ = {\n    'M' => 1000,\n    'CM' => 900,\n    'D' => 500,\n    'CD' => 400,\n\
    \    'C' => 100,\n    'XC' => 90,\n    'L' => 50,\n    'XL' => 40,\n    'X' =>\
    \ 10,\n    'IX' => 9,\n    'V' => 5,\n    'IV' => 4,\n    'I' => 1\n  }\n  roman_numerals.each\
    \ do |roman, num|\n    next if number < num\n    remainder = number % num\n  \
    \  while remainder < number\n      result << roman\n      number -= num\n    end\n\
    \  end\n  result.join('').downcase\nend", "  roman_numeral = ''\n  if number >=\
    \ 1000\n    roman_numeral += 'm'\n    number -= 1000\n  end\n  if number >= 900\n\
    \    roman_numeral += 'cm'\n    number -= 900\n  end\n  if number >= 500\n   \
    \ roman_numeral += 'd'\n    number -= 500\n  end\n  if number >= 400\n    roman_numeral\
    \ += 'cd'\n    number -= 400\n  end\n  if number >= 100\n    roman_numeral +=\
    \ 'c' * (number / 100)\n    number -= 100 * (number / 100)\n  end\n  if number\
    \ >= 90\n    roman_numeral += 'xc'\n    number -= 90\n  end\n  if number >= 50\n\
    \    roman_numeral += 'l'\n    number -= 50\n  end\n  if number >= 40\n    roman_numeral\
    \ += 'xl'\n    number -= 40\n  end\n  if number >= 10\n    roman_numeral += 'x'\
    \ * (number / 10)\n    number -= 10 * (number / 10)\n  end\n  if number >= 9\n\
    \    roman_numeral += 'ix'\n    number -= 9\n  end\n  if number >= 5\n    roman_numeral\
    \ += 'v'\n    number -= 5\n  end\n  if number >= 4\n    roman_numeral += 'iv'\n\
    \    number -= 4\n  end\n  if number >= 1\n    roman_numeral += 'i' * number\n\
    \  end\n  roman_numeral\nend", "  numeral = \"\"\n  if number <= 3\n    numeral\
    \ << \"i\" * number\n  elsif number == 4\n    numeral << \"iv\"\n  elsif number\
    \ >= 5 && number <= 8\n    numeral << \"v\" + (\"i\" * (number - 5))\n  elsif\
    \ number == 9\n    numeral << \"ix\"\n  elsif number >= 10 && number <= 39\n \
    \   numeral << \"x\" * (number / 10) + int_to_mini_roman(number % 10)\n  elsif\
    \ number >= 40 && number <= 49\n    numeral << \"xl\" + int_to_mini_roman(number\
    \ % 10)\n  elsif number >= 50 && number <= 89\n    numeral << \"l\" + int_to_mini_roman(number\
    \ % 10)\n  elsif number >= 90 && number <= 99\n    numeral << \"xc\" + int_to_mini_roman(number\
    \ % 10)\n  elsif number >= 100 && number <= 399\n    numeral << \"c\" * (number\
    \ / 100) + int_to_mini_roman(number % 100)\n  elsif number >= 400 && number <=\
    \ 499\n    numeral << \"cd\" + int_to_mini_roman(number % 100)\n  elsif number\
    \ >= 500 && number <= 899\n    numeral << \"d\" + int_to_mini_roman(number % 100)\n\
    \  elsif number >= 900 && number <= 999\n    numeral << \"cm\" + int_to_mini_roman(number\
    \ % 100)\n  elsif number == 1000\n    numeral << \"m\"\n  end\n  numeral\nend",
  "  # Your code here\nend", "  roman = \"\"\n  return roman << \"i\"*number if number\
    \ <= 3\n  roman << \"i\"*(number%5)\n  if number == 4\n    roman << \"iv\"\n \
    \ elsif number == 9\n    roman << \"ix\"\n  elsif number == 10\n    roman << \"\
    x\"\n  elsif number <= 30\n    roman.prepend(\"x\"*(number/10))\n  elsif number\
    \ < 40\n    roman.prepend(\"xxx\"*(number/30))\n    roman << \"x\"*(number%30/10)\n\
    \  elsif number == 40\n    roman.prepend(\"xxx\")\n    roman << \"xl\"\n  elsif\
    \ number == 90\n    roman.prepend(\"xxx\")\n    roman << \"xc\"\n  elsif number\
    \ == 100\n    roman.prepend(\"xxx\")\n    roman << \"c\"\n  elsif number <= 300\n\
    \    roman.prepend(\"c\"*(number/100))\n  elsif number < 400\n    roman.prepend(\"\
    ccc\"*(number/300))\n    roman << \"c\"*(number%300/100)\n  elsif number == 400\n\
    \    roman.prepend(\"ccc\")\n    roman << \"cd\"\n  elsif number == 900\n    roman.prepend(\"\
    ccc\")\n    roman << \"cm\"\n  elsif number == 1000\n    roman.prepend(\"ccc\"\
    )\n    roman << \"m\"\n  end\n  roman\nend", "  # get the number of thousands\n\
    \  # get the number of hundreds\n  # get the number of tens\n  # get the number\
    \ of ones\n  # add the corresponding roman numerals\n  # return the final string\n\
    end", "  # define the int to roman correspondence\n  corr = {1000 => 'm', 900\
    \ => 'cm', 500 => 'd', 400 => 'cd', 100 => 'c',\n    90 => 'xc', 50 => 'l', 40\
    \ => 'xl', 10 => 'x', 9 => 'ix', 5 => 'v',\n    4 => 'iv', 1 => 'i'}\n  # initialize\
    \ the answer\n  answer = ''\n  # for each integer, roman pair in corr...\n  corr.each\
    \ do |int, roman|\n    # calculate the number of times the roman numeral appears\n\
    \    times = number / int\n    # update the answer\n    answer += roman * times\n\
    \    # update the number\n    number -= int * times\n  end\n  return answer\n\
    end", "  # TODO\nend", "  result = \"\"\n  result += \"i\" * (number % 5)\n  if\
    \ number == 4\n    result = \"iv\"\n  elsif number == 9\n    result = \"ix\"\n\
    \  elsif number >= 10 && number < 40\n    result = \"x\" + int_to_mini_roman(number\
    \ % 10)\n  elsif number == 40\n    result = \"xl\"\n  elsif number == 49\n   \
    \ result = \"il\"\n  elsif number >= 50 && number < 90\n    result = \"l\" + int_to_mini_roman(number\
    \ % 10)\n  elsif number == 90\n    result = \"xc\"\n  elsif number == 99\n   \
    \ result = \"ic\"\n  elsif number >= 100 && number < 400\n    result = \"c\" +\
    \ int_to_mini_roman(number % 100)\n  elsif number == 400\n    result = \"cd\"\n\
    \  elsif number == 499\n    result = \"id\"\n  elsif number >= 500 && number <\
    \ 900\n    result = \"d\" + int_to_mini_roman(number % 100)\n  elsif number ==\
    \ 900\n    result = \"cm\"\n  elsif number == 999\n    result = \"im\"\n  elsif\
    \ number >= 1000\n    result = \"m\" + int_to_mini_roman(number % 1000)\n  end\n\
    \  result\nend", "  number.to_s.chars.map do |char|\n    case char\n    when '1'\
    \ then 'i'\n    when '2' then 'ii'\n    when '3' then 'iii'\n    when '4' then\
    \ 'iv'\n    when '5' then 'v'\n    when '6' then 'vi'\n    when '7' then 'vii'\n\
    \    when '8' then 'viii'\n    when '9' then 'ix'\n    end\n  end.join\nend",
  "  roman_numerals = {1000 => 'm', 900 => 'cm', 500 => 'd', 400 => 'cd', 100 => 'c',\
    \ 90 => 'xc', 50 => 'l', 40 => 'xl', 10 => 'x', 9 => 'ix', 5 => 'v', 4 => 'iv',\
    \ 1 => 'i'}\n  str = ''\n  roman_numerals.each do |k, v|\n    str << v * (number\
    \ / k)\n    number %= k\n  end\n  str\nend", "\troman = ''\n\troman += 'm' * (number\
    \ / 1000)\n\troman += 'd' * (number % 1000 / 500)\n\troman += 'c' * (number %\
    \ 500 / 100)\n\troman += 'l' * (number % 100 / 50)\n\troman += 'x' * (number %\
    \ 50 / 10)\n\troman += 'v' * (number % 10 / 5)\n\troman += 'i' * (number % 5 /\
    \ 1)\n\treturn roman\nend", "  result = ''\n  numeral_hash = {\n    'M' => 1000,\n\
    \    'CM' => 900,\n    'D' => 500,\n    'CD' => 400,\n    'C' => 100,\n    'XC'\
    \ => 90,\n    'L' => 50,\n    'XL' => 40,\n    'X' => 10,\n    'IX' => 9,\n  \
    \  'V' => 5,\n    'IV' => 4,\n    'I' => 1\n  }\n  numeral_hash.each do |roman,\
    \ arabic|\n    while number >= arabic\n      result << roman\n      number -=\
    \ arabic\n    end\n  end\n  result.downcase\nend", "  require 'pry'\n  # binding.pry\n\
    \  roman_num = ''\n  thousands = number / 1000\n  thousands.times { roman_num\
    \ << 'm' }\n  number -= thousands * 1000\n  roman_num << 'c' * (number / 100)\n\
    \  number -= number / 100 * 100\n  roman_num << 'x' * (number / 10)\n  number\
    \ -= number / 10 * 10\n  roman_num << 'i' * number\n  roman_num.gsub!('dcccc',\
    \ 'cm')\n  roman_num.gsub!('cccc', 'cd')\n  roman_num.gsub!('lxxxx', 'xc')\n \
    \ roman_num.gsub!('xxxx', 'xl')\n  roman_num.gsub!('viiii', 'ix')\n  roman_num.gsub!('iiii',\
    \ 'iv')\n  roman_num\nend", "\nend", "  if number > 1000 || number < 1\n    'Number\
    \ must be between 1 and 1000'\n  else\n    roman_numerals = {\n      1000 => 'm',\n\
    \      900 => 'cm',\n      500 => 'd',\n      400 => 'cd',\n      100 => 'c',\n\
    \      90 => 'xc',\n      50 => 'l',\n      40 => 'xl',\n      10 => 'x',\n  \
    \    9 => 'ix',\n      5 => 'v',\n      4 => 'iv',\n      1 => 'i'\n    }\n  \
    \  result = ''\n    roman_numerals.each do |key, value|\n      until number <\
    \ key\n        result += value\n        number -= key\n      end\n    end\n  \
    \  result\n  end\nend", "  # Your code here.\nend", end, "  # TODO: Return the\
    \ mini roman numeral as a string\nend", "  roman_numerals = {\n    1 => 'i',\n\
    \    4 => 'iv',\n    5 => 'v',\n    9 => 'ix',\n    10 => 'x',\n    40 => 'xl',\n\
    \    50 => 'l',\n    90 => 'xc',\n    100 => 'c',\n    400 => 'cd',\n    500 =>\
    \ 'd',\n    900 => 'cm',\n    1000 => 'm'\n  }\n  result = \"\"\n  roman_numerals.keys.reverse.each\
    \ do |value|\n    if number >= value\n      result << roman_numerals[value] *\
    \ (number / value)\n      number = number % value\n    end\n  end\n  result\n\
    end", "  roman_numeral = \"\"\n  roman_values = { 1000 => \"m\", 500 => \"d\"\
    , 100 => \"c\", 50 => \"l\", 10 => \"x\", 5 => \"v\", 1 => \"i\" }\n  roman_values.each\
    \ do |decimal, numeral|\n    roman_numeral << numeral * (number / decimal)\n \
    \   number %= decimal\n  end\n  # 4s and 9s are represented by IV and IX instead\
    \ of IIII and VIIII.\n  # 40s and 90s are represented by XL and XC instead of\
    \ XXXX and LXXXX.\n  # 400s and 900s are represented by CD and CM instead of CCCC\
    \ and DCCCC.\n  roman_numeral.gsub!(\"iiiii\", \"v\")\n  roman_numeral.gsub!(\"\
    iiii\", \"iv\")\n  roman_numeral.gsub!(\"vv\", \"x\")\n  roman_numeral.gsub!(\"\
    viv\", \"ix\")\n  roman_numeral.gsub!(\"xxxxx\", \"l\")\n  roman_numeral.gsub!(\"\
    xxxx\", \"xl\")\n  roman_numeral.gsub!(\"ll\", \"c\")\n  roman_numeral.gsub!(\"\
    lxl\", \"xc\")\n  roman_numeral.gsub!(\"ccccc\", \"d\")\n  roman_numeral.gsub!(\"\
    cccc\", \"cd\")\n  roman_numeral.gsub!(\"dd\", \"m\")\n  roman_numeral.gsub!(\"\
    dcd\", \"cm\")\n  roman_numeral.downcase\nend", "  # Enter your code here.\nend",
  "  if number > 1000\n    raise \"Invalid input\"\n  end\n  if number == 1000\n \
    \   return \"m\"\n  end\n  result = \"\"\n  result += \"m\" * (number / 1000)\n\
    \  number = number % 1000\n  if number >= 900\n    result += \"cm\"\n    number\
    \ -= 900\n  end\n  if number >= 500\n    result += \"d\"\n    number -= 500\n\
    \  end\n  if number >= 400\n    result += \"cd\"\n    number -= 400\n  end\n \
    \ result += \"c\" * (number / 100)\n  number = number % 100\n  if number >= 90\n\
    \    result += \"xc\"\n    number -= 90\n  end\n  if number >= 50\n    result\
    \ += \"l\"\n    number -= 50\n  end\n  if number >= 40\n    result += \"xl\"\n\
    \    number -= 40\n  end\n  result += \"x\" * (number / 10)\n  number = number\
    \ % 10\n  if number >= 9\n    result += \"ix\"\n    number -= 9\n  end\n  if number\
    \ >= 5\n    result += \"v\"\n    number -= 5\n  end\n  if number >= 4\n    result\
    \ += \"iv\"\n    number -= 4\n  end\n  result += \"i\" * number\n  return result\n\
    end", "\tones = [\"\",\"i\",\"ii\",\"iii\",\"iv\",\"v\",\"vi\",\"vii\",\"viii\"\
    ,\"ix\"]\n\ttens = [\"\",\"x\",\"xx\",\"xxx\",\"xl\",\"l\",\"lx\",\"lxx\",\"lxxx\"\
    ,\"xc\"]\n\thundreds = [\"\",\"c\",\"cc\",\"ccc\",\"cd\",\"d\",\"dc\",\"dcc\"\
    ,\"dccc\",\"cm\"]\n\tthousands = [\"\",\"m\",\"mm\",\"mmm\",\"mv\",\"v\",\"vm\"\
    ,\"vmm\",\"vmmm\",\"mx\"]\n\treturn thousands[number/1000] + hundreds[(number%1000)/100]\
    \ + tens[(number%100)/10] + ones[number%10]\nend", "  roman_numeral = ''\n  number.to_s.split('').reverse.each_with_index\
    \ do |digit, index|\n    if index == 0\n      roman_numeral.prepend(mini_convert(digit,\
    \ index))\n    else\n      roman_numeral.prepend(mini_convert(digit, index).downcase)\n\
    \    end\n  end\n  roman_numeral\nend", "  roman_value = \"\"\n  number = number.to_i\n\
    \  roman_values = {1000 => \"m\", 900 => \"cm\", 500 => \"d\", 400 => \"cd\",\
    \ 100 => \"c\", 90 => \"xc\", 50 => \"l\", 40 => \"xl\", 10 => \"x\", 9 => \"\
    ix\", 5 => \"v\", 4 => \"iv\", 1 => \"i\"}\n  roman_values.each do |key, value|\n\
    \    number_of_letters = number / key\n    number_of_letters.times do\n      roman_value\
    \ << value\n    end\n    number = number % key\n  end\n  roman_value\nend", " \
    \ # your solution here\nend", "  # Initializing variables\n  result = \"\"\n \
    \ num_char = \"\"\n  num = number\n  #\n  # Checking if the number is between\
    \ 1 and 1000\n  if num < 1 || num > 1000\n    puts \"Please, enter a number between\
    \ 1 and 1000\"\n  else\n    while num > 0\n      if num >= 100\n        if num\
    \ / 100 == 9\n          num_char = \"cm\"\n          num = num - 900\n       \
    \ elsif num / 100 == 4\n          num_char = \"cd\"\n          num = num - 400\n\
    \        else\n          num_char = \"d\" * (num / 500)\n          num = num %\
    \ 500\n          num_char = num_char + \"c\" * (num / 100)\n          num = num\
    \ % 100\n        end\n      elsif num >= 10\n        if num / 10 == 9\n      \
    \    num_char = \"xc\"\n          num = num - 90\n        elsif num / 10 == 4\n\
    \          num_char = \"xl\"\n          num = num - 40\n        else\n       \
    \   num_char = \"l\" * (num / 50)\n          num = num % 50\n          num_char\
    \ = num_char + \"x\" * (num / 10)\n          num = num % 10\n        end\n   \
    \   elsif num >= 1\n        if num == 9\n          num_char = \"ix\"\n       \
    \   num = num - 9\n        elsif num == 4\n          num_char = \"iv\"\n     \
    \     num = num - 4\n        else\n          num_char = \"v\" * (num / 5)\n  \
    \        num = num % 5\n          num_char = num_char + \"i\" * num\n        \
    \  num = 0\n        end\n      end\n      result = result + num_char\n    end\n\
    \  end\n  return result\nend", "\troman_numeral = \"\"\n\troman_mapping = {\n\t\
    \t1 => \"i\",\n\t\t5 => \"v\",\n\t\t10 => \"x\",\n\t\t50 => \"l\",\n\t\t100 =>\
    \ \"c\",\n\t\t500 => \"d\",\n\t\t1000 => \"m\"\n\t}\n\t# special case\n\tif number\
    \ == 1\n\t\treturn roman_mapping[1]\n\tend\n\t# subtract a thousand until it's\
    \ not greater than or equal to 1000\n\twhile number >= 1000\n\t\troman_numeral\
    \ << roman_mapping[1000]\n\t\tnumber -= 1000\n\tend\n\t# separate the number into\
    \ thousands, hundreds, tens, and ones\n\tthousands = number / 1000\n\thundreds\
    \ = (number % 1000) / 100\n\ttens = (number % 100) / 10\n\tones = number % 10\n\
    \t# convert hundreds\n\tif hundreds == 4\n\t\troman_numeral << roman_mapping[100]\
    \ + roman_mapping[500]\n\telsif hundreds == 9\n\t\troman_numeral << roman_mapping[100]\
    \ + roman_mapping[1000]\n\telse\n\t\tif hundreds >= 5\n\t\t\troman_numeral <<\
    \ roman_mapping[500]\n\t\t\thundreds -= 5\n\t\tend\n\t\thundreds.times do\n\t\t\
    \troman_numeral << roman_mapping[100]\n\t\tend\n\tend\n\t# convert tens\n\tif\
    \ tens == 4\n\t\troman_numeral << roman_mapping[10] + roman_mapping[50]\n\telsif\
    \ tens == 9\n\t\troman_numeral << roman_mapping[10] + roman_mapping[100]\n\telse\n\
    \t\tif tens >= 5\n\t\t\troman_numeral << roman_mapping[50]\n\t\t\ttens -= 5\n\t\
    \tend\n\t\ttens.times do\n\t\t\troman_numeral << roman_mapping[10]\n\t\tend\n\t\
    end\n\t# convert ones\n\tif ones == 4\n\t\troman_numeral << roman_mapping[1] +\
    \ roman_m", "  roman_str = \"\"\n  number_str = number.to_s\n  count = 0\n  number_str.length.times\
    \ do\n    digit = number_str[count].to_i\n    if count == 0\n      # ones\n  \
    \    if digit < 4\n        roman_str += \"i\" * digit\n      elsif digit == 4\n\
    \        roman_str += \"iv\"\n      elsif digit == 5\n        roman_str += \"\
    v\"\n      elsif digit > 5 && digit < 9\n        roman_str += \"v\" + \"i\" *\
    \ (digit - 5)\n      elsif digit == 9\n        roman_str += \"ix\"\n      end\n\
    \    elsif count == 1\n      # tens\n      if digit < 4\n        roman_str +=\
    \ \"x\" * digit\n      elsif digit == 4\n        roman_str += \"xl\"\n      elsif\
    \ digit == 5\n        roman_str += \"l\"\n      elsif digit > 5 && digit < 9\n\
    \        roman_str += \"l\" + \"x\" * (digit - 5)\n      elsif digit == 9\n  \
    \      roman_str += \"xc\"\n      end\n    elsif count == 2\n      # hundreds\n\
    \      if digit < 4\n        roman_str += \"c\" * digit\n      elsif digit ==\
    \ 4\n        roman_str += \"cd\"\n      elsif digit == 5\n        roman_str +=\
    \ \"d\"\n      elsif digit > 5 && digit < 9\n        roman_str += \"d\" + \"c\"\
    \ * (digit - 5)\n      elsif digit == 9\n        roman_str += \"cm\"\n      end\n\
    \    elsif count == 3\n      # thousands\n      roman_str += \"m\" * digit\n \
    \   end\n    count += 1\n  end\n  roman_str\nend", "  numeral = \"i\"\n  roman_letter\
    \ = [\"m\", \"d\", \"c\", \"l\", \"x\", \"v\", \"i\"]\n  amount = [1000, 500,\
    \ 100, 50, 10, 5, 1]\n  numeral_hash = Hash[roman_letter.zip(amount)]\n  test_number\
    \ = number\n  string = \"\"\n  (0..6).each do |num|\n    if test_number/numeral_hash[roman_letter[num]]\
    \ != 0\n      string << roman_letter[num] * (test_number/numeral_hash[roman_letter[num]])\n\
    \      test_number = test_number % numeral_hash[roman_letter[num]]\n    end\n\
    \  end\n  string\nend", "  roman = ''\n  roman = roman + 'm' * (number       \
    \ / 1000)\n  roman = roman + 'd' * (number % 1000 /  500)\n  roman = roman + 'c'\
    \ * (number %  500 /  100)\n  roman = roman + 'l' * (number %  100 /   50)\n \
    \ roman = roman + 'x' * (number %   50 /   10)\n  roman = roman + 'v' * (number\
    \ %   10 /    5)\n  roman = roman + 'i' * (number %    5 /    1)\n  roman\nend",
  "\t\n\t# Numerical characters", end, "  # TODO: implement me\nend", "  str_rom =\
    \ ''\n  thousand = number / 1000\n  hundread = (number - (thousand * 1000)) /\
    \ 100\n  dozen = (number - (thousand * 1000) - (hundread * 100)) / 10\n  unit\
    \ = number - (thousand * 1000) - (hundread * 100) - (dozen * 10)\n  str_rom <<\
    \ 'm' * thousand\n  str_rom << 'c' * hundread\n  str_rom << 'x' * dozen\n  str_rom\
    \ << 'i' * unit\n  str_rom\nend", "  # Fill out the body.\nend", "  c = 'c'\n\
    \  d = 'd'\n  l = 'l'\n  m = 'm'\n  x = 'x'\n  v = 'v'\n  i = 'i'\n  number =\
    \ number.to_s.split('')\n  if number.length == 1\n    if number[0].to_i <= 3\n\
    \      return i * number[0].to_i\n    elsif number[0].to_i == 4\n      return\
    \ i + v\n    elsif number[0].to_i > 4 && number[0].to_i < 9\n      return v +\
    \ i * (number[0].to_i - 5)\n    elsif number[0].to_i == 9\n      return i + x\n\
    \    end\n  elsif number.length == 2\n    if number[0].to_i <= 3\n      number[0]\
    \ = x * number[0].to_i\n    elsif number[0].to_i == 4\n      number[0] = x + l\n\
    \    elsif number[0].to_i > 4 && number[0].to_i < 9\n      number[0] = l + x *\
    \ (number[0].to_i - 5)\n    elsif number[0].to_i == 9\n      number[0] = x + c\n\
    \    end\n    if number[1].to_i <= 3\n      number[1] = i * number[1].to_i\n \
    \   elsif number[1].to_i == 4\n      number[1] = i + v\n    elsif number[1].to_i\
    \ > 4 && number[1].to_i < 9\n      number[1] = v + i * (number[1].to_i - 5)\n\
    \    elsif number[1].to_i == 9\n      number[1] = i + x\n    end\n    return number.join('')\n\
    \  elsif number.length == 3\n    if number[0].to_i <= 3\n      number[0] = c *\
    \ number[0].to_i\n    elsif number[0].to_i == 4\n      number[0] = c + d\n", " \
    \ digit_vals = [1000, 500, 100, 50, 10, 5, 1]\n  roman_numerals = %w(M D C L X\
    \ V I)\n  roman_to_mini_roman = { 'M' => 'm', 'D' => 'd', 'C' => 'c', 'L' => 'l',\
    \ 'X' => 'x', 'V' => 'v', 'I' => 'i' }\n  mini_roman_string = ''\n  n = number\n\
    \  while n > 0\n    indx = 0\n    v = digit_vals[indx]\n    while v > n\n    \
    \  indx += 1\n      v = digit_vals[indx]\n    end\n    mini_roman_string += roman_to_mini_roman[roman_numerals[indx]]\n\
    \    n -= v\n  end\n  mini_roman_string\nend", "  values = [1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1]\n  letters = %w(m cm d cd c xc l xl x ix v\
    \ iv i)\n  roman = ''\n  i = 0\n  while number > 0\n    while values[i] <= number\n\
    \      roman += letters[i]\n      number -= values[i]\n    end\n    i += 1\n \
    \ end\n  roman\nend", "  # Here is how you can remove any conditions of your solution.\n\
    \  # The method below works with any positive number.\n  # We only put the restriction\
    \ to make the exercise easier.\n  if number <= 0 || number > 1000\n    puts \"\
    Number must be in the range 1 <= num <= 1000\"\n    exit(1)\n  end", "  num =\
    \ number.to_s\n  roman = ''\n  if num.length == 4\n    roman += 'm' * (num[0].to_i)\n\
    \    num.slice!(0)\n  end\n  if num.length == 3\n    num = num.to_i\n    if num\
    \ < 4\n      roman += 'c' * num\n    elsif num == 4\n      roman += 'cd'\n   \
    \ elsif num < 9\n      roman += 'd' + 'c' * (num - 5)\n    elsif num == 9\n  \
    \    roman += 'cm'\n    end\n    num = num.to_s\n    num.slice!(0)\n  end\n  if\
    \ num.length == 2\n    num = num.to_i\n    if num < 4\n      roman += 'x' * num\n\
    \    elsif num == 4\n      roman += 'xc'\n    elsif num < 9\n      roman += 'l'\
    \ + 'x' * (num - 5)\n    elsif num == 9\n      roman += 'xc'\n    end\n    num\
    \ = num.to_s\n    num.slice!(0)\n  end\n  if num.length == 1\n    num = num.to_i\n\
    \    if num < 4\n      roman += 'i' * num\n    elsif num == 4\n      roman +=\
    \ 'iv'\n    elsif num < 9\n      roman += 'v' + 'i' * (num - 5)\n    elsif num\
    \ == 9\n      roman += 'ix'\n    end\n  end\n  return roman\nend", "  num = number\n\
    \  result = ''\n  roman_numerals = {\n    'M' => 1000,\n    'CM' => 900,\n   \
    \ 'D' => 500,\n    'CD' => 400,\n    'C' => 100,\n    'XC' => 90,\n    'L' =>\
    \ 50,\n    'XL' => 40,\n    'X' => 10,\n    'IX' => 9,\n    'V' => 5,\n    'IV'\
    \ => 4,\n    'I' => 1\n  }\n  roman_numerals.each do |k, v|\n    result << k *\
    \ (num / v)\n    num = num % v\n  end\n  result.downcase\nend", "    m = {\n \
    \       \"M\" => 1000,\n        \"CM\" => 900,\n        \"D\" => 500,\n      \
    \  \"CD\" => 400,\n        \"C\" => 100,\n        \"XC\" => 90,\n        \"L\"\
    \ => 50,\n        \"XL\" => 40,\n        \"X\" => 10,\n        \"IX\" => 9,\n\
    \        \"V\" => 5,\n        \"IV\" => 4,\n        \"I\" => 1\n    }\n    roman\
    \ = \"\"\n    m.each do |k, v|\n        roman << k*(number / v)\n        number\
    \ = number % v\n    end\n    roman.downcase\nend\nputs int_to_mini_roman(19)\n\
    puts int_to_mini_roman(152)\nputs int_to_mini_roman(426)", "  roman_values = {\n\
    \    1 => 'i',\n    5 => 'v',\n    10 => 'x',\n    50 => 'l',\n    100 => 'c',\n\
    \    500 => 'd',\n    1000 => 'm'\n  }\n  values = [1000, 500, 100, 50, 10, 5,\
    \ 1]\n  result = ''\n  values.each do |value|\n    if number >= value\n      quotient\
    \ = number / value\n      result << roman_values[value] * quotient\n      number\
    \ = number % value\n    end\n  end\n  result\nend", "    # Your code here\nend",
  "\t# This method converts an integer to a Roman numeral\n\tdef int_to_roman(number)\n\
    \t\troman_numerals = [['I', 'V'], ['X', 'L'], ['C', 'D'], ['M']]\n\t\tones_digit\
    \ = number % 10\n\t\ttens_digit = (number / 10) % 10\n\t\thundreds_digit = (number\
    \ / 100) % 10\n\t\tthousands_digit = (number / 1000) % 10\n\t\treturn 'M' * thousands_digit\
    \ + roman_numerals[2][0] * hundreds_digit + roman_numerals[1][0] * tens_digit\
    \ + roman_numerals[0][0] * ones_digit if ones_digit < 4\n\t\treturn 'M' * thousands_digit\
    \ + roman_numerals[2][0] * hundreds_digit + roman_numerals[1][0] * tens_digit\
    \ + roman_numerals[0][1] if ones_digit == 4\n\t\treturn 'M' * thousands_digit\
    \ + roman_numerals[2][0] * hundreds_digit + roman_numerals[1][0] * tens_digit\
    \ + roman_numerals[0][1] + roman_numerals[0][0] * (ones_digit - 5) if ones_digit\
    \ < 9\n\t\treturn 'M' * thousands_digit + roman_numerals[2][0] * hundreds_digit\
    \ + roman_numerals[1][0] * tens_digit + roman_numerals[1][1] if ones_digit ==\
    \ 9\n\tend\n\traise \"You cannot convert a number below 1\" if number < 1\n\t\
    raise \"You cannot convert a number above 1000\" if number > 1000\n\tint_to_roman(number).downcase\n\
    end", "\tmap = [['m', 1000], ['d', 500], ['c', 100], ['l', 50], ['x', 10], ['v',\
    \ 5], ['i', 1]]\n\tresult = ''\n\tmap.each do |letter, value|\n\t\tresult << letter\
    \ * (number / value)\n\t\tnumber = number % value\n\tend\n\tresult\nend", "  roman\
    \ = 'i' * number\n  roman.gsub!('iiiii', 'v')\n  roman.gsub!('iiii', 'iv')\n \
    \ roman.gsub!('vv', 'x')\n  roman.gsub!('viv', 'ix')\n  roman.gsub!('xxxxx', 'l')\n\
    \  roman.gsub!('xxxx', 'xl')\n  roman.gsub!('ll', 'c')\n  roman.gsub!('lxl', 'xc')\n\
    \  roman.gsub!('ccccc', 'd')\n  roman.gsub!('cccc', 'cd')\n  roman.gsub!('dd',\
    \ 'm')\n  roman.gsub!('dcd', 'cm')\n  roman\nend", "  if number < 1 or number\
    \ > 1000\n    raise \"Cannot convert numbers less than 1 or greater than 1000\"\
    \n  end\n  roman_numerals = {\n    1000 => 'm',\n    900 => 'cm',\n    500 =>\
    \ 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n \
    \   40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n\
    \    1 => 'i'\n  }\n  roman_numeral = ''\n  remainder = number\n  roman_numerals.each\
    \ do |number, roman|\n    div = remainder / number\n    roman_numeral += roman\
    \ * div\n    remainder = remainder % number\n  end\n  roman_numeral\nend", " \
    \ raise NotImplementedError, \"TODO: determine the mini-roman numeral for #{number}\"\
    \nend", "  mini_roman_arr = []\n  # Create an array with the miniroman equivalent\
    \ of each number\n  while number > 0\n    # Five hundreds\n    if number >= 500\n\
    \      mini_roman_arr << 'd'\n      number -= 500\n    # Four hundreds\n    elsif\
    \ number >= 400\n      mini_roman_arr << 'cd'\n      number -= 400\n    # One\
    \ hundred\n    elsif number >= 100\n      mini_roman_arr << 'c'\n      number\
    \ -= 100\n    # Ninety\n    elsif number >= 90\n      mini_roman_arr << 'xc'\n\
    \      number -= 90\n    # Fifty\n    elsif number >= 50\n      mini_roman_arr\
    \ << 'l'\n      number -= 50\n    # Forty\n    elsif number >= 40\n      mini_roman_arr\
    \ << 'xl'\n      number -= 40\n    # Ten\n    elsif number >= 10\n      mini_roman_arr\
    \ << 'x'\n      number -= 10\n    # Nine\n    elsif number >= 9\n      mini_roman_arr\
    \ << 'ix'\n      number -= 9\n    # Five\n    elsif number >= 5\n      mini_roman_arr\
    \ << 'v'\n      number -= 5\n    # Four\n    elsif number >= 4\n      mini_roman_arr\
    \ << 'iv'\n      number -= 4\n    # One\n    elsif number >= 1\n      mini_roman_arr\
    \ << 'i'\n      number -= 1\n    end\n  end\n  # Join array to a string\n  mini_roman_arr.join\n\
    end", "  if number == 0\n    return ''\n  end\n  remainder = number % 10\n  digits\
    \ = ['i', 'v', 'x', 'l', 'c', 'd', 'm']\n  roman_numerals = ['i', 'iv', 'v', 'ix',\
    \ 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  index = remainder*2 - 2\n\
    \  if remainder == 9\n    index += 1\n  end\n  return int_to_mini_roman(number/10)\
    \ + roman_numerals[index]\nend", "\tarabic_numerals = [1000, 500, 100, 50, 10,\
    \ 5, 1]\n\troman_numerals = ['m', 'd', 'c', 'l', 'x', 'v', 'i']\n\tresult = ''\n\
    \ti = 0\n\twhile number > 0\n\t\tif number >= arabic_numerals[i]\n\t\t\tnumber\
    \ -= arabic_numerals[i]\n\t\t\tresult += roman_numerals[i]\n\t\telsif i % 2 ==\
    \ 0 && number >= arabic_numerals[i] - arabic_numerals[i + 2]\n\t\t\tnumber -=\
    \ arabic_numerals[i] - arabic_numerals[i + 2]\n\t\t\tresult += roman_numerals[i\
    \ + 2] + roman_numerals[i]\n\t\telsif i % 2 == 1 && number >= arabic_numerals[i]\
    \ - arabic_numerals[i + 1]\n\t\t\tnumber -= arabic_numerals[i] - arabic_numerals[i\
    \ + 1]\n\t\t\tresult += roman_numerals[i + 1] + roman_numerals[i]\n\t\telse\n\t\
    \t\ti += 1\n\t\tend\n\tend\n\tresult\nend", "  roman_str = ''\n  roman_hash =\
    \ {'M' => 1000, 'CM' => 900, 'D' => 500, 'CD' => 400, 'C' => 100, 'XC' => 90,\
    \ 'L' => 50, 'XL' => 40, 'X' => 10, 'IX' => 9, 'V' => 5, 'IV' => 4, 'I' => 1}\n\
    \  roman_hash.each do |key, value|\n    if number >= value\n      roman_str +=\
    \ key * (number / value)\n      number %= value\n    end\n  end\n  roman_str.downcase\n\
    end", "  single_numerals = ['i', 'v', 'x', 'l', 'c', 'd', 'm']\n  multi_numerals\
    \ = ['', '', '', '', '', '', '']\n  result = ''\n  num_string = number.to_s\n\
    \  num_string.chars.reverse.each_with_index do |digit, index|\n    digit = digit.to_i\n\
    \    if digit == 9\n      multi_numerals[index] = single_numerals[index] + single_numerals[index\
    \ + 2]\n    elsif digit == 4\n      multi_numerals[index] = single_numerals[index]\
    \ + single_numerals[index + 1]\n    else\n      multi_numerals[index] = ''\n \
    \     multi_numerals[index] += single_numerals[index + 1] * (digit / 5) if digit\
    \ > 4\n      multi_numerals[index] += single_numerals[index] * (digit % 5)\n \
    \   end\n  end\n  multi_numerals.reverse.each { |numeral| result += numeral }\n\
    \  result\nend", "  roman_hash = {\n                \"M\" => 1000,\n         \
    \       \"CM\" => 900,\n                \"D\" => 500,\n                \"CD\"\
    \ => 400,\n                \"C\" => 100,\n                \"XC\" => 90,\n    \
    \            \"L\" => 50,\n                \"XL\" => 40,\n                \"X\"\
    \ => 10,\n                \"IX\" => 9,\n                \"V\" => 5,\n        \
    \        \"IV\" => 4,\n                \"I\" => 1\n              }\n  roman_numeral\
    \ = \"\"\n  roman_hash.each do |k, v|\n    roman_numeral << k * (number / v)\n\
    \    number = number % v\n  end\n  roman_numeral.downcase\nend", "    case number\n\
    \    when 1..3\n        return \"i\" * number\n    when 4\n        return \"iv\"\
    \n    when 5\n        return \"v\"\n    when 6..8\n        return \"v\" + \"i\"\
    \ * (number-5)\n    when 9\n        return \"ix\"\n    when 10\n        return\
    \ \"x\"\n    when 11..13\n        return \"x\" + \"i\" * (number-10)\n    when\
    \ 14\n        return \"xiv\"\n    when 15\n        return \"xv\"\n    when 16..18\n\
    \        return \"xv\" + \"i\" * (number-15)\n    when 19\n        return \"xix\"\
    \n    when 20\n        return \"xx\"\n    when 21..23\n        return \"xx\" +\
    \ \"i\" * (number-20)\n    when 24\n        return \"xxiv\"\n    when 25\n   \
    \     return \"xxv\"\n    when 26..28\n        return \"xxv\" + \"i\" * (number-25)\n\
    \    when 29\n        return \"xxix\"\n    when 30\n        return \"xxx\"\n \
    \   when 31..33\n        return \"xxx\" + \"i\" * (number-30)\n    when 34\n \
    \       return \"xxxiv\"\n    when 35\n        return \"xxxv\"\n    when 36..38\n\
    \        return \"xxxv\" + \"i\" * (number-35)\n    when 39\n        return \"\
    xxxix\"\n    when 40\n        return \"xl\"\n    when 41..43\n        return \"\
    xl\" + \"i\" * (number-40)\n    when 44\n        return \"xliv\"\n    when 45\n\
    \        return \"xlv\"\n    when 46..48\n        return \"xlv\" + \"i\" * (number-45)\n\
    \    when 49\n        return \"xlix\"\n    when 50\n        return \"l\"\n   \
    \ when 51..53\n        return \"l\" + \"i\" * (number-50)\n    when 54\n     \
    \   return \"liv\"\n    when 55\n        return \"lv\"\n    when 56..58\n    \
    \    return \"lv\" + \"i\" * (number-55)\n    when 59\n        return \"lix\"\n\
    \   ", "  return \"error\" if number < 1 || number > 1000\n  roman_numeral = \"\
    \"\n  place = 0\n  roman_array = []\n  while number > 0\n    roman_array << (number\
    \ % 10) * (10 ** place)\n    number /= 10\n    place += 1\n  end\n  roman_array.reverse.each\
    \ do |num|\n    case num\n    when 1 then roman_numeral << \"i\"\n    when 2 then\
    \ roman_numeral << \"ii\"\n    when 3 then roman_numeral << \"iii\"\n    when\
    \ 4 then roman_numeral << \"iv\"\n    when 5 then roman_numeral << \"v\"\n   \
    \ when 6 then roman_numeral << \"vi\"\n    when 7 then roman_numeral << \"vii\"\
    \n    when 8 then roman_numeral << \"viii\"\n    when 9 then roman_numeral <<\
    \ \"ix\"\n    when 10 then roman_numeral << \"x\"\n    when 20 then roman_numeral\
    \ << \"xx\"\n    when 30 then roman_numeral << \"xxx\"\n    when 40 then roman_numeral\
    \ << \"xl\"\n    when 50 then roman_numeral << \"l\"\n    when 60 then roman_numeral\
    \ << \"lx\"\n    when 70 then roman_numeral << \"lxx\"\n    when 80 then roman_numeral\
    \ << \"lxxx\"\n    when 90 then roman_numeral << \"xc\"\n    when 100 then roman_numeral\
    \ << \"c\"\n    when 200 then roman_numeral << \"cc\"\n    when 300 then roman_numeral\
    \ << \"ccc\"\n    when 400 then roman_numeral << \"cd\"\n    when 500 then roman_numeral\
    \ << \"d\"\n    when 600 then roman_numeral << \"dc\"\n    when 700 then roman_numeral\
    \ << \"dcc\"\n    when 800 then roman_numeral << \"dccc\"\n    when 900 then roman_numeral\
    \ << \"cm\"\n    when 1000 then roman_numeral << \"m\"\n    end\n  end\n  roman_numeral\n\
    end", "  number = number.to_s.chars.map(&:to_i)\n  roman = []\n  if number.length\
    \ == 1\n    if number[0] == 1\n      roman.push('i')\n    elsif number[0] == 2\n\
    \      roman.push('ii')\n    elsif number[0] == 3\n      roman.push('iii')\n \
    \   elsif number[0] == 4\n      roman.push('iv')\n    elsif number[0] == 5\n \
    \     roman.push('v')\n    elsif number[0] == 6\n      roman.push('vi')\n    elsif\
    \ number[0] == 7\n      roman.push('vii')\n    elsif number[0] == 8\n      roman.push('viii')\n\
    \    elsif number[0] == 9\n      roman.push('ix')\n    end\n  elsif number.length\
    \ == 2\n    if number[0] == 1\n      roman.push('x')\n    elsif number[0] == 2\n\
    \      roman.push('xx')\n    elsif number[0] == 3\n      roman.push('xxx')\n \
    \   elsif number[0] == 4\n      roman.push('xl')\n    elsif number[0] == 5\n \
    \     roman.push('l')\n    elsif number[0] == 6\n      roman.push('lx')\n    elsif\
    \ number[0] == 7\n      roman.push('lxx')\n    elsif number[0] == 8\n      roman.push('lxxx')\n\
    \    elsif number[0] == 9\n      roman.push('xc')\n    end\n    if number[1] ==\
    \ 1\n      roman.push('i')\n    elsif number[1] == 2\n      roman.push('ii')\n\
    \    elsif number[1] == 3\n      roman.push('iii')\n    elsif number[1] == 4\n\
    \      roman.push('iv')\n    elsif number[1] == 5\n      roman.push('v')\n   ",
  "  roman = ''\n  roman = roman + 'm' * (number / 1000)\n  roman = roman + 'd' *\
    \ (number % 1000 / 500)\n  roman = roman + 'c' * (number % 500 / 100)\n  roman\
    \ = roman + 'l' * (number % 100 / 50)\n  roman = roman + 'x' * (number % 50 /\
    \ 10)\n  roman = roman + 'v' * (number % 10 / 5)\n  roman = roman + 'i' * (number\
    \ % 5 / 1)\n  roman\nend", "  roman_numerals = {1000 => 'm', 900 => 'cm', 500\
    \ => 'd', 400 => 'cd', 100 => 'c', 90 => 'xc', 50 => 'l', 40 => 'xl', 10 => 'x',\
    \ 9 => 'ix', 5 => 'v', 4 => 'iv', 1 => 'i'}\n  answer = ''\n  roman_numerals.each\
    \ do |key, value|\n    (number / key).times {answer << value; number -= key}\n\
    \  end\n  answer\nend", "  number = number.to_s\n  number = number.split('')\n\
    \  romans = { '1' => 'i', '2' => 'ii', '3' => 'iii', '4' => 'iv', '5' => 'v',\
    \ '6' => 'vi', '7' => 'vii', '8' => 'viii', '9' => 'ix', '10' => 'x', '20' =>\
    \ 'xx', '30' => 'xxx', '40' => 'xl', '50' => 'l', '60' => 'lx', '70' => 'lxx',\
    \ '80' => 'lxxx', '90' => 'xc', '100' => 'c', '200' => 'cc', '300' => 'ccc', '400'\
    \ => 'cd', '500' => 'd', '600' => 'dc', '700' => 'dcc', '800' => 'dccc', '900'\
    \ => 'cm', '1000' => 'm' }\n  if number.length == 1\n    num = romans[number[0]]\n\
    \  elsif number.length == 2\n    num = romans[number[0] + '0'] + romans[number[1]]\n\
    \  elsif number.length == 3\n    num = romans[number[0] + '00'] + romans[number[1]\
    \ + '0'] + romans[number[2]]\n  end\n  return num\nend", "  roman_numerals = {1\
    \ => 'i', 2 => 'ii', 3 => 'iii', 4 => 'iv', 5 => 'v', 6 => 'vi', 7 => 'vii', 8\
    \ => 'viii', 9 => 'ix', 10 => 'x', 20 => 'xx', 30 => 'xxx', 40 => 'xl', 50 =>\
    \ 'l', 60 => 'lx', 70 => 'lxx', 80 => 'lxxx', 90 => 'xc', 100 => 'c', 200 => 'cc',\
    \ 300 => 'ccc', 400 => 'cd', 500 => 'd', 600 => 'dc', 700 => 'dcc', 800 => 'dccc',\
    \ 900 => 'cm', 1000 => 'm'}\n  if number.between?(1,1000)\n    roman_numerals[number]\n\
    \  else\n    num = number.to_s.split('')\n    count = num.length\n    result =\
    \ []\n    i = 0\n    while count > 0\n      result << roman_numerals[num[i].to_i\
    \ * (10 ** (count - 1))]\n      count -= 1\n      i += 1\n    end\n    result.join\n\
    \  end\nend", "  thousands = number / 1000\n  hundreds = number % 1000 / 100\n\
    \  tens = number % 100 / 10\n  ones = number % 10\n  roman = 'm' * thousands\n\
    \  if hundreds == 9\n    roman = roman + 'cm'\n  elsif hundreds == 4\n    roman\
    \ = roman + 'cd'\n  else\n    roman = roman + 'd' * (number % 1000 / 500)\n  \
    \  roman = roman + 'c' * (number % 500 / 100)\n  end\n  if tens == 9\n    roman\
    \ = roman + 'xc'\n  elsif tens == 4\n    roman = roman + 'xl'\n  else\n    roman\
    \ = roman + 'l' * (number % 100 / 50)\n    roman = roman + 'x' * (number % 50\
    \ / 10)\n  end\n  if ones == 9\n    roman = roman + 'ix'\n  elsif ones == 4\n\
    \    roman = roman + 'iv'\n  else\n    roman = roman + 'v' * (number % 10 / 5)\n\
    \    roman = roman + 'i' * (number % 5 / 1)\n  end\n  roman\nend", "  raise if\
    \ number > 1000\n  raise if number < 1\n  result = \"\"\n  m = number / 1000\n\
    \  result += \"m\" * m\n  number -= 1000 * m\n  d = number / 500\n  result +=\
    \ \"d\" * d\n  number -= 500 * d\n  c = number / 100\n  result += \"c\" * c\n\
    \  number -= 100 * c\n  l = number / 50\n  result += \"l\" * l\n  number -= 50\
    \ * l\n  x = number / 10\n  result += \"x\" * x\n  number -= 10 * x\n  v = number\
    \ / 5\n  result += \"v\" * v\n  number -= 5 * v\n  i = number\n  result += \"\
    i\" * i\n  result\nend", "  # your code here\nend", "  roman = Hash.new\n  roman\
    \ = {\n    1000 => \"m\",\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"\
    cd\",\n    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\"\
    ,\n    10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n   \
    \ 1 => \"i\"\n  }\n  output = ''\n  roman.each do |key, value|\n    if number\
    \ % key >= 1\n      output << value * (number / key)\n      number = number %\
    \ key\n    end\n  end\n  output\nend", "  roman = \"\"\n  number.times do\n  \
    \  roman = roman + \"i\"\n  end\n  roman = roman.gsub(\"iiiii\", \"v\")\n  roman\
    \ = roman.gsub(\"vv\", \"x\")\n  roman = roman.gsub(\"viv\", \"ix\")\n  roman\
    \ = roman.gsub(\"xxxxx\", \"l\")\n  roman = roman.gsub(\"ll\", \"c\")\n  roman\
    \ = roman.gsub(\"lxl\", \"xc\")\n  roman = roman.gsub(\"ccccc\", \"d\")\n  roman\
    \ = roman.gsub(\"dd\", \"m\")\n  roman = roman.gsub(\"dcd\", \"cm\")\n  roman\n\
    end", "    num_to_roman = {\n        1000 => 'm',\n        900 => 'cm',\n    \
    \    500 => 'd',\n        400 => 'cd',\n        100 => 'c',\n        90 => 'xc',\n\
    \        50 => 'l',\n        40 => 'xl',\n        10 => 'x',\n        9 => 'ix',\n\
    \        5 => 'v',\n        4 => 'iv',\n        1 => 'i'\n    }\n    roman_num\
    \ = ''\n    num_to_roman.each do |val, roman|\n        if number == 0\n      \
    \      break\n        elsif number/val > 0\n            roman_num += roman*(number/val)\n\
    \            number = number%val\n        end\n    end\n    return roman_num\n\
    end", "  roman_chars = %w(i v x l c d m)\n  # write your code here\nend", "  \
    \  if number < 1 or number > 1000\n        return \"Number not allowed\"\n   \
    \ end\n    result = \"\"\n    roman_numbers = {1000 => \"m\", 900 => \"cm\", 500\
    \ => \"d\", 400 => \"cd\", 100 => \"c\", 90 => \"xc\", 50 => \"l\", 40 => \"xl\"\
    , 10 => \"x\", 9 => \"ix\", 5 => \"v\", 4 => \"iv\", 1 => \"i\"}\n    while number\
    \ > 0\n        roman_numbers.each do |key, value|\n            if (number - key)\
    \ >= 0\n                result += value\n                number -= key\n     \
    \           break\n            end\n        end\n    end\n    return result\n\
    end", "  roman_string = \"\"\n  roman_numerals.each do |int, roman|\n    if number/int\
    \ == 0\n      next\n    else\n      # remove from number the amount of integer\
    \ that was removed from it\n      number = number - int\n      # add the roman\
    \ value to the string\n      roman_string += roman\n    end\n  end\n  return roman_string\n\
    end", "  if number < 1 || number > 1000\n    raise ArgumentError, 'Number should\
    \ be between 1 and 1000'\n  end", end, "  m = 'm'\n  d = 'd'\n  c = 'c'\n  l =\
    \ 'l'\n  x = 'x'\n  v = 'v'\n  i = 'i'\n  m *= (number / 1000)\n  number %= 1000\n\
    \  d *= (number / 500)\n  number %= 500\n  c *= (number / 100)\n  number %= 100\n\
    \  l *= (number / 50)\n  number %= 50\n  x *= (number / 10)\n  number %= 10\n\
    \  v *= (number / 5)\n  number %= 5\n  i *= number\n  print m, d, c, l, x, v,\
    \ i\nend", "  if number == 1\n    \"i\"\n  elsif number == 2\n    \"ii\"\n  elsif\
    \ number == 3\n    \"iii\"\n  elsif number == 4\n    \"iv\"\n  elsif number ==\
    \ 5\n    \"v\"\n  elsif number == 6\n    \"vi\"\n  elsif number == 7\n    \"vii\"\
    \n  elsif number == 8\n    \"viii\"\n  elsif number == 9\n    \"ix\"\n  elsif\
    \ number == 10\n    \"x\"\n  elsif number == 11\n    \"xi\"\n  elsif number ==\
    \ 12\n    \"xii\"\n  elsif number == 13\n    \"xiii\"\n  elsif number == 14\n\
    \    \"xiv\"\n  elsif number == 15\n    \"xv\"\n  elsif number == 16\n    \"xvi\"\
    \n  elsif number == 17\n    \"xvii\"\n  elsif number == 18\n    \"xviii\"\n  elsif\
    \ number == 19\n    \"xix\"\n  elsif number == 20\n    \"xx\"\n  elsif number\
    \ == 21\n    \"xxi\"\n  elsif number == 22\n    \"xxii\"\n  elsif number == 23\n\
    \    \"xxiii\"\n  elsif number == 24\n    \"xxiv\"\n  elsif number == 25\n   \
    \ \"xxv\"\n  elsif number == 26\n    \"xxvi\"\n  elsif number == 27\n    \"xxvii\"\
    \n  elsif number == 28\n    \"xxviii\"\n  elsif number == 29\n    \"xxix\"\n \
    \ elsif number == 30\n    \"xxx\"\n  elsif number == 31\n    \"xxxi\"\n  elsif\
    \ number == 32\n    \"xxxii\"\n  elsif number == 33\n    \"xxxiii\"\n  elsif number\
    \ == 34\n    \"xxxiv\"\n  elsif number == 35\n    \"xxxv\"\n  elsif number ==\
    \ 36\n    \"xxxvi\"\n  elsif number == 37\n    \"xxxvii\"\n ", "  roman = \"\"\
    \n  while number != 0\n    if number >= 1000\n      number -= 1000\n      roman\
    \ += \"m\"\n    elsif number >= 900\n      number -= 900\n      roman += \"cm\"\
    \n    elsif number >= 500\n      number -= 500\n      roman += \"d\"\n    elsif\
    \ number >= 400\n      number -= 400\n      roman += \"cd\"\n    elsif number\
    \ >= 100\n      number -= 100\n      roman += \"c\"\n    elsif number >= 90\n\
    \      number -= 90\n      roman += \"xc\"\n    elsif number >= 50\n      number\
    \ -= 50\n      roman += \"l\"\n    elsif number >= 40\n      number -= 40\n  \
    \    roman += \"xl\"\n    elsif number >= 10\n      number -= 10\n      roman\
    \ += \"x\"\n    elsif number >= 9\n      number -= 9\n      roman += \"ix\"\n\
    \    elsif number >= 5\n      number -= 5\n      roman += \"v\"\n    elsif number\
    \ >= 4\n      number -= 4\n      roman += \"iv\"\n    elsif number >= 1\n    \
    \  number -= 1\n      roman += \"i\"\n    end\n  end\n  roman\nend", "  roman\
    \ = \"\"\n  roman << \"m\" * (number / 1000)\n  roman << \"d\" * (number % 1000\
    \ / 500)\n  roman << \"c\" * (number % 500 / 100)\n  roman << \"l\" * (number\
    \ % 100 / 50)\n  roman << \"x\" * (number % 50 / 10)\n  roman << \"v\" * (number\
    \ % 10 / 5)\n  roman << \"i\" * (number % 5 / 1)\n  return roman\nend", "\tanswer\
    \ = \"\"\n\tif number >= 1000\n\t\tanswer += \"m\"\n\t\tnumber -= 1000\n\tend\n\
    \tif number >= 500\n\t\tanswer += \"d\"\n\t\tnumber -= 500\n\tend\n\tif number\
    \ >= 100\n\t\tanswer += \"c\"\n\t\tnumber -= 100\n\tend\n\tif number >= 50\n\t\
    \tanswer += \"l\"\n\t\tnumber -= 50\n\tend\n\tif number >= 10\n\t\tanswer += \"\
    x\"\n\t\tnumber -= 10\n\tend\n\tif number >= 5\n\t\tanswer += \"v\"\n\t\tnumber\
    \ -= 5\n\tend\n\tif number >= 1\n\t\tanswer += \"i\"\n\t\tnumber -= 1\n\tend\n\
    \treturn answer\nend", "  roman_numerals = {\n    1000 => 'm',\n    900 => 'cm',\n\
    \    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 =>\
    \ 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4\
    \ => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each do |key, value|\n\
    \    quotient, number = number.divmod(key)\n    result << value * quotient\n \
    \ end\n  result\nend", "  # Your code here\nend", "  roman_numerals = {\n    1000\
    \ => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n\
    \    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n\
    \    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  str = ''\n  roman_numerals.each\
    \ do |int, roman|\n    num = number / int\n    num.times { str << roman }\n  \
    \  number = number % int\n  end\n  str\nend", "  roman_numerals = {\n    1 =>\
    \ 'i',\n    4 => 'iv',\n    5 => 'v',\n    9 => 'ix',\n    10 => 'x',\n    40\
    \ => 'xl',\n    50 => 'l',\n    90 => 'xc',\n    100 => 'c',\n    400 => 'cd',\n\
    \    500 => 'd',\n    900 => 'cm',\n    1000 => 'm'\n  }\n  number_to_roman(number,\
    \ roman_numerals)\nend", end, "  roman_numeral = []\n  roman_numerals = {\n  \
    \  1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100\
    \ => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n\
    \    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  if number\
    \ > 1000\n    return 'out of range'\n  else\n    roman_numerals.each do |int,\
    \ letter|\n      roman_numeral << letter * (number / int)\n      number = number\
    \ % int\n    end\n  end\n  roman_numeral.join('')\nend", "  number = number.to_s.chars.reverse\n\
    \  result = []\n  number.each_with_index do |num, index|\n    num = num.to_i\n\
    \    case index\n    when 0\n      num.times { result << 'i' }\n    when 1\n \
    \     num == 4 ? result.insert(0, 'iv') : num.times { result.insert(0, 'v') }\n\
    \    when 2\n      num == 4 ? result.insert(0, 'ix') : num.times { result.insert(0,\
    \ 'x') }\n    when 3\n      num == 4 ? result.insert(0, 'xl') : num.times { result.insert(0,\
    \ 'l') }\n    when 4\n      num == 4 ? result.insert(0, 'xc') : num.times { result.insert(0,\
    \ 'c') }\n    when 5\n      num == 4 ? result.insert(0, 'cd') : num.times { result.insert(0,\
    \ 'd') }\n    when 6\n      num == 4 ? result.insert(0, 'cm') : num.times { result.insert(0,\
    \ 'm') }\n    end\n  end\n  result.join\nend", "  number\nend", "  roman_numeral\
    \ = \"\"\n  roman_numerals = {\n    \"M\" => 1000,\n    \"CM\" => 900,\n    \"\
    D\" => 500,\n    \"CD\" => 400,\n    \"C\" => 100,\n    \"XC\" => 90,\n    \"\
    L\" => 50,\n    \"XL\" => 40,\n    \"X\" => 10,\n    \"IX\" => 9,\n    \"V\" =>\
    \ 5,\n    \"IV\" => 4,\n    \"I\" => 1\n  }\n  roman_numerals.each do |key, value|\n\
    \    roman_numeral << key*(number / value)\n    number = number % value\n  end\n\
    \  roman_numeral.downcase\nend", "  # Your code here\nend", "  # Create a hash\
    \ of roman numerals\n  #   NOTE: I would like to create a RomanNumeral class to\
    \ encapsulate this\n  #         logic, but I will leave that as an exercise for\
    \ the reader ;)\n  #\n  # Create an array of roman numeral symbols in descending\
    \ order\n  #\n  # Loop over the roman numerals\n  #   If the roman numeral is\
    \ greater than the number, skip to the next roman numeral\n  #   Otherwise, append\
    \ roman numeral to the roman numeral string\n  #     Then, subtract the number\
    \ from the number\n  #   Break the loop if the number is 0\n  #\n  # Return the\
    \ roman numeral string\nend", "  if number > 0 && number <= 1000\n    roman_numeral\
    \ = ''\n    roman_numerals = {\n      1000 => 'm',\n      900 => 'cm',\n     \
    \ 500 => 'd',\n      400 => 'cd',\n      100 => 'c',\n      90 => 'xc',\n    \
    \  50 => 'l',\n      40 => 'xl',\n      10 => 'x',\n      9 => 'ix',\n      5\
    \ => 'v',\n      4 => 'iv',\n      1 => 'i'\n    }\n    roman_numerals.each do\
    \ |key, value|\n      roman_numeral << value * (number / key)\n      number =\
    \ number % key\n    end\n    roman_numeral\n  else\n    'Not a valid number'\n\
    \  end\nend", "    roman_numeral = []\n    count = number\n    while count > 0\n\
    \      case count\n      when count >= 1000\n        roman_numeral << 'm'\n  \
    \      count -= 1000\n      when count >= 900\n        roman_numeral << 'cm'\n\
    \        count -= 900\n      when count >= 500\n        roman_numeral << 'd'\n\
    \        count -= 500\n      when count >= 400\n        roman_numeral << 'cd'\n\
    \        count -= 400\n      when count >= 100\n        roman_numeral << 'c'\n\
    \        count -= 100\n      when count >= 90\n        roman_numeral << 'xc'\n\
    \        count -= 90\n      when count >= 50\n        roman_numeral << 'l'\n \
    \       count -= 50\n      when count >= 40\n        roman_numeral << 'xl'\n \
    \       count -= 40\n      when count >= 10\n        roman_numeral << 'x'\n  \
    \      count -= 10\n      when count >= 9\n        roman_numeral << 'ix'\n   \
    \     count -= 9\n      when count >= 5\n        roman_numeral << 'v'\n      \
    \  count -= 5\n      when count >= 4\n        roman_numeral << 'iv'\n        count\
    \ -= 4\n      when count >= 1\n        roman_numeral << 'i'\n        count -=\
    \ 1\n      end\n    end\n    roman_numeral.join\nend", "  string = ''\n  # write\
    \ your code here\n  if number >= 1000\n    string += 'm'\n    number -= 1000\n\
    \  end\n  if number >= 900\n    string += 'cm'\n    number -= 900\n  end\n  if\
    \ number >= 500\n    string += 'd'\n    number -= 500\n  end\n  if number >= 400\n\
    \    string += 'cd'\n    number -= 400\n  end\n  if number >= 100\n    string\
    \ += 'c'\n    number -= 100\n  end\n  if number >= 90\n    string += 'xc'\n  \
    \  number -= 90\n  end\n  if number >= 50\n    string += 'l'\n    number -= 50\n\
    \  end\n  if number >= 40\n    string += 'xl'\n    number -= 40\n  end\n  if number\
    \ >= 10\n    string += 'x'\n    number -= 10\n  end\n  if number >= 9\n    string\
    \ += 'ix'\n    number -= 9\n  end\n  if number >= 5\n    string += 'v'\n    number\
    \ -= 5\n  end\n  if number >= 4\n    string += 'iv'\n    number -= 4\n  end\n\
    \  if number >= 1\n    string += 'i'\n    number -= 1\n  end\n  string\nend",
  "\trom=Array.new\n\trem=number\n\twhile rem!=0\n\t\tif rem>=1000\n\t\t\trom.push(\"\
    m\")\n\t\t\trem=rem-1000\n\t\telsif rem>=500\n\t\t\trom.push(\"d\")\n\t\t\trem=rem-500\n\
    \t\telsif rem>=100\n\t\t\trom.push(\"c\")\n\t\t\trem=rem-100\n\t\telsif rem>=50\n\
    \t\t\trom.push(\"l\")\n\t\t\trem=rem-50\n\t\telsif rem>=10\n\t\t\trom.push(\"\
    x\")\n\t\t\trem=rem-10\n\t\telsif rem>=5\n\t\t\trom.push(\"v\")\n\t\t\trem=rem-5\n\
    \t\telsif rem>=1\n\t\t\trom.push(\"i\")\n\t\t\trem=rem-1\n\t\tend\n\tend\n\trom=rom.join\n\
    \trom=rom.gsub(\"iiiii\",\"v\")\n\trom=rom.gsub(\"vv\",\"x\")\n\trom=rom.gsub(\"\
    xxxxx\",\"l\")\n\trom=rom.gsub(\"ll\",\"c\")\n\trom=rom.gsub(\"ccccc\",\"d\")\n\
    \trom=rom.gsub(\"dd\",\"m\")\n\trom=rom.gsub(\"iiii\",\"iv\")\n\trom=rom.gsub(\"\
    viv\",\"ix\")\n\trom=rom.gsub(\"xxxx\",\"xl\")\n\trom=rom.gsub(\"lxl\",\"xc\"\
    )\n\trom=rom.gsub(\"cccc\",\"cd\")\n\trom=rom.gsub(\"dcd\",\"cm\")\n\trom=rom.downcase\n\
    \treturn rom\nend", "    roman = \"\"\n    until number == 0\n        if number\
    \ >= 1000\n            roman << \"m\"\n            number -= 1000\n        elsif\
    \ number >= 900\n            roman << \"cm\"\n            number -= 900\n    \
    \    elsif number >= 500\n            roman << \"d\"\n            number -= 500\n\
    \        elsif number >= 400\n            roman << \"cd\"\n            number\
    \ -= 400\n        elsif number >= 100\n            roman << \"c\"\n          \
    \  number -= 100\n        elsif number >= 90\n            roman << \"xc\"\n  \
    \          number -= 90\n        elsif number >= 50\n            roman << \"l\"\
    \n            number -= 50\n        elsif number >= 40\n            roman << \"\
    xl\"\n            number -= 40\n        elsif number >= 10\n            roman\
    \ << \"x\"\n            number -= 10\n        elsif number >= 9\n            roman\
    \ << \"ix\"\n            number -= 9\n        elsif number >= 5\n            roman\
    \ << \"v\"\n            number -= 5\n        elsif number >= 4\n            roman\
    \ << \"iv\"\n            number -= 4\n        elsif number >= 1\n            roman\
    \ << \"i\"\n            number -= 1\n        end\n    end\n    roman\nend", " \
    \ if number < 1 || number > 1000\n    return \"Invalid Number: Out of range.\"\
    \n  end\n  if number.nil?\n    return \"Invalid Number: NULL\"\n  end\n  int_to_mini_roman_map\
    \ = {\n    1 => 'i',\n    4 => 'iv',\n    5 => 'v',\n    9 => 'ix',\n    10 =>\
    \ 'x',\n    40 => 'xl',\n    50 => 'l',\n    90 => 'xc',\n    100 => 'c',\n  \
    \  400 => 'cd',\n    500 => 'd',\n    900 => 'cm',\n    1000 => 'm'\n  }\n  result\
    \ = ''\n  int_to_mini_roman_map.reverse_each do |number, roman|\n    while number\
    \ <= number\n      result << roman\n      number -= number\n    end\n  end\n \
    \ result\nend", "  # Get the 1000's place\n  thousands = number / 1000\n  # Get\
    \ the 100's place\n  hundreds = (number - (thousands * 1000)) / 100\n  # Get the\
    \ 10's place\n  tens = (number - (thousands * 1000) - (hundreds * 100)) / 10\n\
    \  # Get the 1's place\n  ones = (number - (thousands * 1000) - (hundreds * 100)\
    \ - (tens * 10))", "  upper_limit = 1000\n  roman_value = ''\n  number_of_ones\
    \ = number % 10\n  roman_value << 'i' * number_of_ones\n  remainder = number -\
    \ number_of_ones\n  number_of_tens = remainder % 100\n  if number_of_tens != 0\n\
    \    if number_of_tens > 4\n      roman_value << 'v'\n      remainder = number_of_tens\
    \ - 5\n      roman_value << 'i' * remainder\n    else\n      roman_value << 'i'\
    \ * number_of_tens\n    end\n  end\n  remainder = number - number_of_tens\n  number_of_hundreds\
    \ = remainder % 1000\n  if number_of_hundreds != 0\n    if number_of_hundreds\
    \ > 4\n      roman_value << 'l'\n      remainder = number_of_hundreds - 5\n  \
    \    roman_value << 'i' * remainder\n    else\n      roman_value << 'i' * number_of_hundreds\n\
    \    end\n  end\n  remainder = number - number_of_hundreds\n  number_of_thousands\
    \ = remainder / 1000\n  if number_of_thousands != 0\n    if number_of_thousands\
    \ > 4\n      roman_value << 'm'\n      remainder = number_of_thousands - 5\n \
    \     roman_value << 'i' * remainder\n    else\n      roman_value << 'i' * number_of_thousands\n\
    \    end\n  end\n  roman_value\nend", "  # TODO\nend", "  # your code here\nend",
  "  roman = ''\n  roman << 'm' * (number / 1000)\n  roman << 'd' * (number % 1000\
    \ / 500)\n  roman << 'c' * (number % 500 / 100)\n  roman << 'l' * (number % 100\
    \ / 50)\n  roman << 'x' * (number % 50 / 10)\n  roman << 'v' * (number % 10 /\
    \ 5)\n  roman << 'i' * (number % 5 / 1)\n  return roman\nend", "  # your code\
    \ here\nend", "  number_in_roman_chars = {1 => 'i', 4 => 'iv', 5 => 'v', 9 =>\
    \ 'ix', 10 => 'x', 40 => 'xl', 50 => 'l', 90 => 'xc', 100 => 'c', 400 => 'cd',\
    \ 500 => 'd', 900 => 'cm', 1000 => 'm'}\n  number_in_roman_chars.keys.reverse.each_with_object('')\
    \ do |arabic_key, result|\n    temp_result = (number/arabic_key)\n    result <<\
    \ number_in_roman_chars[arabic_key] * temp_result\n    number = number % arabic_key\n\
    \  end\nend", "  # begin interpolation\n  mini_roman = ''\n  # begin case statements\n\
    \  case number\n  when 1000\n    mini_roman << 'm'\n  when 900\n    mini_roman\
    \ << 'cm'\n  when 500\n    mini_roman << 'd'\n  when 400\n    mini_roman << 'cd'\n\
    \  when 100\n    mini_roman << 'c'\n  when 90\n    mini_roman << 'xc'\n  when\
    \ 50\n    mini_roman << 'l'\n  when 40\n    mini_roman << 'xl'\n  when 10\n  \
    \  mini_roman << 'x'\n  when 9\n    mini_roman << 'ix'\n  when 5\n    mini_roman\
    \ << 'v'\n  when 4\n    mini_roman << 'iv'\n  when 1\n    mini_roman << 'i'\n\
    \  end\n  # end case statements\n  # end interpolation\n  mini_roman\nend", " \
    \ roman = \"\"\n  symbols = {1000 => \"m\", 500 => \"d\", 100 => \"c\", 50 =>\
    \ \"l\", 10 => \"x\", 5 => \"v\", 1 => \"i\"}\n  symbols.each do |arabic, roman_letter|\n\
    \    remainder = number % arabic\n    number = number - remainder\n    if remainder\
    \ > 0\n      if remainder >= 5 * arabic\n        if roman.empty?\n          roman\
    \ = roman_letter + symbols[arabic * 10]\n        else\n          roman.prepend(roman_letter\
    \ + symbols[arabic * 10])\n        end\n      elsif remainder >= 4 * arabic\n\
    \        if roman.empty?\n          roman = roman_letter + symbols[arabic * 5]\n\
    \        else\n          roman.prepend(roman_letter + symbols[arabic * 5])\n \
    \       end\n      else\n        if roman.empty?\n          roman = roman_letter\
    \ * (remainder / arabic)\n        else\n          roman.prepend(roman_letter *\
    \ (remainder / arabic))\n        end\n      end\n    end\n  end\n  roman\nend",
  "\t\n\t# Array containing the roman numerals\n\troman_numerals = ['m', 'cm', 'd',\
    \ 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n\t# Array containing\
    \ the integer values each roman numeral represents\n\tintegers = [1000, 900, 500,\
    \ 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n\t# Create an empty string to contain\
    \ the roman numeral\n\troman_string = ''\n\t\n\t# Loop through each roman numeral\n\
    \tfor i in 0..(roman_numerals.length - 1)\n\t\t# Loop through each roman numeral\
    \ number\n\t\twhile number >= integers[i]\n\t\t\troman_string += roman_numerals[i]\n\
    \t\t\tnumber -= integers[i]\n\t\tend\n\tend\n\t\n\t# Return the roman numeral\
    \ string\n\treturn roman_string\n\t\nend", "  roman_string = \"\"\n  while number\
    \ >= 100\n    roman_string += \"c\"\n    number -= 100\n  end\n  while number\
    \ >= 90\n    roman_string += \"xc\"\n    number -= 90\n  end\n  while number >=\
    \ 50\n    roman_string += \"l\"\n    number -= 50\n  end\n  while number >= 40\n\
    \    roman_string += \"xl\"\n    number -= 40\n  end\n  while number >= 10\n \
    \   roman_string += \"x\"\n    number -= 10\n  end\n  while number >= 9\n    roman_string\
    \ += \"ix\"\n    number -= 9\n  end\n  while number >= 5\n    roman_string +=\
    \ \"v\"\n    number -= 5\n  end\n  while number >= 4\n    roman_string += \"iv\"\
    \n    number -= 4\n  end\n  while number >= 1\n    roman_string += \"i\"\n   \
    \ number -= 1\n  end\n  return roman_string\nend", "    # number = 0\n    # while\
    \ number < 1000\n    #     number += 1\n    # end\n    # string = \"#{number}\"\
    \n    # ints = string.split('')\n    # p ints\n    # letter = ''\n    # mini_roman\
    \ = {\n    #     0 => 'i',\n    #     1 => 'ii',\n    #     2 => 'iii',\n    #\
    \     3 => 'iv',\n    #     4 => 'v',\n    #     5 => 'vi',\n    #     6 => 'vii',\n\
    \    #     7 => 'viii',\n    #     8 => 'ix',\n    #     9 => 'x',\n    #    \
    \ 10 => 'xi',\n    #     11 => 'xii',\n    #     12 => 'xiii',\n    #     13 =>\
    \ 'xiv',\n    #     14 => 'xv',\n    #     15 => 'xvi',\n    #     16 => 'xvii',\n\
    \    #     17 => 'xviii',\n    #     18 => 'xix',\n    #     19 => 'xx',\n   \
    \ #     20 => 'xxi',\n    #     21 => 'xxii',\n    #     22 => 'xxiii',\n    #\
    \     23 => 'xxiv',\n    #     24 => 'xxv',\n    #     25 => 'xxvi',\n    #  \
    \   26 => 'xxvii',\n    #     27 => 'xxviii',\n    #     28 => 'xxix',\n    #\
    \     29 => 'xxx',\n    #     30 => 'xxxi',\n    #     31 => 'xxxii',\n    # \
    \    32 => 'xxxiii',\n    #     33 => 'xxxiv',\n    #     34 => 'xxxv',\n    #\
    \     35 => 'xxxvi',\n    #     36 => 'xxxvii',\n    #     37 => 'xxxviii',\n\
    \    #     38 => 'xxxix',\n    #     39 => 'xl',\n    #     40 => 'xli',\n   \
    \ #     41 => 'xlii',\n    #     42 => 'xliii',\n    #     43 => 'xliv',\n   \
    \ #     44 => 'xlv',", "  roman_numerals = {\n  1000 => \"m\",\n  900 => \"cm\"\
    ,\n  500 => \"d\",\n  400 => \"cd\",\n  100 => \"c\",\n  90 => \"xc\",\n  50 =>\
    \ \"l\",\n  40 => \"xl\",\n  10 => \"x\",\n  9 => \"ix\",\n  5 => \"v\",\n  4\
    \ => \"iv\",\n  1 => \"i\"\n  }\n  new_string = \"\"\n  roman_numerals.each do\
    \ |key, value|\n    if number >= key\n      new_string << value * (number / key)\n\
    \      number = number % key\n    end\n  end\n  new_string\nend", "  raise ArgumentError.new(\"\
    The number must be a positive integer between 1 and 1000, inclusive.\") unless\
    \ (1..1000).include?(number)\n  result = ''\n  roman_numerals = {\n    1000 =>\
    \ 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n\
    \    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n\
    \    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numerals.each do |key,\
    \ value|\n    while number >= key\n      result += value\n      number -= key\n\
    \    end\n  end\n  result\nend", "\nend", "  number_chars = number.to_s.chars\n\
    \  digits = number_chars.length\n  numeral = []\n  # handle thousands\n  if digits\
    \ == 4\n    numeral << 'm' * number_chars[0].to_i\n  end\n  # handle hundreds\n\
    \  if digits >= 3\n    numeral << 'c' * number_chars[-3].to_i\n    numeral <<\
    \ 'd' if number_chars[-3].to_i >= 5\n    numeral << 'm' if number_chars[-3].to_i\
    \ == 9\n  end\n  # handle tens\n  if digits >= 2\n    numeral << 'x' * number_chars[-2].to_i\n\
    \    numeral << 'l' if number_chars[-2].to_i >= 5\n    numeral << 'c' if number_chars[-2].to_i\
    \ == 9\n  end\n  # handle ones\n  if digits >= 1\n    numeral << 'i' * number_chars[-1].to_i\n\
    \    numeral << 'v' if number_chars[-1].to_i >= 5\n    numeral << 'x' if number_chars[-1].to_i\
    \ == 9\n  end\n  numeral.join('')\nend", "    if number == 1\n        return \"\
    i\"\n    elsif number == 5\n        return \"v\"\n    elsif number == 10\n   \
    \     return \"x\"\n    elsif number == 50\n        return \"l\"\n    elsif number\
    \ == 100\n        return \"c\"\n    elsif number == 500\n        return \"d\"\n\
    \    elsif number == 1000\n        return \"m\"\n    end\n    \n    if number\
    \ == 2\n        return \"ii\"\n    elsif number == 3\n        return \"iii\"\n\
    \    elsif number == 4\n        return \"iv\"\n    elsif number == 6\n       \
    \ return \"vi\"\n    elsif number == 7\n        return \"vii\"\n    elsif number\
    \ == 8\n        return \"viii\"\n    elsif number == 9\n        return \"ix\"\n\
    \    elsif number == 11\n        return \"xi\"\n    elsif number == 12\n     \
    \   return \"xii\"\n    elsif number == 13\n        return \"xiii\"\n    elsif\
    \ number == 14\n        return \"xiv\"\n    elsif number == 15\n        return\
    \ \"xv\"\n    elsif number == 16\n        return \"xvi\"\n    elsif number ==\
    \ 17\n        return \"xvii\"\n    elsif number == 18\n        return \"xviii\"\
    \n    elsif number == 19\n        return \"xix\"\n    elsif number == 20\n   \
    \     return \"xx\"\n    elsif number == 21\n        return \"xxi\"\n    elsif\
    \ number == 22\n        return \"xxii\"\n    elsif number == 23\n        return\
    \ \"xxiii\"\n    elsif number == 24\n        return \"xxiv\"\n    elsif number\
    \ == 25\n        return \"xxv\"\n    elsif number == 26\n        return \"xxvi\"\
    \n    elsif number == 27\n        return \"xxvii\"\n    elsif number == 28\n \
    \       return \"xxviii\"\n    elsif number == 29\n        return \"xxix\"\n \
    \   elsif number == 30\n        return \"xxx\"\n    elsif number == 31\n     \
    \   return \"", "  result = ''\n  roman_numerals = {\n    1 => 'i',\n    5 =>\
    \ 'v',\n    10 => 'x',\n    50 => 'l',\n    100 => 'c',\n    500 => 'd',\n   \
    \ 1000 => 'm'\n  }\n  roman_numerals.keys.reverse.each do |k|\n    while number\
    \ >= k\n      result += roman_numerals[k]\n      number -= k\n    end\n  end\n\
    \  result\nend", "  roman = ''\n  roman = roman + 'm' * (number / 1000)\n  roman\
    \ = roman + 'd' * (number % 1000 / 500)\n  roman = roman + 'c' * (number % 500\
    \ / 100)\n  roman = roman + 'l' * (number % 100 / 50)\n  roman = roman + 'x' *\
    \ (number % 50 / 10)\n  roman = roman + 'v' * (number % 10 / 5)\n  roman = roman\
    \ + 'i' * (number % 5 / 1)\n  roman\nend", "  raise NotImplementedError\nend",
  "  # TODO: implement me\nend", "  numeral = ''\n  if number >= 1000\n    numeral\
    \ += 'm' * (number / 1000)\n    number %= 1000\n  end\n  if number >= 500\n  \
    \  numeral += 'd'\n    number %= 500\n  end\n  if number >= 100\n    numeral +=\
    \ 'c' * (number / 100)\n    number %= 100\n  end\n  if number >= 50\n    numeral\
    \ += 'l'\n    number %= 50\n  end\n  if number >= 10\n    numeral += 'x' * (number\
    \ / 10)\n    number %= 10\n  end\n  if number >= 5\n    numeral += 'v'\n    number\
    \ %= 5\n  end\n  if number >= 1\n    numeral += 'i' * number\n  end\n  numeral\n\
    end", "\tromans = {\n\t\t1000 => 'm',\n\t\t900 => 'cm',\n\t\t500 => 'd',\n\t\t\
    400 => 'cd',\n\t\t100 => 'c',\n\t\t90 => 'xc',\n\t\t50 => 'l',\n\t\t40 => 'xl',\n\
    \t\t10 => 'x',\n\t\t9 => 'ix',\n\t\t5 => 'v',\n\t\t4 => 'iv',\n\t\t1 => 'i'\n\t\
    }\n\tresult = ''\n\tromans.each do |value, letter|\n\t\twhile number >= value\n\
    \t\t\tresult << letter\n\t\t\tnumber -= value\n\t\tend\n\tend\n\tresult\nend",
  "  # Your code here\nend", "  result = ''\n  roman_digit = {\n    1000 => 'm',\n\
    \    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90\
    \ => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n\
    \    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_digit.each do |key,\
    \ value|\n    while number >= key\n      result += value\n      number -= key\n\
    \    end\n  end\n  result\nend", "  raise NotImplementedError\nend", "  # TODO:\
    \ Implement me\nend", "  roman = ''\n  # 1000's place\n  roman += 'm' * (number\
    \ / 1000)\n  number = number % 1000\n  # 100's place\n  roman += 'c' * (number\
    \ / 100)\n  number = number % 100\n  # 10's place\n  roman += 'x' * (number /\
    \ 10)\n  number = number % 10\n  # 1's place\n  roman += 'i' * number\n  # Adjustments\n\
    \  roman.gsub!('iiiii', 'v')\n  roman.gsub!('vv', 'x')\n  roman.gsub!('iiii',\
    \ 'iv')\n  roman.gsub!('iviv', 'ix')\n  roman.gsub!('ixix', 'xl')\n  roman.gsub!('xlxl',\
    \ 'xc')\n  roman.gsub!('xixi', 'xi')\n  roman.gsub!('xixix', 'xl')\n  roman.gsub!('xlxlx',\
    \ 'xc')\n  roman.gsub!('xcxc', 'cd')\n  roman.gsub!('cicc', 'ci')\n  roman.gsub!('cicic',\
    \ 'cd')\n  roman.gsub!('cdcd', 'cm')\n  roman.gsub!('ccccc', 'd')\n  roman.gsub!('cccc',\
    \ 'cd')\n  roman.gsub!('cdcd', 'cm')\n  roman.gsub!('mmmmm', 'v')\n  roman.gsub!('mmmm',\
    \ 'md')\n  roman.gsub!('mdmd', 'mc')\n  roman.gsub!('mcmc', 'm')\n  roman.gsub!('mmdm',\
    \ 'vm')\n  roman.gsub!('mdcm', 'mdc')\n  roman.gsub!('mdmcm', 'vm')\n  roman.gsub!('mdmcm',\
    \ 'vm')\n  roman.gsub!('mdcmc', 'vm')\n  roman.gsub!('mdcmcm', 'vm')", "  roman_key\
    \ = {\n    1 => 'i',\n    5 => 'v',\n    10 => 'x',\n    50 => 'l',\n    100 =>\
    \ 'c',\n    500 => 'd',\n    1000 => 'm'\n  }\n  result = ''\n  numbers = roman_key.keys.reverse\n\
    \  numbers.each_with_index do |n, i|\n    factor = number / n\n    if factor >\
    \ 0\n      number = number % n\n      if factor == 9\n        result += roman_key[n]\
    \ + roman_key[numbers[i-2]]\n      elsif factor == 4\n        result += roman_key[n]\
    \ + roman_key[numbers[i-1]]\n      else\n        roman_key[n] * factor\n     \
    \ end\n    end\n  end\n  result\nend", "  # Your code here\nend", "  roman_hash\
    \ = {\n    'M' => 1000,\n    'CM' => 900,\n    'D' => 500,\n    'CD' => 400,\n\
    \    'C' => 100,\n    'XC' => 90,\n    'L' => 50,\n    'XL' => 40,\n    'X' =>\
    \ 10,\n    'IX' => 9,\n    'V' => 5,\n    'IV' => 4,\n    'I' => 1\n  }\n  result\
    \ = ''\n  roman_hash.each do |key, value|\n    while number >= value\n      result\
    \ += key\n      number -= value\n    end\n  end\n  result\nend", "    roman_to_int\
    \ = {\n        'i' => 1,\n        'v' => 5,\n        'x' => 10,\n        'l' =>\
    \ 50,\n        'c' => 100,\n        'd' => 500,\n        'm' => 1000\n    }\n\
    \    roman_to_int = roman_to_int.invert\n    result = \"\"\n    while number >\
    \ 0\n        roman_to_int.each do |k, v|\n            if number >= v\n       \
    \         result += k.to_s\n                number -= v\n                break\n\
    \            end\n        end\n    end\n    result\nend", "  # enter code here\n\
    end", "  # TODO\nend", "    roman_numerals = { 1 => 'i', 5 => 'v', 10 => 'x',\
    \ 50 => 'l', 100 => 'c', 500 => 'd', 1000 => 'm' }\n    roman_numeral = ''\n \
    \   roman_numerals.keys.reverse.each do |key|\n        while number >= key\n \
    \           number -= key\n            roman_numeral += roman_numerals[key]\n\
    \        end\n    end\n    roman_numeral\nend", "  roman = ''\n  roman << 'c'\
    \ * (number / 100)\n  roman << 'l' * (number % 100 / 50)\n  roman << 'x' * (number\
    \ % 50 / 10)\n  roman << 'v' * (number % 10 / 5)\n  roman << 'i' * (number % 5\
    \ / 1)\n  roman\nend", "  roman_numerals = {\n    1 => 'i',\n    5 => 'v',\n \
    \   10 => 'x',\n    50 => 'l',\n    100 => 'c',\n    500 => 'd',\n    1000 =>\
    \ 'm'\n  }\n  mini_roman = ''\n  array = roman_numerals.keys.reverse\n  array.each_with_index\
    \ do |value, index|\n    quantity = number / value\n    number = number % value\n\
    \    if quantity <= 3\n      mini_roman += roman_numerals[value] * quantity\n\
    \    elsif quantity == 4\n      mini_roman += roman_numerals[value] + roman_numerals[array[index\
    \ + 1]]\n    elsif quantity == 5\n      mini_roman += roman_numerals[array[index\
    \ + 1]]\n    elsif quantity < 9\n      mini_roman += roman_numerals[array[index\
    \ + 1]] + (roman_numerals[value] * (quantity - 5))\n    elsif quantity == 9\n\
    \      mini_roman += roman_numerals[value] + roman_numerals[array[index + 2]]\n\
    \    end\n  end\n  mini_roman\nend", "  if number > 1000\n    return 'please enter\
    \ a number less than 1000'\n  end\n  roman_numerals = {\n    1000 => 'm',\n  \
    \  900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 =>\
    \ 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n   \
    \ 5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each\
    \ do |k, v|\n    (number / k).times { result << v; number -= k }\n  end\n  result\n\
    end", "  # Replace me!\nend", "  int_to_roman(number).downcase\nend", "  roman_hash\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numeral\
    \ = ''\n  roman_hash.each do |key, value|\n    roman_numeral << value * (number\
    \ / key)\n    number = number % key\n  end\n  roman_numeral\nend", "    mini_roman_numerals\
    \ = {1 => 'i', 4 => 'iv', 5 => 'v', 9 => 'ix', 10 => 'x', 40 => 'xl', 50 => 'l',\
    \ 90 => 'xc', 100 => 'c', 400 => 'cd', 500 => 'd', 900 => 'cm', 1000 => 'm'}\n\
    \    result = ''\n    mini_roman_numerals.reverse_each do |k, v|\n        count\
    \ = number / k\n        result += v * count\n        number -= count * k\n   \
    \ end\n    result\nend", end, "  roman_numerals = { 1000 => 'm', 900 => 'cm',\
    \ 500 => 'd', 400 => 'cd', 100 => 'c',\n    90 => 'xc', 50 => 'l', 40 => 'xl',\
    \ 10 => 'x', 9 => 'ix', 5 => 'v', 4 => 'iv', 1 => 'i' }\n  result = ''\n  roman_numerals.each\
    \ do | key, value |\n    result << value * (number / key)\n    number = number\
    \ % key\n  end\n  result\nend", "\tones = ['','i','ii','iii','iv','v','vi','vii','viii','ix']\n\
    \ttens = ['','x','xx','xxx','xl','l','lx','lxx','lxxx','xc']\n\thund = ['','c','cc','ccc','cd','d','dc','dcc','dccc','cm']\n\
    \tthou = ['','m','mm','mmm','mv','v','vm','vmm','vmmm','mx']\n\troman = thou[number/1000]\
    \ + hund[(number%1000)/100] + tens[(number%100)/10] + ones[number%10]\n\troman.downcase\n\
    end", "\t# Hash of Roman Numerals\n\troman = {\n\t\t1000 => \"m\",\n\t\t900 =>\
    \ \"cm\",\n\t\t500 => \"d\",\n\t\t400 => \"cd\",\n\t\t100 => \"c\",\n\t\t90 =>\
    \ \"xc\",\n\t\t50 => \"l\",\n\t\t40 => \"xl\",\n\t\t10 => \"x\",\n\t\t9 => \"\
    ix\",\n\t\t5 => \"v\",\n\t\t4 => \"iv\",\n\t\t1 => \"i\"\n\t}\n\t# Returns a blank\
    \ string if 0 is given\n\tif number == 0\n\t\treturn \"\"\n\tend\n\t# Finds the\
    \ largest number in the hash that is less than the number given\n\tfirst_roman\
    \ = roman.keys.reverse.select { |item| item <= number }.first\n\t# Recursive function\
    \ to find the remaining numbers in the number given\n\treturn roman[first_roman]\
    \ + int_to_mini_roman(number - first_roman)\nend", "  # your code here\nend",
  "  roman_numeral = []\n  numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9,\
    \ 5, 4, 1]\n  numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\",\
    \ \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n  index = 0\n  until number ==\
    \ 0\n    number = number - numbers[index]\n    roman_numeral << numerals[index]\n\
    \    if number < 0\n      number = number + numbers[index]\n      index += 1\n\
    \    end\n  end\n  roman_numeral.join\nend", "  return \"\" if number < 1 || number\
    \ > 1000\n  roman_num = \"\"\n  for e in [1000, 500, 100, 50, 10, 5, 1]\n    roman_num\
    \ += e.to_s * (number / e)\n    number = number % e\n  end\n  roman_num\nend",
  "  roman = \"\"\n  roman = roman + \"c\" * (number / 100)\n  roman = roman + \"\
    l\" * (number % 100 / 50)\n  roman = roman + \"x\" * (number % 50 / 10)\n  roman\
    \ = roman + \"v\" * (number % 10 / 5)\n  roman = roman + \"i\" * (number % 5 /\
    \ 1)\n  return roman\nend", "  answer = ''\n  num = number\n  while num >= 1000\n\
    \    answer << 'm'\n    num -= 1000\n  end\n  while num >= 500\n    answer <<\
    \ 'd'\n    num -= 500\n  end\n  while num >= 100\n    answer << 'c'\n    num -=\
    \ 100\n  end\n  while num >= 50\n    answer << 'l'\n    num -= 50\n  end\n  while\
    \ num >= 10\n    answer << 'x'\n    num -= 10\n  end\n  while num >= 5\n    answer\
    \ << 'v'\n    num -= 5\n  end\n  while num >= 1\n    answer << 'i'\n    num -=\
    \ 1\n  end\n  answer\nend", end, "  result = ''\n  num_mapping = {\n    1000 =>\
    \ 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n\
    \    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n\
    \    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  num_mapping.each do |key,\
    \ value|\n    result << value*(number / key)\n    number = number % key\n  end\n\
    \  result\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
