{
  "language": "rb",
  "name": "HumanEval_58_common",
  "results": [
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoqls7e5e\nStarted\n.\nFinished in 0.000577051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1732.95 tests/s, 6931.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpa0rml7t8\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpa0rml7t8.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\nFinished in 0.007655968 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n130.62 tests/s, 130.62 assertions/s\n",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp_48q95m1\nStarted\n.\nFinished in 0.000518957 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1926.94 tests/s, 7707.77 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  com = []\n  l1.each do |n|\n    if l2.include?(n)\n      com << n\n    end\n  end\n  com.uniq.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpe6dyd_cv\nStarted\n.\nFinished in 0.000469362 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2130.55 tests/s, 8522.21 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp3ek7hc9r\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmp3ek7hc9r.rb:12:in `test_common'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_common\n     11:     candidate = method(:common)\n  => 12:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     13:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     14:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     15:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007055736 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n141.73 tests/s, 141.73 assertions/s\n",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  #your code here\n  a = l1 & l2\n  a.sort!\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp0saa2v4a\nStarted\n.\nFinished in 0.000632736 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1580.44 tests/s, 6321.75 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.select { |i| l2.include?(i) }.uniq.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp01o1sir8\nStarted\n.\nFinished in 0.000577302 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1732.20 tests/s, 6928.78 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpa0rml7t8\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpa0rml7t8.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\nFinished in 0.007655968 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n130.62 tests/s, 130.62 assertions/s\n",
      "timestamp": 1659823854
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n\tp (l1 | l2).sort.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpd4ob38xw\nStarted\n[1, 2, 3, 4, 5, 7, 9, 34, 121, 653]\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpd4ob38xw.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<[1, 2, 3, 4, 5, 7, 9, 34, 121, 653]>\n\ndiff:\n? [1, 2, 3, 4, 5, 7, 9, 34, 121, 653]\n===============================================================================\n\nFinished in 0.008391138 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n119.17 tests/s, 119.17 assertions/s\n",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp79qsv952\nStarted\n.\nFinished in 0.000643402 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1554.24 tests/s, 6216.95 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp2dj4vapv\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmp2dj4vapv.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007018467 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.48 tests/s, 142.48 assertions/s\n",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.sort\n  l2 = l2.sort\n  l3 = []\n  l1.each do |x|\n    l2.each do |y|\n      if x == y\n        l3 << x\n      end\n    end\n  end\n  l3.uniq!\n  return l3\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpc7x7uxyu\nStarted\n.\nFinished in 0.000488523 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2046.99 tests/s, 8187.95 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoqls7e5e\nStarted\n.\nFinished in 0.000577051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1732.95 tests/s, 6931.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoqls7e5e\nStarted\n.\nFinished in 0.000577051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1732.95 tests/s, 6931.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp79qsv952\nStarted\n.\nFinished in 0.000643402 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1554.24 tests/s, 6216.95 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  # TODO\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp9aq5w435\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmp9aq5w435.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007099873 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n140.85 tests/s, 140.85 assertions/s\n",
      "timestamp": 1659823854
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpa0rml7t8\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpa0rml7t8.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\nFinished in 0.007655968 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n130.62 tests/s, 130.62 assertions/s\n",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoqls7e5e\nStarted\n.\nFinished in 0.000577051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1732.95 tests/s, 6931.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort_by { |i| i }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpasebzegl\nStarted\n.\nFinished in 0.000684237 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1461.48 tests/s, 5845.93 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  # you can use l1 & l2 to get the sorted, uniq common elements of 2 arrays\n  # (l1 & l2).sort\n  # we can simply do the following:\n  l1 & l2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmplyhri24w\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmplyhri24w.rb:16:in `test_common'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_common\n     15:     candidate = method(:common)\n  => 16:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     17:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     18:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     19:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\nFinished in 0.00758492 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n131.84 tests/s, 131.84 assertions/s\n",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.select { |num| l2.include?(num) }.uniq.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpd8pz5oo1\nStarted\n.\nFinished in 0.000426477 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2344.79 tests/s, 9379.17 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpa0rml7t8\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpa0rml7t8.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\nFinished in 0.007655968 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n130.62 tests/s, 130.62 assertions/s\n",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  common_elements = []\n  l1.each do |elem|\n    if l2.include?(elem)\n      common_elements << elem\n    end\n  end\n  common_elements.uniq.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpqnilrkam\nStarted\n.\nFinished in 0.000493098 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2027.99 tests/s, 8111.98 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n\t#write your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpqubh72u_\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpqubh72u_.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.010473287 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n95.48 tests/s, 95.48 assertions/s\n",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoqls7e5e\nStarted\n.\nFinished in 0.000577051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1732.95 tests/s, 6931.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoqls7e5e\nStarted\n.\nFinished in 0.000577051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1732.95 tests/s, 6931.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n    return (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpxaa8afil\nStarted\n.\nFinished in 0.000635697 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1573.08 tests/s, 6292.31 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.sort.uniq & l2.sort.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpuj4q573t\nStarted\n.\nFinished in 0.000683929 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1462.14 tests/s, 5848.56 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n\tl3 = []\n\tl1.each do |i|\n\t\tif l2.include?(i)\n\t\t\tl3 << i\n\t\tend\n\tend\n\tl3.uniq!\n\tl3.sort!\n\treturn l3\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp8kww39yl\nStarted\n.\nFinished in 0.000494977 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2020.30 tests/s, 8081.18 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpk0agwh8a\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpk0agwh8a.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006960851 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.66 tests/s, 143.66 assertions/s\n",
      "timestamp": 1659823854
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpa0rml7t8\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpa0rml7t8.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\nFinished in 0.007655968 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n130.62 tests/s, 130.62 assertions/s\n",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n\tl1.select { |x| l2.include?(x) }.uniq.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpzztv77e0\nStarted\n.\nFinished in 0.000447546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2234.41 tests/s, 8937.63 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n\th = {}\n\tl = []\n\tl1.each { |n| h[n] = \"D\" }\n\tl2.each { |n| h[n] = \"D\" if h[n] == \"D\" }\n\th.each_key { |k| l << k }\n\tl.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpzwmic75s\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpzwmic75s.rb:18:in `test_common'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_common\n     17:     candidate = method(:common)\n  => 18:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     19:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     20:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     21:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<[1, 2, 3, 4, 5, 34, 653]>\n\ndiff:\n? [1, 2, 3, 4, 5, 34, 653]\n===============================================================================\n\nFinished in 0.007962633 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n125.59 tests/s, 125.59 assertions/s\n",
      "timestamp": 1659823854
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpk0agwh8a\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpk0agwh8a.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006960851 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.66 tests/s, 143.66 assertions/s\n",
      "timestamp": 1659823854
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpa0rml7t8\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpa0rml7t8.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\nFinished in 0.007655968 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n130.62 tests/s, 130.62 assertions/s\n",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.reject { |x| (l2 & [x]).empty? }.uniq.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpfmq_fec5\nStarted\n.\nFinished in 0.000829117 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1206.10 tests/s, 4824.41 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp79qsv952\nStarted\n.\nFinished in 0.000643402 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1554.24 tests/s, 6216.95 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoqls7e5e\nStarted\n.\nFinished in 0.000577051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1732.95 tests/s, 6931.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n    uniqs = []\n    l1.each { |element| uniqs << element if l2.include?(element) }\n    uniqs.uniq.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpfr7hm4np\nStarted\n.\nFinished in 0.000433334 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2307.69 tests/s, 9230.76 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n\t(l1 & l2).sort.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpf064_hu3\nStarted\n.\nFinished in 0.000573061 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1745.01 tests/s, 6980.06 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpa0rml7t8\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpa0rml7t8.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\nFinished in 0.007655968 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n130.62 tests/s, 130.62 assertions/s\n",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp79qsv952\nStarted\n.\nFinished in 0.000643402 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1554.24 tests/s, 6216.95 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  common_elements = l1 & l2\n  common_elements.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmphtuccoip\nStarted\n.\nFinished in 0.000566365 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1765.65 tests/s, 7062.58 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpa0rml7t8\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpa0rml7t8.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\nFinished in 0.007655968 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n130.62 tests/s, 130.62 assertions/s\n",
      "timestamp": 1659823854
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpa0rml7t8\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpa0rml7t8.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\nFinished in 0.007655968 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n130.62 tests/s, 130.62 assertions/s\n",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoqls7e5e\nStarted\n.\nFinished in 0.000577051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1732.95 tests/s, 6931.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  ary = []\n  l1.each do |i|\n    ary << i if l2.include?(i)\n  end\n  ary.uniq.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpvp_i3i_d\nStarted\n.\nFinished in 0.000499531 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2001.88 tests/s, 8007.51 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.sort.uniq & l2.sort.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpuj4q573t\nStarted\n.\nFinished in 0.000683929 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1462.14 tests/s, 5848.56 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  arr = []\n  if l1.empty? || l2.empty?\n    return []\n  else\n    # l1.each do |x|\n    #   if l2.include?(x)\n    #     arr << x\n    #   end\n    # end\n    arr = l1 & l2\n    return arr.uniq.sort\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp9yn0crk9\nStarted\n.\nFinished in 0.000456598 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2190.11 tests/s, 8760.44 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpa0rml7t8\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpa0rml7t8.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\nFinished in 0.007655968 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n130.62 tests/s, 130.62 assertions/s\n",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp79qsv952\nStarted\n.\nFinished in 0.000643402 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1554.24 tests/s, 6216.95 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  return [] if l1.empty? || l2.empty?\n  l1.uniq.sort & l2.uniq.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp_e91yrt7\nStarted\n.\nFinished in 0.000997497 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1002.51 tests/s, 4010.04 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoqls7e5e\nStarted\n.\nFinished in 0.000577051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1732.95 tests/s, 6931.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.select { |x| l2.include?(x) }.uniq.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpgax6u_9u\nStarted\n.\nFinished in 0.000582008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1718.19 tests/s, 6872.76 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpa0rml7t8\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpa0rml7t8.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\nFinished in 0.007655968 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n130.62 tests/s, 130.62 assertions/s\n",
      "timestamp": 1659823854
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpa0rml7t8\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpa0rml7t8.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\nFinished in 0.007655968 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n130.62 tests/s, 130.62 assertions/s\n",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n    @com = []\n    l1.each do |element|\n        l2.each do |element2|\n            if element == element2\n                @com << element\n            end\n        end\n    end\n    return @com.uniq.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpzcd48rdp\nStarted\n.\nFinished in 0.000425318 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2351.18 tests/s, 9404.73 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpn9eiu3uw\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpn9eiu3uw.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006808859 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n146.87 tests/s, 146.87 assertions/s\n",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoqls7e5e\nStarted\n.\nFinished in 0.000577051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1732.95 tests/s, 6931.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n\treturn nil if l1.nil? || l2.nil?\n\t[l1, l2].inject(:&).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpijri4ztr\nStarted\n.\nFinished in 0.000466239 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2144.82 tests/s, 8579.29 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n\tcommon = l1 & l2\n\tcommon.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpkr2s8nww\nStarted\n.\nFinished in 0.000602981 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1658.43 tests/s, 6633.71 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoqls7e5e\nStarted\n.\nFinished in 0.000577051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1732.95 tests/s, 6931.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoqls7e5e\nStarted\n.\nFinished in 0.000577051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1732.95 tests/s, 6931.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoqls7e5e\nStarted\n.\nFinished in 0.000577051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1732.95 tests/s, 6931.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpk0agwh8a\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpk0agwh8a.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006960851 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.66 tests/s, 143.66 assertions/s\n",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n\t(l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpzay58clv\nStarted\n.\nFinished in 0.000587072 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1703.37 tests/s, 6813.47 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  # return the sorted array with uniq values\n  (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp2hlsx34y\nStarted\n.\nFinished in 0.000703052 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1422.37 tests/s, 5689.48 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  common_array = l1.select { |x| l2.include?(x) }\n  common_array.uniq.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp3o1jjeft\nStarted\n.\nFinished in 0.000589348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1696.79 tests/s, 6787.16 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l2 & l1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpn07izvoh\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpn07izvoh.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<[5, 1, 653]>\n\ndiff:\n? [5, 1, 5, 653]\n===============================================================================\n\nFinished in 0.007198432 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.92 tests/s, 138.92 assertions/s\n",
      "timestamp": 1659823855
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  return l1 & l2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpr8av3wff\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpr8av3wff.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\nFinished in 0.006990694 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.05 tests/s, 143.05 assertions/s\n",
      "timestamp": 1659823855
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpk0agwh8a\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpk0agwh8a.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006960851 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.66 tests/s, 143.66 assertions/s\n",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  arr = l1 & l2\n  arr.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpqtcpadwh\nStarted\n.\nFinished in 0.000449081 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2226.77 tests/s, 8907.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoqls7e5e\nStarted\n.\nFinished in 0.000577051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1732.95 tests/s, 6931.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoqls7e5e\nStarted\n.\nFinished in 0.000577051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1732.95 tests/s, 6931.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n    l1 & l2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpgam3k9qa\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpgam3k9qa.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\nFinished in 0.007220274 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.50 tests/s, 138.50 assertions/s\n",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoqls7e5e\nStarted\n.\nFinished in 0.000577051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1732.95 tests/s, 6931.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoqls7e5e\nStarted\n.\nFinished in 0.000577051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1732.95 tests/s, 6931.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoqls7e5e\nStarted\n.\nFinished in 0.000577051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1732.95 tests/s, 6931.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpk0agwh8a\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpk0agwh8a.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006960851 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.66 tests/s, 143.66 assertions/s\n",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoqls7e5e\nStarted\n.\nFinished in 0.000577051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1732.95 tests/s, 6931.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoqls7e5e\nStarted\n.\nFinished in 0.000577051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1732.95 tests/s, 6931.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n    # TODO: your code here\n    (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmptoqr5n9o\nStarted\n.\nFinished in 0.000521114 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1918.97 tests/s, 7675.86 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp79qsv952\nStarted\n.\nFinished in 0.000643402 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1554.24 tests/s, 6216.95 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoqls7e5e\nStarted\n.\nFinished in 0.000577051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1732.95 tests/s, 6931.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  list1 = l1.uniq.sort\n  list2 = l2.uniq.sort\n  list1 & list2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpjuvsitt7\nStarted\n.\nFinished in 0.000469326 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2130.72 tests/s, 8522.86 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp79qsv952\nStarted\n.\nFinished in 0.000643402 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1554.24 tests/s, 6216.95 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp79qsv952\nStarted\n.\nFinished in 0.000643402 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1554.24 tests/s, 6216.95 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoqls7e5e\nStarted\n.\nFinished in 0.000577051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1732.95 tests/s, 6931.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 = l1.sort\n  l2 = l2.sort\n  result = []\n  l1.each { |n| result << n if l2.include?(n) }\n  result.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpo5s6x2pe\nStarted\n.\nFinished in 0.000687715 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1454.09 tests/s, 5816.36 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  # code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmppkmwevo4\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmppkmwevo4.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006501563 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.81 tests/s, 153.81 assertions/s\n",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoqls7e5e\nStarted\n.\nFinished in 0.000577051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1732.95 tests/s, 6931.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp79qsv952\nStarted\n.\nFinished in 0.000643402 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1554.24 tests/s, 6216.95 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoqls7e5e\nStarted\n.\nFinished in 0.000577051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1732.95 tests/s, 6931.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp_48q95m1\nStarted\n.\nFinished in 0.000518957 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1926.94 tests/s, 7707.77 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n\tanswer = []\n\tl1.each do |num|\n\t\tl2.each do |number|\n\t\t\tif num == number\n\t\t\t\tanswer << num\n\t\t\tend\n\t\tend\n\tend\n\tanswer.uniq.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpyj3na8e1\nStarted\n.\nFinished in 0.000411388 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2430.80 tests/s, 9723.18 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp79qsv952\nStarted\n.\nFinished in 0.000643402 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1554.24 tests/s, 6216.95 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoqls7e5e\nStarted\n.\nFinished in 0.000577051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1732.95 tests/s, 6931.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp79qsv952\nStarted\n.\nFinished in 0.000643402 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1554.24 tests/s, 6216.95 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoqls7e5e\nStarted\n.\nFinished in 0.000577051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1732.95 tests/s, 6931.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n\treturn (l1.uniq & l2.uniq).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmprthdl7uw\nStarted\n.\nFinished in 0.000582728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1716.07 tests/s, 6864.27 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp79qsv952\nStarted\n.\nFinished in 0.000643402 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1554.24 tests/s, 6216.95 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpa0rml7t8\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpa0rml7t8.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\nFinished in 0.007655968 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n130.62 tests/s, 130.62 assertions/s\n",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp79qsv952\nStarted\n.\nFinished in 0.000643402 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1554.24 tests/s, 6216.95 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpk0agwh8a\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpk0agwh8a.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006960851 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.66 tests/s, 143.66 assertions/s\n",
      "timestamp": 1659823854
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpa0rml7t8\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpa0rml7t8.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\nFinished in 0.007655968 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n130.62 tests/s, 130.62 assertions/s\n",
      "timestamp": 1659823854
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n\tarr = []\n\tl1.each { |i| arr << i if l2.include?(i) }\n\tarr.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmplpu4q1gy\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmplpu4q1gy.rb:15:in `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\nFinished in 0.010442985 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n95.76 tests/s, 95.76 assertions/s\n",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoqls7e5e\nStarted\n.\nFinished in 0.000577051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1732.95 tests/s, 6931.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  # 1. add all elements from l1 and l2 to one array called result\n  # 2. delete all duplicates\n  # 3. sort array\n  # 4. return result\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpd36dggu6.rb:12: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpd36dggu6.rb:20: syntax error, unexpected end-of-input, expecting `end'\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n\tcommon_elements = []\n\tl1.each do |element|\n\t\tif l2.include?(element)\n\t\t\tcommon_elements << element\n\t\tend\n\tend\n\treturn common_elements.uniq.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp1b7ft5oa\nStarted\n.\nFinished in 0.000459368 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2176.90 tests/s, 8707.62 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n\t(l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpzay58clv\nStarted\n.\nFinished in 0.000587072 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1703.37 tests/s, 6813.47 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  # s1 = Set.new(l1)\n  # s2 = Set.new(l2)\n  # s1.intersection(s2).to_a\n  l1 & l2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp63kmi2kz\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmp63kmi2kz.rb:16:in `test_common'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_common\n     15:     candidate = method(:common)\n  => 16:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     17:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     18:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     19:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\nFinished in 0.008750226 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.28 tests/s, 114.28 assertions/s\n",
      "timestamp": 1659823855
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpk0agwh8a\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpk0agwh8a.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006960851 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.66 tests/s, 143.66 assertions/s\n",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoqls7e5e\nStarted\n.\nFinished in 0.000577051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1732.95 tests/s, 6931.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.select{|element| l2.include?(element)}.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpe3f8x6vr\nStarted\n.\nFinished in 0.000462442 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2162.43 tests/s, 8649.73 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp_48q95m1\nStarted\n.\nFinished in 0.000518957 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1926.94 tests/s, 7707.77 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  #l1 & l2\n  (l1 & l2).sort!\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmptv_cn1d7\nStarted\n.\nFinished in 0.000579133 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1726.72 tests/s, 6906.88 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n\tarray1 = l1.uniq.sort\n\tarray2 = l2.uniq.sort\n\t# find the shorter of the two arrays\n\tshortest = array1.length < array2.length ? array1 : array2\n\t# initialize an empty array to house the elements in common\n\tcommon = []\n\t# compare each element in the shortest array to each element in the other\n\tshortest.each do |x|\n\t\tif array1.include?(x) && array2.include?(x)\n\t\t\tcommon << x\n\t\tend\n\tend\n\t# return a new array with the elements in common\n\tcommon\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp2q2055d0\nStarted\n.\nFinished in 0.000464468 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2153.00 tests/s, 8612.00 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n    n = []\n    l1.each { |i| l2.each { |j| n << i if i == j } }\n    n.uniq.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpbyon1kuh\nStarted\n.\nFinished in 0.000489064 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2044.72 tests/s, 8178.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n    l3 = l1 & l2\n    l3.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp96kofskw\nStarted\n.\nFinished in 0.000428577 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2333.30 tests/s, 9333.21 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n    l1.uniq.sort.keep_if { |x| l2.uniq.sort.include?(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpkhdcbk8e\nStarted\n.\nFinished in 0.000583138 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1714.86 tests/s, 6859.44 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpa0rml7t8\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpa0rml7t8.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\nFinished in 0.007655968 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n130.62 tests/s, 130.62 assertions/s\n",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoqls7e5e\nStarted\n.\nFinished in 0.000577051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1732.95 tests/s, 6931.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n    (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpq8allgp1\nStarted\n.\nFinished in 0.000417162 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2397.15 tests/s, 9588.60 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp_48q95m1\nStarted\n.\nFinished in 0.000518957 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1926.94 tests/s, 7707.77 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n    # l1 & l2\n    (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp2csy79wn\nStarted\n.\nFinished in 0.000646291 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1547.29 tests/s, 6189.16 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoqls7e5e\nStarted\n.\nFinished in 0.000577051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1732.95 tests/s, 6931.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  s1 = Set.new(l1)\n  s2 = Set.new(l2)\n  (s1 & s2).to_a.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpmnzryi8u\nStarted\nE\n===============================================================================\nError: test_common(TestHumanEval):\n  NameError: uninitialized constant Set\n  \n    s1 = Set.new(l1)\n         ^^^\n/tmp/tmpmnzryi8u.rb:7:in `common'\n/tmp/tmpmnzryi8u.rb:15:in `call'\n/tmp/tmpmnzryi8u.rb:15:in `test_common'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_common\n     14:     candidate = method(:common)\n  => 15:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     16:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     17:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     18:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n===============================================================================\n\nFinished in 0.007787574 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.41 tests/s, 0.00 assertions/s\n",
      "timestamp": 1659823855
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpa0rml7t8\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpa0rml7t8.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\nFinished in 0.007655968 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n130.62 tests/s, 130.62 assertions/s\n",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n    com = l1 & l2\n    com.sort.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpybif8ecu\nStarted\n.\nFinished in 0.000555321 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1800.76 tests/s, 7203.04 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpa0rml7t8\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpa0rml7t8.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\nFinished in 0.007655968 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n130.62 tests/s, 130.62 assertions/s\n",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n    a = l1.sort\n    b = l2.sort\n    arr = []\n    a.each do |x|\n        b.each do |y|\n            if x == y\n                arr << x\n            end\n        end\n    end\n    arr.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpyrjw9scg\nStarted\n.\nFinished in 0.000555541 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1800.05 tests/s, 7200.19 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n    l1 & l2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpgam3k9qa\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpgam3k9qa.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\nFinished in 0.007220274 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.50 tests/s, 138.50 assertions/s\n",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  # (l1 & l2).sort\n  l1.each_with_object([]) do |value, arr|\n    arr << value if l2.include?(value)\n  end.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp1xohg3l_\nStarted\n.\nFinished in 0.000419204 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2385.47 tests/s, 9541.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoqls7e5e\nStarted\n.\nFinished in 0.000577051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1732.95 tests/s, 6931.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n\t(l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpzay58clv\nStarted\n.\nFinished in 0.000587072 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1703.37 tests/s, 6813.47 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpa0rml7t8\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpa0rml7t8.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\nFinished in 0.007655968 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n130.62 tests/s, 130.62 assertions/s\n",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n    (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpq8allgp1\nStarted\n.\nFinished in 0.000417162 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2397.15 tests/s, 9588.60 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp79qsv952\nStarted\n.\nFinished in 0.000643402 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1554.24 tests/s, 6216.95 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n    new_array = []\n    l1.each do |item|\n        if l2.include?(item) && !new_array.include?(item)\n            new_array << item\n        end\n    end\n    new_array.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpz8yeivaq\nStarted\n.\nFinished in 0.000415268 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2408.08 tests/s, 9632.33 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp79qsv952\nStarted\n.\nFinished in 0.000643402 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1554.24 tests/s, 6216.95 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoqls7e5e\nStarted\n.\nFinished in 0.000577051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1732.95 tests/s, 6931.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n    (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpq8allgp1\nStarted\n.\nFinished in 0.000417162 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2397.15 tests/s, 9588.60 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoqls7e5e\nStarted\n.\nFinished in 0.000577051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1732.95 tests/s, 6931.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoqls7e5e\nStarted\n.\nFinished in 0.000577051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1732.95 tests/s, 6931.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.each_with_object(Array.new) do |e, arr|\n    arr << e if l2.include?(e)\n  end.uniq.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpeue27sf1\nStarted\n.\nFinished in 0.000423968 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2358.67 tests/s, 9434.67 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  h1 = {}\n  l1.each do |v|\n    h1[v] = true\n  end\n  h2 = {}\n  l2.each do |v|\n    h2[v] = true\n  end\n  h3 = {}\n  h1.each do |k, v|\n    if h2[k]\n      h3[k] = true\n    end\n  end\n  h3.keys.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpmb4ox9ug\nStarted\n.\nFinished in 0.000409661 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2441.04 tests/s, 9764.17 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  return l1 & l2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpr8av3wff\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpr8av3wff.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\nFinished in 0.006990694 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.05 tests/s, 143.05 assertions/s\n",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  return l1.sort.uniq & l2.sort.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp40h1w0tm\nStarted\n.\nFinished in 0.000485627 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2059.19 tests/s, 8236.77 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpk0agwh8a\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpk0agwh8a.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006960851 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.66 tests/s, 143.66 assertions/s\n",
      "timestamp": 1659823854
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  return l1 & l2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpr8av3wff\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpr8av3wff.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\nFinished in 0.006990694 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.05 tests/s, 143.05 assertions/s\n",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n\t(l1 & l2).sort.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpf064_hu3\nStarted\n.\nFinished in 0.000573061 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1745.01 tests/s, 6980.06 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n\t(l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpzay58clv\nStarted\n.\nFinished in 0.000587072 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1703.37 tests/s, 6813.47 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  # TODO: Return sorted unique common elements for two lists.\n  l1 & l2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpygxtre7_\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpygxtre7_.rb:14:in `test_common'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_common\n     13:     candidate = method(:common)\n  => 14:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     15:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     16:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     17:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\nFinished in 0.007722283 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n129.50 tests/s, 129.50 assertions/s\n",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n    l1.select{|n| l2.include?(n)}.uniq.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpv9exuvfr\nStarted\n.\nFinished in 0.000600348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1665.70 tests/s, 6662.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpn9eiu3uw\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpn9eiu3uw.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006808859 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n146.87 tests/s, 146.87 assertions/s\n",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  result = []\n  l1.each do |element|\n    if l2.include?(element)\n      result << element\n    end\n  end\n  result.uniq.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpe43fszcz\nStarted\n.\nFinished in 0.000403922 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2475.73 tests/s, 9902.90 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoqls7e5e\nStarted\n.\nFinished in 0.000577051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1732.95 tests/s, 6931.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  # FILL ME IN\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpj_3ne8xr\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpj_3ne8xr.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007258442 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.77 tests/s, 137.77 assertions/s\n",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoqls7e5e\nStarted\n.\nFinished in 0.000577051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1732.95 tests/s, 6931.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpk0agwh8a\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpk0agwh8a.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006960851 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.66 tests/s, 143.66 assertions/s\n",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoqls7e5e\nStarted\n.\nFinished in 0.000577051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1732.95 tests/s, 6931.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoqls7e5e\nStarted\n.\nFinished in 0.000577051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1732.95 tests/s, 6931.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n    l1.uniq.sort & l2.uniq.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpssm6ykbx\nStarted\n.\nFinished in 0.000432843 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2310.31 tests/s, 9241.23 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  unique_elements = []\n  # store elements in hash with values set to true\n  hash = {}\n  l1.each { |item| hash[item] = true }\n  l2.each { |item| hash[item] = true }\n  hash.each { |k, v| unique_elements << k if v }\n  unique_elements.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmphmvdvwgr\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmphmvdvwgr.rb:19:in `test_common'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_common\n     18:     candidate = method(:common)\n  => 19:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     20:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     21:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     22:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<[1, 2, 3, 4, 5, 7, 9, 34, 121, 653]>\n\ndiff:\n? [1, 2, 3, 4, 5, 7, 9, 34, 121, 653]\n===============================================================================\n\nFinished in 0.008270182 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n120.92 tests/s, 120.92 assertions/s\n",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n\t(l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpzay58clv\nStarted\n.\nFinished in 0.000587072 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1703.37 tests/s, 6813.47 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n\tl1.uniq.sort & l2.uniq.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpdq0lx6cl\nStarted\n.\nFinished in 0.000420719 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2376.88 tests/s, 9507.53 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  #get all unique values from l1 and l2\n  l1.uniq!\n  l2.uniq!\n  #get all common values by getting the intersection of l1 and l2\n  common = l1 & l2\n  #sort the list of common values\n  common.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpxbssfe1r\nStarted\n.\nFinished in 0.000548753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1822.31 tests/s, 7289.25 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  #l1 & l2\n  l1.select { |a| l2.include?(a) }.uniq.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmptibyui2t\nStarted\n.\nFinished in 0.000425222 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2351.71 tests/s, 9406.85 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpa0rml7t8\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpa0rml7t8.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\nFinished in 0.007655968 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n130.62 tests/s, 130.62 assertions/s\n",
      "timestamp": 1659823854
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  # p l1\n  # p l2\n  # a = (l1 & l2).sort\n  # return a\n  l1 & l2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpy_lx5x13\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpy_lx5x13.rb:17:in `test_common'\n     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_common\n     16:     candidate = method(:common)\n  => 17:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     18:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     19:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     20:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\nFinished in 0.007119015 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n140.47 tests/s, 140.47 assertions/s\n",
      "timestamp": 1659823855
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2 # or l1.to_set.intersection(l2.to_set).to_a.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp4984i4ra\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmp4984i4ra.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\nFinished in 0.007111542 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n140.62 tests/s, 140.62 assertions/s\n",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n    #new_arr = []\n    #l1.each do |i|\n    #    if l2.include?(i)\n    #        new_arr << i\n    #    end\n    #end\n    #new_arr.uniq.sort\n    new_arr = l1 & l2\n    new_arr.uniq.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpfb4n4o6y\nStarted\n.\nFinished in 0.000428136 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2335.71 tests/s, 9342.83 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp79qsv952\nStarted\n.\nFinished in 0.000643402 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1554.24 tests/s, 6216.95 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpdrsh1vad\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpdrsh1vad.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006519128 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.39 tests/s, 153.39 assertions/s\n",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.select { |x| l2.include?(x) }.uniq.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpgax6u_9u\nStarted\n.\nFinished in 0.000582008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1718.19 tests/s, 6872.76 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  # TODO: Implement this method\n  # return l1 & l2\n  l1.select{|x| l2.include?(x)}.uniq.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp228cja2n\nStarted\n.\nFinished in 0.000522221 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1914.90 tests/s, 7659.59 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n\tl1 = l1.sort\n\tl2 = l2.sort\n\tl1.uniq.select{|x| l2.include?(x)}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpa26v8fef\nStarted\n.\nFinished in 0.000520706 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1920.47 tests/s, 7681.88 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n\tl1 & l2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpbxmfyww1\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpbxmfyww1.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\nFinished in 0.007176355 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n139.35 tests/s, 139.35 assertions/s\n",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp79qsv952\nStarted\n.\nFinished in 0.000643402 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1554.24 tests/s, 6216.95 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpa0rml7t8\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpa0rml7t8.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\nFinished in 0.007655968 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n130.62 tests/s, 130.62 assertions/s\n",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  uniq_l1 = l1.uniq.sort\n  uniq_l2 = l2.uniq.sort\n  if uniq_l1.length > uniq_l2.length\n    uniq_l1 & uniq_l2\n  else\n    uniq_l2 & uniq_l1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpm7a5c5a0\nStarted\n.\nFinished in 0.00076452 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1308.01 tests/s, 5232.04 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  return (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp4pmcislv\nStarted\n.\nFinished in 0.000788931 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1267.54 tests/s, 5070.15 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp79qsv952\nStarted\n.\nFinished in 0.000643402 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1554.24 tests/s, 6216.95 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  common_eles = l1 & l2\n  common_eles.sort.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmplior4me3\nStarted\n.\nFinished in 0.00090897 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1100.15 tests/s, 4400.59 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpa0rml7t8\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpa0rml7t8.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\nFinished in 0.007655968 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n130.62 tests/s, 130.62 assertions/s\n",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoqls7e5e\nStarted\n.\nFinished in 0.000577051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1732.95 tests/s, 6931.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp3ek7hc9r\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmp3ek7hc9r.rb:12:in `test_common'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_common\n     11:     candidate = method(:common)\n  => 12:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     13:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     14:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     15:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007055736 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n141.73 tests/s, 141.73 assertions/s\n",
      "timestamp": 1659823854
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpk0agwh8a\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpk0agwh8a.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006960851 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.66 tests/s, 143.66 assertions/s\n",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  # return (l1 & l2).sort\n  (l1 & l2).sort { |x, y| x <=> y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp3q8snip8\nStarted\n.\nFinished in 0.000397096 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2518.28 tests/s, 10073.13 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoqls7e5e\nStarted\n.\nFinished in 0.000577051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1732.95 tests/s, 6931.80 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpa0rml7t8\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpa0rml7t8.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\nFinished in 0.007655968 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n130.62 tests/s, 130.62 assertions/s\n",
      "timestamp": 1659823854
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n    l1 & l2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpgam3k9qa\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpgam3k9qa.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\nFinished in 0.007220274 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.50 tests/s, 138.50 assertions/s\n",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n\t((l1 & l2).sort).uniq\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpqtcsx8jx\nStarted\n.\nFinished in 0.0004028 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2482.62 tests/s, 9930.49 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2 # Using & operator to get common elements of two lists.\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp7_ec0fug\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmp7_ec0fug.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\nFinished in 0.011083649 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n90.22 tests/s, 90.22 assertions/s\n",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n\tif l1.size >= l2.size\n\t\tl2.select { |e| l1.include?(e) }.uniq.sort\n\telse\n\t\tl1.select { |e| l2.include?(e) }.uniq.sort\n\tend\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpmdmrzkkz\nStarted\n.\nFinished in 0.000389429 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2567.86 tests/s, 10271.45 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpa0rml7t8\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpa0rml7t8.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\nFinished in 0.007655968 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n130.62 tests/s, 130.62 assertions/s\n",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp79qsv952\nStarted\n.\nFinished in 0.000643402 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1554.24 tests/s, 6216.95 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp79qsv952\nStarted\n.\nFinished in 0.000643402 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1554.24 tests/s, 6216.95 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823854
    },
    {
      "exit_code": 1,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpn9eiu3uw\nStarted\nF\n===============================================================================\nFailure: test_common(TestHumanEval)\n/tmp/tmpn9eiu3uw.rb:13:in `test_common'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:     assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006808859 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n146.87 tests/s, 146.87 assertions/s\n",
      "timestamp": 1659823855
    },
    {
      "exit_code": 0,
      "program": "# Return sorted unique common elements for two lists.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  count = []\n  l1.each do |value|\n    count << value if l2.include?(value)\n  end\n  count.uniq.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp52f5e8dv\nStarted\n.\nFinished in 0.000501096 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1995.63 tests/s, 7982.50 assertions/s\n",
      "stdout": "",
      "timestamp": 1659823855
    }
  ]
}