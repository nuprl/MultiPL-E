name: HumanEval_111_histogram
language: rb
prompt: "# Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n# of the letter with the most repetition and containing the corresponding\
  \ count.\n# If several letters have the same occurrence, return all of them.\n#\
  \ Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n# histogram('a b b\
  \ a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a': 2, 'b': 2}\n# histogram('b\
  \ b b b a') == {'b': 4}\n# histogram('') == {}\ndef histogram(test)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_histogram\n\
  \    candidate = method(:histogram)\n    assert_equal({\"a\" => 2, \"b\" => 2},\
  \ candidate.call(\"a b b a\"))\n    assert_equal({\"a\" => 2, \"b\" => 2}, candidate.call(\"\
  a b c a b\"))\n    assert_equal({\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1,\
  \ \"g\" => 1}, candidate.call(\"a b c d g\"))\n    assert_equal({\"r\" => 1, \"\
  t\" => 1, \"g\" => 1}, candidate.call(\"r t g\"))\n    assert_equal({\"b\" => 4},\
  \ candidate.call(\"b b b b a\"))\n    assert_equal({\"r\" => 1, \"t\" => 1, \"g\"\
  \ => 1}, candidate.call(\"r t g\"))\n    assert_equal({}, candidate.call(\"\"))\n\
  \    assert_equal({\"a\" => 1}, candidate.call(\"a\"))\n  end\nend\n"
completions: ["  letter_count = Hash.new(0)\n  highest_count = 0\n  test.split(\"\
    \ \").each do |item|\n    letter_count[item] += 1\n    highest_count = [highest_count,\
    \ letter_count[item]].max\n  end\n  letter_count.select { |k, v| v == highest_count\
    \ }\nend", "  if test == ''\n    return {}\n  end\n  result = Hash.new(0)\n  test.split('').each\
    \ do |char|\n    result[char] += 1\n  end\n  res = {}\n  result.max_by { |key,\
    \ val| res[key] = val if val == result.values.max }\n  res\nend", "  dict = {}\n\
    \  array = test.split(' ')\n  array.each do |x|\n    if dict.has_key?(x)\n   \
    \   dict[x] += 1\n    else\n      dict[x] = 1\n    end\n  end\n  dict.each do\
    \ |k, v|\n    if dict.values.max > v\n      dict.delete(k)\n    end\n  end\n \
    \ dict\nend", "  test.split(' ').inject(Hash.new(0)) { |hash, word| hash[word]\
    \ += 1; hash }\nend", "  return {} if test.empty?\n  result = {}\n  test.split('\
    \ ').each do |x|\n    result[x] = result[x].to_i + 1\n  end\n  result\nend", " \
    \ test.delete(' ').chars.uniq.map { |x| [x, test.count(x)] }.to_h\nend", "  result\
    \ = {}\n  test.split(' ').each do |letter|\n    if result.has_key?(letter)\n \
    \     result[letter] += 1\n    else\n      result[letter] = 1\n    end\n  end\n\
    \  result.sort_by { |letter,count| -count }\nend", "  hash = Hash.new\n  arr =\
    \ test.split(\" \")\n  arr.each do |i|\n    if hash.key?(i)\n      hash[i] +=\
    \ 1\n    else\n      hash[i] = 1\n    end\n  end\n  biggest = hash.values.max\n\
    \  hash.select {|k,v| v == biggest}\nend", "  # make an array of letters\n  letters\
    \ = test.split\n  # create a hash\n  occurences = Hash.new(0)\n  # add letter\
    \ to hash\n  letters.each do |letter|\n    occurences[letter] += 1\n  end\n  occurences.keep_if\
    \ { |k, v| v == occurences.values.max }\nend\nputs \"This is histogram function\"\
    \nputs histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\nputs histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\nputs histogram('a b c a b') == {'a': 2, 'b': 2}\nputs histogram('b\
    \ b b b a') == {'b': 4}\nputs histogram('') == {}", "  letter_counts = {}\n  test.split(\"\
    \ \").each do |letter|\n    if letter_counts[letter]\n      letter_counts[letter]\
    \ += 1\n    else\n      letter_counts[letter] = 1\n    end\n  end\n  max_count\
    \ = letter_counts.values.max\n  letter_counts.select { |letter, count| count ==\
    \ max_count }\nend", "  h = Hash.new(0)\n  test.split.each { |x| h[x] += 1 }\n\
    \  h\nend", "  letters = test.split(' ')\n  counts = {}\n  letters.each do |l|\n\
    \    counts[l] = letters.count(l)\n  end\n  counts\nend", "  dict = Hash.new(0)\n\
    \  # We could use count instead of each_char to simplify the exercise but I want\
    \ to\n  # try a different approach\n  test.each_char do |char|\n    dict[char]\
    \ += 1\n  end\n  dict.select{|k,v| v == dict.values.max}\nend", "    counts =\
    \ Hash.new(0)\n    test.split.each do |letter|\n        counts[letter] += 1\n\
    \    end\n    counts.delete_if {|k,v| v != counts.values.max}\nend", "  test.gsub('\
    \ ', '').chars.each_with_object(Hash.new(0)) { |char, hash| hash[char] += 1 }\n\
    end", "  dict = Hash.new\n  test.split(' ').each { |x|\n    if dict.has_key?(x)\n\
    \      dict[x] += 1\n    else\n      dict[x] = 1\n    end\n  }\n  most = dict.values.max\n\
    \  dict.select { |k, v| v == most }\nend", "  letter_hash = Hash.new(0)\n  test.split.each\
    \ { |l| letter_hash[l] += 1 }\n  letter_hash.reject { |k, v| v < letter_hash.values.max\
    \ }\nend", "  result = Hash.new(0)\n  test.split(\" \").each { |word| result[word]\
    \ += 1 }\n  result\nend", "  answer = {}\n  if test.empty?\n    return answer\n\
    \  else\n    input = test.split(\" \")\n    input.each do |x|\n      if answer.key?(x)\n\
    \        answer[x] += 1\n      else\n        answer[x] = 1\n      end\n    end\n\
    \    return answer\n  end\nend", "  # Make an array of the letters, alphabetize\
    \ it, and then do a count\n  array = test.split(' ')\n  array.sort!\n  array.uniq!\n\
    \  count = Hash.new(0)\n  max_count = 0\n  result = []\n  array.each do |letter|\n\
    \    count[letter] += 1\n    if count[letter] > max_count\n      max_count = count[letter]\n\
    \    end\n  end\n  count.each do |letter, number|\n    if number == max_count\n\
    \      result << letter\n    end\n  end\n  result.each do |letter|\n    puts \"\
    #{letter}: #{max_count}\"\n  end\nend", end, "  str = test.split(\" \")\n  res\
    \ = {}\n  str.each do |letter|\n    res[letter] = str.count(letter)\n  end\n \
    \ res\nend", "  result = {}\n  test.split(\" \").each do |element|\n    if result.has_key?(element)\n\
    \      result[element] += 1\n    else\n      result[element] = 1\n    end\n  end\n\
    \  result\nend", "  test.split(' ').each_with_object(Hash.new(0)) { |item, result|\
    \ result[item] += 1 }\nend", "  histogram = {}\n  test.split(\" \").each do |word|\n\
    \    if histogram.key?(word)\n      histogram[word] += 1\n    else\n      histogram[word]\
    \ = 1\n    end\n  end\n  return histogram\nend", "  hash = Hash.new(0)\n  test.split.each\
    \ do |x|\n    hash[x] += 1\n  end\n  hash\nend", "  res = {}\n  test.split(' ').each\
    \ { |e| res[e] = res[e].to_i + 1 }\n  res\nend", "  histogram = Hash.new(0)\n\
    \  if test.empty?\n    return histogram\n  else\n    test.split(' ').each do |x|\n\
    \      histogram[x] += 1\n    end\n    return histogram\n  end\nend", "  histogram\
    \ = Hash.new(0)\n  test.split(' ').each { |word| histogram[word] += 1 }\n  histogram\n\
    end", "  hsh = {}\n  test.split(' ').each do |t|\n    hsh[t] = test.count(t)\n\
    \  end\n  hsh\nend", "  test.split(' ').each_with_object(Hash.new(0)) do |value,\
    \ hash|\n    hash[value] += 1\n  end\nend", "  test.chars.group_by { |item| item\
    \ }.map { |key, value| [key, value.count] }.to_h\nend", "  test_arr = test.split('\
    \ ')\n  test_hash = {}\n  test_arr.each do |word|\n    if test_hash.has_key?(word)\n\
    \      test_hash[word] += 1\n    else\n      test_hash[word] = 1\n    end\n  end\n\
    \  max_value = test_hash.values.max\n  test_hash.select { |k, v| v == max_value\
    \ }\nend", "  x = test.split(\" \")\n  y = Hash.new(0)\n  x.each { |x| y[x] +=\
    \ 1 }\n  return y\nend", "  histogram = Hash.new(0)\n  test.split.each { |letter|\
    \ histogram[letter] += 1 }\n  histogram.select { |k, v| v == histogram.values.max\
    \ }\nend", "  char_count = Hash.new(0)\n  max_count = 0\n  max_chars = []\n  test.each_char\
    \ do |char|\n    char_count[char] += 1\n    if char_count[char] > max_count\n\
    \      max_count = char_count[char]\n      max_chars = [char]\n    elsif char_count[char]\
    \ == max_count\n      max_chars << char\n    end\n  end\n  max_chars.each do |char|\n\
    \    max_chars[char] = max_count\n  end\n  max_chars\nend", "  hist = Hash.new(0)\n\
    \  test.split(' ').each { |x| hist[x] += 1 }\n  max = hist.max_by { |_, v| v }[1]\n\
    \  hist.keep_if { |_, v| v == max }\nend", "  letters = test.split(\" \")\n  count\
    \ = Hash.new(0)\n  letters.each do |letter|\n    count[letter] += 1\n  end\n \
    \ temp = count.sort_by {|key, value| value}\n  temp.reverse!\n  temp.map {|key,\
    \ value| key if value == temp[0][1]}.compact!\nend", "  test.split(' ').each_with_object(Hash.new(0))\
    \ { |letter, histogram| histogram[letter] += 1 }\nend", "  test_arr = test.split('\
    \ ')\n  histogram = {}\n  test_arr.each do |x|\n    if histogram.has_key?(x)\n\
    \      histogram[x] += 1\n    else\n      histogram[x] = 1\n    end\n  end\n \
    \ return histogram\nend", "  # write your code here\nend", "  occurrence = {}\n\
    \  test.split(' ').each do |letter|\n    if occurrence.has_key?(letter)\n    \
    \  occurrence[letter] += 1\n    else\n      occurrence[letter] = 1\n    end\n\
    \  end\n  max = occurrence.values.max\n  result = {}\n  occurrence.each do |key,\
    \ value|\n    if value == max\n      result[key] = value\n    end\n  end\n  result\n\
    end", "  r = {}\n  test.split.each do |a|\n    r[a] = r[a].to_i + 1\n  end\n \
    \ r\nend", "  # Create an empty hash to store the letter and its frequency\n \
    \ char_hash = {}\n  # Split the string into an array of strings\n  char_arr =\
    \ test.split\n  # Iterate over each character in the array\n  char_arr.each do\
    \ |char|\n    # Set the key to the char, and the value to the number of occurrences\n\
    \    char_hash[char] = char_arr.count(char)\n  end\n  # Set a variable to the\
    \ value of the greatest occurring character\n  max_value = char_hash.values.max\n\
    \  # Set a variable to an empty hash\n  max_hash = {}\n  # Iterate over each key/value\
    \ pair in the original hash\n  char_hash.each do |key, value|\n    # Add all key/value\
    \ pairs where the value is equal to the max to the new hash\n    max_hash[key]\
    \ = value if value == max_value\n  end\n  # Return the new hash\n  max_hash\n\
    end", "  result = {}\n  test.split(' ').each do |letter|\n    result[letter] =\
    \ test.split(' ').count(letter)\n  end\n  result\nend", "  final = {}\n  test.each_char\
    \ do |i|\n    final[i] = test.count(i)\n  end\n  final\nend", "  hist = Hash.new(0)\n\
    \  return hist if test.length == 0\n  test.split(\" \").each { |key| hist[key]\
    \ += 1 }\n  hist.select { |key, value| value == hist.values.max }\nend", "  #\
    \ Convert str to arr\n  arr = test.split(' ')\n  # Sort arr\n  arr.sort!\n  #\
    \ Convert back to hash\n  #   Initialize empty hash\n  hist = {}\n  #   Push first\
    \ value to hash\n  hist[arr[0]] = 1\n  #   Convert to hash\n  for i in 1..arr.length\
    \ - 1\n    # If value already in hash add to total\n    if hist.include?(arr[i])\n\
    \      hist[arr[i]] += 1\n    # Else add to hash\n    else\n      hist[arr[i]]\
    \ = 1\n    end\n  end\n  # Return hash\n  return hist\nend", "  newHash = Hash.new(0)\n\
    \  test.split(' ').each { |x| newHash[x] += 1 }\n  newHash\nend", "  result =\
    \ {}\n  test.split(\" \").each do |char|\n    if result.key?(char)\n      result[char]\
    \ += 1\n    else\n      result[char] = 1\n    end\n  end\n  result.select{|k,v|\
    \ v == result.values.max}\nend", "  hist = {}\n  test.split(\" \").each { |letter|\
    \ hist[letter] = test.count(letter) }\n  hist\nend", "  hist = {}\n  test.split('\
    \ ').each do |letter|\n    count = test.split(' ').count(letter)\n    hist[letter]\
    \ = count\n  end\n  hist\nend", "  histo = Hash.new { |hash, key| hash[key] =\
    \ 0 }\n  test.split(' ').each { |letter| histo[letter] += 1 }\n  sorted = histo.sort_by\
    \ { |_key, value| value }\n  max = sorted.last.last\n  histo.delete_if { |_key,\
    \ value| value != max }\nend", "\td = Hash.new(0)\n\tmax = 0\n\ttest.split(\"\
    \ \").each do |s|\n\t\td[s] += 1\n\t\tmax = d[s] if d[s] > max\n\tend\n\td.select\
    \ {|k,v| v == max}\nend", "  h = Hash.new(0)\n  test.split(' ').each do |word|\n\
    \    h[word] += 1\n  end\n  h.max_by { |word, count| count }.first(2).to_h\nend",
  "  output = Hash.new(0)\n  test.split.each do |i|\n    output[i] += 1\n  end\n \
    \ output.each do |k, v|\n    if v == output.values.max\n      puts k\n    end\n\
    \  end\nend", "  final = {}\n  a = test.split('')\n  a.each { |k|\n    if final.include?(k)\n\
    \      final[k] += 1\n    else\n      final[k] = 1\n    end\n  }\n  final\nend",
  "  # convert string to array\n  arr = test.split(\" \")\n  # Convert to hash, counting\
    \ occurrences\n  hist = arr.inject(Hash.new(0)) { |h, x| h[x] += 1; h }\n  # get\
    \ max values\n  highest = hist.values.max\n  # find keys with the highest value,\
    \ return hash of the corresponding keys and values\n  hist.select { |k, v| v ==\
    \ highest }\nend", "  h = {}\n  test.split(\" \").each do |i|\n    if h.has_key?(i)\n\
    \      h[i] += 1\n    else\n      h[i] = 1\n    end\n  end\n  h.max_by{|k,v| v}[1]\
    \ == h.values.max ? h.select{|k,v| v == h.values.max} : h.max_by{|k,v| v}\nend",
  "  test.split(' ').reduce(Hash.new(0)) do |hash, word|\n    hash[word] += 1\n  \
    \  hash\n  end\nend", "  result = {}\n  test.split.each do |x|\n    result[x]\
    \ = test.count(x)\n  end\n  result\nend", "  histogram = Hash.new(0)\n  histogram_keys\
    \ = []\n  histogram_values = []\n  split_test = test.split(\" \")\n  split_test.each\
    \ { |letter| histogram[letter] += 1 }\n  histogram.each do |key, value|\n    histogram_keys\
    \ << key\n    histogram_values << value\n  end\n  if histogram_values.max != histogram_values.min\n\
    \    return histogram\n  elsif histogram_values.max == histogram_values.min\n\
    \    return new_histogram = { histogram_keys[0] => histogram_values[0], histogram_keys[1]\
    \ => histogram_values[1], histogram_keys[2] => histogram_values[2] }\n  end\n\
    end", "  dict = Hash.new(0)\n  test.split(' ').each do |letter|\n    dict[letter]\
    \ += 1\n  end\n  dict\nend", "  d = {}\n  test.split(' ').each do |letter|\n \
    \   if d.key?(letter)\n      d[letter] += 1\n    else\n      d[letter] = 1\n \
    \   end\n  end\n  d.select { |_, v| v == d.values.max }\nend", "  answer = {}\n\
    \  test.split(' ').each do |t|\n    answer[t] = 0 if answer[t].nil?\n    answer[t]\
    \ += 1\n  end\n  answer\nend", "  letter_count = {}\n  letter_count.default =\
    \ 0\n  test.split(' ').each do |letter|\n    letter_count[letter] += 1\n  end\n\
    \  letter_count\nend", "  if test == ''\n    {}\n  else\n    count = Hash.new(0)\n\
    \    test.split('').each { |char| count[char] += 1 }\n    count\n  end\nend",
  "  letters = test.split(\" \")\n  letters.group_by(&:to_s).map { |letter, occurrence|\
    \ [letter, occurrence.size] }.to_h\nend", "  test.chars.group_by { |letter| letter\
    \ }.map { |letter, occurrences| [letter, occurrences.size] }.to_h\nend", "  letters\
    \ = test.split(' ')\n  letters_count = {}\n  letters.each do |x|\n    if letters_count.key?(x)\n\
    \      letters_count[x] += 1\n    else\n      letters_count[x] = 1\n    end\n\
    \  end\n  letters_count\nend", "  letters = test.split(' ')\n  letter_count =\
    \ Hash.new(0)\n  most_occurring = nil\n  most_occurring_count = 0\n  result =\
    \ {}", "    result = Hash.new(0)\n    test.split.each do |v|\n        result[v]\
    \ += 1\n    end\n    result.sort.map { |k, v| [k, v] }.to_h\nend", "  if test.length\
    \ < 1\n    return {}\n  end\n  hist = Hash.new(0)\n  test.split(' ').each do |num|\n\
    \    hist[num] += 1\n  end\n  most_common = hist.values.max\n  hist.select { |k,\
    \ v| v == most_common }\nend", "  result = Hash.new(0)\n  max = 0\n  test.split.each\
    \ do |i|\n    result[i] += 1\n    max = result[i] if result[i] > max\n  end\n\
    \  result.select { |_k, v| v == max }\nend", "  test.split(\" \").each_with_object(Hash.new(0))\
    \ { |word, hash| hash[word] += 1 }\nend", "  hash = Hash.new\n  arr = test.split(\"\
    \ \")\n  arr.each do |i|\n    if hash.has_key?(i)\n      hash[i] += 1\n    else\n\
    \      hash[i] = 1\n    end\n  end\n  max_value = hash.values.max\n  new_hash\
    \ = Hash.new\n  hash.each do |k, v|\n    if v == max_value\n      new_hash[k]\
    \ = v\n    end\n  end\n  return new_hash\nend", "  if test.length != 0\n    letter_count\
    \ = test.split(\" \").each_with_object(Hash.new(0)) { |word,counts| counts[word]\
    \ += 1 }\n    letter_count.delete_if { |letter, count| count != letter_count.values.max\
    \ }\n  else\n    letter_count = {}\n  end\n  letter_count\nend", "  histogram\
    \ = Hash.new(0)\n  test.split.each { |word| histogram[word] += 1 }\n  histogram\n\
    end", "\tmap = {}\n\ttest.split(' ').each do |char|\n\t\tif map.has_key?(char)\n\
    \t\t\tmap[char] += 1\n\t\telse\n\t\t\tmap[char] = 1\n\t\tend\n\tend\n\treturn\
    \ map\nend", "    # TODO: code me\n    hash = Hash.new(0)\n    max = 0\n    maxLetter\
    \ = []\n    test.split(\" \").each do |x|\n      hash[x] += 1\n      max = hash[x]\
    \ if hash[x] > max\n    end\n    hash.each {|k,v| maxLetter << k if v == max}\n\
    \    maxLetter.sort.each {|x| hash[x] = max}\n    return hash\nend", "  h = Hash.new(0)\n\
    \  test.split(' ').each { |word| h[word] += 1 }\n  h.reject { |k, v| v == 1 }\n\
    end", "\treturn {} if test.empty?\n\ttable = Hash.new(0)\n\ttest.split(' ').each\
    \ do |x|\n\t\ttable[x] += 1\n\tend\n\tmax = table.max_by{|k,v| v}[1]\n\ttable.select{|k,v|\
    \ v == max}\nend", "  hash = Hash.new(0)\n  test.split.each do |letter|\n    hash[letter]\
    \ += 1\n  end\n  hash.select { |_, v| v == hash.values.max }\nend", "  test_arr\
    \ = test.split(' ')\n  return {} if test_arr.empty?\n  res = Hash.new(0)\n  test_arr.each\
    \ { |letter| res[letter] += 1 }\n  max_count = res.values.max\n  res.select {\
    \ |k, v| v == max_count }\nend", "  test.split(' ').each_with_object(Hash.new(0))\
    \ { |word, counts| counts[word] += 1 }\nend", "  result = Hash.new(0)\n  test.split('\
    \ ').each { |i| result[i] += 1 }\n  result\nend", "  h = Hash.new(0)\n  test.split(\"\
    \ \").each { |letter| h[letter] += 1 }\n  h.max_by { |k, v| v }[1] == h.values.max\
    \ ? h.select { |k, v| v == h.values.max } : h.max_by { |k, v| v }[0]\nend", " \
    \ letter_count = Hash.new(0)\n  test.split(' ').each { |letter| letter_count[letter]\
    \ += 1 }\n  # remove any letters that only occur once\n  letter_count.reject!\
    \ { |letter, count| count < 2 }\n  # if all letters were rejected, return an empty\
    \ hash\n  return letter_count if letter_count.length > 0\n  return {}\nend", " \
    \ # result = Hash.new\n  # test.split(\" \").each do |e|\n  #   result[e] = test.count(e)\n\
    \  # end\n  # result\n  result = Hash.new\n  test.split(\" \").each do |e|\n \
    \   if result.has_key?(e)\n      result[e] += 1\n    else\n      result[e] = 1\n\
    \    end\n  end\n  result\nend", "  h = Hash.new(0)\n  test.split(' ').each {\
    \ |c| h[c] += 1 }\n  h\nend", "  result = Hash.new(0)\n  test.split.each { |x|\
    \ result[x] += 1 }\n  result\nend", "  counts = Hash.new(0)\n  test.split(' ').each\
    \ { |char| counts[char] += 1 }\n  result = {}\n  counts.each do |char, count|\n\
    \    result[char] = count if count == counts.values.max\n  end\n  result\nend",
  "  histo = Hash.new(0)\n  test.split(\" \").each do |i|\n    histo[i] += 1\n  end\n\
    \  histo.sort_by {|k,v| v}.reverse.to_h\nend", "  test = test.split(' ')\n  h\
    \ = {}\n  test.each do |letter|\n    h[letter] = test.count(letter)\n  end\n \
    \ h.each { |key, value| h.delete(key) if value != h.values.max }\nend", "  result\
    \ = {}\n  counter = Hash.new(0)\n  for i in test.split(' ')\n    counter[i] +=\
    \ 1\n  end\n  counter.max_by{|k,v| v}[1] == 1 ? result = counter : result = counter.select{|k,v|\
    \ v == counter.max_by{|k,v| v}[1]}\n  result\nend", "\toutput = {}\n\tletter_count\
    \ = []\n\tcount = 0\n\ttest.split(\" \").sort.each do |letter|\n\t\tcount += 1\n\
    \t\tif count < test.split(\" \").sort.length\n\t\t\tnext if letter == test.split(\"\
    \ \").sort[count]\n\t\t\toutput[letter] = test.split(\" \").count(letter)\n\t\t\
    \tletter_count << test.split(\" \").count(letter)\n\t\tend\n\tend\n\tletter_count.sort!\n\
    \tletter_count.uniq!\n\tif letter_count.length == 1\n\t\toutput\n\telse\n\t\t\
    output.each do |key, value|\n\t\t\tif value != letter_count[letter_count.length\
    \ - 1]\n\t\t\t\toutput.delete(key)\n\t\t\tend\n\t\tend\n\t\toutput\n\tend\nend",
  "  h = Hash.new(0)\n  test.split.each { |word| h[word] += 1 }\n  h.keep_if { |k,\
    \ v| v == h.values.max }\nend", "  letters = test.split(\" \")\n  letters_hash\
    \ = {}\n  letters.each do |letter|\n    if letters_hash.has_key?(letter)\n   \
    \   letters_hash[letter] += 1\n    else\n      letters_hash[letter] = 1\n    end\n\
    \  end\n  letters_hash\nend", "  if test == ''\n    return {}\n  end\n  test =\
    \ test.split(' ')\n  count = {}\n  test.each do |i|\n    if count.has_key?(i)\n\
    \      count[i] += 1\n    else\n      count[i] = 1\n    end\n  end\n  max_count\
    \ = count.max_by{|k,v| v}[1]\n  new_hash = {}\n  count.each do |k,v|\n    if v\
    \ == max_count\n      new_hash[k] = v\n    end\n  end\n  return new_hash\nend",
  "  hash = Hash.new(0)\n  test.split(\" \").each { |letter| hash[letter] += 1 }\n\
    \  hash.invert.max[1]\nend", "  h = Hash.new(0)\n  test.split.each do |x|\n  \
    \  h[x] += 1\n  end\n  return h\nend", "  histo = Hash.new(0)\n  test.split(\"\
    \ \").each { |x| histo[x] += 1 }\n  histo\nend", "  test.split.each_with_object(Hash.new(0))\
    \ { |x, h| h[x] += 1 }\nend", "  res = {}\n  test.split.each do |x|\n    res[x]\
    \ = res[x].to_i + 1\n  end\n  res\nend", "    test.split(' ').inject(Hash.new(0)){|x,y|\
    \ x[y] += 1; x}.select{|k,v| v == test.split(' ').group_by{|x| x}.map{|k,v| v.length}.max}.to_a.flatten\n\
    end\nputs histogram('a b c')\nputs histogram('a b b a')\nputs histogram('a b c\
    \ a b')\nputs histogram('b b b b a')\nputs histogram('')", "  result = {}\n  test.split('\
    \ ').each do |letter|\n    result[letter] = result[letter].to_i + 1\n  end\n \
    \ result.select { |_key, value| value == result.values.max }\nend", "  chars =\
    \ test.split(/\\s+/)\n  # Create the empty hash\n  counts = Hash.new(0)\n  # Iterate\
    \ over the array\n  chars.each do |letter|\n    # Count the number of times the\
    \ same letter occurs\n    counts[letter] += 1\n  end\n  # Create a new hash, with\
    \ only the letters that occur the most\n  max_vals = counts.select { |k, v| v\
    \ == counts.values.max }\n  # Return the hash\n  max_vals\nend", "  letters =\
    \ test.split(\" \")\n  occurences = {}\n  letters.each do |letter|\n    if occurences.has_key?(letter)\n\
    \      occurences[letter] += 1\n    else\n      occurences[letter] = 1\n    end\n\
    \  end\n  return occurences\nend", "  result = {}\n  test.each_char do |ch|\n\
    \    result[ch] = 0 unless result.has_key?(ch)\n    result[ch] += 1\n  end\n \
    \ result\nend", "  count = Hash.new(0)\n  max = 0\n  result = {}\n  test.split('\
    \ ').each do |letter|\n    count[letter] += 1\n    max = count[letter] if count[letter]\
    \ > max\n  end\n  count.each do |key, value|\n    result[key] = value if value\
    \ == max\n  end\n  result\nend", "  arr = test.split(' ')\n  dup = arr.group_by\
    \ { |e| e }.transform_values(&:size)\n  dup.max_by{|k,v| v}\nend\nputs histogram('a\
    \ b c') #== {'a': 1, 'b': 1, 'c': 1}\nputs histogram('a b b a') #== {'a': 2, 'b':\
    \ 2}\nputs histogram('a b c a b') #== {'a': 2, 'b': 2}\nputs histogram('b b b\
    \ b a') #== {'b': 4}\nputs histogram('') #== {}", "  # TODO\nend", "  word = {}\n\
    \  count = 0\n  word_split = test.split(\" \")\n  word_split.each do |i|\n   \
    \ if word.has_key?(i)\n      word[i] += 1\n    else\n      word[i] = 1\n    end\n\
    \  end\n  word.keys.each do |i|\n    if word[i] >= count\n      count = word[i]\n\
    \    end\n  end\n  word.select {|k,v| v == count}\nend", "  count = {}\n  test.split('\
    \ ').each do |x|\n    if count.key?(x)\n      count[x] += 1\n    else\n      count[x]\
    \ = 1\n    end\n  end\n  maximum = count.values.max\n  if maximum\n    count.select\
    \ { |k, v| v == maximum }\n  else\n    {}\n  end\nend", "  results = {}\n  final\
    \ = []\n  test.split(' ').each do |x|\n    if results[x] == nil\n      results[x]\
    \ = 1\n    else\n      results[x] += 1\n    end\n  end\n  greatest = results.values.max\n\
    \  results.each do |key, value|\n    if value == greatest\n      final << key\n\
    \    end\n  end\n  return final\nend", "\t# create a hash table and a max tracker\n\
    \tmax_count = 0\n\tanswer = {}\n\t# loop through each letter, populating the hash\
    \ table\n\ttest.each_char do |letter|\n\t\t# skip all the white space\n\t\tnext\
    \ if letter == ' '\n\t\t# if the letter is not in the hash table, add it\n\t\t\
    answer[letter] = 0 if !answer.key?(letter)\n\t\t# add one to the count and record\
    \ the max\n\t\tanswer[letter] += 1\n\t\tmax_count = answer[letter] if answer[letter]\
    \ > max_count\n\tend\n\t# return the max count and all the letters with max count\n\
    \tanswer.delete_if { |k, v| v != max_count }\nend", "  hash = Hash.new(0)\n  test.split.each\
    \ do |letter|\n    hash[letter] += 1\n  end\n  hash\nend", "  counts = Hash.new(0)\n\
    \  test.split.each do |letter|\n    counts[letter] += 1\n  end\n  counts\nend",
  "  frequency = Hash.new(0)\n  max_count = 0\n  max_letter = []\n  test.split(\"\
    \ \").each do |char|\n    frequency[char] += 1\n    if frequency[char] == max_count\n\
    \      max_letter << char\n    elsif frequency[char] > max_count\n      max_count\
    \ = frequency[char]\n      max_letter = [char]\n    end\n  end\n  max_letter.each\
    \ do |letter|\n    frequency.delete(letter)\n  end\n  frequency\nend", "  return\
    \ {} if test.empty?\n  arr = test.split(' ')\n  #max_elem = arr.max_by{|k| arr.count(k)}\n\
    \  max_count = arr.max_by{|k| arr.count(k)}.length\n  new_arr = []\n  arr.each{|elem|\
    \ new_arr << elem if arr.count(elem) == max_count}\n  h = Hash.new(0)\n  new_arr.each{|elem|\
    \ h[elem] += 1}\n  return h\nend", "  result = {}\n  test.split(' ').each do |char|\n\
    \    result[char] = test.count(char)\n  end\n  result\nend", "  histogram = {}\n\
    \  test.split(\" \").each do |letter|\n    if histogram.include?(letter)\n   \
    \   histogram[letter] += 1\n    else\n      histogram[letter] = 1\n    end\n \
    \ end\n  histogram.each do |key, value|\n    if histogram.include?(value)\n  \
    \    histogram[value] = [key]\n    else\n      histogram[value] << key\n    end\n\
    \  end\n  histogram\nend", "  result = {}\n  letters = test.split(' ')\n  letters.each\
    \ do |letter|\n    result[letter] = letters.count(letter)\n  end\n  result\nend",
  "  histogram = {}\n  test.split.each do |word|\n    if histogram.key?(word)\n  \
    \    histogram[word] += 1\n    else\n      histogram[word] = 1\n    end\n  end\n\
    \  histogram\nend", "  letters = test.split(' ')\n  letters.inject(Hash.new(0))\
    \ { |letter, count| letter[count] += 1; letter }\nend", "  # Get a hash of the\
    \ letter and their count from the string\n  histogram = test.split(' ').each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\n  # Get the max count\n  max = histogram.max_by\
    \ { |word, count| count }\n  # Get the keys with the same max value\n  histogram.select\
    \ { |word, count| count == max[1] }\nend", "  arr = test.split\n  freq = arr.inject(Hash.new(0))\
    \ { |h,v| h[v] += 1; h }\n  freq.sort_by {|k,v| v}\n  highest = arr.max_by { |v|\
    \ freq[v] }\n  highestVal = freq[highest]\n  freq.delete_if {|k,v| v < highestVal}\n\
    end", "  letter_count = Hash.new(0)\n  unless test.empty?\n    test.split(' ').each\
    \ do |letter|\n      letter_count[letter] += 1\n    end\n  end\n  letter_count\n\
    end", "  frequencies = Hash.new(0)\n  words = test.split(' ')\n  words.each {\
    \ |word| frequencies[word] += 1 }\n  frequencies\nend", "  chars = test.split\n\
    \  counts = Hash.new 0\n  chars.each do |char|\n    counts[char] += 1\n  end\n\
    \  counts\nend", "  histogram = Hash.new(0)\n  return histogram if test.empty?\n\
    \  test.split(' ').each { |letter| histogram[letter] += 1 }\n  histogram\nend",
  "  arr = test.split(' ')\n  count = {}\n  arr.each do |el|\n    if count[el]\n \
    \     count[el] += 1\n    else\n      count[el] = 1\n    end\n  end\n  largest\
    \ = count.sort_by { |k, v| v }\n  result = {}\n  result[largest[-1][0]] = largest[-1][1]\n\
    \  result\nend", "  test_to_array = test.split(\" \")\n  repeated_numbers = Hash.new\n\
    \  test_to_array.each do |letter|\n    if !repeated_numbers.has_key?(letter)\n\
    \      repeated_numbers[letter] = test_to_array.count(letter)\n    end\n  end\n\
    \  repeated_numbers\nend", "  puts test\n  arr = test.split(\" \")\n  h = Hash.new(0)\n\
    \  arr.each { |v| h[v] += 1 }\n  h.select { |k, v| v == h.values.max }\nend",
  "  puts \"Here is your histogram for '#{test}':\"\n  result = Hash.new(0)\n  test.split.each\
    \ do |i|\n    result[i] += 1\n  end\n  puts result\nend", "  if test.length ==\
    \ 0\n    return {}\n  end\n  letters = test.split(/ /)\n  letter_count = Hash.new(0)\n\
    \  letters.each do |letter|\n    letter_count[letter] += 1\n  end\n  max_val =\
    \ letter_count.values.max\n  return letter_count.select { |k, v| v == max_val\
    \ }\nend", "  frequencies = {}\n  test.downcase.split('').each do |char|\n   \
    \ frequencies[char] = test.downcase.count(char)\n  end\n  if !frequencies.empty?\n\
    \    return frequencies.group_by { |k, v| v }.max.last.to_h\n  else\n    return\
    \ {}\n  end\nend", "  histogram = Hash.new(0)\n  test.split(' ').each do |word|\n\
    \    histogram[word] += 1\n  end\n  return histogram\nend", "  letters = test.split('\
    \ ')\n  letters_hash = {}\n  letters.each do |letter|\n    if letters_hash.has_key?(letter)\n\
    \      letters_hash[letter] += 1\n    else\n      letters_hash[letter] = 1\n \
    \   end\n  end\n  letters_hash\nend", "  letters = test.split(' ')\n  counts =\
    \ Hash.new(0)\n  result = {}\n  letters.each do |letter|\n    counts[letter] +=\
    \ 1\n  end\n  counts.each { |k, v| result[k] = v if v == counts.values.max }\n\
    \  result\nend", "  test.split(' ').inject(Hash.new(0)) { |letter, count| letter[count]\
    \ += 1; letter }\nend", "  hash = Hash.new(0)\n  test.split(' ').each { |x| hash[x]\
    \ += 1 }\n  hash.group_by { |_, v| v }.max[1].to_h\nend", "  histogram = Hash.new(0)\n\
    \  test.split(\" \").each { |x| histogram[x] += 1 }\n  histogram.max_by { |x,\
    \ y| y }.first(2).first\nend", "  arr = test.split(' ')\n  max_count = 0\n  result\
    \ = {}\n  arr.each do |e|\n    if result[e]\n      result[e] += 1\n    else\n\
    \      result[e] = 1\n    end\n    max_count = result[e] if result[e] > max_count\n\
    \  end\n  result.select { |k, v| v == max_count }\nend", "  h = Hash.new(0)\n\
    \  array = test.split(\" \")\n  p array.inspect\n  array.each { |letter| h[letter]\
    \ += 1 }\n  h.each do |letter, count|\n    if count > 1\n      h.delete(letter)\n\
    \    end\n  end\n  p h\nend", "  # define a hash map\n  letters = Hash.new(0)\n\
    \  # split the string into individual letters and iterate over them\n  test.split(\"\
    \ \").each do |letter|\n    # increment the count for each letter\n    letters[letter]\
    \ += 1\n  end\n  # return the hash map\n  letters\nend", '  counts = Hash.new
    0', "  letters = {}\n  test.split(' ').each do |letter|\n    letters[letter] =\
    \ letters[letter].to_i + 1\n  end\n  letters.delete_if { |key, value| value ==\
    \ 1 }\n  letters.sort_by { |key, value| value }.last.first\nend", "  test.split('\
    \ ').each_with_object(Hash.new(0)) { |w,counts| counts[w] += 1 }\n    .sort_by\
    \ { |k,v| v }\n    .reverse\n    .take_while { |k,v| v == test.split(' ').count(k)\
    \ }\n    .to_h\nend", "    letters = test.split('')\n    dict = Hash.new(0)\n\
    \    for i in letters\n        dict[i] += 1\n    end\n    return dict\nend", " \
    \ result = {}\n  test.chars.uniq.each { |char| result[char] = test.count(char)\
    \ }\n  result\nend", "  repeat_count = {}\n  test.split(' ').each do |letter|\n\
    \    if repeat_count.key?(letter)\n      repeat_count[letter] += 1\n    else\n\
    \      repeat_count[letter] = 1\n    end\n  end\n  max_value = repeat_count.values.max\n\
    \  best_letters = repeat_count.select{|k,v| v == max_value}.keys\n  max_letters\
    \ = {}\n  best_letters.each do |letter|\n    max_letters[letter] = max_value\n\
    \  end\n  max_letters\nend", "  result = Hash.new(0)\n  test.split(' ').each {\
    \ |x| result[x] += 1 }\n  highest = result.sort_by { |_key, value| value }.last[1]\n\
    \  result.select { |_key, value| value == highest }\nend", "  result = {}\n  test.split('\
    \ ').each do |x|\n    if result.key?(x)\n      result[x] += 1\n    else\n    \
    \  result[x] = 1\n    end\n  end\n  result.keep_if { |_key, value| value == result.values.max\
    \ }\nend", "  count = Hash.new(0)\n  max = 0\n  letters = []\n  test.split(' ').each\
    \ do |letter|\n    count[letter] += 1\n    if count[letter] > max\n      max =\
    \ count[letter]\n      letters = [letter]\n    elsif count[letter] == max\n  \
    \    letters << letter\n    end\n  end\n  letters.each do |letter|\n    count[letter]\
    \ = max\n  end\n  count\nend", "  test.split.reduce(Hash.new(0)) { |h, v| h[v]\
    \ += 1; h }.select { |_, v| v == test.split.group_by(&:to_s).map { |k, v| [k,\
    \ v.size] }.to_h.values.max }\nend", "  hist = Hash.new(0)\n  test.split(' ').each\
    \ { |item| hist[item] += 1 }\n  hist\nend", "  characters = test.split('')\n \
    \ result = {}\n  characters.each do |character|\n    if result.has_key?(character)\n\
    \      result[character] += 1\n    else\n      result[character] = 1\n    end\n\
    \  end\n  result\nend", "  # your code goes here\nend", "  test.split.each_with_object(Hash.new(0))\
    \ { |word, counts| counts[word] += 1 }\nend", "  if test.empty?\n    {}\n  else\n\
    \    letters = test.split(\" \")\n    histogram = Hash.new(0)\n    letters.each\
    \ { |letter| histogram[letter] += 1 }\n    max_value = histogram.values.max\n\
    \    histogram.select { |k, v| v == max_value }\n  end\nend", "  hist = Hash.new\n\
    \  test.split(' ').each { |x|\n    hist[x] = test.count(x)\n  }\n  hist.sort {\
    \ |x, y| y[1] <=> x[1] }.each { |x|\n    if x[1] == hist.sort { |x, y| y[1] <=>\
    \ x[1] }[0][1]\n      puts x\n    end\n  }\nend", "  counter = Hash.new(0)\n \
    \ list = test.split(\" \")\n  list.each do |x|\n    counter[x] += 1\n  end\n \
    \ counter\nend", "  count = Hash.new(0)\n  test.scan(/\\w/).each { |word| count[word]\
    \ += 1 }\n  count.reject { |_, value| value < count.values.max }\nend", "  count\
    \ = Hash.new(0)\n  max_count = 0\n  max_count_array = []\n  test.split(\" \").each\
    \ do |letter|\n    count[letter] += 1\n    if count[letter] > max_count\n    \
    \  max_count = count[letter]\n      max_count_array = [letter]\n    elsif count[letter]\
    \ == max_count\n      max_count_array << letter\n    end\n  end\n  max_count_array.each\
    \ do |letter|\n    count.delete(letter)\n  end\n  p count\nend", "  raise if !test.is_a?(String)\n\
    \  test = test.split(\" \")\n  res = {}\n  test.each { |word| res[word] = res[word].to_i\
    \ + 1 }\n  max = res.max_by { |k, v| v }[1]\n  res.select { |k, v| v == max }\n\
    end", "  results = {}\n  test.split(\" \").each do |letter|\n    if results.has_key?(letter)\n\
    \      results[letter] += 1\n    else\n      results[letter] = 1\n    end\n  end\n\
    \  results\nend", "  test.split(' ').each_with_object(Hash.new(0)) { |w, h| h[w]\
    \ += 1 }\nend", "  letters = test.split(' ')\n  histogram = {}\n  letters.each\
    \ do |letter|\n    if histogram.key?(letter)\n      histogram[letter] += 1\n \
    \   else\n      histogram[letter] = 1\n    end\n  end\n  max_val = histogram.values.max\n\
    \  histogram.select { |k, v| v == max_val }\nend", "  counts = Hash.new(0)\n \
    \ test.each_char { |char| counts[char] += 1 }\n  counts\nend", "  h = Hash.new(0)\n\
    \  test.each_char { |c| h[c] += 1 }\n  h.delete(' ')\n  h.max_by { |k, v| v }.max\
    \ == h.values.min ? h.select { |k, v| v == h.values.min } : h.select { |k, v|\
    \ v == h.values.max }\nend", "  histo = {}\n  for char in test.split(/ /)\n  \
    \  histo[char] = test.count(char)\n  end\n  return histo\nend", "  dict = {}\n\
    \  test.split(\" \").map { |x| dict[x] = dict[x].to_i + 1}\n  dict.select { |k,\
    \ v| v == dict.values.max}\nend", "  record = {}\n  test.split(' ').each do |letter|\n\
    \    record[letter] = 0 unless record.has_key?(letter)\n    record[letter] +=\
    \ 1\n  end\n  record.each do |key, value|\n    p \"#{key}: #{value}\"\n  end\n\
    end", "  hist = Hash.new(0)\n  test.split.each do |x|\n    hist[x] += 1\n  end\n\
    \  max = hist.select{|k,v| v == hist.values.max}\n  return max\nend", "  words\
    \ = test.split\n  result = Hash.new(0)\n  words.each { |i| result[i] += 1 }\n\
    \  result.key(result.values.max)\nend", "  occ = {}\n  test.split(' ').each do\
    \ |i|\n    if occ.key?(i)\n      occ[i] += 1\n    else\n      occ[i] = 1\n   \
    \ end\n  end\n  return occ\nend", "  histogram = {}\n  test.split(' ').each do\
    \ |letter|\n    if histogram.has_key?(letter)\n      histogram[letter] += 1\n\
    \    else\n      histogram[letter] = 1\n    end\n  end\n  return histogram\nend",
  "  count = 0\n  hashed = {}\n  test.split(' ').each do |char|\n    hashed[char]\
    \ ? hashed[char] += 1 : hashed[char] = 1\n  end\n  hashed.select { |_, v| v if\
    \ v == hashed.values.max }\nend", "  letters = test.split(' ')\n  h = Hash.new(0)\n\
    \  letters.each { |letter| h[letter] += 1 }\n  h.keep_if { |k, v| v == h.values.max\
    \ }\nend", "  res = {}\n  test.split(' ').each do |c|\n    res[c] = res[c].to_i\
    \ + 1\n  end\n  res\nend", "\tnew_str = test.gsub(/\\s+/, \"\")\n\tlist = new_str.split('')\n\
    \tlist.reduce(Hash.new(0)) { |h, v| h[v] += 1; h }\nend", "  histogram = {}\n\
    \  test.split(' ').each do |word|\n    if histogram.has_key?(word)\n      histogram[word]\
    \ += 1\n    else\n      histogram[word] = 1\n    end\n  end\n  histogram\nend",
  "  new_str = test.split(\" \")\n  # puts new_str\n  h = Hash.new(0)\n  new_str.each\
    \ do |word|\n    h[word] += 1\n  end\n  puts h\nend", "  letters = test.split(\"\
    \ \")\n  letter_count = Hash.new(0)\n  letters.each { |x| letter_count[x] += 1\
    \ }\n  letter_count\nend", "  output = {}\n  test.split(\" \").each do |t|\n \
    \   if output.has_key?(t)\n      output[t] += 1\n    else\n      output[t] = 1\n\
    \    end\n  end\n  output\nend", "  occurrences = Hash.new(0)\n  test.each_char\
    \ { |char| occurrences[char] += 1 }\n  max_occurrence = occurrences.values.max\n\
    \  occurrences.select { |_, count| count == max_occurrence }\nend", "  output\
    \ = Hash.new(0)\n  test.split.each do |word|\n    output[word] += 1\n  end\n \
    \ return output\nend", "  char_hash = Hash.new(0)\n  max_char = []\n  test.split.each\
    \ do |letter|\n    char_hash[letter] += 1\n  end\n  max_char = char_hash.select\
    \ { |key, value| value == char_hash.values.max }\n  return max_char\nend", " \
    \ test.split(' ').group_by{|i| i}.values.max_by(&:size).inject({}){|h, i| h[i]\
    \ = test.split(' ').count(i); h}\nend", "  count = Hash.new(0)\n  keys = test.split('\
    \ ')\n  keys.each { |key| count[key] += 1 }\n  count.select { |_key, value| value\
    \ == count.values.max }\nend", "  histo = Hash.new\n  test.split(' ').each do\
    \ |letter|\n    if histo.has_key?(letter)\n      histo[letter] += 1\n    else\n\
    \      histo[letter] = 1\n    end\n  end\n  histo\nend", "  h = Hash.new(0)\n\
    \  a = test.split(' ')\n  a.each do |v|\n    h[v] += 1\n  end\n  h.key(h.values.max)\n\
    end", "  result = {}\n  test.split(\" \").each do |letter|\n    if !result.has_key?(letter)\n\
    \      result[letter] = 1\n    else\n      result[letter] += 1\n    end\n  end\n\
    \  max_value = result.values.max\n  result.select { |k, v| v == max_value }\n\
    end", "  # your code here\nend", "  chars = test.split(' ')\n  characters = {}\n\
    \  letters = {}\n  chars.each { |c| characters[c] += 1 }\n  characters.each {\
    \ |char, count| letters[char] = count if count == characters.values.max }\n  letters\n\
    end", "  # Your code here\nend", "  histogram = {}\n  test.split(\" \").each do\
    \ |char|\n    if histogram.has_key?(char)\n      histogram[char] += 1\n    else\n\
    \      histogram[char] = 1\n    end\n  end\n  max_value = histogram.values.max\n\
    \  max_keys = histogram.select {|k, v| v == max_value}.keys\n  new_hash = {}\n\
    \  max_keys.each do |key|\n    new_hash[key] = max_value\n  end\n  new_hash\n\
    end", "  array = test.split(\" \")\n  histo = {}\n  array.each do |letter|\n \
    \   histo[letter] = histo[letter].to_i + 1\n  end\n  return histo\nend", "  count\
    \ = Hash.new(0)\n  test.each_char do |i|\n    count[i] += 1\n  end\n  count\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
