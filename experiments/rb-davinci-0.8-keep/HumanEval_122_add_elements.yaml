name: HumanEval_122_add_elements
language: rb
prompt: "# Given a non-empty array of integers arr and an integer k, return\n# the\
  \ sum of the elements with at most two digits from the first k elements of arr.\n\
  # Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output: 24 # sum\
  \ of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <= len(arr)\n\
  def add_elements(arr, k)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
  \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
  \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
  \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
  \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5,\
  \ 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
completions: ["  elements = []\n  i = 0\n  while i < k\n    if arr[i].to_s.length\
    \ <= 2\n      elements << arr[i]\n    end\n    i += 1\n  end\n  elements.reduce(:+)\n\
    end", "  max = arr.first(k).select { |num| num > 99 ? false : true }.inject(:+)\n\
    \  max.nil? ? 0 : max\nend", "  # your code here\nend", "  # TODO: Need to implement\n\
    end", "  # initialize the result to zero\n  result = 0\n  # loop through the first\
    \ k elements\n  k.times do |i|\n    # if the element is two digits or less, add\
    \ it to the result\n    if arr[i] < 100\n      result += arr[i]\n    end\n  end\n\
    \  # return the result\n  result\nend", "  # Your code here\nend", "    total\
    \ = 0\n    arr.each_with_index do |num, i|\n        if i < k\n            if num.to_s.length\
    \ <= 2\n                total += num\n            end\n        end\n    end\n\
    \    total\nend", "  # 1. Use a pointer to point to the first element\n  # 2.\
    \ While pointer <= k, check if length of element is <= 2\n  # 3. If so, add it\
    \ to the sum\n  # 4. Else, break\n  # 5. Return sum\n  sum = 0\n  idx = 0\n  while\
    \ idx < k\n    if arr[idx].to_s.length <= 2\n      sum += arr[idx]\n    else\n\
    \      break\n    end\n    idx += 1\n  end\n  sum\nend", "  i = 0\n  sum = 0\n\
    \  while i < k\n    num = arr[i]\n    sum += num if num < 100\n    i += 1\n  end\n\
    \  sum\nend", "  arr[0...k].select { |n| n < 100 }.sum\nend", end, "  return arr.take(k).select\
    \ { |num| num.digits.length <= 2 }.sum\nend", "    count = 0\n    output = 0\n\
    \    while count < k\n        if arr[count] > 9 && arr[count] < 100\n        \
    \    output += arr[count]\n        end\n        count += 1\n    end\n    return\
    \ output\nend\nputs add_elements([1,2,3,4,5,6,7,8,9], 4) #=> 13\nputs add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) #=> 24\nputs add_elements([111, 21, 3, 400,\
    \ 5, 6, 7, 8, 9], 4) #=> 25\nputs add_elements([111, 21, 300, 400, 5, 6, 7, 8,\
    \ 9], 4) #=> 321\nputs add_elements([111, 21, 300, 400, 5, 6, 7, 8, 9], 5) #=>\
    \ 321", "  sum = 0\n  for element in arr\n    if element < 100 && element >= 10\n\
    \      sum += element\n    end\n  end\n  return sum\nend", "  # Get the first\
    \ k elements\n  res = arr[0...k]\n  # Filter out the elements that are 3 digits\
    \ or more and then add them\n  res.select { |e| e.to_s.length <= 2 }.sum\nend\n\
    p add_elements([111,21,3,4000,5,6,7,8,9], 4) # => 24\np add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 5) # => 27\np add_elements([111,21,3,4000,5,6,7,8,9], 6) # => 30\np add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 7) # => 37\np add_elements([111,21,3,4000,5,6,7,8,9], 8) # => 41\np add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 9) # => 49", "  sum = 0\n  k.times do |i|\n    if arr[i] > 9 && arr[i] < 100\n\
    \      sum += arr[i]\n    end\n  end\n  return sum\nend", "  arr.select { |el|\
    \ el.digits.size <= 2 }.take(k).sum\nend", "  total = 0\n  counter = 0\n  while\
    \ counter < k\n    # convert to string\n    # check length\n    if arr[counter].to_s.length\
    \ < 3\n      total += arr[counter]\n    end\n    counter += 1\n  end\n  return\
    \ total\nend", "  sum = 0\n  i = 0\n  while k > 0\n    if arr[i] < 100\n     \
    \ sum += arr[i]\n      k -= 1\n    end\n    i += 1\n  end\n  sum\nend", "  # iterate\
    \ through arr and determine how many of its first k elements are of length 2\n\
    \  # add all of those elements together\n  i = 0\n  sum = 0\n  while i < k\n \
    \   if arr[i].to_s.length == 2\n      sum += arr[i]\n    end\n    i += 1\n  end\n\
    \  sum\nend", "  i = 0\n  sum = 0\n  while i < k\n    if arr[i] >= 10 && arr[i]\
    \ < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend", "  arr.map\
    \ { |n| n / 100.0 }.take(k).sum.round\nend", "  sum = 0\n  arr.each_with_index\
    \ do |element, index|\n    if element.to_s.length == 1 || element.to_s.length\
    \ == 2\n      sum += element\n    end\n    break if index == k - 1\n  end\n  return\
    \ sum\nend", "  sum = 0\n  arr.each do |num|\n    break if k.zero?\n    if num.positive?\
    \ && num < 100\n      sum += num\n      k -= 1\n    end\n  end\n  sum\nend", " \
    \ sum = 0\n  i = 0\n  while i < k\n    if arr[i] < 100\n      sum += arr[i]\n\
    \    end\n    i += 1\n  end\n  sum\nend", "  counter = 0\n  sum = 0\n  while counter\
    \ < k\n    if arr[counter] > 9 && arr[counter] < 100\n      sum += arr[counter]\n\
    \    end\n    counter += 1\n  end\n  sum\nend", "  sum = 0\n  arr.each do |val|\n\
    \    digit_length = val.to_s.length\n    sum += val if digit_length <= 2\n   \
    \ break if k == 1\n    k -= 1\n  end\n  sum\nend", "  sum = 0\n  for i in 0...k\n\
    \    if arr[i] <= 99\n      sum += arr[i]\n    end\n  end\n  return sum\nend",
  "  sum = 0\n  arr.each_with_index do |element, index|\n    digit_count = element.to_s.length\n\
    \    sum += element if digit_count <= 2\n    break if index == k - 1\n  end\n\
    \  sum\nend", "  # iterate over arr\n  # if the number is less than 10 or the\
    \ number is less than 100 and greater than 9, add to sum\n  # return sum\n  sum\
    \ = 0\n  arr.each_with_index do |num, idx|\n    break if idx == k\n    sum +=\
    \ num if num < 10 || (num > 9 && num < 100)\n  end\n  sum\nend", "  arr.take(k).count\
    \ { |e| e < 100 }.inject(:+)\nend", "  sum = 0\n  arr.each_with_index do |el,\
    \ idx|\n    sum += el if el.digits.size <= 2\n    break if idx + 1 == k\n  end\n\
    \  sum\nend", "  sum = 0\n  i = 0\n  until i == k\n    sum += arr[i] if arr[i]\
    \ < 100\n    i += 1\n  end\n  sum\nend", "  sum = 0\n  i = 0\n  while i < k\n\
    \    if arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\n\
    end", "    result = 0\n    i = 0\n    while i < k && i < arr.length do\n     \
    \   n = arr[i]\n        # have to have at least 2 digits\n        if n > 9\n \
    \           result += n\n        end\n        i += 1\n    end\n    result\nend",
  "  # write your code here\n  puts \"#{arr} #{k}\"\n  sum = 0\n  i = 0\n  while i\
    \ < k\n    if arr[i] < 10 || arr[i] > 99\n      sum += arr[i]\n    end\n    i\
    \ += 1\n  end\n  sum\nend", "    result = 0\n    arr.each_with_index do |num,\
    \ index|\n        if index < k\n            result += num if num < 100\n     \
    \   end\n    end\n    result\nend\nputs add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 4)", "  sum = 0\n  arr.each_with_index do |num, index|\n    sum += num if num.to_s.length\
    \ <= 2 && index < k\n  end\n  sum\nend", "  sum = 0\n  i = 0\n  while i < k\n\
    \    sum += arr[i] if arr[i] < 100\n    i += 1\n  end\n  sum\nend", "    arr.reduce(0)\
    \ do |acc, el|\n        if el < 100\n            acc += el\n        end\n    \
    \    acc\n    end\nend\narr = [111,21,3,4000,5,6,7,8,9]\nk = 4\nputs \"Input:\
    \ arr = #{arr}, k = #{k}\"\nputs \"Output: #{add_elements(arr, k)}\"", "  arr[0..k].reduce(0)\
    \ { |sum, el| el < 100 ? sum + el : sum }\nend", "    if arr.nil? || arr.empty?\
    \ || k <= 0\n        return 0\n    end\n    sum = 0\n    i = 0\n    while i <\
    \ arr.length && k > 0\n        if arr[i] < 10\n            sum += arr[i]\n   \
    \     elsif arr[i] < 100\n            sum += arr[i]\n        end\n        i +=\
    \ 1\n        k -= 1\n    end\n    return sum\nend", "  sum = 0\n  idx = 0\n  while\
    \ idx < k\n    sum += arr[idx] if arr[idx] < 100\n    idx += 1\n  end\n  sum\n\
    end", "  arr.select { |e| e.to_s.length <= 2 }.first(k).reduce(:+)\nend\nputs\
    \ \"Expected: 24 -- Actual: #{add_elements([111,21,3,4000,5,6,7,8,9], 4)}\"\n\
    puts \"Expected: 922 -- Actual: #{add_elements([2,1,6,4000,6,7,8,9], 3)}\"\nputs\
    \ \"Expected: 8 -- Actual: #{add_elements([111,1,3,4,5,6,7,8,9], 3)}\"\nputs \"\
    Expected: 11 -- Actual: #{add_elements([111,2,3,4,5,6,7,8,9], 2)}\"\nputs \"Expected:\
    \ 5 -- Actual: #{add_elements([111,2,3,4,5,6,7,8,9], 1)}\"\nputs \"Expected: 11\
    \ -- Actual: #{add_elements([3,111,2,3,4,5,6,7,8,9], 2)}\"\nputs \"Expected: 2\
    \ -- Actual: #{add_elements([111,2,3,4,5,6,7,8,9], 2)}\"\nputs \"Expected: 3 --\
    \ Actual: #{add_elements([1,1,1,1,1,1,1,1,1], 2)}\"\nputs \"Expected: 1 -- Actual:\
    \ #{add_elements([1,1,1,1,1,1,1,1,1], 1)}\"\nputs \"Expected: 2 -- Actual: #{add_elements([1,1,1,1,1,1,1,1,1],\
    \ 2)}\"\nputs \"Expected: 2 -- Actual: #{add_elements([1,1,1,1,1,1,1,1,1], 2)}\"\
    \nputs \"Expected: 6 -- Actual: #{add_elements([2,4,6,8,10,12,14,16,18], 5)}\"\
    \nputs \"Expected: 9 -- Actual: #", "  arr.select{|x| x.to_s.length <= 2}[0...k].sum\n\
    end", "  return 0 if arr.nil?\n  return 0 if arr.empty?\n  return 0 if k < 1\n\
    \  total = 0\n  if k > arr.length\n    k = arr.length\n  end\n  k.times do |i|\n\
    \    if arr[i] < 10\n      total += arr[i]\n    elsif arr[i] < 100\n      total\
    \ += arr[i]\n    end\n  end\n  total\nend", "    sum = 0\n    k.times do |i|\n\
    \        if arr[i] > 9 && arr[i] < 100\n            sum += arr[i]\n        end\n\
    \    end\n    sum\nend", "  arr[0..k-1].map(&:to_s).map{|v| v.size > 2 ? 0 : v.to_i}.sum\n\
    end\nputs add_elements([111,21,3,4000,5,6,7,8,9], 4) == 24\nputs add_elements([11,21,3,4000,5,6,7,8,9],\
    \ 4) == 15\nputs add_elements([1,2,3,4,5,6,7,8,9], 4) == 10\nputs add_elements([1,111,21,3,4000,5,6,7,8,9],\
    \ 4) == 21\nputs add_elements([111,21,3,4000,5,6,7,8,9], 1) == 111\nputs add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 9) == 58", "  sum = 0\n  for i in 0...k\n    n = arr[i]\n    if n < 10\n   \
    \   sum += n\n    elsif n < 100\n      sum += n % 10 + n / 10\n    end\n  end\n\
    \  sum\nend", "  # keep track of sum\n  # iterate through array\n  # if value\
    \ less than or equal to 10 or 100\n  # add to sum\n  sum = 0\n  i = 0\n  while\
    \ i < k\n    if arr[i] <= 10 || arr[i] <= 100\n      sum += arr[i]\n    end\n\
    \    i += 1\n  end\n  sum\nend", "  # check constraints\n  return -1 if arr.nil?\
    \ || arr.length > 100 || k < 1 || k > arr.length\n  arr.reduce(0) do |acc, num|\n\
    \    acc += num.to_s.length <= 2 ? num : 0\n    acc if acc < k\n  end\nend", " \
    \   # calculate the sum of all k elements that are <= 99\n    # add the remaining\
    \ elements of array, until you reach k\n    sum = 0\n    count = 0\n    arr.each_with_index\
    \ do |num, i|\n        sum += num if num <= 99 && count < k\n        count +=\
    \ 1\n    end\n    # if the count is < k, then add the remaining numbers, until\
    \ we reach k\n    while count < k\n        sum += arr[count]\n        count +=\
    \ 1\n    end\n    return sum\nend", "  count = 0\n  result = 0\n  while count\
    \ < k\n    if arr[count] < 100\n      result += arr[count]\n    end\n    count\
    \ += 1\n  end\n  result\nend", "  sum = 0\n  for i in 0...k\n    sum += arr[i]\
    \ if arr[i] < 100\n  end\n  sum\nend", "  arr[0..k-1].inject(0) { |sum, n| n <\
    \ 100 ? sum + n : sum }\nend", "    sum = 0\n    i = 0\n    while i < k\n    \
    \    if arr[i] < 100\n            sum += arr[i]\n        end\n        i += 1\n\
    \    end\n    return sum\nend", "    # 2 digit is 99\n    # if element is >= 100,\
    \ then we can't have any more 2 digit numbers\n    # therefore, we have to find\
    \ the first element >= 100 and add up all previous elements.\n    i = 0\n    while\
    \ i < arr.length && arr[i] < 100\n        i += 1\n    end\n    return arr[0...i].reduce(:+)\
    \ if i == k\n    # if there are more than k numbers that are < 100, we only want\
    \ the first k numbers\n    return arr[0...k].reduce(:+) if i > k\n    # otherwise,\
    \ we add the first i numbers and add the first k - i numbers\n    return arr[0...i].reduce(:+)\
    \ + arr[i...k].reduce(:+)\nend", "    arr.first(k).each.inject(0) { |sum, num|\n\
    \        if num.to_s.length > 2\n            sum\n        else\n            sum\
    \ + num\n        end\n    }\nend\np add_elements([111,21,3,4000,5,6,7,8,9], 4)\
    \ # 24\np add_elements([111,21,3,4000,5,6,7,8,9], 1) # 21\np add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 5) # 24\np add_elements([111,21,3,4000,5,6,7,8,9], 6) # 24\np add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 10) # 58\np add_elements([111,21,3,4000,5,6,7,8,9], 2) # 24\np add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 3) # 24\np add_elements
  "  i = 0\n  sum = 0\n  while i < k\n    sum += arr[i] if arr[i] < 100\n    i +=\
    \ 1\n  end\n  sum\nend", "  sum = 0\n  (0...k).each do |i|\n    if arr[i] < 100\n\
    \      sum += arr[i]\n    end\n  end\n  sum\nend", "  answer = 0\n  count = 0\n\
    \  while count < k\n    if arr[count] < 100\n      answer += arr[count]\n    end\n\
    \    count += 1\n  end\n  answer\nend", "    arr.select { |ele| ele.to_s.length\
    \ < 3 }[0...k].sum\nend", "  return 0 if arr.length == 0\n  arr.map { |n| n.to_s.length\
    \ <= 2 ? n : 0 }.first(k).sum\nend\np add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 4) == 24\np add_elements([], 4) == 0\np add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 0) == 0\np add_elements([111,21,3,4000,5,6,7,8,9], -2) == 0\np add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 300) == 24", "    result = 0\n    arr.each_with_index do |num, idx|\n      \
    \  if num > 99\n            next\n        elsif idx == k\n            break\n\
    \        else\n            result += num\n        end\n    end\n    result\nend",
  "  sum = 0\n  # iterate through each element to get the number that is less than\
    \ 100\n  arr.each do |num|\n    if num < 100\n      sum += num\n    end\n  end\n\
    \  sum\nend", "  # set of elements with at most two digits\n  set = []\n  # loop\
    \ through first k elements\n  i = 0\n  while i < k\n    # if current element is\
    \ at most two digits long, add to set\n    if arr[i].to_s.length <= 2\n      set\
    \ << arr[i]\n    end\n    i += 1\n  end\n  # sum up set\n  set.reduce(:+)\nend",
  "  arr.slice(0, k).reduce(0) { |sum, n| n < 100 ? sum + n : sum }\nend", "  result\
    \ = 0\n  i = 0\n  while (i < k)\n    if arr[i] > 9 && arr[i] < 100\n      result\
    \ += arr[i]\n    end\n    i += 1\n  end\n  result\nend", "  sum = 0\n  counter\
    \ = 0\n  while counter < k\n    if arr[counter] < 100\n      sum += arr[counter]\n\
    \    end\n    counter += 1\n  end\n  sum\nend", "  # write your code here\n  sum\
    \ = 0\n  first_k = arr[0..k-1]\n  first_k.each do |number|\n    if number < 10\n\
    \      sum += number\n    elsif number < 100\n      sum += number\n    end\n \
    \ end\n  return sum\nend", "    sum = 0\n    cnt = 0\n    while cnt < k\n    \
    \    if arr[cnt] < 100\n            sum += arr[cnt]\n        end\n        cnt\
    \ += 1\n    end\n    sum\nend", "    # count is \n    count = 0\n    i = 0\n \
    \   while count < k\n        if arr[i] < 100\n            count += 1\n       \
    \ end\n        i += 1\n    end\n    return arr[0..i-1].sum\nend", "\tarr.slice(0,\
    \ k).sum { |n| n < 100 ? n : 0 }\nend", "  arr[0..k-1].map{|el| (el / 10).zero?\
    \ ? el : el % 100}.sum\nend", "  i = 0\n  sum = 0\n  while i < k\n    if arr[i]\
    \ < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend", end, " \
    \ sum = 0\n  arr.each do |x|\n    x_str = x.to_s\n    if x_str.length <= 2\n \
    \     sum += x\n    end\n    k -= 1\n    break if k == 0\n  end\n  sum\nend",
  "  # raise error if arr is empty\n  raise \"Array is empty!\" if arr.empty?\n  #\
    \ initialize sum\n  sum = 0\n  # iterate over the first k elements of arr\n  (0...k).each\
    \ do |i|\n    # set the current element value to val\n    val = arr[i]\n    #\
    \ if val has less than 2 digits\n    if val < 100\n      # add to sum\n      sum\
    \ += val\n    end\n  end\n  # return sum\n  sum\nend", "    # create an array\
    \ of the first k elements\n    first_k = arr[0...k]\n    # iterate through each\
    \ element to find if the element is greater than 99\n    # and less than 1000\n\
    \    sum = 0\n    first_k.each do |ele|\n        if ele < 100 && ele > 9\n   \
    \         sum += ele\n        end\n    end\n    return sum\nend", "  arr[0...k].map{|e|\
    \ e < 100 ? e : 0}.reduce(:+)\nend", "  nums = arr.select { |num| num < 100 }\n\
    \  total = 0\n  nums.each do |num|\n    total += num\n  end\n  total\nend", " \
    \ arr.take(k).sum { |e| e < 100 ? e : 0 }\nend", "  sum = 0\n  (0...k).each do\
    \ |i|\n    if arr[i] <= 99\n      sum += arr[i]\n    end\n  end\n  sum\nend",
  "    # write your code here\n    sum = 0\n    i = 0\n    while i < k\n        if\
    \ arr[i] < 100\n            sum += arr[i]\n        end\n        i += 1\n    end\n\
    \    sum\nend", "  sum = 0\n  arr.each_with_index do |element, index|\n    if\
    \ element.digits.length < 3\n      sum += element\n    end\n    return sum if\
    \ index == k-1\n  end\nend", "    first_k = arr[0..k-1]\n    sum = 0\n    first_k.each\
    \ do |element|\n        if element < 10\n            sum += element\n        elsif\
    \ element < 100\n            sum += element % 10\n        end\n    end\n    return\
    \ sum\nend", "    arr.slice(0, k).reject { |x| x > 99 }.reduce(:+)\nend", "  sum\
    \ = 0\n  arr.each_with_index do |x,i|\n    if i < k && x.to_s.length <= 2\n  \
    \    sum += x\n    end\n  end\n  return sum\nend", "  arr[0...k].select { |x|\
    \ x < 100 }.sum\nend", "  sum = 0\n  i = 0\n  while i < k\n    sum += arr[i] if\
    \ arr[i] <= 99\n    i += 1\n  end\n  sum\nend", "  arr.slice(0...k).map { |x|\
    \ x.to_s.size < 3 ? x : 0 }.reduce(:+)\nend", "  new_arr = []\n  arr.each do |num|\n\
    \    num.to_s.length <= 2 ? new_arr << num : new_arr << 0\n  end\n  new_arr.take(k).sum\n\
    end", "  num = 0\n  first_k = arr[0...k]\n  first_k.each do |ele|\n    if ele.to_s.length\
    \ <= 2\n      num += ele\n    end\n  end\n  return num\nend", "  total = 0\n \
    \ for element in arr[0...k]\n    if element < 100\n      total += element\n  \
    \  end\n  end\n  total\nend", "    sum = 0\n    arr.each do |item|\n        if\
    \ item.to_s.length < 3\n            sum += item\n        end\n        k -= 1\n\
    \        break if k == 0\n    end\n    sum\nend", "  arr = arr.select{|element|\
    \ element <= 99}\n  arr.take(k).sum\nend", "  total = 0\n  i = 0\n  while i <\
    \ k\n    if arr[i] >= 10 && arr[i] < 100\n      total += arr[i]\n    end\n   \
    \ i += 1\n  end\n  total\nend", "  number_counter = 0\n  result = 0\n  loop do\n\
    \    number = arr.shift\n    break if number_counter == k", "  # first sort the\
    \ input\n  return -1 if arr.nil? || arr.empty?\n  return arr.inject(:+) if arr.length\
    \ <= k\n  arr.sort!\n  sum = 0\n  k.times do |i|\n    sum += arr[i] if arr[i]\
    \ < 100\n  end\n  sum\nend", "  counter = 0\n  sum = 0\n  arr.each do |num|\n\
    \    if num < 100\n      sum += num\n      counter += 1\n    end\n    break if\
    \ counter == k\n  end\n  sum\nend", "  sum = 0\n  idx = 0\n  while idx < k &&\
    \ idx < arr.length\n    if arr[idx] < 100\n      sum += arr[idx]\n    end\n  \
    \  idx += 1\n  end\n  sum\nend", "  sum = 0\n  arr.each do |val|\n    break if\
    \ k == 0\n    if val >= 10 && val < 100\n      sum += val\n      k -= 1\n    end\n\
    \  end\n  sum\nend", "  arr.map(&:to_s).select { |n| n.length <= 2 }.take(k).map(&:to_i).reduce(:+)\n\
    end", "  res = 0\n  arr.take(k).each do |e|\n    res += e if e.to_s.length <=\
    \ 2\n  end\n  res\nend", "  sum = 0\n  for i in 0...k\n    sum += arr[i] if arr[i]\
    \ < 100\n  end\n  return sum\nend", "  sum = 0\n  i = 0\n  while i < k\n    if\
    \ arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend",
  "  sum = 0\n  index = 0\n  while index < k\n    if arr[index] < 100\n      sum +=\
    \ arr[index]\n    end\n    index += 1\n  end\n  sum\nend", "  return false if\
    \ k > arr.length\n  results = []\n  k.times do |i|\n    num = arr[i]\n    results\
    \ << num if num.to_s.length <= 2\n  end\n  results.sum\nend", "  sum = 0\n  i\
    \ = 0\n  while i < k\n    if arr[i] > 9 && arr[i] < 100\n      sum += arr[i]\n\
    \    end\n    i += 1\n  end\n  sum\nend", "  sum = 0\n  i = 0\n  while i < k\n\
    \    if arr[i] > 9 && arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n\
    \  end\n  sum\nend", "  total = 0\n  i = 0\n  while i < k\n    total += arr[i]\
    \ unless arr[i] > 99\n    i += 1\n  end\n  total\nend", "  count = 0\n  sum =\
    \ 0\n  (0...arr.length).each do |i|\n    num = arr[i]\n    count += 1 if num <\
    \ 10\n    count += 1 if num >= 10 && num < 100\n    sum += num if count <= k\n\
    \    break if count == k\n  end\n  sum\nend", "  sum = 0\n  arr.each do |i|\n\
    \    if i < 10\n      sum += i\n    elsif i < 100\n      sum += i\n    else\n\
    \      break\n    end\n  end\n  sum\nend", "  sum = 0\n  i = 0\n  while i < k\
    \ && i < arr.length\n    if arr[i] < 100\n      sum += arr[i]\n    end\n    i\
    \ += 1\n  end\n  sum\nend", "  sum = 0\n  i = 0\n  while i < k\n    if arr[i]\
    \ < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend", "  total\
    \ = 0\n  arr.each do |num|\n    if num < 100\n      total += num\n    end\n  \
    \  k -= 1\n    break if k == 0\n  end\n  total\nend", "    sum = 0\n    i = 0\n\
    \    while i < k\n        sum += arr[i] if arr[i] < 100\n        i += 1\n    end\n\
    \    sum\nend", "  i = 0\n  sum = 0\n  while i < k\n    if arr[i] >= 10 && arr[i]\
    \ < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend", "    arr.each\
    \ do |num|\n        if num.to_s.length > 2\n            num = 0\n        end\n\
    \    end\n    arr[0..k-1].sum\nend", "  result = 0\n  i = 0\n  while i < k\n \
    \   if arr[i] < 100\n      result += arr[i]\n    end\n    i += 1\n  end\n  result\n\
    end", "  sum = 0\n  arr.each_with_index do |n, i|\n    if i >= k\n      break\n\
    \    elsif n < 10\n      sum += n\n    elsif n > 10 && n < 100\n      sum += n\n\
    \    end\n  end\n  sum\nend\np add_elements([111,21,3,4000,5,6,7,8,9], 4)", " \
    \ counter = 0\n  final_sum = 0\n  while counter < k\n    if arr[counter].to_s.length\
    \ == 1 || arr[counter].to_s.length == 2\n      final_sum += arr[counter]\n   \
    \ end\n    counter += 1\n  end\n  final_sum\nend", "  i = 0\n  result = 0\n  while\
    \ i < k\n    digit_count = arr[i].to_s.length\n    if digit_count <= 2\n     \
    \ result += arr[i]\n    end\n    i += 1\n  end\n  result\nend", "  sum = 0\n \
    \ i = 0\n  while i < k\n    current_element = arr[i]\n    if current_element <\
    \ 10\n      sum += current_element\n    elsif current_element < 100\n      sum\
    \ += current_element\n    end\n    i += 1\n  end\n  sum\nend", "  if arr.size\
    \ < 1 || arr.size > 100\n    raise ArgumentError.new('Array size is invalid.')\n\
    \  end", "  #O(N) but mutates the array, re-arranges elements\n  count = 0\n \
    \ arr.each_with_index do |num, i|\n    if num.to_s.length == 1\n      count +=\
    \ num\n    elsif num.to_s.length == 2\n      count += num\n    end\n    if count\
    \ == k\n      return count\n    end\n  end\n  count\nend", "  i = 0\n  sum = 0\n\
    \  while i < k\n    cur = arr[i]\n    if cur < 10\n      sum += cur\n    elsif\
    \ cur < 100\n      sum += cur\n    end\n    i += 1\n  end\n  sum\nend", "  sum\
    \ = 0\n  i = 0\n  while i < k\n    if arr[i] < 100\n      sum += arr[i]\n    end\n\
    \    i += 1\n  end\n  sum\nend", "  sum = 0\n  i = 0\n  while i < k\n    if arr[i]\
    \ < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend", "  arr[0...k].map\
    \ { |x| x.to_s.size < 3 ? x : 0 }.sum\nend", "  arr[0..k].select { |ele| ele <\
    \ 100 }.sum\nend\nputs add_elements([111,21,3,4000,5,6,7,8,9], 4)", "  sum = 0\n\
    \  0.upto(k-1) do |i|\n    sum += arr[i] if arr[i] >= 10 && arr[i] <= 99\n  end\n\
    \  sum\nend", "  i = 0\n  sum = 0\n  while i < k\n    sum += arr[i] if arr[i]\
    \ < 100\n    i += 1\n  end\n  sum\nend", "  sum = 0\n  i = 0\n  while i < k &&\
    \ i < arr.length\n    if arr[i] < 100\n      sum += arr[i]\n    end\n    i +=\
    \ 1\n  end\n  sum\nend", "  arr[0...k].reduce(0) { |a, b| (b > 9) ? a : a + b\
    \ }\nend", "  arr.take(k).reduce(0) { |sum, x| sum + (x.to_s.length < 3 ? x :\
    \ 0) }\nend", "  arr.sort!.reverse!\n  sum = 0\n  arr.each do |num|\n    break\
    \ if k == 0\n    if num.to_s.length <= 2\n      sum += num\n      k -= 1\n   \
    \ end\n  end\n  sum\nend", "  arr[0..k-1].select { |n| n.to_s.length <= 2 }.reduce(:+)\n\
    end", "  sum = 0\n  for elem in arr\n    if elem.to_s.length <= 2\n      sum +=\
    \ elem\n    end\n  end\n  return sum\nend", "  arr[0..k].select{|num| num < 100}.sum\n\
    end\nputs \"Expected: 24 -- Actual: #{add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 4)}\"\nputs \"Expected: 50 -- Actual: #{add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 5)}\"\nputs \"Expected: 21 -- Actual: #{add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 1)}\"\nputs \"Expected: 0 -- Actual: #{add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 0)}\"\nputs \"Expected: 0 -- Actual: #{add_elements([1000,1,11,0,0,0,4,50,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,",
  "\tsum = 0\n\ti = 0\n\twhile i < k && arr[i] != nil\n\t\tif arr[i] < 100\n\t\t\t\
    sum += arr[i]\n\t\tend\n\t\ti += 1\n\tend\n\treturn sum\nend\nputs add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 4)", "  arr.take(k).inject(0) { |acc, n| n < 10 ? acc + n : acc }\nend", " \
    \ sum = 0\n  num_arr = arr.map { |num| num.to_s.length }\n  k.times do |i|\n \
    \   sum += arr[i] if num_arr[i] <= 2\n  end\n  sum\nend", "  arr[0...k].select\
    \ { |num| num >= 10 && num < 100 }.sum\nend\np add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 4) == 24\np add_elements([111,21,3,4000,5,6,7,8,9], 3) == 24\np add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 5) == 32\np add_elements([111,21,3,4000,5,6,7,8,9], 10) == 111 + 21 + 3\np add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 0) == 0\np add_elements([], 0) == 0\np add_elements([1,2,3,4,5,6,7,8,9], 0)\
    \ == 0\np add_elements([1,2,3,4,5,6,7,8,9], 9) == 1 + 2 + 3 + 4 + 5 + 6 + 7 +\
    \ 8 + 9\np add_elements([11,22,33,44,55,66,77,88,99], 9) == 11 + 22 + 33 + 44\
    \ + 55 + 66 + 77 + 88 + 99\np add_elements([111,21,3,4000,5,6,7,8,9], 5) == 111\
    \ + 21 + 3 + 4000 + 5", "  total = 0\n  arr.each_with_index do |n, i|\n    if\
    \ n < 100 && i < k\n      total += n\n    end\n  end\n  total\nend", "  #arr =\
    \ arr.sort_by{|n| n.to_s.length}\n  arr.select{|n| n.to_s.length <= 2}.take(k).reduce(:+)\n\
    end", "  arr.take(k).reduce(0) { |sum, val| val < 100 ? sum + val : sum }\nend",
  "  sum = 0\n  i = 0\n  # loop through the first k elements of arr\n  # if the element\
    \ is smaller than 100 (i.e. is two digits or less)\n  # add the element to sum\n\
    \  # once i = k return sum\n  while i < k\n    if arr[i] < 100\n      sum += arr[i]\n\
    \    end\n    i += 1\n  end\n  return sum\nend", "  sum = 0\n  k.times do |x|\n\
    \    sum += arr[x] if arr[x] > 9 && arr[x] < 100\n  end\n  sum\nend\nputs \"EX2\"\
    \nputs add_elements([111,21,3,4000,5,6,7,8,9], 4) == 24\nputs add_elements([1111,221,33,5,6,7,8,9],\
    \ 3) == 264", "  sum = 0\n  arr.each do |a|\n    if a.to_s.length <= 2\n     \
    \ sum += a\n      k -= 1\n    end\n    break if k == 0\n  end\n  sum\nend", " \
    \ arr[0..k].select { |num| num.to_s.length <= 2 }.reduce(:+)\nend", "  arr[0...k].map\
    \ { |ele| (ele >= 10 && ele < 100) ? ele : 0 }.sum\nend", "  i = 0\n  sum = 0\n\
    \  while i < k\n    if arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n\
    \  end\n  sum\nend", "  sum = 0\n  for i in 0...k\n    if arr[i] < 100 && arr[i]\
    \ > 9\n      sum += arr[i]\n    end\n  end\n  return sum\nend", "  arr.slice(0,\
    \ k).map { |i| i.to_s.length <= 2 ? i : 0 }.sum\nend\nputs 'Exercise 1'\nputs\
    \ add_elements([111,21,3,4000,5,6,7,8,9], 4) == 24\nputs add_elements([100,200,300,400,500,600,700,800,900],\
    \ 3) == 600\nputs add_elements([1,2,3,4,5,6,7,8,9], 4) == 10\nputs '-------------'",
  "  # range of k elements in array\n  elements = arr[0...k]\n  # select elements\
    \ with 2 digits or less\n  elements.select! { |e| e < 100 }\n  # take sum of elements\n\
    \  elements.sum\nend", "  if arr.length == 1 && arr[0] > 99\n    return 0\n  elsif\
    \ arr.length == 1 && arr[0] < 99\n    return arr[0]\n  end\n  sum = 0\n  i = 0\n\
    \  until i == k\n    if arr[i] > 99\n      i += 1\n    else\n      sum += arr[i]\n\
    \      i += 1\n    end\n  end\n  return sum\nend", "  sum = 0\n  arr.each do |x|\n\
    \    if x <= 99\n      sum += x\n    end\n    k -= 1\n    break if k == 0\n  end\n\
    \  sum\nend", "  # sum the elements from the first k elements from the array with\
    \ at most two digits\n  nums = arr.take(k)\n  nums.select { |n| n.to_s.length\
    \ <= 2 }.sum\nend", "    #write your code here\n    sum = 0\n    arr[0..k-1].each\
    \ do |num|\n        if num.to_s.length == 1 || num.to_s.length == 2\n        \
    \    sum += num\n        end\n    end\n    sum\nend", "  sum = 0\n  i = 0\n  while\
    \ i < k\n    sum += arr[i] if arr[i] < 100\n    i += 1\n  end\n  sum\nend\nputs\
    \ add_elements([111,21,3,4000,5,6,7,8,9], 4)\nputs add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 3)\nputs add_elements([111,21,3,4000,5,6,7,8,9], 7)\nputs add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 8)", "  sum = 0\n  arr.each do |i|\n    if i.to_s.length <= 2\n      sum +=\
    \ i\n      k -= 1\n    end\n    break if k == 0\n  end\n  sum\nend", "  elements\
    \ = arr.select { |i| i.to_s.length <= 2 }\n  sum = 0\n  elements[0...k].each {\
    \ |i| sum += i }\n  sum\nend", "  sum = 0\n  for i in 0...k\n    if arr[i] < 100\n\
    \      sum += arr[i]\n    end\n  end\n  return sum\nend", "  return 0 if arr.empty?\n\
    \  return arr.sum if arr.all? { |a| a.digits.size <= 2 }\n  return arr[0...k].sum\
    \ if arr[0...k].all? { |a| a.digits.size <= 2 }\n  i = 0\n  sum = 0\n  while i\
    \ < k\n    if arr[i].digits.size <= 2\n      sum += arr[i]\n    end\n    i +=\
    \ 1\n  end\n  sum\nend", "  arr.each_with_index.reduce(0) do |sum, (elem, i)|\n\
    \    sum += elem if elem < 100 && i < k\n    sum\n  end\nend", "  sum = 0\n  i\
    \ = 0\n  while i < k\n    if arr[i] < 100\n      sum += arr[i]\n    end\n    i\
    \ += 1\n  end\n  sum\nend", "  arr.first(k).reduce(0) { |acc, element| element\
    \ < 100 ? acc + element : acc }\nend", "  arr.select { |n| n < 100 }.take(k).sum\n\
    end\np add_elements([111,21,3,4000,5,6,7,8,9], 4) == 24", "  i = 0\n  sum = 0\n\
    \  while i < k\n    if arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n\
    \  end\n  sum\nend\nputs add_elements([111,21,3,4000,5,6,7,8,9], 4)", "  # TODO:\
    \ implement the method\nend", "    # first, sort the array\n    # then, take the\
    \ first k elements, and select the ones with\n    # 2 digits or less\n    # then,\
    \ sum them\n    sum = 0\n    elements = arr.sort[0..k - 1].select { |element|\
    \ element < 100 }\n    elements.each { |element| sum += element }\n    sum\nend",
  "    arr.first(k).select{|n| n.to_s.length < 3}.sum\nend\np add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 4) == 24", "  i = 0\n  sum = 0\n  while i < k\n    if arr[i] < 100\n      sum\
    \ += arr[i]\n    end\n    i += 1\n  end\n  sum\nend", "  sum = 0\n  k.times do\
    \ |i|\n    sum += arr[i] if arr[i] < 100\n  end\n  sum\nend", "  n = arr.length\n\
    \  sum = 0\n  for i in 0..n-1\n    # The number is at most 2 digits\n    if arr[i]\
    \ <= 99\n      sum += arr[i]\n      k -= 1\n    end\n    break if k == 0\n  end\n\
    \  sum\nend", end, "    sum = 0\n    k.times do |idx|\n        sum += arr[idx]\
    \ if arr[idx] < 100\n    end\n    sum\nend", end, "  # write your code here\n\
    \  i = 0\n  sum = 0\n  while (i < k)\n    if (arr[i] < 100)\n      sum += arr[i]\n\
    \    end\n    i += 1\n  end\n  sum\nend", "  arr.map { |e| e.to_s.length <= 2\
    \ ? e : 0 }.reduce(:+)\nend\nputs add_elements([111,21,3,4000,5,6,7,8,9], 4)",
  "  return -1 if k <= 0\n  return arr[0] if k == 1\n  sum = 0\n  i = 0\n  while i\
    \ < k\n    current_number = arr[i]\n    if current_number > 9 && current_number\
    \ < 100\n      sum += current_number\n    end\n    i += 1\n  end\n  sum\nend",
  "  count = 0\n  sum = 0\n  arr.each do |ele|\n    if ele.to_s.length <= 2\n    \
    \  sum += ele\n      count += 1\n    end\n    break if count == k\n  end\n  sum\n\
    end", "  arr.take(k).count { |x| x.to_s.length <= 2 }.inject(:+)\nend", "  arr.take(k).select\
    \ { |n| n < 100 }.sum\nend", "  arr.first(k).select { |ele| ele.digits.count <\
    \ 3 }.sum\nend", "  arr.select{|ele| ele < 100}.take(k).reduce(:+)\nend", "  sum\
    \ = 0\n  k.times do |i|\n    if arr[i] >= 10 && arr[i] < 100\n      sum += arr[i]\n\
    \    end\n  end\n  sum\nend", "  arr.take(k).map { |num| num.to_s.size > 2 ? 0\
    \ : num }.sum\nend", "  arr.slice(0, k).inject(0) { |sum, n| n < 100 ? sum + n\
    \ : sum }\nend\nputs add_elements([111,21,3,4000,5,6,7,8,9], 4)\nputs add_elements([10000],\
    \ 1)\nputs add_elements([111,21,3,4000,5,6,7,8,9], 1)\nputs add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 0)\nputs add_elements([111,21,3,4000,5,6,7,8,9], 9)\nputs add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 10)\nputs add_elements([111,21,3,4000,5,6,7,8,9], 20)", "    sum = 0\n    arr.each_with_index\
    \ do |item, i|\n        if (item.to_s.length <= 2 && i < k)\n            sum +=\
    \ item\n        end\n    end\n    sum\nend", "  sum = 0\n  cnt = 0\n  (0...arr.length).each\
    \ do |idx|\n    if arr[idx] > 99\n      sum += arr[idx]\n      cnt += 1\n    elsif\
    \ arr[idx] > 9\n      sum += arr[idx]\n      cnt += 1\n    else\n      sum +=\
    \ arr[idx]\n      cnt += 1\n    end\n    break if cnt == k\n  end\n  sum\nend",
  "    sum = 0\n    (1..k).each do |i|\n        arr[i] = arr[i].to_s.length < 3 ?\
    \ arr[i] : 0\n        sum += arr[i]\n    end\n    sum\nend", "  # Time: O(n +\
    \ k), Space: O(n)\n  # n = arr.length\n  i = 0\n  result = 0\n  while i < arr.length\n\
    \    current = arr[i]\n    if current > 99\n      arr[i] = current % 100\n   \
    \ end\n    i += 1\n  end\n  i = 0\n  while i < k\n    result += arr[i]\n    i\
    \ += 1\n  end\n  result\nend", "  raise Exception, 'Must be an array' unless arr.is_a?(Array)\n\
    \  raise Exception, 'Must be an integer' unless k.is_a?(Integer)\n  raise Exception,\
    \ 'Array must not be empty' if arr.empty?\n  raise Exception, 'Array cannot have\
    \ more than 100 elements' if arr.length > 100\n  raise Exception, 'k must be between\
    \ 1 and array length' if k < 1 || k > arr.length\n  sum = 0\n  arr.each_with_index\
    \ do |element, index|\n    break if index == k\n    if element.to_s.length <=\
    \ 2\n      sum += element\n    end\n  end\n  sum\nend", "  @additional_sum = 0\n\
    \  @initial_sum = 0\n  @arr = arr\n  @k = k\n  @index = 0\n  while @index < @k\n\
    \    get_sum\n    @index += 1\n  end\n  @initial_sum + @additional_sum\nend",
  "  count = 0\n  sum = 0\n  while count < k\n    if arr[count] > 9 && arr[count]\
    \ < 100\n      sum += arr[count]\n    end\n    count += 1\n  end\n  sum\nend",
  "  return 0 if k == 0\n  return arr[0] if k == 1\n  return arr[0] + arr[1] if k\
    \ == 2\n  k <= arr.length ? arr[0..k - 1].sum : arr.sum\nend\nputs add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 4)", "  sum = 0\n  i = 0\n  while i < k\n    if arr[i] < 100\n      sum += arr[i]\n\
    \    end\n    i += 1\n  end\n  sum\nend", "  arr.take(k).reduce(0) { |sum, num|\
    \ num >= 10 ? sum : sum + num }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
