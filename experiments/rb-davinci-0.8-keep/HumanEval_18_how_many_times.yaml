name: HumanEval_18_how_many_times
language: rb
prompt: "# Find how many times a given substring can be found in the original string.\
  \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
  \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
  \ substring)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n\
  \    candidate = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\"\
  , \"x\"))\n    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
  \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
  john doe\", \"john\"))\n  end\nend\n"
completions: ["\tstr = string.scan(/#{substring}/)\n\tstr.length\nend", "  count =\
    \ 0\n  substring_size = substring.size\n  string.size.times do |i|\n    substring\
    \ == string[i, substring_size] ? count += 1 : nil\n  end\n  count\nend", "  #\
    \ Your code goes here!\nend", "  string.scan(substring).length\nend", "  string.scan(substring).count\n\
    end", "  if string.include?(substring)\n    return string.scan(substring).length\n\
    \  else\n    return 0\n  end\nend", "  string.scan(/#{substring}/).count\nend",
  "  string.scan(/(?=#{substring})/).count\nend", "  count = 0\n  string.length.times\
    \ do |i|\n    count += 1 if string[i, substring.length] == substring\n  end\n\
    \  count\nend", "  count = 0\n  while string.include?(substring)\n    count +=\
    \ 1\n    string = string.sub(substring, '')\n  end\n  count\nend", "  return 0\
    \ if substring.length == 0\n  i = 0\n  while string.index(substring, i)\n    i\
    \ = string.index(substring, i) + 1\n  end\n  i\nend", "  return 0 if string.empty?\n\
    \  return string.size if substring.empty?\n  string.scan(substring).size\nend",
  "  return 0 if string.empty? || substring.empty?\n  last_index = string.length -\
    \ substring.length\n  count = 0\n  (0..last_index).each do |i|\n    count += 1\
    \ if string[i..(i + substring.length - 1)] == substring\n  end\n  count\nend",
  "\t\nend", "  # TODO: implement this method\nend", "  count = 0\n  string.each_char.with_index\
    \ do |char, i|\n    if string[i..-1].start_with?(substring)\n      count += 1\n\
    \    end\n  end\n  count\nend", "  return 0 if string.empty?\n  string.scan(/(?=#{substring})/).count\n\
    end", "  counter = 0\n  0.upto(string.length - substring.length) do |i|\n    counter\
    \ += 1 if string[i, substring.length] == substring\n  end\n  counter\nend", " \
    \   string.count(substring)\nend", "  match = string.match(substring)\n  return\
    \ 0 if match.nil?\n  return 1 + how_many_times(string[match.end(0)..-1], substring)\n\
    end", "  return nil if !string.include?(substring)\n  i = 0\n  string.scan(substring).length\n\
    end\nhow_many_times('', 'a')\nhow_many_times('aaa', 'a')\nhow_many_times('aaaa',\
    \ 'aa')", "  count = 0\n  (0..string.length).each do |i|\n    if string[i..(i\
    \ + substring.length - 1)] == substring\n      count += 1\n    end\n  end\n  count\n\
    end", "  return 0 if string.empty?\n  return 1 if substring.empty?\n  array =\
    \ []\n  while string.length > 0 do\n    array << string if string.start_with?(substring)\n\
    \    string = string[1..-1]\n  end\n  array.length\nend", "  array = string.split('')\n\
    \  count = 0\n  if string.length == 0 || substring.length == 0\n    0\n  else\n\
    \    array.each_with_index do |letter, i|\n      if array[i..i + substring.length\
    \ - 1].join('') == substring\n        count += 1\n      end\n    end\n    count\n\
    \  end\nend", "  count = 0\n  length = substring.length\n  string.length.times\
    \ do |i|\n    if string[i, length] == substring\n      count += 1\n    end\n \
    \ end\n  count\nend", "  return 0 if string.empty? || substring.empty?\n  string.scan(substring).length\n\
    end", "  raise ArgumentError, 'Empty substring' if substring.empty?\n  string.scan(substring).count\n\
    end", "  string.scan(/(?=#{substring})/).count\nend", "  string.scan(/(?=#{substring})/).length\n\
    end", "  return string.scan(substring).count\nend", "\t# if substring is empty,\
    \ return 0\n\tif substring.empty?\n\t\treturn 0\n\tend\n\t\n\tif substring.length\
    \ > string.length\n\t\treturn 0\n\tend\n\t\n\treturn string.scan(/(?=#{substring})/).count\n\
    end", "  return 0 if string.empty?\n  return 1 if substring.empty?\n  return 2\
    \ if string.size == substring.size\n  if string.include?(substring)\n    string.scan(/(?=#{substring})/).count\n\
    \  else\n    0\n  end\nend", "  # TODO: implement this method\nend", "  count\
    \ = 0\n  string.length.times do |index|\n    count += 1 if string[index..index\
    \ + substring.length - 1] == substring\n  end\n  count\nend", "    count = 0\n\
    \    i = 0\n    j = 0\n    while i < string.length do\n        j = 0\n       \
    \ while j < substring.length do\n            if string[i + j] != substring[j]\n\
    \                break\n            end\n            j += 1\n        end\n   \
    \     if j == substring.length\n            count += 1\n        end\n        i\
    \ += 1\n    end\n    return count\nend", "  return 0 if string.empty?\n  n = 0\n\
    \  while string.index(substring) != nil\n    n += 1\n    string.slice!(substring)\n\
    \  end\n  n\nend", "  if string == '' or substring == ''\n    return 0\n  end\n\
    \  # I am sure this can be done with a regex\n  return string.scan(substring).count\n\
    end", "  string.scan(/#{substring}/).count\nend", "  count = 0\n  for i in 0..string.length-1\n\
    \    if string[i..i+substring.length-1] == substring\n      count += 1\n    end\n\
    \  end\n  count\nend", "  # CODE HERE\nend", "  string.scan(/(?=#{substring})/).count\n\
    end", "\tstring.scan(/(?=#{substring})/).count\nend", "  count = 0\n  string.scan(substring)\
    \ { count += 1 }\n  count\nend", "  count = 0\n  string.size.times do |i|\n  \
    \  count += 1 if string[i, substring.size] == substring\n  end\n  count\nend",
  "  string.scan(substring).length\nend", "  idx = 0\n  count = 0\n  while idx < string.length\n\
    \    if string[idx, substring.length] == substring\n      count += 1\n      idx\
    \ += substring.length\n    else\n      idx += 1\n    end\n  end\n  count\nend",
  "  count = 0\n  i = 0\n  while i <= string.length - substring.length\n    if string[i..(i\
    \ + substring.length - 1)] == substring\n      count += 1\n      i += substring.length\n\
    \    else\n      i += 1\n    end\n  end\n  count\nend", "  string.scan(substring).count\n\
    end", "  # In the string, replace each letter that is not the substring with a\
    \ space.\n  # Split on those spaces, and count the number of elements.\n  string.gsub(/(?!#{substring})/,\
    \ ' ').split(' ').length - 1\nend", "  string.scan(/(?=#{substring})/).count\n\
    end", "  string.scan(substring).length\nend", "  return 0 if substring.empty?\n\
    \  arr = string.split(substring)\n  arr.length - 1\nend", "  substrings = []\n\
    \  index = 0\n  while index < string.length\n    if string[index..index + substring.length\
    \ - 1] == substring\n      substrings << string[index..index + substring.length\
    \ - 1]\n    end\n    index += 1\n  end\n  return substrings.length\nend", "  return\
    \ 0 if string.empty? || substring.empty?\n  string.scan(/(?=#{substring})/).length\n\
    end", "  count = 0\n  (0..string.length).each do |i|\n    string[i..-1].start_with?(substring)\
    \ ? count += 1 : nil\n  end\n  count\nend", "  string.scan(substring).count\n\
    end", "  n = 0\n  i = 0\n  while true\n    i = string.index(substring, i)\n  \
    \  break if i.nil?\n    n += 1\n    i += 1\n  end\n  n\nend", "  count = 0\n \
    \ for i in 0..string.length\n    count += 1 if string[i..i+substring.length-1]\
    \ == substring\n  end\n  count\nend", '  return 0 if string.empty? || substring.empty?',
  "  count = 0\n  while string.include?(substring)\n    count += 1\n    string = string.sub(substring,\
    \ \"\")\n  end\n  count\nend", "    return 0 if string.length == 0\n    return\
    \ string.count(substring)\nend", "\tstring.scan(substring).count\nend", "  counter\
    \ = 0\n  i = 0\n  while i < string.length do\n    if string[i, substring.length]\
    \ == substring\n      counter += 1\n      i += substring.length\n    else\n  \
    \    i += 1\n    end\n  end\n  counter\nend", "  count = 0\n  index = 0\n  while\
    \ index < string.length\n    if string[index..index + substring.length - 1] ==\
    \ substring\n      count += 1\n      index += substring.length\n    else\n   \
    \   index += 1\n    end\n  end\n  count\nend", "  (string.length - substring.length\
    \ + 1).times do |i|\n    if string[i..i+substring.length-1] == substring\n   \
    \   count += 1\n    end\n  end\n  count\nend", "  string.scan(substring).count\n\
    end", "  string.scan(substring).count\nend", "  counter = 0\n  string.scan(/#{substring}/).count\n\
    end", "  count = 0\n  string.each_char.with_index do |char, index|\n    if string[index..(index\
    \ + substring.length)] == substring\n      count += 1\n    end\n  end\n  count\n\
    end", "  string.scan(substring).length\nend", "  # TODO: Implement this\nend",
  "  return 0 if string.length < substring.length\n  index = string.length - substring.length\n\
    \  i = 0\n  count = 0\n  while i <= index\n    count += 1 if string[i, substring.length]\
    \ == substring\n    i += 1\n  end\n  count\nend", "  return nil if string.nil?\
    \ || substring.nil?\n  return 0 if string.empty? || substring.empty?\n  counter\
    \ = 0\n  string.each_char.with_index do |char, index|\n    if string[index..(index\
    \ + substring.length - 1)] == substring\n      counter += 1\n    end\n  end\n\
    \  counter\nend", "  overlap = 0\n  string.split('').each_cons(substring.length)\
    \ do |str|\n    overlap += 1 if str.join('') == substring\n  end\n  overlap\n\
    end", "  count = 0\n  begin\n    index = string.index(substring)\n    count +=\
    \ 1 if index\n    string = string[index+1..-1]\n  end while index\n  count\nend",
  "    string.scan(substring).length\nend", "  count = 0\n  string.scan(substring)\
    \ { count += 1 }\n  count\nend", "\tcount = 0\n\tstring.scan(substring) {count\
    \ += 1}\n\tcount\nend", "  count = 0\n  for i in 0..string.length\n    if string[i,\
    \ substring.length] == substring\n      count += 1\n    end\n  end\n  return count\n\
    end", "  string.scan(/(?=#{substring})/).count\nend", "  count = 0\n  len = substring.length\n\
    \  len.times do |index|\n    count += string.scan(/#{substring}/).count\n    substring.chop!\n\
    \  end\n  count\nend", "  if string.include?(substring)\n    times = 1\n    substring.length.times\
    \ do\n      string.sub!(substring, '')\n      times += 1 if string.include?(substring)\n\
    \    end\n    times\n  else\n    0\n  end\nend", "  string.scan(/(?=#{substring})/).count\n\
    end", "  if substring.length > string.length\n    return 0\n  elsif string ==\
    \ substring\n    return 1\n  end\n  # if substring > string, no occurences\n \
    \ # if string == substring, 1 occurence\n  # if string != substring, recursively\
    \ check all substrings of string for substring\n  counter = 0\n  (0..string.length\
    \ - substring.length).each do |i|\n    if string[i..i + substring.length - 1]\
    \ == substring\n      counter += 1\n    end\n  end\n  counter\nend", "  return\
    \ 0 if string.empty?\n  return 1 if substring.empty?\n  string.split(substring).size\
    \ - 1\nend", "  count = 0\n  if substring.length > string.length\n    return count\n\
    \  end\n  i = 0\n  while i < string.length\n    if string[i] == substring[0]\n\
    \      temp_count = 1\n      j = 1\n      while j < substring.length\n       \
    \ if string[i+j] == substring[j]\n          temp_count += 1\n        else\n  \
    \        break\n        end\n        j += 1\n      end\n      if temp_count ==\
    \ substring.length\n        count += 1\n      end\n    end\n    i += 1\n  end\n\
    \  return count\nend", "    raise ArgumentError.new(\"string cannot be nil\")\
    \ if string.nil?\n    raise ArgumentError.new(\"substring cannot be nil\") if\
    \ substring.nil?\n    raise ArgumentError.new(\"string and substring cannot be\
    \ empty\") if string.empty? and substring.empty?\n    raise ArgumentError.new(\"\
    substring cannot be empty\") if substring.empty?\n    return 0 if string.empty?",
  "  # ...\nend", "  a = string.length - substring.length + 1\n  counter = 0\n  i\
    \ = 0\n  while i < a\n    if string[i..(i + substring.length - 1)] == substring\n\
    \      counter += 1\n    end\n    i += 1\n  end\n  counter\nend", "  counter =\
    \ 0\n  until substring.length > string.length\n    counter += 1 if string.include?(substring)\n\
    \    string.slice!(0)\n  end\n  counter\nend", "  count = 0\n  while string.sub!(substring,\
    \ '')\n    count += 1\n  end\n  count\nend", "  times = 0\n  while string.length\
    \ > 0\n    match = string.index(substring)\n    if match.nil?\n      return times\n\
    \    else\n      times += 1\n      string = string[match+1..-1]\n    end\n  end\n\
    \  times\nend", "\t\nend", "  count = 0\n  string.scan(substring) { |x| count\
    \ += 1 }\n  count\nend", "  count = 0\n  index = 0\n  while index < string.length\
    \ do\n    index = string.index(substring, index)\n    break if index.nil?\n  \
    \  count += 1\n    index += 1\n  end\n  count\nend", "  i = 0\n  count = 0\n \
    \ while i <= string.length - substring.length\n    if string[i, substring.length]\
    \ == substring\n      count += 1\n      i += substring.length\n    else\n    \
    \  i += 1\n    end\n  end\n  count\nend", "  # your code here\nend", "  raise\
    \ ArgumentError.new(\"Arguments can't be nil\") if string.nil? || substring.nil?\n\
    \  return 0 if string.empty? || substring.empty?\n  index = 0\n  count = 0\n \
    \ substring_length = substring.length\n  string_length = string.length\n  while\
    \ index <= string_length - substring_length\n    count += 1 if string[index, substring_length]\
    \ == substring\n    index += 1\n  end\n  count\nend", "  string.scan(substring).length\n\
    end", "  count = 0\n  string.split(substring).each do |string|\n    count += 1\n\
    \  end\n  count - 1\nend", "\t# TODO\n\tcount = 0\n\t\n\t# while i < string.length\
    \ - substring.length do\n\ti = 0\n\twhile i < string.length do\n\t\tif string[i,\
    \ substring.length] == substring\n\t\t\tcount += 1\n\t\tend\n\t\ti += 1\n\tend\n\
    \treturn count\nend", "  string.scan(substring).count\nend", "  counter = 0\n\
    \  until string.length <= substring.length\n    if string[0, substring.length]\
    \ == substring\n      counter += 1\n    end\n    string = string[1..-1]\n  end\n\
    \  counter\nend", "  array = []\n  while (index = string.index(substring, index.to_i))\
    \ do\n    array << index\n    index += 1\n  end\n  array.length\nend", "  position\
    \ = 0\n  count = 0\n  while position < string.length do\n    if string[position..position\
    \ + substring.length - 1] == substring\n      count += 1\n    end\n    position\
    \ += 1\n  end\n  count\nend", "  count = 0\n  substring.length.times do |i|\n\
    \    idx = string.index(substring[i..-1])\n    while idx\n      count += 1\n \
    \     idx = string.index(substring[i..-1], idx + 1)\n    end\n  end\n  count\n\
    end", "\tsubstring_len = substring.length\n\tcount = 0\n\ti = 0\n\twhile (i+substring_len\
    \ <= string.length)\n\t\tsub_str = string[i, substring_len]\n\t\tcount += 1 if\
    \ sub_str == substring\n\t\ti += 1\n\tend\n\tcount\nend", "  string.scan(substring).count\n\
    end", "  string.scan(substring).count\nend", "  return string.scan(substring).length\n\
    end", "  s = 0\n  while string.index(substring)\n    s += 1\n    string = string[string.index(substring)\
    \ + 1..-1]\n  end\n  s\nend", "  string.scan(substring).length\nend", "  count\
    \ = 0\n  string.each_char.with_index do |ch, idx|\n    if string[idx...idx + substring.length]\
    \ == substring\n      count += 1\n    end\n  end\n  count\nend", "  raise NotImplementedError\n\
    end", "  count = 0\n  if string.size > 0\n    if substring.size > 0\n      (0..string.size).each\
    \ do |i|\n        count += 1 if string[i...(i + substring.size)] == substring\n\
    \      end\n    end\n  end\n  count\nend", "  count = 0\n  string.each_char.with_index\
    \ do |c, i|\n    if string[i...i+substring.length] == substring\n      count +=\
    \ 1\n    end\n  end\n  count\nend", "\tcount = 0\n\ti = 0\n\twhile i <= string.length\
    \ - substring.length\n\t\tif string[i...i+substring.length] == substring\n\t\t\
    \tcount += 1\n\t\tend\n\t\ti += 1\n\tend\n\tcount\nend", "    string.scan(substring).count\n\
    end", "    return string.scan(substring).length\nend", "  return 0 if string.empty?\
    \ || substring.empty?\n  return (string.length - substring.length + 1) if substring.length\
    \ == 1\n  string.scan(substring).count\nend", "  # your code here\nend", "  count\
    \ = 0\n  (0..string.length - substring.length).each do |index|\n    count += 1\
    \ if string[index, substring.length] == substring\n  end\n  count\nend", "  string.scan(substring).count\n\
    end", "\ti = 0\n\tcount = 0\n\twhile i < string.length do\n\t\tif string[i..-1].start_with?(substring)\n\
    \t\t\tcount += 1\n\t\tend\n\t\ti += 1\n\tend\n\tcount\nend", "  string.scan(substring).length\n\
    end", "  return 0 if string.empty? || substring.empty?\n  counter = 0\n  0.upto(string.length\
    \ - substring.length) do |index|\n    counter += 1 if string[index, substring.length]\
    \ == substring\n  end\n  counter\nend", "  count = 0\n  string.length.times do\
    \ |index|\n    count += 1 if string[index, substring.length] == substring\n  end\n\
    \  count\nend", "  count = 0\n  string.each_char.with_index do |char, index|\n\
    \    next unless string[index, substring.length] == substring\n    count += 1\n\
    \  end\n  count\nend", "  # TODO\nend", "  # your code here\nend", '  return 0
    if string.empty?', "  string.scan(/(?=#{substring})/).length\nend", "  if substring\
    \ == ''\n    return 0\n  end\n  count = 0\n  i = 0\n  while i < string.length\n\
    \    if string[i] == substring[0]\n      if string[i..(i + substring.length -\
    \ 1)] == substring\n        count += 1\n      end\n    end\n    i += 1\n  end\n\
    \  return count\nend", "  times = 0\n  for i in 0..string.length\n    if string[i..(i+substring.length-1)]\
    \ == substring\n      times += 1\n    end\n  end\n  times\nend", "\tstring.scan(/#{substring}/).count\n\
    end", "  counter = 0\n  string.length.times do |i|\n    if string[i..substring.length-1]\
    \ == substring\n      counter += 1\n    end\n  end\n  counter\nend", "  return\
    \ 0 if string.nil? || substring.nil?\n  #coding_here\n  string.scan(substring).count\n\
    end", "  string.scan(substring).length\nend", "  # Your code here\nend", "  return\
    \ 0 if string.size == 0\n  loop_times = (string.size - substring.size + 1)\n \
    \ count = 0\n  for i in 0..loop_times\n    count += 1 if string[i, substring.size]\
    \ == substring\n  end\n  count\nend", "  string.scan(/(?=#{substring})/).count\n\
    end", "  if string.length == 0 || substring.length == 0\n    return 0\n  end\n\
    \  count = 0\n  for i in 0..string.length-substring.length\n    if string[i..i+substring.length-1]\
    \ == substring\n      count += 1\n    end\n  end\n  return count\nend", "  string.scan(/#{substring}/).length\n\
    end", "  sum = 0\n  string.size.times do |i|\n    sum += 1 if string[i, substring.size]\
    \ == substring\n  end\n  sum\nend", "  return 0 if substring.length > string.length\n\
    \  if substring.length == 0\n    return string.length + 1\n  end\n  count = 0\n\
    \  string.each_char.with_index do |char, idx|\n    if string[idx, substring.length]\
    \ == substring\n      count += 1\n    end\n  end\n  count\nend", "  string.scan(/(?=#{substring})/).count\n\
    end", "  count = 0\n  index = 0\n  while index <= string.length - substring.length\n\
    \    if string[index..(index + substring.length - 1)] == substring\n      count\
    \ += 1\n      index += substring.length\n    else\n      index += 1\n    end\n\
    \  end\n  count\nend", "  # your code here...\nend", "  return 0 if string.empty?\n\
    \  return string.length if substring.empty?\n  count = 0\n  while string.include?(substring)\n\
    \    count += 1\n    string = string.sub(substring, '')\n  end\n  count\nend",
  "  counter = 0\n  start_index = 0\n  while (starting_index = string.index(substring,\
    \ start_index))\n    counter += 1\n    start_index = starting_index + 1\n  end\n\
    \  counter\nend", "    # You go here\nend", "  if string.length == 0\n    return\
    \ 0\n  end\n  count = 0\n  (0..string.length - substring.length).each do |i|\n\
    \    if string[i, substring.length] == substring\n      count += 1\n    end\n\
    \  end\n  count\nend", "  times = 0\n  counter = 0\n  until counter > string.length\
    \ do\n    if string[counter..counter+substring.length-1] == substring\n      times\
    \ += 1\n    end\n    counter += 1\n  end\n  times\nend", "  i = 0\n  count = 0\n\
    \  while i < string.length\n    if substring == string[i..i+substring.length-1]\n\
    \      count += 1\n    end\n    i += 1\n  end\n  count\nend", "  count = 0\n \
    \ index = 0\n  while index <= string.length - substring.length\n    if string[index..(index\
    \ + substring.length - 1)] == substring\n      count += 1\n      index += substring.length\n\
    \    else\n      index += 1\n    end\n  end\n  count\nend", "  return 0 if substring.length\
    \ > string.length\n  return 1 if substring.length == 1\n  count = 0\n  index =\
    \ 0\n  while index < string.length\n    if string[index..index + substring.length\
    \ - 1] == substring\n      count += 1\n      index += substring.length - 1\n \
    \   end\n    index += 1\n  end\n  count\nend", "  return string.scan(substring).length\n\
    end", "  string.scan(substring).count\nend", "  count = 0\n  string.chars.each_with_index\
    \ do |char, index|\n    if string[index, substring.length] == substring\n    \
    \  count += 1\n    end\n  end\n  count\nend", "  string.scan(substring).length\n\
    end", "  count = 0\n  while string.include?(substring)\n    count += 1\n    string\
    \ = string.sub(substring, '')\n  end\n  count\nend", "  counter = 0\n  string.chars.each_with_index\
    \ do |letter, i|\n    if letter == substring[0]\n      counter += 1 if string[i..i\
    \ + substring.length - 1] == substring\n    end\n  end\n  counter\nend", "  count\
    \ = 0\n  return count if string.empty? || substring.empty?", "  string.scan(substring).count\n\
    end", "  counter = 0\n  string.length.times do |index|\n    if string[index, substring.length]\
    \ == substring\n      counter += 1\n    end\n  end\n  counter\nend", "  times\
    \ = 0\n  while true\n    position = string.index(substring)\n    break if position.nil?\n\
    \    times += 1\n    string = string[position + 1..-1]\n  end\n  times\nend",
  "  count = 0\n  while string.length > 0\n    count += 1 if string.start_with?(substring)\n\
    \    string = string[1..-1]\n  end\n  count\nend", "  return 0 if substring.empty?\n\
    \  string.scan(/(?=#{substring})/).count\nend", "  string.scan(substring).count\n\
    end", "  string.scan(substring).length\nend", "  string.scan(substring).count\n\
    end", "  string.count(substring)\nend", "  string.scan(substring).length\nend",
  "  string.scan(substring).count\nend", "  return 0 if string.empty? || substring.empty?\n\
    \  string.scan(substring).length\nend", "  sum = 0\n  if string.empty?\n    return\
    \ sum\n  end\n  string.downcase!\n  substring.downcase!\n  (0..string.length).each\
    \ do |x|\n    if string[x..x+substring.length-1] == substring\n      sum += 1\n\
    \    end\n  end\n  sum\nend", "\tend_at = string.length - substring.length\n\t\
    count = 0\n\tend_at.times do |i|\n\t\tcount += 1 if string[i..i+substring.length-1]\
    \ == substring\n\tend\n\tcount\nend", "    string.scan(/(?=#{substring})/).count\n\
    end", "  count = 0\n  (0..string.length).each do |i|\n    count += 1 if string[i..-1].start_with?(substring)\n\
    \  end\n  count\nend", "  return 0 if string.length < substring.length\n  return\
    \ 1 if string == substring\n  count = 0\n  string.split('').each_with_index do\
    \ |letter, index|\n    until index + substring.length > string.length\n      count\
    \ += 1 if substring == string[index, substring.length]\n      index += 1\n   \
    \ end\n  end\n  count\nend", "  return 0 if string.empty? || substring.empty?\n\
    \  return 1 if string == substring\n  i = 0\n  count = 0\n  while string.index(substring,\
    \ i)\n    count += 1\n    i = string.index(substring, i) + 1\n  end\n  count\n\
    end", "  count = 0\n  string.scan(substring) { count += 1 }\n  count\nend", " \
    \ counts = 0\n  string.length.times do |i|\n    if string[i, substring.length]\
    \ == substring\n      counts += 1\n    end\n  end\n  counts\nend", "  if substring\
    \ == ''\n    return 0\n  else\n    string.scan(/#{substring}/).length\n  end\n\
    end", "  # code here\nend", "  string.scan(substring).length\nend", "\ttimes =\
    \ 0\n\tindex = 0\n\twhile (index < string.length - substring.length + 1)\n\t\t\
    if string[index..index + substring.length - 1] == substring\n\t\t\ttimes += 1\n\
    \t\tend\n\t\tindex += 1\n\tend\n\ttimes\nend", "  return 0 if string.empty? ||\
    \ substring.empty?\n  string.scan(substring).length\nend", "  times = 0\n  string.scan(substring)\
    \ { times += 1 }\n  times\nend", "  counter = 0\n  i = 0\n  while i < string.length\
    \ do\n    if string[i..i+substring.length-1] == substring\n      counter += 1\n\
    \      i += substring.length - 1\n    end\n    i += 1\n  end\n  counter\nend",
  "  string.scan(substring).length\nend", "  string.scan(substring).length\nend",
  "  i = 0\n  count = 0\n  loop do\n    break if i == string.length - substring.length\n\
    \    if string[i..(i + substring.length - 1)] == substring\n      count += 1\n\
    \      i += substring.length - 1\n    end\n    i += 1\n  end\n  count\nend", " \
    \ string.scan(substring).length\nend", "    return 0 if string.size < substring.size\n\
    \    count = 0\n    sub_index = 0\n    for index in 0..string.size-1\n       \
    \ if string[index] == substring[sub_index]\n            sub_index += 1\n     \
    \       count += 1 if sub_index == substring.size\n            sub_index = 0 if\
    \ sub_index == substring.size\n        else\n            sub_index = 0\n     \
    \   end\n    end\n    count\nend", "  string.scan(/(?=#{substring})/).length\n\
    end", "  i = 0\n  count = 0\n  while i < string.length\n    if string[i..i + substring.length\
    \ - 1] == substring\n      count += 1\n      i += substring.length - 1\n    end\n\
    \    i += 1\n  end\n  count\nend", "  string.scan(substring).count\nend", "  #\
    \ TODO: return the number of times substring is found in string\nend", "  string.scan(/#{substring}/).length\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
