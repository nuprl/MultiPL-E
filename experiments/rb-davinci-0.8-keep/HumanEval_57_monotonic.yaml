name: HumanEval_57_monotonic
language: rb
prompt: "# Return True is list elements are monotonically increasing or decreasing.\n\
  # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
  # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
  \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2,\
  \ 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
  \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
  \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
  \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
  \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
  end\n"
completions: ["  # this is the only line you should be changing\n  return false\n\
    end", "  if l == l.sort or l == l.sort.reverse\n    return true\n  else\n    return\
    \ false\n  end\nend", "  is_inc = true\n  is_dec = true\n  i = 0\n  while (i <\
    \ l.length - 1)\n    if l[i] > l[i + 1]\n      is_inc = false\n    end\n    if\
    \ l[i] < l[i + 1]\n      is_dec = false\n    end\n    i += 1\n  end\n  is_inc\
    \ || is_dec\nend", "  if l.sort == l\n    true\n  elsif l.sort.reverse == l\n\
    \    true\n  else\n    false\n  end\nend", "  if l.sort == l\n    return true\n\
    \  elsif l.sort.reverse == l\n    return true\n  else\n    return false\n  end\n\
    end", "  if l.first > l.last\n    return true if l.sort.reverse == l\n  elsif\
    \ l.first < l.last\n    return true if l.sort == l\n  end\n  false\nend", "  return\
    \ l.all? { |e| e >= l[0] } || l.all? { |e| e <= l[0] }\nend", '  return true if
    l.length <= 1', "  (l.each_cons(2).map { |x, y| x <=> y } << 0).uniq.size <= 1\n\
    end", "  return false if l.empty?\n  return true if l.length < 3\n  sorted = l.sort\n\
    \  return sorted == l || sorted.reverse == l\nend", "  if l.sort == l\n    true\n\
    \  elsif l.sort.reverse == l\n    true\n  else\n    false\n  end\nend", "  n =\
    \ l.size\n  return true if n == 1\n  increasing = (l[1] - l[0] > 0)\n  for i in\
    \ 1...n\n    if (l[i] - l[i-1] > 0 && !increasing) || (l[i] - l[i-1] < 0 && increasing)\n\
    \      return false\n    end\n  end\n  return true\nend", "  increasing = true\n\
    \  decreasing = true\n  (0...l.length-1).each do |i|\n    if l[i] > l[i+1]\n \
    \     increasing = false\n    end\n    if l[i] < l[i+1]\n      decreasing = false\n\
    \    end\n  end\n  increasing || decreasing\nend", "  count = 0\n  (l.length -\
    \ 1).times do |i|\n    if l[i] < l[i + 1]\n      count += 1\n    elsif l[i] >\
    \ l[i + 1]\n      count -= 1\n    end\n  end\n  count >= 0 ? true : false\nend",
  '  return true if l.size <= 1', '  return false if l.length <= 1', "  inc = true\n\
    \  dec = true\n  for i in 0..l.length-2\n    if l[i] <= l[i+1]\n      dec = false\n\
    \    end\n    if l[i] >= l[i+1]\n      inc = false\n    end\n  end\n  if inc or\
    \ dec\n    return true\n  else\n    return false\n  end\nend", "  if l.length\
    \ > 1\n    if l[0] <= l[1]\n      for i in 0..l.length - 2\n        if l[i] >\
    \ l[i + 1]\n          return false\n        end\n      end\n    else\n      for\
    \ i in 0..l.length - 2\n        if l[i] < l[i + 1]\n          return false\n \
    \       end\n      end\n    end\n  end\n  return true\nend", "  # Your code here\n\
    end", "  # Your code here\nend", "    if l.each_cons(2).all? { |a, b| a <= b }\
    \ or l.each_cons(2).all? { |a, b| a >= b }\n        return true\n    else\n  \
    \      return false\n    end\nend", "  return l.each_cons(2).all? { |a, b| a <=\
    \ b } || l.each_cons(2).all? { |a, b| a >= b }\nend", "  # Fill in here.\nend",
  "  if l == l.sort || l == l.sort.reverse\n    return true\n  else\n    return false\n\
    \  end\nend", "  return true if l.length <= 1\n  if l[0] <= l[1]\n    for i in\
    \ 0..l.length-2\n      return false if l[i] > l[i+1]\n    end\n  else\n    for\
    \ i in 0..l.length-2\n      return false if l[i] < l[i+1]\n    end\n  end\n  return\
    \ true\nend", "\ta = l.sort\n\tif a == l || a.reverse == l\n\t\treturn true\n\t\
    else\n\t\treturn false\n\tend\nend", "  decreasing = l[0] > l[1]\n  increasing\
    \ = l[0] < l[1]\n  (1...l.length).each do |i|\n    if (l[i] - l[i-1] < 0) && increasing\n\
    \      return false\n    elsif (l[i] - l[i-1] > 0) && decreasing\n      return\
    \ false\n    end\n  end\n  true\nend", "  return false if l[0] == l[1]\n  if l[0]\
    \ < l[1]\n    (1...l.length).each do |i|\n      return false if l[i] < l[i-1]\n\
    \    end\n  else\n    (1...l.length).each do |i|\n      return false if l[i] >\
    \ l[i-1]\n    end\n  end\n  true\nend", "  mono_inc = true\n  mono_dec = true\n\
    \  for i in 0..l.length-2\n    if l[i] > l[i+1]\n      mono_inc = false\n    end\n\
    \    if l[i] < l[i+1]\n      mono_dec = false\n    end\n  end\n  return mono_inc\
    \ || mono_dec\nend", "  a = l.map.with_index { |item, index| l[index] <=> l[index\
    \ + 1] }.delete_if { |num| num == nil }\n  if a.min == -1 && a.max == -1\n   \
    \ return true\n  elsif a.min == 1 && a.max == 1\n    return true\n  else\n   \
    \ return false\n  end\nend", "  sorted = l.sort\n  l == sorted || l == sorted.reverse\n\
    end", "    if l.sort == l\n        return true\n    elsif l.sort.reverse == l\n\
    \        return true\n    else\n        return false\n    end\nend", "  if (l[0]\
    \ - l[1]) < 0 \n    for x in 0..l.length-2\n      return false if (l[x] - l[x+1])\
    \ < 0\n    end\n  else\n    for x in 0..l.length-2\n      return false if (l[x]\
    \ - l[x+1]) > 0\n    end\n  end\n  return true\nend", end, "  increasing = l[0]\
    \ <= l[1]\n  decreasing = l[0] >= l[1]\n  i = 1\n  while i < l.length\n    if\
    \ increasing\n      return false if l[i-1] > l[i]\n    elsif decreasing\n    \
    \  return false if l[i-1] < l[i]\n    end\n    i += 1\n  end\n  true\nend", " \
    \ return true if l.size <= 1\n  if l[0] > l[1]\n    return l.each_cons(2).all?\
    \ { |a, b| b <= a }\n  else\n    return l.each_cons(2).all? { |a, b| b >= a }\n\
    \  end\nend", "\traise ArgumentError if l.empty?\n\tless_than = l[0] <= l[1]\n\
    \ti = 1\n\twhile i < l.length\n\t\tif less_than\n\t\t\treturn false if l[i] <\
    \ l[i - 1]\n\t\telse\n\t\t\treturn false if l[i] > l[i - 1]\n\t\tend\n\t\ti +=\
    \ 1\n\tend\n\ttrue\nend", "  l == l.sort || l == l.sort.reverse\nend", "  if l.size\
    \ < 3\n    return true\n  end\n  increasing = l[0] < l[1] ? true : false\n  for\
    \ i in 0..l.size-1\n    if i == l.size-1\n      return true\n    end\n    if increasing\n\
    \      if l[i] > l[i+1]\n        return false\n      end\n    else\n      if l[i]\
    \ < l[i+1]\n        return false\n      end\n    end\n  end\nend", "  return l.reduce(0)\
    \ { |acc, val| return false if val == acc; val } <= l.last\nend", "  return true\
    \ if l.size <= 1\n  if l[0] > l[1]\n    -1\n  else\n    1\n  end\n  (1...l.size).each\
    \ do |idx|\n    if (l[idx] - l[idx - 1]) * monotonic(l) < 0\n      return false\n\
    \    end\n  end\n  true\nend", end, "  is_increasing = (l[0] <= l[1])\n  for i\
    \ in 1...l.length\n    if is_increasing\n      if l[i] < l[i-1]\n        return\
    \ false\n      end\n    else\n      if l[i] > l[i-1]\n        return false\n \
    \     end\n    end\n  end\n  return true\nend", "  a = l.sort\n  b = l.sort.reverse\n\
    \  puts \"Sorted List #{a}\"\n  puts \"Sorted List in reverse #{b}\"\n  if a ==\
    \ l || b == l\n    puts true\n  else\n    puts false\n  end\nend", "\t# This is\
    \ the algorithm\n\t# If the list is empty, return False.\n\t# If the list has\
    \ only one element, return True.\n\t# Check if the list is sorted and either in\
    \ strictly increasing or strictly decreasing order.\n\t# If both checks above\
    \ failed, return False.\n\t# Write your code here\nend", "  return false if l.empty?\n\
    \  is_increasing = l[0] <= l[1]\n  (1...l.length - 1).each do |i|\n    if is_increasing\n\
    \      return false if l[i] > l[i + 1]\n    else\n      return false if l[i] <\
    \ l[i + 1]\n    end\n  end\n  true\nend", "\nend", "    if l.sort == l || l.sort.reverse\
    \ == l\n        return true\n    else\n        return false\n    end\nend", " \
    \ l == l.sort || l == l.sort.reverse\nend", "  l.sort == l || l.sort.reverse ==\
    \ l\nend", "\treturn false if l.length < 2\n\tmode = l[0] <=> l[1]\n\tl.each_with_index\
    \ do |el, i|\n\t\treturn false if i != l.length - 1 && el <=> l[i + 1] != mode\n\
    \tend\n\ttrue\nend", "    incr = true\n    decr = true\n    (0...l.length-1).each\
    \ do |i|\n        if l[i] < l[i+1]\n            decr = false\n        end\n  \
    \      if l[i] > l[i+1]\n            incr = false\n        end\n    end\n    incr\
    \ || decr\nend", "  # if l == []\n  #   true\n  # elsif l[0] < l[1]\n  #   l.each_with_index\
    \ do |x, i|\n  #     next if i == l.length - 1\n  #     return false if x > l[i\
    \ + 1]\n  #   end\n  #   true\n  # else\n  #   l.each_with_index do |x, i|\n \
    \ #     next if i == l.length - 1\n  #     return false if x < l[i + 1]\n  # \
    \  end\n  #   true\n  # end\n  # WOW THIS WAY USING ALL IS CLEANER\n  # (l ==\
    \ [] || l.all? { |x| x <= l[0] }) || l.all? { |x| x >= l[0] }\n  # ALSO I DIDN'T\
    \ EVEN NEED LENGTH - 1, JUST \n  # next if i == l.length - 1 can just be next\
    \ if i == l.length\n  # ALSO INSTEAD OF RETURN YOU CAN JUST PUT A TRUE OR FALSE\n\
    \  # ALSO BETTER TO USE EACH INSTEAD OF EACH_WITH_INDEX I GUESS?\n  # l == []\
    \ || l.each.all? { |x, i| l[i] <= l[i + 1] }\n  # STILL NOT AS CLEAN AS THE SOLUTION\n\
    \  # l == [] || l.each.all? { |x, i| l[i] <= l[i + 1] }\n  # we only need to check\
    \ two values in the list\n  # we only need to check one value in the list\n  #\
    \ l.each_cons(2).all? { |x, y| x <= y }\n  # the above only works for increasing\n\
    \  # we need to compare the first element to the first element and then the second\
    \ element to the second element\n  # l.each_cons(2).all? { |x, y| x <= y } ||\
    \ l.each_cons(2).all? { |x, y| x >= y }\n  # we don't need each_cons(2), we can\
    \ compare a single element to it's next and have it's previous be", "  raise NotImplementedError,\
    \ \"TODO: monotonic\"\nend", "  if l == l.sort\n    true\n  elsif l == l.sort.reverse\n\
    \    true\n  else\n    false\n  end\nend", "    return false if l == []\n    direction\
    \ = nil\n    l.each_with_index do |num, idx|\n        next if idx == 0\n     \
    \   if num > l[idx - 1]\n            if direction == \"up\"\n                next\n\
    \            elsif direction == \"down\"\n                return false\n     \
    \       else\n                direction = \"up\"\n            end\n        elsif\
    \ num < l[idx - 1]\n            if direction == \"down\"\n                next\n\
    \            elsif direction == \"up\"\n                return false\n       \
    \     else\n                direction = \"down\"\n            end\n        end\n\
    \    end\n    true\nend", "  return (l == l.sort) || (l == l.sort.reverse)\nend",
  "  increasing = l.map.with_index { |x, i| (x - l[i + 1]).abs <= 1 }\n  decreasing\
    \ = l.map.with_index { |x, i| (x - l[i + 1]).abs >= 1 }\n  if increasing.include?(false)\
    \ && decreasing.include?(false)\n    false\n  else\n    true\n  end\nend", " \
    \ l.sort == l || l.sort.reverse == l\nend", "  if l.sort == l\n    return true\n\
    \  elsif l.sort.reverse == l\n    return true\n  else\n    return false\n  end\n\
    end", "  return l.sort == l || l.sort.reverse == l\nend", "    return false if\
    \ l.length <= 1\n    return true if l.length == 2\n    return (l[0] < l[1] &&\
    \ monotonic(l[1..-1])) || (l[0] > l[1] && monotonic(l[1..-1]))\nend", "  if l.sort\
    \ == l\n    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n\
    \    return false\n  end\nend", "  if l == l.sort\n    return true\n  else\n \
    \   return false\n  end\nend\nputs monotonic([4, 1, 0, -10])", "  return l.length\
    \ <= 1 || l.sort == l || l.sort.reverse == l\nend", "  # Start by checking the\
    \ first 2 elements and determining if they are increasing or decreasing\n  if\
    \ l[0] < l[1]\n    # The first 2 elements are increasing so loop through the list\
    \ and check whether\n    # the following elements are decreasing.\n    for i in\
    \ 1..l.length-1\n      if l[i] < l[i-1]\n        return false\n      end\n   \
    \ end\n  else\n    # The first 2 elements are decreasing so loop through the list\
    \ and check whether\n    # the following elements are increasing.\n    for i in\
    \ 1..l.length-1\n      if l[i] > l[i-1]\n        return false\n      end\n   \
    \ end\n  end\n  return true\nend", "  # if the list is empty or only 1 element\
    \ long then it's monotonic so return true\n  if l.size <= 1\n    return true\n\
    \  end\n  # create an iterator\n  # compare the first item with the next\n  #\
    \ if they are equal then it's not monotonic and return false\n  # if they are\
    \ not equal and they are increasing then set previous to true and move onto the\
    \ next element and compare\n  # if they are not equal and they are decreasing\
    \ then set previous to false and move onto the next element and compare\n  # if\
    \ they are not equal and they are increasing and the previous value was false\
    \ then it's not monotonic and return false\n  # if they are not equal and they\
    \ are decreasing and the previous value was true then it's not monotonic and return\
    \ false\n  previous = nil\n  (0..l.size-2).each do |x|\n    if l[x] == l[x+1]\n\
    \      return false\n    elsif l[x] < l[x+1]\n      if previous == false\n   \
    \     return false\n      end\n      previous = true\n    elsif l[x] > l[x+1]\n\
    \      if previous == true\n        return false\n      end\n      previous =\
    \ false\n    end\n  end\n  return true\nend", "  # CODE HERE\nend", "  if l.first\
    \ < l.last\n    (0...l.length-1).each do |i|\n      return false if l[i] > l[i+1]\n\
    \    end\n  else\n    (0...l.length-1).each do |i|\n      return false if l[i]\
    \ < l[i+1]\n    end\n  end\n  true\nend", "  # return (l.sort == l) || (l.sort.reverse\
    \ == l)\n  return false if l.uniq.size == 1\n  return true if l.sort == l || l.sort.reverse\
    \ == l\n  false\nend", "  l.sort == l || l.sort.reverse == l\nend", "  l.each_with_index.all?\
    \ { |num, idx| idx == 0 || l[idx - 1] <= num } ||\n    l.each_with_index.all?\
    \ { |num, idx| idx == 0 || l[idx - 1] >= num }\nend", "  # YOUR CODE HERE\nend",
  "  #\n  # YOUR CODE HERE\n  #\nend", "  if l.length <= 2\n    return true\n  end\n\
    \  i = 0\n  j = i + 1\n  while j < l.length\n    diff = l[i] - l[j]\n    if diff\
    \ > 0\n      while j < l.length\n        if l[j-1] - l[j] < 0\n          return\
    \ false\n        end\n        j += 1\n      end\n    elsif diff < 0\n      while\
    \ j < l.length\n        if l[j-1] - l[j] > 0\n          return false\n       \
    \ end\n        j += 1\n      end\n    else\n      j += 1\n    end\n  end\n  return\
    \ true\nend", "  if l == l.sort || l == l.sort.reverse\n    puts \"True\"\n  else\n\
    \    puts \"False\"\n  end\nend", "\nend", "    if (l.length < 2)\n        return\
    \ true\n    end\n    for i in 1..l.length-1\n        if (l[i] - l[i-1] > 0)\n\
    \            # check if decreasing\n            if (l[i-1] - l[i-2] > 0)\n   \
    \             return false\n            end\n        elsif (l[i] - l[i-1] < 0)\n\
    \            # check if increasing\n            if (l[i-1] - l[i-2] < 0)\n   \
    \             return false\n            end\n        end\n    end\n    return\
    \ true\nend", "    i = 0\n    while i < l.length - 1\n        if l[i] > l[i +\
    \ 1]\n            while i < l.length - 1\n                if l[i] < l[i + 1]\n\
    \                    return false\n                end\n                i += 1\n\
    \            end\n        elsif l[i] < l[i + 1]\n            while i < l.length\
    \ - 1\n                if l[i] > l[i + 1]\n                    return false\n\
    \                end\n                i += 1\n            end\n        end\n \
    \       i += 1\n    end\n    return true\nend", "\nend", "    is_increasing =\
    \ nil\n    l.each_with_index do |num, idx|\n        next if idx == 0\n       \
    \ if num > l[idx - 1]\n            is_increasing = true if is_increasing == nil\n\
    \            if is_increasing == false\n                return false\n       \
    \     end\n        elsif num < l[idx - 1]\n            is_increasing = false if\
    \ is_increasing == nil\n            if is_increasing == true\n               \
    \ return false\n            end\n        end\n    end\n    true\nend", '  return
    l[0] <= l[1] if l.length <= 2', '  return true if l.size == 1', "  l.max == l[0]\
    \ || l.min == l[0]\nend", "  return l.sort == l || l.sort.reverse == l\nend",
  "  if l == l.sort || l == l.sort.reverse\n    true\n  else\n    false\n  end\nend",
  "\tflag = 0\n\tfor i in 0..l.length - 2\n\t\tif l[i] > l[i + 1]\n\t\t\tflag += 1\n\
    \t\telsif l[i] < l[i + 1]\n\t\t\tflag -= 1\n\t\tend\n\tend\n\tif flag == l.length\
    \ - 1 || flag == 1 - l.length\n\t\treturn true\n\telse\n\t\treturn false\n\tend\n\
    end", "    l.each_with_index do |num,i|\n        if l[i+1] == nil\n          \
    \  return true\n        end\n        if l[i] < l[i+1]\n            next\n    \
    \    elsif l[i] > l[i+1]\n            return false\n        end\n    end\nend",
  "  # check if all elements in the list are equal\n  if l.uniq.length == 1\n    return\
    \ true\n  end\n  # check if list elements are monotonically increasing \n  if\
    \ l == l.sort\n    return true\n  # check if list elements are monotonically decreasing\n\
    \  elsif l == l.sort.reverse\n    return true\n  end\n  return false\nend", "\t\
    if(l[0] < l[1])\n\t\tfor i in 0..l.length-2\n\t\t\tif(l[i] > l[i+1])\n\t\t\t\t\
    return false\n\t\t\tend\n\t\tend\n\t\treturn true\n\telsif(l[0] > l[1])\n\t\t\
    for i in 0..l.length-2\n\t\t\tif(l[i] < l[i+1])\n\t\t\t\treturn false\n\t\t\t\
    end\n\t\tend\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend", "  (0...l.length\
    \ - 1).each do |i|\n    if l[i] > l[i + 1]\n      increasing = false\n      break\n\
    \    end\n  end\n  return true if increasing", "    increasing = true\n    decreasing\
    \ = true\n    l.each_with_index do |x,i|\n        increasing = increasing && (i==0\
    \ || l[i-1] <= x)\n        decreasing = decreasing && (i==0 || l[i-1] >= x)\n\
    \    end\n    return increasing || decreasing\nend", "  return true if l.length\
    \ <= 1\n  return l[0] < l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1])\nend",
  "    return l.sort == l || l.sort.reverse == l\nend", "  return true if l.length\
    \ == 1\n  (0...l.length-1).each do |i|\n    return false if l[i] < l[i+1]\n  end\n\
    \  true\nend", "  return true if l.size == 1\n  increasing = (l[0] < l[1])\n \
    \ increasing ? l.each_cons(2).all? { |x, y| x < y } : l.each_cons(2).all? { |x,\
    \ y| x > y }\nend", "  if l == l.sort\n    return true\n  elsif l == l.sort.reverse\n\
    \    return true\n  else\n    return false\n  end\nend", '  return true if l.length
    <= 1', "\tif l.length == 1\n\t\treturn true\n\tend\n\tcurrent_diff = l[1] - l[0]\n\
    \tmonotonic = true\n\tprev_diff = current_diff\n\ti = 1\n\twhile i < l.length\n\
    \t\tcurrent_diff = l[i] - l[i-1]\n\t\tif prev_diff.abs != current_diff.abs\n\t\
    \t\tmonotonic = false\n\t\t\tbreak\n\t\tend\n\t\tprev_diff = current_diff\n\t\t\
    i += 1\n\tend\n\treturn monotonic\nend", end, "  if l == l.sort\n    return true\n\
    \  elsif l == l.sort.reverse\n    return true\n  else\n    return false\n  end\n\
    end", "  # return true if monotonically increasing\n  # return true if monotonically\
    \ decreasing\n  # otherwise return false\n  # l.sort == l\n  # l.sort.reverse\
    \ == l\n  if l.sort == l\n    return true\n  elsif l.sort.reverse == l\n    return\
    \ true\n  else\n    return false\n  end\nend", "    inc = l.sort\n    dec = l.sort.reverse\n\
    \    return true if l == inc || l == dec\n    false\nend", "  return false if\
    \ l.empty?\n  is_increasing = l[0] <= l[1]\n  (1...l.length).each do |i|\n   \
    \ if is_increasing\n      return false if l[i - 1] > l[i]\n    else\n      return\
    \ false if l[i - 1] < l[i]\n    end\n  end\n  true\nend", "  return true if l.size\
    \ <= 1\n  sign = l[1] - l[0]\n  for i in 1...l.size\n    return false if (l[i]\
    \ - l[i-1]) * sign < 0\n  end\n  true\nend", "  return true if l.size == 1\n \
    \ last = l[0]\n  increasing = nil\n  l.each do |x|\n    if x > last && increasing\
    \ == false\n      return false\n    elsif x < last && increasing == true\n   \
    \   return false\n    elsif x > last\n      increasing = true\n    elsif x < last\n\
    \      increasing = false\n    end\n    last = x\n  end\n  true\nend", "  if l\
    \ == l.sort\n    return true\n  elsif l == l.sort.reverse\n    return true\n \
    \ else\n    return false\n  end\nend", "  n = l.length\n  if n == 1\n    return\
    \ true\n  elsif n > 1\n    for i in 1..n-1\n      case l[i] <=> l[i-1]\n     \
    \ when 1\n        return false if !ascending(l, i)\n      when -1\n        return\
    \ false if !descending(l, i)\n      when 0\n        next\n      end\n    end\n\
    \  end\n  return true\nend", "  if l.sort == l || l.sort.reverse == l\n    return\
    \ true\n  else\n    return false\n  end\nend", "  l.each_with_index do |el, i|\n\
    \    if i == 0\n      next\n    end\n    return false if (l[i - 1] > el) && (l[i\
    \ - 1] - el < 0)\n    return false if (l[i - 1] < el) && (l[i - 1] - el > 0)\n\
    \  end\n  true\nend", "\nend", "  if l == l.sort\n    return true\n  elsif l ==\
    \ l.sort.reverse\n    return true\n  else\n    return false\n  end\nend", "  max_num\
    \ = 0\n  l.each do |num|\n    if num < max_num\n      return false\n    end\n\
    \    max_num = num\n  end\n  return true\nend", "  return true if l.length ==\
    \ 1\n  (0...l.length-1).each do |i|\n    return false if l[i] < l[i+1] && l[i+1]\
    \ > l[i+2]\n    return false if l[i] > l[i+1] && l[i+1] < l[i+2]\n  end\n  true\n\
    end", "  if (l.sort == l) || (l.sort.reverse == l)\n    return true\n  else\n\
    \    return false\n  end\nend", "  return l.size < 2 if l.size < 2\n  positive\
    \ = nil\n  l.each_with_index do |el, i|\n    next if i == 0\n    if positive ==\
    \ nil\n      positive = el > l[i - 1]\n    else\n      return false if (el - l[i\
    \ - 1]).positive? != positive\n    end\n  end\n  true\nend", "  return true if\
    \ l.size <= 1\n  return l[0] < l[1] ? increasing(l) : decreasing(l)\nend", " \
    \ (l[0] <= l[1] && l[1] <= l[2]) || (l[0] >= l[1] && l[1] >= l[2])\nend", "  i\
    \ = 0\n  direction = 1\n  while (i < l.length - 1) do\n    if (l[i] - l[i + 1]\
    \ > 0)\n      if (direction == -1)\n        return false\n      end\n      direction\
    \ = -1\n    elsif (l[i] - l[i + 1] < 0)\n      if (direction == 1)\n        return\
    \ false\n      end\n      direction = 1\n    end\n    i += 1\n  end\n  return\
    \ true\nend", "  # check for empty list\n  return true if l.length == 0", "\t\
    if l[0] < l[1]\n\t\tfor i in 0..l.length-2\n\t\t\tif l[i] > l[i+1]\n\t\t\t\treturn\
    \ false\n\t\t\tend\n\t\tend\n\telsif l[0] > l[1]\n\t\tfor i in 0..l.length-2\n\
    \t\t\tif l[i] < l[i+1]\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ true\nend", "  return true if l.size <= 1\n  (1...l.size).each do |n|\n    if\
    \ l[n] > l[n-1]\n      (1...l.size).each do |n|\n        return false if l[n]\
    \ < l[n-1]\n      end\n    else\n      (1...l.size).each do |n|\n        return\
    \ false if l[n] > l[n-1]\n      end\n    end\n  end\n  true\nend", "  i = 1\n\
    \  while i < l.length\n    if l[i] > l[i-1]\n      return false unless l[i..-1].all?\
    \ { |el| el >= l[i] }\n    elsif l[i] < l[i-1]\n      return false unless l[i..-1].all?\
    \ { |el| el <= l[i] }\n    end\n    i += 1\n  end\n  true\nend", end, "  # l[0]\
    \ <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  # l[0] >= l[1] && l[1] >= l[2] &&\
    \ l[2] >= l[3]\n  # l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] ||\n  # l[0]\
    \ >= l[1] && l[1] >= l[2] && l[2] >= l[3]\n  # l[0] <= l[1] && l[1] <= l[2] &&\
    \ l[2] <= l[3] ||\n  # (l[0] >= l[1] && l[1] >= l[2] && l[2] >= l[3])\n  # l[0]\
    \ <= l[1] && l[1] <= l[2] && l[2] <= l[3] ||\n  # l[0] >= l[1] && l[1] >= l[2]\
    \ && l[2] >= l[3]\n  l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] ||\n  l[0] >=\
    \ l[1] && l[1] >= l[2] && l[2] >= l[3]\nend", "  l == l.sort || l == l.sort.reverse\n\
    end", "  return true if l.length <= 1\n  if (l[0] < l[1])\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] > l[i-1]\n    end\n  end\n  true\nend", " \
    \   return false if l.length <= 1\n    if l[0] < l[1]\n        return false if\
    \ l.any? { |num| num >= l[0] }\n    else\n        return false if l.any? { |num|\
    \ num <= l[0] }\n    end\n    true\nend", "  if l.size <= 1\n    return true\n\
    \  end\n  p = l[0]\n  inc = true\n  inc = false if p > l[1]\n  (1...l.size).each\
    \ do |i|\n    if inc\n      if l[i] < p\n        return false\n      end\n   \
    \ else\n      if l[i] > p\n        return false\n      end\n    end\n    p = l[i]\n\
    \  end\n  return true\nend", "  i = 0\n  while i < l.length - 1\n    if (l[i]\
    \ < l[i + 1])\n      monotonic = true\n    elsif (l[i] > l[i + 1])\n      monotonic\
    \ = false\n    end\n    i += 1\n  end\n  return monotonic\nend", "    return true\
    \ if l.length == 1\n    if l[0] > l[1]\n        l.each_with_index do |element,\
    \ index|\n            if index != 0\n                return false if element >\
    \ l[index - 1]\n            end\n        end\n    else\n        l.each_with_index\
    \ do |element, index|\n            if index != 0\n                return false\
    \ if element < l[index - 1]\n            end\n        end\n    end\n    return\
    \ true\nend", "\t# TODO: your code here\n\tn = 0\n\twhile n < l.length\n\t\tif\
    \ l[n] > l[n+1]\n\t\t\tx = true\n\t\telse\n\t\t\tx = false\n\t\tend\n\tend\n\t\
    n = 0\n\twhile n < l.length\n\t\tif l[n] < l[n+1]\n\t\t\ty = true\n\t\telse\n\t\
    \t\ty = false\n\t\tend\n\tend\n\tif x == true && y == true\n\t\tfalse\n\telse\n\
    \t\ttrue\n\tend\nend", "    return false if l.length <= 1\n    if l[0] <= l[1]\n\
    \        i = 1\n        while i < l.length\n            return false if l[i] <\
    \ l[i-1]\n            i += 1\n        end\n    else\n        i = 1\n        while\
    \ i < l.length\n            return false if l[i] > l[i-1]\n            i += 1\n\
    \        end\n    end\n    true\nend", "  return false if l.nil?\n  return true\
    \ if l.size == 1\n  rising = true\n  falling = true\n  for i in 0..l.size-2\n\
    \    rising = false if l[i] > l[i+1]\n    falling = false if l[i] < l[i+1]\n \
    \ end\n  return rising || falling\nend", end, "    l.each_with_index do |n, i|\n\
    \        if i > 0\n            if n < l[i-1]\n                return false if\
    \ l[i-1] - n < 0\n            elsif n > l[i-1]\n                return false if\
    \ n - l[i-1] < 0\n            end\n        end\n    end\n    true\nend", "  is_increasing\
    \ = true\n  is_decreasing = true\n  (0...l.length - 1).each do |i|\n    if l[i]\
    \ > l[i + 1]\n      is_increasing = false\n    end\n    if l[i] < l[i + 1]\n \
    \     is_decreasing = false\n    end\n  end\n  is_increasing || is_decreasing\n\
    end", end, "\treturn l.sort.reverse == l || l.sort == l\nend", "  if l.sort ==\
    \ l\n    return true\n  elsif l.sort == l.reverse\n    return true\n  else\n \
    \   return false\n  end\nend", "\tif l.length == 1\n\t\ttrue\n\telse\n\t\tif l[0]\
    \ <= l[1]\n\t\t\tmonotonic(l[1..-1])\n\t\telse\n\t\t\tmonotonic(l[1..-1])\n\t\t\
    end\n\tend\nend", '    return true if l.length <= 1', "  ## START CODE HERE\n\
    \    if l[0] < l[1]\n      (1...l.length).each do |i|\n        if l[i] < l[i-1]\n\
    \          return false\n        end\n      end\n    elsif l[0] > l[1]\n     \
    \ (1...l.length).each do |i|\n        if l[i] > l[i-1]\n          return false\n\
    \        end\n      end\n    end\n    return true\n  ## END CODE HERE\nend", " \
    \ return false if l.empty?\n  return true if l.size == 1\n  (0...l.size-1).each\
    \ do |i|\n    return false if l[i] < l[i+1] && l[i+1] < l[i+2]\n    return false\
    \ if l[i] > l[i+1] && l[i+1] > l[i+2]\n  end\n  true\nend", "  l.each_with_index\
    \ do |e, i|\n    return false if i > 0 && (e - l[i - 1]) > 0\n  end\n  true\n\
    end", "  is_increasing = nil\n  (l.length - 1).times do |i|\n    if is_increasing.nil?\n\
    \      is_increasing = l[i] < l[i + 1]\n    else\n      if is_increasing && l[i]\
    \ > l[i + 1]\n        return false\n      elsif !is_increasing && l[i] < l[i +\
    \ 1]\n        return false\n      end\n    end\n  end\n  true\nend", "  l.each_cons(2).all?\
    \ do |x, y|\n    (x > y) || (x < y)\n  end\nend", "  # TODO: return True if monotonic,\
    \ otherwise False\n  l.each_cons(2).all? { |x, y| x <= y } || l.each_cons(2).all?\
    \ { |x, y| x >= y }\nend", "\tif l[0] < l[1]\n\t\treturn true if l.each_cons(2).all?\
    \ {|a, b| a <= b}\n\telse\n\t\treturn true if l.each_cons(2).all? {|a, b| a >=\
    \ b}\n\tend\n\treturn false\nend", "  return false if l.length <= 1\n  positive_bool\
    \ = (l[0] < l[1])\n  dec_bool = (l[0] > l[1])\n  i = 1\n  while i < l.length -\
    \ 1\n    if positive_bool && l[i] > l[i + 1]\n      return false\n    elsif dec_bool\
    \ && l[i] < l[i + 1]\n      return false\n    end\n    i += 1\n  end\n  true\n\
    end", "    # For each element, check that it is greater than or equal to its successor\n\
    \    # If not, return false\n    # If all tests pass, return true\n    l.each_with_index\
    \ do |_, i|\n        if i == l.length - 1\n            break\n        end\n  \
    \      if l[i] > l[i + 1]\n            return false\n        end\n    end\n  \
    \  return true\nend", "  if (l.sort == l) || (l.sort.reverse == l)\n    return\
    \ true\n  else\n    return false\n  end\nend", "  increasing = (l[0] <=> l[1])\n\
    \  l.each_cons(2) do |a, b|\n    case a <=> b\n    when 1\n      return false\
    \ if increasing == -1\n    when -1\n      return false if increasing == 1\n  \
    \  when 0\n      return false if increasing == 0\n    end\n  end\n  true\nend",
  "  return false if l.sort != l && l.sort.reverse != l\n  true\nend", "  if l.sort\
    \ == l || l.sort.reverse == l\n    true\n  else\n    false\n  end\nend", end,
  "\ti = 1\n\tm = l[0] <=> l[1]\n\twhile i < l.length\n\t\tif (l[i-1] <=> l[i]) !=\
    \ m\n\t\t\treturn false\n\t\tend\n\t\ti += 1\n\tend\n\treturn true\nend", "  return\
    \ true if l.length <= 1\n  if l[0] > l[1]\n    dec = true\n  else\n    dec = false\n\
    \  end\n  (1...l.length).each do |i|\n    if dec\n      return false if l[i-1]\
    \ < l[i]\n    else\n      return false if l[i-1] > l[i]\n    end\n  end\n  true\n\
    end", "\tincreasing = true\n\tdecreasing = true\n\tfor i in 0..l.length-2\n\t\t\
    if l[i] < l[i+1]\n\t\t\tdecreasing = false\n\t\telsif l[i] > l[i+1]\n\t\t\tincreasing\
    \ = false\n\t\tend\n\tend\n\treturn increasing || decreasing\nend", "  return\
    \ false if l.length < 2\n  bool = true\n  if l[0] > l[1]\n    l.each_with_index\
    \ do |el, i|\n      bool = false if l[i + 1] > el\n    end\n  else\n    l.each_with_index\
    \ do |el, i|\n      bool = false if l[i + 1] < el\n    end\n  end\n  bool\nend",
  "    inc = true;\n    dec = true;\n    for i in 0..l.length - 2\n        inc = false\
    \ if l[i] > l[i + 1]\n        dec = false if l[i] < l[i + 1]\n    end\n    inc\
    \ || dec\nend", "  l.each_cons(2).all? do |x, y|\n    if x > y\n      x > y\n\
    \    else\n      x < y\n    end\n  end\nend", "    if l.each_cons(2).all? { |a,\
    \ b| a <= b } or l.each_cons(2).all? { |a, b| a >= b }\n        return true\n\
    \    else\n        return false\n    end\nend", "  # TODO: Complete me!\nend",
  "\treturn false if l.max == l.min\n\tl == l.sort || l == l.sort.reverse\nend", " \
    \ up = down = true\n  l.each_cons(2) do |a, b|\n    up = false if a > b\n    down\
    \ = false if a < b\n  end\n  up || down\nend", "  return true if l.size <= 1\n\
    \  l.zip(l.drop(1)).each do |(a, b)|\n    if a < b\n      if a < b\n        return\
    \ false if a > b\n      else\n        return false if a < b\n      end\n    end\n\
    \  end\n  true\nend", "  increasing = true\n  decreasing = true\n  (0...l.length-1).each\
    \ do |i|\n    if l[i] > l[i+1]\n      increasing = false\n    end\n    if l[i]\
    \ < l[i+1]\n      decreasing = false\n    end\n  end\n  increasing || decreasing\n\
    end", "  (0...l.length-1).each do |i|\n    if l[i] > l[i+1]\n      (i+1...l.length-1).each\
    \ do |j|\n        return false if l[j] < l[j+1]\n      end\n      return true\n\
    \    elsif l[i] < l[i+1]\n      (i+1...l.length-1).each do |j|\n        return\
    \ false if l[j] > l[j+1]\n      end\n      return true\n    end\n  end\n  true\n\
    end", "\treturn true if l.length == 1\n\tinc = true\n\tdec = true\n\t0.upto(l.length\
    \ - 2) do |x|\n\t\tinc = false if l[x] > l[x + 1]\n\t\tdec = false if l[x] < l[x\
    \ + 1]\n\tend\n\tinc or dec\nend", "  #last = l.last\n  #l.reverse.each do |i|\n\
    \  #  return false if i > last\n  #  last = i\n  #end\n  #true\n  l.sort == l\
    \ || l.sort.reverse == l\nend", "  # your code here\nend", '  return true if l.length
    == 1', "  # check this\n  # if l.each_cons(2).all? { |a, b| a <= b }\n  #   true\n\
    \  # else\n  #   false\n  # end\n  l.each_cons(2).all? { |a, b| a <= b } || l.each_cons(2).all?\
    \ { |a, b| a >= b }\nend", "  i = 0\n  while i < l.length - 1\n    if l[i] < l[i\
    \ + 1]\n      i += 1\n    elsif l[i] > l[i + 1]\n      i += 1\n    else\n    \
    \  return false\n    end\n  end\n  return true\nend", "  # Make sure input is\
    \ valid.\n  if !(l.is_a? Array) || l.empty?\n    puts \"Error: Input must be a\
    \ non-empty array.\"\n    return false\n  end", "  return true if l.size <= 1\n\
    \  dir = l[1] - l[0]\n  dir < 0 ? l.each_cons(2).all? { |i, j| i > j } : l.each_cons(2).all?\
    \ { |i, j| i < j }\nend", "  i = 0\n  while i < l.length - 1\n    return false\
    \ if (l[i] < l[i + 1]) && (l[i + 1] < l[i + 2]) || (l[i] > l[i + 1]) && (l[i +\
    \ 1] > l[i + 2])\n    i += 1\n  end\n  true\nend", "  l.each_cons(2).all? { |x,\
    \ y| x <= y } || l.each_cons(2).all? { |x, y| x >= y }\nend", "  if l == l.sort.reverse\n\
    \    return true\n  else\n    return false\n  end\nend", "  return true if l.sort\
    \ == l || l.sort.reverse == l\n  false\nend", "  if l.sort == l || l.sort.reverse\
    \ == l\n    return true\n  else\n    return false\n  end\nend", "  is_increasing\
    \ = true\n  is_decreasing = true\n  for i in 0..l.length-2\n    is_increasing\
    \ = false if l[i] > l[i+1]\n    is_decreasing = false if l[i] < l[i+1]\n  end\n\
    \  return is_increasing || is_decreasing\nend", "  if l.sort == l\n    return\
    \ true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return false\n\
    \  end\nend", "  # your code goes here\nend", "  is_increasing = true\n  is_decreasing\
    \ = true\n  (l.length - 1).times do |i|\n    if l[i] < l[i + 1]\n      is_decreasing\
    \ = false\n    elsif l[i] > l[i + 1]\n      is_increasing = false\n    end\n \
    \ end\n  is_increasing || is_decreasing\nend", "  if l.each_cons(2).all? { |a,\
    \ b| a <= b }\n    puts true\n  elsif l.each_cons(2).all? { |a, b| a >= b }\n\
    \    puts true\n  else\n    puts false\n  end\nend", "  if l == l.sort || l ==\
    \ l.sort.reverse\n    return true\n  else\n    return false\n  end\nend", "  if\
    \ l.each_cons(2).all? { |a, b| a <= b }\n    return true\n  elsif l.each_cons(2).all?\
    \ { |a, b| a >= b }\n    return true\n  else\n    return false\n  end\nend", " \
    \   if l[0] <= l[-1]\n        l.each_cons(2).all? { |a, b| a <= b }\n    else\n\
    \        l.each_cons(2).all? { |a, b| a >= b }\n    end\nend", "  # your code\
    \ here\nend", "    if l.length == 0 || l.length == 1\n        return true\n  \
    \  end\n    return (l.each_cons(2).all? {|a, b| a <= b} || l.each_cons(2).all?\
    \ {|a, b| a >= b})\nend", "    # \u65B9\u6CD5\u4E00\n    # if l.sort == l\n  \
    \  #     return true\n    # elsif l.sort.reverse == l\n    #     return true\n\
    \    # else\n    #     return false\n    # end", "  l.each_cons(2).all? { |a,\
    \ b| a <= b } || l.each_cons(2).all? { |a, b| a >= b }\nend", "  if l == l.sort\
    \ || l == l.sort.reverse\n    return true\n  else\n    return false\n  end\nend",
  "  sign = l[1] > l[0] ? 1 : -1\n  l.each_cons(2).all? { |a, b| (b - a) * sign >=\
    \ 0 }\nend", "  if l.sort == l\n    return true\n  elsif l.sort.reverse == l\n\
    \    return true\n  else\n    return false\n  end\nend", "  i = 0\n  while i <\
    \ l.length - 1\n    if l[i] >= l[i + 1]\n      i += 1\n    else\n      break\n\
    \    end\n  end\n  if i == l.length - 1\n    return true\n  end\n  i = 0\n  while\
    \ i < l.length - 1\n    if l[i] <= l[i + 1]\n      i += 1\n    else\n      break\n\
    \    end\n  end\n  if i == l.length - 1\n    return true\n  end\n  return false\n\
    end", "  increasing = (l[0] <=> l[1]) == -1\n  decreasing = (l[0] <=> l[1]) ==\
    \ 1\n  for i in 1...l.length\n    if (l[i] <=> l[i - 1]) == -1\n      return false\
    \ if increasing\n    elsif (l[i] <=> l[i - 1]) == 1\n      return false if decreasing\n\
    \    end\n  end\n  true\nend", "  if l.size < 2\n    return true\n  end\n  (l.size\
    \ - 1).times do |i|\n    if (l[i + 1] - l[i]).abs != (l[1] - l[0]).abs\n     \
    \ return false\n    end\n  end\n  return true\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
