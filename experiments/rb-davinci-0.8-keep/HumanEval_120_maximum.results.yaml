language: rb
name: HumanEval_120_maximum
results:
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  n = arr.size\n  quick_select(arr, 0, n - 1, n - k)\n  arr[n - k, k]\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfpo6_9x9\nStarted\nE\n===============================================================================\n\
    Error: test_maximum(TestHumanEval):\n  NoMethodError: undefined method `quick_select'\
    \ for #<TestHumanEval:0x00002b282ec301f0 @method_name=\"test_maximum\", @internal_data=#<Test::Unit::TestCase::InternalData:0x00002b282ec30150\
    \ @start_time=2022-08-06 18:15:57.598627526 -0400, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x00002b282ed5ebd0\
    \ @assertion_count=0, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x00002b282ed56778\
    \ @test_name=\"test_maximum(TestHumanEval)\", @exception=#<NoMethodError: undefined\
    \ method `quick_select' for #<TestHumanEval:0x00002b282ec301f0 ...>\n  \n    quick_select(arr,\
    \ 0, n - 1, n - k)\n    ^^^^^^^^^^^^>, @method_name=\"test_maximum\">], @stop_tag=#<Object:0x00002b282ed5e6f8>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x00002b282ed56778 @test_name=\"\
    test_maximum(TestHumanEval)\", @exception=#<NoMethodError: undefined method `quick_select'\
    \ for #<TestHumanEval:0x00002b282ec301f0 ...>\n  \n    quick_select(arr, 0, n\
    \ - 1, n - k)\n    ^^^^^^^^^^^^>, @method_name=\"test_maximum\">], @pendings=[],\
    \ @omissions=[], @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"\
    =>{#<Test::Unit::Util::ProcWrapper:0x00002b282ed5e4f0 @a_proc=#<Proc:0x00002b282ed5e518\
    \ /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=47451584455960>=>#<Proc:0x00002b282ed5e518 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x00002b282ed5dfc8\
    \ @a_proc=#<Proc:0x00002b282ed5e018 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3."
  timestamp: 1659824157
- exit_code: 0
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.last(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0c4ygwpx

    Started

    .

    Finished in 0.000476835 seconds.

    -------------------------------------------------------------------------------

    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2097.16 tests/s, 23068.78 assertions/s

    '
  stdout: ''
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return if arr.nil? || arr.length == 0 || k <= 0 || k > arr.length\n  # Find\
    \ the kth largest element in arr, which is the (len - k)th smallest element\n\
    \  # in arr. Since the expected time complexity is O(N) and space complexity is\
    \ \n  # O(1), quick select is used to solve this problem.\n  findKth(arr, 0, arr.length\
    \ - 1, arr.length - k)\n  arr[0, k]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpizzpqd0p\nStarted\nE\n===============================================================================\n\
    Error: test_maximum(TestHumanEval):\n  NoMethodError: undefined method `findKth'\
    \ for #<TestHumanEval:0x00002ad441ea7c30 @method_name=\"test_maximum\", @internal_data=#<Test::Unit::TestCase::InternalData:0x00002ad441ea7c08\
    \ @start_time=2022-08-06 18:15:57.604579145 -0400, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x00002ad441fdabc0\
    \ @assertion_count=0, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x00002ad441fd2790\
    \ @test_name=\"test_maximum(TestHumanEval)\", @exception=#<NoMethodError: undefined\
    \ method `findKth' for #<TestHumanEval:0x00002ad441ea7c30 ...>\n  \n    findKth(arr,\
    \ 0, arr.length - 1, arr.length - k)\n    ^^^^^^^>, @method_name=\"test_maximum\"\
    >], @stop_tag=#<Object:0x00002ad441fda6e8>, @failures=[], @errors=[#<Test::Unit::Error:0x00002ad441fd2790\
    \ @test_name=\"test_maximum(TestHumanEval)\", @exception=#<NoMethodError: undefined\
    \ method `findKth' for #<TestHumanEval:0x00002ad441ea7c30 ...>\n  \n    findKth(arr,\
    \ 0, arr.length - 1, arr.length - k)\n    ^^^^^^^>, @method_name=\"test_maximum\"\
    >], @pendings=[], @omissions=[], @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"\
    =>{#<Test::Unit::Util::ProcWrapper:0x00002ad441fda4e0 @a_proc=#<Proc:0x00002ad441fda508\
    \ /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=47091128575240>=>#<Proc:0x00002ad441fda508 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x00002ad441fd9fe0\
    \ @a_proc=#<Proc:0x00002ad441fda008 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  # create a priority queue and take k largest elements\n  pq = PriorityQueue.new(arr)\n\
    \  arr = []\n  k.times do\n    arr << pq.pop\n  end\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxdzoflaf\nStarted\nE\n===============================================================================\n\
    Error: test_maximum(TestHumanEval):\n  NameError: uninitialized constant PriorityQueue\n\
    \  \n    pq = PriorityQueue.new(arr)\n         ^^^^^^^^^^^^^\n/tmp/tmpxdzoflaf.rb:18:in\
    \ `maximum'\n/tmp/tmpxdzoflaf.rb:29:in `call'\n/tmp/tmpxdzoflaf.rb:29:in `test_maximum'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_maximum\n\
    \     28:     candidate = method(:maximum)\n  => 29:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     30:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     31:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     32:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n===============================================================================\n\
    \nFinished in 0.008476883 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.97 tests/s, 0.00 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\t\
    return arr if arr.size <= k\n\tqueue = arr[0..k-1]\n\tqueue.sort!\n\t(k..arr.size-1).each\
    \ do |i|\n\t\tj = 0\n\t\twhile j < k\n\t\t\tif arr[i] > queue[j]\n\t\t\t\tqueue.insert(j,\
    \ arr[i])\n\t\t\t\tqueue.pop\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tj += 1\n\t\tend\n\
    \tend\n\tqueue\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4qyz45l0\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp4qyz45l0.rb:37:in `test_maximum'\n\
    \     34: class TestHumanEval < Test::Unit::TestCase\n     35:   def test_maximum\n\
    \     36:     candidate = method(:maximum)\n  => 37:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     38:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     39:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     40:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.007704221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.80 tests/s, 129.80 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return [] if arr.nil? || arr.empty? || k < 1 || k > arr.size\n  hash = Hash.new(0)\n\
    \  arr.each { |e| hash[e] += 1 }\n  ans = []\n  hash.keys.sort.reverse.each do\
    \ |num|\n    num_count = hash[num]\n    if num_count > k\n      k.times { ans\
    \ << num }\n      return ans\n    else\n      num_count.times { ans << num }\n\
    \      k -= num_count\n    end\n  end\n  ans\nend\narr1 = [-3, -4, 5]\nk1 = 3\n\
    arr2 = [4, -4, 4]\nk2 = 2\narr3 = [-3, 2, 1, 2, -1, -2, 1]\nk3 = 1\nputs \"max\
    \ arr = #{arr1}, k = #{k1} is #{maximum(arr1, k1)}\"\nputs \"max arr = #{arr2},\
    \ k = #{k2} is #{maximum(arr2, k2)}\"\nputs \"max arr = #{arr3}, k = #{k3} is\
    \ #{maximum(arr3, k3)}\"\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "max arr = [-3, -4, 5], k = 3 is [5, -3, -4]\nmax arr = [4, -4, 4], k =\
    \ 2 is [4, 4]\nmax arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 is [2]\nLoaded suite\
    \ /tmp/tmpubrarxrh\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpubrarxrh.rb:46:in `test_maximum'\n\
    \     43: class TestHumanEval < Test::Unit::TestCase\n     44:   def test_maximum\n\
    \     45:     candidate = method(:maximum)\n  => 46:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     47:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     48:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     49:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.008245834 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    121.27 tests/s, 121.27 assertions/s\n"
  timestamp: 1659824157
- exit_code: 0
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.slice(-k, k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5hb9gseq

    Started

    .

    Finished in 0.000478742 seconds.

    -------------------------------------------------------------------------------

    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2088.81 tests/s, 22976.89 assertions/s

    '
  stdout: ''
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  maxes = []\n  k.times do\n    max_value = arr.max\n    maxes << max_value\n\
    \    arr.delete(max_value)\n  end\n  maxes\nend\narr = [-3, -4, 5]\nk = 3\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpwnqq_646\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpwnqq_646.rb:31:in `test_maximum'\n\
    \     28: class TestHumanEval < Test::Unit::TestCase\n     29:   def test_maximum\n\
    \     30:     candidate = method(:maximum)\n  => 31:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     32:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     33:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     34:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.007875475 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    126.98 tests/s, 126.98 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort! { |a, b| b <=> a }\n  arr[0...k]\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5lcvum_h\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp5lcvum_h.rb:24:in `test_maximum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_maximum\n\
    \     23:     candidate = method(:maximum)\n  => 24:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     25:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     26:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     27:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.007461517 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    134.02 tests/s, 134.02 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\t\
    # ToDo:\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy35fxg1m\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpy35fxg1m.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00674055 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.36 tests/s, 148.36 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpryre_6pa\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpryre_6pa.rb:22:in `test_maximum'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_maximum\n\
    \     21:     candidate = method(:maximum)\n  => 22:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     23:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     24:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     25:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006861077 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.75 tests/s, 145.75 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  heap = BinaryMinHeap.new { |x, y| y <=> x }\n  arr.each do |ele|\n    heap.push(ele)\n\
    \    heap.extract if heap.count > k\n  end\n  heap.store\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp2p931np5\nStarted\nE\n===============================================================================\n\
    Error: test_maximum(TestHumanEval):\n  NameError: uninitialized constant BinaryMinHeap\n\
    \  \n    heap = BinaryMinHeap.new { |x, y| y <=> x }\n           ^^^^^^^^^^^^^\n\
    /tmp/tmp2p931np5.rb:17:in `maximum'\n/tmp/tmp2p931np5.rb:28:in `call'\n/tmp/tmp2p931np5.rb:28:in\
    \ `test_maximum'\n     25: class TestHumanEval < Test::Unit::TestCase\n     26:\
    \   def test_maximum\n     27:     candidate = method(:maximum)\n  => 28:    \
    \ assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     29:     assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n     30:     assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n     31:     assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n===============================================================================\n\
    \nFinished in 0.008915537 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    112.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.min(k).sort.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpr5wuon7j\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpr5wuon7j.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.011857372 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    84.34 tests/s, 84.34 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort![-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnjaar6qb\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpnjaar6qb.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.007732821 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.32 tests/s, 1422.51 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  start = 0\n  arr[0...k].each_with_index do |item, index|\n    if item > arr[start]\n\
    \      start = index\n    end\n  end\n  arr[start..-1].each do |item|\n    if\
    \ item > arr[start]\n      arr[start] = item\n      start = 0\n      arr[0...k].each_with_index\
    \ do |item, index|\n        if item > arr[start]\n          start = index\n  \
    \      end\n      end\n    end\n  end\n  arr[0...k]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp49yro8vm\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp49yro8vm.rb:40:in `test_maximum'\n\
    \     37: class TestHumanEval < Test::Unit::TestCase\n     38:   def test_maximum\n\
    \     39:     candidate = method(:maximum)\n  => 40:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     41:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     42:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     43:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.007364817 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.78 tests/s, 135.78 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr if arr.size <= k\n  i = 0\n  while i < k\n    j = i + 1\n    while\
    \ j < arr.size\n      if arr[i] < arr[j]\n        arr[i], arr[j] = arr[j], arr[i]\n\
    \      end\n      j += 1\n    end\n    i += 1\n  end\n  arr[0..k-1]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpsqxumtat\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpsqxumtat.rb:35:in `test_maximum'\n\
    \     32: class TestHumanEval < Test::Unit::TestCase\n     33:   def test_maximum\n\
    \     34:     candidate = method(:maximum)\n  => 35:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     36:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     37:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     38:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.007588352 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.78 tests/s, 131.78 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.max(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp6d7ckrw0\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp6d7ckrw0.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.007813637 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.98 tests/s, 127.98 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpryre_6pa\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpryre_6pa.rb:22:in `test_maximum'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_maximum\n\
    \     21:     candidate = method(:maximum)\n  => 22:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     23:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     24:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     25:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006861077 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.75 tests/s, 145.75 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  # arr.sort[-k..-1]\n  arr.sort[-k..-1].reverse\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpp6xd9rn9\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpp6xd9rn9.rb:24:in `test_maximum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_maximum\n\
    \     23:     candidate = method(:maximum)\n  => 24:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     25:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     26:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     27:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.007633497 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.00 tests/s, 131.00 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  if arr.length == k\n    return arr.sort\n  end\n  if arr.length == 1\n    return\
    \ arr\n  end\n  if arr.length == 2\n    if arr[0] > arr[1]\n      arr[0], arr[1]\
    \ = arr[1], arr[0]\n    end\n    return arr[0..k - 1]\n  end\n  pivot = arr[arr.length\
    \ / 2]\n  left = []\n  right = []\n  for i in 0...arr.length\n    if arr[i] <\
    \ pivot\n      left.push(arr[i])\n    else\n      right.push(arr[i])\n    end\n\
    \  end\n  if left.length >= k\n    return maximum(left, k)\n  elsif left.length\
    \ == k - 1\n    return left.push(pivot).sort\n  else\n    right = maximum(right,\
    \ k - left.length - 1)\n    return left.push(pivot).push(right).flatten.sort\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpk8el2zx_\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpk8el2zx_.rb:53:in `test_maximum'\n\
    \     50:   def test_maximum\n     51:     candidate = method(:maximum)\n    \
    \ 52:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  => 53:\
    \     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     54:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     55:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     56:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, -4]>\n\ndiff:\n? [-4, -4]\n===============================================================================\n\
    \nFinished in 0.006959612 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.69 tests/s, 287.37 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  heap = Heap.new\n  length = arr.length\n  i = 0\n  while i < length\n    heap.push(arr[i])\n\
    \    if heap.size > k\n      heap.pop\n    end\n    i += 1\n  end\n  res = []\n\
    \  while heap.size > 0\n    res.push(heap.pop)\n  end\n  res.reverse\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpa_p_9ued\nStarted\nE\n===============================================================================\n\
    Error: test_maximum(TestHumanEval):\n  NameError: uninitialized constant Heap\n\
    \  \n    heap = Heap.new\n           ^^^^\n/tmp/tmpa_p_9ued.rb:17:in `maximum'\n\
    /tmp/tmpa_p_9ued.rb:37:in `call'\n/tmp/tmpa_p_9ued.rb:37:in `test_maximum'\n \
    \    34: class TestHumanEval < Test::Unit::TestCase\n     35:   def test_maximum\n\
    \     36:     candidate = method(:maximum)\n  => 37:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     38:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     39:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     40:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n===============================================================================\n\
    \nFinished in 0.004706484 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.47 tests/s, 0.00 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  # Loop invariant: Maximum k elements with highest absolute value are in heap.\n\
    \  max_heap = Heap.new(arr.length) { |a, b| a.abs < b.abs }\n  arr.each do |num|\n\
    \    if max_heap.size < k\n      max_heap.add(num)\n    else\n      if num.abs\
    \ > max_heap.peek.abs\n        max_heap.poll\n        max_heap.add(num)\n    \
    \  end\n    end\n  end\n  max_heap.to_a.reverse\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmps7kmnais\nStarted\nE\n===============================================================================\n\
    Error: test_maximum(TestHumanEval):\n  NameError: uninitialized constant Heap\n\
    \  \n    max_heap = Heap.new(arr.length) { |a, b| a.abs < b.abs }\n          \
    \     ^^^^\n/tmp/tmps7kmnais.rb:18:in `maximum'\n/tmp/tmps7kmnais.rb:35:in `call'\n\
    /tmp/tmps7kmnais.rb:35:in `test_maximum'\n     32: class TestHumanEval < Test::Unit::TestCase\n\
    \     33:   def test_maximum\n     34:     candidate = method(:maximum)\n  =>\
    \ 35:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n     36:\
    \     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     37:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     38:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n===============================================================================\n\
    \nFinished in 0.004491001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.67 tests/s, 0.00 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmplctr5z6c\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmplctr5z6c.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.007835472 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.62 tests/s, 127.62 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1pz57u6a\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp1pz57u6a.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.007841627 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.52 tests/s, 1402.77 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpryre_6pa\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpryre_6pa.rb:22:in `test_maximum'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_maximum\n\
    \     21:     candidate = method(:maximum)\n  => 22:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     23:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     24:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     25:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006861077 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.75 tests/s, 145.75 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  # write your code here\n  # my function\n  return [] if arr.length == 0\n \
    \ arr = arr.sort_by(&:abs).reverse\n  arr.first(k)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7yn6s7_a\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp7yn6s7_a.rb:27:in `test_maximum'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_maximum\n\
    \     26:     candidate = method(:maximum)\n  => 27:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     28:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     29:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     30:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -4, -3]>\n\ndiff:\n\
    ? [5, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.007378872 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.52 tests/s, 135.52 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1pz57u6a\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp1pz57u6a.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.007841627 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.52 tests/s, 1402.77 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr if arr.length <= k\n  partition(arr, 0, arr.length - 1, k)\n  arr[0...k]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1fpr03ea\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp1fpr03ea.rb:25:in `test_maximum'\n\
    \     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_maximum\n\
    \     24:     candidate = method(:maximum)\n  => 25:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.007401906 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.10 tests/s, 135.10 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\t\
    res = []\n\treturn res if arr.empty? || k == 0\n\tarr.each do |num|\n\t\tres.push(num)\
    \ if res.size < k\n\t\tres.push(num)\n\t\tres.shift while res.size > k\n\tend\n\
    \tres\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpo7l416ye\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpo7l416ye.rb:30:in `test_maximum'\n\
    \     27: class TestHumanEval < Test::Unit::TestCase\n     28:   def test_maximum\n\
    \     29:     candidate = method(:maximum)\n  => 30:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     31:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     32:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     33:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-4, -4, 5]>\n\ndiff:\n\
    ? [-4, -3, 5]\n?       4    \n?       ?    \n===============================================================================\n\
    \nFinished in 0.00754849 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.48 tests/s, 132.48 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  i = arr.size - 1\n  j = i - 1\n  while k > 0\n    while j >= 0 && arr[j] <\
    \ arr[i]\n      j -= 1\n    end\n    if j < 0 || arr[j] >= arr[i]\n      arr[j\
    \ + 1], arr[i] = arr[i], arr[j + 1]\n      i -= 1\n      j = i - 1\n      k -=\
    \ 1\n    end\n  end\n  arr[0...k]\nend\narr1 = [-3, -4, 5]\nk1 = 3\narr2 = [4,\
    \ -4, 4]\nk2 = 2\narr3 = [-3, 2, 1, 2, -1, -2, 1]\nk3 = 1\nputs maximum(arr1,\
    \ k1)\nputs maximum(arr2, k2)\nputs maximum(arr3, k3)\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgq2k5ed5\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpgq2k5ed5.rb:45:in `test_maximum'\n\
    \     42: class TestHumanEval < Test::Unit::TestCase\n     43:   def test_maximum\n\
    \     44:     candidate = method(:maximum)\n  => 45:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     46:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     47:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     48:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[]>\n\ndiff:\n? [-4,\
    \ -3, 5]\n===============================================================================\n\
    \nFinished in 0.007300447 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.98 tests/s, 136.98 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.sort!.reverse[0..k-1]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnap01bmt\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpnap01bmt.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.007363225 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.81 tests/s, 135.81 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    # \u5FEB\u901F\u9009\u62E9\u7B97\u6CD5\n    # \u5047\u8BBE\u4ECE\u4E0B\u6807\
    0\u5230\u4E0B\u6807i-1\u662F\u5C0F\u4E8E\u7B49\u4E8Ex\u7684\u5143\u7D20\uFF0C\u4E0B\
    \u6807i\u5230\u4E0B\u6807N-1\u662F\u5927\u4E8Ex\u7684\u5143\u7D20\uFF0C\u5219\
    \ i\u5C31\u662Fx\u5728\u6570\u7EC4\u4E2D\u7684rank\n    def quick_select(arr,\
    \ l, r, x)\n        l, r = l - 1, r + 1\n        while true\n            l +=\
    \ 1\n            while arr[l] > x\n                l += 1\n            end\n \
    \           r -= 1\n            while arr[r] < x\n                r -= 1\n   \
    \         end\n            if l >= r\n                return l\n            end\n\
    \            arr[l], arr[r] = arr[r], arr[l]\n        end\n    end\n    rank =\
    \ quick_select(arr, 0, arr.size - 1, arr[0])\n    while rank != k - 1\n      \
    \  if rank > k - 1\n            rank = quick_select(arr, 0, rank - 1, arr[rank\
    \ - 1])\n        else\n            rank = quick_select(arr, rank + 1, arr.size\
    \ - 1, arr[rank + 1])\n        end\n    end\n    arr[0...k]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpntrbn1ap\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpntrbn1ap.rb:50:in `test_maximum'\n\
    \     47: class TestHumanEval < Test::Unit::TestCase\n     48:   def test_maximum\n\
    \     49:     candidate = method(:maximum)\n  => 50:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     51:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     52:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     53:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -4, -3]>\n\ndiff:\n\
    ? [5, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.007487473 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.56 tests/s, 133.56 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp0fnkpd8q\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp0fnkpd8q.rb:34:in `test_maximum'\n\
    \     31:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     32:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     33:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 34:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     35:   end\n     36: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.007427264 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    134.64 tests/s, 1481.03 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpyzy3luyi\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpyzy3luyi.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.007603394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.52 tests/s, 1446.72 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    n = arr.size\n    if k > n\n        return nil\n    end\n    num = arr[0..k-1]\n\
    \    num.sort!\n    i = k\n    while i < n\n        j = 0\n        while j < k\n\
    \            if arr[i] > num[j]\n                num.insert(j, arr[i])\n     \
    \           num.pop\n                break\n            end\n            j +=\
    \ 1\n        end\n        i += 1\n    end\n    return num\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpwvkpo7gn\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpwvkpo7gn.rb:43:in `test_maximum'\n\
    \     40:   def test_maximum\n     41:     candidate = method(:maximum)\n    \
    \ 42:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  => 43:\
    \     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     44:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     45:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     46:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[4, -4]>\n\ndiff:\n? [4, -4]\n===============================================================================\n\
    \nFinished in 0.007420068 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    134.77 tests/s, 269.54 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return [] if arr.empty? || k == 0\n  arr.sort! { |a, b| b <=> a }\n  arr[0...k]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpm86wj22e\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpm86wj22e.rb:25:in `test_maximum'\n\
    \     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_maximum\n\
    \     24:     candidate = method(:maximum)\n  => 25:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.007199897 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    138.89 tests/s, 138.89 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  left, right = 0, arr.size - 1\n  while left <= right\n    j = partition(arr,\
    \ left, right)\n    return arr[0...k] if j == k - 1\n    if j < k - 1\n      left\
    \ = j + 1\n    else\n      right = j - 1\n    end\n  end\n  arr[0...k]\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpzk6j425o\nStarted\nE\n===============================================================================\n\
    Error: test_maximum(TestHumanEval):\n  NoMethodError: undefined method `partition'\
    \ for #<TestHumanEval:0x00002b99c2823bb0 @method_name=\"test_maximum\", @internal_data=#<Test::Unit::TestCase::InternalData:0x00002b99c2823b88\
    \ @start_time=2022-08-06 18:15:57.898490696 -0400, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x00002b99c2956be0\
    \ @assertion_count=0, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x00002b99c294e6e8\
    \ @test_name=\"test_maximum(TestHumanEval)\", @exception=#<NoMethodError: undefined\
    \ method `partition' for #<TestHumanEval:0x00002b99c2823bb0 ...>\n  \n      j\
    \ = partition(arr, left, right)\n          ^^^^^^^^^>, @method_name=\"test_maximum\"\
    >], @stop_tag=#<Object:0x00002b99c2956708>, @failures=[], @errors=[#<Test::Unit::Error:0x00002b99c294e6e8\
    \ @test_name=\"test_maximum(TestHumanEval)\", @exception=#<NoMethodError: undefined\
    \ method `partition' for #<TestHumanEval:0x00002b99c2823bb0 ...>\n  \n      j\
    \ = partition(arr, left, right)\n          ^^^^^^^^^>, @method_name=\"test_maximum\"\
    >], @pendings=[], @omissions=[], @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"\
    =>{#<Test::Unit::Util::ProcWrapper:0x00002b99c2956500 @a_proc=#<Proc:0x00002b99c2956528\
    \ /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=47939394561320>=>#<Proc:0x00002b99c2956528 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x00002b99c2955fd8\
    \ @a_proc=#<Proc:0x00002b99c2956028 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/l"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.sort!.reverse[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpycplvtmo\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpycplvtmo.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.007301018 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.97 tests/s, 136.97 assertions/s\n"
  timestamp: 1659824157
- exit_code: 0
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  top = arr.sort.last(k)\n  return top\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0cbegz_7

    Started

    .

    Finished in 0.000484216 seconds.

    -------------------------------------------------------------------------------

    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2065.19 tests/s, 22717.13 assertions/s

    '
  stdout: ''
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpyzy3luyi\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpyzy3luyi.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.007603394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.52 tests/s, 1446.72 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1pz57u6a\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp1pz57u6a.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.007841627 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.52 tests/s, 1402.77 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    heap = Heap.new\n    arr.each do |n|\n        heap.push(n)\n        heap.pop\
    \ if heap.size > k\n    end\n    heap.to_a.reverse\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpo_yf7rx4\nStarted\nE\n===============================================================================\n\
    Error: test_maximum(TestHumanEval):\n  NameError: uninitialized constant Heap\n\
    \  \n      heap = Heap.new\n             ^^^^\n/tmp/tmpo_yf7rx4.rb:17:in `maximum'\n\
    /tmp/tmpo_yf7rx4.rb:28:in `call'\n/tmp/tmpo_yf7rx4.rb:28:in `test_maximum'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_maximum\n\
    \     27:     candidate = method(:maximum)\n  => 28:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     29:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     30:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     31:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n===============================================================================\n\
    \nFinished in 0.004118893 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    242.78 tests/s, 0.00 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  max = nil\n  max_i = 0\n  (0...arr.length).each do |i|\n    if max.nil? ||\
    \ max < arr[i]\n      max = arr[i]\n      max_i = i\n    end\n  end\n  [max, max_i]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp9ht7ajot\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp9ht7ajot.rb:31:in `test_maximum'\n\
    \     28: class TestHumanEval < Test::Unit::TestCase\n     29:   def test_maximum\n\
    \     30:     candidate = method(:maximum)\n  => 31:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     32:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     33:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     34:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, 2]>\n\ndiff:\n?\
    \ [-4, -3, 5]\n?  5   2     \n?  ??   ?????     \n===============================================================================\n\
    \nFinished in 0.007644085 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    130.82 tests/s, 130.82 assertions/s\n"
  timestamp: 1659824157
- exit_code: 0
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[arr.length - k..-1]\nend\nputs maximum([-3, -4, 5], 3)\nputs maximum([4,\
    \ -4, 4], 2)\nputs maximum([-3, 2, 1, 2, -1, -2, 1], 1)\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: OK
  stderr: '-4

    -3

    5

    4

    4

    2

    Loaded suite /tmp/tmpt024y6oe

    Started

    .

    Finished in 0.00050343 seconds.

    -------------------------------------------------------------------------------

    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1986.37 tests/s, 21850.11 assertions/s

    '
  stdout: ''
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  puts \"arr: #{arr}, k: #{k}\"\n  ans = []\n  for i in 0...arr.length do\n \
    \   while !ans.empty? && ans.length + arr.length - i > k && arr[i] > ans.last\
    \ do\n      ans.pop\n    end\n    ans.push(arr[i]) if ans.length < k\n  end\n\
    \  ans\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy59ktxv4\nStarted\narr: [-3, -4, 5], k: 3\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpy59ktxv4.rb:31:in `test_maximum'\n\
    \     28: class TestHumanEval < Test::Unit::TestCase\n     29:   def test_maximum\n\
    \     30:     candidate = method(:maximum)\n  => 31:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     32:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     33:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     34:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.007798024 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    128.24 tests/s, 128.24 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    return [] if arr.nil? || arr.empty? || k <= 0 || k > arr.size\n    res =\
    \ arr[0...k]\n    res.sort!\n    res = res[k-1]\n    (k...arr.size).each do |i|\n\
    \        if arr[i] > res\n            res = arr[i]\n            ind = i\n    \
    \        (ind - 1).downto(0) do |j|\n                break if res >= arr[j]\n\
    \                arr[j+1] = arr[j]\n                arr[j] = res\n           \
    \ end\n        end\n    end\n    arr[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpml41vxq0\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpml41vxq0.rb:38:in `test_maximum'\n\
    \     35: class TestHumanEval < Test::Unit::TestCase\n     36:   def test_maximum\n\
    \     37:     candidate = method(:maximum)\n  => 38:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     39:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     40:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     41:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.007805633 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    128.11 tests/s, 128.11 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    heap = BinaryHeap.new\n    res = []\n    arr.each do |num|\n        heap.push(num)\n\
    \        if heap.size > k\n            heap.extract\n        end\n    end\n  \
    \  while heap.size > 0\n        res.unshift(heap.extract)\n    end\n    res\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpufrqu_s4\nStarted\nE\n===============================================================================\n\
    Error: test_maximum(TestHumanEval):\n  NameError: uninitialized constant BinaryHeap\n\
    \  \n      heap = BinaryHeap.new\n             ^^^^^^^^^^\n/tmp/tmpufrqu_s4.rb:17:in\
    \ `maximum'\n/tmp/tmpufrqu_s4.rb:34:in `call'\n/tmp/tmpufrqu_s4.rb:34:in `test_maximum'\n\
    \     31: class TestHumanEval < Test::Unit::TestCase\n     32:   def test_maximum\n\
    \     33:     candidate = method(:maximum)\n  => 34:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     35:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     36:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     37:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n===============================================================================\n\
    \nFinished in 0.007764021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    128.80 tests/s, 0.00 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  heap = MinHeap.new\n  arr.each do |e|\n    heap.push(e)\n    heap.pop if heap.size\
    \ > k\n  end\n  heap.values.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpofkk45qa\nStarted\nE\n===============================================================================\n\
    Error: test_maximum(TestHumanEval):\n  NameError: uninitialized constant MinHeap\n\
    \  \n    heap = MinHeap.new\n           ^^^^^^^\n/tmp/tmpofkk45qa.rb:17:in `maximum'\n\
    /tmp/tmpofkk45qa.rb:28:in `call'\n/tmp/tmpofkk45qa.rb:28:in `test_maximum'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_maximum\n\
    \     27:     candidate = method(:maximum)\n  => 28:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     29:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     30:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     31:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n===============================================================================\n\
    \nFinished in 0.006093941 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    164.10 tests/s, 0.00 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  max = arr.max\n  max_arr = [max]\n  arr.delete(max)\n  k -= 1\n  while k >\
    \ 0\n    curr_max = arr.max\n    if curr_max > max\n      max = curr_max\n   \
    \   max_arr.unshift(max)\n    else\n      max_arr.push(curr_max)\n    end\n  \
    \  arr.delete(curr_max)\n    k -= 1\n  end\n  max_arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpaawxq0rw\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpaawxq0rw.rb:38:in `test_maximum'\n\
    \     35: class TestHumanEval < Test::Unit::TestCase\n     36:   def test_maximum\n\
    \     37:     candidate = method(:maximum)\n  => 38:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     39:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     40:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     41:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.007809237 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    128.05 tests/s, 128.05 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.first(k)\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpuhuhzjps\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpuhuhzjps.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.007512942 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.10 tests/s, 133.10 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  s = arr.slice(0, k)\n  s.sort!\n  arr.each do |n|\n    next if n < s[0]\n \
    \   s.unshift(n)\n    s.pop\n  end\n  s\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphft57wpu\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmphft57wpu.rb:30:in `test_maximum'\n\
    \     27: class TestHumanEval < Test::Unit::TestCase\n     28:   def test_maximum\n\
    \     29:     candidate = method(:maximum)\n  => 30:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     31:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     32:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     33:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.00786717 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.11 tests/s, 127.11 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr if arr.length <= k\n  arr.sort[-k..-1]\nend\nputs maximum([-3, -4,\
    \ 5], 3)\nputs maximum([4, -4, 4], 2)\nputs maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "-3\n-4\n5\n4\n4\n2\nLoaded suite /tmp/tmppb8yac1m\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmppb8yac1m.rb:27:in `test_maximum'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_maximum\n\
    \     26:     candidate = method(:maximum)\n  => 27:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     28:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     29:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     30:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.008197538 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    121.99 tests/s, 121.99 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    res = []\n    i = 0\n    j = 0\n    while res.size < k do\n        cur_max\
    \ = arr[i]\n        temp = i\n        while i < arr.size do\n            cur_max\
    \ = arr[i] if arr[i] > cur_max\n            i += 1\n        end\n        arr[temp]\
    \ = -10000\n        res << cur_max\n    end\n    res\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpto6r1jbl\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpto6r1jbl.rb:36:in `test_maximum'\n\
    \     33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_maximum\n\
    \     35:     candidate = method(:maximum)\n  => 36:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     37:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     38:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     39:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, nil, -10000]>\n\n\
    diff:\n? [        -4, -3, 5]\n?  5, nil,  10000    \n?  ++++++++ ????????    \n\
    ===============================================================================\n\
    \nFinished in 0.007443328 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    134.35 tests/s, 134.35 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.sort.reverse[0..k-1]\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpyyuqz17v\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpyyuqz17v.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.007379275 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.51 tests/s, 135.51 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr if arr.length <= k\n  queue = []\n  arr.each do |num|\n    if queue.length\
    \ < k\n      queue << num\n    else\n      min = queue.min\n      queue.delete(min)\n\
    \      queue << num if num > min\n    end\n  end\n  queue.sort\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp15i_k94n\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp15i_k94n.rb:34:in `test_maximum'\n\
    \     31: class TestHumanEval < Test::Unit::TestCase\n     32:   def test_maximum\n\
    \     33:     candidate = method(:maximum)\n  => 34:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     35:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     36:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     37:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.008114694 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.23 tests/s, 123.23 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.max(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp6d7ckrw0\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp6d7ckrw0.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.007813637 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.98 tests/s, 127.98 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  res = []\n  for i in 0...arr.length\n    if res.length < k\n      res << arr[i]\n\
    \    else\n      res.sort!\n      if res[0] < arr[i]\n        res.shift\n    \
    \    res << arr[i]\n      end\n    end\n  end\n  res.sort!\n  res\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphtrf3mww\nStarted\nE\n===============================================================================\n\
    Error: test_maximum(TestHumanEval):\n  NoMethodError: undefined method `<' for\
    \ nil:NilClass\n  \n        if res[0] < arr[i]\n                  ^\n/tmp/tmphtrf3mww.rb:23:in\
    \ `block in maximum'\n/tmp/tmphtrf3mww.rb:18:in `each'\n/tmp/tmphtrf3mww.rb:18:in\
    \ `maximum'\n/tmp/tmphtrf3mww.rb:46:in `call'\n/tmp/tmphtrf3mww.rb:46:in `test_maximum'\n\
    \     43:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     44:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     45:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 46:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     47:   end\n     48: end\n===============================================================================\n\
    \nFinished in 0.004127359 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    242.29 tests/s, 2422.86 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\t\
    arr.sort!\n\treturn arr[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphk993oh2\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmphk993oh2.rb:25:in `test_maximum'\n\
    \     22:   def test_maximum\n     23:     candidate = method(:maximum)\n    \
    \ 24:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  => 25:\
    \     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     26:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     27:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     28:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.007288914 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    137.19 tests/s, 274.39 assertions/s\n"
  timestamp: 1659824158
- exit_code: 0
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    return [] if arr.nil? || arr.empty? || k <= 0 || k > arr.size\n    arr.sort!\n\
    \    return arr[-k, k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp6yp75iqb

    Started

    .

    Finished in 0.000506297 seconds.

    -------------------------------------------------------------------------------

    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1975.13 tests/s, 21726.38 assertions/s

    '
  stdout: ''
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!.reverse!\n  return arr[0..k-1]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpti86rk5o\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpti86rk5o.rb:24:in `test_maximum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_maximum\n\
    \     23:     candidate = method(:maximum)\n  => 24:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     25:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     26:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     27:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.007137754 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    140.10 tests/s, 140.10 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1pz57u6a\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp1pz57u6a.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.007841627 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.52 tests/s, 1402.77 assertions/s\n"
  timestamp: 1659824157
- exit_code: 0
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[arr.length - k, k]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpczi1bz58

    Started

    .

    Finished in 0.000467866 seconds.

    -------------------------------------------------------------------------------

    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2137.36 tests/s, 23511.01 assertions/s

    '
  stdout: ''
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    return [] if arr.empty?\n    return arr if k >= arr.size\n    arr.sort!.reverse[0..k-1]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg_n719je\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpg_n719je.rb:25:in `test_maximum'\n\
    \     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_maximum\n\
    \     24:     candidate = method(:maximum)\n  => 25:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.007173729 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.40 tests/s, 139.40 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    l = arr.length\n    idx = 0\n    result = Array.new(k)\n    k.times do\n\
    \        i = idx\n        while i < l\n            x = result[idx]\n         \
    \   if x.nil? || arr[i] > x\n                result[idx] = arr[i]\n          \
    \  end\n            i += 1\n        end\n        idx += 1\n    end\n    result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp6p6xjjzb\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp6p6xjjzb.rb:37:in `test_maximum'\n\
    \     34: class TestHumanEval < Test::Unit::TestCase\n     35:   def test_maximum\n\
    \     36:     candidate = method(:maximum)\n  => 37:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     38:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     39:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     40:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, 5, 5]>\n\ndiff:\n\
    ? [-4, -3, 5]\n?  5   5     \n?  ??   ??     \n===============================================================================\n\
    \nFinished in 0.007595716 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.65 tests/s, 131.65 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1pz57u6a\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp1pz57u6a.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.007841627 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.52 tests/s, 1402.77 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  sort(arr)[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpx5zik3wh\nStarted\nE\n===============================================================================\n\
    Error: test_maximum(TestHumanEval):\n  NoMethodError: undefined method `sort'\
    \ for #<TestHumanEval:0x00002abd1173f9f8 @method_name=\"test_maximum\", @internal_data=#<Test::Unit::TestCase::InternalData:0x00002abd1173ff48\
    \ @start_time=2022-08-06 18:15:58.231867088 -0400, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x00002abd11872b68\
    \ @assertion_count=0, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x00002abd1186a710\
    \ @test_name=\"test_maximum(TestHumanEval)\", @exception=#<NoMethodError: undefined\
    \ method `sort' for #<TestHumanEval:0x00002abd1173f9f8 ...>\n  \n    sort(arr)[0...k]\n\
    \    ^^^^>, @method_name=\"test_maximum\">], @stop_tag=#<Object:0x00002abd11872690>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x00002abd1186a710 @test_name=\"\
    test_maximum(TestHumanEval)\", @exception=#<NoMethodError: undefined method `sort'\
    \ for #<TestHumanEval:0x00002abd1173f9f8 ...>\n  \n    sort(arr)[0...k]\n    ^^^^>,\
    \ @method_name=\"test_maximum\">], @pendings=[], @omissions=[], @notifications=[],\
    \ @channels={\"Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x00002abd11872488\
    \ @a_proc=#<Proc:0x00002abd118724b0 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=46991531254960>=>#<Proc:0x00002abd118724b0 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x00002abd11871f88\
    \ @a_proc=#<Proc:0x00002abd11871fb0 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=46991531253680>=>#<Pro"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    minheap = []\n    arr.each do |ele|\n        heap_insert(minheap, ele)\n\
    \        if minheap.size > k\n            heap_extract_min(minheap)\n        end\n\
    \    end\n    minheap\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpdv7jp5ik\nStarted\nE\n===============================================================================\n\
    Error: test_maximum(TestHumanEval):\n  NoMethodError: undefined method `heap_insert'\
    \ for #<TestHumanEval:0x00002abeb612b6b0 @method_name=\"test_maximum\", @internal_data=#<Test::Unit::TestCase::InternalData:0x00002abeb612b638\
    \ @start_time=2022-08-06 18:15:58.2456782 -0400, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x00002abeb625ea28\
    \ @assertion_count=0, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x00002abeb62564b8\
    \ @test_name=\"test_maximum(TestHumanEval)\", @exception=#<NoMethodError: undefined\
    \ method `heap_insert' for #<TestHumanEval:0x00002abeb612b6b0 ...>\n  \n     \
    \     heap_insert(minheap, ele)\n          ^^^^^^^^^^^>, @method_name=\"test_maximum\"\
    >], @stop_tag=#<Object:0x00002abeb625e550>, @failures=[], @errors=[#<Test::Unit::Error:0x00002abeb62564b8\
    \ @test_name=\"test_maximum(TestHumanEval)\", @exception=#<NoMethodError: undefined\
    \ method `heap_insert' for #<TestHumanEval:0x00002abeb612b6b0 ...>\n  \n     \
    \     heap_insert(minheap, ele)\n          ^^^^^^^^^^^>, @method_name=\"test_maximum\"\
    >], @pendings=[], @omissions=[], @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"\
    =>{#<Test::Unit::Util::ProcWrapper:0x00002abeb625e348 @a_proc=#<Proc:0x00002abeb625e370\
    \ /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=46998588089200>=>#<Proc:0x00002abeb625e370 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x00002abeb625de48\
    \ @a_proc=#<Proc:0x00002abeb625de98 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    return [] if arr.length == 0 || k == 0\n    arr = arr.sort.reverse\n    arr[0...k]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5smrhhii\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp5smrhhii.rb:25:in `test_maximum'\n\
    \     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_maximum\n\
    \     24:     candidate = method(:maximum)\n  => 25:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.007003787 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    142.78 tests/s, 142.78 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.max(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp6d7ckrw0\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp6d7ckrw0.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.007813637 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.98 tests/s, 127.98 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    res = []\n    for i in 0...arr.length\n        while res.length > 0 && res[-1]\
    \ < arr[i] && res.length - i + 1 > k\n            res.pop\n        end\n     \
    \   res.push(arr[i]) if res.length < k\n    end\n    res\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp9cmbe5x4\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp9cmbe5x4.rb:30:in `test_maximum'\n\
    \     27: class TestHumanEval < Test::Unit::TestCase\n     28:   def test_maximum\n\
    \     29:     candidate = method(:maximum)\n  => 30:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     31:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     32:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     33:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.007549719 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.46 tests/s, 132.46 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  q = []\n  arr.each do |num|\n    q.push(num)\n    bubble_up(q, q.size - 1)\n\
    \    if q.size > k\n      q[0] = q[-1]\n      q.pop\n      bubble_down(q, 0)\n\
    \    end\n  end\n  q\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgpzqysjj\nStarted\nE\n===============================================================================\n\
    Error: test_maximum(TestHumanEval):\n  NoMethodError: undefined method `bubble_up'\
    \ for #<TestHumanEval:0x00002ad114cc3228 @method_name=\"test_maximum\", @internal_data=#<Test::Unit::TestCase::InternalData:0x00002ad114cc3200\
    \ @start_time=2022-08-06 18:15:58.276700748 -0400, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x00002ad114df6a50\
    \ @assertion_count=0, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x00002ad114dee4e0\
    \ @test_name=\"test_maximum(TestHumanEval)\", @exception=#<NoMethodError: undefined\
    \ method `bubble_up' for #<TestHumanEval:0x00002ad114cc3228 ...>\n  \n      bubble_up(q,\
    \ q.size - 1)\n      ^^^^^^^^^>, @method_name=\"test_maximum\">], @stop_tag=#<Object:0x00002ad114df65a0>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x00002ad114dee4e0 @test_name=\"\
    test_maximum(TestHumanEval)\", @exception=#<NoMethodError: undefined method `bubble_up'\
    \ for #<TestHumanEval:0x00002ad114cc3228 ...>\n  \n      bubble_up(q, q.size -\
    \ 1)\n      ^^^^^^^^^>, @method_name=\"test_maximum\">], @pendings=[], @omissions=[],\
    \ @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x00002ad114df6370\
    \ @a_proc=#<Proc:0x00002ad114df6398 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=47077486715800>=>#<Proc:0x00002ad114df6398 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x00002ad114df5e70\
    \ @a_proc=#<Proc:0x00002ad114df5ec0 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testru"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  res = []\n  len = arr.length\n  (0...len).each do |i|\n    while(!res.empty?\
    \ && res.length + len - i > k && res.last < arr[i])\n      res.pop\n    end\n\
    \    res.push(arr[i]) if res.length < k\n  end\n  res\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4i5bmntf\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp4i5bmntf.rb:31:in `test_maximum'\n\
    \     28: class TestHumanEval < Test::Unit::TestCase\n     29:   def test_maximum\n\
    \     30:     candidate = method(:maximum)\n  => 31:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     32:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     33:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     34:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.007494265 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.44 tests/s, 133.44 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpryre_6pa\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpryre_6pa.rb:22:in `test_maximum'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_maximum\n\
    \     21:     candidate = method(:maximum)\n  => 22:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     23:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     24:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     25:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006861077 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.75 tests/s, 145.75 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  # create new array with k elements from arr\n  # sort this array with selection\
    \ sort\n  # return array\n  new_arr = arr[0..k - 1]\n  for i in 0..new_arr.length\
    \ - 1\n    min_index = i\n    for j in i + 1..new_arr.length - 1\n      min_index\
    \ = j if new_arr[j] > new_arr[min_index]\n    end\n    new_arr[i], new_arr[min_index]\
    \ = new_arr[min_index], new_arr[i]\n  end\n  return new_arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7a1l1fd5\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp7a1l1fd5.rb:34:in `test_maximum'\n\
    \     31: class TestHumanEval < Test::Unit::TestCase\n     32:   def test_maximum\n\
    \     33:     candidate = method(:maximum)\n  => 34:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     35:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     36:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     37:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.007452473 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    134.18 tests/s, 134.18 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    out = []\n    max = -1001\n    until out.length == k\n        arr.each do\
    \ |i|\n            max = i if i > max\n        end\n        out << max\n     \
    \   arr.delete(max)\n        max = -1001\n    end\n    out\nend\nputs maximum([-3,\
    \ -4, 5], 3)\nputs maximum([4, -4, 4], 2)\nputs maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1)\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3, 5],\
    \ candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "5\n-3\n-4\n4\n-4\n2\nLoaded suite /tmp/tmpmd20v3qg\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpmd20v3qg.rb:36:in `test_maximum'\n\
    \     33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_maximum\n\
    \     35:     candidate = method(:maximum)\n  => 36:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     37:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     38:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     39:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.007513037 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.10 tests/s, 133.10 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  i = 0\n  j = arr.size - 1\n  while j - i >= k\n    if arr[i] < arr[j]\n   \
    \   arr[i], arr[j] = arr[j], arr[i]\n      i += 1\n    else\n      j -= 1\n  \
    \  end\n  end\n  arr[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprsxhfjb5\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmprsxhfjb5.rb:33:in `test_maximum'\n\
    \     30: class TestHumanEval < Test::Unit::TestCase\n     31:   def test_maximum\n\
    \     32:     candidate = method(:maximum)\n  => 33:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     34:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     35:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     36:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.007473787 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.80 tests/s, 133.80 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    h = {}\n    arr.each do |num|\n        h[num] = h[num].to_i + 1\n    end\n\
    \    out = []\n    while out.size < k\n        max = h.keys.max\n        k.times\
    \ { out << max }\n        h.delete(max)\n    end\n    out\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpei3o3vn1\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpei3o3vn1.rb:33:in `test_maximum'\n\
    \     30: class TestHumanEval < Test::Unit::TestCase\n     31:   def test_maximum\n\
    \     32:     candidate = method(:maximum)\n  => 33:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     34:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     35:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     36:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, 5, 5]>\n\ndiff:\n\
    ? [-4, -3, 5]\n?  5   5     \n?  ??   ??     \n===============================================================================\n\
    \nFinished in 0.011578074 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.37 tests/s, 86.37 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1pz57u6a\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp1pz57u6a.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.007841627 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.52 tests/s, 1402.77 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1pz57u6a\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp1pz57u6a.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.007841627 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.52 tests/s, 1402.77 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.combination(k).to_a.map { |comb| comb.reduce(:+) }.max\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp6ueyqg7f\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp6ueyqg7f.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<-2>\n\ndiff:\n? [-4,\
    \ -3, 5]\n?   2        \n? - ?????????        \n===============================================================================\n\
    \nFinished in 0.007071271 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    141.42 tests/s, 141.42 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  i = 0\n  j = arr.size - 1\n  while i < j\n    l = i\n    r = j\n    pivot =\
    \ arr[(l + r) / 2]\n    while l <= r\n      while l <= r && arr[l] > pivot\n \
    \       l += 1\n      end\n      while l <= r && arr[r] < pivot\n        r -=\
    \ 1\n      end\n      if l <= r\n        arr[l], arr[r] = arr[r], arr[l]\n   \
    \     l += 1\n        r -= 1\n      end\n    end\n    if j - l + 1 >= k\n    \
    \  i = l\n    else\n      j = l - 1\n      k -= j - l + 1\n    end\n  end\n  arr[0...k]\n\
    end\nputs maximum([-3, -4, 5], 3)\nputs maximum([4, -4, 4], 2)\nputs maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "5\n-3\n-4\n4\n4\n2\nLoaded suite /tmp/tmpvnb2sw86\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpvnb2sw86.rb:52:in `test_maximum'\n\
    \     49: class TestHumanEval < Test::Unit::TestCase\n     50:   def test_maximum\n\
    \     51:     candidate = method(:maximum)\n  => 52:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     53:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     54:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     55:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.007460449 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    134.04 tests/s, 134.04 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  heap = Array.new()\n  arr.each { |x| \n    heap.push(x)\n    heap_up(heap,\
    \ heap.size-1)\n  }\n  return heap if heap.size <= k\n  (heap.size-k).times {\
    \ |i|\n    swap(heap, 0, heap.size-1-i)\n    heapify(heap, 0, heap.size-1-i)\n\
    \  }\n  heap\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy2rkwots\nStarted\nE\n===============================================================================\n\
    Error: test_maximum(TestHumanEval):\n  NoMethodError: undefined method `heap_up'\
    \ for #<TestHumanEval:0x00002b9104a5f490 @method_name=\"test_maximum\", @internal_data=#<Test::Unit::TestCase::InternalData:0x00002b9104a5f468\
    \ @start_time=2022-08-06 18:15:58.437034057 -0400, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x00002b9104b92a88\
    \ @assertion_count=0, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x00002b9104b8a4c8\
    \ @test_name=\"test_maximum(TestHumanEval)\", @exception=#<NoMethodError: undefined\
    \ method `heap_up' for #<TestHumanEval:0x00002b9104a5f490 ...>\n  \n      heap_up(heap,\
    \ heap.size-1)\n      ^^^^^^^>, @method_name=\"test_maximum\">], @stop_tag=#<Object:0x00002b9104b925d8>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x00002b9104b8a4c8 @test_name=\"\
    test_maximum(TestHumanEval)\", @exception=#<NoMethodError: undefined method `heap_up'\
    \ for #<TestHumanEval:0x00002b9104a5f490 ...>\n  \n      heap_up(heap, heap.size-1)\n\
    \      ^^^^^^^>, @method_name=\"test_maximum\">], @pendings=[], @omissions=[],\
    \ @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x00002b9104b923d0\
    \ @a_proc=#<Proc:0x00002b9104b923f8 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=47901849494520>=>#<Proc:0x00002b9104b923f8 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x00002b9104b91ed0\
    \ @a_proc=#<Proc:0x00002b9104b91ef8 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnerme"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr if arr.size <= k\n  size = arr.size\n  arr.sort!\n  arr[size - k..size\
    \ - 1]\nend\nputs maximum([-3, -4, 5], 3)\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "-3\n-4\n5\nLoaded suite /tmp/tmpfo31e02b\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpfo31e02b.rb:27:in `test_maximum'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_maximum\n\
    \     26:     candidate = method(:maximum)\n  => 27:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     28:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     29:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     30:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.007131735 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    140.22 tests/s, 140.22 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1pz57u6a\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp1pz57u6a.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.007841627 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.52 tests/s, 1402.77 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1pz57u6a\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp1pz57u6a.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.007841627 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.52 tests/s, 1402.77 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1pz57u6a\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp1pz57u6a.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.007841627 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.52 tests/s, 1402.77 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  heap = Heap.new\n  arr.each do |num|\n    heap.add(num)\n    heap.remove if\
    \ heap.size > k\n  end\n  heap.elements\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_mqy70u\nStarted\nE\n===============================================================================\n\
    Error: test_maximum(TestHumanEval):\n  NameError: uninitialized constant Heap\n\
    \  \n    heap = Heap.new\n           ^^^^\n/tmp/tmpy_mqy70u.rb:17:in `maximum'\n\
    /tmp/tmpy_mqy70u.rb:28:in `call'\n/tmp/tmpy_mqy70u.rb:28:in `test_maximum'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_maximum\n\
    \     27:     candidate = method(:maximum)\n  => 28:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     29:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     30:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     31:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n===============================================================================\n\
    \nFinished in 0.004052961 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    246.73 tests/s, 0.00 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  l = 0\n  r = arr.size - 1\n  while l < r\n    j = partition(arr, l, r)\n  \
    \  if j == k - 1\n      break\n    elsif j < k - 1\n      l = j + 1\n    else\n\
    \      r = j - 1\n    end\n  end\n  arr[0...k]\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp87efxwr5\nStarted\nE\n===============================================================================\n\
    Error: test_maximum(TestHumanEval):\n  NoMethodError: undefined method `partition'\
    \ for #<TestHumanEval:0x00002aca3fa84218 @method_name=\"test_maximum\", @internal_data=#<Test::Unit::TestCase::InternalData:0x00002aca3fa841c8\
    \ @start_time=2022-08-06 18:15:58.565669433 -0400, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x00002aca3fbb2d38\
    \ @assertion_count=0, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x00002aca3fbaa958\
    \ @test_name=\"test_maximum(TestHumanEval)\", @exception=#<NoMethodError: undefined\
    \ method `partition' for #<TestHumanEval:0x00002aca3fa84218 ...>\n  \n      j\
    \ = partition(arr, l, r)\n          ^^^^^^^^^>, @method_name=\"test_maximum\"\
    >], @stop_tag=#<Object:0x00002aca3fbb2860>, @failures=[], @errors=[#<Test::Unit::Error:0x00002aca3fbaa958\
    \ @test_name=\"test_maximum(TestHumanEval)\", @exception=#<NoMethodError: undefined\
    \ method `partition' for #<TestHumanEval:0x00002aca3fa84218 ...>\n  \n      j\
    \ = partition(arr, l, r)\n          ^^^^^^^^^>, @method_name=\"test_maximum\"\
    >], @pendings=[], @omissions=[], @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"\
    =>{#<Test::Unit::Util::ProcWrapper:0x00002aca3fbb2658 @a_proc=#<Proc:0x00002aca3fbb2680\
    \ /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=47048140990080>=>#<Proc:0x00002aca3fbb2680 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x00002aca3fbb2158\
    \ @a_proc=#<Proc:0x00002aca3fbb2180 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/u"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpryre_6pa\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpryre_6pa.rb:22:in `test_maximum'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_maximum\n\
    \     21:     candidate = method(:maximum)\n  => 22:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     23:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     24:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     25:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006861077 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.75 tests/s, 145.75 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1pz57u6a\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp1pz57u6a.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.007841627 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.52 tests/s, 1402.77 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    # 2-way, 2-pointers, sliding window\n    ans = []\n    j = 0\n    for i in\
    \ 0...arr.size\n        while j > 0 && j + (arr.size - i) > k && ans[j - 1] <\
    \ arr[i]\n            j -= 1\n        end\n        if j < k\n            ans[j]\
    \ = arr[i]\n            j += 1\n        end\n    end\n    ans\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpm98zjvh0\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpm98zjvh0.rb:35:in `test_maximum'\n\
    \     32: class TestHumanEval < Test::Unit::TestCase\n     33:   def test_maximum\n\
    \     34:     candidate = method(:maximum)\n  => 35:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     36:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     37:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     38:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.008147627 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    122.74 tests/s, 122.74 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!.reverse[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp0sz3abcm\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp0sz3abcm.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.007109222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    140.66 tests/s, 140.66 assertions/s\n"
  timestamp: 1659824158
- exit_code: 0
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.last(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0c4ygwpx

    Started

    .

    Finished in 0.000476835 seconds.

    -------------------------------------------------------------------------------

    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2097.16 tests/s, 23068.78 assertions/s

    '
  stdout: ''
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  heap = MaxHeap.new(arr, k)\n  heap.heap\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpkzk5b0dt\nStarted\nE\n===============================================================================\n\
    Error: test_maximum(TestHumanEval):\n  NameError: uninitialized constant MaxHeap\n\
    \  \n    heap = MaxHeap.new(arr, k)\n           ^^^^^^^\n/tmp/tmpkzk5b0dt.rb:17:in\
    \ `maximum'\n/tmp/tmpkzk5b0dt.rb:24:in `call'\n/tmp/tmpkzk5b0dt.rb:24:in `test_maximum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_maximum\n\
    \     23:     candidate = method(:maximum)\n  => 24:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     25:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     26:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     27:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n===============================================================================\n\
    \nFinished in 0.005718248 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    174.88 tests/s, 0.00 assertions/s\n"
  timestamp: 1659824158
- exit_code: 0
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.last(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0c4ygwpx

    Started

    .

    Finished in 0.000476835 seconds.

    -------------------------------------------------------------------------------

    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2097.16 tests/s, 23068.78 assertions/s

    '
  stdout: ''
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  # min_heap\n  # we want the heap to be of length k\n  # so we can pop off the\
    \ smallest value\n  # and push the next value into the heap\n  heap = [0] * k\n\
    \  (0...k).each do |i|\n    heap[i] = arr[i]\n  end\n  # heapify\n  (0...k).each\
    \ do |i|\n    child = i\n    parent = child / 2\n    while parent >= 0 && heap[parent]\
    \ > heap[child]\n      # swap\n      heap[parent], heap[child] = heap[child],\
    \ heap[parent]\n      child = parent\n      parent = child / 2\n    end\n  end\n\
    \  (k...arr.length).each do |i|\n    if arr[i] > heap[0]\n      heap[0] = arr[i]\n\
    \      parent = 0\n      left = parent * 2 + 1\n      right = parent * 2 + 2\n\
    \      while left < k && (heap[parent] > heap[left] || heap[parent] > heap[right])\n\
    \        if heap[left] < heap[right]\n          heap[parent], heap[left] = heap[left],\
    \ heap[parent]\n          parent = left\n        else\n          heap[parent],\
    \ heap[right] = heap[right], heap[parent]\n          parent = right\n        end\n\
    \        left = parent * 2 + 1\n        right = parent * 2 + 2\n      end\n  \
    \  end\n  end\n  heap\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1uth91wf\nStarted\nE\n===============================================================================\n\
    Error: test_maximum(TestHumanEval): ArgumentError: comparison of Integer with\
    \ nil failed\n/tmp/tmp1uth91wf.rb:42:in `>'\n/tmp/tmp1uth91wf.rb:42:in `block\
    \ in maximum'\n/tmp/tmp1uth91wf.rb:36:in `each'\n/tmp/tmp1uth91wf.rb:36:in `maximum'\n\
    /tmp/tmp1uth91wf.rb:62:in `call'\n/tmp/tmp1uth91wf.rb:62:in `test_maximum'\n \
    \    59:   def test_maximum\n     60:     candidate = method(:maximum)\n     61:\
    \     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  => 62:    \
    \ assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     63:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     64:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     65:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n===============================================================================\n\
    \nFinished in 0.001293866 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    772.88 tests/s, 772.88 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  # res = [], arr.each do |num|\n  #   idx = res.size-1\n  #   if idx < 0\n \
    \ #     res << num\n  #   elsif num < res[idx]\n  #     next\n  #   elsif num\
    \ >= res[idx]\n  #     idx -= 1 while idx >= 0 && num >= res[idx]\n  #     res.insert(idx+1,\
    \ num)\n  #   end\n  #   res.shift if res.size > k\n  # end\n  # res\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: SyntaxError
  stderr: '/tmp/tmpgdw9fetg.rb:31: class definition in method body

    class TestHumanEval < Test::Unit::TestCase

    ^~~~~~~~~~~~~~~~~~~

    /tmp/tmpgdw9fetg.rb:46: syntax error, unexpected end-of-input, expecting `end''

    '
  stdout: ''
  timestamp: 1659824158
- exit_code: 0
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    return arr.sort[-k, k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplzrbi613

    Started

    .

    Finished in 0.000475947 seconds.

    -------------------------------------------------------------------------------

    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2101.07 tests/s, 23111.82 assertions/s

    '
  stdout: ''
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    heap = BinaryHeap.new()\n    for i in arr do\n        heap.insert(i)\n  \
    \      if heap.size() > k\n            heap.pop()\n        end\n    end\n    heap.sorted()\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpmhie57yi\nStarted\nE\n===============================================================================\n\
    Error: test_maximum(TestHumanEval):\n  NameError: uninitialized constant BinaryHeap\n\
    \  \n      heap = BinaryHeap.new()\n             ^^^^^^^^^^\n/tmp/tmpmhie57yi.rb:17:in\
    \ `maximum'\n/tmp/tmpmhie57yi.rb:30:in `call'\n/tmp/tmpmhie57yi.rb:30:in `test_maximum'\n\
    \     27: class TestHumanEval < Test::Unit::TestCase\n     28:   def test_maximum\n\
    \     29:     candidate = method(:maximum)\n  => 30:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     31:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     32:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     33:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n===============================================================================\n\
    \nFinished in 0.007312728 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.75 tests/s, 0.00 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    #O(nlogn), not good for large array\n    # arr.sort![arr.length-k..-1]\n\
    \    #O(n)\n    # return arr if arr.length == k\n    # answer = []\n    # until\
    \ answer.length == k\n    #     answer.push(arr.max)\n    #     arr.delete(arr.max)\n\
    \    # end\n    # answer\n    #create two arrays, one the first k elements\n \
    \   #and one the last k elements\n    return arr if arr.length == k\n    arr =\
    \ arr.sort\n    first = arr[0...k]\n    last = arr[-k..-1]\n    max_arr = []\n\
    \    until max_arr.length == k\n        #compare the first element of each array\n\
    \        if first[0] > last[0]\n            max_arr.push(first.shift)\n      \
    \  else\n            max_arr.push(last.shift)\n        end\n    end\n    max_arr\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqvbycg65\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpqvbycg65.rb:48:in `test_maximum'\n\
    \     45: class TestHumanEval < Test::Unit::TestCase\n     46:   def test_maximum\n\
    \     47:     candidate = method(:maximum)\n  => 48:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     49:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     50:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     51:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.007099523 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    140.85 tests/s, 140.85 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return [] if arr.length == 0\n  arr.sort[-k..-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5cbbes7r\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp5cbbes7r.rb:34:in `test_maximum'\n\
    \     31:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     32:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     33:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 34:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     35:   end\n     36: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.007397223 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.19 tests/s, 1487.04 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr.max(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp_ayan87k\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp_ayan87k.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.007714316 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.63 tests/s, 129.63 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\t\
    arr.sort!.reverse[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy0gwk_62\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpy0gwk_62.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.007669169 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    130.39 tests/s, 130.39 assertions/s\n"
  timestamp: 1659824158
- exit_code: 0
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\t\
    arr.sort.last(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpmznok0h6

    Started

    .

    Finished in 0.00085502 seconds.

    -------------------------------------------------------------------------------

    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1169.56 tests/s, 12865.20 assertions/s

    '
  stdout: ''
  timestamp: 1659824158
- exit_code: 0
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  # Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n  # of length k with the maximum k numbers in arr.\n  arr.sort.last(k)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqvt2hzok

    Started

    .

    Finished in 0.000513846 seconds.

    -------------------------------------------------------------------------------

    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1946.11 tests/s, 21407.19 assertions/s

    '
  stdout: ''
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr if arr.size == k\n  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp3rb2ihla\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp3rb2ihla.rb:24:in `test_maximum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_maximum\n\
    \     23:     candidate = method(:maximum)\n  => 24:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     25:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     26:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     27:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.007614291 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.33 tests/s, 131.33 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  results = []\n  i = 0\n  while i < arr.length\n    curr = arr[i]\n    j = 0\n\
    \    while j < results.length\n      if curr > results[j]\n        results.insert(j,\
    \ curr)\n        break\n      end\n      j += 1\n    end\n    results << curr\
    \ if j == results.length\n    results.shift if results.length > k\n    i += 1\n\
    \  end\n  results\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpr74os13h\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpr74os13h.rb:39:in `test_maximum'\n\
    \     36: class TestHumanEval < Test::Unit::TestCase\n     37:   def test_maximum\n\
    \     38:     candidate = method(:maximum)\n  => 39:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     40:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     41:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     42:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.007754499 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    128.96 tests/s, 128.96 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.select{|x| x > 0}.sort.last(k)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpo3v1cbg8\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpo3v1cbg8.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5]>\n\ndiff:\n? [-4,\
    \ -3, 5]\n===============================================================================\n\
    \nFinished in 0.00700354 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    142.78 tests/s, 142.78 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.sort.reverse[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp9ujuvkww\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp9ujuvkww.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.007975476 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.38 tests/s, 125.38 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  # quick_select(arr, 0, arr.size - 1, k)\n  heap_select(arr, k)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmps8aonp9y\nStarted\nE\n===============================================================================\n\
    Error: test_maximum(TestHumanEval):\n  NoMethodError: undefined method `heap_select'\
    \ for #<TestHumanEval:0x00002aab7d62fec8 @method_name=\"test_maximum\", @internal_data=#<Test::Unit::TestCase::InternalData:0x00002aab7d62fc98\
    \ @start_time=2022-08-06 18:15:58.613334549 -0400, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x00002aab7d762b38\
    \ @assertion_count=0, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x00002aab7d75a668\
    \ @test_name=\"test_maximum(TestHumanEval)\", @exception=#<NoMethodError: undefined\
    \ method `heap_select' for #<TestHumanEval:0x00002aab7d62fec8 ...>\n  \n    heap_select(arr,\
    \ k)\n    ^^^^^^^^^^^>, @method_name=\"test_maximum\">], @stop_tag=#<Object:0x00002aab7d762660>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x00002aab7d75a668 @test_name=\"\
    test_maximum(TestHumanEval)\", @exception=#<NoMethodError: undefined method `heap_select'\
    \ for #<TestHumanEval:0x00002aab7d62fec8 ...>\n  \n    heap_select(arr, k)\n \
    \   ^^^^^^^^^^^>, @method_name=\"test_maximum\">], @pendings=[], @omissions=[],\
    \ @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x00002aab7d762458\
    \ @a_proc=#<Proc:0x00002aab7d762480 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=46916032668800>=>#<Proc:0x00002aab7d762480 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x00002aab7d761f58\
    \ @a_proc=#<Proc:0x00002aab7d761f80 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermedi"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1pz57u6a\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp1pz57u6a.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.007841627 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.52 tests/s, 1402.77 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\t\
    n = arr.length\n\tres = []\n\ti = 0\n\twhile i < n\n\t\tif res.length < k\n\t\t\
    \tres << arr[i]\n\t\telse\n\t\t\tif arr[i] > res[0]\n\t\t\t\tres.shift\n\t\t\t\
    \tres << arr[i]\n\t\t\tend\n\t\tend\n\t\ti += 1\n\tend\n\tres.sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpj06__588\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpj06__588.rb:38:in `test_maximum'\n\
    \     35:   def test_maximum\n     36:     candidate = method(:maximum)\n    \
    \ 37:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  => 38:\
    \     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     39:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     40:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     41:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.006982727 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.21 tests/s, 286.42 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.max(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp6d7ckrw0\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp6d7ckrw0.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.007813637 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.98 tests/s, 127.98 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.sort[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp48gtzh92\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp48gtzh92.rb:24:in `test_maximum'\n\
    \     21:   def test_maximum\n     22:     candidate = method(:maximum)\n    \
    \ 23:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  => 24:\
    \     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     25:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     26:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     27:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.00752248 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.93 tests/s, 265.87 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    return arr.sort.reverse.first(k)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqt28r_31\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpqt28r_31.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.007572085 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.06 tests/s, 132.06 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  # TODO\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpu9tow5h8\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpu9tow5h8.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007169788 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.47 tests/s, 139.47 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp0fnkpd8q\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp0fnkpd8q.rb:34:in `test_maximum'\n\
    \     31:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     32:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     33:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 34:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     35:   end\n     36: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.007427264 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    134.64 tests/s, 1481.03 assertions/s\n"
  timestamp: 1659824157
- exit_code: 0
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr = arr.sort.last(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppcbqu5d6

    Started

    .

    Finished in 0.000632612 seconds.

    -------------------------------------------------------------------------------

    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1580.75 tests/s, 17388.23 assertions/s

    '
  stdout: ''
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr = arr.sort()\n  return arr[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpz3q_68jg\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpz3q_68jg.rb:34:in `test_maximum'\n\
    \     31:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     32:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     33:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 34:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     35:   end\n     36: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.007380716 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.49 tests/s, 1490.37 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    return [] if k == 0\n    ans = []\n    (0...arr.length).each do |i|\n   \
    \     while ans.length != 0 && ans[-1] < arr[i] && ans.length + arr.length - i\
    \ > k\n            ans.pop\n        end\n        ans.push(arr[i]) if ans.length\
    \ < k\n    end\n    ans\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpmsfbm489\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpmsfbm489.rb:31:in `test_maximum'\n\
    \     28: class TestHumanEval < Test::Unit::TestCase\n     29:   def test_maximum\n\
    \     30:     candidate = method(:maximum)\n  => 31:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     32:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     33:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     34:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.007640987 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    130.87 tests/s, 130.87 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.sort.reverse[0..k-1]\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpyyuqz17v\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpyyuqz17v.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.007379275 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.51 tests/s, 135.51 assertions/s\n"
  timestamp: 1659824158
- exit_code: 0
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  (arr.length - k...arr.length).map { |i| arr[i] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5koexgok

    Started

    .

    Finished in 0.000475833 seconds.

    -------------------------------------------------------------------------------

    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2101.58 tests/s, 23117.35 assertions/s

    '
  stdout: ''
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  heap = MaxHeap.new(arr)\n  res = []\n  k.times do \n    res << heap.max\n \
    \   heap.extract_max\n  end\n  res\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprylmkcvg\nStarted\nE\n===============================================================================\n\
    Error: test_maximum(TestHumanEval):\n  NameError: uninitialized constant MaxHeap\n\
    \  \n    heap = MaxHeap.new(arr)\n           ^^^^^^^\n/tmp/tmprylmkcvg.rb:17:in\
    \ `maximum'\n/tmp/tmprylmkcvg.rb:29:in `call'\n/tmp/tmprylmkcvg.rb:29:in `test_maximum'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_maximum\n\
    \     28:     candidate = method(:maximum)\n  => 29:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     30:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     31:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     32:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n===============================================================================\n\
    \nFinished in 0.006352638 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    157.41 tests/s, 0.00 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr if arr.length == k\n  arr = arr.sort\n  arr[arr.length - k...arr.length]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpmyqun56m\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpmyqun56m.rb:25:in `test_maximum'\n\
    \     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_maximum\n\
    \     24:     candidate = method(:maximum)\n  => 25:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.007595978 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.65 tests/s, 131.65 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    # k <= arr.size\n    return arr.sort[-k..-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp3yyz2ac7\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp3yyz2ac7.rb:34:in `test_maximum'\n\
    \     31:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     32:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     33:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 34:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     35:   end\n     36: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.007277523 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    137.41 tests/s, 1511.50 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1pz57u6a\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp1pz57u6a.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.007841627 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.52 tests/s, 1402.77 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    [-arr.sort.take(k), arr.sort.last(k)].min\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpmcecm2ov\nStarted\nE\n===============================================================================\n\
    Error: test_maximum(TestHumanEval):\n  NoMethodError: undefined method `-@' for\
    \ [-4, -3, 5]:Array\n  \n      [-arr.sort.take(k), arr.sort.last(k)].min\n   \
    \    ^\n  Did you mean?  -\n/tmp/tmpmcecm2ov.rb:17:in `maximum'\n/tmp/tmpmcecm2ov.rb:23:in\
    \ `call'\n/tmp/tmpmcecm2ov.rb:23:in `test_maximum'\n     20: class TestHumanEval\
    \ < Test::Unit::TestCase\n     21:   def test_maximum\n     22:     candidate\
    \ = method(:maximum)\n  => 23:     assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n\
    \     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n\
    \     26:     assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1,\
    \ 2, -3], 3))\n===============================================================================\n\
    \nFinished in 0.002536245 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    394.28 tests/s, 0.00 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr.max(k)\nend\narr = [-3, -4, 5]\nk = 3\nprint maximum(arr, k)\nputs\n\
    arr = [4, -4, 4]\nk = 2\nprint maximum(arr, k)\nputs\narr = [-3, 2, 1, 2, -1,\
    \ -2, 1]\nk = 1\nprint maximum(arr, k)\nputs\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "[5, -3, -4]\n[4, 4]\n[2]\nLoaded suite /tmp/tmp4isuf4nr\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp4isuf4nr.rb:35:in `test_maximum'\n\
    \     32: class TestHumanEval < Test::Unit::TestCase\n     33:   def test_maximum\n\
    \     34:     candidate = method(:maximum)\n  => 35:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     36:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     37:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     38:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.007400346 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.13 tests/s, 135.13 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  ret = []\n  arr.each do |i|\n    while !ret.empty? && ret.size == k && ret.last\
    \ < i\n      ret.pop\n    end\n    ret.push(i) if ret.size < k\n  end\n  ret\n\
    end\nputs maximum([-3, -4, 5], 3)\nputs maximum([4, -4, 4], 2)\nputs maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "-3\n-4\n5\n4\n4\n2\nLoaded suite /tmp/tmp5nqcifi2\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp5nqcifi2.rb:33:in `test_maximum'\n\
    \     30: class TestHumanEval < Test::Unit::TestCase\n     31:   def test_maximum\n\
    \     32:     candidate = method(:maximum)\n  => 33:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     34:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     35:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     36:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.007311132 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.78 tests/s, 136.78 assertions/s\n"
  timestamp: 1659824158
- exit_code: 0
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\t\
    arr.sort!\n\tarr[arr.length - k..arr.length - 1]\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpygvdq7hd

    Started

    .

    Finished in 0.000459905 seconds.

    -------------------------------------------------------------------------------

    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2174.36 tests/s, 23917.98 assertions/s

    '
  stdout: ''
  timestamp: 1659824158
- exit_code: 0
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  a = arr.sort\n  a[-k, k]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp8j_cqk3b

    Started

    .

    Finished in 0.000464002 seconds.

    -------------------------------------------------------------------------------

    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2155.16 tests/s, 23706.79 assertions/s

    '
  stdout: ''
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\t\
    return arr if arr.size == k\n\theap = Heap.new\n\tfor i in 0...arr.size\n\t\t\
    heap.insert(arr[i])\n\t\theap.delete if heap.size > k\n\tend\n\theap.delete until\
    \ heap.empty?\n\theap.max_heap.map{|n| n.value}\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpss6w8vss\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpss6w8vss.rb:30:in `test_maximum'\n\
    \     27: class TestHumanEval < Test::Unit::TestCase\n     28:   def test_maximum\n\
    \     29:     candidate = method(:maximum)\n  => 30:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     31:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     32:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     33:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.007718017 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.57 tests/s, 129.57 assertions/s\n"
  timestamp: 1659824158
- exit_code: 0
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.sort.last(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1rd_sqkz

    Started

    .

    Finished in 0.000476808 seconds.

    -------------------------------------------------------------------------------

    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2097.28 tests/s, 23070.08 assertions/s

    '
  stdout: ''
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    heap = Heap.new(arr.size) { |x, y| y <=> x }\n    arr.each { |n| heap.push(n)\
    \ }\n    result = []\n    while !heap.empty? && k > 0\n        result << heap.pop\n\
    \        k -= 1\n    end\n    result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp80mi6mnu\nStarted\nE\n===============================================================================\n\
    Error: test_maximum(TestHumanEval):\n  NameError: uninitialized constant Heap\n\
    \  \n      heap = Heap.new(arr.size) { |x, y| y <=> x }\n             ^^^^\n/tmp/tmp80mi6mnu.rb:17:in\
    \ `maximum'\n/tmp/tmp80mi6mnu.rb:30:in `call'\n/tmp/tmp80mi6mnu.rb:30:in `test_maximum'\n\
    \     27: class TestHumanEval < Test::Unit::TestCase\n     28:   def test_maximum\n\
    \     29:     candidate = method(:maximum)\n  => 30:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     31:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     32:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     33:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n===============================================================================\n\
    \nFinished in 0.004147561 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    241.11 tests/s, 0.00 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  heap = []\n  i = 0\n  while i < k\n    heap << arr[i]\n    i += 1\n  end\n\
    \  i = k\n  j = 0\n  while i < arr.length\n    if arr[i] > heap[0]\n      heap[0]\
    \ = arr[i]\n      heapify(heap, 0)\n    end\n    i += 1\n  end\n  heap\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfwzn_wn0\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpfwzn_wn0.rb:38:in `test_maximum'\n\
    \     35: class TestHumanEval < Test::Unit::TestCase\n     36:   def test_maximum\n\
    \     37:     candidate = method(:maximum)\n  => 38:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     39:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     40:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     41:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.007726429 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.43 tests/s, 129.43 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    return [] if k == 0\n    # return arr.max(k)  # => [-4, -3, 5]\n    # return\
    \ arr.sort.last(k)  # => [-4, -3, 5]\n    # puts(arr.sort.last(k))\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: SyntaxError
  stderr: '/tmp/tmpipqa57c0.rb:22: class definition in method body

    class TestHumanEval < Test::Unit::TestCase

    ^~~~~~~~~~~~~~~~~~~

    /tmp/tmpipqa57c0.rb:37: syntax error, unexpected end-of-input, expecting `end''

    '
  stdout: ''
  timestamp: 1659824158
- exit_code: 0
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    # Sort\n    k = arr.length if k > arr.length\n    if k == 1\n        return\
    \ [arr.max]\n    end\n    arr = arr.sort\n    if k == arr.length\n        return\
    \ arr\n    end\n    return arr[arr.length - k..-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpkb9zvsb1

    Started

    .

    Finished in 0.000540088 seconds.

    -------------------------------------------------------------------------------

    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1851.55 tests/s, 20367.05 assertions/s

    '
  stdout: ''
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return [] if arr.empty?\n  return arr if k >= arr.size\n  index_to_value_hash\
    \ = Hash.new\n  arr.each do |el|\n    index_to_value_hash[el] = el\n  end\n  sorted_hash\
    \ = index_to_value_hash.sort_by { |k, v| v }\n  sorted_hash.reverse.take(k).to_h.values\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnefopr79\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpnefopr79.rb:30:in `test_maximum'\n\
    \     27: class TestHumanEval < Test::Unit::TestCase\n     28:   def test_maximum\n\
    \     29:     candidate = method(:maximum)\n  => 30:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     31:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     32:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     33:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.007549596 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.46 tests/s, 132.46 assertions/s\n"
  timestamp: 1659824158
- exit_code: 0
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    return [] if k <= 0 || arr.size < k\n    arr.sort![arr.size - k, k]\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5kkcnp71

    Started

    .

    Finished in 0.000512211 seconds.

    -------------------------------------------------------------------------------

    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1952.32 tests/s, 21475.52 assertions/s

    '
  stdout: ''
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return [] if arr.empty?\n  heap = Heap.new\n  arr.each do |n|\n    heap.insert(n)\n\
    \    heap.poll if heap.size > k\n  end\n  heap.to_a\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4guwyyxc\nStarted\nE\n===============================================================================\n\
    Error: test_maximum(TestHumanEval):\n  NameError: uninitialized constant Heap\n\
    \  \n    heap = Heap.new\n           ^^^^\n/tmp/tmp4guwyyxc.rb:18:in `maximum'\n\
    /tmp/tmp4guwyyxc.rb:29:in `call'\n/tmp/tmp4guwyyxc.rb:29:in `test_maximum'\n \
    \    26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_maximum\n\
    \     28:     candidate = method(:maximum)\n  => 29:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     30:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     31:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     32:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n===============================================================================\n\
    \nFinished in 0.007850531 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.38 tests/s, 0.00 assertions/s\n"
  timestamp: 1659824159
- exit_code: 0
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.last(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0c4ygwpx

    Started

    .

    Finished in 0.000476835 seconds.

    -------------------------------------------------------------------------------

    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2097.16 tests/s, 23068.78 assertions/s

    '
  stdout: ''
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr = arr.sort\n  return arr[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpypuwkawf\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpypuwkawf.rb:25:in `test_maximum'\n\
    \     22:   def test_maximum\n     23:     candidate = method(:maximum)\n    \
    \ 24:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  => 25:\
    \     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     26:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     27:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     28:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.008839093 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.13 tests/s, 226.27 assertions/s\n"
  timestamp: 1659824159
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpyzy3luyi\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpyzy3luyi.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.007603394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.52 tests/s, 1446.72 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return [] if arr.nil? || arr.length == 0 || k <= 0\n  return arr if k >= arr.length\n\
    \  pos, neg = [], []\n  arr.each do |num|\n    if num >= 0\n      pos << num\n\
    \    else\n      neg << num\n    end\n  end\n  pos = pos.sort_by { |num| -num\
    \ }\n  neg = neg.sort\n  if pos.length == 0\n    neg[0, k]\n  elsif neg.length\
    \ == 0\n    pos[0, k]\n  else\n    pos.concat(neg)\n    pos[0, k]\n  end\nend\n\
    arr = [-3, -4, 5]\nk = 3\np maximum(arr, k)\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "[-3, -4, 5]\nLoaded suite /tmp/tmp4jaha6t6\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp4jaha6t6.rb:45:in `test_maximum'\n\
    \     42: class TestHumanEval < Test::Unit::TestCase\n     43:   def test_maximum\n\
    \     44:     candidate = method(:maximum)\n  => 45:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     46:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     47:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     48:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.007374289 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.61 tests/s, 135.61 assertions/s\n"
  timestamp: 1659824159
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpyzy3luyi\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpyzy3luyi.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.007603394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.52 tests/s, 1446.72 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr.max(k) if arr.length == k\n  left = 0\n  right = k - 1\n  while\
    \ right < arr.length - 1\n    left = arr[left..right].each_with_index.min[1] +\
    \ 1\n    right = left + k - 1\n  end\n  arr[left..right]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpboh4pgql\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpboh4pgql.rb:30:in `test_maximum'\n\
    \     27: class TestHumanEval < Test::Unit::TestCase\n     28:   def test_maximum\n\
    \     29:     candidate = method(:maximum)\n  => 30:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     31:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     32:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     33:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.008245846 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    121.27 tests/s, 121.27 assertions/s\n"
  timestamp: 1659824159
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    # Sort by abs value, keeping track of each number's sign\n    arr.sort! {\
    \ |a, b| a.abs <=> b.abs }.map { |n| n < 0 ? n : -n }\n    # Get and reverse the\
    \ k numbers from the end of the array\n    arr[-k..-1].reverse.map { |n| n < 0\
    \ ? n : -n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpw0wajm_4\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpw0wajm_4.rb:26:in `test_maximum'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_maximum\n\
    \     25:     candidate = method(:maximum)\n  => 26:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     27:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     28:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     29:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-5, -4, -3]>\n\ndiff:\n\
    ? [-5, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.008763655 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    114.11 tests/s, 114.11 assertions/s\n"
  timestamp: 1659824159
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  # brute force method, O(n^2), O(1) space\n  output = []\n  k.times do |i|\n\
    \    max = arr.max\n    output << max\n    arr.delete(max)\n  end\n  output\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpuicbohkg\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpuicbohkg.rb:30:in `test_maximum'\n\
    \     27: class TestHumanEval < Test::Unit::TestCase\n     28:   def test_maximum\n\
    \     29:     candidate = method(:maximum)\n  => 30:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     31:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     32:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     33:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.008338914 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    119.92 tests/s, 119.92 assertions/s\n"
  timestamp: 1659824159
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return [] if arr.empty? || k <= 0\n  res = Array.new(k, -Float::INFINITY)\n\
    \  arr.each do |num|\n    (0...k).each do |i|\n      if num > res[i]\n       \
    \ res[i] = num\n        break\n      end\n    end\n  end\n  res\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpmu8o030x\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpmu8o030x.rb:33:in `test_maximum'\n\
    \     30: class TestHumanEval < Test::Unit::TestCase\n     31:   def test_maximum\n\
    \     32:     candidate = method(:maximum)\n  => 33:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     34:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     35:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     36:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -4, -Infinity]>\n\
    \ndiff:\n? [   -4, -3, 5    ]\n?  5,      Infinity \n?  +++     ???? \n===============================================================================\n\
    \nFinished in 0.007636325 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    130.95 tests/s, 130.95 assertions/s\n"
  timestamp: 1659824159
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    len = arr.length\n    return arr if len <= k\n    # in-place quicksort, time\
    \ complexity of O(n^2)\n    i = 0\n    while i < len do\n        swap = i\n  \
    \      j = i + 1\n        while j < len do\n            if arr[j] > arr[swap]\n\
    \                swap = j\n            end\n            j += 1\n        end\n\
    \        arr[i], arr[swap] = arr[swap], arr[i]\n        i += 1\n    end\n    arr[0...k]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpkhdd2f51\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpkhdd2f51.rb:39:in `test_maximum'\n\
    \     36: class TestHumanEval < Test::Unit::TestCase\n     37:   def test_maximum\n\
    \     38:     candidate = method(:maximum)\n  => 39:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     40:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     41:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     42:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.009092184 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.98 tests/s, 109.98 assertions/s\n"
  timestamp: 1659824159
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.max(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp6d7ckrw0\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp6d7ckrw0.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.007813637 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.98 tests/s, 127.98 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  minheap = []\n  arr.each do |ele|\n    next if ele < 0\n    if minheap.size\
    \ < k\n      minheap << ele\n    else\n      if ele > minheap[0]\n        minheap[0]\
    \ = ele\n        minheapify(minheap, 0)\n      end\n    end\n  end\n  minheap\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp8vbu_qr8\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp8vbu_qr8.rb:35:in `test_maximum'\n\
    \     32: class TestHumanEval < Test::Unit::TestCase\n     33:   def test_maximum\n\
    \     34:     candidate = method(:maximum)\n  => 35:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     36:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     37:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     38:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5]>\n\ndiff:\n? [-4,\
    \ -3, 5]\n===============================================================================\n\
    \nFinished in 0.014089108 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.98 tests/s, 70.98 assertions/s\n"
  timestamp: 1659824159
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  [arr.sort.reverse[0...k], arr.sort[0...k]].max\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpm11w57fi\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpm11w57fi.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.007520565 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.97 tests/s, 132.97 assertions/s\n"
  timestamp: 1659824159
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.sort.reverse[0..k-1]\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpyyuqz17v\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpyyuqz17v.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.007379275 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.51 tests/s, 135.51 assertions/s\n"
  timestamp: 1659824158
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    # Find the k largest numbers of array by using selection sort\n    # Time\
    \ Complexity: O(k * n)\n    # Space Complexity: O(1)\n    i = 0\n    while i <\
    \ k\n        min_index = i\n        j = i + 1\n        while j < arr.length\n\
    \            min_index = j if arr[j] > arr[min_index]\n            j += 1\n  \
    \      end\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n        i\
    \ += 1\n    end\n    return arr[0, k]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp9hx7ub7s\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp9hx7ub7s.rb:37:in `test_maximum'\n\
    \     34: class TestHumanEval < Test::Unit::TestCase\n     35:   def test_maximum\n\
    \     36:     candidate = method(:maximum)\n  => 37:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     38:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     39:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     40:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.00713902 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    140.08 tests/s, 140.08 assertions/s\n"
  timestamp: 1659824159
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  sorted = false\n  while !sorted\n    sorted = true\n    (arr.length - 1).times\
    \ do |i|\n      if arr[i] < arr[i + 1]\n        arr[i], arr[i + 1] = arr[i + 1],\
    \ arr[i]\n        sorted = false\n      end\n    end\n  end\n  return arr[0...k]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprbflxlrr\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmprbflxlrr.rb:33:in `test_maximum'\n\
    \     30: class TestHumanEval < Test::Unit::TestCase\n     31:   def test_maximum\n\
    \     32:     candidate = method(:maximum)\n  => 33:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     34:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     35:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     36:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.00767185 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    130.35 tests/s, 130.35 assertions/s\n"
  timestamp: 1659824159
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    results = []\n    (arr.length - k).times do\n        results << arr.delete(arr.min)\n\
    \    end\n    results + arr\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp9evnoc0h\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp9evnoc0h.rb:27:in `test_maximum'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_maximum\n\
    \     26:     candidate = method(:maximum)\n  => 27:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     28:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     29:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     30:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.007531587 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.77 tests/s, 132.77 assertions/s\n"
  timestamp: 1659824159
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  ans = []\n  arr.each { |num| heap_push(ans, num, k) }\n  ans\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpmybycrk6\nStarted\nE\n===============================================================================\n\
    Error: test_maximum(TestHumanEval):\n  NoMethodError: undefined method `heap_push'\
    \ for #<TestHumanEval:0x00002aca9da5c188 @method_name=\"test_maximum\", @internal_data=#<Test::Unit::TestCase::InternalData:0x00002aca9da5c160\
    \ @start_time=2022-08-06 18:15:59.170672739 -0400, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x00002aca9db8ab18\
    \ @assertion_count=0, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x00002aca9db82698\
    \ @test_name=\"test_maximum(TestHumanEval)\", @exception=#<NoMethodError: undefined\
    \ method `heap_push' for #<TestHumanEval:0x00002aca9da5c188 ...>\n  \n    arr.each\
    \ { |num| heap_push(ans, num, k) }\n                     ^^^^^^^^^>, @method_name=\"\
    test_maximum\">], @stop_tag=#<Object:0x00002aca9db8a640>, @failures=[], @errors=[#<Test::Unit::Error:0x00002aca9db82698\
    \ @test_name=\"test_maximum(TestHumanEval)\", @exception=#<NoMethodError: undefined\
    \ method `heap_push' for #<TestHumanEval:0x00002aca9da5c188 ...>\n  \n    arr.each\
    \ { |num| heap_push(ans, num, k) }\n                     ^^^^^^^^^>, @method_name=\"\
    test_maximum\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x00002aca9db8a438\
    \ @a_proc=#<Proc:0x00002aca9db8a460 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=47049717884000>=>#<Proc:0x00002aca9db8a460 /home/a.guha/.conda/envs/polyglot/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x00002aca9db89f38\
    \ @a_proc=#<Proc:0x00002aca9db89f60 /home/a.guha/.conda/envs/polyglot/lib/"
  timestamp: 1659824159
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    @arr = arr\n    @k = k\n    size = @arr.size\n    if (size == 0 || @k <=\
    \ 0)\n        return []\n    end\n    if (size <= @k)\n        return @arr.sort.reverse\n\
    \    end\n    max = @arr[0]\n    min = @arr[0]\n    @arr.each do |num|\n     \
    \   if num > max\n            max = num\n        end\n        if num < min\n \
    \           min = num\n        end\n    end\n    if @k == 1\n        return [max]\n\
    \    end\n    if (@k == 2)\n        if (max == min)\n            return [max,\
    \ min]\n        end\n        return [max, min]\n    end\n    bucket_size = (max\
    \ - min) / (@k - 1)\n    buckets = Array.new(@k, 0)\n    @arr.each do |num|\n\
    \        bucket_index = bucket(num, bucket_size, min)\n        buckets[bucket_index]\
    \ += 1\n    end\n    result = Array.new(@k, 0)\n    index = @k - 1\n    buckets.each_with_index\
    \ do |value, i|\n        if value > 0\n            value.times do\n          \
    \      result[index] = min + i * bucket_size\n                index -= 1\n   \
    \         end\n        end\n    end\n    return result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpk4kebr77\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpk4kebr77.rb:67:in `test_maximum'\n\
    \     64: class TestHumanEval < Test::Unit::TestCase\n     65:   def test_maximum\n\
    \     66:     candidate = method(:maximum)\n  => 67:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     68:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     69:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     70:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.007415107 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    134.86 tests/s, 134.86 assertions/s\n"
  timestamp: 1659824159
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmplctr5z6c\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmplctr5z6c.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.007835472 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.62 tests/s, 127.62 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    # Partition the array around the pivot in place.\n    # @param {Integer[]}\
    \ arr\n    # @param {Integer} l\n    # @param {Integer} r\n    # @return {Integer}\n\
    \    def partition(arr, l, r)\n        pi = l\n        pivot = arr[r]\n      \
    \  i = l\n        while i < r\n            if arr[i] >= pivot\n              \
    \  arr[i], arr[pi] = arr[pi], arr[i]\n                pi += 1\n            end\n\
    \            i += 1\n        end\n        arr[pi], arr[r] = arr[r], arr[pi]\n\
    \        pi\n    end\n    len = arr.length\n    l = 0\n    r = len - 1\n    while\
    \ true\n        pi = partition(arr, l, r)\n        if pi == k - 1\n          \
    \  return arr[0...k]\n        elsif pi > k - 1\n            r = pi - 1\n     \
    \   else\n            l = pi + 1\n        end\n    end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcrdyl0de\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpcrdyl0de.rb:54:in `test_maximum'\n\
    \     51: class TestHumanEval < Test::Unit::TestCase\n     52:   def test_maximum\n\
    \     53:     candidate = method(:maximum)\n  => 54:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     55:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     56:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     57:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.007389108 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.33 tests/s, 135.33 assertions/s\n"
  timestamp: 1659824159
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1pz57u6a\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp1pz57u6a.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.007841627 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.52 tests/s, 1402.77 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    min_heap = MinHeap.new\n    arr.each do |num|\n        min_heap.add(num)\n\
    \        min_heap.remove_min if min_heap.size > k\n    end\n    min_heap.to_a.reverse\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4epjtfgo\nStarted\nE\n===============================================================================\n\
    Error: test_maximum(TestHumanEval):\n  NameError: uninitialized constant MinHeap\n\
    \  \n      min_heap = MinHeap.new\n                 ^^^^^^^\n/tmp/tmp4epjtfgo.rb:17:in\
    \ `maximum'\n/tmp/tmp4epjtfgo.rb:28:in `call'\n/tmp/tmp4epjtfgo.rb:28:in `test_maximum'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_maximum\n\
    \     27:     candidate = method(:maximum)\n  => 28:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     29:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     30:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     31:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n===============================================================================\n\
    \nFinished in 0.005743963 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    174.10 tests/s, 0.00 assertions/s\n"
  timestamp: 1659824159
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr if arr.size == k\n  arr.sort.reverse[0..k-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxlv_9i54\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpxlv_9i54.rb:24:in `test_maximum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_maximum\n\
    \     23:     candidate = method(:maximum)\n  => 24:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     25:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     26:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     27:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.007340966 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.22 tests/s, 136.22 assertions/s\n"
  timestamp: 1659824159
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1pz57u6a\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp1pz57u6a.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.007841627 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.52 tests/s, 1402.77 assertions/s\n"
  timestamp: 1659824157
- exit_code: 0
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  sorted = arr.sort\n  sorted[-k, k]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp2m9g5en8

    Started

    .

    Finished in 0.00044996 seconds.

    -------------------------------------------------------------------------------

    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2222.42 tests/s, 24446.62 assertions/s

    '
  stdout: ''
  timestamp: 1659824159
- exit_code: 0
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    return arr.sort.slice(-k, k)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphb8hjhv4

    Started

    .

    Finished in 0.000500189 seconds.

    -------------------------------------------------------------------------------

    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1999.24 tests/s, 21991.69 assertions/s

    '
  stdout: ''
  timestamp: 1659824159
- exit_code: 0
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  # sorted list\n  arr.sort.drop(arr.length - k)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdualctb2

    Started

    .

    Finished in 0.000524275 seconds.

    -------------------------------------------------------------------------------

    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1907.40 tests/s, 20981.36 assertions/s

    '
  stdout: ''
  timestamp: 1659824159
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    heap = MinHeap.new\n    res = []\n    arr.each do |num|\n        heap.insert(num)\n\
    \        res.push(heap.extract) if res.size < k\n    end\n    res\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpwhfumxtw\nStarted\nE\n===============================================================================\n\
    Error: test_maximum(TestHumanEval):\n  NameError: uninitialized constant MinHeap\n\
    \  \n      heap = MinHeap.new\n             ^^^^^^^\n/tmp/tmpwhfumxtw.rb:17:in\
    \ `maximum'\n/tmp/tmpwhfumxtw.rb:29:in `call'\n/tmp/tmpwhfumxtw.rb:29:in `test_maximum'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_maximum\n\
    \     28:     candidate = method(:maximum)\n  => 29:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     30:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     31:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     32:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n===============================================================================\n\
    \nFinished in 0.005941687 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    168.30 tests/s, 0.00 assertions/s\n"
  timestamp: 1659824159
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  n = arr.size\n  i = 0\n  while i < k\n    j = i + 1\n    while j < n\n    \
    \  if arr[i] < arr[j]\n        arr[i], arr[j] = arr[j], arr[i]\n      end\n  \
    \    j += 1\n    end\n    i += 1\n  end\n  arr[0..k-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmplvsw885f\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmplvsw885f.rb:35:in `test_maximum'\n\
    \     32: class TestHumanEval < Test::Unit::TestCase\n     33:   def test_maximum\n\
    \     34:     candidate = method(:maximum)\n  => 35:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     36:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     37:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     38:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.007386799 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.38 tests/s, 135.38 assertions/s\n"
  timestamp: 1659824159
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmplctr5z6c\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmplctr5z6c.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.007835472 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.62 tests/s, 127.62 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  n = arr.size\n  ans = []\n  arr.each do |x|\n    while ans.size > 0 && n -\
    \ ans.size >= k && ans.last < x\n      ans.pop\n    end\n    ans << x if ans.size\
    \ < k\n  end\n  ans\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp2x3ffdqx\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp2x3ffdqx.rb:31:in `test_maximum'\n\
    \     28: class TestHumanEval < Test::Unit::TestCase\n     29:   def test_maximum\n\
    \     30:     candidate = method(:maximum)\n  => 31:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     32:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     33:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     34:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.007306073 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.87 tests/s, 136.87 assertions/s\n"
  timestamp: 1659824159
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\t\
    # loop arr, push arr[i] to heap, if heap.size > k, pop.last\n\t# return heap\n\
    \treturn arr if arr.size <= k\n\theap = [0] * k\n\theap_size = 0\n\tfor i in 0...arr.size\n\
    \t\tif heap_size < k\n\t\t\theap[heap_size] = arr[i]\n\t\t\tbubble_up(heap, heap_size)\n\
    \t\t\theap_size += 1\n\t\telsif arr[i] > heap[0]\n\t\t\theap[0] = arr[i]\n\t\t\
    \tbubble_down(heap, heap_size)\n\t\tend\n\tend\n\theap\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcmg_8cs4\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpcmg_8cs4.rb:38:in `test_maximum'\n\
    \     35: class TestHumanEval < Test::Unit::TestCase\n     36:   def test_maximum\n\
    \     37:     candidate = method(:maximum)\n  => 38:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     39:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     40:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     41:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.007363113 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.81 tests/s, 135.81 assertions/s\n"
  timestamp: 1659824159
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1pz57u6a\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp1pz57u6a.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.007841627 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.52 tests/s, 1402.77 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1pz57u6a\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp1pz57u6a.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.007841627 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.52 tests/s, 1402.77 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  # Decending order:\n  arr.sort.reverse.take(k)\nend\np maximum([-3, -4, 5],\
    \ 3)\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "[5, -3, -4]\nLoaded suite /tmp/tmp4fdpi8qp\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp4fdpi8qp.rb:25:in `test_maximum'\n\
    \     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_maximum\n\
    \     24:     candidate = method(:maximum)\n  => 25:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.015147831 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    66.02 tests/s, 66.02 assertions/s\n"
  timestamp: 1659824159
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    return arr if arr.size == k\n    # arr = arr.sort!\n    # return arr[arr.size\
    \ - k..arr.size]\n    return arr.sort![arr.size - k..arr.size]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp_t10bs73\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp_t10bs73.rb:26:in `test_maximum'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_maximum\n\
    \     25:     candidate = method(:maximum)\n  => 26:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     27:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     28:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     29:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.009303888 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    107.48 tests/s, 107.48 assertions/s\n"
  timestamp: 1659824159
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    return [] if arr.length == 0\n    return arr if arr.length <= k\n    heap\
    \ = []\n    result = []\n    i = 0\n    while i < k\n        heap << arr[i]\n\
    \        heapify_up(heap, i)\n        i += 1\n    end\n    while i < arr.length\n\
    \        if arr[i] > heap[0]\n            heap[0] = arr[i]\n            heapify_down(heap,\
    \ 0)\n        end\n        i += 1\n    end\n    heap\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmplwcuufiu\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmplwcuufiu.rb:40:in `test_maximum'\n\
    \     37: class TestHumanEval < Test::Unit::TestCase\n     38:   def test_maximum\n\
    \     39:     candidate = method(:maximum)\n  => 40:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     41:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     42:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     43:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.009008457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    111.01 tests/s, 111.01 assertions/s\n"
  timestamp: 1659824159
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    # Time Complexity = O(N + KLogN)\n    # Space Complexity = O(K)\n    # Frequent\
    \ use of the delete_at method is not a good idea.\n    # Can use binary search\
    \ to find the index to delete.\n    # Thought that was the problem but it was\
    \ a constraint.\n    # Test cases were too small to care.\n    return arr.sort.reverse[0..k-1]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpssub9gcy\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpssub9gcy.rb:29:in `test_maximum'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_maximum\n\
    \     28:     candidate = method(:maximum)\n  => 29:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     30:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     31:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     32:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.009369884 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    106.72 tests/s, 106.72 assertions/s\n"
  timestamp: 1659824159
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  counter = {}\n  hash = {}\n  arr.each do |i|\n    if counter[i]\n      counter[i]\
    \ += 1\n    else\n      counter[i] = 1\n    end\n  end\n  p counter\n  counter.sort_by\
    \ { |k, v| -v }.each do |n|\n    if hash.size < k\n      hash[n[0]] = n[1]\n \
    \   end\n  end\n  p hash\n  hash.keys.sort\nend\np maximum([-3, -4, 5], 3)\np\
    \ maximum([4, -4, 4], 2)\np maximum([-3, 2, 1, 2, -1, -2, 1], 1)\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "{-3=>1, -4=>1, 5=>1}\n{-3=>1, -4=>1, 5=>1}\n[-4, -3, 5]\n{4=>2, -4=>1}\n\
    {4=>2, -4=>1}\n[-4, 4]\n{-3=>1, 2=>2, 1=>2, -1=>1, -2=>1}\n{2=>2}\n[2]\nLoaded\
    \ suite /tmp/tmpvbv2874k\nStarted\n{-3=>1, -4=>1, 5=>1}\n{-3=>1, -4=>1, 5=>1}\n\
    {4=>2, -4=>1}\n{4=>2, -4=>1}\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpvbv2874k.rb:43:in `test_maximum'\n\
    \     40:   def test_maximum\n     41:     candidate = method(:maximum)\n    \
    \ 42:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  => 43:\
    \     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     44:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     45:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     46:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.009129092 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.54 tests/s, 219.08 assertions/s\n"
  timestamp: 1659824159
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1pz57u6a\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp1pz57u6a.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.007841627 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.52 tests/s, 1402.77 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr if arr.size <= k\n  heap = []\n  heap_size = 0\n  arr.each do |num|\n\
    \    if heap_size == k\n      heap.shift if num > heap[0]\n      heap << num\n\
    \    else\n      heap << num\n      heap_size += 1\n      i = heap_size - 1\n\
    \      while i > 0\n        parent = (i - 1) / 2\n        if heap[parent] < heap[i]\n\
    \          heap[parent], heap[i] = heap[i], heap[parent]\n          i = parent\n\
    \        else\n          break\n        end\n      end\n    end\n  end\n  heap\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpbtmeow1t\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpbtmeow1t.rb:45:in `test_maximum'\n\
    \     42: class TestHumanEval < Test::Unit::TestCase\n     43:   def test_maximum\n\
    \     44:     candidate = method(:maximum)\n  => 45:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     46:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     47:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     48:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.009132805 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.50 tests/s, 109.50 assertions/s\n"
  timestamp: 1659824159
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    return arr if arr.size <= k\n    return arr.sort if k == 1\n    ans = []\n\
    \    n = arr.size\n    f, l = 0, n - 1\n    i = 0\n    while f <= l\n        if\
    \ (f == l)\n            ans[i] = arr[f]\n            break\n        end\n    \
    \    if (f == l - 1)\n            if arr[f] > arr[l]\n                ans[i] =\
    \ arr[f]\n                f += 1\n            else\n                ans[i] = arr[l]\n\
    \                l -= 1\n            end\n        else\n            mid = (f +\
    \ l) / 2\n            if (arr[mid] >= arr[f] && arr[mid] >= arr[l])\n        \
    \        ans[i] = arr[mid]\n                f = mid + 1\n            elsif (arr[mid]\
    \ <= arr[f] && arr[mid] <= arr[l])\n                ans[i] = arr[mid]\n      \
    \          l = mid - 1\n            else\n                ans[i] = arr[f]\n  \
    \              f += 1\n            end\n        end\n        i += 1\n        if\
    \ i == k\n            break\n        end\n    end\n    ans\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp8wqq06ek\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp8wqq06ek.rb:60:in `test_maximum'\n\
    \     57: class TestHumanEval < Test::Unit::TestCase\n     58:   def test_maximum\n\
    \     59:     candidate = method(:maximum)\n  => 60:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     61:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     62:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     63:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.009306491 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    107.45 tests/s, 107.45 assertions/s\n"
  timestamp: 1659824159
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpjvuxlxfh\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpjvuxlxfh.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009222132 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    108.43 tests/s, 108.43 assertions/s\n"
  timestamp: 1659824159
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr if arr.length == k\n  heap = Heap.new(arr)\n  res = []\n  k.times\
    \ do \n    res << heap.delete_max\n  end\n  res\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpdrtq01v0\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpdrtq01v0.rb:29:in `test_maximum'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_maximum\n\
    \     28:     candidate = method(:maximum)\n  => 29:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     30:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     31:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     32:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.00989547 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    101.06 tests/s, 101.06 assertions/s\n"
  timestamp: 1659824159
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpryre_6pa\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpryre_6pa.rb:22:in `test_maximum'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_maximum\n\
    \     21:     candidate = method(:maximum)\n  => 22:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     23:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     24:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     25:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006861077 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.75 tests/s, 145.75 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpryre_6pa\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpryre_6pa.rb:22:in `test_maximum'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_maximum\n\
    \     21:     candidate = method(:maximum)\n  => 22:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     23:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     24:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     25:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006861077 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.75 tests/s, 145.75 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  h = {}\n  for i in 0...arr.length\n    h[arr[i]] = i\n  end\n  arr = arr.sort.reverse\n\
    \  arr[0...k]\nend\na = [-3, -4, 5]\nb = [4, -4, 4]\nc = [-3, 2, 1, 2, -1, -2,\
    \ 1]\nputs maximum(a, 3)\nputs maximum(b, 2)\nputs maximum(c, 1)\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "5\n-3\n-4\n4\n4\n2\nLoaded suite /tmp/tmpd0z3bbfm\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpd0z3bbfm.rb:34:in `test_maximum'\n\
    \     31: class TestHumanEval < Test::Unit::TestCase\n     32:   def test_maximum\n\
    \     33:     candidate = method(:maximum)\n  => 34:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     35:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     36:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     37:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.009645371 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.68 tests/s, 103.68 assertions/s\n"
  timestamp: 1659824159
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr if arr.size <= k\n  output = arr[0...k]\n  output.sort!\n  arr[k..-1].each\
    \ do |num|\n    i = 0\n    while i < k and output[i] < num\n      i += 1\n   \
    \ end\n    if i < k\n      output.insert(i, num)\n      output.pop\n    end\n\
    \  end\n  output\nend\narr = [-3, -4, 5]\nk = 3\np maximum(arr, k)\narr = [4,\
    \ -4, 4]\nk = 2\np maximum(arr, k)\narr = [-3, 2, 1, 2, -1, -2, 1]\nk = 1\np maximum(arr,\
    \ k)\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "[-3, -4, 5]\n[-4, 4]\n[-3]\nLoaded suite /tmp/tmp338c2b7p\nStarted\nF\n\
    ===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp338c2b7p.rb:45:in `test_maximum'\n\
    \     42: class TestHumanEval < Test::Unit::TestCase\n     43:   def test_maximum\n\
    \     44:     candidate = method(:maximum)\n  => 45:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     46:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     47:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     48:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.016559135 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    60.39 tests/s, 60.39 assertions/s\n"
  timestamp: 1659824159
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return [] if arr.empty? or k.zero?\n  max, count = [], 0\n  max << arr.shift\
    \ until arr.empty? or count == k\n  max.each_with_index do |num, idx|\n    idx.upto(max.size\
    \ - 1) do |i|\n      if num < max[i]\n        max[idx], max[i] = max[i], num\n\
    \        count += 1\n        break\n      end\n    end\n  end\n  arr.each do |num|\n\
    \    max.each_with_index do |val, idx|\n      if num > val\n        max[idx] =\
    \ num\n        count += 1\n        break\n      end\n    end\n  end\n  max.sort[0...k]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpu8ctknw2\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpu8ctknw2.rb:45:in `test_maximum'\n\
    \     42:   def test_maximum\n     43:     candidate = method(:maximum)\n    \
    \ 44:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  => 45:\
    \     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     46:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     47:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     48:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.00810653 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.36 tests/s, 246.71 assertions/s\n"
  timestamp: 1659824159
- exit_code: 0
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.sort!\n    return arr[arr.length - k..-1]\nend\nputs maximum([-3, -4,\
    \ 5], 3)\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3, 5],\
    \ candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: OK
  stderr: '-4

    -3

    5

    Loaded suite /tmp/tmpt_fudqn_

    Started

    .

    Finished in 0.000457857 seconds.

    -------------------------------------------------------------------------------

    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2184.09 tests/s, 24024.97 assertions/s

    '
  stdout: ''
  timestamp: 1659824159
- exit_code: 0
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.sort.last(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1rd_sqkz

    Started

    .

    Finished in 0.000476808 seconds.

    -------------------------------------------------------------------------------

    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2097.28 tests/s, 23070.08 assertions/s

    '
  stdout: ''
  timestamp: 1659824158
- exit_code: 0
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  a = arr.sort.last(k)\n  a\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp_rd8s981

    Started

    .

    Finished in 0.000436373 seconds.

    -------------------------------------------------------------------------------

    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2291.62 tests/s, 25207.79 assertions/s

    '
  stdout: ''
  timestamp: 1659824159
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return nil if k < 1 || k > arr.size\n  arr.sort.reverse[0, k]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp8u3hjlsr\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp8u3hjlsr.rb:24:in `test_maximum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_maximum\n\
    \     23:     candidate = method(:maximum)\n  => 24:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     25:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     26:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     27:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.007170234 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.47 tests/s, 139.47 assertions/s\n"
  timestamp: 1659824159
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.first(k)\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpuhuhzjps\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpuhuhzjps.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n?  ??       ? \n===============================================================================\n\
    \nFinished in 0.007512942 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.10 tests/s, 133.10 assertions/s\n"
  timestamp: 1659824157
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  [-arr.first(k).sort, arr.last(k).sort].max\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpscdpatgm\nStarted\nE\n===============================================================================\n\
    Error: test_maximum(TestHumanEval):\n  NoMethodError: undefined method `-@' for\
    \ [-4, -3, 5]:Array\n  \n    [-arr.first(k).sort, arr.last(k).sort].max\n    \
    \ ^\n  Did you mean?  -\n/tmp/tmpscdpatgm.rb:17:in `maximum'\n/tmp/tmpscdpatgm.rb:23:in\
    \ `call'\n/tmp/tmpscdpatgm.rb:23:in `test_maximum'\n     20: class TestHumanEval\
    \ < Test::Unit::TestCase\n     21:   def test_maximum\n     22:     candidate\
    \ = method(:maximum)\n  => 23:     assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n\
    \     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n\
    \     26:     assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1,\
    \ 2, -3], 3))\n===============================================================================\n\
    \nFinished in 0.002507552 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    398.80 tests/s, 0.00 assertions/s\n"
  timestamp: 1659824159
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return [] if arr.empty?\n  return arr if k >= arr.size\n  return [arr.max]\
    \ if k == 1\n  first_mid = arr.size / 2\n  second_mid = arr.size - first_mid\n\
    \  left_arr = maximum(arr[0...first_mid], k)\n  right_arr = maximum(arr[first_mid..-1],\
    \ k)\n  sort_merge(left_arr, right_arr, k)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg9yqst8c\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpg9yqst8c.rb:30:in `test_maximum'\n\
    \     27: class TestHumanEval < Test::Unit::TestCase\n     28:   def test_maximum\n\
    \     29:     candidate = method(:maximum)\n  => 30:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     31:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     32:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     33:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.010221677 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    97.83 tests/s, 97.83 assertions/s\n"
  timestamp: 1659824159
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    return arr.sort if k == arr.length\n    soln = []\n    k.times do\n     \
    \   soln << arr.max\n        arr.delete(arr.max)\n    end\n    soln\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd2jhq9_y\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpd2jhq9_y.rb:30:in `test_maximum'\n\
    \     27:   def test_maximum\n     28:     candidate = method(:maximum)\n    \
    \ 29:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  => 30:\
    \     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     31:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     32:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     33:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[4, -4]>\n\ndiff:\n? [4, -4]\n===============================================================================\n\
    \nFinished in 0.006963461 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.61 tests/s, 287.21 assertions/s\n"
  timestamp: 1659824159
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  n = arr.size\n  raise 'Input cannot be nil' if n == 0\n  raise 'K must be valid'\
    \ if k < 1 || k > n\n  arr.sort!\n  return arr[-k..-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptlqd5rw6\nStarted\nE\n===============================================================================\n\
    Error: test_maximum(TestHumanEval): RuntimeError: K must be valid\n/tmp/tmptlqd5rw6.rb:19:in\
    \ `maximum'\n/tmp/tmptlqd5rw6.rb:37:in `call'\n/tmp/tmptlqd5rw6.rb:37:in `test_maximum'\n\
    \     34:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     35:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     36:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 37:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     38:   end\n     39: end\n===============================================================================\n\
    \nFinished in 0.001565265 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    638.87 tests/s, 6388.69 assertions/s\n"
  timestamp: 1659824159
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  min, max = -1_000, 1_000\n  arr.each do |n|\n    min = n if n < min\n    max\
    \ = n if n > max\n  end\n  hash = [max] * (max - min + 1)\n  arr.each do |n|\n\
    \    hash[n - min] = n\n  end\n  hash.select { |n| n if n != max }.first(k)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpkeg5gibj\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpkeg5gibj.rb:33:in `test_maximum'\n\
    \     30:   def test_maximum\n     31:     candidate = method(:maximum)\n    \
    \ 32:     assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n  => 33:\
    \     assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n     34:     assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n     35:     assert_equal([2,\
    \ 20, 123], candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n     36:     assert_equal([0,\
    \ 1, 2, 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n<[4, 4]> expected but\
    \ was\n<[-4, 4]>\n\ndiff:\n? [-4, 4]\n===============================================================================\n\
    \nFinished in 0.007599459 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.59 tests/s, 263.18 assertions/s\n"
  timestamp: 1659824159
