name: HumanEval_91_is_bored
language: rb
prompt: "# You'll be given a string of words, and your task is to count the number\n\
  # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
  \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
  )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
  )\n# 1\ndef is_bored(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_bored\n\
  \    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"Hello world\"\
  ))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n    assert_equal(1,\
  \ candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"bIt\"))\n\
  \    assert_equal(2, candidate.call(\"I feel good today. I will be productive. will\
  \ kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for a walk\"\
  ))\n  end\nend\n"
completions: ["  s.scan(/^I/).length\nend", "  a = s.split(\".\")\n  b = s.split(\"\
    ?\")\n  c = s.split(\"!\")\n  a.length + b.length + c.length - 3\nend", "  boring\
    \ = s.scan(/^I.*\\!|\\?|\\./).length\nend", "  s.split(/\\.|\\?|\\!/).select {\
    \ |x| x.start_with? \"I\"}.count\nend", "  s.count(\"I\")\nend", "  boredoms =\
    \ 0\n  s.split(/[?.!]/).each do |word|\n    if word.split(\" \")[0] == \"I\"\n\
    \      boredoms += 1\n    end\n  end\n  boredoms\nend", "  count = 0\n  i = 0\n\
    \  while i < s.length\n    if s[i] == \"I\"\n      count += 1\n    end\n    i\
    \ += 1\n  end\n  return count\nend", "  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?\
    \ \"I\" }\nend", "  cnt = 0\n  s.split(/[?!.]/).each do |sentence|\n    cnt +=\
    \ 1 if sentence.start_with?('I')\n  end\n  cnt\nend", "  words = s.split(' ')\n\
    \  count = 0\n  words.each do |word|\n    if word == \"I\"\n      count += 1\n\
    \    end\n  end\n  count\nend", "  boredoms = 0\n  array = s.split(\".\").map\
    \ {|x| x.strip}.delete_if{|x| x == \"\"}\n  array.each do |sentence|\n    if sentence.split(\"\
    \ \")[0] == \"I\"\n      boredoms += 1\n    end\n  end\n  boredoms\nend", "  \
    \  i = 0\n    boredoms = 0\n    while i < s.length\n        if s[i] == \"I\" &&\
    \ s[i-1] == \" \" && (s[i+1] == \" \" || s[i+1] == \"?\" || s[i+1] == \"!\" ||\
    \ s[i+1] == \".\")\n            boredoms += 1\n        end\n        i += 1\n \
    \   end\n    boredoms\nend", end, "  s.downcase.scan(/I/).count\nend", "  s.split(\"\
    .\").count{|c| c.strip.start_with?(\"I\")}\nend", "  arr = s.split(/[\\.\\?!]/)\n\
    \  arr.select { |s| s.split(\" \")[0] == \"I\" }.length\nend", "  s.split(/[\\\
    .?!]/).reduce(0) { |acc, item| acc += 1 if item.strip.start_with?(\"I\") }\nend",
  "  s.split(/\\.|\\?|\\!/).count { |sentence| sentence.split.first == \"I\" }\nend",
  "  sentence = s.split(/(\\.|\\?|!)/)\n  puts sentence.count { |s| s.include?(\"\
    I\") }\nend", "  if s.match(/I/)\n    return 1\n  else\n    return 0\n  end\n\
    end", "  s.scan(/I./).count\nend", "  boredoms = 0\n  p boredoms\n  sentences\
    \ = s.split(/[.?!]/)\n  sentences.each do |sentence|\n    first_word = sentence.split('\
    \ ')[0]\n    boredoms += 1 if first_word == 'I'\n  end\n  boredoms\nend", "  p\
    \ s.split(\".\")\n  i = 0\n  bored = 0\n  while i < s.length - 1\n    if s[i]\
    \ == \"I\" && s[i + 1] == \" \"\n      bored += 1\n    end\n    i += 1\n  end\n\
    \  bored\nend", "  s.split(\".\").join(\" \").split(\"?\").join(\" \").split(\"\
    !\").join(\" \").split(\" \").count(\"I\")\nend", end, "  boredoms = 0\n  s.split(/[.!?]/).each\
    \ do |sentence|\n    if sentence[0] == \"I\"\n      boredoms += 1\n    end\n \
    \ end\n  boredoms\nend", "  s.count(\"I\")\nend", "  count = 0\n  words = s.split(\"\
    .\")\n  words.each do |i|\n    if i.split[0] == \"I\"\n      count += 1\n    end\n\
    \  end\n  count\nend", "  s.scan(/I(.*?)[!.?\\s]/).length\nend", "  # Remove punctuation\
    \ from string.\n  s.gsub!(/[.?!]/, \"\")\n  # Split string into words.\n  words\
    \ = s.split\n  # Check for words that start with 'I' - this is a word count.\n\
    \  words.count { |word| word.start_with?('I') }\nend", "  sentences = s.split(/[!.?]/)\n\
    \  #sentences.each do |sentence|\n  #if sentence.start_with?(\"I\")\n  #count\
    \ += 1\n  #end\n  #end\n  sentences.count { |sentence| sentence.start_with?(\"\
    I\") }\nend", "  count = 0\n  s.scan(/\\bI\\b\\.?\\s?\\b/).each {|word| count\
    \ += 1}\n  count\nend", "  s.split(/[.?!]/).select { |sentence| sentence =~ /^\\\
    s*I/ }.count\nend", "  return s.scan(/\\AI/).length\nend", "\ts.split(/[!.?]+/).count\
    \ { |sentence| sentence =~ /^\\s*I/ }\nend", "  s.scan(/I/).count\nend", "  #FIXME\n\
    end", "  if s.include?(\"I\")\n    return 1\n  else\n    return 0\n  end\nend",
  "  arr = s.split(/[.?!]/)\n  count = 0\n  arr.each do |a|\n    if a.start_with?('I')\n\
    \      count += 1\n    end\n  end\n  count\nend", "  x = s.count(\".\")\n  x +=\
    \ s.count(\"?\")\n  x += s.count(\"!\")\n  if s.count(\"I\") == 0\n    x\n  else\n\
    \    x + 1\n  end\nend", "  s.split(/\\.|\\?|\\!/).select { |s| s =~ /^I/ }.count\n\
    end", "  count = 0\n  words = s.split\n  words.each_with_index do |word, i|\n\
    \    if word == \"I\"\n      count += 1\n    end\n  end\n  count\nend", "  # Code\
    \ here\nend", "  # your code here\nend", "    words = s.split(/[.!?]/)\n    words.delete_if\
    \ {|word| word[0] != \"I\"}\n    return words.length\nend", "  sentences = s.split(/[\\\
    .!?]/)\n  boredom_count = 0\n  sentences.each do |sentence|\n    if sentence.split.first\
    \ == \"I\"\n      boredom_count += 1\n    end\n  end\n  boredom_count\nend", " \
    \ s.count(\"I\")\nend", "  boredoms = s.split(/[.!?]/).grep(/\\AI\\w/)\n  boredoms.size\n\
    end", "  count = 0\n  words = s.split(/[.?!]/)\n  words.each do |word|\n    if\
    \ word[0..1] == \"I \"\n      count += 1\n    end\n  end\n  count\nend", "  count\
    \ = 0\n  arr = s.split(/[.?!]/)\n  arr.each do |i|\n    if i.start_with?(\"I\"\
    )\n      count += 1\n    end\n  end\n  count\nend", "  s.scan(/\\bI\\b/).count\n\
    end", "  s.split(/[.!?]/).count { |sentence| sentence =~ /^I/ }\nend", "\tmy_array\
    \ = s.split(/[.!?]/)\n\tmy_array.map! {|x| x.strip}\n\tmy_array.select! {|x| x.start_with?('I')}\n\
    \tmy_array.length\nend", "  return s.split(\".\").map{|x| x.strip.split(\" \"\
    )[0]}.select{|x| x == \"I\"}.count\nend", "  s.split(/[.?!]/)\n   .select { |s|\
    \ s.strip.start_with? \"I\" }\n   .size\nend", "  return s.split(/\\.|\\?|\\!/).count{|sentence|\
    \ sentence.split(\" \")[0] == \"I\"}\nend", "  # YOUR CODE HERE\nend", "  array\
    \ = s.split(/[.?!]/)\n  count = 0\n  array.each do |sentence|\n    count += 1\
    \ if sentence.start_with?(\"I\")\n  end\n  count\nend", "  boredoms = 0\n  s.split(/[!.?]/).each\
    \ do |sub|\n    if sub.include?('I')\n      sub.split.each do |word|\n       \
    \ if word == 'I'\n          boredoms += 1\n        end\n      end\n    end\n \
    \ end\n  boredoms\nend", "\nend", "  s.split(/\\.|\\?|\\!/).select { |s| s.strip\
    \ =~ /^I/ }.size\nend", "    sentence_array = s.split(/[.!?]/).collect {|x| x.strip.downcase}\n\
    \    bored_count = 0\n    sentence_array.each do |sentence|\n        if sentence.split('\
    \ ')[0] == \"i\"\n            bored_count += 1\n        end\n    end\n    return\
    \ bored_count\nend", "  boredoms = 0\n  s.split(/\\.|\\?|\\!/).each do |s|\n \
    \   boredoms += 1 if s.strip.start_with? \"I\"\n  end\n  boredoms\nend", "  arr\
    \ = s.split(\" \")\n  counter = 0\n  arr.each do |word|\n    if word == \"I\"\n\
    \      counter += 1\n    end\n  end\n  counter\nend", "  sentence = s.split(/\\\
    .|\\?|\\!/).select { |word| word.include?(\"I\") }\n  sentence.length\nend", "\t\
    s.gsub!(/[.?!]/,'')\n\ts.split.count{|word| word == \"I\"}\nend", "  s.split(/[.?!]/).count{|s|\
    \ s.match(/^I/)}\nend", "  a = s.split(/(\\.)|(\\?)|(\\!)/)\n  a.delete_if{|x|\
    \ x==\".\" || x==\"?\" || x==\"!\"}\n  a.delete_if{|x| x==\"\"}\n  a.delete_if{|x|\
    \ x.start_with?(\"I\") == false}\n  return a.count\nend", "  boredoms = 0\n  sentences\
    \ = s.split(/[!?.]/)\n  sentences.each do |sentence|\n    boredoms += 1 if sentence.split[0]\
    \ == \"I\"\n  end\n  boredoms\nend", "  counter = 0\n  words = s.split\n  words.each\
    \ do |i|\n    if i == \"I\"\n      counter += 1\n    end\n  end\n  return counter\n\
    end", "\ts.split(/[!.?]/).select { |s| s =~ /^I\\s/ }.size\nend", "  # Your code\
    \ here\nend", "  boredoms = 0\n  sentence = ''\n  (0...s.length).each do |i|\n\
    \    if s[i] == '.' || s[i] == '?' || s[i] == '!'\n      if sentence[0...2] ==\
    \ 'I '\n        boredoms += 1\n      end\n      sentence = ''\n    else\n    \
    \  sentence += s[i]\n    end\n  end\n  return boredoms\nend", "  s.split(\".\"\
    ).join(\" \").split(\"?\").join(\" \").split(\"!\").join(\" \").split(\" \").count(\"\
    I\")\nend", "  # YOUR CODE HERE\nend", "  s.count('I')\nend", "\t# boredoms =\
    \ 0\n\t# if s.include?('!')\n\t# \tfirst, *rest = s.split('!')\n\t# \tfirst.split('.').each\
    \ { |i| boredoms += 1 if i.start_with?('I') }\n\t# \trest.each { |i| boredoms\
    \ += i.split('.').count { |j| j.start_with?('I') } }\n\t# elsif s.include?('?')\n\
    \t# \tfirst, *rest = s.split('?')\n\t# \tfirst.split('.').each { |i| boredoms\
    \ += 1 if i.start_with?('I') }\n\t# \trest.each { |i| boredoms += i.split('.').count\
    \ { |j| j.start_with?('I') } }\n\t# else\n\t# \tboredoms = s.split('.').count\
    \ { |i| i.start_with?('I') }\n\t# end\n\t# boredoms\n\t# # return count of sentences\
    \ that start with 'I'\n\t# s.split(/[\\.\\?!]/).count { |sentence| sentence.start_with?('I')\
    \ }\nend", "  s.split(/[.?!]/).select { |sentence| sentence.start_with?('I') }.count\n\
    end", "  boredoms = 0\n  sentences = s.split(/[\\.\\?\\!]/)\n  sentences.each\
    \ do |sentence|\n    words = sentence.split(\" \")\n    if words[0] == \"I\"\n\
    \      boredoms += 1\n    end\n  end\n  boredoms\nend", "  s.split(\".\").map\
    \ { |sentence| sentence.strip }.select { |sentence| sentence.start_with?(\"I\"\
    ) }.length\nend", "  bored = 0\n  s.split(\".\").each do |sentence|\n    bored\
    \ += 1 if sentence.strip[0..1] == \"I \"\n  end\n  bored\nend", "  s.split(/[\\\
    .\\?!]/).select { |sentence| sentence.split.first == \"I\" }.size\nend", "  count\
    \ = 0\n  s.split(/(\\.|\\?|!)/).each do |word|\n    if word.include?(\"I\")\n\
    \      count += 1\n    end\n  end\n  count\nend", "  s.gsub(\"?\", \".\").gsub(\"\
    !\", \".\").split(\".\").count { |sentence| sentence.strip.split(\" \").first\
    \ == \"I\" }\nend", "  return s.split(\" \").find_all { |w| w[0] == \"I\" }.count\n\
    end", "  s.split(/\\.|\\?|\\!/).select { |s| s =~ /^\\s*I\\s+/ }.count\nend",
  "  boredoms = 0\n  sentence = s.split(/[?!.]/)\n  sentence.each do |word|\n    if\
    \ word.split[0] == \"I\"\n      boredoms += 1\n    end\n  end\n  boredoms\nend",
  "  # Your code here\nend", "  boredoms = 0\n  parts = s.split(/[!.?\\s]/).reject\
    \ { |c| c.empty? }\n  parts.each { |word| boredoms += 1 if word.downcase == \"\
    i\" }\n  boredoms\nend", "    count = 0\n    i = 0\n    while i < s.length\n \
    \       if (s[i] == \"I\")\n            count += 1\n        end\n        i +=\
    \ 1\n    end\n    return count\nend", "  sentences = s.split(/\\.|\\?|!/)\n  bored\
    \ = 0\n  sentences.each do |s|\n    bored += 1 if s.split(\" \")[0] == \"I\"\n\
    \  end\n  bored\nend", "  new_s = s.split('.')\n  count = 0\n  new_s.each do |s|\n\
    \    count += 1 if s.split(' ')[0] == 'I'\n  end\n  count\nend", "  s.split(/[.!?]/).select\
    \ { |e| e =~ /^\\s*I/ }.size\nend", end, "  boredoms = 0\n  boredoms += 1 if s[0]\
    \ == \"I\"\n  boredoms += 1 if s[-1] == \"I\"\n  (0...s.length).each do |i|\n\
    \    if s[i] == \"?\" or s[i] == \"!\" or s[i] == \".\"\n      if s[i + 1] ==\
    \ \"I\"\n        boredoms += 1\n      end\n    end\n  end\n  boredoms\nend", " \
    \ words = s.scan(/[A-Za-z]+/).select { |word| word == \"I\" }\n  words.length\n\
    end", "  arr = s.split(/[.!?]/)\n  arr.count { |x| x.split.first == \"I\" }\n\
    end", "  # YOUR CODE HERE\nend", "  count = 0\n  s.split(/[\\.\\?!]/).each do\
    \ |word|\n    if word.strip.start_with?('I')\n      count += 1\n    end\n  end\n\
    \  count\nend", "  arr = s.split(/[.?!]/)\n  arr.select { |str| str.match(/^\\\
    s*I/) }.count\nend", "  arr = s.split(\" \")\n  i = 0\n  j = 0\n  counter = 0\n\
    \  while i < arr.length\n    if arr[i].include?(\".\") || arr[i].include?(\"?\"\
    ) || arr[i].include?(\"!\")\n      counter += 1\n    end\n    i += 1\n  end\n\
    \  return counter\nend", "  boredoms = s.split(/[.!?]/).map { |i| i.split(\" \"\
    ) }.map { |j| j[0] }.count(\"I\")\nend", "  total = 0\n  array = s.split('.')\n\
    \  array.each do |s|\n    s.split('?').each do |s|\n      total += 1 if s.start_with?('I')\n\
    \    end\n  end\n  total\nend", "  bored = 0\n  s.split(/[\\.?!]/).each do |x|\n\
    \    if x.strip.start_with?(\"I\")\n      bored += 1\n    end\n  end\n  bored\n\
    end", "  answer = 0\n  words = s.split\n  # words = s.split(/[.?!]/)\n  words.each\
    \ do |word|\n    if word == \"I\"\n      answer += 1\n    end\n  end\n  answer\n\
    end", "  boredoms = 0\n  s.split(/[.?!]/)\n  s.each do |sentence|\n    if sentence.split.first\
    \ == \"I\"\n      boredoms += 1\n    end\n  end\n  boredoms\nend", "  count =\
    \ 0\n  s.split(' ').each do |word|\n    if word.include?('.')\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nputs is_bored(\"The sky is blue. The sun is\
    \ shining. I love this weather\")", "  count = 0\n  arr = s.split(/[\\W]/).reject\
    \ { |c| c.empty? }\n  arr.each do |w|\n    if w.start_with?(\"I\")\n      count\
    \ += 1\n    end\n  end\n  count\nend", "  s.split(/[.?!]/).select { |sentence|\
    \ sentence.strip.start_with?('I') }.count\nend", "  array = s.split(/[.?!]/)\n\
    \  count = 0\n  array.each do |word|\n    if word.include? \"I\"\n      count\
    \ += 1\n    end\n  end\n  return count\nend", "\nend", "  if s.include? \"I\"\n\
    \    count = s.split(/\\.|\\?|\\!/).select {|e| e.start_with? \"I\"}.count\n \
    \ else\n    count = 0\n  end\n  return count\nend", "  strings = s.split(/\\.|\\\
    ?|\\!/).map(&:strip)\n  boredoms = strings.select{|str| str.split(\" \")[0] ==\
    \ \"I\"}\n  boredoms.length\nend", "  split_arr = s.split(\".\")\n  counter =\
    \ 0\n  for i in 0..split_arr.length-1\n    if split_arr[i].include?(\"I\")\n \
    \     counter += 1\n    end\n  end\n  return counter\nend", "  s.split(\".\").map{|x|\
    \ x.lstrip}.select{|x| x.start_with?(\"I\")}.length\nend", "  s.scan(/I /).count\n\
    end", "  #your code here\nend", "  s.split(/\\.|\\?|\\!/).select { |sentence|\
    \ sentence.split(' ')[0] == 'I' }.count\nend", "  num = 0\n  s.split(/[!\\?\\\
    .]/).map do |sentence|\n    num += 1 if sentence.match(/^\\s?I/)\n  end\n  num\n\
    end", "  split = s.split(/[.!?]/)\n  count = 0\n  split.each do |word|\n    if\
    \ word.match(/\\AI\\b/)\n      count += 1\n    end\n  end\n  count\nend", end,
  "  boring_sentences = s.split(/[\\?|\\!|\\.]/)\n  count = 0\n  boring_sentences.each\
    \ do |sentence|\n    count += 1 if sentence.strip.start_with?('I')\n  end\n  count\n\
    end", "  s.split(/\\.|\\?|\\!/).count { |sentence| sentence.strip.start_with?('I')\
    \ }\nend", "  s.split(/[.?!]/).count{|x| x.start_with? \"I\"}\nend", "  s.split(/[.!?]/).count\
    \ { |e| e.start_with? \"I\" }\nend", "  s.split(/[.?!]/).select { |e| e =~ /^\\\
    s*I/ }.size\nend", "  s.count(\"I\")\nend", "  s.split(/[.!?]/).count { |x| x\
    \ =~ /^\\s*I/ }\nend", "  s.split(/\\.|\\?|\\!/).count { |x| x.strip.start_with?\
    \ \"I\" }\nend", "\tarray = s.split(\".\")\n\tboredoms = 0\n\tarray.each do |x|\n\
    \t\tboredoms += 1 if x.include?(\"I\")\n\tend\n\tboredoms\nend", "  s.split(\"\
    .\").map { |x| x.split(\"?\") }.flatten.map { |x| x.split(\"!\") }.flatten.map\
    \ { |x| x.split }.select { |x| x[0] == \"I\" }.length\nend", "  s.split(/[.!?]/).select\
    \ { |sentence| sentence =~ /^I/ }.count\nend", "  s.scan(/I\\b/).length\nend",
  "  s.downcase.split(/\\.|\\?|\\!/).count { |sentence| sentence[0] == \"i\" }\nend",
  "  return s.scan(/I\\w/).count\nend", "  s.scan(/[I][^\\?|\\.|\\!]*/).length\nend",
  "\nend", "  words = s.split\n  count = 0\n  words.each do |x|\n    if x.downcase\
    \ == \"i\"\n      count += 1\n    end\n  end\n  return count\nend", "  sentence\
    \ = s.split(/[\\.\\?!]/)\n  boredom = 0\n  sentence.each do |word|\n    if word.split('\
    \ ')[0] == 'I'\n      boredom += 1\n    end\n  end\n  boredom\nend", "  # Your\
    \ code here!\nend", "  # your code here\nend", "\ts = s.split(\" \")\n\tcount\
    \ = 0\n\ts.each do |x|\n\t\tif x.include? \"I\"\n\t\t\tcount = count + 1\n\t\t\
    end\n\tend\n\treturn count\nend", "  # Code here\nend", "  x = 0\n  y = 0\n  z\
    \ = 1\n  s = s.split(\"\")\n  i = s.index(\"I\")\n  if i == nil\n    return 0\n\
    \  else\n    i = i - 1\n    s.reverse!\n    j = s.index(\"!\")\n    k = s.index(\"\
    ?\")\n    l = s.index(\".\")\n    if (j == nil) && (k == nil) && (l == nil)\n\
    \      return 1\n    else\n      while (z != 0)\n        if (i >= j) && (j !=\
    \ nil)\n          i = i - j\n          j = nil\n        end\n        if (i >=\
    \ k) && (k != nil)\n          i = i - k\n          k = nil\n        end\n    \
    \    if (i >= l) && (l != nil)\n          i = i - l\n          l = nil\n     \
    \   end\n        if (j == nil) && (k == nil) && (l == nil)\n          z = 0\n\
    \        end\n      end\n      if i > 0\n        x = 1\n      end\n    end\n \
    \ end\n  return x\nend", "  s.split(/\\.|\\?|\\!/).count { |s| s.strip.start_with?\
    \ \"I\" }\nend", "  # YOUR CODE HERE\nend", "  s.split(/[!?.]/).count { |sentence|\
    \ sentence.strip.start_with?('I') }\nend", "  s.count(\"I\")\nend", "  s.split(/[.?!]/).count\
    \ { |x| x.start_with?(\"I\") }\nend", "  s.split(/[.?!]/).inject(0) { |boredoms,\
    \ sentence| sentence.lstrip[0] == \"I\" ? boredoms + 1 : boredoms }\nend", " \
    \ bored = 0\n  arr = s.split(/[.?!]/).map(&:strip)\n  arr.each do |s|\n    if\
    \ s.start_with?('I')\n      bored += 1\n    end\n  end\n  bored\nend", "  boredoms\
    \ = 0\n  i = 0\n  while i < s.length\n    if s[i..i+1] == \"I \"\n      boredoms\
    \ += 1\n    end\n    i += 1\n  end\n  boredoms\nend", "  new_array = s.split(/[.?!]/)\n\
    \  new_array.map! {|value| value.strip}\n  new_array.map! {|value| value.split}\n\
    \  new_array.count {|value| value[0] == \"I\"}\nend", "  sentences = s.split(/[.?!]/)\n\
    \  sentences.select{|sentence| sentence.strip.start_with?('I')}.count\nend", " \
    \ s.split(/[.?!]/).count { |s| s =~ /^\\s*I\\s/ }\nend", "  arr = s.split(\" \"\
    )\n  count = 0\n  arr.each do |word|\n    if word == \"I\"\n      count += 1\n\
    \    end\n  end\n  count\nend", "  s.split(/[.?!]/).select { |str| str.strip.start_with?('I')\
    \ }.count\nend", "  s.split(/[!.?\\s]/).map(&:strip).count(\"I\")\nend", "  boredoms\
    \ = 0\n  s.split(/[.?!]/).each do |i|\n    boredoms += 1 if i.split.first == \"\
    I\"\n  end\n  boredoms\nend", "  return s.scan(/I\\s/).count\nend", "  boredoms\
    \ = 0\n  s.split(/[?!.]/).each do |phrase|\n    boredoms += 1 if phrase.start_with?(\"\
    I\")\n  end\n  boredoms\nend", "  sentences = s.split(/[.!?]/)\n  sum = 0\n  sentences.each\
    \ do |sentence|\n    if sentence.strip.downcase.start_with? \"i\"\n      sum +=\
    \ 1\n    end\n  end\n  sum\nend", "  # TODO\nend", "  s.split(/[.!?]/)\n   .map(&:strip)\n\
    \   .select { |w| w.start_with?(\"I\") }\n   .size\nend", "    sentences = s.split(/[?.!]/)\n\
    \    count = 0\n    sentences.each do |sentence|\n        count += 1 if sentence.strip.split('\
    \ ')[0] == 'I'\n    end\n    count\nend", "  s.split(/[.?!]/).count { |sentence|\
    \ sentence.strip.start_with?('I') }\nend", "  sentences = s.split(/[.?!]/)\n \
    \ count = 0\n  sentences.each do |sentence|\n    count += 1 if sentence.split[0]\
    \ == \"I\"\n  end\n  count\nend", "  sentences = s.split(/\\.|\\?|\\!/).map(&:strip)\n\
    \  sentences.select { |s| s[0] == 'I' }.size\nend", "  boredoms = 0\n  (s.split(/[.?!]/)).each\
    \ do |sentence|\n    if sentence.strip.start_with?(\"I\")\n      boredoms += 1\n\
    \    end\n  end\n  boredoms\nend", "  boredoms = 0\n  i = 0\n  while i < s.length\
    \ do\n    if s[i] == \"I\"\n      boredoms += 1\n    end\n    i += 1\n  end\n\
    \  boredoms\nend", "  s.split(/\\.|\\?|\\!/).inject(0) { |sum, sen| sen.start_with?(\"\
    I\") ? sum + 1 : sum }\nend", "  # YOUR CODE HERE\nend", "  boredoms = 0\n  sentences\
    \ = s.split(/[.!?]/)\n  sentences.each do |sentence|\n    if sentence.split.first\
    \ == \"I\"\n      boredoms += 1\n    end\n  end\n  boredoms\nend", "  s.split(/[.!?]/).select\
    \ { |sentence| sentence.strip.start_with?(\"I\") }.size\nend", "  s.count \"I\"\
    \nend", "  return s.scan(/[I]\\s/).count\nend", "  s.count(\"I\")\nend", "  s.split(/[.?!]/).grep(/^\\\
    s*I/).size\nend", "  s.split(/[.!?]/).count { |x| x.start_with?(\"I\") }\nend",
  "  counter = 0\n  delimiters = ['.', '?', '!']\n  s.split.each_with_index do |word,\
    \ index|\n    next if index == 0 && word.downcase != 'i'\n    counter += 1 if\
    \ word.downcase == 'i' && delimiters.include?(s[index - 1])\n  end\n  counter\n\
    end", "  if s.include?(\"I\")\n    boredoms = s.split(\".?\")\n    boredoms.count\n\
    \  else\n    0\n  end\nend", "    array = s.split(/[.?!]/)\n    count = 0\n  \
    \  array.each do |sentence|\n        if sentence.strip.start_with?(\"I\")\n  \
    \          count += 1\n        end\n    end\n    return count\nend", "  count\
    \ = 0\n  s.split(\".\").each do |sentence|\n    if sentence.split(\" \")[0] ==\
    \ \"I\"\n      count += 1\n    end\n  end\n  count\nend", "\ts.scan(/\\bI\\b(?!\\\
    s*\\w+\\s*=)/).count\nend", "  s.scan(/\\bI\\b/).count\nend", "  s.split(\".\"\
    ).select { |x| x[0..1] == \"I \"}.length\nend", "  boredoms = 0\n  sentence =\
    \ s.split(\".\")\n  sentence.each do | sentence |\n    sentence = sentence.split(\"\
    ?\")\n    sentence.each do | sentence |\n      sentence = sentence.split(\"!\"\
    )\n      sentence.each do | sentence |\n        if sentence.start_with?(\"I\"\
    )\n          boredoms += 1\n        end\n      end\n    end\n  end\n  return boredoms\n\
    end", "  sentences = s.split(/[!?.]/)\n  boredoms = 0\n  sentences.each do |sentence|\n\
    \    if sentence.start_with?('I')\n      boredoms += 1\n    end\n  end\n  boredoms\n\
    end", "  sentences = s.split(/[.?!]/)\n  sentences.map { |sentence| sentence.split\
    \ }.select { |sentence| sentence[0] == \"I\" }.length\nend", "  return s.split(/\\\
    .|\\?|\\!/).map{|x| x.lstrip}.select{|x| x[0] == \"I\"}.length\nend", "  s.split(/[.?!]/).count\
    \ { |sentence| sentence.split.first == \"I\" }\nend", "  s.split(/[.?!]/).inject(0)\
    \ { |sum, s| s =~ /^I/ ? sum + 1 : sum }\nend", "  return 0 if s.empty?\n  s.gsub!('.',\
    \ ' .')\n  s.gsub!('?', ' ?')\n  s.gsub!('!', ' !')\n  words = s.split(' ')\n\
    \  bored = 0\n  words.each_with_index do |word, i|\n    bored += 1 if word.start_with?('I')\
    \ && words[i - 1] == '.'\n  end\n  bored\nend", "  s.split(/[.!?]/).select { |sentence|\
    \ sentence.split.first == \"I\" }.size\nend", "  s.scan(/\\sI\\w+\\s/).length\n\
    end", "  boredoms = 0\n  s.split(/[.!?]/).each do |sentence|\n    boredoms +=\
    \ 1 if sentence.split.first == \"I\"\n  end\n  boredoms\nend", "  s.split(/[!?.]/).map\
    \ { |sentence| sentence.strip.start_with?(\"I\") }.count(true)\nend", "  # complete\
    \ the code below\n  # p s.split(/[?.!]/)\n  # p s.split(/[?.!]/).map(&:strip)\n\
    \  # p s.split(/[?.!]/).map(&:strip).select { |e| e[0] == \"I\" }\n  s.split(/[?.!]/).map(&:strip).select\
    \ { |e| e[0] == \"I\" }.count\nend\np is_bored(\"This is great!\")\np is_bored(\"\
    This is not great!\")\np is_bored(\"I am bored.\")\np is_bored(\"I am bored! I\
    \ am bored! I am bored!\")\np is_bored(\"I am not bored.\")\np is_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")", "  num_boredoms =\
    \ 0\n  # split based on sentence delimiters\n  sentences = s.split(/[\\.!\\?]/)\n\
    \  sentences.each do |sentence|\n    # strip out all whitespace\n    sentence.strip!\n\
    \    # look for \"I\" in the beginning\n    if sentence[0,1] == \"I\"\n      num_boredoms\
    \ += 1\n    end\n  end\n  return num_boredoms\nend", "  sentence = s.split(/[.?!]/)\n\
    \  sentence.delete(\"\")\n  count = 0\n  sentence.each do |item|\n    count +=\
    \ 1 if item.split[0] == \"I\"\n  end\n  count\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
