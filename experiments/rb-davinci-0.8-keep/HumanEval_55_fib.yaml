name: HumanEval_55_fib
language: rb
prompt: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n\
  # >>> fib(8)\n# 21\ndef fib(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
  \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
  \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
  \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
completions: ["  return 1 if n == 1\n  return 0 if n == 0\n  fib(n-1) + fib(n-2)\n\
    end", "  return 0 if n == 0\n  return 1 if n == 1\n  fib(n-1) + fib(n-2)\nend",
  "    return 0 if n <= 0\n    return 1 if n == 1", "  if n <= 2\n    return 1\n \
    \ else\n    return fib(n-1) + fib(n-2)\n  end\nend", "  if n == 1\n    return\
    \ 1\n  elsif n == 2\n    return 1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend",
  "    return n if n <= 1\n    return fib(n-1) + fib(n-2)\nend", "  return n if n\
    \ < 2\n  fib(n-1) + fib(n-2)\nend", "  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\n\
    end", "\tif n == 1\n\t\treturn 1\n\telsif n == 2\n\t\treturn 1\n\tend\n\t\n\t\
    result = 0\n\ti = 2\n\ta = 1\n\tb = 1\n\twhile i < n\n\t\tresult = a + b\n\t\t\
    a = b\n\t\tb = result\n\t\ti += 1\n\tend\n\treturn result\nend", "  return 1 if\
    \ n == 1 || n == 2\n  num1 = 1\n  num2 = 1\n  (n - 2).times do\n    temp = num1\n\
    \    num1 = num2\n    num2 = temp + num2\n  end\n  num2\nend", "  if n <= 2\n\
    \    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  fib_seq = [0, 1]\n  2.upto(n)\
    \ do |i|\n    fib_seq << fib_seq[i-1] + fib_seq[i-2]\n  end\n  fib_seq[n]\nend",
  "  raise ArgumentError.new(\"non-negative integers only\") if n < 0\n  return n\
    \ if n <= 1\n  fib(n-1) + fib(n-2)\nend", "  # TODO: return the nth Fibonacci\
    \ number\n  if n == 0\n    return 0\n  elsif n == 1\n    return 1\n  else\n  \
    \  return fib(n-1) + fib(n-2)\n  end\nend", "  return n if n < 2\n  fib(n-1) +\
    \ fib(n-2)\nend", "  return n if n < 2\n  fib(n-1) + fib(n-2)\nend", "  if n <=\
    \ 2\n    return 1\n  else\n    a = 1\n    b = 1\n    c = 0\n    (n-2).times do\n\
    \      c = a + b\n      a = b\n      b = c\n    end\n    return c\n  end\nend",
  "  return 0 if n == 0\n  return 1 if n == 1\n  return fib(n-1) + fib(n-2)\nend",
  "  return 0 if n == 0\n  return 1 if n == 1\n  fib(n-1) + fib(n-2)\nend", "  return\
    \ 1 if n == 1\n  return 1 if n == 2\n  return fib(n-1) + fib(n-2)\nend", "  n\
    \ <= 2 ? 1 : fib(n-1) + fib(n-2)\nend", "    # check if input is greater than\
    \ 2\n    if n > 2\n        # call function on n-1 and n-2, returning the sum\n\
    \        fib(n-1) + fib(n-2)\n    else\n        # otherwise, return 1\n      \
    \  1\n    end\nend", "  return nil if n <= 0\n  return 1 if n == 1 || n == 2\n\
    \  return fib(n-1) + fib(n-2)\nend", "  return 1 if n == 1 || n == 2\n  return\
    \ fib(n-1) + fib(n-2)\nend", "  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend",
  "  return 0 if n == 0\n  a, b = 0, 1\n  n.times do\n    a, b = b, a + b\n  end\n\
    \  a\nend", "  n.times.inject([0, 1]) { |fib| fib << fib.last(2).inject(:+) }.last\n\
    end", "  return n if n < 2\n  fib(n-1) + fib(n-2)\nend", "  if n == 1 || n ==\
    \ 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  return n if n < 2\n\
    \  fib(n-1) + fib(n-2)\nend", "  if n <= 1\n    n\n  else\n    fib(n-1) + fib(n-2)\n\
    \  end\nend", "  fibs = [0, 1]\n  2.upto(n) do |i|\n    fibs[i] = fibs[i-1] +\
    \ fibs[i-2]\n  end\n  fibs[n]\nend", "  return 0 if n == 0\n  return 1 if n ==\
    \ 1", "  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend", "  if n == 1 || n ==\
    \ 2\n    return 1\n  end\n  fib(n-1) + fib(n-2)\nend", "  if n <= 1\n    return\
    \ n\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend", "  if n == 1 || n ==\
    \ 2\n    return 1\n  end\n  fib(n-1) + fib(n-2)\nend", "  return 1 if n == 1\n\
    \  return 1 if n == 2\n  return fib(n-1) + fib(n-2)\nend", "  return 1 if n ==\
    \ 1\n  return 1 if n == 2\n  f = 1\n  f1 = 1\n  f2 = 1\n  (3..n).each do |i|\n\
    \    f = f1 + f2\n    f2 = f1\n    f1 = f\n  end\n  f\nend", "  return 1 if n\
    \ == 1\n  fib(n-1) + fib(n-2)\nend", "  return 0 if n == 0\n  return 1 if n ==\
    \ 1\n  return fib(n-1) + fib(n-2)\nend", "  if n == 1\n    return 1\n  elsif n\
    \ == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend", "\t\
    # your code here\n\tif n == 1\n\t\treturn 1\n\telsif n == 2\n\t\treturn 1\n\t\
    else\n\t\treturn fib(n-1) + fib(n-2)\n\tend\nend", "\tif n == 1\n\t\t1\n\telsif\
    \ n == 2\n\t\t1\n\telse\n\t\tfib(n-1) + fib(n-2)\n\tend\nend", "  fib = [0, 1]\n\
    \  2.upto(n-1) do |n|\n    fib << fib[n-1] + fib[n-2]\n  end\n  fib[n]\nend",
  "  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend", "  return\
    \ 0 if n == 0\n  return 1 if n == 1", "  return 1 if n == 1 || n == 2\n  return\
    \ fib(n-1) + fib(n-2)\nend", "    # if n == 1\n    #     return 1\n    # elsif\
    \ n == 2\n    #     return 1\n    # else\n    #     return fib(n-1) + fib(n-2)\n\
    \    # end\n    # Recursion is too slow\n    a = 0\n    b = 1\n    n.times do\n\
    \        temp = a\n        a = b\n        b = temp + b\n    end\n    return a\n\
    end", "  num1 = 0\n  num2 = 1\n  fib = 0\n  for i in 0..n\n    fib = num1 + num2\n\
    \    num1 = num2\n    num2 = fib\n  end\n  fib\nend", "\tarr = [0,1]\n\tn.times\
    \ do |i|\n\t\tarr[i+2] = arr[i] + arr[i+1]\n\tend\n\tputs arr[n]\nend", "  return\
    \ 0 if n == 0\n  return 1 if n == 1\n  return fib(n-1) + fib(n-2)\nend", "  return\
    \ 1 if n <= 2\n  fib(n-1) + fib(n-2)\nend", "  return 1 if n < 3\n  fib(n-1) +\
    \ fib(n-2)\nend", "  return 0 if n == 0\n  return 1 if n == 1", "  if n < 2\n\
    \    return n\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend", "  if n ==\
    \ 1\n    1\n  elsif n == 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend",
  "  return 1 if n == 1 || n == 2\n  fib(n-1) + fib(n-2)\nend", "\treturn n if n ==\
    \ 0 || n == 1\n\tfib(n-1) + fib(n-2)\nend", "  fibs = [0, 1]\n  while fibs.length\
    \ < n\n    fibs << fibs[-1] + fibs[-2]\n  end\n  fibs[n - 1]\nend", "  return\
    \ n if n <= 1\n  fib(n-1) + fib(n-2)\nend", "  return n if n <= 1\n  fib(n-1)\
    \ + fib(n-2)\nend", "  if n <= 1\n    return n\n  else\n    return fib(n-1) +\
    \ fib(n-2)\n  end\nend", "    if n <= 1\n        return n\n    else\n        return\
    \ fib(n-1) + fib(n-2)\n    end\nend", "  return n if n < 2\n  return fib(n-1)\
    \ + fib(n-2)\nend", "  return 0 if n == 0\n  return 1 if n == 1\n  fib(n-1) +\
    \ fib(n-2)\nend", "  n == 1 || n == 2 ? 1 : fib(n-1) + fib(n-2)\nend", "  a, b\
    \ = 0, 1\n  n.times do\n    a, b = b, a + b\n  end\n  a\nend", "  return 1 if\
    \ n == 1\n  return 1 if n == 2\n  return fib(n-1) + fib(n-2)\nend", "  return\
    \ 1 if n <= 2\n  fib(n-1) + fib(n-2)\nend", "    if n == 1\n        return 1\n\
    \    end\n    if n == 2\n        return 1\n    end\n    if n > 2\n        return\
    \ fib(n-1) + fib(n-2)\n    end\nend", "  if n == 1\n    return 1\n  elsif n ==\
    \ 2\n    return 1\n  end\n  fib(n-1) + fib(n-2)\nend", "\treturn n if n < 2\n\t\
    fib(n-1) + fib(n-2)\nend", "  if n <= 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n\
    \  end\nend", "  if n <= 1\n    return n\n  else\n    return fib(n-1) + fib(n-2)\n\
    \  end\nend", "\treturn n if n <= 1\n\treturn fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2\n  fib(n-1) + fib(n-2)\nend", "  return 1 if n == 1 || n == 2\n \
    \ fib(n-1) + fib(n-2)\nend", "  if n == 1 || n == 2\n    return 1\n  else\n  \
    \  return fib(n-1) + fib(n-2)\n  end\nend", "  return 0 if n == 0\n  return 1\
    \ if n == 1\n  fib(n-1) + fib(n-2)\nend", "  if n == 1 || n == 2\n    return 1\n\
    \  else\n    return fib(n-1) + fib(n-2)\n  end\nend", "  return n if n <= 1\n\
    \  fib(n-1) + fib(n-2)\nend", "  prev_prev = 0\n  prev = 1\n  curr = 1\n  (n -\
    \ 1).times do\n    prev_prev = prev\n    prev = curr\n    curr = prev_prev + prev\n\
    \  end\n  curr\nend", end, "  if n == 1\n    return 1\n  elsif n == 2\n    return\
    \ 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend", "  n<=1 ? n : fib(n-1)\
    \ + fib(n-2)\nend\nputs fib(1)", "  # your code here\nend", "  if n <= 2\n   \
    \ return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend", "  return 1 if\
    \ n == 1\n  return 0 if n == 0\n  fib(n-1) + fib(n-2)\nend", "  return n if n\
    \ <= 1\n  fib(n-1) + fib(n-2)\nend", "  return n if n < 2\n  fib(n-1) + fib(n-2)\n\
    end", "    if n == 1\n        1\n    elsif n == 2\n        1\n    else\n     \
    \   fib(n-1) + fib(n-2)\n    end\nend", "  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end", "  def f(a, b, count)\n    return a if count == 1\n    return f(b, a + b,\
    \ count - 1)\n  end\n  return f(0, 1, n)\nend", "  return 1 if n == 1 || n ==\
    \ 2\n  fib(n-1) + fib(n-2)\nend", "    if n == 1\n        return 1\n    elsif\
    \ n == 2\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n   \
    \ end\nend", "\t# TODO\n\tfib = [0, 1]\n\t(n-1).times do\n\t\tfib << fib[-1] +\
    \ fib[-2]\n\tend\n\treturn fib[n]\nend", "  if n == 1\n    return 1\n  elsif n\
    \ == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend", " \
    \ fib_list = [0, 1]\n  return fib_list[n] if n <= 1\n  n.times do |idx|\n    fib_list\
    \ << fib_list[idx] + fib_list[idx + 1] if idx >= 1\n  end\n  fib_list[n]\nend",
  "  if n == 1 || n == 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", " \
    \ return 0 if n == 0\n  return 1 if n == 1\n  return fib(n-1) + fib(n-2)\nend",
  "  raise Exception.new('n must be positive') if n < 1\n  return n if n < 3\n  fib(n-1)\
    \ + fib(n-2)\nend", "\ti, j = 0, 1\n\tn.times { i, j = j, i + j }\n\ti\nend",
  "  arr = [0, 1]\n  (2..n).each do |num|\n    arr << arr[num - 1] + arr[num - 2]\n\
    \  end\n  arr[n]\nend", "  if n == 1 || n == 2\n    1\n  else\n    fib(n-1) +\
    \ fib(n-2)\n  end\nend", "  if n < 0\n    raise \"Input is not valid.\"\n  elsif\
    \ n <= 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend", " \
    \ f1 = 0\n  f2 = 1\n  return f1 if n == 1\n  return f2 if n == 2\n  (3..n).each\
    \ do\n    f = f1 + f2\n    f1 = f2\n    f2 = f\n  end\n  f2\nend", "  return 0\
    \ if n == 0\n  return 1 if n == 1\n  num1 = 0\n  num2 = 1\n  n.times do\n    num1,\
    \ num2 = num2, num1 + num2\n  end\n  num1\nend", "  if n <= 2\n    return 1\n\
    \  else\n    return fib(n-1) + fib(n-2)\n  end\nend", "  if n == 1 || n == 2\n\
    \    return 1\n  end\n  return fib(n-1) + fib(n-2)\nend", "  if n == 1 || n ==\
    \ 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  return 1 if n ==\
    \ 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend", "  if n == 1 || n == 2\n\
    \    return 1\n  end\n  return fib(n-1) + fib(n-2)\nend", "  return 0 if n ==\
    \ 0\n  return 1 if n == 1", "  return 1 if n == 1\n  return 1 if n == 2\n  return\
    \ fib(n-1) + fib(n-2)\nend", "  return 1 if n == 1\n  return fib(n-1) + fib(n-2)\n\
    end", "  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return\
    \ fib(n-1) + fib(n-2)\n  end\nend", "  if n == 1 || n == 2\n    return 1\n  else\n\
    \    return fib(n-1) + fib(n-2)\n  end\nend", "\tif n == 1\n\t\treturn 1\n\telsif\
    \ n == 2\n\t\treturn 1\n\telse\n\t\treturn fib(n-1) + fib(n-2)\n\tend\nend", " \
    \ return n if n <= 1\n  return fib(n-1) + fib(n-2)\nend", "  if n == 1\n    return\
    \ 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\n\
    end", "    if n == 1 or n == 2\n        return 1\n    end\n    fib(n-1) + fib(n-2)\n\
    end", "  if n == 1 || n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n\
    \  end\nend", "  # Implement me\nend", "  # TODO: Return the n-th Fibonacci number\n\
    \  if n == 0\n    0\n  elsif n == 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n\
    \  end\nend", "  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend", "  if n == 1\
    \ || n == 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "\tn < 3 ? 1\
    \ : fib(n-1) + fib(n-2)\nend", "  return n if n < 2\n  fib(n-1) + fib(n-2)\nend",
  "  return 0 if n <= 0\n  return 1 if n == 1\n  return fib(n-1) + fib(n-2)\nend",
  "  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend", "  (n\
    \ <= 2) ? 1 : fib(n-1) + fib(n-2)\nend", "\tif n == 1\n\t\treturn 1\n\telsif n\
    \ == 2\n\t\treturn 1\n\telse\n\t\treturn fib(n-1) + fib(n-2)\n\tend\nend", " \
    \ if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1)\
    \ + fib(n-2)\n  end\nend", "  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend",
  "    if n == 1 || n == 2\n        return 1\n    else\n        return fib(n-1) +\
    \ fib(n-2)\n    end\nend", "  return 0 if n == 0\n  return 1 if n == 1\n  return\
    \ fib(n-1) + fib(n-2)\nend", "  return 1 if n == 1\n  return 0 if n == 0\n  fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend", "  if\
    \ n == 1 || n == 2\n    return 1\n  end\n  return fib(n-1) + fib(n-2)\nend\nputs\
    \ fib(10)\nputs fib(1)\nputs fib(8)", "  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend", "  if n < 2\n    return n\n  else\n    return fib(n-1) + fib(n-2)\n\
    \  end\nend", "  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n\
    \    return fib(n-1) + fib(n-2)\n  end\nend", "  return n if n <= 1\n  fib(n-1)\
    \ + fib(n-2)\nend\nputs \"fib(10) = #{fib(10)}\"\nputs \"fib(1) = #{fib(1)}\"\n\
    puts \"fib(8) = #{fib(8)}\"", "  return 1 if n <= 2\n  return fib(n-1) + fib(n-2)\n\
    end", "  if n < 2\n    n\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "\tif\
    \ n==1 || n==2\n\t\treturn 1\n\telse\n\t\treturn fib(n-1)+fib(n-2)\n\tend\nend",
  "  raise TypeError if n.class != Fixnum\n  raise ArgumentError unless n >= 0\n \
    \ if n <= 1\n    return n\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend",
  "  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend", "    if n==1\n        return\
    \ 1\n    end\n    if n==2\n        return 1\n    end\n    if n>2\n        return\
    \ fib(n-1)+fib(n-2)\n    end\nend\nputs \"nth fibonacci\"\nputs fib(10)\nputs\
    \ fib(1)\nputs fib(8)\nputs \"==============================\"", "  return 1 if\
    \ n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend", "  return 1 if n\
    \ == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend", "  n <= 2 ? 1 : fib(n-1)\
    \ + fib(n-2)\nend", "  if n <= 1\n    n\n  else\n    fib(n-1) + fib(n-2)\n  end\n\
    end", "  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend", "  if n == 1\n    return\
    \ 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\n\
    end", "  if n < 3\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  return\
    \ 0 if n == 0\n  return 1 if n == 1\n  fib(n-1) + fib(n-2)\nend", "  return n\
    \ if n < 2\n  fib(n-1) + fib(n-2)\nend", "\tn < 2 ? n : fib(n-1) + fib(n-2)\n\
    end", "  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend", "  if n == 1\n    return\
    \ 1\n  elsif n == 2\n    return 1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend",
  "  if n <= 2\n    return 1\n  else\n    # fib(n-1) + fib(n-2)\n    fib(n-1) + fib(n-2)\n\
    \  end\nend", "\tarr = [0,1]\n\t(2..n).each do |num|\n\t\tarr[num] = arr[num-1]\
    \ + arr[num-2]\n\tend\n\tarr[n]\nend", "  return n if n < 2\n  fib(n-1) + fib(n-2)\n\
    end", "  return 1 if n == 1 || n == 2\n  return fib(n-1) + fib(n-2)\nend", " \
    \ return n if n <= 1\n  fib(n-1) + fib(n-2)\nend", "  # Your code here.\nend",
  "  if n == 1 || n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n \
    \ end\nend", "  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\n\
    end", "  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend", "\tif n <= 1\n\t\treturn\
    \ n\n\telse\n\t\treturn fib(n-1) + fib(n-2)\n\tend\nend", "  if n == 1\n    return\
    \ 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\n\
    end", "  raise ArgumentError, \"n must be a positive integer\" unless n.is_a?(Integer)\
    \ && n > 0\n  return 1 if n == 1\n  return 2 if n == 2\n  return fib(n-1) + fib(n-2)\n\
    end", "\tif n < 2\n\t\treturn n\n\telse\n\t\treturn fib(n-1) + fib(n-2)\n\tend\n\
    end", "  return n if n < 2\n  fib(n-1) + fib(n-2)\nend", "  return 1 if n == 1\n\
    \  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend", "\t# TODO\n\tif n == 1\n\t\
    \treturn 1\n\telsif n == 2\n\t\treturn 1\n\telse\n\t\treturn fib(n-1) + fib(n-2)\n\
    \tend\nend", "  return 1 if n == 1 || n == 2\n  fib(n-1) + fib(n-2)\nend", " \
    \ return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend", "  if\
    \ n < 2\n    return n\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  if n ==\
    \ 1\n    return 1\n  elsif n == 2\n    return 1\n  end\n  n1 = 1\n  n2 = 1\n \
    \ (n-2).times do\n    result = n1 + n2\n    n1 = n2\n    n2 = result\n  end\n\
    \  n2\nend", "    if n == 1\n        return 1\n    end\n    if n == 2\n      \
    \  return 1\n    end\n    fib(n-1) + fib(n-2)\nend", "  return 0 if n == 0\n \
    \ return 1 if n == 1", "    if n == 1\n        1\n    elsif n == 2\n        1\n\
    \    else\n        fib(n-1) + fib(n-2)\n    end\nend", "  return 0 if n == 0\n\
    \  return 1 if n == 1\n  fib(n-1) + fib(n-2)\nend", "  case n\n  when 0\n    0\n\
    \  when 1\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "  return n if\
    \ n <= 1\n  fib(n-1) + fib(n-2)\nend", "  return 0 if n == 0\n  return 1 if n\
    \ == 1", "  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend", "  if n == 1 || n\
    \ == 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend", "    return n if\
    \ n < 2\n    fib(n-1) + fib(n-2)\nend", "  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend", "  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end", '  raise StandardError if n.class != Fixnum', "  if n == 1 || n == 2\n \
    \   1\n  else\n    n1 = 1\n    n2 = 1\n    sum = 0\n    i = 3\n    while i <=\
    \ n\n      sum = n1 + n2\n      n1 = n2\n      n2 = sum\n      i += 1\n    end\n\
    \    sum\n  end\nend", "  if n == 1 || n == 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n\
    \  end\nend", "    first, last = [1, 1]\n    3.upto(n) do\n        first, last\
    \ = [last, first + last]\n    end\n    last\nend", "  return 1 if n <= 2\n  fib(n-1)\
    \ + fib(n-2)\nend", end]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
