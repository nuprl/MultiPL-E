name: HumanEval_146_specialFilter
language: rb
prompt: "# Write a function that takes an array of numbers as input and returns \n\
  # the number of elements in the array that are greater than 10 and both \n# first\
  \ and last digits of a number are odd (1, 3, 5, 7, 9).\n# For example:\n# specialFilter([15,\
  \ -73, 14, -15]) => 1 \n# specialFilter([33, -2, -3, 45, 21, 109]) => 2\ndef specialFilter(nums)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_specialFilter\n\
  \    candidate = method(:specialFilter)\n    assert_equal(0, candidate.call([5,\
  \ -2, 1, -5]))\n    assert_equal(1, candidate.call([15, -73, 14, -15]))\n    assert_equal(2,\
  \ candidate.call([33, -2, -3, 45, 21, 109]))\n    assert_equal(4, candidate.call([43,\
  \ -12, 93, 125, 121, 109]))\n    assert_equal(3, candidate.call([71, -2, -33, 75,\
  \ 21, 19]))\n    assert_equal(0, candidate.call([1]))\n    assert_equal(0, candidate.call([]))\n\
  \  end\nend\n"
completions: ["\tsum = 0\n\tnums.each do |x|\n\t\tsum += 1 if x > 10 && x.to_s[0].to_i.odd?\
    \ && x.to_s[-1].to_i.odd?\n\tend\n\tsum\nend", "  result = 0\n  nums.each do |number|\n\
    \    if number > 10\n      number_array = number.to_s.split('')\n      if number_array[0].to_i.odd?\
    \ && number_array[-1].to_i.odd?\n        result += 1\n      end\n    end\n  end\n\
    \  result\nend", "  numbers = 0\n  nums.each do |n|\n    if n.to_s.length > 1\
    \ && n > 10 && n.digits.first.odd? && n.digits.last.odd?\n      numbers += 1\n\
    \    end\n  end\n  numbers\nend", "\tarr = []\n\tnums.each do |n|\n\t\tif n >\
    \ 10 && (n.to_s[0].to_i.odd? && n.to_s[-1].to_i.odd?)\n\t\t\tarr << n\n\t\tend\n\
    \tend\n\tarr.length\nend", "  nums.select{|e| (e > 10) && (e.to_s[0].to_i.odd?)\
    \ && (e.to_s[-1].to_i.odd?)}.length\nend\nputs specialFilter([15, -73, 14, -15])\
    \ == 1\nputs specialFilter([33, -2, -3, 45, 21, 109]) == 2\nputs specialFilter([-1,\
    \ -12, -21, -31, -41, -51, -61, -71, -81, -91]) == 0", "  special_nums = 0\n \
    \ nums.each do |n|\n    if n > 10 && (n.to_s[0].to_i % 2 != 0) && (n.to_s[-1].to_i\
    \ % 2 != 0)\n      special_nums += 1\n    end\n  end\n  return special_nums\n\
    end", "  nums.select{|x|x.abs > 10 && (x.abs/10)%2==1 && x%2==1}.length\nend",
  "    # Write your code here\nend\nputs \"specialFilter([15, -73, 14, -15]) => #{specialFilter([15,\
    \ -73, 14, -15])}\"\nputs \"specialFilter([33, -2, -3, 45, 21, 109]) => #{specialFilter([33,\
    \ -2, -3, 45, 21, 109])}\"", "\tcount = 0\n\t\n\tnums.each do |n|\n\t\tif n >=\
    \ 10 && n.to_s[0].to_i.odd? && n.to_s[-1].to_i.odd?\n\t\t\tcount += 1\n\t\tend\n\
    \tend\n\t\n\treturn count\nend", "  nums.count { |x| x > 10 && x.to_s[0].to_i.odd?\
    \ && x.to_s[-1].to_i.odd? }\nend", "  nums.select{|num| num > 10 && num.to_s[0].to_i.odd?\
    \ && num.to_s[-1].to_i.odd?}.count\nend", "    nums.find_all { |n| (n > 10) &&\
    \ (n.to_s[0].to_i.odd?) && (n.to_s[-1].to_i.odd?) }.length\nend", "    nums.count\
    \ { |num| num > 10 && (num % 10).odd? && (num / 10).to_i.odd? }\nend", "  # Your\
    \ code here\nend", "    nums.count do |num|\n        num > 10 && (num.to_s[0].to_i).odd?\
    \ && (num.to_s[-1].to_i).odd?\n    end\nend\nputs 'specialFilter([15, -73, 14,\
    \ -15]) => ' + specialFilter([15, -73, 14, -15]).to_s\nputs 'specialFilter([33,\
    \ -2, -3, 45, 21, 109]) => ' + specialFilter([33, -2, -3, 45, 21, 109]).to_s",
  "  # TODO\nend", "\treturn nums.count { |n| \n\t\tn > 10 && \n\t\tn.to_s[0].to_i.odd?\
    \ && \n\t\tn.to_s[-1].to_i.odd?\n\t}\nend", "  count = 0\n  nums.each do |num|\n\
    \    # count += 1 if (num.to_s.size > 1) && (num > 10) && (num.to_s[0].to_i.odd?)\
    \ && (num.to_s[-1].to_i.odd?)\n    # count += 1 if (num.to_s.size > 1) && (num\
    \ > 10) && (num.to_s[0].to_i.odd?) && (num.to_s[-1].to_i.odd?)\n    count += 1\
    \ if (num.to_s.size > 1) && (num > 10) && (num.to_s[0].to_i.odd?) && (num.to_s[-1].to_i.odd?)\n\
    \  end\n  count\nend", "  nums.select{|num| num > 10 && special?(num)}.count\n\
    end", "  res = nums.select { |num| (num > 10) && (num.to_s[0].to_i.odd?) && (num.to_s[-1].to_i.odd?)\
    \ }\n  res.length\nend", "\tnums.select { |n| n.to_s.size > 1 && n.to_s[0].to_i.odd?\
    \ && n.to_s[-1].to_i.odd? && n > 10 }.size\nend", "\nend", "  count = 0\n  nums.each\
    \ do |num|\n    if num > 10 && num.digits.first.odd? && num.digits.last.odd?\n\
    \      count += 1\n    end\n  end\n  count\nend", end, "  first_last_odd_count\
    \ = 0\n  nums.each do |num|\n    next if num <= 10\n    next if num.to_s.length\
    \ < 2\n    first_last_odd_count += 1 if num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd?\n\
    \  end\n  first_last_odd_count\nend", "  count = 0\n  nums.each do |num|\n   \
    \ if num > 10\n      new_num = num.to_s.split('')\n      if new_num[0].to_i.odd?\
    \ && new_num[-1].to_i.odd?\n        count += 1\n      end\n    end\n  end\n  count\n\
    end", "    nums.select { |num| num > 10 && (num.to_s[0].to_i % 2 != 0) && (num.to_s[-1].to_i\
    \ % 2 != 0) }.length\nend", "\tarr = nums.select { |num| num > 10 }\n\tarr.select\
    \ { |num| num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd? }.length\nend", "  count\
    \ = 0\n  nums.each do |num|\n    if num.abs > 10\n      if is_first_and_last_digit_odd?(num)\n\
    \        count += 1\n      end\n    end\n  end\n  count\nend", "\nend", "  # your\
    \ code here\nend", "    counter = 0\n    for n in nums\n        if (n > 10 &&\
    \ (n%10)%2 != 0 && n/10%2 != 0)\n            counter = counter + 1\n        end\n\
    \    end\n    return counter\nend", "\tspecial = 0\n\tnums.each do |num|\n\t\t\
    special += 1 if (num > 10) && (num.to_s[0].to_i % 2 == 1) && (num.to_s[-1].to_i\
    \ % 2 == 1)\n\tend\n\treturn special\nend\nputs(\"\\nTests for #specialFilter\"\
    )\nputs(\"===============================================\")\n    puts \"specialFilter([15,\
    \ -73, 14, -15]) == 1: \"  + (specialFilter([15, -73, 14, -15]) == 1).to_s\n \
    \   puts \"specialFilter([33, -2, -3, 45, 21, 109]) == 2: \"  + (specialFilter([33,\
    \ -2, -3, 45, 21, 109]) == 2).to_s\n    puts \"specialFilter([-2, -3, -35, -21,\
    \ -109]) == 0: \"  + (specialFilter([-2, -3, -35, -21, -109]) == 0).to_s\nputs(\"\
    ===============================================\")", "  # Your code here\nend\n\
    puts \"----------Special Filter----------\"\nputs specialFilter([15, -73, 14,\
    \ -15]) == 1\nputs specialFilter([33, -2, -3, 45, 21, 109]) == 2\nputs specialFilter([17,\
    \ 89, 13, -7, -2, 104]) == 2\nputs specialFilter([-10, 9, -2, -1, -3, -6, -9,\
    \ 8, -6, -5]) == 2\nputs specialFilter([18, -13, 5, 6, -2, -2, -9, -6, 23, -7])\
    \ == 3\nputs specialFilter([13, -4, -4, 12, -4, -4, -4, 21, -4, 4]) == 2\nputs\
    \ specialFilter([-3, -3, -3, -1, -1, -1, -1, -1, -1, -1]) == 0\nputs specialFilter([11,\
    \ -3, -3, -3, -1, -1, -1, -1, -1, -1]) == 2\nputs specialFilter([4, 6, 4, -6,\
    \ 11, 4, -5, 7, -6, 5]) == 3\nputs specialFilter([8, -5, 8, -6, -5, -5, 9, -5,\
    \ 11, -6]) == 2\nputs specialFilter([-3, -3, -3, -3, -3, -3, -3, -3, -3, -3])\
    \ == 0\nputs specialFilter([12, 9, -3, -3, 9, -3, -3, 9, -3, -3]) == 1\nputs specialFilter([-3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, 4]) == 1\nputs specialFilter([12, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3]) == 0\nputs specialFilter([13, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3]) == 1\nputs specialFilter([", "  # your code here\nend", "\tnums.select{|n|\
    \ n > 10 && (n.to_s[0].to_i.odd? && n.to_s[-1].to_i.odd?)}.count\nend\nputs \"\
    ----------specialFilter----------\"\nputs specialFilter([15, -73, 14, -15]) ==\
    \ 1\nputs specialFilter([33, -2, -3, 45, 21, 109]) == 2\nputs specialFilter([101,\
    \ 23, 21, 9]) == 1\nputs specialFilter([93, 43, 31, 9]) == 0\nputs specialFilter([7,\
    \ 11, 99, -5]) == 0\nputs specialFilter([1, 3, 7, 9]) == 0\nputs specialFilter([1,\
    \ 3, 7, 11]) == 1\nputs specialFilter([-15, -73, -14, -15]) == 0", "    # your\
    \ code here\nend", "\tnums.count{|n| ((n.to_s[0].to_i.odd?) && (n.to_s[-1].to_i.odd?)\
    \ && (n > 10))}\nend", "  arr = []\n  for n in nums\n    if n >= 10\n      n =\
    \ n.to_s\n      if n[0].to_i.odd? && n[-1].to_i.odd?\n        arr << n\n     \
    \ end\n    end\n  end\n  return arr.length\nend", "    result = 0\n    nums.each\
    \ do |num|\n        if num > 10 and num.to_s[0].to_i.odd? and num.to_s[-1].to_i.odd?\n\
    \            result += 1\n        end\n    end\n    return result\nend", "\nend",
  "    count = 0\n    nums.each do |num|\n        if num > 10\n            if num.to_s[0].to_i.odd?\
    \ && num.to_s[-1].to_i.odd?\n                count += 1\n            end\n   \
    \     end\n    end\n    return count\nend\nputs \"specialFilter([15, -73, 14,\
    \ -15]) => #{specialFilter([15, -73, 14, -15])}\"\nputs \"specialFilter([33, -2,\
    \ -3, 45, 21, 109]) => #{specialFilter([33, -2, -3, 45, 21, 109])}\"", "    return\
    \ nums.select{|x| x > 10 && (x.to_s[0].to_i.odd? && x.to_s[-1].to_i.odd?)}.count\n\
    end", "  nums.select { |num| (num > 10) && \n                      (num.to_s[0].to_i.odd?)\
    \ && \n                      (num.to_s[-1].to_i.odd?) }.length\nend", "\t# Write\
    \ your code here\n\tspecials = nums.select { |n| n > 10 && n % 2 == 1 && n.to_s[0].to_i\
    \ % 2 == 1 && n.to_s[-1].to_i % 2 == 1 }\n\tspecials.size\nend", "    # wirte\
    \ your code here\n    special_nums = nums.select { |num| num > 10 && odd_digit?(num,\
    \ :first) && odd_digit?(num, :last) }\n    return special_nums.length\nend", " \
    \   nums.count { |num| num > 10 && num.digits.length > 1 && num.digits.first.odd?\
    \ && num.digits.last.odd? }\nend", "  nums.count do |x|\n    x > 10 && x.to_s.chars.first.to_i.odd?\
    \ && x.to_s.chars.last.to_i.odd?\n  end\nend", "  greaterThanTen(nums).count {\
    \ |i| firstAndLastDigitsOdd?(i) }\nend", "    #your code here\n    res = 0\n \
    \   nums.each do |n|\n        res += 1 if n > 10 && n.to_s[0] % 2 != 0 && n.to_s[-1]\
    \ % 2 != 0\n    end\n    res\nend", "  # your code here\nend", "  # your code\
    \ here\nend", "\nend", "  nums.map { |n| n.to_s.chars.map(&:to_i) }.select { |n|\
    \ n.size > 1 && n[0].odd? && n[-1].odd? && n.inject(:+) > 10 }.size\nend", " \
    \ nums.count do |num|\n    num.to_s.size > 1 &&\n    num.to_s[0].to_i.odd? &&\n\
    \    num.to_s[-1].to_i.odd? &&\n    num > 10\n  end\nend", "    x = nums.count\
    \ { |num| num > 10 && num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd? }\n    puts\
    \ \"There are #{x} numbers that match the criteria.\"\nend", "    # Write your\
    \ code here\nend", "  count = 0\n  nums.each do |num|\n    count += 1 if (num\
    \ > 10) && (num.digits.first.odd?) && (num.digits.last.odd?)\n  end\n  count\n\
    end", "\tnums.select { |i| i > 10 && i.to_s.length > 1 && i.to_s[0].to_i.odd?\
    \ && i.to_s[-1].to_i.odd? }.length\nend\nputs specialFilter([15, -73, 14, -15])\n\
    puts specialFilter([33, -2, -3, 45, 21, 109])", "\t# Write code here\n\tcount\
    \ = 0\n\tnums.each do |num|\n\t\tif num > 10\n\t\t\tif num%2 != 0 && num.to_s[0].to_i%2\
    \ != 0 && num.to_s[-1].to_i%2 != 0\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\t\
    end\n\treturn count\nend", "  count = 0\n  nums.each do |num|\n    if num > 10\n\
    \      first = num.to_s[0].to_i\n      last = num.to_s[-1].to_i\n      if first.odd?\
    \ && last.odd?\n        count += 1\n      end\n    end\n  end\n  count\nend",
  "  if !nums.empty?\n    total = 0\n    nums.each do |n|\n      if n >= 10\n    \
    \    s = n.to_s\n        if s[0].to_i.odd? && s[-1].to_i.odd?\n          total\
    \ += 1\n        end\n      end\n    end\n    return total\n  end\nend", "    #\
    \ write your code here\nend", "\tresult = 0\n\tnums.each do |n|\n\t\tif (n > 10)\
    \ && (n.to_s[0].to_i % 2 == 1) && (n.to_s[-1].to_i % 2 == 1)\n\t\t\tresult +=\
    \ 1\n\t\tend\n\tend\n\treturn result\nend", "  nums.select { |num| num.to_s.length\
    \ > 1 && num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd? && num > 10 }.length\n\
    end", "\tcount = 0\n\tnums.each do |n|\n\t\tcount += 1 if n > 10 && n.to_s[0].to_i.odd?\
    \ && n.to_s[-1].to_i.odd?\n\tend\n\tcount\nend", "    nums.select{|x| x > 10 &&\
    \ x.to_s.split('').first.to_i.odd? && x.to_s.split('').last.to_i.odd?}.count\n\
    end", "  # Your code here\nend", "    #write your solution here\n    count = 0\n\
    \    nums.each do |number|\n        if number.to_s.length > 1 && (number.to_s[0].to_i.odd?\
    \ && number.to_s[-1].to_i.odd?) && number > 10\n            count += 1\n     \
    \   end\n    end\n    count\nend", "  nums.count { |x| x > 10 && x.to_s.length\
    \ > 1 && x.to_s[0].to_i.odd? && x.to_s[-1].to_i.odd? }\nend", end, "    nums.count\
    \ { |num| num > 10 && num.digits.first.odd? && num.digits.last.odd? }\nend", " \
    \   nums.count { |x| x > 10 && x.to_s[0].to_i.odd? && x.to_s[-1].to_i.odd? }\n\
    end", "\nend", "\tres = 0\n\tfor i in nums\n\t\tif (i > 10) and (i.to_s[0].to_i\
    \ % 2 == 1) and (i.to_s[-1].to_i % 2 == 1)\n\t\t\tres += 1\n\t\tend\n\tend\n\t\
    return res\nend", "  # Write your code here\n  ans = 0\n  nums.each do |num|\n\
    \    ans += 1 if num.to_s.length > 1 && num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd?\
    \ && num > 10\n  end\n  ans\nend", "    # Write code here\nend", "end\nputs \"\
    specialFilter([15, -73, 14, -15]) => #{specialFilter([15, -73, 14, -15])} \\n\
    \ \\n\"\nputs \"specialFilter([33, -2, -3, 45, 21, 109]) => #{specialFilter([33,\
    \ -2, -3, 45, 21, 109])} \\n \\n\"", "  # CODE HERE\nend", "\tcount = 0\n\tnums.each\
    \ do |num|\n\t\tif num > 10\n\t\t\tif num.to_s[0].to_i.odd?\n\t\t\t\tif num.to_s[-1].to_i.odd?\n\
    \t\t\t\t\tcount += 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\tcount\nend", "\n\
    end", "  nums.count { |num| num.digits.first.odd? && num.digits.last.odd? && num\
    \ > 10 }\nend", "    nums.select{|n| n > 10 && n.odd? && (n % 10).odd?}.length\n\
    end", "  # Write your code here\n  n = 0\n  nums.each do |i|\n    i_arr = i.to_s.split('')\n\
    \    if i > 10 and i_arr[0].to_i.odd? and i_arr[-1].to_i.odd?\n      n += 1\n\
    \    end\n  end\n  return n\nend", "    nums.count { |n| n > 10 && n.digits.first.odd?\
    \ && n.digits.last.odd? }\nend", "  nums.count { |num| num > 10 && \n  \tnum.to_s[0].to_i.odd?\
    \ && \n  \tnum.to_s[-1].to_i.odd? }\nend", "    # YOUR CODE HERE\nend", "    nums.select{|num|\
    \ \n        #Check first and last digit, if odd, then select that number\n   \
    \     num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd? && num > 10\n    }.length\n\
    end", "  first_num = nums.first\n  last_num = nums.last\n  if first_num % 2 ==\
    \ 1 && last_num % 2 == 1\n    nums.size\n  end\nend", "  count = 0\n  nums.each\
    \ do |num|\n    if num > 10 && (num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd?)\n\
    \      count += 1\n    end\n  end\n  count\nend", "  count = 0\n  nums.each do\
    \ |n|\n    if n > 10 && n.to_s[0].to_i.odd? && n.to_s[-1].to_i.odd?\n      count\
    \ += 1\n    end\n  end\n  count\nend", "  result = 0\n  nums.each do |num|\n \
    \   if num > 10 && num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd?\n      result\
    \ += 1\n    end\n  end\n  result\nend", "  # your code here\nend", "    # YOUR\
    \ CODE HERE\nend", "\nend", "\tnums.select { |num| num > 10 and num.to_s[0].to_i.odd?\
    \ and num.to_s[-1].to_i.odd? }.count\nend", "  count = 0\n  nums.each do |num|\n\
    \    if num.to_s.length > 1 && num > 10 && num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd?\n\
    \      count += 1\n    end\n  end\n  count\nend", "    nums.count { |num| num.between?(11,\
    \ 99) && num % 2 == 1 }\nend", "  # Your code here\nend", "    nums.count do |e|\n\
    \        e > 10 && e.to_s.chars.first.to_i.odd? && e.to_s.chars.last.to_i.odd?\n\
    \    end\nend", "\tnums.select{|n|(n > 10 && n.digits.first.odd? && n.digits.last.odd?)}.count\n\
    end", "  count = 0\n  nums.each do |x|\n    if (x > 10) && ((x.to_s[0].to_i.odd?)\
    \ && (x.to_s[-1].to_i.odd?))\n      count += 1\n    end\n  end\n  return count\n\
    end", end, "  nums.select { |i| i > 10 && i % 2 == 1 && i.to_s[0].to_i % 2 ==\
    \ 1 && i.to_s[-1].to_i % 2 == 1 }.length\nend", "    nums.select { |num| num.to_s.length\
    \ > 1 && num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd? && num > 10 }.length\n\
    end", "  # Your code here\nend", "  nums.select { |n| n.to_s.size > 1 && n.to_s.size.odd?\
    \ && n.to_s[0].to_i.odd? && n.to_s[-1].to_i.odd? }.size\nend", "  nums.select\
    \ { |num| num > 10 && num.odd? && num.digits.first.odd? }.count\nend", "  count\
    \ = 0\n  nums.each do |num|\n    count += 1 if num > 10 && num.to_s[0].to_i.odd?\
    \ && num.to_s[-1].to_i.odd?\n  end\n  count\nend", "  nums.select { |num| num.to_s.length\
    \ > 1 && num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd? && num > 10 }.length\n\
    end", "   \n   arr = nums.select {|e| e > 10}\n   p arr\n   i = 0\n   count =\
    \ 0\n   while i < arr.length\n     curr = arr[i]\n     curr_str = curr.to_s\n\
    \     if curr_str[0].to_i.odd? && curr_str[-1].to_i.odd?\n       count += 1\n\
    \     end\n     i += 1\n   end\n   count\nend\np specialFilter([15, -73, 14, -15])\
    \ == 1 \np specialFilter([33, -2, -3, 45, 21, 109]) == 2", "  nums.select { |n|\
    \ n > 10 && n.to_s[0].to_i.odd? && n.to_s[-1].to_i.odd? }.count\nend", "    nums.select{|x|\
    \ x>10 && x.digits.first.odd? && x.digits.last.odd?}.length\nend", "  nums.count\
    \ do |num|\n    num > 10 && num.digits.first.odd? && num.digits.last.odd?\n  end\n\
    end", "  nums.select { |num| num > 10 && num.to_s.length >= 2 && (num.to_s[0].to_i).odd?\
    \ && (num.to_s[-1].to_i).odd? }.count\nend", "  return nums.select { |x| x > 10\
    \ && x.to_s[0].to_i.odd? && x.to_s[-1].to_i.odd? }.count\nend", "  # all = []\n\
    \  # nums.each do |n|\n  #   if (n > 10) && (n.to_s[0].to_i.odd?) && (n.to_s[-1].to_i.odd?)\n\
    \  #     all << n\n  #   end\n  # end\n  # all.length\n  nums.select { |n| (n\
    \ > 10) && (n.to_s[0].to_i.odd?) && (n.to_s[-1].to_i.odd?) }.length\nend\nputs\
    \ \"---------Special Filter----------\"\nputs specialFilter([15, -73, 14, -15])\
    \ == 1\nputs specialFilter([33, -2, -3, 45, 21, 109]) == 2\nputs specialFilter([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 0]) == 0\nputs specialFilter([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 0, 31, -33, -3, 99, 105]) == 2\nputs specialFilter([150, -73, 14, -15]) ==\
    \ 1\nputs specialFilter([33, -2, -3, 45, 21, 1099]) == 2\nputs specialFilter([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 0\n\
    puts specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, -1, -2, -3, -4, -5, -6, -7,\
    \ -8, -9, -10, 31, -33, -3, 99, 105]) == 2", "    nums.select { |x| (x > 10) &&\
    \ (x % 2 == 1) && (x % 10 % 2 == 1) }.count\nend", "  # YOUR CODE HERE\nend",
  end, "  nums.reduce(0) do |count, num|\n    if num > 10 && num.to_s.start_with?(/[13579]/)\
    \ && num.to_s.end_with?(/[13579]/)\n      count += 1\n    end\n    count\n  end\n\
    end", "\tnums.select{|x| x > 10 && (x.to_s.chars.first.to_i % 2 != 0) && (x.to_s.chars.last.to_i\
    \ % 2 != 0)}.length\nend\nputs specialFilter([15, -73, 14, -15])\nputs specialFilter([33,\
    \ -2, -3, 45, 21, 109])", "  nums.select { |num| num > 10 && (num / 10) % 2 !=\
    \ 0 && num % 2 != 0 }.length\nend", "  nums.select { |num| num > 10 && num.to_s.chars.first.to_i.odd?\
    \ && num.to_s.chars.last.to_i.odd? }.count\nend", "  nums.select { |num| num >\
    \ 10 && num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd? }.size\nend", "  # ToDo:\
    \ Write your code here.\n  return nums.select { |x| x > 10 && x.to_s[0].to_i.odd?\
    \ && x.to_s[-1].to_i.odd? }.length\nend", "  # Write your code here\nend\nputs\
    \ \"--------Special Filter--------\"\nputs specialFilter([15, -73, 14, -15]) ==\
    \ 1\nputs specialFilter([33, -2, -3, 45, 21, 109]) == 2", "  nums.count { |x|\
    \ (x > 10) && (x.to_s[0].to_i.odd?) && (x.to_s[-1].to_i.odd?) }\nend", end, " \
    \ nums.count { |n| n > 10 && n.digits.first.odd? && n.digits.last.odd? }\nend",
  "  # your code here\nend", "  # Write your code here\nend", "  nums.count { |n|\
    \ n > 10 && (n % 10).odd? && (n / 10**(n.to_s.length - 1)).odd? }\nend", "  result\
    \ = 0\n  nums.each do |num|\n    if num > 10 && num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd?\n\
    \      result += 1\n    end\n  end\n  result\nend", "  count = 0\n  nums.each\
    \ do |num|\n    if num > 10 && num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd?\n\
    \      count += 1\n    end\n  end\n  count\nend", "\tnums.select { |x| x > 10\
    \ && x.to_s[0].to_i.odd? && x.to_s[-1].to_i.odd? }.length\nend", "    count =\
    \ 0\n    nums.each do |num|\n        first_digit = num.to_s[0].to_i\n        last_digit\
    \ = num.to_s[-1].to_i\n        if num > 10 && first_digit.odd? && last_digit.odd?\n\
    \            count += 1\n        end\n    end\n    return count\nend", "  nums.count\
    \ { |num| \n    num > 10 && \n    num.to_s[0].to_i.odd? && \n    num.to_s[-1].to_i.odd?\
    \ \n  }\nend", "\tcount = 0\n\tnums.each do |num|\n\t\tif (num > 10) && ((num.to_s[0].to_i\
    \ % 2 != 0) && (num.to_s[-1].to_i % 2 != 0))\n\t\t\tcount += 1\n\t\tend\n\tend\n\
    \treturn count\nend", "    nums.select{|n| n.digits.first.odd? && n.digits.last.odd?\
    \ && n > 10}.count\nend", "  # Your code here\nend", "\tcounter = 0\n\tnums.each\
    \ do |i|\n\t\tif (i > 10) && (i.to_s[0].to_i % 2 != 0) && (i.to_s[-1].to_i % 2\
    \ != 0)\n\t\t\tcounter += 1\n\t\tend\n\tend\n\treturn counter\nend", "  nums.select\
    \ { |n| n > 10 && n.to_s[0].to_i.odd? && n.to_s[-1].to_i.odd? }.count\nend", "\t\
    nums.select { |num| num > 10 && (num / 10 % 2 != 0) && (num % 10 % 2 != 0) }.length\n\
    end", "\treturn nums.select { |n| n > 10 && n.digits.first.odd? && n.digits.last.odd?\
    \ }.count\nend", "  nums.count { |num| num > 10 && num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd?\
    \ }\nend", "  nums.select { |num| num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd?\
    \ && num > 10 }.count\nend", "  # write your code here\nend", "  #####################\n\
    \  ## your code here ##\n  #####################\nend", "  nums.count do |num|\n\
    \    num.digits.first.odd? &&\n    num.digits.last.odd? &&\n    num > 10\n  end\n\
    end", "  count = 0\n  nums.each do |x|\n    if x > 10\n      x = x.to_s\n    \
    \  first = x[0].to_i\n      last = x[-1].to_i\n      if first.odd? && last.odd?\n\
    \        count += 1\n      end\n    end\n  end\n  count\nend", "  # your code\
    \ here\nend", "  # Your code here\nend\nputs specialFilter([15, -73, 14, -15])\n\
    puts specialFilter([33, -2, -3, 45, 21, 109])", "\tnums.count { |num| num > 10\
    \ && (num / 10) % 2 != 0 && num % 2 != 0 }\nend", "  nums.select { |x| x.digits.size\
    \ > 1 && x > 10 && x.digits.first.odd? && x.digits.last.odd? }.size\nend", " \
    \ nums.count { |num| (num > 10) && (num.digits.first.odd?) && (num.digits.last.odd?)\
    \ }\nend", "\tnums.select{|a| a > 10 && /[13579]/ =~ a.to_s[0] && /[13579]/ =~\
    \ a.to_s[-1]}.length\nend", "\t# Write your code here\n\tcount = 0\n\tnums.each\
    \ do |number|\n\t\tif number.abs > 10 && \n\t\t\tnumber.to_s[0].to_i.odd? &&\n\
    \t\t\tnumber.to_s[-1].to_i.odd?\n\t\t\tcount += 1\n\t\tend\n\tend\n\tcount\nend",
  "    # Your code here\nend", "    c = 0\n    nums.each do |x|\n        if x > 10\
    \ && x.to_s[0].to_i % 2 != 0 && x.to_s[-1].to_i % 2 != 0\n            c += 1\n\
    \        end\n    end\n    c\nend", "    count = 0\n    nums.each do |num|\n \
    \       if num > 10 && num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd?\n     \
    \       count += 1\n        end\n    end\n    return count\nend", "  count = 0\n\
    \  nums.each do |n|\n    if n > 10 && n.digits.first.odd? && n.digits.last.odd?\n\
    \      count += 1\n    end\n  end\n  count\nend", "  # your code here\nend", " \
    \ def odds?(n)\n    n.to_s[0].to_i.odd? && n.to_s[-1].to_i.odd?\n  end\n  nums.select\
    \ { |num| num > 10 && odds?(num) }.size\nend", "\tnums.select { |num| num > 10\
    \ && num.to_s.split('')[0].to_i.odd? && num.to_s.split('')[-1].to_i.odd? }.count\n\
    end", "\tnums.select { |num| num > 10 && num.digits.length > 1 && num.digits.first.odd?\
    \ && num.digits.last.odd? }.length\nend", "  nums.select{|n| n > 10 && (n.to_s[0].to_i).odd?\
    \ && (n.to_s[-1].to_i).odd?}.length\nend", "\tbig_nums = 0\n\tnums.each do |i|\n\
    \t\tfirst_digit = i.to_s[0].to_i\n\t\tlast_digit = i.to_s[-1].to_i\n\t\tif i.abs\
    \ > 10 && first_digit.odd? && last_digit.odd?\n\t\t\tbig_nums += 1\n\t\tend\n\t\
    end\n\treturn big_nums\nend", "    # Write your code here\nend", "    nums.filter\
    \ do |num|\n        (num > 10) && (num.digits.first.odd?) && (num.digits.last.odd?)\n\
    \    end.count\nend", "  # TODO: implement this method\nend", "\tsum = 0\n\tnums.each\
    \ do |n|\n\t\tsum += 1 if n > 10 && n.to_s[0].to_i.odd? && n.to_s[-1].to_i.odd?\n\
    \tend\n\tsum\nend", "    count = 0\n    nums.each do |n|\n        count += 1 if\
    \ n.to_s.length > 1 && n > 10 && n.to_s[0].to_i.odd? && n.to_s[-1].to_i.odd?\n\
    \    end\n    count\nend", "  nums.reduce(0) do |sum, num|\n    if num.to_s.length\
    \ >= 2 &&\n      num.to_s[0].to_i.odd? &&\n      num.to_s[-1].to_i.odd? &&\n \
    \     num > 10\n      sum += 1\n    end\n    sum\n  end\nend", "  # your code\
    \ here\nend", "  count = 0\n  nums.each do |num|\n    if num.abs > 10 && num.abs.to_s[0].to_i.odd?\
    \ && num.abs.to_s[-1].to_i.odd?\n      count += 1\n    end\n  end\n  count\nend",
  "  res = 0\n  nums.each do |num|\n    if num > 10\n      num_str = num.to_s\n  \
    \    res += 1 if num_str[0].to_i.odd? && num_str[-1].to_i.odd?\n    end\n  end\n\
    \  res\nend", "  nums.count { |num| num.digits.first.odd? && num.digits.last.odd?\
    \ && num > 10 }\nend", "    # numbers = []\n    # nums.each do |x|\n    #    \
    \ if (x > 10) && (x % 2 == 1) && (x.to_s[0].to_i % 2 == 1) && (x.to_s[-1].to_i\
    \ % 2 == 1)\n    #         numbers << x\n    #     end\n    # end\n    # numbers.length\n\
    \    nums.count { |x| (x > 10) && (x % 2 == 1) && (x.to_s[0].to_i % 2 == 1) &&\
    \ (x.to_s[-1].to_i % 2 == 1) }\nend", "    nums.select{|num| num.digits.length\
    \ >= 2 && num > 10 && num.digits.first.odd? && num.digits.last.odd?}.length\n\
    end", "\tnums.select{|e| e>10 and e.to_s[0].to_i.odd? and e.to_s[-1].to_i.odd?}.length\n\
    end", "    ctr = 0\n    nums.each do |num|\n        if num >= 10\n           \
    \ if num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd?\n                ctr += 1\n\
    \            end\n        end\n    end\n    return ctr\nend", "\tnums.select {\
    \ |x| x > 10 && x.to_s.length >= 2 && (x.to_s[0].to_i % 2 != 0) && (x.to_s[-1].to_i\
    \ % 2 != 0) }.length\nend", "    # write your code here\nend", "  nums.select\
    \ { |x| x > 10 && x.to_s.length > 1 && x.to_s[0].to_i.odd? && x.to_s[-1].to_i.odd?\
    \ }.count\nend", "  result = 0\n  nums.each do |num|\n    if num > 10 && num.to_s[0].to_i.odd?\
    \ && num.to_s[-1].to_i.odd?\n      result += 1\n    end\n  end\n  result\nend",
  "  count = 0\n  nums.each do |num|\n    count += 1 if num > 10 && num.to_s[0].to_i.odd?\
    \ && num.to_s[-1].to_i.odd?\n  end\n  count\nend\nputs specialFilter([15, -73,\
    \ 14, -15])\nputs specialFilter([33, -2, -3, 45, 21, 109])", "  # Code your solution\
    \ here\nend", "    # this one is harder, i'll give you the answer,\n    # check\
    \ the condition then store valid values in the count\n    count = 0\n    nums.each\
    \ do |num|\n        if num > 10 && num.to_s[0].to_i.odd? && num.to_s[-1].to_i.odd?\n\
    \            count += 1\n        end\n    end\n    return count\nend\nputs specialFilter([15,\
    \ -73, 14, -15])\nputs specialFilter([33, -2, -3, 45, 21, 109])\nputs \"======================\"",
  "  nums.select{|n| n > 10 && n.to_s.length > 1 && n.to_s[0].to_i.odd? && n.to_s[-1].to_i.odd?}.length\n\
    end", "  nums.select { |n| n > 10 && n.digits.last.odd? && n.digits.first.odd?\
    \ }.size\nend", "\tnums.count { |n| n.to_s =~ /^[13579]\\d*[13579]$/ && n > 10\
    \ }\nend", "  sum = 0\n  nums.each do |i|\n    if (i > 10) && (i.to_s[0].to_i\
    \ % 2 == 1) && (i.to_s[-1].to_i % 2 == 1)\n      sum += 1\n    end\n  end\n  sum\n\
    end", "  nums.select { |num|\n    num > 10 && (num.to_s[0].to_i).odd? && (num.to_s[-1].to_i).odd?\n\
    \  }.length\nend", "  # write your code here\nend", "    count = 0\n    nums.each\
    \ do |num|\n        if num > 10 && num.digits.first.odd? && num.digits.last.odd?\n\
    \            count += 1\n        end\n    end\n    return count\nend", "  nums.select\
    \ { |num| num > 10 && first_and_last_digit_odd?(num) }.size\nend", "\tcount =\
    \ 0\n\tnums.each do |num|\n\t\tcount += 1 if num > 10 && (num.to_s[0].to_i % 2\
    \ != 0) && (num.to_s[-1].to_i % 2 != 0)\n\tend\n\tcount\nend", "  # YOUR CODE\
    \ HERE\nend", "\tcount = 0\n\tnums.each do |num|\n\t\tif num > 10\n\t\t\tfirst\
    \ = num.to_s[0].to_i\n\t\t\tlast = num.to_s[-1].to_i\n\t\t\tcount += 1 if first.odd?\
    \ && last.odd?\n\t\tend\n\tend\n\tcount\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
