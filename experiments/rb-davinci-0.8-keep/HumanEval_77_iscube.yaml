name: HumanEval_77_iscube
language: rb
prompt: "# Write a function that takes an integer a and returns True \n# if this ingeger\
  \ is a cube of some integer number.\n# Note: you may assume the input is always\
  \ valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==> False\n# iscube(-1)\
  \ ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n# iscube(180) ==> False\n\
  def iscube(a)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_iscube\n\
  \    candidate = method(:iscube)\n    assert_equal(true, candidate.call(1))\n  \
  \  assert_equal(false, candidate.call(2))\n    assert_equal(true, candidate.call(-1))\n\
  \    assert_equal(true, candidate.call(64))\n    assert_equal(false, candidate.call(180))\n\
  \    assert_equal(true, candidate.call(1000))\n    assert_equal(true, candidate.call(0))\n\
  \    assert_equal(false, candidate.call(1729))\n  end\nend\n"
completions: ["    (a**(1/3.0)).to_i ** 3 == a\nend", "  return (a**(1.0/3)).to_i**3\
    \ == a\nend\nputs iscube(1)\nputs iscube(2)\nputs iscube(-1)\nputs iscube(64)\n\
    puts iscube(0)\nputs iscube(180)", "  return true if a == 0\n  if a > 0\n    i\
    \ = 1\n    while i**3 <= a\n      return true if i**3 == a\n      i += 1\n   \
    \ end\n  else\n    i = -1\n    while i**3 >= a\n      return true if i**3 == a\n\
    \      i -= 1\n    end\n  end\n  false\nend", "  cube_root = Math.cbrt(a)\n  if\
    \ cube_root.is_a?(Integer)\n    return true\n  else\n    return false\n  end\n\
    end\nputs iscube(27)\nputs iscube(512)\nputs iscube(0)\nputs iscube(180)\nputs\
    \ iscube(1)", "    cubed = Math.cbrt(a)\n    return cubed.to_i == cubed\nend",
  "    # Your code here\nend", "  root = Math.cbrt(a)\n  root == root.to_i\nend",
  "\treturn false if a < 0\n\t1.upto(Math.sqrt(a)) { |x| return true if x**3 == a\
    \ }\n\tfalse\nend", "    x = 0\n    while x**3 < a\n        x += 1\n    end\n\
    \    a == x**3\nend", "  # return false if a < 0\n  # loop from 1 to a\n  # break\
    \ if i**3 == a\n  return false if a < 0\n  (1..a).each do |i|\n    return true\
    \ if i**3 == a\n  end\n  false\nend", end, "  a = a.abs # the inpiration is from\
    \ http://www.ruby-forum.com/topic/2088754\n  b = Math.cbrt(a)\n  ((b - b.to_i)\
    \ == 0) ? true : false\nend", "  # TODO\nend", "  # your code here\nend", "\t\
    # TODO: write your code here.\nend", "    # write your code here\nend", "  a <\
    \ 0 ? Math.cbrt(a).to_i ** 3 == a : Math.cbrt(a).to_i ** 3 == a\nend", "  (a**(1.0/3.0)).to_i**3\
    \ == a\nend", "    return true if a == 0\n    a = a.abs.to_f\n    root = a **\
    \ (1.0/3.0)\n    (root % 1).zero?\nend", "  n = 0\n  while n**3 < a\n    return\
    \ true if n**3 == a\n    n += 1\n  end\n  false\nend", "   root = Math.cbrt(a)\n\
    \   root.integer?\nend", end, "  # your code here\nend", "  \nend", "  a.abs**(1.0/3)\
    \ % 1 == 0\nend", "  # your code here\nend", "\tx = 1\n\twhile x**3 < a\n\t\t\
    x += 1\n\tend\n\tx**3 == a\nend", end, "    (a.abs)**(1.0/3.0) % 1 == 0\nend",
  "\t# PUT YOUR CODE HERE\nend", "  a == 0 ? true : (a > 0 ? ((a ** (1.0/3.0)).round\
    \ ** 3) == a : ((a ** (1.0/3.0)).round ** 3) == -a)\nend", "    return false if\
    \ a < 0\n    root = Math.cbrt(a)\n    root.to_i == root\nend", "  (a**(1.0/3)).is_a?(Integer)\
    \ ? true : false\nend", "  \nend", "  # Add code here\n  return false if a ==\
    \ 0\n  a % Math.cbrt(a) == 0\nend", "  (a**(1.0/3)).to_i ** 3 == a ||\n  (a**(1.0/3)).ceil\
    \ ** 3 == a\nend", "\tif a > 0\n\t\treturn true if a == (1**3)\n\t\treturn true\
    \ if a == (2**3)\n\t\treturn true if a == (3**3)\n\t\treturn true if a == (4**3)\n\
    \t\treturn true if a == (5**3)\n\t\treturn true if a == (6**3)\n\t\treturn true\
    \ if a == (7**3)\n\t\treturn true if a == (8**3)\n\t\treturn true if a == (9**3)\n\
    \t\treturn true if a == (10**3)\n\t\treturn true if a == (11**3)\n\t\treturn true\
    \ if a == (12**3)\n\t\treturn true if a == (13**3)\n\t\treturn true if a == (14**3)\n\
    \t\treturn true if a == (15**3)\n\t\treturn true if a == (16**3)\n\t\treturn true\
    \ if a == (17**3)\n\t\treturn true if a == (18**3)\n\t\treturn true if a == (19**3)\n\
    \t\treturn true if a == (20**3)\n\t\treturn true if a == (21**3)\n\t\treturn true\
    \ if a == (22**3)\n\t\treturn true if a == (23**3)\n\t\treturn true if a == (24**3)\n\
    \t\treturn true if a == (25**3)\n\t\treturn true if a == (26**3)\n\t\treturn true\
    \ if a == (27**3)\n\t\treturn true if a == (28**3)\n\t\treturn true if a == (29**3)\n\
    \t\treturn true if a == (30**3)\n\t\treturn true if a == (31**3)\n\t\treturn true\
    \ if a == (32**3)\n\t\treturn true if a == (33**3)\n\t\treturn true if a == (34**3)\n\
    \t\treturn true if a == (35**3)\n\t\treturn true if a == (36**3)\n\t\treturn true\
    \ if a == (37**3)\n\t\treturn true if a == (38**3)\n\t\treturn true if a == (39**3",
  "  Math.cbrt(a) % 1 == 0\nend", "  return true if a == 0\n  a = a.abs\n  c = 1\n\
    \  while c**3 < a\n    c += 1\n  end\n  return true if c**3 == a\n  false\nend",
  "  cube = 0\n  if a < 0\n    cube = -1\n  else\n    cube = 0\n  end\n  while cube\
    \ * cube * cube < a\n    cube += 1\n  end\n  cube * cube * cube == a\nend", " \
    \ # your code here\nend", "  a = a.abs\n  a == 1 || (Math.sqrt(a) % 1).zero?\n\
    end", "  # Your code here\nend", "  s = a.to_s\n  return false if s.length.odd?\n\
    \  half = s.length / 2\n  (s[0..half - 1] + s[half..-1]).to_i ** (1.0 / 3) ==\
    \ a\nend", "  if a < 0\n    return true if a == -1\n    return false\n  end\n\
    \  return false if a == 0\n  Math.cbrt(a) == Math.cbrt(a).to_i\nend", "  # Solution\
    \ 1\n  # root = Math.cbrt(a)\n  # return (root.to_i == root)\n  \n  # Solution\
    \ 2\n  # return (a**(1.0/3) % 1).zero?\n  \n  # Solution 3\n  return Math.cbrt(a).to_i**3\
    \ == a\nend", "  return a==0 if a==0\n  return Math.cbrt(a).ceil == Math.cbrt(a)\n\
    end", "  return false if a < 0\n  (a**(1.0/3)).round == a**(1.0/3)\nend", "  \
    \  (a**(1/3.0)).to_i**3 == a\nend\nputs \"-------------Is Cube---------------\"\
    \nputs iscube(1) \nputs iscube(2) \nputs iscube(-1) \nputs iscube(64) \nputs iscube(0)\
    \ \nputs iscube(180) ", "  #your code here\nend\nputs \"is cube method\"\nputs\
    \ \"should be true\"\nputs iscube(1) ==> True\nputs iscube(2) ==> False\nputs\
    \ iscube(-1) ==> True\nputs iscube(64) ==> True\nputs iscube(0) ==> True\nputs\
    \ iscube(180) ==> False", "  return true if a == 0\n  x = a.abs**(1.0/3)\n  x\
    \ == x.to_i\nend", "  root = a**(1.0/3)\n  return (root == root.floor) ? true\
    \ : false\nend", "  if a<0 \n    a=a*-1\n  end\n  if a == 0\n    return true\n\
    \  end\n  i=1\n  while (i**3)<a\n    i=i+1\n  end\n  if (i**3)==a\n    return\
    \ true\n  else\n    return false\n  end\nend", "  a % Math.cbrt(a) == 0 ? true\
    \ : false\nend", "\treturn true if a == 0\n\t(1..a).each do |i|\n\t\tif i**3 ==\
    \ a\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend", "  return false\
    \ if a <= 0\n  Math.cbrt(a) % 1 == 0\nend", "  cube = 0\n  i = 0\n  while cube\
    \ < a\n    i += 1\n    cube = i ** 3\n  end\n  cube == a\nend", "    return a\
    \ < 0 if a.abs.odd?\n    return a.zero? || a.to_s[0] == '1' if a.abs == 1\n  \
    \  a == 2**(a.to_s.size - 1)\nend", "    value = a.abs ** (1/3.0)\n    return\
    \ true if value % 1 == 0\n    return false\nend\nputs iscube(1)\nputs iscube(2)\n\
    puts iscube(-1)\nputs iscube(64)\nputs iscube(0)\nputs iscube(180)\nputs iscube(125)\n\
    puts iscube(27)", "  return a >= 0 ? a**(1.0/3.0) % 1 == 0 : a == -1\nend", " \
    \ if a >= 0 \n    return (a == 0) || (Math.cbrt(a).to_i) ** 3 == a\n  else\n \
    \   a = -a\n    return (a == 0) || (Math.cbrt(a).to_i) ** 3 == a\n  end\nend",
  "\tif a<0\n\t\ta=a*-1\n\tend\n\tif a**(1.0/3) % 1 == 0\n\t\treturn true\n\telse\n\
    \t\treturn false\n\tend\nend", "  \nend", "  #YOUR CODE HERE\nend", "  a >= 0\
    \ && (a ** (1.0/3)).round ** 3 == a\nend", "  return Math.cbrt(a) == Math.cbrt(a).to_i\n\
    end", "  a != 0 && Math.cbrt(a) % 1 == 0\nend", "  # do your magic here\nend",
  "  return true if a == 0\n  return false if a < 0\n  i = 0\n  while a > 0\n    i\
    \ += 1\n    a -= i**3\n  end\n  a == 0\nend", "  Math.cbrt(a).to_i == Math.cbrt(a)\
    \ ? true : false\nend", "  cube_root = Math.cbrt(a)\n  cube_root.to_i == cube_root\
    \ ? true : false\nend", "  return a.to_i == Math.cbrt(a).to_i**3\nend", "  if\
    \ a >= 0\n    for i in 0..Math.sqrt(a)\n      if i**3 == a\n        return true\n\
    \      end\n    end\n  else\n    for i in 0..-Math.sqrt(a)\n      if i**3 == a\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  Math.cbrt(a).to_i**3\
    \ == a\nend", "    return true if a == 0\n    a = a.abs\n    for i in 1..(a **\
    \ 0.5)\n        return true if i ** 3 == a\n    end\n    return false\nend", " \
    \ # your code goes here...\nend", "  if a > 0 \n    for i in 1..a do\n      if\
    \ i*i*i == a\n        return true\n      end\n    end\n  elsif a < 0\n    for\
    \ i in a..0 do\n      if i*i*i == a\n        return true\n      end\n    end\n\
    \  else \n    return true\n  end\n  return false\nend", "  return true if a ==\
    \ 0\n  return true if a < 0\n  return false if a < 0\n  ((Math.sqrt(a.abs)).to_i)**3\
    \ == a\nend", "  return a == 1 if a == 1\n  return a == 0 if a == 0\n  return\
    \ a == -1 if a == -1\n  a = a.abs if a < 0\n  root = 1\n  while root**3 < a\n\
    \    root += 1\n  end\n  return true if root**3 == a\n  false\nend", "  Math.cbrt(a).to_i\
    \ ** 3 == a\nend", "  #  ^^^ \\  ^^^ \\  ^^^ \\  ^^^ \\  ^^^ \\  ^^^ \\  ^^^ \\\
    \  ^^^ \\  ^^^ \\\n  (a.abs ** (1/3.0)).to_i ** 3 == a\nend", "    if (a ** (1.0/3)).integer?\
    \ \n        return true\n    else\n        return false\n    end\nend", "  if\
    \ a < 0\n    a = a * -1\n  end\n  if a == 0\n    return true\n  end\n  (1..a).each\
    \ do |i|\n    if i ** 3 == a\n      return true\n    end\n  end\n  return false\n\
    end", "  for i in 0..a\n    if i**3 == a\n      return true\n    end\n  end\n\
    \  return false\nend", "\treturn Math.cbrt(a) % 1 == 0\nend", "  ## The shortest\
    \ way to solve this problem would be using the \n  ## fact that a number is a\
    \ cube if and only if it's in the form\n  ## of a^3 = k * b^3 where a and b are\
    \ the divisors of k.\n  ## and if a^3 = k * b^3, then a and b are the cube roots\
    \ of k. \n  ## So we have to check if the cube root of a is an integer number\
    \ or not.\n  #return (a ** (1.0/3)).to_i == (a ** (1.0/3)) ", "  # Your code here\n\
    end", "  ## Your Code Here\nend", "  if (a == 0)\n    return true\n  elsif (a\
    \ < 0)\n    a = a * -1\n  end\n  i = 0\n  while i**3 <= a\n    if (i**3 == a)\n\
    \      return true\n    end\n    i = i + 1\n  end\n  return false\nend", "\tMath.cbrt(a)\
    \ % 1 == 0\nend", "  i = 0\n  if a > 0\n    loop do\n      if i**3 == a\n    \
    \    return true\n      end\n      i += 1\n    end\n  else\n    loop do\n    \
    \  if i**3 == a\n        return true\n      end\n      i -= 1\n    end\n  end\n\
    end", "  # your code here\nend", "  res = a.abs ** (1.0/3)\n  res.to_i**3 == a.abs\n\
    end", "  # your code here\nend", "  if a == 0\n    return true\n  end\n  i = 1\n\
    \  while i*i*i < a\n    i += 1\n  end\n  return i*i*i == a\nend", "  Math.cbrt(a)\
    \ % 1 == 0\nend", "  # your code here\nend", "  # find the cube root\n  num =\
    \ a.abs ** (1.0/3.0)\n  num % 1 == 0\nend", "  cube_root = Math.cbrt(a)\n  cube_root\
    \ % 1 == 0\nend", '  return true if a.zero?', "  if a == 0\n    true\n  elsif\
    \ a < 0\n    if a.abs == (a.abs**(1.0/3)).to_i**3\n      true\n    else\n    \
    \  false\n    end\n  else\n    if a == a**(1.0/3).to_i**3\n      true\n    else\n\
    \      false\n    end\n  end\nend", "  Math.cbrt(a) % 1 == 0\nend", "  # Write\
    \ code here\nend", "    # your code here\nend", "    Math.cbrt(a)%1 == 0\nend",
  "  (a**(1.0/3)).round ** 3 == a ? true : false\nend", "  b = a.abs\n  Math.cbrt(b)\
    \ % 1 == 0\nend", "  # Your code here!\nend", "  ((a ** (1.0/3)).round) ** 3 ==\
    \ a ? true : false\nend", "  1.upto(a) do |num|\n    return true if num**3 ==\
    \ a\n  end\n  false\nend", "  return true if a == 0\n  return false if a < 0\n\
    \  i = 0\n  while i*i*i < a\n    i += 1\n  end\n  i*i*i == a\nend", "  (1..a).each\
    \ { |n| return true if n ** 3 == a }\n  false\nend", "  if a == 0\n    return\
    \ true\n  end\n  if a == 1\n    return true\n  end\n  if a < 0\n    a = a * -1\n\
    \  end\n  b = a ** (1/3.0)\n  if b - b.floor == 0\n    return true\n  else\n \
    \   return false\n  end\nend", "  x = a ** (1/3.0)\n  return x.to_i == x\nend",
  "  if a < 0\n    return false if a % 2 == 1\n    a = a.abs\n  end\n  Math.cbrt(a)\
    \ % 1 == 0\nend", "  if a==1 || a==0 || a==-1\n    return true\n  elsif a%2==0\n\
    \    a = a/2\n    return iscube(a)\n  elsif a%3==0\n    a = a/3\n    return iscube(a)\n\
    \  elsif a%5==0\n    a = a/5\n    return iscube(a)\n  elsif a%7==0\n    a = a/7\n\
    \    return iscube(a)\n  elsif a%11==0\n    a = a/11\n    return iscube(a)\n \
    \ elsif a%13==0\n    a = a/13\n    return iscube(a)\n  elsif a%17==0\n    a =\
    \ a/17\n    return iscube(a)\n  elsif a%19==0\n    a = a/19\n    return iscube(a)\n\
    \  elsif a%23==0\n    a = a/23\n    return iscube(a)\n  elsif a%29==0\n    a =\
    \ a/29\n    return iscube(a)\n  elsif a%31==0\n    a = a/31\n    return iscube(a)\n\
    \  elsif a%37==0\n    a = a/37\n    return iscube(a)\n  elsif a%41==0\n    a =\
    \ a/41\n    return iscube(a)\n  elsif a%43==0\n    a = a/43\n    return iscube(a)\n\
    \  elsif a%47==0\n    a = a/47\n    return iscube(a)\n  elsif a%53==0\n    a =\
    \ a/53\n    return iscube(a)\n  elsif a%59==0\n    a = a/59\n    return iscube(a)\n\
    \  elsif a%61==0\n    a = a/61\n    return iscube(a)\n  elsif a%67==0\n    a =\
    \ a/67\n    return iscube(a)\n  elsif a%71==0\n    a = a/71\n", "  (1..Math.sqrt(a)).each\
    \ { |n| return true if n**3 == a }\n  false\nend", "  a < 0 ? x = a.abs : x =\
    \ a\n  if x == 0\n    return true\n  elsif x == 1\n    return true\n  elsif x\
    \ > 1\n    x /= 3\n    return iscube(x)\n  else\n    return false\n  end\nend",
  "  #your code here\nend", "  a ** (1/3.0) % 1 == 0\nend", "  return a >= 0 && Math.cbrt(a)\
    \ % 1 == 0\nend", "  a.to_s.match(/^(-?\\d+)$/) ? !!Math.cbrt(a).to_i : false\n\
    end", "  for i in 1..a\n    if a == i*i*i\n      return true\n    end\n  end\n\
    \  return false\nend", "  (a ** 0.5) % 1 == 0\nend", "  # your code\nend", " \
    \ (a**(1.0/3)).to_i == (a**(1.0/3))\nend", "  return true if a == 0\n  return\
    \ true if a == 1\n  return false if a < 0\n  return true if Math.cbrt(a)%1 ==\
    \ 0\n  false\nend", "  return a == 0 || (a**(1.0/3.0) % 1).zero?\nend", "  (0..a).each\
    \ do |x|\n    if x**3 == a\n      return true\n    end\n  end\n  return false\n\
    end", "\t# your code here\nend", "  Math.cbrt(a).round**3 == a\nend", "  return\
    \ true if a < 1\n  a.modulo(Math.cbrt(a).to_i) == 0\nend", "  Math.cbrt(a).to_i**3\
    \ == a\nend", "  return true if a == 0\n  return true if a.abs == 1\n  root =\
    \ a.abs**(1.0/3)\n  return true if (root-root.to_i) == 0\n  false\nend", "  a\
    \ == 0 || (a > 0 && (Math.cbrt(a) % 1).zero?)\nend", "  num = a ** (1/3.0)\n \
    \ if num.round == num\n    true\n  else\n    false\n  end\nend", "  \nend", " \
    \ (a**(1.0/3)).round ** 3 == a\nend", "  return true if a == 0\n  a.abs == (1..a.abs).to_a.select\
    \ { |e| e ** 3 == a.abs }.first ** 3\nend", "  if a < 0\n    Math.cbrt(a).to_i\
    \ == Math.cbrt(a)\n  else\n    Math.cbrt(a).to_i == Math.cbrt(a) && Math.cbrt(a)\
    \ > 0\n  end\nend", "  a.abs == (0..a.abs**(1/3.0)).inject(0) { |t, n| n ** 3\
    \ == a.abs ? n ** 3 : t}\nend", "  (a<0? -1: 1) * Math.cbrt(a.abs).to_i**3 ==\
    \ a\nend", "  square_root = Math.sqrt(a)\n  if a == 0\n    return true\n  end\n\
    \  if square_root % 1 == 0\n    square_root = square_root.to_i\n    if square_root\
    \ ** 3 == a\n      return true\n    end\n  end\n  return false\nend", "\tif a.is_a?\
    \ Integer\n\t\ta ** (1.0/3) % 1 == 0\n\telse\n\t\treturn 'You must input an integer'\n\
    \tend\nend", "  # your code here\nend", "  Math.cbrt(a).to_i == Math.cbrt(a) ?\
    \ true : false\nend", "  # Write your code here\nend", "  n = a.abs**(1.0/3)\n\
    \  n == n.to_i\nend", "  #code\nend", "\tif a >= 0 then\n\t\ti = 0\n\t\twhile\
    \ (i * i * i) <= a\n\t\t\tif (i * i * i) == a then\n\t\t\t\treturn true\n\t\t\t\
    end\n\t\t\ti += 1\n\t\tend\n\t\treturn false\n\telse\n\t\treturn iscube(-a)\n\t\
    end\nend", "  a**(1.0/3) % 1 == 0\nend", "  if a >= 0\n    return a**(1/3.0) %\
    \ 1 == 0\n  else\n    return a**(1/3.0) % 1 == 0\n  end\nend", "  b = a**(1.0/3.0)\n\
    \  if b % 1 != 0\n    return false\n  else\n    return true\n  end\nend", "  #\
    \ solution here\nend", "  return true if a == 0\n  a = a.abs\n  i = 0\n  loop\
    \ do\n    i += 1\n    break if i ** 3 == a\n    break if i ** 3 > a\n  end\n \
    \ i ** 3 == a\nend", "  a < 0 ? (0...-a).each { |x| return true if x**3 == -a\
    \ } : (0..a).each { |x| return true if x**3 == a }\n  false\nend", "  return true\
    \ if a == 0\n  root = a.abs**(1.0/3)\n  root.ceil**3 == a.abs\nend", "  i = 1\n\
    \  if a == 0\n    return true\n  end\n  while (i*i*i) <= a\n    if (i*i*i) ==\
    \ a\n      return true\n    end\n    i = i + 1\n  end\n  return false\nend", " \
    \ a = a.abs\n  i = 0\n  while i**3 <= a do\n    if i**3 == a\n      return true\n\
    \    end\n    i += 1\n  end\n  return false\nend", "  (a >= 0 && a == a ** (1.0/3))\
    \ || a == -a ** (1.0/3)\nend", "  # your code here\nend", "    if a.is_a?(Numeric)\n\
    \        Math.cbrt(a) % 1 == 0\n    else\n        false\n    end\nend", "  (a\
    \ ** (1.0/3)).to_i ** 3 == a\nend", "  # do your magic here\n  Math.cbrt(a) %\
    \ 1 == 0\nend", "  (a.abs ** (1.0/3)).to_i ** 3 == a.abs\nend", "    (a > 0 &&\
    \ a == a**(1.0/3)) || a == 0\nend", "  if a >= 0\n    a**(1/3) % 1 == 0\n  else\n\
    \    a**3 % 1 == 0\n  end\nend", "  a.eql?(0) ? true : a.abs**(1.0/3).to_i**3\
    \ == a.abs\nend", "  return true if a==0\n  for i in 1..10000\n    return true\
    \ if i**3==a\n  end\n  return false\nend", "  # your code here\nend", "  Math.cbrt(a).to_i.pow(3)\
    \ == a\nend", "    # your code goes here\nend", "  # your code here\nend", "\t\
    (a**(1.0/3)).round**3 == a ? true : false\nend", "  num = 0\n  num += 1 until\
    \ num ** 3 >= a\n  return num ** 3 == a ? true : false\nend", "  a >= 0 && Math.cbrt(a)\
    \ % 1 == 0\nend\nputs \"Is cube:\"\nputs iscube(1) ==> True\nputs iscube(2) ==>\
    \ False\nputs iscube(-1) ==> True\nputs iscube(64) ==> True\nputs iscube(0) ==>\
    \ True\nputs iscube(180) ==> False", "    if a == 0 or a == 1 or a == -1\n   \
    \     return true\n    end\n    if a % 2 == 0 or a % 3 == 0\n        return false\n\
    \    end\n    if a.abs > 1 and a.abs < 64\n        return true\n    end\n    if\
    \ a.abs > 64\n        for i in (3..a.abs)\n            if i*i*i == a.abs\n   \
    \             return true\n            end\n        end\n    end\n    return false\n\
    end", "\tMath.cbrt(a)%1 == 0\nend", "    c=Math.cbrt(a)\n    c.to_i == c\nend",
  "  return true if a == 0\n  n = Math.cbrt(a)\n  n == n.floor\nend", "  if a % 1\
    \ == 0\n    if a > 0\n      if Math.cbrt(a) % 1 == 0\n        return true\n  \
    \    else\n        return false\n      end\n    else\n      if a < 0\n       \
    \ if Math.cbrt(a) % 1 == 0\n          return true\n        else\n          return\
    \ false\n        end\n      else\n        return true\n      end\n    end\n  else\n\
    \    return false\n  end\nend", "  a % Math.cbrt(a) == 0\nend", "\ta = a.abs\n\
    \tfor i in 1..a\n\t\tif i**3 == a\n\t\t\treturn true\n\t\tend\n\tend\n\treturn\
    \ false\nend", "\t# your code here\nend", "\tif a == 0\n\t\treturn true\n\telsif\
    \ a < 0\n\t\ta = a * -1\n\t\tcube = Math.cbrt(a)\n\t\tif cube % 1 == 0\n\t\t\t\
    return true\n\t\telse\n\t\t\treturn false\n\t\tend\n\telse\n\t\tcube = Math.cbrt(a)\n\
    \t\tif cube % 1 == 0\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\
    \tend\nend", "  a.negative? ? (a * -1) ** (1.0/3) % 1 == 0 : a ** (1.0/3) % 1\
    \ == 0\nend", "  return a == 0 if a == 0\n  return true if a.abs == 1\n  i = 1\n\
    \  loop do\n    return true if a == i**3\n    i += 1\n    break if i > a\n  end\n\
    \  false\nend", "  if a < 0\n    return a.abs ** (1/3.0) == a.abs ** (1/3)\n \
    \ else\n    return a ** (1/3.0) == a ** (1/3)\n  end\nend", "  # your code here\n\
    end", "  a.abs.to_s.split('').each_slice(2).map(&:join).map(&:to_i).map { |x|\
    \ x**3 }.inject(:+) == a\nend", "  a == 0 ? true : a > 0 ? (Math.cbrt(a) % 1 ==\
    \ 0) : (Math.cbrt(-a) % 1 == 0)\nend", "  x = Math.cbrt(a)\n  if x * x * x ==\
    \ a\n    return true\n  else\n    return false\n  end\nend", "  (a**(1.0/3)).to_i**3\
    \ == a ? true : false\nend", "  \nend", "\tputs a**(1.0/3.0)\n\tputs a**(1.0/3.0)%1\n\
    \treturn (a**(1.0/3.0)%1 == 0)\nend", "  return false if a <= 0\n  # if Math.cbrt(a)\
    \ % 1 == 0\n  #   return true\n  # else\n  #   return false\n  # end\n  return\
    \ Math.cbrt(a) % 1 == 0\nend", "  a == 0 || (a % Math.cbrt(a) == 0 && a > 0)\n\
    end", "  return false if a.nil?\n  a = a.abs\n  cube = 0\n  while cube**3 < a\n\
    \    cube += 1\n  end\n  cube**3 == a\nend", "  #your code goes here\n  if a >=\
    \ 0\n    return a**(1.0/3) % 1 == 0\n  else\n    return a**(1.0/3) % 1 == 0\n\
    \  end\nend", "  b = a**(1.0/3.0)\n  return b.to_i == b\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
