name: HumanEval_121_solution
language: rb
prompt: "# Given a non-empty list of integers, return the sum of all of the odd elements\
  \ that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==> 12\n# solution([3,\
  \ 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\ndef solution(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solution\n\
  \    candidate = method(:solution)\n    assert_equal(12, candidate.call([5, 8, 7,\
  \ 1]))\n    assert_equal(9, candidate.call([3, 3, 3, 3, 3]))\n    assert_equal(0,\
  \ candidate.call([30, 13, 24, 321]))\n    assert_equal(5, candidate.call([5, 9]))\n\
  \    assert_equal(0, candidate.call([2, 4, 8]))\n    assert_equal(23, candidate.call([30,\
  \ 13, 23, 32]))\n    assert_equal(3, candidate.call([3, 13, 2, 9]))\n  end\nend\n"
completions: ["  odds = lst.each_with_index.map { |e, i| e if i.even? && e.odd? }.compact\n\
    \  odds.inject(:+)\nend", "  lst.select.with_index { |x, i| i.even? && x.odd?\
    \ }.sum\nend", "    sum = 0\n    lst.each_with_index do |number, index|\n    \
    \  sum += number if index.even? && number.odd?\n    end\n    sum\n  end", "  sol\
    \ = 0\n  lst.each_with_index do |num, idx|\n    sol += num if num.odd? && idx.even?\n\
    \  end\n  sol\nend", "  sum = 0\n  for i in (0...lst.length)\n    if i.even? and\
    \ lst[i].odd?\n      sum += lst[i]\n    end\n  end\n  sum\nend", "  odd_index_numbers_sum\
    \ = 0\n  lst.each_with_index do |number, i|\n    if number.odd? && i.even?\n \
    \     odd_index_numbers_sum += number\n    end\n  end\n  odd_index_numbers_sum\n\
    end", "  count = 0\n  sum = 0\n  while count < lst.length\n    sum += lst[count]\
    \ if lst[count].odd? && count.even?\n    count += 1\n  end\n  sum\nend\np solution([5,\
    \ 8, 7, 1]) ==> 12\np solution([3, 3, 3, 3, 3]) ==> 9\np solution([30, 13, 24,\
    \ 321]) ==>0", "  odd_even_numbers = []\n  lst.each_with_index do |num, index|\n\
    \    if num.odd? && index.even?\n      odd_even_numbers << num\n    end\n  end\n\
    \  odd_even_numbers.sum\nend\np solution([5, 8, 7, 1]) ==> 12\np solution([3,\
    \ 3, 3, 3, 3]) ==> 9\np solution([30, 13, 24, 321]) ==>0", "  if lst.length ==\
    \ 0\n    0\n  else\n    lst.select.with_index{|_, i| i.even?}.select{|n| n.odd?}.reduce(:+)\n\
    \  end\nend", "  #my solution\n  #odd = []\n  #lst.each_with_index {|n,i| odd\
    \ << n if n.odd? && i.even?}\n  #odd.reduce(:+)\n  #best solution\n  lst.values_at(*\
    \ lst.each_index.select {|i| i.even?}).select {|x| x.odd?}.reduce(:+)\nend", " \
    \ i = 0\n  sum = 0\n  while i < lst.length\n    if i.even? && lst[i].odd?\n  \
    \    sum += lst[i]\n    end\n    i += 1\n  end\n  sum\nend", "  lst.each_index.select\
    \ { |i| i.even? }.map { |i| lst[i] }.select { |num| num.odd? }.reduce(:+)\nend\n\
    p solution([5, 8, 7, 1])\np solution([3, 3, 3, 3, 3])\np solution([30, 13, 24,\
    \ 321])", "\ttotal = 0\n\tlst.each_with_index do |n, i|\n\t\tif n.odd? && i.even?\n\
    \t\t\ttotal += n\n\t\tend\n\tend\n\ttotal\nend", "    odds=0\n    lst.each_with_index{|x,i|\
    \ odds+=x if x.odd? and i.even?}\n    odds\nend", "    lst.select.with_index {\
    \ |x, i| x.odd? and i.even? }.sum\nend", "  p lst.values_at(* lst.each_index.select\
    \ {|i| i.even? }).select{|e| e.odd?}.inject(:+)\nend", "  lst.select.with_index{|x,i|\
    \ x.odd? && i.even?}.sum\nend", "  lst.select.with_index { |_, index| index.even?\
    \ }.select(&:odd?).sum\nend", "  odd_numbers_in_even_positions = []\n  lst.each_with_index\
    \ do |number, index|\n    if number.odd? && index.even?\n      odd_numbers_in_even_positions\
    \ << number\n    end\n  end\n  odd_numbers_in_even_positions.sum\nend", "    lst.each_with_index.reduce(0)\
    \ { |r, (v, i)| v.odd? && i.even? ? r + v : r }\nend\nputs solution([5, 8, 7,\
    \ 1])\nputs solution([3, 3, 3, 3, 3])\nputs solution([30, 13, 24, 321])", "  sum\
    \ = 0\n  for i in 0..lst.length - 1\n    if i.even? && lst[i].odd?\n      sum\
    \ += lst[i]\n    end\n  end\n  return sum\nend", "  sum = 0\n  lst.each_with_index\
    \ do |x, index|\n    if index.even? && x.odd?\n      sum += x\n    end\n  end\n\
    \  sum\nend", "  odds = lst.select.with_index { |e,i| e.odd? && i.even? }\n  odds.inject(:+)\n\
    end", "  lst.select.with_index{|e,i| e.odd? && i.even?}.sum\nend", "  odd = lst.each_with_index.map\
    \ { |v, i| v if i.even? && v.odd? }.compact\n  odd.reduce(:+)\nend", "  lst.select.with_index\
    \ { |i, index| i.odd? && index.even? }.sum\nend", "  # code here\nend", "  lst.select.with_index\
    \ { |_, idx| idx.even? }.sum { |el| el.odd? ? el : 0 }\nend", "  lst.select.with_index\
    \ { |_, i| i.even? }.select(&:odd?).sum\nend", "  sum = 0\n  lst.each_with_index\
    \ do |x,i|\n    if x.odd? and i.even?\n      sum += x\n    end\n  end\n  sum\n\
    end", "  sum = 0\n  lst.each_with_index do |v, i|\n    if i.even? && v.odd?\n\
    \      sum += v\n    end\n  end\n  sum\nend", "  # TODO: implement this\n  sum\
    \ = 0\n  len = lst.length\n  len.times do |i|\n    if i.even?\n      if lst[i].odd?\n\
    \        sum += lst[i]\n      end\n    end\n  end\n  sum\nend", "  sum = 0\n \
    \ n = lst.size\n  for i in 0..n-1\n    if (i % 2 == 0) and (lst[i] % 2 != 0)\n\
    \      sum += lst[i]\n    end\n  end\n  return sum\nend", "  lst.select.with_index{|x,\
    \ i| x.odd? && i.even?}.reduce(:+)\nend", "  lst.select.with_index { |n, i| n.odd?\
    \ && i.even? }.sum\nend", "  total = 0\n  lst.each_with_index do |num, i|\n  \
    \  if i.even?\n      total += num\n    end\n  end\n  total\nend", "  # Your Code\
    \ Here\nend", "  sum = 0\n  lst.each_with_index do |x, i|\n    sum += x if x.odd?\
    \ && i.even?\n  end\n  sum\nend", "  sum = 0\n  lst.each_with_index { |num, idx|\
    \ sum += num if idx.even? && num.odd? }\n  sum\nend", "  sum = 0\n  for i in 0..lst.length-1\n\
    \    if i.even? and lst[i].odd?\n      sum += lst[i]\n    end\n  end\n  sum\n\
    end", "  lst.each_with_index.select{|v,i| i.even? && v.odd?}.sum {|v,i| v}\nend",
  "  lst.select.with_index { |_, i| i.even? }.select(&:odd?).reduce(:+)\nend", " \
    \ lst.select.with_index { |num, index| num.odd? && index.even? }.sum\nend", " \
    \ # Your code here\nend", "  sum = 0\n  # Loop through the list and add odd numbers\
    \ that are in even positions to sum\n  lst.each_with_index do |num, i|\n    sum\
    \ += num if num.odd? && i.even?\n  end\n  sum\nend", "  sum = 0\n  lst.each_with_index\
    \ { |n, i| i.even? ? sum += n if n.odd? : nil }\n  sum\nend", "    ans = 0\n \
    \   lst.each_with_index {|x, i| ans += x if x.odd? && i.even?}\n    ans\nend",
  "  lst.values_at(* lst.each_index.select {|i| i.even?}).select{|i| i.odd?}.reduce(:+)\n\
    end", "  sum = 0\n  i = 0\n  lst.each do |x|\n    sum += x if i.even? && x.odd?\n\
    \    i += 1\n  end\n  sum\nend", "  lst.values_at(* lst.each_index.select {|i|\
    \ i.even?}).select{|x| x.odd?}.sum\nend", "  sum = 0\n  lst.each_with_index do\
    \ |ele, i|\n    if ele.odd? && i.even?\n      sum += ele\n    end\n  end\n  sum\n\
    end", "\nend", "  arr = []\n  lst.each_with_index { |x,i| arr << x if i.even?\
    \ && x.odd? }\n  return arr.sum\nend", "  \nend", "  lst.reject.with_index { |_,\
    \ idx| idx.even? }.sum\nend", "  # TODO: Return the sum of the odd elements of\
    \ the even indexed elements\n  lst.reject.with_index { |_, i| i.odd? }.select(&:odd?).reduce(:+)\n\
    end", "  lst.select.with_index{|_,i| i.even?}.select{|n| n.odd?}.reduce(:+)\n\
    end", "  sum = 0\n  lst.each_with_index do |x, i|\n    if i.even? && x.odd?\n\
    \      sum += x\n    end\n  end\n  sum\nend", "  sum = 0\n  lst.each_with_index\
    \ do |n, i|\n    sum += n if i.even? && n.odd?\n  end\n  sum\nend", "  sum = 0\n\
    \  lst.each_with_index { |e, i| sum += e if i.even? && e.odd? }\n  sum\nend",
  "  lst.select.with_index { |num, i| num.odd? && i.even? }.sum\nend", "  lst.select.with_index\
    \ { |x, i| x.odd? if i.even? }.sum\nend", "  # TODO: add code here\nend", "  lst.select.with_index\
    \ { |num, idx| idx.even? && num.odd? }.sum\nend", "\tlst.select.with_index { |n,\
    \ i| i.even? && n.odd? }.reduce(:+)\nend", "  lst.select.with_index { |x, i| i.even?\
    \ }.select(&:odd?).sum\nend", "  lst.values_at(* lst.each_index.select {|i| i.even?}).select{|x|\
    \ x.odd?}.reduce(:+)\nend", "  lst.select.with_index { |n, i| n.odd? if i.even?\
    \ }.reduce(:+)\nend", "  sum = 0\n  lst.each_with_index do |val, idx|\n    if\
    \ idx.even? && val.odd?\n      sum += val\n    end\n  end\n  sum\nend", "  i =\
    \ 0\n  sum = 0\n  until i == lst.length\n    sum += lst[i] if lst[i].odd? && i.even?\n\
    \    i += 1\n  end\n  sum\nend", "  (lst.index(lst.select{|num| num.odd? && lst.index(num).even?}.first).even?\
    \ ?\n  (lst.index(lst.select{|num| num.odd? && lst.index(num).even?}.first).even?\
    \ ?\n    lst.select{|num| num.odd? && lst.index(num).even?}.sum : 0) : 0)\nend",
  "  return lst.values_at(* lst.each_index.select {|i| i.even?}).select {|value| value.odd?}.sum\n\
    end", "  #\n  # sum=0\n  # lst.each_with_index do |x,i|\n  #   if x.odd? && i.even?\n\
    \  #     sum += x\n  #   end\n  # end\n  # sum\n  #\n  lst.select.with_index {\
    \ |x,i| x.odd? && i.even? }.reduce(:+)\nend", "  # your code here\n  lst.values_at(*\
    \ lst.each_index.select {|i| i.even?}).select{|item| item.odd?}.reduce(:+)\nend",
  "  odds = lst.select.with_index { |x, i| x.odd? && i.even? }\n  odds.reduce(:+)\n\
    end", "  sum = 0\n  lst.each_with_index { |i, j| sum += i if i.odd? && j.even?\
    \ }\n  sum\nend", "  lst.select.with_index { |item, index| index.even? && item.odd?\
    \ }.sum\nend", "  sum = 0\n  lst.each_with_index do |n,i|\n    sum += n if i.even?\
    \ && n.odd?\n  end\n  sum\nend", "  ans = 0\n  lst.each_with_index do |x, i|\n\
    \    ans += x if x.odd? && i.even?\n  end\n  ans\nend", "  sum = 0\n  lst.each_with_index\
    \ do |item, index|\n    sum += item if index.even? && item.odd?\n  end\n  sum\n\
    end", "  lst.values_at(* lst.each_index.select {|i| i.even?}).sum\nend\nputs solution([5,\
    \ 8, 7, 1]) ==> 12\nputs solution([3, 3, 3, 3, 3]) ==> 9\nputs solution([30, 13,\
    \ 24, 321]) ==>0", "    lst.map.with_index{|x,i|i.even? && x.odd? ? x : 0}.reduce(:+)\n\
    end\nputs solution([5, 8, 7, 1])", "  odd = []\n  even = []\n  lst.each_with_index\
    \ do |num, i|\n    if num.odd?\n      if i.even?\n        odd << num\n      else\n\
    \        even << num\n      end\n    end\n  end\n  odd.sum\nend", "  lst.each_with_index.map\
    \ { |n, i| n if i.even? && n.odd? }.compact.sum\nend", "  lst.each_with_index.inject(0)\
    \ { |sum, (val, index)| index.even? && val.odd? ? sum + val : sum }\nend", " \
    \ lst.select.with_index{|_,i|i.even?}.select{|e|e.odd?}.sum\nend", "  new_lst\
    \ = []\n  i = 0\n  while i < lst.length\n    new_lst << lst[i] if i.even? && lst[i].odd?\n\
    \    i += 1\n  end\n  new_lst.sum\nend", "  sum = 0\n  lst.each_with_index do\
    \ |x, i|\n    if i.even? && x.odd?\n      sum += x\n    end\n  end\n  sum\nend",
  "  odd_in_even_positions = []\n  lst.each_with_index do |item, index|\n    if index.even?\
    \ && item.odd?\n      odd_in_even_positions << item\n    end\n  end\n  odd_in_even_positions.sum\n\
    end", "  lst.values_at(* lst.each_index.select {|i| i.even?}).reduce(0, :+)\n\
    end", "  lst.values_at(* lst.each_index.select {|i| i.even?}).reduce(0) {|sum,\
    \ item| item.odd? ? sum + item : sum}\nend", "    x = 0\n    lst.each_with_index\
    \ do |y,i|\n        if y % 2 != 0 && i % 2 == 0\n            x += y\n        end\n\
    \    end\n    x\nend", "  lst.each_with_index.inject(0) { |a, (n, i)| (i % 2).zero?\
    \ ? a + n : a }\nend", "  sum = 0\n  lst.each_with_index do |e,i|\n    sum +=\
    \ e if i.even? && e.odd?\n  end\n  sum\nend", "  lst.each_with_index.map{|x,i|\
    \ x if i.even? && x.odd?}.compact.reduce(:+)\nend", "  sum = 0\n  lst.each_with_index\
    \ do |x,i|\n    if i.even?\n      sum += x if x.odd?\n    end\n  end\n  sum\n\
    end", "  result = 0\n  lst.each_with_index do |num, index|\n    result += num\
    \ if index.even? && num.odd?\n  end\n  result\nend", "  # \U0001F4AC Create a\
    \ new array with the odd numbers in even positions\n  odd_even = lst.values_at(*\
    \ lst.each_index.select {|i| i.even?})\n  # \U0001F4AC Filter the odd numbers\
    \ with .select\n  odd_even.select! { |n| n.odd? }\n  # \U0001F4AC Return the sum\
    \ of odd numbers\n  odd_even.sum\nend", "  even_positions = []\n  odd_elements\
    \ = []\n  lst.each_with_index do |number, index|\n    if index.even?\n      even_positions\
    \ << number\n    end\n  end\n  even_positions.each do |number|\n    if number.odd?\n\
    \      odd_elements << number\n    end\n  end\n  odd_elements.sum\nend", "  lst.select.with_index\
    \ { |_, i| i.even? }.select(&:odd?).reduce(:+)\nend", "  lst.select.with_index\
    \ { |item, index| item.odd? && index.even? }.sum\nend", "  #Your code here\n \
    \ lst.each_with_index.map { |x, i| i.even? && x.odd? ? x : 0 }.inject(:+)\nend",
  "\nend", "  # Your code here\n  sum = 0\n  lst.each_with_index do |item, index|\n\
    \    if index.even? && item.odd?\n      sum += item\n    end\n  end\n  sum\nend",
  "  lst.select.with_index { |num, idx| num.odd? && idx.even? }.reduce(:+)\nend",
  "  sum = 0\n  lst.each_with_index do |el, i|\n    if i.even?\n      sum += el if\
    \ el.odd?\n    end\n  end\n  sum\nend", "  odds = lst.select.with_index { |_,\
    \ i| i.even? && lst[i].odd? }\n  odds.sum\nend", "  # TODO\nend", "  lst.select.with_index\
    \ { |_, i| i.even? }.select(&:odd?).sum\nend", "  return 0 if lst.nil? || lst.empty?\n\
    \  sum = 0\n  lst.each_with_index do |item, index|\n    sum += item if index.even?\
    \ && item.odd?\n  end\n  sum\nend", "  lst.each_with_index.inject(0) { |sum, (i,\
    \ index)| sum + (i.odd? && index.even? ? i : 0) }\nend", "  odd = []\n  for i\
    \ in 0..lst.length-1\n    if i % 2 == 0 && lst[i] % 2 != 0\n      odd << lst[i]\n\
    \    end\n  end\n  odd.reduce(:+)\nend", "  sum = 0\n  lst.each_with_index do\
    \ |x,i|\n    if i.even? && x.odd?\n      sum += x\n    end\n  end\n  sum\nend\n\
    puts \"----------Solution----------\"\nputs solution([5, 8, 7, 1])\nputs solution([3,\
    \ 3, 3, 3, 3])\nputs solution([30, 13, 24, 321])\nputs \"--------End of Solution--------\"",
  "  sum = 0\n  counter = 0\n  lst.each do |i|\n    sum += i if counter.even? && i.odd?\n\
    \    counter += 1\n  end\n  sum\nend", "  lst.values_at(* lst.each_index.select\
    \ {|i| i.even?}).select {|x| x.odd?}.sum\nend", "  sum = 0\n  lst.each_with_index\
    \ do |x, i|\n    sum += x if x.odd? && i.even?\n  end\n  sum\nend", "  lst.values_at(*\
    \ lst.each_index.select {|i| i.even? }).reduce(0) {|sum, n| n.odd? ? sum + n :\
    \ sum}\nend", "  # good luck!\n  lst.select.with_index{|_,i| i.even?}.select{|x|\
    \ x.odd?}.sum\nend", "  result = []\n  lst.each_with_index { |item, index| result\
    \ << item if index.even? && item.odd? }\n  result.inject(:+)\nend", "  lst.each_with_index.inject(0)\
    \ { |sum, (num, idx)| sum + num if idx.even? && num.odd? }\nend", "  evens = []\n\
    \  lst.each_with_index { |item, index| evens << item if index.even? }\n  evens.select(&:odd?).sum\n\
    end", "  #odd = lst.select(&:odd?)\n  odd = lst.select { |n| n.odd? }\n  odd[0]\
    \ + odd[2]\nend", "  lst.select.with_index{|_, i| i.even?}.select{|e| e.odd?}.sum\n\
    end", "  lst.select.with_index{|_, i| i.even?}.select{|n| n.odd?}.sum\nend", " \
    \ final_sum = 0\n  lst.each_with_index do |n,i|\n    final_sum += n if n.odd?\
    \ && i.even?\n  end\n  final_sum\nend", "  lst.each_with_index.reduce(0) { |sum,\
    \ (item, index)| index.even? && item.odd? ? sum + item : sum }\nend", "  lst.values_at(*\
    \ lst.each_index.select {|i| i.even?}).select {|x| x.odd?}.sum\nend", "  if lst.length\
    \ > 0\n    return 0 if lst.length == 1\n    s = 0\n    for i in (0..lst.length\
    \ - 1)\n      if i.even? && lst[i].odd?\n        s += lst[i]\n      end\n    end\n\
    \    return s\n  end\nend", "    p lst.select.with_index { |item, index| index.even?\
    \ && item.odd? }.sum\nend", "  odds = lst.select.with_index { |x, i| i.even? &&\
    \ x.odd? }\n  odds.reduce(:+)\nend", "  odd, even = [], []\n  lst.each_with_index\
    \ do |el, i|\n    odd << el if el.odd? && i.even?\n    even << el if el.odd? &&\
    \ i.odd?\n  end\n  odd.sum + even.sum\nend", "  odds = lst.select { |n| n.odd?\
    \ }\n  sum = 0\n  odds.each_with_index do |n, i|\n    sum += n if i.even?\n  end\n\
    \  sum\nend", "  sum = 0\n  lst.each_with_index do |i, ind|\n    sum += i if i.odd?\
    \ && ind.even?\n  end\n  sum\nend", "  lst.map.with_index{|x, i| x if i.even?}.compact.select{|x|\
    \ x.odd?}.sum\nend", "  sum = 0\n  i = 0\n  while i < lst.length\n    sum += lst[i]\
    \ if lst[i].odd? && i.even?\n    i += 1\n  end\n  sum\nend", "  lst.select.with_index{|_,\
    \ i| i.even?}.select{|x| x.odd?}.reduce(:+)\nend", "  lst.select.with_index {\
    \ |_, idx| idx.even? }.select(&:odd?).sum\nend", "  if lst == []\n    0\n  else\n\
    \    lst.values_at(* lst.each_index.select {|i| i.even?})\n        .sum {|e| e.odd?\
    \ ? e : 0}\n  end\nend", "  lst.select.with_index { |num, index| num.odd? && index.even?\
    \ }.sum\nend", "  lst.select.with_index { |n, i| n.odd? && i.even? }.sum\nend",
  "  lst.values_at(* lst.each_index.select {|i| i.even?}).sum\nend", "  sum = 0\n\
    \  lst.each_with_index do |i, ind|\n    sum += i if i.odd? && ind.even?\n  end\n\
    \  sum\nend", "    sum = 0\n    lst.each_with_index {|val, idx| sum += val if\
    \ idx.even? && val.odd?}\n    sum\nend", "  sum = 0\n  lst.each_with_index do\
    \ |e, i|\n    sum += e if e.odd? && i.even?\n  end\n  sum\nend", "  i = 1\n  count\
    \ = 0\n  while i < lst.length\n    if lst[i] % 2 != 0\n      count += lst[i]\n\
    \    end\n    i += 2\n  end\n  return count\nend\np solution([5, 8, 7, 1]) #==>\
    \ 12\np solution([3, 3, 3, 3, 3]) #==> 9\np solution([30, 13, 24, 321]) #==>0",
  "    if lst.empty?\n        return 0\n    end\n    total = 0\n    lst.each_with_index\
    \ do |x, i|\n        if i.even? && x.odd?\n            total += x\n        end\n\
    \    end\n    return total\nend", "  lst.select.with_index { |e,i| e.odd? && i.even?\
    \ }.reduce(:+)\nend", "    sum = 0\n    index = 0\n    lst.each do |num|\n   \
    \     if index % 2 == 0 && num % 2 != 0\n            sum += num\n        end\n\
    \        index += 1\n    end\n    sum\nend", "  sum = 0\n  lst.each_with_index\
    \ { |e, i| sum += e if i.even? && e.odd? }\n  sum\nend", "  lst.values_at(* lst.each_index.select\
    \ {|i| i.even?}).select{|num| num.odd?}.sum\nend", "    lst.select.with_index{|el,idx|\
    \ idx.even? && el.odd?}.reduce(:+)\nend", "  sum = 0\n  lst.each_with_index do\
    \ |item, index|\n    if index.even? && item.odd?\n      sum += item\n    end\n\
    \  end\n  sum\nend", "  odd_in_even = 0\n  for i in 0..lst.length-1\n    odd_in_even\
    \ += lst[i] if i.even? && lst[i].odd?\n  end\n  odd_in_even\nend", "  sum = 0\n\
    \  lst.each_with_index do |n, i|\n    sum += n if n.odd? && i.even?\n  end\n \
    \ sum\nend", "    num = 0\n    lst.each_with_index do |val, i|\n        if val.odd?\
    \ && i.even?\n            num += val\n        end\n    end\n    num\nend", "\t\
    lst.select.with_index{|e,i| i.even?}.select{|e| e.odd?}.sum\nend", "  lst.values_at(*\
    \ lst.each_index.select {|i| i.even?}).select{|n| n.odd?}.sum\nend", "    lst.each_with_index.reduce(0)\
    \ { |sum, (el, i)| sum + el if el.odd? && i.even? }\nend", "  sum = 0\n  for i\
    \ in 0..lst.length-1\n    if lst[i].odd? && i.even?\n      sum += lst[i]\n   \
    \ end\n  end\n  sum\nend", "  # your code goes here\nend", "  lst.select.with_index\
    \ { |n, i| n.odd? && i.even? }.sum\nend", "  odd_elements = lst.select.with_index\
    \ { |e, i| e.odd? && i.even? }\n  odd_elements.sum\nend", "  lst.values_at(* lst.each_index.select\
    \ {|i| i.even?}).select {|n| n.odd?}.sum\nend", "  lst.values_at(* lst.each_index.select\
    \ {|i| i.even?}).select {|e| e % 2 != 0}.sum\nend", "  sum = 0\n  lst.each_with_index\
    \ { |e, i| sum += e if i.even? && e.odd? }\n  sum\nend", "  lst.each_with_index.reduce(0)\
    \ { |sum, (v, i)| (i.even? && v.odd?) ? sum + v : sum }\nend", "  lst.select.with_index{|x,i|\
    \ x.odd? && i.even?}.sum\nend", "  lst.select.with_index { |_, idx| idx.even?\
    \ }.reduce(0) { |acc, num| num.odd? ? acc + num : acc }\nend", "  lst.select.with_index\
    \ { |_, i| lst[i].odd? if i.even? }.reduce(:+)\nend", "  sum = 0\n  for i in 0..lst.length-1\n\
    \    sum += lst[i] if lst[i].odd? && i.even?\n  end\n  sum\nend", "  odd = lst.select\
    \ { |i| i.odd? }\n  even = odd.select.with_index { |i, x| x.even? }\n  even.sum\n\
    end", "  lst.values_at(* lst.each_index.select{|i| i.even?}).select{|x| x.odd?}.reduce(:+)\n\
    end", "  lst.select.with_index { |e, i| e.odd? && i.even? }.sum\nend", "  lst.values_at(*\
    \ lst.each_index.select {|i| i.even?}).inject(0) {|sum, item| item.odd? ? sum\
    \ += item : sum}\nend", "  lst.select{|n| n.odd? && lst.index(n).even?}.reduce(:+)\n\
    end", "  #your code here\nend", "  arr = []\n  count = 0\n  lst.each do |item|\n\
    \    if count % 2 == 0 && item % 2 != 0\n      arr << item\n    end\n    count\
    \ += 1\n  end\n  arr.sum\nend", "  lst.each_with_index.inject(0) { |sum, (e, i)|\
    \ i.even? && e.odd? ? sum + e : sum }\nend", "  if lst.length > 0\n    sum = 0\n\
    \    lst.each_with_index do |x,i|\n      if x.odd? && i.even?\n        sum +=\
    \ x\n      end\n    end\n    return sum\n  else\n    return 0\n  end\nend", " \
    \ lst.select.with_index{|_, i| i.even?}.select{|i| i.odd?}.reduce(:+)\nend", " \
    \ # TODO: complete the solution\n  sum = 0\n  lst.each_with_index { |n, i| sum\
    \ += n if n.odd? && i.even? }\n  sum\nend", "  lst.values_at(* lst.each_index.select\
    \ {|i| i.even? }).select{|x| x.odd?}.reduce(:+)\nend", "  sum = 0\n  lst.each_with_index\
    \ do |num, i|\n    sum += num if i.even? && num.odd?\n  end\n  sum\nend", "  sum\
    \ = 0\n  lst.each_with_index { |num, index| sum += num if num.odd? && index.even?\
    \ }\n  sum\nend", "  #Code here\n  result = 0\n  lst.each_with_index { |v, i|\
    \ result += v if i.even? && v.odd? }\n  result\nend", "  # write your code here\n\
    \  sum = 0\n  lst.each_with_index { |x, i| sum += x if x.odd? && i.even? }\n \
    \ sum\nend", "\tsum = 0\n\tlst.each_with_index do |number, index|\n\t\tif index.even?\
    \ && number.odd?\n\t\t\tsum = sum + number\n\t\tend\n\tend\n\tsum\nend", "  lst.values_at(*\
    \ lst.each_index.select {|i| i.even?}).select {|e| e.odd?}.sum\nend", "    lst.each_with_index.select{|x,i|\
    \ i.even? && x.odd?}.map{|x,i| x}.sum\nend", "  p lst.select.with_index { |_,\
    \ i| i.even? }.select(&:odd?).sum\nend", "\nend", "  lst.values_at(* lst.each_index.select{|x|\
    \ x.even?}).sum\nend", "  lst.values_at(* lst.each_index.select {|i| i.even?}).select\
    \ {|n| n.odd?}.reduce(:+)\nend", "\nend", "  lst.select.with_index { |x, i| i.even?\
    \ && x.odd? }.sum\nend", "  sum = 0\n  i = 0\n  while i < lst.length\n    if lst[i].odd?\
    \ && i.even?\n      sum += lst[i]\n    end\n    i += 1\n  end\n  sum\nend", " \
    \ counter = 0\n  sum = 0\n  while counter < lst.length\n    if counter.even? &&\
    \ lst[counter].odd?\n      sum += lst[counter]\n    end\n    counter += 1\n  end\n\
    \  sum\nend", "  lst.select.with_index { |_, i| i.even? }.select(&:odd?).reduce(:+)\n\
    end", "  sum = 0\n  lst.each_with_index do |num,index|\n    if index.even? &&\
    \ num.odd?\n      sum += num\n    end\n  end\n  sum\nend", "  p lst.select.with_index\
    \ { |_, i| i.even? }.select(&:odd?).sum\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
