name: HumanEval_97_multiply
language: rb
prompt: "# Complete the function that takes two integers and returns \n# the product\
  \ of their unit digits.\n# Assume the input is always valid.\n# Examples:\n# multiply(148,\
  \ 412) should return 16.\n# multiply(19, 28) should return 72.\n# multiply(2020,\
  \ 1851) should return 0.\n# multiply(14,-15) should return 20.\ndef multiply(a,\
  \ b)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_multiply\n\
  \    candidate = method(:multiply)\n    assert_equal(16, candidate.call(148, 412))\n\
  \    assert_equal(72, candidate.call(19, 28))\n    assert_equal(0, candidate.call(2020,\
  \ 1851))\n    assert_equal(20, candidate.call(14, -15))\n    assert_equal(42, candidate.call(76,\
  \ 67))\n    assert_equal(49, candidate.call(17, 27))\n    assert_equal(0, candidate.call(0,\
  \ 1))\n    assert_equal(0, candidate.call(0, 0))\n  end\nend\n"
completions: ["  return a if b == 1\n  return b if a == 1\n  (a*b).to_s[-1].to_i\n\
    end", "  a = a.abs\n  b = b.abs\n  product = (a % 10) * (b % 10)\n  product\n\
    end", "    #your code here\n    a.abs * b.abs % 10\nend", "  (a*b).to_s[-1].to_i\n\
    end", "  c = a * b\n  d = c.to_s.split('').last.to_i\nend", "  # your code goes\
    \ here\n  multiply = a * b\n  return multiply.to_s[-1].to_i\nend", "  (a % 10)\
    \ * (b % 10)\nend", "  a.to_s.split('').last.to_i * b.to_s.split('').last.to_i\n\
    end", "  (a*b).to_s[-1].to_i\nend", "  (a*b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  (a % 10) * (b % 10)\nend", "    a.abs % 10 * b.abs % 10\nend", "  (a\
    \ % 10) * (b % 10)\nend", "  (a * b).digits.first\nend", "  a.to_s.split('').last.to_i\
    \ * b.to_s.split('').last.to_i\nend", "    a = a.abs.to_s.chars.map(&:to_i)\n\
    \    b = b.abs.to_s.chars.map(&:to_i)\n    a[0] * b[0]\nend", "    (a * b).to_s[-1].to_i\n\
    end", "  (a * b).digits.first\nend", "  p a.to_s.split('').last.to_i * b.to_s.split('').last.to_i\n\
    end\nmultiply(19, 28)", "    a.to_s.chars.last.to_i * b.to_s.chars.last.to_i\n\
    end", "  a = a.to_s.chars.last.to_i\n  b = b.to_s.chars.last.to_i\n  return a\
    \ * b\nend", "  (a*b).digits.first\nend", "  a = a.to_s.chars.last.to_i\n  b =\
    \ b.to_s.chars.last.to_i\n  a * b\nend", "  (a % 10) * (b % 10)\nend", "    (a*b).to_s[-1].to_i\n\
    end", "  a, b = a.abs, b.abs\n  ((a%10) * (b%10)).abs\nend", "  (a.abs * b.abs).to_s[-1].to_i\n\
    end", "  a.abs * b.abs % 10\nend", "    a = a.to_s.chars.map(&:to_i).reverse\n\
    \    b = b.to_s.chars.map(&:to_i).reverse\n    c = a.zip(b).map { |x, y| x * y\
    \ }.reverse\n    return c[0]\nend", "  #your code here\nend", "    a.to_s.chars.last.to_i\
    \ * b.to_s.chars.last.to_i\nend", "  (a % 10) * (b % 10)\nend", "  (a % 10) *\
    \ (b % 10)\nend", "  #your code here\nend", "  p (a * b).to_s[-1].to_i\nend\n\
    multiply(14,-15)", "    (a * b).to_s[-1].to_i\nend", "  a.abs * b.abs % 10\nend\n\
    p multiply(19, 28)", "  (a*b).to_s[-1].to_i\nend", "  (a.to_s.chars.last.to_i\
    \ * b.to_s.chars.last.to_i)\nend", "    (a*b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\n\
    end", "    product = a * b\n    if product >= 0\n        product.to_s[-1].to_i\n\
    \    else\n        product = product.abs\n        product.to_s[-1].to_i\n    end\n\
    end", "    b, a = a, b if b.abs > a.abs\n    a, b = a.abs, b.abs\n    a.digits.first\
    \ * b.digits.first\nend", "  (a*b).digits.first\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend\nputs multiply(148, 412)\nputs multiply(19,\
    \ 28)\nputs multiply(2020, 1851)\nputs multiply(14,-15)", "  #..\n  a = a.abs\n\
    \  b = b.abs\n  a_mod = a % 10\n  b_mod = b % 10\n  a_mod * b_mod\nend", "  (a\
    \ * b).to_s[-1].to_i\nend", "    a.abs.to_s.chars.last.to_i * b.abs.to_s.chars.last.to_i\n\
    end", "    a = a % 10\n    b = b % 10\n    a * b\nend", "  (a % 10) * (b % 10)\n\
    end", "  digits = (a * b).to_s.split('')\n  digits.map { |num| num.to_i }.inject(:*)\n\
    end", "  (a*b).to_s[-1].to_i\nend", "  a.abs * b.abs % 10\nend", "  (a % 10) *\
    \ (b % 10)\nend", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend",
  "  (a % 10) * (b % 10)\nend", "    a*b\nend", "    a.abs * b.abs\nend", "  (a*b).to_s[-1].to_i\n\
    end", "    #a*b\n    return (a*b).to_s[-1].to_i\nend\nputs multiply(19, 28)\n\
    puts multiply(20, 1851)", "  a.abs * b.abs\nend", "  (a*b).to_s[-1].to_i\nend",
  "  (a % 10) * (b % 10)\nend", "  (a * b).to_s[-1].to_i\nend", "    (a*b).to_s[-1].to_i\n\
    end", "  a.abs * b.abs % 10\nend", "  ((a % 10) * (b % 10)).to_i\nend", "    a.abs\
    \ % 10 * b.abs % 10\nend", "  a.abs.digits.join.to_i * b.abs.digits.join.to_i\n\
    end", "  (a % 10) * (b % 10)\nend", "  (a*b).to_s[-1].to_i\nend", "  a * b % 10\n\
    end", "  return (a%10)*(b%10)\nend\np multiply(148, 412)", "  a.abs * b.abs %\
    \ 10\nend", "    # your code here\n    return (a % 10) * (b % 10)\nend", "   \
    \ a.abs % 10 * b.abs % 10\nend\np multiply(148, 412) # should return 16.\np multiply(19,\
    \ 28) # should return 72.\np multiply(2020, 1851) # should return 0.\np multiply(14,-15)\
    \ # should return 20.", "  (a*b).to_s[-1].to_i\nend\np multiply(14,-15)", "  \
    \  (a % 10) * (b % 10)\nend", "  (a % 10) * (b % 10)\nend", "  prod = a * b\n\
    \  prod.to_s[-1].to_i\nend", "    a_digits = a.abs.to_s.split('').map { |dig|\
    \ dig.to_i }\n    b_digits = b.abs.to_s.split('').map { |dig| dig.to_i }\n   \
    \ (a_digits[-1] * b_digits[-1])\nend", "  (a * b).to_s[-1].to_i\nend\np multiply(14,-15)",
  "  (a*b).to_s[-1].to_i\nend", "    return (a % 10) * (b % 10)\nend", "  a = a.abs\n\
    \  b = b.abs\n  a = a%10\n  b = b%10\n  a*b\nend", "    return a.to_s.chars.last.to_i\
    \ * b.to_s.chars.last.to_i\nend", "  (a*b).digits.first\nend", "  a.abs * b.abs\
    \ % 10\nend", "  (a * b).to_s[-1].to_i\nend", "    if a < 0 && b < 0\n       \
    \ (a * b).to_s[-1].to_i\n    elsif a < 0 || b < 0\n        (a * b).to_s[-2].to_i\n\
    \    else\n        (a * b).to_s[-1].to_i\n    end\nend", "  a % 10 * b % 10\n\
    end", "  # your code here\nend", "  a*b % 10\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  (a.abs * b.abs).to_s[-1].to_i\nend", "  # your code here\n  if a < 0\
    \ && b < 0\n    a = a.abs\n    b = b.abs\n  elsif a < 0 || b < 0\n    a = a.abs\n\
    \    b = b.abs\n    (a*b).to_s[-1].to_i*-1\n  else\n    (a*b).to_s[-1].to_i\n\
    \  end\nend", "  \"#{a * b}\".to_i % 10\nend", "    (a.abs * b.abs).to_s[-1].to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a * b).digits.last\nend", "  (a * b).digits.first\n\
    end\np multiply(148, 412)\np multiply(19, 28)\np multiply(2020, 1851)\np multiply(14,-15)",
  "  #your code here\n  a.abs * b.abs\nend\nputs multiply(148, 412)\nputs multiply(19,\
    \ 28)\nputs multiply(2020, 1851)\nputs multiply(14,-15)", "  #your code here\n\
    \  # a.digits.join.reverse.to_i * b.digits.join.reverse.to_i\n  a%10 * b%10\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a.abs * b.abs).digits.first\nend", " \
    \ (a * b).to_s[-1].to_i\nend", "    a%10 * b%10\nend", "    return a.abs%10 *\
    \ b.abs%10\nend", "  a.abs.to_s.split('').last.to_i * b.abs.to_s.split('').last.to_i\n\
    end", "  a.abs * b.abs % 10\nend", "  a.abs * b.abs % 10\nend", "  #your code\
    \ here\n  (a % 10) * (b % 10)\nend", "  a * b % 10\nend", "    (a*b).to_s[-1].to_i\n\
    end", "  a.abs * b.abs % 10\nend", "  (a.abs * b.abs).digits.first\nend", "  (a\
    \ * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  a.abs % 10 * b.abs\
    \ % 10\nend", "  a * b\nend\np multiply(148, 412) == 16\np multiply(19, 28) ==\
    \ 72\np multiply(2020, 1851) == 0\np multiply(14,-15) == 20", "  (a % 10) * (b\
    \ % 10)\nend", "  (a.abs * b.abs).to_s[-1].to_i\nend", "  [a, b].map { |i| i %\
    \ 10 }.reduce(:*)\nend", "    a.to_s.slice(-1).to_i * b.to_s.slice(-1).to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "    (a.abs * b.abs).to_s[-1].to_i\nend\n\
    p multiply(148, 412)#should return 16.\np multiply(19, 28)#should return 72.\n\
    p multiply(2020, 1851)#should return 0.\np multiply(14,-15)#should return 20.",
  "  (a % 10) * (b % 10)\nend", "  (a % 10) * (b % 10)\nend\nputs \"multiplue tests\"\
    \nputs multiply(148, 412) == 16\nputs multiply(19, 28) == 72\nputs multiply(2020,\
    \ 1851) == 0\nputs multiply(14,-15) == 20", "  (a * b).digits.first\nend", " \
    \ a = a.abs\n  b = b.abs\n  a = a % 10\n  b = b % 10\n  a * b\nend", "  (a*b).to_s[-1].to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a*b).digits.first\nend", "  a.abs.digits.first\
    \ * b.abs.digits.first\nend", "  # Your code here\n  return ((a*b)%10)\nend",
  "  (a * b).to_s[-1].to_i\nend", "  a * b\nend\nputs multiply(148, 412) # should\
    \ return 16.\nputs multiply(19, 28) # should return 72.\nputs multiply(2020, 1851)\
    \ # should return 0.\nputs multiply(14,-15) # should return 20.\nputs \"**************\"",
  "  (a * b).to_s[-1].to_i\nend", "  a = a.to_s.chars\n  b = b.to_s.chars\n  (a[-1].to_i\
    \ * b[-1].to_i)\nend", "  (a * b).to_s[-1].to_i\nend", "  #your code here\n  a.to_s.chars.last.to_i\
    \ * b.to_s.chars.last.to_i\nend", "  (a*b).digits.first\nend", "  a.abs * b.abs\
    \ % 10\nend\np multiply(14,-15)", "  a * b % 10\nend", "    (a * b).to_s[-1].to_i\n\
    end", "  #your code here\n  (a*b).abs.to_s[-1].to_i\nend", "  a.abs * b.abs %\
    \ 10\nend", "  a.to_s.split('').last.to_i * b.to_s.split('').last.to_i\nend",
  "  (a * b).to_s[-1].to_i\nend\np multiply(2030, 1851)", "  # write the code for\
    \ your function here\n  a_str = a.to_s\n  b_str = b.to_s\n  a_str = a_str[-1].to_i\n\
    \  b_str = b_str[-1].to_i\n  return a_str * b_str\nend", "  (a.abs*b.abs).to_s[-1].to_i\n\
    end", "  a.to_s.chars.last.to_i * b.to_s.chars.last.to_i\nend", "  a.abs*b.abs%10\n\
    end", "  (a % 10) * (b % 10)\nend", "  (a * b).digits.first\nend", "  a.abs *\
    \ b.abs % 10\nend", "  # your code goes here\nend", "  (a * b).digits.first\n\
    end", "  # your code here\n  a = a.abs\n  b = b.abs\n  a_last_digit = a % 10\n\
    \  b_last_digit = b % 10\n  a_last_digit * b_last_digit\nend", "  (a*b).digits.first\n\
    end", "    s = (a * b).to_s.split('')\n    s[-1].to_i * s[-2].to_i\nend", "  \
    \  (a * b).to_s[-1].to_i\nend", "  c = (a % 10) * (b % 10)\n  return c\nend",
  "  a.abs * b.abs % 10\nend", "  a.to_s.split('').last.to_i * b.to_s.split('').last.to_i\n\
    end", "  a.to_s.chars.last.to_i * b.to_s.chars.last.to_i\nend", "  (a * b).to_s[-1].to_i\n\
    end\nputs multiply(148, 412) # should return 16.\nputs multiply(19, 28) # should\
    \ return 72.\nputs multiply(2020, 1851) # should return 0.\nputs multiply(14,-15)\
    \ # should return 20.", "    (a.abs * b.abs).digits.first(2).sum\nend", "  a.abs\
    \ * b.abs % 10\nend", "  (a*b).digits.first\nend", "  a.abs * b.abs % 10\nend",
  "  (a * b).to_s[-1].to_i\nend\nputs multiply(198, 21)\nputs multiply(1920, 5)\n\
    puts multiply(1645, -4)\nputs multiply(14,-15)\nputs multiply(2020, 1851)\nputs\
    \ multiply(19, 28)\nputs multiply(148, 412)\nputs multiply(148, 4120)\nputs multiply(1480,\
    \ 4120)\nputs multiply(1490, 4120)\nputs multiply(1485, 412)\nputs multiply(1485,\
    \ 4120)\nputs multiply(1485, 41201)\nputs multiply(1485, 412011)\nputs multiply(1485,\
    \ 412030)\nputs multiply(14850, 412030)\nputs multiply(14850, 4120300)\nputs multiply(14850,\
    \ 41203030)\nputs multiply(14850, 412030300)\nputs multiply(14850, 4120303001)\n\
    puts multiply(14850, 41203030010)\nputs multiply(14850, 412030300000)\nputs multiply(14850,\
    \ 4120303001020)\nputs multiply(14850, 41203030010200)\nputs multiply(14850, 412030300102000)\n\
    puts multiply(14850, 4120303001020000)\nputs multiply(14850, 412030300102000000)\n\
    puts multiply(14850, 4120303001020000000)\nputs multiply(14850, 41203030010200000000)\n\
    puts multiply(14850, 412030300102000000000)\nputs multiply(14850, 4120303001020000000000)\n\
    puts multiply(14850, 41203030010200000000000)\nputs multiply(14850, 412030300102000000000000)\n\
    puts multiply(14850, 4120303001020000000000000)\nputs multiply(14850, 41203030010200000000000000)\n\
    puts multiply(14850, 412030300102000000000000000)\nputs multiply(14850, 4120303001020000000000000000)\n\
    puts multiply(", "  a.to_s.split('').last.to_i * b.to_s.split('').last.to_i\n\
    end", "    (a*b).to_s[-1].to_i\nend", "  (a.abs * b.abs).to_s[-1].to_i\nend",
  "  return (a * b) % 10\nend", "  # a.to_s.split('').last.to_i * b.to_s.split('').last.to_i\n\
    \  (a % 10) * (b % 10)\nend", "  a = a.to_s\n  b = b.to_s\n  a[-1].to_i * b[-1].to_i\n\
    end", "  (a % 10) * (b % 10)\nend", "    (a.abs * b.abs).to_s[-1].to_i\nend",
  "  return 0 if a * b == 0\n  (a * b).abs % 10\nend", "  (a.to_s.chars.last.to_i\
    \ * b.to_s.chars.last.to_i)\nend", "    (a*b).digits.first\nend", "  (a*b).to_s[-1].to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a.abs * b.abs).to_s[-1].to_i\nend",
  "    (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  return (a*b)%10\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "    a.abs.to_s.chars.last.to_i\
    \ * b.abs.to_s.chars.last.to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a *\
    \ b).to_s[-1].to_i\nend", "  a.abs * b.abs % 10\nend", "  (a * b).to_s[-1].to_i\n\
    end", "    #your code here\n    (a * b).abs % 10\nend\np multiply(2020, 1851)"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
