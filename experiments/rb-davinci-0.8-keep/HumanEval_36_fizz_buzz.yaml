name: HumanEval_36_fizz_buzz
language: rb
prompt: "# Return the number of times the digit 7 appears in integers less than n\
  \ which are divisible by 11 or 13.\n# >>> fizz_buzz(50)\n# 0\n# >>> fizz_buzz(78)\n\
  # 2\n# >>> fizz_buzz(79)\n# 3\ndef fizz_buzz(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fizz_buzz\n\
  \    candidate = method(:fizz_buzz)\n    assert_equal(0, candidate.call(50))\n \
  \   assert_equal(2, candidate.call(78))\n    assert_equal(3, candidate.call(79))\n\
  \    assert_equal(3, candidate.call(100))\n    assert_equal(6, candidate.call(200))\n\
  \    assert_equal(192, candidate.call(4000))\n    assert_equal(639, candidate.call(10000))\n\
  \    assert_equal(8026, candidate.call(100000))\n  end\nend\n"
completions: ["  # Your code here\nend", "  # your code here\nend", "\t(1...n).count\
    \ { |i| [11, 13].any? { |d| i % d == 0 } && i.to_s.count('7') > 0 }\nend", " \
    \ cnt = 0\n  1.upto(n-1) do |i|\n    if i % 11 == 0 || i % 13 == 0\n      if i.to_s.count('7')\
    \ > 0\n        cnt += 1\n      end\n    end\n  end\n  cnt\nend", "  cnt = 0\n\
    \  (1..n).each do |i|\n    if i % 11 == 0 || i % 13 == 0\n      cnt += i.to_s.split('').count\
    \ { |c| c == '7' }\n    end\n  end\n  cnt\nend", "  (1...n).count { |num| num\
    \ % 11 == 0 || num % 13 == 0 && num.to_s.include?('7') }\nend", "  # your code\
    \ here\nend", "  count = 0\n  (1...n).each do |i|\n    count += 1 if i % 11 ==\
    \ 0 && i.to_s.include?('7')\n    count += 1 if i % 13 == 0 && i.to_s.include?('7')\n\
    \  end\n  count\nend", "  count = 0\n  1.upto(n-1) do |x|\n    count += 1 if x\
    \ % 11 == 0 || x % 13 == 0 && x.to_s.include?(\"7\")\n  end\n  count\nend", " \
    \ num=0\n  (1..n).each do |i|\n    if i%11==0 or i%13==0\n      num+=i.to_s.count(\"\
    7\")\n    end\n  end\n  num\nend", "  (1...n).count { |i| i % 11 == 0 || i % 13\
    \ == 0 }\nend", '  return 0 if n < 7', "  count = 0\n  for i in 1..n\n    if i\
    \ % 11 == 0 || i % 13 == 0\n      string = i.to_s\n      count += string.length\
    \ - string.tr('7', '').length\n    end\n  end\n  count\nend", "  sum = 0\n  (1...n).each\
    \ do |num|\n    sum += 1 if (num % 11 == 0 || num % 13 == 0) && (num.to_s.include?('7'))\n\
    \  end\n  sum\nend", "  # your code here\nend", "  # Get all the numbers less\
    \ than n\n  # Make sure they're divisible by 11 or 13\n  # Count the number of\
    \ times 7 appears\n  # Return the count\nend", "  sum = 0\n  1.upto(n-1) do |i|\n\
    \    if (i % 11 == 0 || i % 13 == 0)\n      sum += i.to_s.count('7')\n    end\n\
    \  end\n  sum\nend", "\nend", "  count = 0\n  (1...n).each do |num|\n    if num\
    \ % 11 == 0 || num % 13 == 0\n      count += num.to_s.count('7')\n    end\n  end\n\
    \  count\nend", "  counter = 0\n  (1...n).each do |num|\n    num = num.to_s\n\
    \    counter += 1 if (num.include?(\"7\") && (num.to_i % 11 == 0 || num.to_i %\
    \ 13 == 0))\n  end\n  counter\nend", "  (1...n).inject(0) { |s,i| s + ((i % 11\
    \ == 0 || i % 13 == 0) && i.to_s.include?('7') ? 1 : 0) }\nend", "  # your code\
    \ here\nend", "  r = 0\n  (1..n).each do |i|\n    if ((i % 11 == 0) || (i % 13\
    \ == 0))\n      i.to_s.chars.map(&:to_i).each do |j|\n        r += 1 if j == 7\n\
    \      end\n    end\n  end\n  r\nend", "  count = 0\n  (1...n).each do |x|\n \
    \   if x % 11 == 0 || x % 13 == 0\n      x.to_s.split('').each do |digit|\n  \
    \      count += 1 if digit == '7'\n      end\n    end\n  end\n  count\nend", " \
    \ count = 0\n  (1...n).each do |i|\n    if i % 11 == 0 || i % 13 == 0\n      count\
    \ += 1 if i.to_s.include?(\"7\")\n    end\n  end\n  count\nend", "  start = Time.now\n\
    \  num = 0\n  (1..n).each do |i|\n    num += 1 if i % 11 == 0 && i.to_s.include?(\"\
    7\")\n    num += 1 if i % 13 == 0 && i.to_s.include?(\"7\")\n  end\n  puts \"\
    Running time #{Time.now - start}\"\n  num\nend", "\tnumbers = (1..n).to_a.reject\
    \ { |i| i%11 != 0 && i%13 != 0 }\n\tnumbers.select { |i| i.to_s.split(\"\").include?(\"\
    7\") }.count\nend", "  n /= 7\n  n /= 11\n  n /= 13\n  if n == 0\n    p n\n  else\n\
    \    n += n / 7\n    n += n / 11\n    n += n / 13\n    p n\n  end\nend", "  (1...n).to_a.select\
    \ { |x| x % 11 == 0 || x % 13 == 0 }.to_s.count('7')\nend", "  count = 0\n  (1...n).each\
    \ do |num|\n    count += 1 if num % 11 == 0 || num % 13 == 0\n  end\n  count\n\
    end", "  nums = (1...n).select { |x| x % 11 == 0 || x % 13 == 0 }\n  nums.inject(0)\
    \ { |sum, x| sum + x.to_s.count('7') }\nend", "  c = 0\n  (1..n).each { |i| c\
    \ += 1 if (i % 11 == 0 || i % 13 == 0) && i.to_s.include?('7') }\n  c\nend", " \
    \ nums = []\n  1.upto(n) do |num|\n    nums << num if num % 11 == 0 || num % 13\
    \ == 0\n  end\n  nums.inject(0) { |sum, num| sum + num.to_s.split('').count('7')\
    \ }\nend", "  (1...n).count { |i| i % 11 == 0 || i % 13 == 0 }\nend", "\t(1...n).select{|i|\
    \ i%11==0 || i%13==0}.map{|i| i.to_s.count('7')}.reduce(:+)\nend", "  x = 0\n\
    \  (1..n).each do |i|\n    if i % 11 == 0 || i % 13 == 0\n      x += i.to_s.split('').count\
    \ { |j| j == '7' }\n    end\n  end\n  x\nend", "  start = n - n % 11\n  end_point\
    \ = n - n % 13\n  n = n - n % 11\n  total = 0\n  while n < end_point\n    if (n\
    \ % 11 == 0 && n % 13 == 0)\n      if n.to_s.split('').any? { |num| num == \"\
    7\" }\n        total += 1\n      end\n    elsif n % 11 == 0\n      if n.to_s.split('').any?\
    \ { |num| num == \"7\" }\n        total += 1\n      end\n    elsif n % 13 == 0\n\
    \      if n.to_s.split('').any? { |num| num == \"7\" }\n        total += 1\n \
    \     end\n    end\n    n += 1\n  end\n  total\nend", "  count = 0\n  (1...n).each\
    \ do |i|\n    count += 1 if (i % 11 == 0 || i % 13 == 0) && i.to_s.include?('7')\n\
    \  end\n  count\nend", "  number_of_7s = 0\n  (1..n).each do |i|\n    if (i %\
    \ 11 == 0 || i % 13 == 0) && i < n\n      number_of_7s += i.to_s.count(\"7\")\n\
    \    end\n  end\n  number_of_7s\nend", "  count = 0\n  (1...n).each do |num|\n\
    \    if (num % 11 == 0 || num % 13 == 0) && num.to_s.include?(\"7\")\n      count\
    \ += 1\n    end\n  end\n  count\nend", "  (1...n).select{|x|x%11==0||x%13==0}.to_s.chars.map(&:to_i).count(7)\n\
    end", "  cnt = 0\n  (1..n).each do |num|\n    next if num % 11 != 0 && num % 13\
    \ != 0\n    num.to_s.split('').each do |digit|\n      cnt += 1 if digit == '7'\n\
    \    end\n  end\n  cnt\nend", "  (1...n).count { |x| (x % 11 == 0 || x % 13 ==\
    \ 0) && x.to_s.include?('7') }\nend", "  count = 0\n  1.upto(n - 1) do |number|\n\
    \    count += 1 if number % 11 == 0 || number % 13 == 0\n  end\n  count\nend",
  "  count = 0\n  for i in (1..n)\n    if i % 11 == 0 || i % 13 == 0\n      for a\
    \ in i.to_s.split('')\n        if a == \"7\"\n          count += 1\n        end\n\
    \      end\n    end\n  end\n  count\nend", "  count = 0\n  (1...n).each do |num|\n\
    \    if (num % 11 == 0) || (num % 13 == 0)\n      count += num.to_s.count('7')\n\
    \    end\n  end\n  count\nend", "  sum = 0\n  i = 11\n  while i < n\n    if i\
    \ % 11 == 0 || i % 13 == 0\n      sum +=  i.to_s.count('7')\n    end\n    i +=\
    \ 1\n  end\n  sum\nend", end, "\tcount = 0\n\tfor i in 1..n-1\n\t\tdigits = i.to_s.split('')\n\
    \t\tcount += digits.count(\"7\") if (i % 11 == 0 || i % 13 == 0)\n\tend\n\tcount\n\
    end", "  s = 0\n  for i in 1..n\n    if (i % 11 == 0 || i % 13 == 0)\n      s\
    \ += i.to_s.count('7')\n    end\n  end\n  return s\nend", "  counter = 0\n  (0...n).each\
    \ do |i|\n    if (i % 11 == 0 || i % 13 == 0) && i.to_s.include?(\"7\")\n    \
    \  counter += 1\n    end\n  end\n  counter\nend", "  fb = []\n  (1..n).each do\
    \ |n|\n    if n % 11 == 0 or n % 13 == 0\n      fb << n\n    end\n  end\n  fb.select{|f|\
    \ f.to_s.include?('7')}.size\nend", "  result = 0\n  n.times do |i|\n    if (i\
    \ % 11 == 0 || i % 13 == 0) && i < n\n      num_to_str = i.to_s\n      result\
    \ += num_to_str.count(\"7\")\n    end\n  end\n  result\nend", "  (1...n).select{|x|\
    \ x%11==0 || x%13==0}.count{|y| y.to_s.count(\"7\") > 0}\nend", "    ans = 0\n\
    \    1.upto(n-1){|i|\n        if (i % 11 == 0 || i % 13 == 0)\n            i.to_s.each_char{|j|\n\
    \                ans += 1 if j == \"7\"\n            }\n        end\n    }\n \
    \   ans\nend", "  total = 0\n  for i in 1..n-1\n    if i % 11 == 0 || i % 13 ==\
    \ 0\n      i.to_s.each_char { |char| total += 1 if char == \"7\" }\n    end\n\
    \  end\n  total\nend", "  numbers = []\n  num_of_7 = 0\n  (1..n).each do |num|\n\
    \    numbers << num\n  end\n  numbers.each do |num|\n    num_of_7 += 1 if (num\
    \ % 11 == 0 || num % 13 == 0) && num.to_s.include?(\"7\")\n  end\n  num_of_7\n\
    end", "  x = 0\n  i = 0\n  for i in 0..n-1\n    if i % 11 == 0 || i % 13 == 0\n\
    \      x += i.to_s.count(\"7\")\n    end\n  end\n  return x\nend", end, "  numbers\
    \ = (1...n).to_a\n  numbers.select { |num| num % 11 == 0 || num % 13 == 0 }.count\
    \ do |i|\n    i.to_s.count('7')\n  end\nend", "  result = 0\n  numbers = (1..n).to_a\n\
    \  numbers.each do |number|\n    if (number % 11 == 0 || number % 13 == 0) &&\
    \ number.to_s.match(\"7\") != nil\n      result += 1\n    end\n  end\n  result\n\
    end", "  (1...n).count { |i| [11, 13].any? { |d| i % d == 0 } && (i / 100).to_s.match(/7/)\
    \ }\nend", "  digit_count = 0\n  n.downto(1) do |num|\n    next if num % 11 !=\
    \ 0 && num % 13 != 0\n    while num > 0\n      if num % 10 == 7\n        digit_count\
    \ += 1\n      end\n      num /= 10\n    end\n  end\n  digit_count\nend", "  #\
    \ Write your code here\nend", "  result = 0\n  (1...n).each do |num|\n    if num\
    \ % 11 == 0 or num % 13 == 0\n      num.to_s.split('').each do |d|\n        result\
    \ += 1 if d == '7'\n      end\n    end\n  end\n  result\nend", "  counter = 0\n\
    \  1.upto(n - 1) do |num|\n    if (num % 11 == 0) || (num % 13 == 0)\n      temp\
    \ = num.to_s.split('')\n      temp.each do |digit|\n        counter += 1 if digit\
    \ == '7'\n      end\n    end\n  end\n  counter\nend", "\nend", "  count = 0\n\
    \  (1...n).each do |i|\n    count += 1 if i % 11 == 0 && i.to_s.include?('7')\n\
    \    count += 1 if i % 13 == 0 && i.to_s.include?('7')\n  end\n  count\nend",
  "  if n == 0\n    return 0\n  elsif n % 11 == 0 || n % 13 == 0\n    return 1 + fizz_buzz(n\
    \ - 1)\n  else\n    return fizz_buzz(n - 1)\n  end\nend", "  # TODO: Return the\
    \ number of times the digit 7 appears in integers less than n which are divisible\
    \ by 11 or 13.\nend", "  (1...n).select{|i| i % 11 == 0 || i % 13 == 0}.count{|i|\
    \ i.to_s.include?(\"7\")}\nend", "  count = 0\n  2.upto(n-1) do |i|\n    count\
    \ += 1 if (i % 11 == 0 || i % 13 == 0) && i.to_s.match(/7/)\n  end\n  count\n\
    end", end, "  total = 0\n  (1...n).each do |i|\n    if (i % 11 == 0 || i % 13\
    \ == 0) && (i.to_s.include? \"7\")\n      total += 1\n    end\n  end\n  total\n\
    end", "  number_seven = 0\n  (1..n).each do |i|\n    number_seven += 1 if i %\
    \ 11 == 0 || i % 13 == 0 && i.to_s.include?(\"7\")\n  end\n  number_seven\nend",
  "\tcount = 0\n\t1.upto(n - 1) do |i|\n\t\t# puts i if i % 11 == 0 || i % 13 == 0\n\
    \t\tif i % 11 == 0 || i % 13 == 0\n\t\t\t# puts i\n\t\t\tcount += i.to_s.count('7')\n\
    \t\tend\n\tend\n\tcount\nend", "    # if n < 13\n    #     return 0\n    # elsif\
    \ n < 26\n    #     return 1\n    # end\n    # if n == 26\n    #     return 2\n\
    \    # end\n    (1..n).to_a.select { |i| i % 11 == 0 || i % 13 == 0}.select {\
    \ |i| i.to_s.split(\"\").map { |i| i.to_i }.include?(7) }.count\nend", "  num\
    \ = 2\n  result = 0\n  while num < n\n    result += 1 if num % 11 == 0 && num.to_s.count(\"\
    7\") > 0\n    result += 1 if num % 13 == 0 && num.to_s.count(\"7\") > 0\n    num\
    \ += 1\n  end\n  result\nend", "  sum = 0\n  (1...n).each do |num|\n    if num\
    \ % 11 == 0 || num % 13 == 0\n      sum += num.to_s.split('').count('7')\n   \
    \ end\n  end\n  sum\nend", "\treturn 0 if n < 7\n\tres = n / 7\n\tres += res /\
    \ 10 if n % 7 == 0\n\tres\nend", "  a = []\n  i = 6\n  while i < n\n    if i %\
    \ 11 == 0 || i % 13 == 0\n      a << i\n    end\n    i += 1\n  end\n  count =\
    \ 0\n  a.each do |x|\n    until x == 0\n      if x % 10 == 7\n        count +=\
    \ 1\n      end\n      x /= 10\n    end\n  end\n  count\nend", "  sevens = 0\n\
    \  (1...n).each do |i|\n    if i % 11 == 0 || i % 13 == 0\n      sevens += i.to_s.split('').count('7')\n\
    \    end\n  end\n  sevens\nend", "  cnt = 0\n  # 1.upto(n) do |i|\n  #   cnt +=\
    \ 1 if i % 11 == 0 && i.to_s.include?('7')\n  #   cnt += 1 if i % 13 == 0 && i.to_s.include?('7')\n\
    \  # end\n  # return cnt", "  # check all the numbers from 1 to n\n  # for each\
    \ one:\n  #   if the number is divisible by 11 or 13, check how many times 7 appears\
    \ in it\n  #   add the number of times to a counter\n  # return the counter",
  "  count = 0\n  (1...n).each do |i|\n    count += 1 if (i % 11 == 0 || i % 13 ==\
    \ 0) && i.to_s.include?('7')\n  end\n  count\nend", "  (1...n).count { |n| n %\
    \ 11 == 0 || n % 13 == 0 }\nend", "  total = 0\n  (1...n).each do |i|\n    if\
    \ i % 11 == 0 || i % 13 == 0\n      total += i.to_s.count(\"7\")\n    end\n  end\n\
    \  total\nend", "  n / 7\nend", "  # put your code here\nend", "  count = 0\n\
    \  i = 1\n  until i == n\n    count += 1 if i % 11 == 0 || i % 13 == 0\n    i\
    \ += 1\n  end\n  count\nend", "\t\nend", "    total = 0\n    (1...n).each do |num|\n\
    \        if num % 11 == 0 || num % 13 == 0\n            str = num.to_s\n     \
    \       total += str.count(\"7\")\n        end\n    end\n    total\nend", "  #\
    \ Your code here\nend", "  count = 0\n  (1...n).each do |i|\n    count += 1 if\
    \ i%11 == 0 || i%13 == 0 && i.to_s.include?(\"7\")\n  end\n  count\nend", "  (1...n).count\
    \ { |x| x % 11 == 0 && x % 13 == 0 && x.to_s.match(/7/) }\nend", "  raise ArgumentError,\
    \ \"n must be a positive integer\" unless n.is_a?(Integer) && n > 0\n  count =\
    \ 0\n  for num in 1...n\n    count += 1 if num % 11 == 0 || num % 13 == 0 && num.to_s.include?(\"\
    7\")\n  end\n  count\nend", "  # if n % 11 or n % 13 == 0\n  #   n\n  # end\n\
    \  #\n  # if n % 11 or n % 13 == 0\n  #   n.to_s.chars.to_a.count('7')\n  # end\n\
    \  #\n  # if n % 11 or n % 13 == 0\n  #   count = 0\n  #   n.to_s.chars.to_a.each\
    \ do |num|\n  #     if num == '7'\n  #       count += 1\n  #     end\n  #   end\n\
    \  #   count\n  # end\n  #\n  count = 0\n  i = 1\n  until i == n\n    count +=\
    \ i.to_s.chars.to_a.count('7') if i % 11 == 0 || i % 13 == 0\n    i += 1\n  end\n\
    \  count\nend", "  (1...n).inject(0) { |sum, i| i % 11 == 0 || i % 13 == 0 ? sum\
    \ + i.to_s.count('7') : sum }\nend", "  counter = 0\n  (1...n).each do |i|\n \
    \   next if i % 11 != 0 && i % 13 != 0\n    counter += 1 if i.to_s.include?(\"\
    7\")\n  end\n  counter\nend", "  i = 0\n  count = 0\n  while i < n\n    if i %\
    \ 11 == 0\n      count += 1 if i.to_s.include?(\"7\")\n    elsif i % 13 == 0\n\
    \      count += 1 if i.to_s.include?(\"7\")\n    end\n    i += 1\n  end\n  count\n\
    end", "  #n.times do |i|\n  #  if i % 11 == 0 || i % 13 == 0\n  #    i.to_s.count(\"\
    7\")\n  #  end\n  #end\n  (0...n).select {|i| i % 11 == 0 || i % 13 == 0}.map\
    \ {|i| i.to_s.count(\"7\")}.inject(:+)\nend", "\toutput = 0\n\t1.upto(n) do |x|\n\
    \t\tif (x % 11 == 0) || (x % 13 == 0)\n\t\t\toutput += x.to_s.split('').count('7')\n\
    \t\tend\n\tend\n\toutput\nend", "    count = 0\n    (1...n).each do |x|\n    \
    \    if x % 11 == 0 || x % 13 == 0\n            x.to_s.each_char do |x|\n    \
    \            if x == \"7\"\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    count\nend", "  numbers = (1...n).to_a.keep_if\
    \ { |n| n % 11 == 0 || n % 13 == 0 }.join\n  numbers.split(\"\").count(\"7\")\n\
    end", "\ts = 0\n\t(1..n).each do |i|\n\t\ts += i.to_s.count(\"7\") if (i % 11\
    \ == 0 || i % 13 == 0)\n\tend\n\ts\nend", "  num = 0\n  num_of_sevens = 0\n  for\
    \ i in (1..n)\n    if (i % 11 == 0) or (i % 13 == 0)\n      num = i\n      num_of_sevens\
    \ += 1 if num % 10 == 7\n      while num != 0\n        num_of_sevens += 1 if num\
    \ % 10 == 7\n        num /= 10\n      end\n    end\n  end\n  num_of_sevens\nend",
  "\t# WRITE YOUR CODE HERE\n\tsum = 0\n\t(0...n).each do |i|\n\t\tif i % 11 == 0\
    \ or i % 13 == 0\n\t\t\tsum += i.to_s.count('7')\n\t\tend\n\tend\n\tsum\nend",
  "\nend", "  # WRITE YOUR CODE HERE\nend", "  if n >= 1 && n <= 10 ** 9\n    count\
    \ = 0\n    (1..n).each do |i|\n      count += 1 if i % 11 == 0 || i % 13 == 0\
    \ && i.to_s.count('7') > 0\n    end\n    count\n  else\n    raise ArgumentError,\
    \ 'Invalid argument'\n  end\nend", "  (1...n).to_a.select{|x| x % 11 == 0 || x\
    \ % 13 == 0}.to_s.count('7')\nend", "  (1...n).select { |x| (x % 11 == 0 || x\
    \ % 13 == 0) && x.to_s.include?(\"7\") }.size\nend", "  # your code here\nend",
  "  (1...n).select{|x| x % 11 == 0 || x % 13 == 0}.map{|x| x.to_s.split(\"\")}.flatten.count(\"\
    7\")\nend", "  count = 0\n  (1...n).each do |i|\n    count += 1 if (i % 11 ==\
    \ 0 || i % 13 == 0) && i.to_s.include?('7')\n  end\n  count\nend", "  list = []\n\
    \  (1...n).each do |num|\n    if num % 11 == 0 || num % 13 == 0\n      list <<\
    \ num\n    end\n  end\n  list.count { |x| x.to_s.include?('7') }\nend", "  i =\
    \ 0\n  while i <= n\n    if i % 11 == 0 && i % 13 == 0\n      return i.to_s.count('7')\n\
    \    elsif i % 11 == 0\n      return i.to_s.count('7')\n    elsif i % 13 == 0\n\
    \      return i.to_s.count('7')\n    end\n    i += 1\n  end\nend", "  # Fill in\
    \ your code here\n  (1...n).inject(0) do |sum, i|\n    if ((i % 11 == 0) || (i\
    \ % 13 == 0))\n      sum + i.to_s.scan(/7/).size\n    else\n      sum\n    end\n\
    \  end\nend", "  (1...n).select { |num| (num % 11 == 0 || num % 13 == 0) && num.to_s.include?(\"\
    7\") }.count\nend", "  count = 0\n  for i in 1..n do\n    if i % 11 == 0 || i\
    \ % 13 == 0\n      count += 1 if i.to_s.include?(\"7\")\n    end\n  end\n  count\n\
    end", "  #write your code here\nend", "  # Your code here\nend", "  x=0\n  for\
    \ i in 1..n\n    if (i % 11 == 0 || i % 13 == 0) && i < n\n      x+= i.to_s.count('7')\n\
    \    end\n  end\n  x\nend", "  count = 0\n  arr = (1...n).to_a\n  arr.each do\
    \ |num|\n    if num % 11 == 0\n      if num.to_s.include?(\"7\")\n        count\
    \ += 1\n      end\n    elsif num % 13 == 0\n      if num.to_s.include?(\"7\")\n\
    \        count += 1\n      end\n    end\n  end\n  count\nend", "  if n == 0\n\
    \    return 0\n  elsif n % 11 == 0 || n % 13 == 0\n    # puts(n)\n    fizz_buzz(n-1)\
    \ + n.to_s.count(\"7\")\n  else\n    fizz_buzz(n-1)\n  end\nend", "  # YOUR CODE\
    \ HERE\nend", "\tresult = 0\n\t(11..n).step(11) do |i|\n\t\ti_as_string = i.to_s\n\
    \t\tresult += i_as_string.count(\"7\")\n\tend\n\t(13..n).step(13) do |i|\n\t\t\
    i_as_string = i.to_s\n\t\tresult += i_as_string.count(\"7\")\n\tend\n\tresult\n\
    end", "  (1...n).count { |i| %w(7 11 13).all? { |n| i % n == 0 }}\nend", "\tcount\
    \ = 0\n\t(1...n).each do |i|\n\t\tcount += 1 if i % 11 == 0 or i % 13 == 0 and\
    \ i.to_s.include? \"7\"\n\tend\n\tcount\nend", "\t(1...n).select{|x| x % 11 ==\
    \ 0 || x % 13 == 0}.count{|x| x.to_s.count(\"7\") > 0}\nend", "  # your code here\n\
    end", "  (1...n).select { |x| (x % 11 == 0 || x % 13 == 0) && x.to_s.include?(\"\
    7\") }.count\nend", "  counter = 0\n  num = 0\n  while num < n\n    num += 1\n\
    \    if num % 11 == 0 || num % 13 == 0\n      if num.to_s.include?('7')\n    \
    \    counter += 1\n      end\n    end\n  end\n  counter\nend", "  # (1...n).select{|x|\
    \ x % 11 == 0 || x % 13 == 0}.inject(0){|sum,x| x.to_s.split('').map(&:to_i).select{|y|\
    \ y == 7}.length + sum}\n  (1...n).select{|x| x % 11 == 0 || x % 13 == 0}.inject(0){|sum,x|\
    \ sum + x.to_s.count('7')}\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13\
    \ == 0 }.count { |i| i.to_s.include?(\"7\") }\nend", "  ans = 0\n  for i in 1..n-1\n\
    \    ans += 1 if (i % 11 == 0 || i % 13 == 0) && i.to_s.include?(\"7\")\n  end\n\
    \  ans\nend", "  count = 0\n  (0...n).each do |number|\n    number % 11 == 0 ||\
    \ number % 13 == 0 ? count += number.to_s.count(\"7\") : count\n  end\n  count\n\
    end", "  count = 0\n  (1...n).each do |i|\n    if (i % 11 == 0) || (i % 13 ==\
    \ 0)\n      count += i.to_s.split('').count('7')\n    end\n  end\n  count\nend",
  "  # n/11 + n/13 - n/143\n  # n/11 - n/143 + n/13\n  (2 * n / 11 + n / 13 - n /\
    \ 143).floor\nend", "  if n < 0\n    raise ArgumentError\n  else\n    count =\
    \ 0\n    for i in 1..n-1\n      count +=1 if i % 11 == 0 || i % 13 == 0\n    end\n\
    \    count\n  end\nend", "  result = 0\n  (1...n).each do |i|\n    if i % 11 ==\
    \ 0 || i % 13 == 0\n      if i.to_s.include? \"7\"\n        result += 1\n    \
    \  end\n    end\n  end\n  result\nend", "    count = 0\n    (1...n).each do |int|\n\
    \        next if !int.modulo(11).zero? && !int.modulo(13).zero?\n        int.to_s.split('').each\
    \ do |char|\n            count += 1 if char == '7'\n        end\n    end\n   \
    \ count\nend", "  result = []\n  1.upto(n-1) do |number|\n    if (number % 11\
    \ == 0) || (number % 13 == 0)\n      result << number\n    end\n  end\n  result.count\
    \ { |num| num.to_s.include?(\"7\") }\nend", "  # YOUR CODE HERE\nend", "  res\
    \ = 0\n  for i in 1..n-1\n    if (i % 11 == 0 || i % 13 == 0)\n      if i.to_s.include?\
    \ \"7\"\n        res += 1\n      end\n    end\n  end\n  res\nend", "  (1...n).select{|x|\
    \ x % 11 == 0 || x % 13 == 0 }.select{|y| y.to_s.include?(\"7\")}.size\nend",
  "  #your code here\nend", "  (1...n).count { |i| i % 11 == 0 || i % 13 == 0 }\n\
    end", "  s = 0\n  0.upto(n) do |i|\n    s += i.to_s.count(\"7\") if (i % 11).zero?\
    \ || (i % 13).zero?\n  end\n  s\nend", "\tcount = 0\n\t(1...n).each do |x|\n\t\
    \tif x % 11 == 0 || x % 13 == 0\n\t\t\tx.to_s.each_char do |c|\n\t\t\t\tif c ==\
    \ \"7\"\n\t\t\t\t\tcount += 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\tcount\n\
    end", "  count = 0\n  (1...n).each do |x|\n    if x % 11 == 0 || x % 13 == 0\n\
    \      if x.to_s.count(\"7\") > 0\n        count += 1\n      end\n    end\n  end\n\
    \  count\nend", "\tcount = 0\n\tn.downto(0) do |i|\n\t\tif i % 11 == 0 or i %\
    \ 13 == 0\n\t\t\tcount += 1 if i.to_s.include?(\"7\")\n\t\tend\n\tend\n\tcount\n\
    end", "  raise Exception.new('n must be greater than 0') if n <= 0\n  i = 1\n\
    \  count = 0\n  while i < n\n    if (i % 11 == 0 || i % 13 == 0) && i.to_s.include?('7')\n\
    \      count += 1\n    end\n    i += 1\n  end\n  count\nend", "    n < 7 ? 0 :\
    \ n < 100 ? n.to_s.count(\"7\") : (1..n).count { |i| i % 11 == 0 || i % 13 ==\
    \ 0 && i.to_s.count(\"7\") > 0 }\nend", "  (1...n).select{|i| i % 11 == 0 || i\
    \ % 13 == 0}.select{|i| i.to_s.include?('7')}.count\nend", "    x = 0\n    count\
    \ = 0\n    while x < n\n        if x % 11 == 0 || x % 13 == 0\n            if\
    \ x.to_s.count('7') > 0\n                count += 1\n            end\n       \
    \ end\n        x += 1\n    end\n    count\nend", "  # your code here\nend", " \
    \ (1...n).select { |x| (x % 11 == 0 || x % 13 == 0) && (x.to_s.include? '7') }.size\n\
    end", "  count = 0\n  arr = (1...n).to_a\n  arr.each do |num|\n    if num % 11\
    \ == 0 || num % 13 == 0\n      count += (num.to_s.count \"7\")\n    end\n  end\n\
    \  count\nend", "  (1...n).count { |num| (num % 11 == 0 || num % 13 == 0) && num.to_s.include?('7')\
    \ }\nend", "    res = 0\n    if n < 8\n        return 0\n    end\n    (8..n).each\
    \ do |x|\n        if x % 11 == 0 || x % 13 == 0\n            res += x.to_s.count('7')\n\
    \        end\n    end\n    return res\nend", "  count = 0\n  (1...n).each do |x|\n\
    \    if (x % 11 == 0 || x % 13 == 0) && x.to_s.include?(\"7\")\n      count +=\
    \ 1\n    end\n  end\n  count\nend", "  (1...n).count { |x| x % 11 == 0 || x %\
    \ 13 == 0 }\nend", "  # your code here\nend", "  multiples = []\n  (1..n).each\
    \ do |num|\n    if num % 11 == 0 || num % 13 == 0\n      multiples << num\n  \
    \  end\n  end\n  multiples.join(\"\").count(\"7\")\nend", "  three = (n-1) / 3\n\
    \  five = (n-1) / 5\n  fifteen = (n-1) / 15\n  three * 3 + five * 5 - fifteen\
    \ * 15\nend", "  # list all of the numbers you can build from 0-9, including 0\
    \ and 9, that are multiples of 11 or 13\n  # find the number of those numbers\
    \ that are less than the number you are given\n  # find the number of those that\
    \ have a 7 in them\n  # add the two together\n  # count 0 as a 7\n  # use the\
    \ range from 0 to n\n  #\n  # This time, I'll use the modulo operator:\n  # if\
    \ the number is divisible by 11 or 13, then the remainder will be 0\n  #    but\
    \ what if they are both multiples of 11 and 13?  then the remainder will be 0\
    \ for both!\n  # if the number is not divisible by 11 or 13, then the remainder\
    \ will not be 0 for either\n  # numbers less than 20 that are multiples of 11\
    \ or 13\n  # [0, 11, 13, 22, 26, 33, 36, 39, 44, 48]\n  # numbers with a 7\n \
    \ # [0, 7, 16, 17, 27, 34, 37, 47, 49, 77]\n  # numbers with a 7 and less than\
    \ 50\n  # [0, 7, 16, 17, 27, 34, 37, 47]\n  # numbers with a 7 and less than 50\
    \ that are multiples of 11 or 13\n  # [0, 16, 17, 27, 37, 47]\n  # Add 0 as a\
    \ 7\n  # [0, 7, 16, 17, 27, 34, 37, 47]\n  # Add 0 as a multiple of 11 or 13\n\
    \  # [0, 7, 16, 17, 27, 34, 37, 47]\n  # length of that array is the answer\n\
    \  # 7\n  n_array = (0..n).to_a\n  n_array.delete_if { |x| x % 11 != 0 && x %\
    \ 13 != 0 }\n  n_array.select { |x| x.to_s.include?(\"7\") }.length\nend", end,
  "  n.times.count do |i|\n    (i + 1) % 11 == 0 || (i + 1) % 13 == 0 && (i + 1).to_s.include?('7')\n\
    \  end\nend", "\tcount = 0\n\t(11..n).each do |x|\n\t\tif x % 11 == 0\n\t\t\t\
    count += 1 if x.to_s.chars.include?(\"7\")\n\t\telsif x % 13 == 0\n\t\t\tcount\
    \ += 1 if x.to_s.chars.include?(\"7\")\n\t\tend\n\tend\n\tcount\nend", "    return\
    \ 0 if n < 11\n    count = 0\n    (11..n).each do |num|\n        count += 1 if\
    \ (num % 11 == 0 or num % 13 == 0) and contains_seven?(num)\n    end\n    count\n\
    end", "\tnum = 0\n\t1.upto(n) do |x|\n\t\tif (x % 11 == 0 || x % 13 == 0) && x.to_s.include?(\"\
    7\")\n\t\t\tnum += 1\n\t\tend\n\tend\n\tnum\nend", "  (1...n).select { |i| i %\
    \ 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?(\"7\") }\nend", "  count\
    \ = 0\n  (1...n).each do |i|\n    count += 1 if i % 11 == 0 || i % 13 == 0 &&\
    \ i.to_s.include?(\"7\")\n  end\n  count\nend", "  (1...n).select{|num| (num %\
    \ 11 == 0 || num % 13 == 0) && num.to_s.include?(\"7\")}.count\nend", "  # TODO:\
    \ return the number of times digit 7 appears in all numbers < n\n  if n > 0\n\
    \    i = 0\n    cpt = 0\n    array = (1..n).to_a\n    array.each do |number|\n\
    \      if (number % 11 == 0 || number % 13 == 0) && number < n\n        i = i\
    \ + 1\n        array[i] = number.to_s.split('')\n        array[i].each do |elem|\n\
    \          if elem == \"7\"\n            cpt = cpt + 1\n          end\n      \
    \  end\n      end\n    end\n    return cpt\n  else\n    return 0\n  end\nend",
  "  ret = 0\n  (1..n-1).each do |i|\n    if (i % 11 == 0 || i % 13 == 0) && i.to_s.split('').include?('7')\n\
    \      ret += 1\n    end\n  end\n  ret\nend", "  # Define an array to store our\
    \ results\n  result = []\n  # Iterate through the array and check for divisibility.\n\
    \  (1...n).each do |num|\n    # If divisible by 11 or 13, check if the number\
    \ contains the string '7'\n    # If true, push num to the results array\n    if\
    \ num % 11 == 0 || num % 13 == 0\n      result << num if num.to_s.include?(\"\
    7\")\n    end\n  end\n  # Return the length of our results array.\n  result.length\n\
    end", "\ti = 1\n\tcount = 0\n\twhile i < n\n\t\ti = i + 1\n\t\tif i % 11 == 0\n\
    \t\t\tif i.to_s.include?(\"7\")\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\telsif\
    \ i % 13 == 0\n\t\t\tif i.to_s.include?(\"7\")\n\t\t\t\tcount = count + 1\n\t\t\
    \tend\n\t\tend\n\tend\n\treturn count\nend", "  i = 0\n  count = 0\n  while i\
    \ < n\n    i += 1\n    if i % 11 == 0 || i % 13 == 0\n      string_value = i.to_s\n\
    \      string_value.each_char do |char|\n        if char == \"7\"\n          count\
    \ += 1\n        end\n      end\n    end\n  end\n  count\nend", "  (1...n).count{|x|\
    \ ((x%11).zero? || (x%13).zero?) && (x.to_s.count('7').zero?)}\nend", "  if n\
    \ < 0\n    return \"Error!\"\n  end\n  if n <= 60\n    return 0\n  end\n  if n\
    \ % 7 == 0\n    return 1\n  end\n  if n % 11 == 0 || n % 13 == 0\n    return fizz_buzz(n\
    \ - 1) + 1\n  end\n  return fizz_buzz(n - 1)\nend", "\nend", "\nend", "  sum =\
    \ 0\n  (1...n).each do |x|\n    sum += x.to_s.count('7') if x % 11 == 0 || x %\
    \ 13 == 0\n  end\n  sum\nend", "  count = 0\n  (1...n).each do |x|\n    if x %\
    \ 11 == 0 || x % 13 == 0\n      if x.to_s.include?(\"7\")\n        count += 1\n\
    \      end\n    end\n  end\n  count\nend", "\toutput = 0\n\t1.upto(n-1) do |i|\n\
    \t\toutput += 1 if ((i % 11 == 0) || (i % 13 == 0)) && (i.to_s.include? \"7\"\
    )\n\tend\n\toutput\nend", "\tcount = 0\n\tfor i in 1..n\n\t\tif (i % 11 == 0 ||\
    \ i % 13 == 0) && i.to_s.include?(\"7\")\n\t\t\tcount += 1\n\t\tend\n\tend\n\t\
    count\nend", "  count = 0\n  for i in 1..n-1\n    if (i % 11 == 0) && (i % 13\
    \ == 0)\n      count += 1 if i.to_s.include?('7')\n    end\n  end\n  return count\n\
    end", "  return 0 if n == 0\n  return 1 if n == 7", "  counter = 0\n  (1...n).each\
    \ do |num|\n    nums = num.to_s.split('')\n    counter += 1 if (num % 11 == 0\
    \ || num % 13 == 0) && nums.include?('7')\n  end\n  counter\nend", end, "  counter\
    \ = 0\n  (1...n).each do |i|\n    if (i % 11 == 0 || i % 13 == 0) && i.to_s.include?(\"\
    7\")\n      counter += 1\n    end\n  end\n  counter\nend", "  sum = 0\n  (1...n).each\
    \ do |i|\n    if i % 11 == 0 || i % 13 == 0\n      if i.to_s.include?('7')\n \
    \       sum += 1\n      end\n    end\n  end\n  sum\nend", "  num = 0\n  (1...n).each\
    \ do |i|\n    if (i % 11 == 0 || i % 13 == 0) && i.to_s.include?(\"7\")\n    \
    \  num += 1\n    end\n  end\n  num\nend", "  (1...n).map do |x|\n    next unless\
    \ x % 11 == 0 || x % 13 == 0\n    x.to_s.count('7')\n  end.reduce(:+)\nend", "\t\
    count = 0\n\t(1...n).each do |number|\n\t\tif number % 11 == 0 || number % 13\
    \ == 0\n\t\t\tcount += number.to_s.count(\"7\")\n\t\tend\n\tend\n\tcount\nend",
  "  count = 0\n  for i in 0..n-1\n    if i%11 == 0 or i%13 == 0\n      if i.to_s.include?\
    \ \"7\"\n        count += 1\n      end\n    end\n  end\n  return count\nend",
  '  m = n / 11.0', "  if n <= 7\n    return 0\n  end\n  result = 0\n  for i in 7..n-1\n\
    \    if i % 11 == 0 or i % 13 == 0\n      if i % 10 == 7\n        result += 1\n\
    \      elsif i / 10 % 10 == 7\n        result += 1\n      end\n    end\n  end\n\
    \  return result\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
