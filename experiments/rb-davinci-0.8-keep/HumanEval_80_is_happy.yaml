name: HumanEval_80_is_happy
language: rb
prompt: "# You are given a string s.\n# Your task is to check if the string is happy\
  \ or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
  \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa) =>\
  \ False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb) =>\
  \ True\n# is_happy(xyy) => False\ndef is_happy(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
  \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"a\"\
  ))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true, candidate.call(\"\
  abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n    assert_equal(true,\
  \ candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"xyy\"))\n \
  \   assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false, candidate.call(\"\
  iopaxioi\"))\n  end\nend\n"
completions: ["  happy = 0\n  i = 1\n  while i < s.length - 1\n    happy += 1 if s[i]\
    \ != s[i - 1] && s[i] != s[i + 1]\n    i += 1\n  end\n  happy >= 1\nend", "  #\
    \ your code here\nend", "  s = s.split('')\n  length = s.length\n  return false\
    \ if length < 3\n  index = 0\n  while index < length - 2\n    if s[index] == s[index\
    \ + 1] || s[index] == s[index + 2] || s[index + 1] == s[index + 2]\n      return\
    \ false\n    end\n    index += 1\n  end\n  true\nend", "  if s.length >= 3\n \
    \   check_distinct(s)\n  else\n    false\n  end\nend", "  true\nend", "  # Write\
    \ your code here\nend", "  # Happy Coding ^_^\nend", '    retu', "  for i in 0..s.length-3\n\
    \    return false if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n  end\n\
    \  true\nend", "  # Your code goes here\nend", "  return false if s.length < 3\n\
    \  for i in 2..s.length-1\n    return false if s[i-2] == s[i-1] || s[i-2] == s[i]\
    \ || s[i-1] == s[i]\n  end\n  true\nend", "  s.length >= 3 && s.scan(/.../).uniq.size\
    \ == s.length/3\nend", "  return false if s.length < 3\n  letters = s.split('')\n\
    \  i = 0\n  while i < letters.length - 2\n    return false if letters[i] == letters[i\
    \ + 1] || letters[i] == letters[i + 2] || letters[i + 1] == letters[i + 2]\n \
    \   i += 1\n  end\n  true\nend", "  length = s.length\n  return false if length\
    \ < 3\n  s.chars.each_cons(3) do |elements|\n    return false if elements.uniq.length\
    \ < 3\n  end\n  true\nend", "  s.chars.each_cons(3).all? { |x, y, z| x != y &&\
    \ y != z && x != z }\nend", "  return false if s.length < 3\n  str_arr = s.split('')\n\
    \  return true if str_arr.uniq.length == str_arr.length\n  letters = str_arr.each_cons(3).to_a\n\
    \  letters.map { |a| a.uniq.length == 3 ? true : false }.include?(false) ? false\
    \ : true\nend", "  s.length >= 3 && s.chars.each_cons(3).none? { |a, b, c| a ==\
    \ b && b == c }\nend", "  s.split(//).each_cons(3) { |c| return false if c.uniq.length\
    \ != 3 }\n  true\nend", "  s.length > 2 && s.each_char.each_cons(3).all? { |a,\
    \ b, c| a != b && b != c && a != c }\nend", "  i = 1\n  while i < s.length - 1\n\
    \    #puts s[i]\n    #puts s[i+1]\n    #puts s[i+2]\n    if s[i] == s[i+1] ||\
    \ s[i] == s[i+2] || s[i+1] == s[i+2]\n      return false\n    end\n    i += 1\n\
    \  end\n  true\nend", "  # your code here\nend", "  return false if s.length <\
    \ 3\n  (s.length - 2).times do |i|\n    return false if s[i] == s[i + 1] || s[i]\
    \ == s[i + 2] || s[i + 1] == s[i + 2]\n  end\n  true\nend", "  is_happy = false\n\
    \  s.chars.each_cons(3).with_index do |(a, b, c), i|\n    if !a.eql?(b) && !a.eql?(c)\
    \ && !b.eql?(c)\n      is_happy = true\n    else\n      is_happy = false\n   \
    \   break\n    end\n  end\n  is_happy\nend", "  return false if s.length < 3\n\
    \  0.upto(s.length - 3) do |i|\n    return false if s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2]\n  end\n  true\nend", "  (s.length < 3) ? false\
    \ : (0..s.length-3).all? { |i| s[i] != s[i+1] && s[i] != s[i+2] && s[i+1] != s[i+2]\
    \ }\nend", "  s.length >= 3 && s.chars.each_cons(3).none? { |a, b, c| a == b &&\
    \ b == c }\nend", "  # Your code here\nend", "  (s.length >= 3) && (s.scan(/([a-zA-Z])\\\
    1{2,}/).length == 0)\nend", "  return false if s.length < 3\n  for i in 0..s.length-3\n\
    \    return false if s[i] == s[i+1] && s[i+1] == s[i+2]\n  end\n  true\nend",
  "  s.length >= 3 && s.chars.each_cons(3).all? { |a, b, c| a != b && b != c && a\
    \ != c }\nend", "  if s.length < 3\n    return false\n  else\n    val = s.chars.each_cons(3).map(&:join)\n\
    \    # puts \"val is #{val}\"\n    val.each do |t|\n      if t[0] == t[1] || t[1]\
    \ == t[2] || t[0] == t[2]\n        return false\n      end\n    end\n    return\
    \ true\n  end\nend", "  (s.length >= 3) && ((0..s.length - 3).none? { |i| s[i]\
    \ == s[i + 1] && s[i] == s[i + 2] && s[i + 1] == s[i + 2] })\nend", "  s.length\
    \ >= 3 && s.split('').each_cons(3).none? { |a, b, c| a == b && b == c }\nend",
  "  return false if s.length < 3\n  s.each_char.with_index.all? do |char, ind|\n\
    \    s[ind + 1] != char && s[ind + 2] != char\n  end\nend", "\treturn false if\
    \ s.length < 3\n\tfor i in 0..s.length-3\n\t\tif s[i] == s[i+1]\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn true\nend", "  if s.length >= 3\n    s.each_char.with_index\
    \ do |c, i|\n      return false if c == s[i+1] && c == s[i+2]\n    end\n  else\n\
    \    return false\n  end\n  true\nend", "  return false if s.length < 3\n  (0..s.length-3).each\
    \ do |i|\n    return false if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n\
    \  end\n  true\nend", "  return false if s.length < 3\n  (s.length - 2).times\
    \ do |i|\n    return false if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1]\
    \ == s[i + 2]\n  end\n  true\nend", "  return false if s.length < 3\n  for i in\
    \ 2..s.length-1\n    if s[i-2] == s[i-1] || s[i-2] == s[i] || s[i-1] == s[i]\n\
    \      return false\n    end\n  end\n  return true\nend", "  s.match(/(.{3})(.+)\\\
    1/).nil? ? true : false\nend", "  s.chars.each_cons(3).any? { |a, b, c| a != b\
    \ && b != c && a != c } ? true : false\nend", "    return false if s.length <\
    \ 3\n    s.each_char.with_index { |c, i| return false if i >= s.length - 2 &&\
    \ c == s[i + 1] }\n    return true\nend", "  if s.length >= 3\n    a = s.chars.each_cons(3).map(&:join)\n\
    \    a.all? { |e| e.chars.uniq.length == 3 }\n  else\n    false\n  end\nend",
  "    # Your code here\nend", "  if s.length >= 3\n    s.scan(/.../).each do |x|\n\
    \      return false if x[0] == x[1] || x[0] == x[2] || x[1] == x[2]\n    end\n\
    \    true\n  else\n    false\n  end\nend", "  # your code here\nend", "  s.length\
    \ >= 3 && s.chars.each_cons(3).all? { |c| c.uniq.length == 3 }\nend", "  while\
    \ s.length > 3\n    s.insert(0, s.slice!(-1))\n    s.insert(0, s.slice!(-1))\n\
    \    s.insert(0, s.slice!(-1))\n    if s[0] == s[1] && s[1] == s[2]\n      return\
    \ false\n    end\n  end\n  return true\nend", "  return false if s.length < 3\n\
    \  s.chars.each_cons(3) do |c|\n    return false if c.uniq.length != 3\n  end\n\
    \  true\nend", "  false\nend", "  if s.length < 3\n    return false\n  end\n \
    \ for i in 0..s.length-3\n    if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] ==\
    \ s[i+2]\n      return false\n    end\n  end\n  return true\nend", "  return false\
    \ if s.length < 3\n  s.chars.each_cons(3) do |x, y, z|\n    return false if x\
    \ == y || y == z || x == z\n  end\n  true\nend", "  s.length >= 3 && s.scan(/.../).all?\
    \ { |x| x.chars.uniq.size == 3 }\nend", "  # TODO implement\nend", "  return false\
    \ if s.length < 3\n  (0..s.length-3).each do |i|\n    return false if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n  end\n  true\nend", "  if s.length\
    \ < 3\n    return false\n  end\n  for i in 0..s.length - 3\n    if s[i] == s[i\
    \ + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]\n      return false\n    end\n\
    \  end\n  return true\nend", "  s.size >= 3 && s.match(/[a-z]{3}/).to_s.chars.uniq.size\
    \ == 3\nend", "\treturn false if s.length < 3\n\treturn false if s.length == 3\
    \ && s[0] == s[1] && s[1] == s[2]\n\tfor i in 0..s.length-3\n\t\treturn false\
    \ if s[i] == s[i+1] && s[i+1] == s[i+2]\n\tend\n\treturn true\nend", "  return\
    \ false if s.length < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false\
    \ if a == b || b == c || a == c\n  end\n  true\nend", "  return false if s.length\
    \ < 3\n  0.upto(s.length - 3) do |i|\n    return false if s[i] == s[i + 1] ||\
    \ s[i] == s[i + 2] || s[i + 1] == s[i + 2]\n  end\n  true\nend", "  s.length >=\
    \ 3 && s.each_char.each_cons(3).all? { |a, b, c| a != b && b != c && a != c }\n\
    end", "  i = 0\n  s.length >= 3 && s.length.times do\n    break false if s[i]\
    \ == s[i+1] && s[i+1] == s[i+2]\n    i += 1\n  end\nend", "  return false if s.length\
    \ < 3\n  (0..s.length-3).any? do |i|\n    (s[i] != s[i+1]) && (s[i] != s[i+2])\
    \ && (s[i+1] != s[i+2])\n  end\nend", "  # your code here\nend", "  return false\
    \ if s.length < 3\n  (0..s.length-3).each do |i|\n    return false if s[i] ==\
    \ s[i+1] && s[i+1] == s[i+2]\n  end\n  true\nend", "  return false if s.length\
    \ < 3\n  (s.length - 2).times do |i|\n    if s[i] == s[i + 1] || s[i] == s[i +\
    \ 2] || s[i + 1] == s[i + 2]\n      return false\n    end\n  end\n  true\nend",
  "  if s.length < 3\n    return false\n  else\n    n = 0\n    while n < s.length\
    \ - 2\n      if s[n] == s[n + 1] or s[n] == s[n + 2] or s[n + 1] == s[n + 2]\n\
    \        return false\n      end\n      n += 1\n    end\n    return true\n  end\n\
    end", "  s.split('').length > 2 ? (0..s.length - 3).all? { |i| s[i] != s[i + 1]\
    \ && s[i] != s[i + 2] && s[i + 1] != s[i + 2] } : false\nend", "  s.size >= 3\
    \ && s.scan(/.../).uniq.size == s.size / 3\nend", "  i = 0\n  while i < s.length\
    \ - 2\n    str = s[i..i+2]\n    return false if str[0] == str[1] || str[0] ==\
    \ str[2] || str[1] == str[2]\n    i += 1\n  end\n  true\nend", "  # code here\n\
    end", "  s.size < 3 ? false : (s.chars.each_cons(3).all? { |a, b, c| a != b &&\
    \ b != c && a != c })\nend", "  s.length < 3 ? false : s.split('').each_cons(3).map{|x|\
    \ x.uniq.size != 1}.all?\nend", "  # Write your code here\nend", "  return false\
    \ if s.length < 3\n  s.chars.each_cons(3) do |arr|\n    return false if arr.uniq.length\
    \ != 3\n  end\n  true\nend", "  for i in 0..s.length-3\n    if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n      return false\n    end\n  end\n\
    \  true\nend", "  len = s.length\n  return false if len < 3\n  s.chars.each_with_index\
    \ do |c, i|\n    return false if (i+3) <= len && s[i+1] == c && s[i+2] == c\n\
    \  end\n  true\nend", "  return false if s.length < 3\n  (0..s.length-3).each\
    \ do |i|\n    return false if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n\
    \  end\n  true\nend", "  s.length >= 3 && s.scan(/.../).uniq.length == s.length\
    \ / 3\nend", "  count = 0\n  total = 0\n  len = s.length\n  if len >= 3\n    s.each_char\
    \ do |c|\n      count += 1\n      if count == 3\n        if s[total] != s[total\
    \ + 1] && s[total + 1] != s[total + 2] && s[total] != s[total + 2]\n         \
    \ total += 3\n          count = 0\n        else\n          return false\n    \
    \    end\n      end\n    end\n    return true\n  else\n    return false\n  end\n\
    end", "  (0..s.length - 3).each do |n|\n    return false if s[n] == s[n + 1] ||\
    \ s[n] == s[n + 2] || s[n + 1] == s[n + 2]\n  end\n  true\nend", "  s.length >=\
    \ 3 && s.split('').each_cons(3).all? { |a, b, c| a != b && b != c && a != c }\n\
    end", "  # your code here\nend", "  return false if s.length < 3\n  (0..s.length-3).each\
    \ do |i|\n    return false if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n\
    \  end\n  true\nend", "  false\nend", "  if s.length >= 3\n    s.scan(/(.)\\1{2}/).empty?\n\
    \  else\n    false\n  end\nend", "  s.length > 2 && s.scan(/(.)\\1/).empty?\n\
    end", "  # returns false if length of string is less than 3\n  return false if\
    \ s.length < 3\n  # returns true if every 3 consecutive letters in string are\
    \ distinct\n  return true if s.each_char.each_cons(3).all? { |a, b, c| a != b\
    \ && b != c && a != c }\n  # returns false if any 3 consecutive letters in string\
    \ are equal\n  return false if s.each_char.each_cons(3).any? { |a, b, c| a ==\
    \ b || b == c || a == c }\nend", "  return false if s.length < 3\n  (0..s.length-1).each\
    \ do |i|\n    return false if s[i] == s[i+1] && s[i+1] == s[i+2]\n  end\n  true\n\
    end", "  while s.length >= 3\n    s.scan(/([a-z])\\1{2,}/).to_s.empty?\n  end\n\
    end", "  (s.length >= 3) && s.scan(/.../).uniq.length == s.length / 3\nend", " \
    \ # Write your code here\nend", "  i = 0\n  count = 0\n  while i <= s.length -\
    \ 3\n    if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]\n   \
    \   count += 1\n    end\n    i += 1\n  end\n  if count > 0\n    false\n  else\n\
    \    true\n  end\nend", "  if s.length < 3\n    false\n  else\n    s.chars.map.with_index\
    \ do |el, idx|\n      if idx <= s.length - 3\n        el == s[idx + 1] || el ==\
    \ s[idx + 2] || s[idx + 1] == s[idx + 2]\n      end\n    end.uniq == [false]\n\
    \  end\nend", "  i = 0\n  while (i + 2) < s.length\n    return false if s[i] ==\
    \ s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]\n    i += 1\n  end\n  true\n\
    end", "  n = s.length\n  for i in (0..n-3)\n    if s[i] == s[i+1]\n      return\
    \ false\n    end\n  end\n  if n >= 3\n    return true\n  else\n    return false\n\
    \  end\nend", "  (0..s.length-3).each do |i|\n    return false if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n  end\n  true\nend", "  s.length >= 3\
    \ && s.each_char.each_cons(3).all? { |a, b, c| [a, b, c].uniq.length == 3 }\n\
    end", "  !(s.size < 3 || s.chars.each_cons(3).find { |a, b, c| a == b || b ==\
    \ c || a == c })\nend", "  s.length >= 3 && s.chars.each_cons(3).all? { |c| c.uniq.length\
    \ == 3 }\nend", "\t\nend", "  (s.length < 3) ? false : s.split('').each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend", "  (s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |s| s.uniq.length == 3 }) ? true : false\nend", "  # Write your code here\n\
    end", "  if s.length >= 3\n    s.length.times do |i|\n      if i < s.length -\
    \ 2\n        if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]\n\
    \          return false\n        end\n      end\n    end\n    return true\n  else\n\
    \    return false\n  end\nend", "  return false if s.length < 3\n  until s.length\
    \ < 3\n    return false if s[0..2].uniq.length != 3\n    s = s[1..-1]\n  end\n\
    \  true\nend", "  if s.length > 2\n    s.split('').each_cons(3).all?{|x| x.uniq\
    \ == x}\n  else\n    false\n  end\nend", "  happy = false\n  s.split('').each_cons(3)\
    \ do |x|\n    happy = x[0] != x[1] && x[1] != x[2] && x[0] != x[2]\n    break\
    \ if happy == false\n  end\n  happy\nend", "  if s.length < 3\n    false\n  else\n\
    \    i = 0\n    while i < s.length - 3\n      if s[i] == s[i + 1] || s[i] == s[i\
    \ + 2] || s[i + 1] == s[i + 2]\n        return false\n      end\n      i += 1\n\
    \    end\n    true\n  end\nend", "  i = 0\n  while i < s.length - 2\n    return\
    \ false if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]\n    i\
    \ += 1\n  end\n  true\nend", "  return false if s.length < 3\n  i = 0\n  while\
    \ i < s.length - 2\n    return false if s[i] == s[i + 1] || s[i] == s[i + 2] ||\
    \ s[i + 1] == s[i + 2]\n    i += 1\n  end\n  true\nend", "  return true if s.size\
    \ > 3 && s.size % 3 == 0 && s.scan(/([a-z])/).uniq.size == s.size\n  false\nend",
  "  if s.length < 3\n    return false\n  end\n  (0..s.length-3).each do |i|\n   \
    \ if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]\n      return false\n\
    \    end\n  end\n  return true\nend", "  s.length >= 3 && s.chars.each_cons(3).none?\
    \ { |a, b, c| a == b && b == c }\nend", "  return true if s.size < 3\n  s.split('').each_cons(3)\
    \ do |x, y, z|\n    return false if x == y && y == z\n  end\n  true\nend", " \
    \ return false if s.length < 3\n  return false if s.length % 3 != 0\n  0.step(s.length\
    \ - 1, 3) do |i|\n    return false if s[i] == s[i + 1]\n    return false if s[i]\
    \ == s[i + 2]\n    return false if s[i + 1] == s[i + 2]\n  end\n  true\nend",
  "  if s.length < 3\n    false\n  else\n    s.chars.each_cons(3).all? { |x| x.uniq.length\
    \ == 3 }\n  end\nend", "  ans = false\n  if s.length >= 3\n    for i in 0..s.length\
    \ - 3\n      if s[i] != s[i + 1] && s[i] != s[i + 2] && s[i + 1] != s[i + 2]\n\
    \        ans = true\n      else\n        ans = false\n        break\n      end\n\
    \    end\n  end\n  ans\nend", "  s.length >= 3 ? s.split('').map.with_index {\
    \ |l, i| s[i] == s[i + 1] && s[i] == s[i + 2] }.include?(true) ? false : true\
    \ : false\nend", "  return false if s.length < 3\n  (s.length - 2).times do |i|\n\
    \    if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]\n      return\
    \ false\n    end\n  end\n  true\nend", "  if s.length <= 2\n    return false\n\
    \  end\n  i = 0\n  while i < s.length\n    if s[i] == s[i+1] && s[i] == s[i+2]\n\
    \      return false\n    end\n    i += 1\n  end\n  return true\nend", "  return\
    \ false if s.length < 3\n  s.scan(/(.)\\1\\1/).length > 0 ? false : true\nend",
  "  return false if s.length < 3\n  array = s.split('')\n  until array.length < 3\n\
    \    return false if array[0] == array[1] || array[1] == array[2] || array[0]\
    \ == array[2]\n    array.shift\n  end\n  true\nend", "\ts.size >= 3 && (0..s.size\
    \ - 3).all? { |i| s[i] != s[i + 1] && s[i] != s[i + 2] && s[i + 1] != s[i + 2]\
    \ }\nend", "  return false if s.length < 3\n  s.chars.each_cons(3) do |char|\n\
    \    return false if char.uniq.length < 3\n  end\n  true\nend", "  s.size < 3\
    \ ? false : s.scan(/.../).uniq.length == s.scan(/.../).length\nend", "  if s.length\
    \ < 3\n    return false\n  end\n  s = s.chars\n  (0..s.length - 3).each do |x|\n\
    \    return false if s[x] == s[x + 1] && s[x] == s[x + 2]\n  end\n  true\nend",
  "  s.length > 2 ? s.chars.each_cons(3).none? { |arr| arr.uniq.length < 3 } : false\n\
    end", "  if s.length < 3\n    return false\n  end\n  s.each_char.with_index do\
    \ |char, index|\n    if index <= s.length - 3\n      if char == s[index + 1]\n\
    \        return false\n      end\n    end\n  end\n  return true\nend", "  if s.length\
    \ >= 3\n    if s[0] != s[1] && s[1] != s[2] && s[0] != s[2]\n      true\n    else\n\
    \      false\n    end\n  else\n    false\n  end\nend", "  false\nend", "  s.length\
    \ < 3 ? false : (0..s.length - 3).all? { |i| s[i] != s[i + 1] && s[i] != s[i +\
    \ 2] && s[i + 1] != s[i + 2] }\nend", "  return false if s.length < 3\n  s.chars.each_cons(3)\
    \ do |arr|\n    return false if arr.uniq.length < 3\n  end\n  true\nend", "  #\
    \ TODO: implement this method\n  length = s.length\n  return false if length <\
    \ 3\n  length.times do |i|\n    break if i > length - 3\n    return false if s[i]\
    \ == s[i+1] && s[i+1] == s[i+2]\n  end\n  true\nend", "  s.length < 3 ? false\
    \ : s.each_char.each_cons(3).none? { |a, b, c| a == b && b == c }\nend", "  s.length\
    \ >= 3 && (0..s.length-3).all? { |i| s[i] != s[i+1] && s[i] != s[i+2] && s[i+1]\
    \ != s[i+2] }\nend", "  return false if s.length < 3\n  (s.length - 2).times do\
    \ |i|\n    return false if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]\n  end\n  true\nend", "  s.length >= 3 ? (s[0] != s[1] && s[1] != s[2]\
    \ && s[0] != s[2]) : false\nend", "  return false if s.length < 3\n  s.split('').each_cons(3).map{|x|\
    \ x.uniq.size }.include?(1) ? false : true\nend", "  return false if s.length\
    \ < 3\n  s.split('').each_cons(3).each { |s| return false if s.uniq.length !=\
    \ 3 }\n  true\nend", "  if s.length < 3\n    return false\n  end\n  i = 0\n  while\
    \ i < s.length - 2\n    if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2]\n      return false\n    end\n    i += 1\n  end\n  return true\nend",
  "  if s.length < 3\n    return false\n  end\n  i = 0\n  while i < s.length - 2\n\
    \    if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]\n      return\
    \ false\n    end\n    i += 1\n  end\n  return true\nend", "  return false if s.length\
    \ < 3\n  return false if s.length == 3 && s[0] == s[1] && s[1] == s[2]\n  return\
    \ true if s.length == 3 && s[0] != s[1] && s[1] != s[2]\n  s[0] != s[1] && s[1]\
    \ != s[2] && is_happy(s[1..-1])\nend", "\t# initialize a counter\n\tcounter =\
    \ 0\n\t# set a variable to true\n\thappy = true\n\t# loop through the characters\
    \ in the string\n\tfor i in 0..s.length\n\t\t# if the character is the same as\
    \ the next character\n\t\tif s[i] == s[i+1]\n\t\t\t# add 1 to the counter\n\t\t\
    \tcounter += 1\n\t\tend\n\t\t# if the counter is greater than or equal to 3\n\t\
    \tif counter >= 3\n\t\t\t# set the variable to false\n\t\t\thappy = false\n\t\t\
    end\n\tend\n\t# return the variable\n\treturn happy\nend", "  s.length >= 3 &&\
    \ s.scan(/(.)\\1/).empty?\nend", '  retur', "  s.length > 2 && s.split('').each_cons(3).all?\
    \ { |arr| arr.uniq.length == 3 }\nend", "  s.length > 2 && !(s.split('').each_cons(3).map{|i|\
    \ i.uniq.length < 3}.include?(true))\nend", "  # Code here\nend", "    len = s.length\n\
    \    (len >= 3) && (s.split(//).each_cons(3).all? { |a, b, c| a != b && b != c\
    \ && a != c })\nend", "  s.length < 3 ? false : (0..s.length-3).none? { |i| s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] }\nend", end, "  return true\
    \ if s.length >= 3 and s.split('').uniq.length >= 3\n  return false\nend", " \
    \ return true if s.size >= 3 && s.scan(/([a-zA-Z])\\1/).empty?\n  false\nend",
  "  for i in 1..s.length-2\n    return false if s[i] == s[i-1] || s[i] == s[i+1]\n\
    \  end\n  return true\nend", "  return false if s.length < 3\n  (0..s.length-3).each\
    \ do |i|\n    return false if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n\
    \  end\n  true\nend", "  return false if s.length < 3\n  (s.length - 2).times\
    \ do |i|\n    return false if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1]\
    \ == s[i + 2]\n  end\n  true\nend", "  return false if s.length < 3\n  return\
    \ true if s.length == 3\n  s.split('').each_cons(3) do |arr|\n    return false\
    \ if arr.uniq.length < 3\n  end\n  true\nend", "  s.size >= 3 && s.scan(/[a-zA-Z]{3}/).none?\
    \ { |s| s[0] == s[1] || s[1] == s[2] || s[0] == s[2] }\nend", "  s.length >= 3\
    \ && (0..s.length-3).none? { |i| s[i] == s[i+1] && s[i] == s[i+2] }\nend", " \
    \ #puts \"***#{s}\"\n  return false if s.length < 3\n  chars = s.split('')\n \
    \ return false if chars[0] == chars[1]\n  return false if chars[1] == chars[2]\n\
    \  return false if chars[0] == chars[2]\n  if s.length > 3\n    return is_happy(s[1..-1])\n\
    \  else\n    return true\n  end\nend", "  return false if s.length < 3\n  0.upto(s.length\
    \ - 3) do |i|\n    return false if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i\
    \ + 1] == s[i + 2]\n  end\n  true\nend", "  return false if s.length < 3\n  (s.length\
    \ - 2).times do |i|\n    return false if s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2]\n  end\n  true\nend", "  (s.length - 2).times do |i|\n\
    \    return false if s[i] == s[i + 1] && s[i] == s[i + 2]\n  end\n  true\nend",
  "  # check to see if the string has at least 3 characters\n  return false if s.length\
    \ < 3\n  # check to see if all the characters are unique\n  return false if s.length\
    \ != s.split('').uniq.length\n  # check for the 3 consecutive letters for distinctness\n\
    \  for i in 0..s.length - 3\n    if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i\
    \ + 1] == s[i + 2]\n      return false\n    end\n  end\n  true\nend", "    if\
    \ s.length < 3\n        return false\n    end\n    (0..s.length - 3).each do |i|\n\
    \        if s[i] == s[i + 1]\n            return false\n        end\n    end\n\
    \    return true\nend", end, "  s.length > 2 ? ((s.chars.each_cons(3).to_a.map{|cons|\
    \ cons.join.chars.uniq.length}).all?{|e| e == 3}) : false\nend", "  chars = s.split('')\n\
    \  counter = 0\n  happy = true\n  if chars.length < 3\n    happy = false\n  else\n\
    \    for char in chars\n      counter += 1\n      if chars[counter] == chars[counter\
    \ - 1]\n        happy = false\n      end\n    end\n  end\n  return happy\nend",
  "  return false if s.length < 3\n  s.scan(/.../).uniq.length == s.length / 3\nend",
  "  s.length >= 3 && s.scan(/.../).uniq.length == s.length/3\nend", "  return false\
    \ if s.length < 3\n  i = 0\n  while i <= s.length - 3\n    if s[i] == s[i + 1]\
    \ || s[i] == s[i + 2] || s[i + 1] == s[i + 2]\n      return false\n    end\n \
    \   i += 1\n  end\n  true\nend", "  s.size > 2 && s.scan(/(\\w)\\1/).empty?\n\
    end", "  # Your code goes here\nend", "  if s.length < 3\n    return false\n \
    \ else\n    for i in 0..s.length - 3\n      if s[i] == s[i + 1] || s[i] == s[i\
    \ + 2] || s[i + 1] == s[i + 2]\n        return false\n      end\n    end\n   \
    \ return true\n  end\nend", "  if s.length >= 3\n    s.each_char.with_index do\
    \ |letter, index|\n      if letter == s[index + 1] && letter == s[index + 2]\n\
    \        return false\n      end\n    end\n  else\n    return false\n  end\n \
    \ true\nend", "  s.length >= 3 && s.chars.each_cons(3).none? { |a, b, c| a ==\
    \ b && b == c }\nend", "  len = s.length\n  return false if len < 3\n  s.chars.each_cons(3)\
    \ do |arr|\n    return false if arr[0] == arr[1] || arr[1] == arr[2] || arr[0]\
    \ == arr[2]\n  end\n  true\nend", "  s.split('').each_cons(3) do |s|\n    return\
    \ false if s.uniq.size < 3\n  end\n  return true\nend", "  false\nend", "  len\
    \ = s.length\n  return false if len < 3\n  for i in (0..len-3)\n    return false\
    \ if s[i] == s[i+1] && s[i+1] == s[i+2]\n  end\n  return true\nend", "  # code\
    \ here\nend", "\ts.length >= 3 && s.split(//).each_cons(3).all? { |x| x.uniq.length\
    \ == 3 }\nend", "  s.size >= 3 && s.split('').each_cons(3).all? { |arr| arr.size\
    \ == arr.uniq.size }\nend", "  s.length >= 3 && s.scan(/\\w{3}/).map { |e| e.chars.uniq.length\
    \ == 3 }.reduce(:&)\nend", "  return false if s.length < 3\n  chars = s.split('')\n\
    \  for i in 0..(chars.length - 3)\n    return false if chars[i] == chars[i + 1]\
    \ || chars[i] == chars[i + 2] || chars[i + 1] == chars[i + 2]\n  end\n  true\n\
    end", "  # Happy path\n  s.length >= 3 && !s.match(/([a-zA-Z])\\1\\1/)", "  if\
    \ s.length < 3\n    false\n  else\n    s.split('').each_with_index do |i, index|\n\
    \      if index < (s.length - 2)\n        return false if s[index] == s[index\
    \ + 1] || s[index] == s[index + 2] || s[index + 1] == s[index + 2]\n      end\n\
    \    end\n    true\n  end\nend", "  if s.length <= 2\n    return false\n  else\n\
    \    status = s.downcase.chars.each_cons(3).all? { |x| x.uniq.size == 3 }\n  \
    \  if status == true\n      return true\n    else\n      return false\n    end\n\
    \  end\nend", "  if s.length < 3\n    return false\n  end\n  num = s.length /\
    \ 3\n  arr = []\n  num.times do |i|\n    arr << s[i*3,3]\n  end\n  arr.uniq.length\
    \ == arr.length\nend", "  s.length >= 3 && s.split(/(?=abc)/).all? { |s| s.length\
    \ == 3 && s[0] != s[1] && s[1] != s[2] && s[0] != s[2] }\nend", "  if s.length\
    \ < 3\n    return false\n  else\n    s.split('').each_cons(3) do |a, b, c|\n \
    \     if a == b || b == c || a == c\n        return false\n      end\n    end\n\
    \  end\n  true\nend", "  s.scan(/(?=(.{3}))/).map(&:chars).each { |x| return false\
    \ if x.uniq.size != 3 }\n  true\nend", "  s.length > 2 && (s[0] != s[1] && s[1]\
    \ != s[2] && s[0] != s[2])\nend", "    return false if s.length < 3\n    for i\
    \ in 0..s.length-3\n        if s[i] == s[i+1] && s[i] == s[i+2]\n            return\
    \ false\n        end\n    end\n    return true\nend", "  s.each_char.each_cons(3).none?\
    \ { |a, b, c| a == b && b == c }\nend", "  arr = s.split('')\n  x = arr.length\n\
    \  while x > 0\n    return false if arr[x-1] == arr[x-2]\n    x -= 1\n  end\n\
    \  true\nend", "  return false if s.length < 3\n  s.split('').each_cons(3) do\
    \ |con|\n    return false if con.uniq.length < 3\n  end\n  true\nend", "  return\
    \ false if s.length < 3\n  s.split('').each_with_index do |val, index|\n    return\
    \ false if val == s[index + 1] && val == s[index + 2]\n  end\n  true\nend", " \
    \ return false if s.length < 3\n  s.chars.each_cons(3) do |first, second, third|\n\
    \    return false if first == second || second == third || first == third\n  end\n\
    \  true\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
