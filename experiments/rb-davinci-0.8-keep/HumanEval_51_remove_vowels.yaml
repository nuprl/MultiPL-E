name: HumanEval_51_remove_vowels
language: rb
prompt: "# remove_vowels is a function that takes string and returns string without\
  \ vowels.\n# >>> remove_vowels('')\n# ''\n# >>> remove_vowels('abcdef')\n# 'bcdf'\n\
  # >>> remove_vowels('aaaaa')\n# ''\n# >>> remove_vowels('aaBAA')\n# 'B'\n# >>> remove_vowels('zbcd')\n\
  # 'zbcd'\ndef remove_vowels(text)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_vowels\n\
  \    candidate = method(:remove_vowels)\n    assert_equal(\"\", candidate.call(\"\
  \"))\n    assert_equal(\"bcdf\nghjklm\", candidate.call(\"abcdef\nghijklm\"))\n\
  \    assert_equal(\"fdcb\", candidate.call(\"fedcba\"))\n    assert_equal(\"\",\
  \ candidate.call(\"eeeee\"))\n    assert_equal(\"cB\", candidate.call(\"acBAA\"\
  ))\n    assert_equal(\"cB\", candidate.call(\"EcBOO\"))\n    assert_equal(\"ybcd\"\
  , candidate.call(\"ybcd\"))\n  end\nend\n"
completions: ["    return text.delete('aeiouAEIOU')\nend", "  text.delete \"aeiouAEIOU\"\
    \nend", "  return text.delete('aeiouAEIOU')\nend", "  return text.delete('aAeEiIoOuU')\n\
    end", "  vowels = {\n    \"a\" => \"\",\n    \"e\" => \"\",\n    \"i\" => \"\"\
    ,\n    \"o\" => \"\",\n    \"u\" => \"\",\n    \"A\" => \"\",\n    \"E\" => \"\
    \",\n    \"I\" => \"\",\n    \"O\" => \"\",\n    \"U\" => \"\"\n  }\n  text.gsub(/[aeiouAEIOU]/,\
    \ vowels)\nend", "  text.gsub(/[aeiou]/i, '')\nend", "  vowels = %w(a e i o u)\n\
    \  new_text = ''\n  text.each_char do |char|\n    new_text << char unless vowels.include?(char.downcase)\n\
    \  end\n  new_text\nend", "  text.gsub(/[aeiou]/i, '')\nend", "  text.delete('aeiouAEIOU')\n\
    end", "  text.delete('aeiouAEIOU')\nend", "  return text.delete('aeiouAEIOU')\n\
    end", "  return text.delete('aeiouAEIOU')\nend", "  text.gsub(/[aeiou]/i, '')\n\
    end", "  vowels = ['a', 'e', 'i', 'o', 'u']\n  new_str = ''\n  text.chars.each\
    \ do |ch|\n    if !vowels.include?(ch.downcase)\n      new_str += ch\n    end\n\
    \  end\n  new_str\nend", "  # TODO: implement function\nend", "    text.delete('aeiouAEIOU')\n\
    end", "  vowels = %w(a e i o u)\n  text.each_char.delete_if { |char| vowels.include?(char.downcase)\
    \ }.join\nend", "  text.gsub(/[aeiou]/i, '')\nend", "  # Fill in here\nend", " \
    \ text.delete(\"aeiouAEIOU\")\nend", "  text.gsub(/[AEIOUaeiou]/, '')\nend", "\t\
    return text.gsub(/[aeiou]/i,'')\nend", "  text.delete(\"aeiouAEIOU\")\nend", " \
    \ # text.delete \"aeiouAEIOU\"\n  # text.gsub(/[aeiouAEIOU]/, '')\n  text.gsub(/[aeiou]/i,\
    \ '')\nend", "  text.delete('aeiouAEIOU')\nend", end, "\tvowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n\ttext_no_vowels = \"\"\n\ttext.each_char do |char|\n\t\
    \tif vowels.include?(char) == false\n\t\t\ttext_no_vowels += char\n\t\tend\n\t\
    end\n\ttext_no_vowels\nend", "  vowels = ['a', 'e', 'i', 'o', 'u']\n  result =\
    \ ''\n  text.each_char do |char|\n    if !vowels.include?(char.downcase)\n   \
    \   result += char\n    end\n  end\n  result\nend", "    vowels = \"aeiouAEIOU\"\
    \n    text.each_char do |letter|\n        if vowels.include?(letter)\n       \
    \     text.delete!(letter)\n        end\n    end\n    return text\nend", "  text.gsub(/[aeiou]/i,\
    \ '')\nend", "  text.delete(\"aeiouAEIOU\")\nend", "  vowels = %w(a e i o u)\n\
    \  text.delete(*vowels)\nend", "  text.delete('aeiouAEIOU')\nend", "  # TODO:\
    \ write your code here\nend", "  text.delete('aieou')\nend", "  text.delete \"\
    a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\"\nend", "    vowels =\
    \ 'aeiouAEIOU'\n    text.chars.reject { |char| vowels.include?(char) }.join\n\
    end", "  # your code goes here\nend", "\tvowels = \"aeiouAEIOU\"\n\tnew_text =\
    \ \"\"\n\ttext.split(\"\").each do |letter|\n\t\tif !vowels.include?(letter)\n\
    \t\t\tnew_text += letter\n\t\tend\n\tend\n\treturn new_text\nend", "    vowels\
    \ = 'aeiouAEIOU'\n    new_text = ''\n    for char in text.chars\n        if !vowels.include?(char)\n\
    \            new_text += char\n        end\n    end\n    return new_text\nend",
  "  text.gsub(/[aeiou]/i, '')\nend", "\nend", "  text.delete('aeiouAEIOU')\nend",
  "  vowels = 'aeiouAEIOU'\n  text.split('').select { |x| vowels.exclude?(x) }.join\n\
    end", "  text.delete \"aeiouAEIOU\"\nend", "  vowels = \"aeiouAEIOU\"\n  text.delete(vowels)\n\
    end", "  text.gsub(/[aeiou]/i, '')\nend", "    return text.delete('aeiouAEIOU')\n\
    end", "  text.delete('aeiouAEIOU')\nend", "  # YOUR CODE HERE\nend", "  vowels\
    \ = \"aeiouAEIOU\"\n  text.each_char do |i|\n  \tif vowels.include?(i)\n  \t\t\
    text.slice!(i)\n  \tend\n  end\n  return text\nend", "  # write your code here\n\
    \  vowels = \"aeiou\"\n  result = \"\"\n  text.each_char do |c|\n  \tresult <<\
    \ c unless vowels.include?(c.downcase)\n  end\n  result\nend", "  return text.delete(\"\
    aeiouAEIOU\")\nend", "  vowels = \"aeiouAEIOU\"\n  new_text = text.split(\"\"\
    )\n  new_text.each do |letter|\n    if vowels.include?(letter)\n      new_text.delete(letter)\n\
    \    end\n  end\n  return new_text.join(\"\")\nend", "  vowels = ['a', 'e', 'i',\
    \ 'o', 'u']\n  text.split('').select { |letter| !vowels.include?(letter.downcase)\
    \ }.join('')\nend", "  # TODO\nend", "  text.gsub(/[aeiou]/i, '')\nend", "  vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  result = \"\"\n  text.each_char do\
    \ |char|\n    unless vowels.include?(char.downcase)\n      result += char\n  \
    \  end\n  end\n  result\nend", "  text.delete(\"aeiouAEIOU\")\nend", "  return\
    \ text if text.nil?\n  return '' if text.empty?\n  return text if text.chars.find_all\
    \ { |x| !(x.downcase =~ /[aeiou]/).nil? }.empty?\n  text.chars.find_all { |x|\
    \ (x.downcase =~ /[aeiou]/).nil? }.join\nend", end, "  # replace this for solution\n\
    \  text.delete('aeiouAEIOU')\nend", "  return text.gsub(/[aeiou]/i, '')\nend",
  "  text.delete('aeiouAEIOU')\nend", "  text.delete(\"aAeEiIoOuU\")\nend", "  text.delete(\"\
    aeiouAEIOU\")\nend", "  text.delete('aeiouAEIOU')\nend", "  text.gsub(/[aeiou]/i,\
    \ '')\nend", "  text.delete('aeiouAEIOU')\nend", "  text.delete(\"aeiouAEIOU\"\
    )\nend", "\nend", "\tif text.empty?\n\t\treturn text\n\telse\n\t\ttext.gsub(/[aeiou]/i,\
    \ '')\n\tend\nend", "  vowels = %w(a e i o u)\n  text.gsub(/[#{vowels.join}]/,\
    \ '')\nend", "  vowels = \"aeiouAEIOU\"\n  result = ''\n  i = 0\n  while i < text.length\n\
    \    if vowels.include?(text[i])\n      i += 1\n    else\n      result += text[i]\n\
    \      i += 1\n    end\n  end\n  result\nend", "  return text.delete('aeiouAEIOU')\n\
    end", "  text.gsub(/[aeiou]/i, '')\nend", "  vowels = ['a', 'e', 'i', 'o', 'u']\n\
    \  result = ''\n  text.each_char do |char|\n    if !vowels.include?(char.downcase)\n\
    \      result += char\n    end\n  end\n  result\nend", "  vowels = text.scan(/[aeiou]/i)\n\
    \  if vowels.empty?\n    return ''\n  else\n    text.gsub(/[aeiou]/i, '')\n  end\n\
    end", "  if text == ''\n    ''\n  else\n    text.downcase.delete(\"aeiou\")\n\
    \  end\nend", "\toutput = ''\n\ttext.each_char do |x|\n\t\tif x.downcase != 'a'\
    \ && x.downcase != 'e' && x.downcase != 'i' && x.downcase != 'o' && x.downcase\
    \ != 'u'\n\t\t\toutput = output + x\n\t\tend\n\tend\n\treturn output\nend", "\n\
    end", "\ttext.gsub(/[aeiou]/i, '')\nend", "  # body omitted...\nend", "  # Fill\
    \ this in\nend", "  text.delete('aeiouAEIOU')\nend", "  # type: (str) -> str\n\
    \  return '' if text.nil? || text.empty?\n  text.delete('aeiouAEIOU')\nend", " \
    \ vowels = \"aeiouAEIOU\"\n  result = \"\"\n  text.each_char do |char|\n    if\
    \ !vowels.include?(char)\n      result += char\n    end\n  end\n  return result\n\
    end", "  text.tr('aeiouAEIOU', '')\nend", "  vowels = 'aeiouAEIOU'\n  result =\
    \ ''\n  text.each_char do |x|\n    result += x unless vowels.include?(x)\n  end\n\
    \  result\nend", "  text.delete \"aeiouAEIOU\"\nend", "  # TODO: implement this\
    \ method\n  if text.empty?\n    return text\n  end\n  toReturn = \"\"\n  return\
    \ text.gsub(/[aeiou]/i, '')\nend", "\tremove_vowels_helper(text, 0)\nend", " \
    \ # TODO: implement remove_vowels.\nend", "  newtext = text.delete('aeiouAEIOU')\n\
    \  puts newtext\nend", "  text.delete(\"aeiouAEIOU\")\nend", "  vowels = ['a',\
    \ 'e', 'i', 'o', 'u']\n  text.split('').map do |char|\n    if vowels.include?(char.downcase)\n\
    \      ''\n    else\n      char\n    end\n  end.join('')\nend", "\tvowels = %w(a\
    \ e i o u)\n\ttext.each_char.reject { |c| vowels.include?(c.downcase) }.join\n\
    end", "    return text.delete('aeiouAEIOU')\nend", "  text.delete('aeiouAEIOU')\n\
    end", "  if text == ''\n    ''\n  else\n    text.gsub(/[aeiou]/i, '')\n  end\n\
    end", "  text.gsub(/[aeiou]/i, '')\nend", "  return text.delete(\"aeiouAEIOU\"\
    )\nend", "  text.delete('aeiouAEIOU')\nend", "  text.gsub(/[aeiou]/i, '')\nend",
  "  #(0..text.length-1).each do |i|\n  #  if text[i]=='a'||text[i]=='e'||text[i]=='i'||text[i]=='o'||text[i]=='u'||text[i]=='A'||text[i]=='E'||text[i]=='I'||text[i]=='O'||text[i]=='U'\n\
    \  #    text[i]=''\n  #  end\n  #end\n  #puts text\n  #text.delete('a','e','i','o','u','A','E','I','O','U')\n\
    \  puts text.delete(\"aeiouAEIOU\")\nend\nremove_vowels(\"abcdaeiou\")", "  #\
    \ text.delete('aeiouAEIOU')\n  text.gsub(/[aeiou]/i, '')\nend", "\nend", "  vowels\
    \ = \"aeiouAEIOU\"\n  new_string = \"\"\n  text.each_char do |char|\n    if vowels.include?(char)\n\
    \      new_string = new_string\n    else\n      new_string << char\n    end\n\
    \  end\n  new_string\nend", "  if text == \"\"\n    text\n  else\n    replace\
    \ = ''\n    text.each_char do |letter|\n      replace << letter unless 'aeiouAEIOU'.include?(letter)\n\
    \    end\n    replace\n  end\nend", "\ttext.delete('aAeEiIoOuU')\nend", "  return\
    \ text.chars.map { |char| char.downcase =~ /[aeiou]/ ? nil : char }.join\nend",
  "  text.gsub(/[aeiou]/i, '')\nend", "\t# YOUR CODE HERE\n\t# text.delete('aeiouAEIOU')\n\
    \ttext.gsub(/[aeiouAEIOU]/, '')\nend", "  text.delete \"aeiouAEIOU\"\nend", " \
    \ return text.gsub(/[aeiou]/i, '')\nend", "\ttext.delete(\"aeiouAEIOU\")\nend",
  "\nend", "    text.delete 'aeiouAEIOU'\nend", "\ttext.gsub(/[aeiou]/i, '')\nend",
  "  vowels = ['a', 'e', 'i', 'o', 'u']\n  text.delete('aeiou')\nend", "\t# YOUR CODE\
    \ HERE\nend", "  text.delete('aeiouAEIOU')\nend", "  result = \"\"\n  vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  text.chars.each do |char|\n    if vowels.include?(char.downcase)\n\
    \      result << \"\"\n    else\n      result << char\n    end\n  end\n  result\n\
    end", "\tvowels = \"aeiouAEIOU\"\n\t(0...text.length).each do |i|\n\t\tif vowels.include?(text[i])\n\
    \t\t\ttext.slice!(i)\n\t\tend\n\tend\n\treturn text\nend", "  text.delete(\"aeiouAEIOU\"\
    )\nend", "  text.delete('aeiouAEIOU')\nend", "    vowels = \"aeiouAEIOU\"\n  \
    \  stripped = text.split(\"\").reject { |x| vowels.include?(x) }\n    stripped.join(\"\
    \")\nend", "  array = text.split('')\n  array.delete_if { |letter| letter =~ /[aeiou]/i\
    \ }\n  array.join('')\nend", "  text.gsub(/[aeiou]/i, '')\nend", end, "  a = text.gsub(/[aeiou]/i,\
    \ '')\n  return a\nend", "  return '' if text.empty?\n  return text if text.match(/[aeiou]/i).nil?\n\
    \  text.delete('aeiou')\nend", "  text.gsub(/[aeiou]/i, '')\nend", '  return ""
    if text.empty?', "  vowels = ['a', 'e', 'i', 'o', 'u']\n  text.chars.select{|c|\
    \ !vowels.include?(c.downcase)}.join\nend", "  # Your Code Here\nend", "\nend",
  "  return text.gsub(/[aeiou]/i, '')\nend", "  return '' if text.empty?\n  vowels\
    \ = 'aeiouAEIOU'\n  result = ''\n  text.each_char do |char|\n    result << char\
    \ unless vowels.include?(char)\n  end\n  result\nend", "  text.delete('aeiouAEIOU')\n\
    end", "  a = text.split('')\n  a.delete_if {|x| x.match(/[aeiou]/i)}\n  return\
    \ a.join('')\nend", "  raise ArgumentError unless text.is_a? String\n  text.delete('aeiouAEIOU')\n\
    end", "    # Use String#gsub method to replace vowels with blank space\n    text.gsub(/[aeiou]/i,\
    \ '')\nend", "  vowels = \"aeiouAEIOU\"\n  no_vowels = \"\"\n  text.length.times\
    \ do |t|\n    if vowels.include?(text[t])\n      no_vowels = no_vowels\n    else\n\
    \      no_vowels = no_vowels + text[t]\n    end\n  end\n  return no_vowels\nend",
  "  text.gsub(/[aeiou]/i, '')\nend", "  vowels = {\n    'a' => '',\n    'e' => '',\n\
    \    'i' => '',\n    'o' => '',\n    'u' => '',\n    'A' => '',\n    'E' => '',\n\
    \    'I' => '',\n    'O' => '',\n    'U' => ''\n  }\n  vowels.default = text[0]\n\
    \  text.split('').map { |x| vowels[x] }.join\nend", "  return text.delete(\"aeiouAEIOU\"\
    )\nend", "  return \"\" if text.empty?\n  return \"\" if text.count(\"aeiouAEIOU\"\
    ) == text.length\n  text.split(\"\").each do |letter|\n    if \"aeiouAEIOU\".include?(letter)\n\
    \      text.sub!(letter, \"\")\n    end\n  end\n  text\nend", "  # Variables\n\
    \  text_result = \"\"\n  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  # Check\
    \ every character in text\n  for letter in text.chars\n    # Check is letter vowel\n\
    \    if !vowels.include?(letter.downcase)\n      # It is not, then copy it to\
    \ result\n      text_result += letter\n    end\n  end\n  # Return text result\n\
    \  return text_result\nend", "  t=text.downcase.split('')\n  text=''\n  for i\
    \ in t\n    if i!='a' && i!='e' && i!='i' && i!='o' && i!='u'\n      text += i\n\
    \    end\n  end\n  return text\nend", "  vowels = ['a', 'e', 'i', 'o', 'u']\n\
    \  # text.each_char.reject { |c| vowels.include?(c) }.join\n  text.delete('aeiou')\n\
    end", "  text.delete \"aeiouAEIOU\"\nend", "  vowels = \"aeiouAEIOU\"\n  text.delete(vowels)\n\
    end", "  text.delete \"aeiouAEIOU\"\nend", "  vowels = %w[a e i o u A E I O U]\n\
    \  text.delete(*vowels)\nend", "  text.delete(\"aeiouAEIOU\")\nend", "    text.gsub(/[aeiou]/i,\
    \ '')\nend", "    return text.gsub(/[aeiou]/i, '')\nend", "  text.delete('aeiouAEIOU')\n\
    end", "\tnew_text = \"\"\n\tcounter = 0\n\tvowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n\twhile counter < text.length\n\t\tif vowels.include?(text[counter])\
    \ == false\n\t\t\tnew_text = new_text + text[counter]\n\t\tend\n\t\tcounter +=\
    \ 1\n\tend\n\tnew_text\nend", "\tif text == ''\n\t\treturn ''\n\tend\n\tif text[0]\
    \ =~ /[aeiou]/\n\t\treturn remove_vowels(text[1..-1])\n\tend\n\treturn text[0]\
    \ + remove_vowels(text[1..-1])\nend", "  vowels = 'aeiouAEIOU'\n  text.delete(vowels)\n\
    end", "  if text.length > 0\n    if text[0] == 'a' || text[0] == 'e' || text[0]\
    \ == 'i' || text[0] == 'o' || text[0] == 'u'\n      remove_vowels(text[1..-1])\n\
    \    else\n      text[0] + remove_vowels(text[1..-1])\n    end\n  else\n    text\n\
    \  end\nend", "  # your code here\n  vowel = ['a','e','i','o','u']\n  string =\
    \ ''\n  for i in 0..text.length-1\n    if vowel.include?(text[i]) == false\n \
    \     string += text[i]\n    end\n  end\n  return string\nend", "  text.gsub(/[aeiou]/i,\
    \ '')\nend", "  vowels = 'aeiouAEIOU'\n  new_text = ''\n  text.each_char do |c|\n\
    \    if vowels.include?(c)\n      next\n    else\n      new_text += c\n    end\n\
    \  end\n  new_text\nend", "  text.delete('aeiouAEIOU')\nend", "  new_str = text.split('')\n\
    \  new_str.delete_if do |char|\n    char =~ /[aeiou]/i\n  end\n  new_str.join('')\n\
    end", "  vowels = ['a', 'e', 'i', 'o', 'u']\n  text.each_char.reject { |ch| vowels.include?(ch.downcase)\
    \ }.join\nend", "  vowels = \"aeiouAEIOU\"\n  vowels.each_char do |vowel|\n  \
    \  text.gsub!(vowel,\"\")\n  end\n  text\nend", "  text.delete \"aeiouAEIOU\"\n\
    end", "    r = /[aeiou]/i\n    text.gsub(r,'')\nend", "  return '' if text.length\
    \ == 0\n  text.delete('aeiouAEIOU')\nend", "    vowels = ['a', 'e', 'i', 'o',\
    \ 'u']\n    noVowels = ''\n    text.split('').each do |letter|\n        noVowels\
    \ += letter if !vowels.include?(letter)\n    end\n    return noVowels\nend", "\t\
    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\tnew_text = \"\"\n\tfor i in 0..text.length\n\
    \t\tnew_text += text[i] if not vowels.include?(text[i])\n\tend\n\treturn new_text\n\
    end", "    # My code\n    new_string = ''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n\
    \    for i in 0..text.length - 1\n        # puts text[i]\n        if vowels.include?(text[i])\n\
    \            next\n        else\n            new_string += text[i]\n        end\n\
    \    end\n    return new_string\nend", "  # your code here\nend", "  #TODO: implement\
    \ me!\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  result = []\n\
    \  text.split(\"\").each do |letter|\n    if !vowels.include?(letter.downcase)\n\
    \      result << letter\n    end\n  end\n  result.join(\"\")\nend", "  return\
    \ text.delete(\"aeiouAEIOU\")\nend", "  if text.length == 0\n    \"\"\n  else\n\
    \    if text[0] =~ /[aeiou]/\n      remove_vowels(text[1..-1])\n    else\n   \
    \   text[0] + remove_vowels(text[1..-1])\n    end\n  end\nend", "  return_text\
    \ = \"\"\n  for i in text.split(\"\")\n    if i != \"a\" && i != \"A\" && i !=\
    \ \"e\" && i != \"E\" && i != \"i\" && i != \"I\" && i != \"o\" && i != \"O\"\
    \ && i != \"u\" && i != \"U\"\n      return_text += i\n    end\n  end\n  return\
    \ return_text\nend", "  vowels = \"aeiouAEIOU\"\n  text.chars.map { |char| vowels.include?(char)\
    \ ? nil : char }.join\nend", "  return '' if text.length == 0\n  return remove_vowels(text[1..-1])\
    \ if text[0] =~ /[aeiou]/i\n  text[0] + remove_vowels(text[1..-1])\nend", "  \
    \  vowels = 'aeiouAEIOU'\n    text.delete(vowels)\nend", "  text.delete('aeiouAEIOU')\n\
    end", "  text.delete('aeiouAEIOU')\nend", "  text.delete('aeiouAEIOU')\nend",
  "  vowels = ['a', 'e', 'i', 'o', 'u']\n  text.chars.select { |c| !vowels.include?(c.downcase)\
    \ }.join\nend", "\t# your code here\n\treturn text.delete('aeiouAEIOU')\nend",
  "  text.gsub(/[aeiou]/i, '')\nend", "  text.delete(\"aeiouAEIOU\")\nend", "\nend",
  "  text.delete('aeiouAEIOU')\nend", "  text.gsub(/[aeiou]/i, '')\nend", "  text.delete(\"\
    aeiouAEIOU\")\nend", "   \n    new_string = \"\"\n    #create loop that goes through\
    \ text\n    for i in 0..text.length - 1\n     \n      if text[i] == \"a\" || text[i]\
    \ == \"e\" || text[i] == \"i\" || text[i] == \"o\" || text[i] == \"u\" || text[i]\
    \ == \"A\" || text[i] == \"E\" || text[i] == \"I\" || text[i] == \"O\" || text[i]\
    \ == \"U\"\n        next\n      else\n         new_string += text[i]\n      end\n\
    \    end\n    return new_string\nend", "  # TODO: return string without vowels\n\
    \  if text == \"\"\n    \"\"\n  else\n    text.split(\"\").reject{|letter| vowels.include?(letter)}.join(\"\
    \")\n  end\nend", "  vowels = 'aeiouAEIOU'\n  result = ''\n  text.each_char do\
    \ |char|\n    result << char unless vowels.include?(char)\n  end\n  result\nend",
  "    if text == \"\"\n        return \"\"\n    elsif text[0] == \"a\" or text[0]\
    \ == \"e\" or text[0] == \"i\" or text[0] == \"o\" or text[0] == \"u\" or text[0]\
    \ == \"A\" or text[0] == \"E\" or text[0] == \"I\" or text[0] == \"O\" or text[0]\
    \ == \"U\"\n        return remove_vowels(text[1, text.length])\n    else\n   \
    \     return text[0] + remove_vowels(text[1, text.length])\n    end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
