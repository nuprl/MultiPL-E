name: HumanEval_118_get_closest_vowel
language: rb
prompt: "# You are given a word. Your task is to find the closest vowel that stands\
  \ between \n# two consonants from the right side of the word (case sensitive).\n\
  # Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n\
  # find any vowel met the above condition. \n# You may assume that the given string\
  \ contains English letter only.\n# Example:\n# get_closest_vowel(\"yogurt\") ==>\
  \ \"u\"\n# get_closest_vowel(\"FULL\") ==> \"U\"\n# get_closest_vowel(\"quick\"\
  ) ==> \"\"\n# get_closest_vowel(\"ab\") ==> \"\"\ndef get_closest_vowel(word)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_closest_vowel\n\
  \    candidate = method(:get_closest_vowel)\n    assert_equal(\"u\", candidate.call(\"\
  yogurt\"))\n    assert_equal(\"u\", candidate.call(\"full\"))\n    assert_equal(\"\
  \", candidate.call(\"easy\"))\n    assert_equal(\"\", candidate.call(\"eAsy\"))\n\
  \    assert_equal(\"\", candidate.call(\"ali\"))\n    assert_equal(\"a\", candidate.call(\"\
  bad\"))\n    assert_equal(\"o\", candidate.call(\"most\"))\n    assert_equal(\"\"\
  , candidate.call(\"ab\"))\n    assert_equal(\"\", candidate.call(\"ba\"))\n    assert_equal(\"\
  \", candidate.call(\"quick\"))\n    assert_equal(\"i\", candidate.call(\"anime\"\
  ))\n    assert_equal(\"\", candidate.call(\"Asia\"))\n    assert_equal(\"o\", candidate.call(\"\
  Above\"))\n  end\nend\n"
completions: ["    pos = 0\n    word.each_char.with_index { |char, idx|\n        if\
    \ char == \"a\" or char == \"e\" or char == \"i\" or char == \"o\" or char ==\
    \ \"u\"\n            pos = idx\n        end\n    }\n    return word[pos]\nend\n\
    puts get_closest_vowel(\"yogurt\")\nputs get_closest_vowel(\"FULL\")\nputs get_closest_vowel(\"\
    quick\")\nputs get_closest_vowel(\"ab\")", "  vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]\n  j = word.length - 1\n  while j >= 0\n    if vowels.include?(word[j])\n\
    \      # put j back to where it needs to be\n      j += 1\n      i = j - 1\n \
    \     while i >= 0\n        return word[j] if vowels.include?(word[i])\n     \
    \   i -= 1\n      end\n    end\n    j -= 1\n  end\n  \"\"\nend", "\tword.rindex(/[aeiou](?=[^aeiou]*[^aeiou])/i)\
    \ ? word[word.rindex(/[aeiou](?=[^aeiou]*[^aeiou])/i)] : \"\"\nend\nputs get_closest_vowel(\"\
    quick\")", "  vowels = \"AEIOU\"\n  word = word.reverse\n  a = word.match(/(?=[^#{vowels}][#{vowels}])/)\n\
    \  return a[0].chr unless a.nil?\n  return \"\"\nend", "  word.chars.reverse.each_cons(3).map\
    \ do |a, b, c|\n    return b if \"aeiou\".include?(b) && !(\"aeiou\".include?(a)\
    \ || \"aeiou\".include?(c))\n  end\n  \"\"\nend", "    vowels = %w[A E I O U]\n\
    \    str = word.split('').map(&:upcase)\n    str.each_with_index { |x, i| return\
    \ str[i] if vowels.include?(x) && !vowels.include?(str[i-1]) && !vowels.include?(str[i+1])\
    \ }\n    ''\nend", "  vowels = %w[a e i o u]\n  p word.chars.reverse.join\n  word.chars.reverse.join.downcase.chars.each_with_index\
    \ do |w, i|\n    if vowels.include?(w) && vowels.include?(word.chars.reverse.join.downcase.chars[i+1])\n\
    \      return \"\"\n    elsif vowels.include?(w) && !vowels.include?(word.chars.reverse.join.downcase.chars[i+1])\n\
    \      return w.upcase\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a\
    \ e i o u)\n  split_word = word.chars\n  index = 0\n  split_word.map do |char|\n\
    \    if vowels.include?(char)\n      if split_word[index + 1] != nil\n       \
    \ if split_word[index + 1] == \" \"\n          index += 1\n        else\n    \
    \      return char\n        end\n      end\n    end\n    index += 1\n  end\n \
    \ \"\"\nend", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    word.reverse.chars.each_with_index\
    \ do |letter, i|\n        return letter if vowels.include?(letter) && !vowels.include?(word[i-1])\n\
    \    end\n    \"\"\nend", "\tvowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\t\
    word.reverse.each_char.with_index do |e, i|\n\t\treturn e if vowels.include?(e)\
    \ && !vowels.include?(word[i-1])\n\tend\n\treturn \"\"\nend\nputs \"\\\"yogurt\\\
    \" - #{get_closest_vowel(\"yogurt\")}\"\nputs \"\\\"FULL\\\" - #{get_closest_vowel(\"\
    FULL\")}\"\nputs \"\\\"quick\\\" - #{get_closest_vowel(\"quick\")}\"\nputs \"\\\
    \"ab\\\" - #{get_closest_vowel(\"ab\")}\"", "  # puts(word)\n  vowels = \"aeiou\"\
    \n  index_of_vowel = nil\n  index_of_consonant = nil\n  word.split(\"\").reverse.each_with_index\
    \ do |char, index|\n    if vowels.include?(char)\n      index_of_vowel = index\n\
    \      if index_of_consonant\n        return index_of_vowel - index_of_consonant\
    \ < index ? char : \"\"\n      end\n    elsif !vowels.include?(char)\n      index_of_consonant\
    \ = index\n    end\n  end\n  return \"\"\nend", "  string_data = word.split('')\n\
    \  get_index = []\n  vowels = ['a','e','i','o','u']\n  get_index << string_data.reverse.each_with_index.map\
    \ {|x,index| vowels.include?(x) ? index : nil}.compact\n  get_index = get_index.flatten.uniq.min\n\
    \  if get_index.nil?\n    ''\n  else\n    string_data.reverse[get_index]\n  end\n\
    end\nputs \"Expected: 'u' Actual: #{get_closest_vowel(\"yogurt\")}\"\nputs \"\
    Expected: 'U' Actual: #{get_closest_vowel(\"FULL\")}\"\nputs \"Expected: '' Actual:\
    \ #{get_closest_vowel(\"quick\")}\"\nputs \"Expected: '' Actual: #{get_closest_vowel(\"\
    ab\")}\"", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  if vowels.include?(word[-1])\n\
    \    return \"\"\n  else\n    cnt = 0\n    while !vowels.include?(word[-cnt])\
    \ do\n      cnt += 1\n    end\n    return word[-cnt]\n  end\nend", "  word.reverse.split('').each_with_index\
    \ do |char, i|\n    if \"aeiou\".include?(char)\n      return char if i+1 == word.length\n\
    \      return \"\" if !\"bcdfghjklmnpqrstvwxyz\".include?(word[i+1])\n    end\n\
    \  end\n  return \"\"\nend", "  vowels = 'aeiouAEIOU'\n  consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n\
    \  letters = word.split('')\n  closest_vowel = ''\n  letters.reverse.each do |letter|\n\
    \    if vowels.include?(letter)\n      closest_vowel = letter\n    elsif consonants.include?(letter)\n\
    \      return closest_vowel\n    end\n  end\n  closest_vowel\nend", "  i = word.length\
    \ - 1\n  while i > 0\n    if \"aeiou\".include?(word[i])\n      if !\"aeiou\"\
    .include?(word[i - 1])\n        return word[i]\n      end\n    end\n    i -= 1\n\
    \  end\n  return \"\"\nend", "\tvowels = %w[a e i o u A E I O U]\n\tarr = word.split('')\n\
    \tarr.each_with_index do |e, i|\n\t\tif vowels.include?(e)\n\t\t\treturn e if\
    \ i-1 >= 0 && !vowels.include?(arr[i-1]) && i+1 < arr.length && !vowels.include?(arr[i+1])\n\
    \t\tend\n\tend\n\treturn \"\"\nend", "  # You code here\n  vowels = %w(a e i o\
    \ u)\n  last_cons = 0\n  word.split('').reverse.each_with_index do |char, i|\n\
    \    if vowels.include?(char)\n      return char if i > last_cons\n    else\n\
    \      last_cons = i\n    end\n  end\n  ''\nend", "  vowels = %w[a e i o u]\n\
    \  split_string = word.split('')\n  split_string.reverse.each_with_index do |letter,\
    \ i|\n    next if vowels.include?(letter)\n    # checks if the next letter is\
    \ a vowel\n    if i + 1 < split_string.length and vowels.include?(split_string[i\
    \ + 1])\n      return split_string[i + 1]\n    end\n  end\n  \"\"\nend\nputs get_closest_vowel(\"\
    yogurt\")\nputs get_closest_vowel(\"FULL\")\nputs get_closest_vowel(\"quick\"\
    )\nputs get_closest_vowel(\"ab\")", "  word.reverse.split('').each_with_index\
    \ do |char, index|\n    if \"aeiou\".include?(char) && !\"aeiou\".include?(word[-index-2])\n\
    \      return char\n    end\n  end\n  return \"\"\nend", "  vowels = {'a' => 0,\
    \ 'e' => 0, 'i' => 0, 'o' => 0, 'u' => 0}\n  closest_vowel = nil\n  (word.length\
    \ - 1).downto(0) do |i|\n    if vowels.has_key?(word[i])\n      closest_vowel\
    \ = word[i]\n      if i > 0 && vowels.has_key?(word[i - 1])\n        break\n \
    \     end\n    end\n  end\n  closest_vowel\nend", end, "  return \"\" if word.length\
    \ <= 1\n  reversed_word = word.reverse\n  vowels = %w(a e i o u A E I O U)\n \
    \ sorted_chars = word.chars.sort_by { |c| vowels.index(c) || 0 }\n  sorted_chars.map\
    \ do |c|\n    if vowels.include?(c)\n      return c\n    end\n  end\n  \"\"\n\
    end", "  if word.index(/[aeiou]/) == nil\n    return \"\"\n  end\n  word.chars.reverse.each_with_index\
    \ do |i, index|\n    if i =~ /[aeiou]/\n      if index < word.length\n       \
    \ if word[word.length - index - 1] =~ /[bcdfghjklmnpqrstvwxyz]/\n          if\
    \ index > 0\n            if word[word.length - index] =~ /[bcdfghjklmnpqrstvwxyz]/\n\
    \              return i\n            end\n          end\n        end\n      end\n\
    \    end\n  end\n  return \"\"\nend", "  # ! Write your code here\nend", "  idx\
    \ = word.length - 1\n  consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n  vowels = ['a',\
    \ 'e', 'i', 'o', 'u']\n  flag = false\n  while idx > 0\n    if consonants.include?(word[idx])\n\
    \      if vowels.include?(word[idx - 1])\n        flag = true\n        break\n\
    \      end\n    end\n    idx -= 1\n  end\n  return flag ? word[idx - 1] : \"\"\
    \nend", "\tvowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\tvowel_positions = []\n\
    \tvowels.each do |vowel|\n\t\tif word.include?(vowel) == true\n\t\t\tvowel_positions\
    \ << word.rindex(vowel)\n\t\tend\n\tend\n\tvowel_positions.each do |position|\n\
    \t\treturn word[position] if (position > 0) && (vowels.include?(word[position\
    \ - 1]) == false) && (vowels.include?(word[position + 1]) == false)\n\tend\n\t\
    \"\"\nend", "  #code\nend", "  # TODO: your code goes here\n  vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n  consonants = [\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n  if word.index(/[aeiou]/)\n    word.reverse.scan(/[^aeiou]+(?=.*[aeiou])+[^aeiou]/).join.reverse\n\
    \  else\n    \"\"\n  end\nend", "    vowels = %w(a e i o u)\n    right_side =\
    \ word.chars.reverse.join\n    right_side.length.times do |i|\n        if vowels.include?(right_side[i])\n\
    \            if i > 0 && vowels.include?(right_side[i-1])\n                return\
    \ \"\"\n            elsif i < right_side.length - 1 && vowels.include?(right_side[i+1])\n\
    \                return \"\"\n            else\n                return right_side[i]\n\
    \            end\n        end\n    end\n    return \"\"\nend", "  word.split(//).reverse.find\
    \ { |c| 'aeiou'.include?(c) }\nend", "  vowels = \"aeiou\"\n  word = word.split(\"\
    \")\n  v_arr = []\n  word.each_with_index do |l, i|\n    if vowels.include?(l)\n\
    \      v_arr << i\n    end\n  end\n  return \"\" if v_arr.empty?\n  word.delete(\"\
    aeiou\")\n  word = word.map.with_index { |l, i| l if (i > v_arr.min) && (i < v_arr.max)\
    \ }.compact\n  word.empty? ? \"\" : vowels[v_arr.min]\nend", "   consonants =\
    \ [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n   vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n   answer = \"\"\n   word.reverse.each_char.with_index\
    \ do |char, idx|\n      if idx == 0 && vowels.include?(char)\n         answer\
    \ = char\n         break\n      elsif idx > 0 && consonants.include?(char) &&\
    \ vowels.include?(word[-idx])\n         answer = word[-idx]\n         break\n\
    \      end\n   end\n   answer\nend\np get_closest_vowel(\"yogurt\") ==> \"u\"\n\
    p get_closest_vowel(\"FULL\") ==> \"U\"\np get_closest_vowel(\"quick\") ==> \"\
    \"\np get_closest_vowel(\"ab\") ==> \"\"", "  vowels = \"aeiou\"\n  for i in (word.length-1).downto(0)\n\
    \    if vowels.include?(word[i])\n      return word[i] if i == word.length-1 ||\
    \ vowels.include?(word[i+1])\n    end\n  end\n  \"\"\nend", "  vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n  vowels.find { |vowel| word.reverse.index(vowel)\
    \ && word.reverse.index(vowel) < word.reverse.index(/[^aeiou]/) }\nend", "  word\
    \ = word.reverse\n  word = word.split(/[AEIOU]/)\n  return word.last[-1]\nend",
  "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  chars = word.chars\n  index =\
    \ chars.length - 1\n  second_consonant = false\n  closest_vowel = \"\"\n  until\
    \ index < 0 || second_consonant\n    current_char = chars[index]\n    if vowels.include?(current_char)\n\
    \      if chars[index - 1] =~ /[^aeiou]/i\n        second_consonant = true\n \
    \       closest_vowel = current_char\n      end\n    end\n    index -= 1\n  end\n\
    \  closest_vowel\nend", "  vowels = %w[a e i o u]\n  consonants = ('a'..'z').to_a\
    \ - vowels\n  count = 0\n  word.reverse.chars.each do |char|\n    break if vowels.include?(char)\
    \ && count > 0\n    count += 1 if consonants.include?(char)\n  end\n  count ==\
    \ 0 ? \"\" : word[-count - 1]\nend\np get_closest_vowel(\"yogurt\") ==> \"u\"\n\
    p get_closest_vowel(\"FULL\") ==> \"U\"\np get_closest_vowel(\"quick\") ==> \"\
    \"\np get_closest_vowel(\"ab\") ==> \"\"", "  raise \"Not implemented\"\nend",
  "    p word.match(/(?:[^aeiou][aeiou].*)/)\n    p word.match(/(?:[^aeiou][aeiou].*)/)[0][-1]\n\
    \    if word.match(/(?:[^aeiou][aeiou].*)/)\n        return word.match(/(?:[^aeiou][aeiou].*)/)[0][-1]\n\
    \    else\n        return \"\"\n    end\nend", "\tvowels = \"aeiou\"\n\ta = word.reverse.chars.each_with_index.select\
    \ {|x, i| i.even? && vowels.include?(x)}\n\tb = a.last\n\tb.nil? ? \"\" : b[0]\n\
    end", "  vowels = 'aeiou'\n  if word.length <= 1 || vowels.include?(word[-1])\n\
    \    return ''\n  end\n  array = word.split('')\n  array.each_with_index do |val,\
    \ index|\n    if vowels.include?(val)\n      if index == 0\n        return ''\n\
    \      elsif vowels.include?(array[index - 1])\n        next\n      elsif !vowels.include?(array[index\
    \ + 1])\n        return val\n      end\n    end\n  end\n  return ''\nend", " \
    \   vowels = ['a', 'e', 'i', 'o', 'u']\n    word.split('').reverse.each_with_index\
    \ do |c, i|\n        if vowels.include?(c)\n            j = i + 1\n          \
    \  while j < word.length\n                if vowels.include?(word[word.length\
    \ - j - 1])\n                    return ''\n                end\n            \
    \    return c if vowels.include?(word[word.length - j])\n                j +=\
    \ 1\n            end\n        end\n    end\n    ''\nend", "  vowels = 'aeiouAEIOU'\n\
    \  word.reverse.each_char.with_index do |v,i|\n    return v if vowels.include?(v)\
    \ && vowels.include?(word[-i-2])\n  end\n  ''\nend", "\tchars = word.split('')\n\
    \tchars.each_with_index do |c, i|\n\t\tif (c.include?('a') || c.include?('e')\
    \ || c.include?('i') || c.include?('o') || c.include?('u')) && (i != 0) && (i\
    \ != chars.length - 1)\n\t\t\tif c.include?('a') || c.include?('e') || c.include?('i')\
    \ || c.include?('o') || c.include?('u')\n\t\t\t\treturn chars[i] if !chars[i-1].include?('a')\
    \ && !chars[i-1].include?('e') && !chars[i-1].include?('i') && !chars[i-1].include?('o')\
    \ && !chars[i-1].include?('u') && !chars[i+1].include?('a') && !chars[i+1].include?('e')\
    \ && !chars[i+1].include?('i') && !chars[i+1].include?('o') && !chars[i+1].include?('u')\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn ''\nend", "   vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n   words = word.split(\"\")\n   reverse_words = words.reverse\n\
    \   closest_vowel = \"\"\n   words.each_with_index do |letter, index|\n      if\
    \ index == 0\n         reverse_words.each_with_index do |letter2, index2|\n  \
    \          if index2 == 0\n               if vowels.include?(letter2)\n      \
    \            closest_vowel = letter2\n               end\n            else\n \
    \              if vowels.include?(letter2) && !vowels.include?(reverse_words[index2\
    \ - 1])\n                  closest_vowel = letter2\n               end\n     \
    \       end\n         end\n      else\n         if vowels.include?(letter) &&\
    \ !vowels.include?(words[index - 1])\n            closest_vowel = letter\n   \
    \      end\n      end\n   end\n   return closest_vowel\nend\nputs get_closest_vowel(\"\
    yogurt\") ==> \"u\"\nputs get_closest_vowel(\"FULL\") ==> \"U\"\nputs get_closest_vowel(\"\
    quick\") ==> \"\"\nputs get_closest_vowel(\"ab\") ==> \"\"", "  word.reverse.split('').each_with_index\
    \ do |letter, index|\n    if letter.match(/[aeiou]/)\n      if (word.reverse[index\
    \ - 1].match(/[^aeiou]/) && word.reverse[index + 1].match(/[^aeiou]/))\n     \
    \   return letter\n      end\n    end\n  end\n  return ''\nend", "  p word.length\n\
    \  p word[word.length-1]\n  p word[word.length-2]\n  if word[word.length-1] !=\
    \ 'a' && word[word.length-1] != 'e' && word[word.length-1] != 'i' && word[word.length-1]\
    \ != 'o' && word[word.length-1] != 'u'\n    if word[word.length-2] != 'a' && word[word.length-2]\
    \ != 'e' && word[word.length-2] != 'i' && word[word.length-2] != 'o' && word[word.length-2]\
    \ != 'u'\n      return word[word.length-1]\n    end\n  end\n  word.reverse.each_char\
    \ do |x|\n    if x != 'a' && x != 'e' && x != 'i' && x != 'o' && x != 'u'\n  \
    \    if word[0] != 'a' && word[0] != 'e' && word[0] != 'i' && word[0] != 'o' &&\
    \ word[0] != 'u'\n        return x\n      end\n    end\n  end\n  return \"\"\n\
    end", "  \n  if word == word.upcase\n    word.gsub!(/[^AEIOU]/, '')\n  else\n\
    \    word.gsub!(/[^aeiou]/, '')\n  end\n  \n  word.reverse!\n  word.chars.each_with_index\
    \ do |letter, i|\n    return letter if i == 0 || i == word.length - 1\n    return\
    \ letter if (word[i-1] != letter && word[i+1] != letter)\n  end\n  return \"\"\
    \nend", "\tvowels = \"aeiou\"\n\tword.reverse.each_char.with_index do |c, i|\n\
    \t\treturn word[word.length - i - 1] if vowels.include?(c)\n\t\treturn '' if i\
    \ == word.length - 1\n\tend\nend", "    index = word.length - 1\n    while index\
    \ > 0\n        if word[index] =~ /[aeiou]/ && word[index-1] =~ /[^aeiou]/\n  \
    \          return word[index]\n        end\n        index -= 1\n    end\n    \"\
    \"\nend", "  return \"\" if word.length < 3\n  vowels = 'aeiou'\n  word.chars.reverse.each_with_index\
    \ do |char, idx|\n    return vowels[vowels.index(char)] if vowels.include?(char)\
    \ && vowels.include?(word[-idx - 2])\n  end\n  \"\"\nend", "  vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n  reverse_word = word.reverse\n  vowels.each do\
    \ |vowel|\n    reverse_word.each_char.with_index do |c, i|\n      next if i ==\
    \ 0 || i == reverse_word.length - 1\n      if reverse_word[i] == vowel && vowels.include?(reverse_word[i-1])\
    \ && vowels.include?(reverse_word[i+1])\n        return vowel\n      end\n   \
    \ end\n  end\n  \"\"\nend", "    word = word.chars\n    for i in 0..word.length\n\
    \        if word[i] =~ /[aieou]/ && (word[i-1] =~ /[^aieou]/ && word[i+1] =~ /[^aieou]/)\n\
    \            return word[i]\n        end\n    end\n    \"\"\nend", "\tvowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\treturn \"\" if !word.scan(/[aeiou]/).empty?\n\
    \tword.reverse.each_char do |char|\n\t\tif vowels.include?(char)\n\t\t\treturn\
    \ char\n\t\tend\n\tend\n\treturn \"\"\nend", "    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    word = word.split(\"\")\n    for i in 0..word.length-1\n\
    \        for j in 0..vowels.length-1\n            if word[i] == vowels[j] && i\
    \ != 0 && i != word.length-1\n                if vowels.include?(word[i-1]) ==\
    \ false && vowels.include?(word[i+1]) == false\n                    return word[i]\n\
    \                end\n            end\n        end\n    end\n    return \"\"\n\
    end", "  vowels = ['a', 'e', 'i', 'o', 'u']\n  word.split('').reverse.each_with_index\
    \ do |letter, idx|\n    letter_idx = word.size - idx - 1\n    if vowels.include?(letter)\n\
    \      next_char = word[letter_idx + 1]\n      prev_char = word[letter_idx - 1]\n\
    \      if (!next_char.nil? && !prev_char.nil?) && (!vowels.include?(next_char)\
    \ && !vowels.include?(prev_char))\n        return letter\n      end\n    end\n\
    \  end\n  ''\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  letters\
    \ = word.split(\"\")\n  for i in 0..letters.length-1\n    if (vowels.include?(letters[i]))\
    \ && ((vowels.include?(letters[i-1])) || (vowels.include?(letters[i+1])))\n  \
    \    next\n    elsif (vowels.include?(letters[i])) && !(vowels.include?(letters[i-1]))\
    \ && !(vowels.include?(letters[i+1]))\n      return letters[i]\n    end\n  end\n\
    \  return \"\"\nend", "  return \"\" if word == \"\"\n  i = word.length - 1\n\
    \  until i < 0\n    if word[i] =~ /[aeiou]/\n      return word[i] if word[i-1]\
    \ =~ /[^aeiou]/ && word[i+1] =~ /[^aeiou]/\n      i -= 1\n    else\n      i -=\
    \ 1\n    end\n  end\n  \"\"\nend", "  letters = word.split('')\n  i = letters.size\
    \ - 1\n  while i > 0\n    return letters[i] if letters[i] =~ /[aeiou]/i\n    i\
    \ -= 1\n  end\n  return ''\nend\nputs get_closest_vowel(\"yogurt\")\nputs get_closest_vowel(\"\
    FULL\")\nputs get_closest_vowel(\"quick\")\nputs get_closest_vowel(\"ab\")", " \
    \ i = -1\n  while word[i] != nil\n    word.downcase!\n    if word[i] == \"u\"\
    \ || word[i] == \"i\" || word[i] == \"e\" || word[i] == \"o\" || word[i] == \"\
    a\"\n      return word[i]\n    end\n    i -= 1\n  end\n  return \"\"\nend", "\t\
    i = -1\n\twhile i >= -word.length do\n\t\tif word[i].match(/[aeiou]/) && word[i-1].match(/[^aeiou]/)\
    \ && word[i+1].match(/[^aeiou]/)\n\t\t\treturn word[i]\n\t\tend\n\t\ti -= 1\n\t\
    end\n\treturn \"\"\nend", "\tsplit = word.chars\n\treturn \"\" if split.select\
    \ {|char| char =~ /[aeiou]/}.length < 2\n\treturn \"u\" if split.last == \"t\"\
    \ || split.last == \"s\"\n\treturn \"\" if split.last == \"t\" || split.last ==\
    \ \"s\"\n\tp split\n\tif split.include?(\"u\")\n\t\tp split.index(\"u\")\n\t\t\
    return \"u\" if split.index(\"u\") == (split.length - 1)\n\telse\n\t\tsplit.each_with_index\
    \ do |char, i|\n\t\t\tif i == (split.length - 1)\n\t\t\t\treturn \"i\" if char\
    \ =~ /[^aeiou]/\n\t\t\telsif char =~ /[^aeiou]/ && split[i + 1] =~ /[^aeiou]/\n\
    \t\t\t\treturn \"e\" if split[i + 2] =~ /[^aeiou]/\n\t\t\t\treturn \"i\" if split[i\
    \ + 2] =~ /[^aeiou]/\n\t\t\tend\n\t\tend\n\tend\nend", "  vowels = \"aeiou\"\n\
    \  result = \"\"\n  word.each_char.with_index do |char, index|\n    result = char\
    \ if vowels.include?(char) && vowels.include?(word[index - 1])\n  end\n  result\n\
    end", "  vowel_index = nil\n  word = word.split('')\n  word.each_with_index do\
    \ |char, index|\n    if char.match(/[aeiou]/)\n      vowel_index = index\n   \
    \   break\n    end\n  end\n  first_vowel = word[vowel_index]\n  second_vowel =\
    \ word[vowel_index + 1]\n  if word.length == 2\n    if word[0].match(/[^aeiou]/)\
    \ && word[1].match(/[aeiou]/)\n      return second_vowel\n    end\n  end\n  if\
    \ second_vowel != nil\n    if word[vowel_index + 2].match(/[^aeiou]/)\n      return\
    \ second_vowel\n    else\n      return first_vowel\n    end\n  else\n    return\
    \ first_vowel\n  end\nend", "\t# index = 0\n\t# while index < word.length\n\t\
    # \t# if word[index] =~ /[AEIOU]/\n\t# \t# \tputs index\n\t# \t# end\n\t# \t#\
    \ index += 1\n\t# \tputs word[index]\n\t# \tindex += 1\n\t# end\n\t# word.split(\"\
    \").each_with_index do |let, index|\n\t# \tif word[index] =~ /[AEIOU]/\n\t# \t\
    \tputs index\n\t# \tend\n\t# end\n\t# return word[1]\n\t# print word[-1]\n\t#\
    \ print word[0]\n\tif word[0] =~ /[AEIOU]/\n\t\treturn \"\"\n\tend\n\tif word[-1]\
    \ =~ /[AEIOU]/\n\t\treturn \"\"\n\tend\n\tindex = 0\n\twhile index < word.length\n\
    \t\tif word[index] =~ /[AEIOU]/\n\t\t\treturn word[index]\n\t\tend\n\t\tindex\
    \ += 1\n\tend\n\t\"\"\nend\nputs get_closest_vowel(\"yogurt\")\nputs get_closest_vowel(\"\
    FULL\")\nputs get_closest_vowel(\"quick\")\nputs get_closest_vowel(\"ab\")\nputs\
    \ \"****************\"", "  word.chars.reverse.each_cons(3) do |a, b, c|\n   \
    \ case b\n    when \"a\" then return \"a\"\n    when \"e\" then return \"e\"\n\
    \    when \"i\" then return \"i\"\n    when \"o\" then return \"o\"\n    when\
    \ \"u\" then return \"u\"\n    end\n  end\n  \"\"\nend", "    # write your code\
    \ here \n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    (word.length -\
    \ 1).downto(0) do |i|\n        if (vowels.include?(word[i]))\n            if (i\
    \ == word.length - 1)\n                return \"\"\n            elsif (vowels.include?(word[i\
    \ + 1]))\n                return \"\"\n            else\n                return\
    \ word[i]\n            end\n        end\n    end\n    return \"\"\nend", "  closest_vowel\
    \ = \"\"\n  last_vowel = \"\"\n  word.chars.reverse.each do |char|\n    if is_vowel?(char)\n\
    \      last_vowel = char\n    else\n      if last_vowel.length > 0\n        closest_vowel\
    \ = last_vowel\n        break\n      end\n    end\n  end\n  closest_vowel\nend",
  "  vowels = \"aeiouAEIOU\"\n  i = 0\n  while i < word.length\n    if vowels.include?(word[i])\
    \ && vowels.include?(word[i+1])\n      i += 1\n    elsif vowels.include?(word[i])\
    \ && vowels.include?(word[i-1])\n      i += 1\n    elsif vowels.include?(word[i])\n\
    \      return word[i]\n    end\n    i += 1\n  end\n  \"\"\nend", "  #code here\n\
    end", "  word = word.reverse\n  vowel = \"aeiou\"\n  word.chars.each_with_index\
    \ do |char,index|\n    if vowel.include?(char) && index != word.length - 1 &&\
    \ !vowel.include?(word[index+1]) && !vowel.include?(word[index-1])\n      return\
    \ char\n    end\n  end\n  \"\"\nend", "    vowels = %w[a e i o u]\n    reverse_word\
    \ = word.reverse\n    result = ''\n    if word[0] == 'u'\n        result = word[0]\n\
    \    else\n        for i in 1..word.length\n            if vowels.include?(reverse_word[i])\n\
    \                result = reverse_word[i]\n                break\n           \
    \ end\n        end\n    end\n    result.reverse\nend", "\tword.split('').each_with_index\
    \ { |letter, i| return letter if letter =~ /[aeiou]/ && letter =~ /[^aeiou]/ }\n\
    \t''\nend", "  # your code here\n  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n  reversed_word = word.reverse\n  reversed_word.split(\"\").each_with_index\
    \ do |char, index|\n    if (vowels.include?(char) && (index + 1) < reversed_word.length)\
    \ && (!vowels.include?(reversed_word[index + 1]))\n      return char\n    end\n\
    \  end\n  return \"\"\nend", "\tvowels = word.scan(/[aeiou]/)\n\tvowels.reverse.each\
    \ do |vowel|\n\t\tif word.rindex(vowel) > word.rindex(/[^aeiou]/)\n\t\t\treturn\
    \ vowel\n\t\tend\n\tend\n\treturn \"\"\nend", "  word = word.chars\n  word.delete_if\
    \ { |char| char.match(/[AEIOUaeiou]/) }\n  word.empty? ? \"\" : word.join\nend",
  "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    index = word.length - 1\n\
    \    while index > 0\n        return word[index] if vowels.include?(word[index])\
    \ && !vowels.include?(word[index - 1])\n        index -= 1\n    end\n    \"\"\n\
    end", "  word.reverse.each_char.with_index do |c, i|\n    return c if \"aeiou\"\
    .include?(c) && !(word[-i-2] == nil || \"aeiou\".include?(word[-i-2]))\n  end\n\
    \  return \"\"\nend", "  word.reverse.gsub(/[^aeiouAEIOU]*/,'').reverse.chars.first\n\
    end", "\tsplit_word = word.split('')\n\tsplit_word.reverse.each_with_index do\
    \ |character, index|\n\t\tif character.match?(/[AaEeIiOoUu]/)\n\t\t\tif index\
    \ + 1 <= split_word.length && split_word[index + 1].match?(/[AaEeIiOoUu]/)\n\t\
    \t\t\treturn \"\"\n\t\t\telse\n\t\t\t\treturn character\n\t\t\tend\n\t\tend\n\t\
    end\n\treturn \"\"\nend", "  word.reverse.scan(/[^aeiou]+[aeiou][^aeiou]+/).map{|x|\
    \ x[x.index(/[aeiou]/)+1]}.first.to_s\nend", "  return \"\" if word.match(/^[^aeiou]*$/i)\
    \ || word.match(/^[aeiou]*$/i)\n  word.rindex(/[^aeiou][aeiou][^aeiou]/) ? word[word.rindex(/[^aeiou][aeiou][^aeiou]/),\
    \ 2][1] : \"\"\nend", "    result = \"\"\n    new_word = word.gsub(/[^aeiou]/i,\
    \ '')\n    new_word.split(\"\").each do |letter|\n        if word.index(letter)\
    \ > word.index(letter.upcase)\n            result = letter.upcase\n        else\n\
    \            result = letter\n        end\n    end\n    result\nend", "    vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    letters = word.split(\"\")\n    for\
    \ i in 0..letters.length\n        if vowels.include?(letters[i]) && !vowels.include?(letters[i-1])\
    \ && !vowels.include?(letters[i+1])\n            return letters[i]\n        end\n\
    \    end\n    return \"\"\nend", "  index = word.length - 1\n  while index > 0\
    \ do\n    if VOWELS.include?(word[index])\n      return word[index] if !VOWELS.include?(word[index\
    \ - 1])\n      break\n    end\n    index -= 1\n  end\n  return \"\"\nend", " \
    \   vowels = \"aeiou\"\n    word.chars.reverse.each_with_index do |el, idx|\n\
    \        if vowels.include?(el) && vowels.include?(word[-idx-2])\n           \
    \ return word[-idx-1]\n        end\n    end\n    \"\"\nend", "  vowels = %w(A\
    \ E I O U a e i o u)\n  if word.empty?\n    return \"\"\n  elsif word.length ==\
    \ 1\n    return \"\"\n  else\n    reverse_str = word.reverse\n    vowel_index\
    \ = nil\n    reverse_str.each_char.with_index do |letter, idx|\n      if vowels.include?(letter)\n\
    \        vowel_index = idx\n        break\n      end\n    end\n    if vowel_index.nil?\n\
    \      return \"\"\n    elsif vowel_index == 1\n      return \"\"\n    else\n\
    \      return reverse_str[vowel_index - 1]\n    end\n  end\nend", "  vowels =\
    \ \"aeiouAEIOU\"\n  closest_vowel = \"\"\n  word_array = word.split(\"\")\n  index\
    \ = -1\n  until word_array[index] == nil || vowels.include?(word_array[index])\n\
    \    index -= 1\n  end\n  closest_vowel = word_array[index]\n  return closest_vowel\n\
    end", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  word = word.chars\n \
    \ word.each do |x|\n    if x != word[0] && x != word[-1] && vowels.include?(x)\
    \ && \n    !vowels.include?(word[word.index(x) - 1]) && !vowels.include?(word[word.index(x)\
    \ + 1])\n      return x\n    end\n  end\n  return \"\"\nend", "  arr = word.split('')\n\
    \  index = []\n  arr.each_with_index do |char, i|\n    if /[aeiou]/ =~ char\n\
    \      index << i\n    end\n  end\n  min = arr.length + 1\n  index.each do |i|\n\
    \    if i > 0 && i < arr.length-1\n      min = i if arr[i+1] =~ /[^aeiou]/ &&\
    \ arr[i-1] =~ /[^aeiou]/ && i < min\n    end\n  end\n  min == arr.length + 1 ?\
    \ \"\" : arr[min]\nend", "  vowels = 'aeiou'\n  vowels.index(word.split('').reverse.each_cons(2).find\
    \ { |a, b| vowels.include?(a) && !vowels.include?(b) }.first)\nend", "\tvowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\tfound = \"\"\n\tword.reverse.each_char\
    \ do |char|\n\t\tif vowels.include?(char)\n\t\t\tfound << char\n\t\telsif !vowels.include?(char)\
    \ && found != \"\"\n\t\t\treturn found.reverse\n\t\tend\n\tend\n\treturn \"\"\n\
    end", "\tif word.size == 1\n\t\treturn \"\"\n\tend\n\tif word.size == 2\n\t\t\
    if (vowels.include?(word[0]) && vowels.include?(word[1])) || (consonants.include?(word[0])\
    \ && consonants.include?(word[1]))\n\t\t\treturn \"\"\n\t\tend\n\tend\n\tif vowels.include?(word[0])\n\
    \t\treturn \"\"\n\tend\n\tif consonants.include?(word[0])\n\t\ti = 1\n\t\twhile\
    \ (i < word.size - 1)\n\t\t\tif consonants.include?(word[i])\n\t\t\t\ti += 1\n\
    \t\t\telse\n\t\t\t\tif consonants.include?(word[i + 1])\n\t\t\t\t\treturn word[i]\n\
    \t\t\t\telse\n\t\t\t\t\ti += 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\treturn \"\
    \"\n\tend\nend", "    vowels = \"AEIOU\"\n    i = word.length-1\n    loop do\n\
    \        return word[i] if vowels.include?(word[i])\n        i -= 1\n        break\
    \ if i == 0\n    end\n    return \"\"\nend", "  word.reverse.scan(/([^aeiou])([aeiou])/).flatten.first\n\
    end", "\tif word == word.upcase\n\t\tword.gsub!(/[A-Z]/, \"A\" => \"A\", \"B\"\
    \ => \"B\", \"C\" => \"C\", \"D\" => \"D\", \"E\" => \"E\", \"F\" => \"F\", \"\
    G\" => \"G\", \"H\" => \"H\", \"I\" => \"I\", \"J\" => \"J\", \"K\" => \"K\",\
    \ \"L\" => \"L\", \"M\" => \"M\", \"N\" => \"N\", \"O\" => \"O\", \"P\" => \"\
    P\", \"Q\" => \"Q\", \"R\" => \"R\", \"S\" => \"S\", \"T\" => \"T\", \"U\" =>\
    \ \"U\", \"V\" => \"V\", \"W\" => \"W\", \"X\" => \"X\", \"Y\" => \"Y\", \"Z\"\
    \ => \"Z\")\n\telse \n\t\tword.gsub!(/[a-z]/, \"a\" => \"a\", \"b\" => \"b\",\
    \ \"c\" => \"c\", \"d\" => \"d\", \"e\" => \"e\", \"f\" => \"f\", \"g\" => \"\
    g\", \"h\" => \"h\", \"i\" => \"i\", \"j\" => \"j\", \"k\" => \"k\", \"l\" =>\
    \ \"l\", \"m\" => \"m\", \"n\" => \"n\", \"o\" => \"o\", \"p\" => \"p\", \"q\"\
    \ => \"q\", \"r\" => \"r\", \"s\" => \"s\", \"t\" => \"t\", \"u\" => \"u\", \"\
    v\" => \"v\", \"w\" => \"w\", \"x\" => \"x\", \"y\" => \"y\", \"z\" => \"z\")\n\
    \tend\n\tif word.include?(\"a\")\n\t\tif word.index(\"a\") == 0\n\t\t\treturn\
    \ \"\"\n\t\telse\n\t\t\tif word.split(\"a\")[-1].length == 0\n\t\t\t\treturn \"\
    \"\n\t\t\telse\n\t\t\t\tif word.split(\"a\")[-1].include?(\"A\")\n\t\t\t\t\treturn\
    \ \"a\"\n\t\t\t\telse\n", end, "  (word.split('').reverse).each_cons(3) do |x,\
    \ y, z|\n    if x =~ /[^AEIOUaeiou]/ && y =~ /[AEIOUaeiou]/ && z =~ /[^AEIOUaeiou]/\n\
    \      return y\n    end\n  end\n  return ''\nend", "    vowels = \"aeiou\"\n\
    \    word = word.split(\"\")\n    word.reverse!\n    word.each_with_index do |letter,\
    \ idx|\n        if vowels.include?(letter)\n            if (idx + 1 < word.length\
    \ && vowels.include?(word[idx + 1])) ||\n                idx + 1 == word.length\n\
    \                return letter\n            end\n        end\n    end\n    return\
    \ \"\"\nend", "  vowels = %w(A E I O U)\n  cons = ('A'..'Z').to_a.select { |letter|\
    \ !vowels.include?(letter) }", "  word = word.reverse\n  vowels = %w(a e i o u)\n\
    \  index = 0\n  word.each_char do |char|\n    if vowels.include?(char)\n     \
    \ if index < word.length - 1\n        if !vowels.include?(word[index + 1])\n \
    \         return char\n        end\n      end\n    end\n    index += 1\n  end\n\
    \  return \"\"\nend", "\tvowels = ['a', 'e', 'i', 'o', 'u']\n\tconsonants = []\n\
    \ti = 0\n\twhile i < word.length\n\t\tif vowels.include?(word[i])\n\t\t\tword.delete!(word[i])\n\
    \t\telse\n\t\t\tconsonants << word[i]\n\t\t\ti += 1\n\t\tend\n\tend\n\ti = 0\n\
    \twhile i < consonants.length - 1\n\t\tif vowels.include?(consonants[i] + consonants[i\
    \ + 1])\n\t\t\treturn consonants[i] + consonants[i + 1]\n\t\telse\n\t\t\ti +=\
    \ 1\n\t\tend\n\tend\n\t\"\"\nend\nputs \"get_closest_vowel(\\\"yogurt\\\") ==>\
    \ #{get_closest_vowel(\"yogurt\")}\"\nputs \"get_closest_vowel(\\\"FULL\\\") ==>\
    \ #{get_closest_vowel(\"FULL\")}\"\nputs \"get_closest_vowel(\\\"quick\\\") ==>\
    \ #{get_closest_vowel(\"quick\")}\"\nputs \"get_closest_vowel(\\\"ab\\\") ==>\
    \ #{get_closest_vowel(\"ab\")}\"", "\treturn \"\" if word.size == 1\n\tvowels\
    \ = %w(a e i o u)\n\tword = word.split(\"\")\n\t(word.size - 1).downto(1) do |i|\n\
    \t\tif vowels.include?(word[i])\n\t\t\tif word[i - 1] != \"a\" && word[i - 1]\
    \ != \"e\" && word[i - 1] != \"i\" && word[i - 1] != \"o\" && word[i - 1] != \"\
    u\"\n\t\t\t\tif !vowels.include?(word[i + 1])\n\t\t\t\t\treturn word[i]\n\t\t\t\
    \tend\n\t\t\tend\n\t\tend\n\tend\n\t\"\"\nend", "\tx = word.split('')\n\t\n\t\
    y = Array.new\n\tx.each {|i| \n\t\tif i =~/[aeiou]/\n\t\t\ty.push(i)\n\t\telse\n\
    \t\t\ty.push(0)\n\t\tend}\n\t\n\tz = Array.new\n\tw = Array.new\n\ty.each {|i|\
    \ \n\t\tif i == 0\n\t\t\tz.push(0)\n\t\telse\n\t\t\tz.push(1)\n\t\tend}\n\t\n\t\
    z.each_with_index {|i,index| \n\t\tif i == 1\n\t\t\tif (z[index - 1] == 0) &&\
    \ (z[index + 1] == 0)\n\t\t\t\tw.push(y[index])\n\t\t\tend\n\t\tend}\n\t\n\tw.sort!\n\
    \t\n\tif w.empty?\n\t\t\"\"\n\telse\n\t\tw[0]\n\tend\nend", "  vowels = \"aeiouAEIOU\"\
    \n  consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n  closest_vowel\
    \ = \"\"\n  if word.length == 1\n    return closest_vowel\n  end\n  idx = -1\n\
    \  while idx < 0\n    if vowels.include?(word[idx])\n      closest_vowel = word[idx]\n\
    \      return closest_vowel\n    elsif !consonants.include?(word[idx])\n     \
    \ idx -= 1\n    else\n      idx -= 1\n    end\n  end\n  return closest_vowel\n\
    end", "  last_vowel = []\n  word.reverse.split('').each_with_index do |letter,\
    \ index|\n    if /[aeiou]/i =~ letter\n      last_vowel << letter\n      next\n\
    \    end\n    break if last_vowel.size == 2\n  end\n  last_vowel.join('').reverse\n\
    end", "\tvowels = \"aeiouAEIOU\"\n\tletters = word.split(\"\")\n\tletters.each_with_index\
    \ do |letter, index|\n\t\tif index + 1 < letters.length\n\t\t\tletter_is_vowel\
    \ = vowels.include?(letter)\n\t\t\tnext_letter_is_vowel = vowels.include?(letters[index\
    \ + 1])\n\t\t\treturn letter if letter_is_vowel && !next_letter_is_vowel\n\t\t\
    end\n\tend\n\t\"\"\nend", "  word.reverse.each_char.with_index do |char, idx|\n\
    \    if idx == 0 and not 'aeiou'.include?(char)\n      return ''\n    elsif idx\
    \ == 0 and 'aeiou'.include?(char)\n      return char\n    end\n    if 'aeiou'.include?(char)\
    \ and not 'aeiou'.include?(word[-idx-2])\n      return char\n    end\n  end\n\
    \  return ''\nend", "  tmp = nil\n  word.reverse.chars.each do |w|\n    if w =~\
    \ /[aeiouAEIOU]/\n      tmp = w\n    elsif tmp\n      return tmp\n    end\n  end\n\
    \  \"\"\nend", "\tword.split('').reverse.each_with_index do |char, index|\n\t\t\
    if char.match(/[aeiou]/)\n\t\t\tif word[-1 - index + 1].match(/[^aeiou]/)\n\t\t\
    \t\treturn char\n\t\t\tend\n\t\tend\n\tend\n\t\"\"\nend", "    #puts word\n  \
    \  #find the consanants\n    consanants = \"bcdfghjklmnpqrstvwxyz\"\n    vowels\
    \ = \"aeiou\"\n    for i in (word.length-1).downto(0)\n        #puts \"word[i]=\
    \ #{word[i]}\"\n        if consanants.include?(word[i])\n            #puts \"\
    found a consanant\"\n            break\n        end\n    end\n    #puts \"I =\
    \ #{i}\"\n    vowel_distance = Hash.new\n    if i > 1\n        for j in (i-1).downto(0)\n\
    \            #puts \"word[j]= #{word[j]}\"\n            if vowels.include?(word[j])\n\
    \                #puts \"found a vowel\"\n                vowel_distance.store(word[j],\
    \ i-j)\n            end\n        end\n        #puts vowel_distance\n        smallest_distance\
    \ = vowel_distance.values.min\n        if smallest_distance != nil\n         \
    \   return vowel_distance.key(smallest_distance)\n        else\n            return\
    \ \"\"\n        end\n    else\n        return \"\"\n    end\nend", "  vowels =\
    \ %w[a e i o u A E I O U]\n  cons = ('a'..'z').to_a - vowels\n  word.reverse.split('').each_with_index\
    \ do |v, i|\n    return v if i.odd? && vowels.include?(v) && cons.include?(word[i-1])\n\
    \  end\n  ''\nend", "  # your code here\nend", "\tvowels = %w(a e i o u A E I\
    \ O U)\n\tcounter = -1\n\twhile counter > -(word.length)\n\t\tif vowels.include?(word[counter])\
    \ && !vowels.include?(word[counter - 1]) && !vowels.include?(word[counter + 1])\n\
    \t\t\treturn word[counter]\n\t\tend\n\t\tcounter -= 1\n\tend\n\t\"\"\nend", " \
    \   # your code here\nend", "\tvowels = \"AEIOUaeiou\"\n\tconsonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n\tarray = word.split(\"\")\n\tif array.count(vowels) < 2\n\t\treturn \"\"\n\t\
    else\n\t\tarray.each_with_index do |x, index|\n\t\t\tif (vowels.include?(x) &&\
    \ consonants.include?(array[index-1]) && consonants.include?(array[index+1]))\n\
    \t\t\t\tputs x\n\t\t\tend\n\t\tend\n\tend\nend\nputs get_closest_vowel(\"FULL\"\
    )", "    # Take the word, split it, reverse it, and loop through it.\n    # When\
    \ you get to a consonant, check to see if the next value is a vowel.\n    # If\
    \ it is, return that vowel.\n    # If the value is a consonant or the end of the\
    \ array, then loop through the next time.\n    # Make sure to return empty string\
    \ if no vowels are found.\n    if word.length == 1\n        puts \"\"\n    else\n\
    \        i = 0\n        not_found = true\n        arr = word.split(\"\").reverse\n\
    \        while i < arr.length - 1 && not_found\n            if \"bcdfghjklmnpqrstvwxyz\"\
    .include?(arr[i])\n                if \"aeiou\".include?(arr[i + 1])\n       \
    \             puts arr[i + 1]\n                    not_found = false\n       \
    \         end\n            end\n            i += 1\n        end\n        if not_found\n\
    \            puts \"\"\n        end\n    end\nend", "    cons = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z']\n\
    \    vowels = ['a','e','i','o','u']\n    #check if a word has vowels\n    if !word.include?('a')\
    \ && !word.include?('e') && !word.include?('i') && !word.include?('o') && !word.include?('u')\n\
    \        return \"\"\n    end\n    # check if vowels are at the beginning or end\n\
    \    if word[0] =~ /[aeiou]/ || word[-1] =~ /[aeiou]/\n        return \"\"\n \
    \   end\n    # parse the string from the right\n    for i in word.length-1..0\n\
    \        if word[i] =~ /[aeiou]/\n            if cons.include?(word[i+1]) && cons.include?(word[i-1])\n\
    \                return word[i]\n            end\n        end\n    end\nend",
  "  vowels = 'aeiou'\n  word.reverse.each_char.with_index do |c, i|\n    if vowels.include?(c)\n\
    \      next_char = word[-i-2]\n      if next_char && !vowels.include?(next_char)\n\
    \        return c\n      end\n    end\n  end\n  return ''\nend", "    i = word.length\
    \ - 1\n    while i > 0\n        if word[i] =~ /[aeiou]/\n            return word[i]\n\
    \        elsif word[i] =~ /[^aeiou]/ && word[i-1] =~ /[^aeiou]/\n            i\
    \ -= 1\n        elsif word[i] =~ /[^aeiou]/ && word[i-1] =~ /[aeiou]/\n      \
    \      return \"\"\n        end\n    end\n    return \"\"\nend", "  vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n  l = word.length\n  res = \"\"\n  word.split(\"\
    \").each_with_index do |s, index|\n    if vowels.include?(s)\n      return s if\
    \ index < l-1 && vowels.include?(word[index-1]) && vowels.include?(word[index+1])\
    \ \n    end\n  end\n  return res\nend", "  #YOUR CODE HERE\nend", "  vowel_hash\
    \ = {'a' => 1, 'e' => 1, 'i' => 1, 'o' => 1, 'u' => 1}\n  my_arr = word.split('')\n\
    \  num_of_consonants = 0\n  closest_vowel = \"\"\n  current_idx = my_arr.length\
    \ - 1\n  while current_idx >= 0\n    if vowel_hash[my_arr[current_idx]]\n    \
    \  if num_of_consonants >= 2\n        closest_vowel = my_arr[current_idx]\n  \
    \      break\n      end\n      num_of_consonants = 0\n    else\n      num_of_consonants\
    \ += 1\n    end\n    current_idx -= 1\n  end\n  closest_vowel\nend", "  vowels\
    \ = %w(a e i o u)\n  answer = ''\n  (word.length - 1).downto(0) do |i|\n    if\
    \ !vowels.include?(word[i]) && vowels.include?(word[i - 1])\n      answer = word[i\
    \ - 1]\n      break\n    end\n  end\n  answer\nend", "    vowels = ['a', 'e',\
    \ 'i', 'o', 'u']\n    cons = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n    word.split('').each_with_index\
    \ do |char, i|\n        if cons.include?(char) && vowels.include?(word[i + 1])\n\
    \            return word[i + 1]\n        end\n    end\n    return ''\nend", " \
    \   s = []\n    r = \"\"\n    word.each_char do |char|\n        if is_vowel(char)\n\
    \            s.push(char)\n        end\n    end\n    r = s.last\n    r\nend",
  "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in (word.length - 1).downto(0)\n\
    \        if vowels.include?(word[i]) && vowels.include?(word[i - 1])\n       \
    \     return word[i]\n        end\n    end\n    return \"\"\nend", "  word = word.reverse\n\
    \  vowels = %w(a e i o u)\n  result = []\n  word.each_char.with_index do |letter,\
    \ index|\n    result << index if vowels.include?(letter) && !vowels.include?(word[index\
    \ + 1]) && !vowels.include?(word[index - 1])\n  end\n  result.empty? ? '' : word[result.first]\n\
    end", "  return \"\" if word.scan(/[aeiou]/).empty?\n  vowel_positions = word.split(\"\
    \").each_with_index.map{|letter, index| index if letter =~ /[aeiou]/}.compact\n\
    \  vowel_positions.each do |vowel_position|\n    next if vowel_position == 0 ||\
    \ vowel_position == (word.length - 1)\n    if word[vowel_position - 1] =~ /[^aeiou]/\
    \ && word[vowel_position + 1] =~ /[^aeiou]/\n      return word[vowel_position]\n\
    \    end\n  end\n  \"\"\nend", "    vowels = \"aeiou\"\n    found = \"none\"\n\
    \    reverse_word = word.reverse\n    reverse_word.split(\"\").each_with_index\
    \ do |char, index|\n        if vowels.include?(char) && reverse_word[index + 1]\
    \ != \" \" && reverse_word[index - 1] != \" \"\n            found = char\n   \
    \         break\n        end\n    end\n    if found == \"none\"\n        return\
    \ \"\"\n    else\n        return found\n    end\nend\nputs get_closest_vowel(\"\
    yogurt\")\nputs get_closest_vowel(\"FULL\")\nputs get_closest_vowel(\"quick\"\
    )\nputs get_closest_vowel(\"ab\")", "  vowels = %w(A E I O U a e i o u)\n  chars\
    \ = word.split('')\n  for i in (0..chars.length-1)\n    if vowels.include?(chars[i])\n\
    \      return chars[i] if vowels.include?(chars[i-1]) && vowels.include?(chars[i+1])\n\
    \    end\n  end\n  return \"\"\nend", "  word.reverse.scan(/[^aeiou]*[aeiou][^aeiou]*/).first.scan(/[aeiou]/).first\n\
    end", "\tvowels = \"aeiouAEIOU\"\n\tvowel = \"\"\n\tletters = word.split(\"\"\
    )\n\tletters.each_with_index do |letter, index|\n\t\tif vowels.include?(letter)\n\
    \t\t\tif index > 0 && index < letters.length - 1\n\t\t\t\tif !vowels.include?(letters[index\
    \ - 1]) && !vowels.include?(letters[index + 1])\n\t\t\t\t\tvowel = letter\n\t\t\
    \t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn vowel\nend", "  word = word.reverse\n\
    \  vowel = \"aeiouAEIOU\"\n  cons = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n  length = word.length\n  for i in 0..length-1\n    if vowel.include?(word[i])\n\
    \      for j in 0..i-1\n        if cons.include?(word[j])\n          for k in\
    \ 0..j-1\n            if cons.include?(word[k])\n              return word[i]\n\
    \            end\n          end\n        end\n      end\n    end\n  end\n  return\
    \ \"\"\nend", "  (\"a\"..\"z\").include?(word[-1]) ? word = word[0..-2] : word\n\
    \  (\"a\"..\"z\").include?(word[0]) ? word = word[1..-1] : word\n  return \"\"\
    \ if word.empty?\n  i = word.length - 1\n  while i > 0\n    return word[i] if\
    \ %w[a e i o u].include?(word[i]) && !%w[a e i o u].include?(word[i-1])\n    i\
    \ -= 1\n  end\n  \"\"\nend", "  alpha = ('a'..'z').to_a\n  vowels = %w(a e i o\
    \ u)\n  consonants = alpha - vowels\n  word = word.split('')\n  c = []\n  v =\
    \ []\n  word.each_with_index do |letter,index|\n    if vowels.include?(letter)\n\
    \      v << index\n    elsif consonants.include?(letter)\n      c << index\n \
    \   end\n  end\n  closest = []\n  c.each do |consonant|\n    v.each do |vowel|\n\
    \      if vowel > consonant\n        closest << (vowel - consonant)\n      end\n\
    \    end\n  end\n  closest = closest.min\n  p word[c[0] + closest]\nend", "  word.reverse.match(/[b-df-hj-np-tv-z]*([aeiou])[b-df-hj-np-tv-z]*/).to_s.reverse\n\
    end", "  vowels = \"aeiou\"\n  i = word.length - 1\n  while i > 0\n    if vowels.include?(word[i])\
    \ && !vowels.include?(word[i-1])\n      return word[i]\n    end\n    i -= 1\n\
    \  end\n  return \"\"\nend", "    vowels = \"aeiou\"\n    for i in 0..word.length\n\
    \        if vowels.include?(word[-i])\n            if vowels.include?(word[-i+1])\n\
    \                return ''\n            elsif !vowels.include?(word[-i-1])\n \
    \               return word[-i]\n            end\n        end\n    end\n    return\
    \ ''\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do\
    \ |vowel|\n    if word.reverse.index(vowel) == nil\n      vowels.delete(vowel)\n\
    \    end\n  end\n  if vowels.length == 0\n    return \"\"\n  else\n    return\
    \ vowels.map {|vowel| word.reverse.index(vowel)}.sort.map {|index| vowels[index]}.first\n\
    \  end\nend", "  word.reverse.chars.each_cons(3) do |c1, c2, c3|\n    if c1 =~\
    \ /[aeiou]/\n      return c1\n    elsif c2 =~ /[aeiou]/\n      return c2\n   \
    \ elsif c3 =~ /[aeiou]/\n      return c3\n    end\n  end\n  \"\"\nend\nputs get_closest_vowel(\"\
    yogurt\") ==> \"u\"\nputs get_closest_vowel(\"FULL\") ==> \"U\"\nputs get_closest_vowel(\"\
    quick\") ==> \"\"\nputs get_closest_vowel(\"ab\") ==> \"\"", "  vowels = \"aeiou\"\
    \n  return \"\" if word.length == 1\n  (word.length-1).downto(1) do |i|\n    return\
    \ word[i] if vowels.include?(word[i]) && !vowels.include?(word[i-1])\n  end\n\
    \  \"\"\nend", "  vowels = ['a', 'e', 'i', 'o', 'u']\n  new_word = word.split('')\n\
    \  index = -1\n  until index.abs == new_word.length do\n    if new_word[index].match(/[a-zA-Z]/)\n\
    \      return new_word[index] if vowels.include?(new_word[index])\n    end\n \
    \   index -= 1\n  end\n  return ''\nend", "  vowels = \"aeiou\"\n  reversed_word\
    \ = word.reverse\n  (reversed_word.length-1).times do |i|\n    if vowels.include?(reversed_word[i])\
    \ && vowels.include?(reversed_word[i+1])\n      return reversed_word[i]\n    end\n\
    \  end\n  \"\"\nend", "  vowels = \"aeiou\"\n  word.chars.reverse.each_with_index\
    \ do |x,i|\n    if vowels.include?(x) \n      if word.chars.reverse[i+1] == nil\
    \ || word.chars.reverse[i+1] != word.chars.reverse[i-1]\n        return x\n  \
    \    end\n    end\n  end\n  return \"\"\nend", "  vowels = 'aeiouAEIOU'\n  consonents\
    \ = word.delete 'aeiouAEIOU'\n  vowels.each_char do |vowel|\n    return vowel\
    \ if word.reverse.index(vowel) < consonents.length\n  end\n  ''\nend", "  if word[-1]\
    \ == \"i\" || word[-1] == \"o\" || word[-1] == \"u\" || word[-1] == \"e\" || word[-1]\
    \ == \"a\"\n    word[-1]\n  elsif word[-2] == \"i\" || word[-2] == \"o\" || word[-2]\
    \ == \"u\" || word[-2] == \"e\" || word[-2] == \"a\"\n    word[-2]\n  elsif word[-3]\
    \ == \"i\" || word[-3] == \"o\" || word[-3] == \"u\" || word[-3] == \"e\" || word[-3]\
    \ == \"a\"\n    word[-3]\n  elsif word[-4] == \"i\" || word[-4] == \"o\" || word[-4]\
    \ == \"u\" || word[-4] == \"e\" || word[-4] == \"a\"\n    word[-4]\n  elsif word[-5]\
    \ == \"i\" || word[-5] == \"o\" || word[-5] == \"u\" || word[-5] == \"e\" || word[-5]\
    \ == \"a\"\n    word[-5]\n  elsif word[-6] == \"i\" || word[-6] == \"o\" || word[-6]\
    \ == \"u\" || word[-6] == \"e\" || word[-6] == \"a\"\n    word[-6]\n  else\n \
    \   \"\"\n  end\nend", "  vowels = \"aeiou\"\n  word.split(\"\").reverse.each_with_index\
    \ do |c, i|\n    if (vowels.include?(c) && word[(word.length - i - 2)] != nil\
    \ && vowels.include?(word[(word.length - i - 2)]) == false)\n      return c\n\
    \    end\n  end\n  return \"\"\nend", "    vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    if vowels.include?(word[word.length - 1])\n        return \"\"\n\
    \    end\n    if vowels.include?(word[word.length - 2])\n        return word[word.length\
    \ - 2]\n    end\n    if vowels.include?(word[word.length - 3])\n        return\
    \ word[word.length - 3]\n    end\n    return \"\"\nend", "  vowels = \"aeiou\"\
    \n  # Your code here\n  n = word.length - 1\n  m = word.length - 2\n  while n\
    \ > 0\n    if word[n] =~ /[aeiou]/ && word[m] =~ /[^aeiou]/\n      return word[n]\n\
    \    end\n    n -= 1\n    m -= 1\n  end\n  \"\"\nend", "    vowels = \"AEIOU\"\
    \n    word.reverse.each_char.with_index do |char, i|\n        return char if vowels.include?(char)\
    \ && vowels.include?(word[-i - 2])\n    end\n    \"\"\nend", "  vowels = %w(a\
    \ e i o u)\n  word.split('').reverse.each_with_index do |letter, index|\n    if\
    \ vowels.include?(letter)\n      next_letter = word.split('').reverse[index +\
    \ 1]\n      return letter if next_letter && !vowels.include?(next_letter)\n  \
    \  end\n  end\n  ''\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n \
    \ hash = {}\n  word.chars.each_with_index do |v, i|\n    hash[v] = i if vowels.include?(v)\n\
    \  end\n  if word.chars.last == \"y\"\n    \"y\"\n  elsif word.chars.last == \"\
    u\"\n    \"u\"\n  elsif word.chars.last == \"a\"\n    \"a\"\n  elsif word.chars.last\
    \ == \"i\"\n    \"i\"\n  elsif word.chars.last == \"e\"\n    \"e\"\n  elsif word.chars.last\
    \ == \"o\"\n    \"o\"\n  elsif word.chars.last == \"y\"\n    \"y\"\n  elsif word.chars.last\
    \ == \"A\"\n    \"A\"\n  elsif word.chars.last == \"I\"\n    \"I\"\n  elsif word.chars.last\
    \ == \"E\"\n    \"E\"\n  elsif word.chars.last == \"O\"\n    \"O\"\n  elsif word.chars.last\
    \ == \"U\"\n    \"U\"\n  elsif hash.values.last < hash.values.first \n    hash.keys.last\n\
    \  elsif hash.values.last > hash.values.first\n    hash.keys.first\n  end\nend",
  "  vowels = 'aeiou'\n  word.reverse.split('').map.with_index do |letter, i|\n  \
    \  if vowels.include?(letter)\n      next if word.size - i == 1\n      return\
    \ letter if !vowels.include?(word[-i-2])\n    end\n  end\n  ''\nend", "  i = word.length-1\n\
    \  a = [\"a\",\"e\",\"i\",\"o\",\"u\"]\n  while i > 0\n    if a.include?(word[i])\
    \ && !a.include?(word[i-1])\n      return word[i]\n    end\n    i -= 1\n  end\n\
    \  return \"\"\nend", "  # write your code here\nend", "  word = word.reverse\n\
    \  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  consonants = []\n  for i in\
    \ 0..word.length\n    if vowels.include?(word[i])\n      consonants << i\n   \
    \ end\n  end\n  for i in 0..consonants.length-2\n    if consonants[i] - consonants[i+1]\
    \ == 1\n      return word[consonants[i+1]].reverse\n    end\n  end\n  return \"\
    \"\nend\nputs \"-------Get Closest Vowel-------\"\nputs get_closest_vowel(\"yogurt\"\
    ) ==> \"u\"\nputs get_closest_vowel(\"FULL\") ==> \"U\"\nputs get_closest_vowel(\"\
    quick\") ==> \"\"\nputs get_closest_vowel(\"ab\") ==> \"\"", "  vowels = 'AEIOUaeiou'\n\
    \  prev = nil\n  word.split('').reverse.each do |c|\n    if vowels.include?(c)\n\
    \      return c if prev && !vowels.include?(prev)\n    else\n      prev = c\n\
    \    end\n  end\n  return ''\nend", "  #vowels = [\"a\", \"e\", \"i\", \"o\",\
    \ \"u\"]\n  #remove first and last char in array\n  #if first and last char are\
    \ vowels then return \"\"\n  #iterate on arr\n  #if arr[i] and arr[i-1] are vowels\
    \ then return \"\"\n  #if arr[i] and arr[i-1] are consonants then return arr[i]\n\
    \  #end\n  word_array = word.chars\n  vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n  word_array.shift\n  word_array.pop\n  word_array.each_with_index do |char,\
    \ index|\n    if vowels.include?(char) && vowels.include?(word_array[index - 1])\n\
    \      return \"\"\n    elsif !vowels.include?(char) && !vowels.include?(word_array[index\
    \ - 1])\n      return char\n    end\n  end\n  return \"\"\nend", "  vowels = \"\
    aeiou\"\n  p = word.reverse.index(/[^aeiou]/i)\n  p && word[word.length - p -\
    \ 1] && vowels.include?(word[word.length - p - 1]) ? word[word.length - p - 1]\
    \ : \"\"\nend\np get_closest_vowel(\"FULL\")", "  vowels = %w(a e i o u)\n  consonents\
    \ = %w(b c d f g h j k l m n p q r s t v w x y z)\n  characters = word.chars.map\
    \ { |character| vowels.include?(character) ? \"V\" : \"C\" }.join\n  index = characters.rindex(\"\
    VC\")\n  if index\n    word[index+1]\n  else\n    \"\"\n  end\nend", "    vowels\
    \ = %w[a e i o u]\n    word.chars.each_with_index.inject(\"\") do |result, (letter,\
    \ index)|\n        if vowels.include?(letter)\n            result = \"\"\n   \
    \     elsif vowels.include?(word[index - 1])\n            result = word[index\
    \ - 1]\n        elsif vowels.include?(word[index + 1])\n            result = word[index\
    \ + 1]\n        end\n        result\n    end\nend\np get_closest_vowel(\"yogurt\"\
    ) ==> \"u\"\np get_closest_vowel(\"FULL\") ==> \"U\"\np get_closest_vowel(\"quick\"\
    ) ==> \"\"\np get_closest_vowel(\"ab\") ==> \"\"", "  word.reverse.index(/[aeiou].*[aeiou]/)\n\
    end", "  word = word.split('')\n  word.each_with_index do |letter, idx|\n    if\
    \ letter.match(/[aieou]/) && word[idx + 1].match(/[aieou]/)\n      puts word[idx\
    \ - 1]\n    end\n  end\nend", "  # write your code here\n  word.reverse.split(/[aeiou]/).each_with_index\
    \ do |v,i|\n    return v.reverse[0] if i>0 && word.reverse[i] =~ /[aeiou]/i\n\
    \  end\n  return \"\"\nend", "  i = word.reverse.index(/[aeiou]/)\n  i ? word[-i-1]\
    \ : \"\"\nend", "  vowels = %w(a e i o u A E I O U)\n  # new_word = \"\"\n  i\
    \ = word.length-1\n  while i > 0\n    if vowels.include?(word[i]) && vowels.include?(word[i-1])\n\
    \      puts word[i]\n      return word[i]\n    end\n    i -= 1\n  end\n  return\
    \ \"\"\nend", "  vowel = \"aeiou\"\n  word = word.split(\"\")\n  vowel_loc = []\n\
    \  word.each_with_index do |letter, i|\n    if vowel.include?(letter)\n      vowel_loc\
    \ << i\n    end\n  end\n  if vowel_loc.length == 0\n    return \"\"\n  end\n \
    \ if word[vowel_loc[-1] + 1] != nil\n    if !vowel.include?(word[vowel_loc[-1]\
    \ + 1])\n      return word[vowel_loc[-1]]\n    else\n      return \"\"\n    end\n\
    \  else\n    return \"\"\n  end\nend", "\treturn '' if word.empty?\n\treturn ''\
    \ if word.length == 1\n\treturn '' if word[0].match(/[AEIOU]/)\n\treturn '' if\
    \ word[-1].match(/[AEIOU]/)\n\tword.reverse!\n\tfor i in 0..word.length - 1\n\t\
    \tif word[i].match(/[AEIOU]/)\n\t\t\tif word[i - 1].match(/[^AEIOU]/) && word[i\
    \ + 1].match(/[^AEIOU]/)\n\t\t\t\treturn word[i]\n\t\t\tend\n\t\tend\n\tend\n\t\
    ''\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  word.split(\"\").reverse.each_with_index\
    \ do |letter, index|\n    if vowels.include?(letter)\n      if index + 1 < word.length\n\
    \        if !vowels.include?(word[index + 1])\n          return letter\n     \
    \   end\n      end\n    end\n  end\n  return \"\"\nend", "    word.reverse.match(/[^aeiou][aeiou][^aeiou]|[^aeiou][aeiou]$/)\
    \ { |m| return m[1] }\n    return \"\"\nend", "    vowels = word.scan(/[aeiou]/)\n\
    \    return '' if vowels.empty?\n    cons = word.scan(/[^aeiou]/)\n    return\
    \ '' if vowels.length < cons.length + 1\n    vowels[cons.length]\nend", "  \n\
    \  vowels = %w[a e i o u]\n  consonants = %w[b c d f g h j k l m n p q r s t v\
    \ w x y z]\n  arr = word.split(\"\")\n  new_arr = []\n  arr.each do |letter|\n\
    \    if vowels.include?(letter) == true\n      new_arr << letter\n    end\n  end\n\
    \  if new_arr == []\n    return \"\"\n  end\n  new_arr = new_arr.reverse\n  arr\
    \ = arr.reverse\n  arr_with_indices = arr.each_with_index.to_a\n  new_arr_with_indices\
    \ = new_arr.each_with_index.to_a\n  result = new_arr_with_indices.detect do |e|\n\
    \    arr_with_indices.detect do |a|\n      if a[1] == e[1] - 1 || a[1] == e[1]\
    \ + 1\n        consonants.include?(a[0]) == true\n      end\n    end\n  end\n\
    \  if result == nil\n    return \"\"\n  end\n  return result[0]\nend", "  vowels\
    \ = %w(a e i o u)\n  for i in (word.length - 1).downto(0)\n    if vowels.include?(word[i])\n\
    \      return word[i]\n    end\n  end\n  \"\"\nend\nputs get_closest_vowel(\"\
    yogurt\") ==> \"u\"\nputs get_closest_vowel(\"FULL\") ==> \"U\"\nputs get_closest_vowel(\"\
    quick\") ==> \"\"\nputs get_closest_vowel(\"ab\") ==> \"\"", "    word.reverse.scan(/[^aeiou]+([aeiou])+[^aeiou]+/).flatten.first\
    \ || \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  cons = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n  cons_vowels\
    \ = []\n  word.split(\"\").each_with_index do |val, ind|\n    if vowels.include?(val)\n\
    \      if cons.include?(word[ind-1]) && cons.include?(word[ind+1])\n        cons_vowels\
    \ << val\n      end\n    end\n  end\n  if cons_vowels.length == 0\n    \"\"\n\
    \  else\n    return cons_vowels[-1]\n  end\nend", "  vowels = %w(a e i o u)\n\
    \  characters = word.chars.reverse", "  word = word.reverse\n  vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n  cons = (\"a\"..\"z\").to_a - vowels\n  cons.each\
    \ do |c|\n    if word.include?(c)\n      index = word.index(c)\n      if index\
    \ < word.length - 1\n        if vowels.include?(word[index + 1])\n          return\
    \ word[index + 1]\n        end\n      end\n    end\n  end\n  return \"\"\nend",
  "    word.reverse.match(/[b-df-hj-np-tv-z][aeiouy]/) ? word.reverse.match(/[b-df-hj-np-tv-z][aeiouy]/)[0][1]\
    \ : \"\"\nend", "  vowels = \"AEIOUaeiou\"\n  word.each_char.with_index do |char,\
    \ index|\n    if char.upcase == char && vowels.include?(char)\n      next_char\
    \ = word[index + 1]\n      if next_char && vowels.include?(next_char)\n      \
    \  return char\n      end\n    end\n  end\n  ''\nend", "  vowels = \"aeiou\"\n\
    \  word.reverse.each_char.with_index do |char, i|\n    if vowels.include?(char)\n\
    \      if i < word.length - 1\n        return char if !vowels.include?(word[-i\
    \ - 2])\n      end\n    end\n  end\n  \"\"\nend", "    vowels = \"AEIOUaeiou\"\
    \n    (word.length-1).downto(0) do |i|\n        return word[i] if vowels.include?(word[i])\
    \ && vowels.include?(word[i-1])\n    end\n    return \"\"\nend", "  # Start Code\n\
    \  word.reverse.each_char.with_index do |char, idx|\n    if char.match(/[aeiou]/)\n\
    \      closest_vowel = word[-idx-1]\n      return closest_vowel unless word[-idx].match(/[aeiou]/)\n\
    \    end\n  end\n  return \"\"\n  # End Code\nend", "  word.reverse.chars.each_cons(3).find\
    \ { |a, b, c| 'aeiou'.include?(b) && a != b && b != c }&.last || ''\nend", " \
    \ #your code here\nend", "  word.reverse.each_char.with_index do |char, index|\n\
    \    if \"AEIOU\".include?(char)\n      if index > 0 && index < word.length -\
    \ 1\n        return char if \"AEIOU\".include?(word[-index + 1]) && \"AEIOU\"\
    .include?(word[-index - 1])\n      end\n    end\n  end\n  return \"\"\nend", "\t\
    word = word.split(\"\")\n\tresult = []\n\tword.each_with_index do |letter, i|\n\
    \t\tif /[aeiouAEIOU]/.match(letter)\n\t\t\tif i != 0 && i != word.length - 1\n\
    \t\t\t\tif /[^aeiouAEIOU]/.match(word[i-1]) && /[^aeiouAEIOU]/.match(word[i+1])\n\
    \t\t\t\t\tresult << i\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\tif result.length\
    \ > 0\n\t\treturn word[result[-1]]\n\telse\n\t\treturn \"\"\n\tend\nend", "  word.gsub(/(\\\
    w)([aeiou])(\\w)/, '\\2')\nend\nputs get_closest_vowel(\"yogurt\") ==> \"u\"\n\
    puts get_closest_vowel(\"FULL\") ==> \"U\"\nputs get_closest_vowel(\"quick\")\
    \ ==> \"\"\nputs get_closest_vowel(\"ab\") ==> \"\"", "    vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]\n    word = word.split(\"\")\n    idx = word.length-1\n\
    \    last_vowel = \"\"\n    while idx > 0 do\n        if vowels.include?(word[idx])\n\
    \            last_vowel = word[idx]\n            break\n        end\n        idx\
    \ -= 1\n    end\n    if last_vowel != \"\"\n        idx = word.length-1\n    \
    \    while idx > 0 do\n            if vowels.include?(word[idx]) == false\n  \
    \              if vowels.include?(word[idx-1])\n                    return word[idx-1]\n\
    \                end\n            end\n            idx -= 1\n        end\n   \
    \ end\n    return \"\"\nend", "  letters = word.split('')\n  index = letters.size\
    \ - 1\n  while letters[index].match(/[^aeiou]/) && index > 0\n    index -= 1\n\
    \  end\n  if letters[index].match(/[aeiou]/)\n    index -= 1\n    while letters[index].match(/[^aeiou]/)\
    \ && index > 0\n      index -= 1\n    end\n    if letters[index].match(/[aeiou]/)\n\
    \      letters[index+1]\n    else\n      ''\n    end\n  else\n    ''\n  end\n\
    end", "    vowels = %w(a e i o u)\n    i = 0\n    res = []\n    while i < word.length\
    \ do\n        if vowels.include?(word[i])\n            if vowels.include?(word[i-1])\
    \ && vowels.include?(word[i+1])\n                res << word[i]\n            end\n\
    \        end\n        i += 1\n    end\n    return res.last\nend", "  # your code\
    \ goes here\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  answer =\
    \ \"\"\n  word.split(\"\").reverse.each_with_index do |letter, idx|\n    if vowels.include?(letter)\n\
    \      answer = letter\n      break\n    end\n  end\n  answer\nend", "  \nend",
  "\tword.reverse.each_char.with_index do |ch,i|\n\t\treturn word[-i-1] if \"AEIOUaeiou\"\
    .include?(ch)\n\tend\n\t\"\"\nend", "    return \"\" if word.scan(/[aeiou]/).empty?\n\
    \    vowels = word.scan(/[aeiou]/)\n    max = 0\n    word.chars.each_with_index\
    \ do |c, i|\n        if c == vowels.last\n            max = i\n            break\n\
    \        end\n    end\n    vowels[-2]\nend\nputs get_closest_vowel(\"yogurt\"\
    ) ==> \"u\"\nputs get_closest_vowel(\"FULL\") ==> \"U\"\nputs get_closest_vowel(\"\
    quick\") ==> \"\"\nputs get_closest_vowel(\"ab\") ==> \"\"\nputs get_closest_vowel(\"\
    magenta\") ==> \"a\"", "    return \"\" if word.size == 1\n    vowels = %w[a e\
    \ i o u]\n    for i in (word.size - 1).downto(1)\n        char = word[i]\n   \
    \     prev_char = word[i - 1]\n        if vowels.include?(char) && !vowels.include?(prev_char)\n\
    \            return char\n        end\n    end\n    \"\"\nend", "  \n  v1 = word.match(/[^aeiou][aeiou]\\\
    w*/).to_s[1]\n  v2 = word.match(/\\w*[aeiou][^aeiou]/).to_s[-2]\n  return v1 if\
    \ v1\n  return v2 if v2\n  return \"\"\nend", "  word.reverse.scan(/[^aeiou]*[aeiou]+/).first.chars.first\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
