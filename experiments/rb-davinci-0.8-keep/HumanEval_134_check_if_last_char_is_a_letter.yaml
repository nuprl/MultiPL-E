name: HumanEval_134_check_if_last_char_is_a_letter
language: rb
prompt: "# Create a function that returns True if the last character\n# of a given\
  \ string is an alphabetical character and is not\n# a part of a word, and False\
  \ otherwise.\n# Note: \"word\" is a group of characters separated by space.\n# Examples:\n\
  # check_if_last_char_is_a_letter(\"apple pie\") \u279E False\n# check_if_last_char_is_a_letter(\"\
  apple pi e\") \u279E True\n# check_if_last_char_is_a_letter(\"apple pi e \") \u279E\
  \ False\n# check_if_last_char_is_a_letter(\"\") \u279E False\ndef check_if_last_char_is_a_letter(txt)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_if_last_char_is_a_letter\n\
  \    candidate = method(:check_if_last_char_is_a_letter)\n    assert_equal(false,\
  \ candidate.call(\"apple\"))\n    assert_equal(true, candidate.call(\"apple pi e\"\
  ))\n    assert_equal(false, candidate.call(\"eeeee\"))\n    assert_equal(true, candidate.call(\"\
  A\"))\n    assert_equal(false, candidate.call(\"Pumpkin pie \"))\n    assert_equal(false,\
  \ candidate.call(\"Pumpkin pie 1\"))\n    assert_equal(false, candidate.call(\"\"\
  ))\n    assert_equal(false, candidate.call(\"eeeee e \"))\n    assert_equal(false,\
  \ candidate.call(\"apple pie\"))\n    assert_equal(false, candidate.call(\"apple\
  \ pi e \"))\n  end\nend\n"
completions: ["\t\nend", "    txt.chars.last.match?(/[A-Za-z]/) && !txt.chars.last.match?(/\\\
    S/)\nend", "    a=txt.split(\" \")\n     a[-1].split(\"\")[-1].match(/[a-zA-Z]/)\
    \ != nil\nend\nputs check_if_last_char_is_a_letter(\"apple pie\")", "  txt.split.last.to_s[-1].match(/[a-zA-Z]/)\
    \ && !txt.split.last.to_s[-1].match(/[A-Za-z]+/)\nend\np check_if_last_char_is_a_letter(\"\
    apple pie\")\np check_if_last_char_is_a_letter(\"apple pi e\")\np check_if_last_char_is_a_letter(\"\
    apple pi e \")\np check_if_last_char_is_a_letter(\"\")", "  if txt.empty?\n  \
    \  return false\n  elsif txt[-1] =~ /[[:alpha:]]/\n    if txt[-2] == \" \"\n \
    \     return true\n    else\n      return false\n    end\n  else\n    return false\n\
    \  end\nend", "    txt.match(/[a-zA-Z]\\s/) ? true : false\nend\np check_if_last_char_is_a_letter(\"\
    apple pie\")\np check_if_last_char_is_a_letter(\"apple pi e\")\np check_if_last_char_is_a_letter(\"\
    apple pi e \")\np check_if_last_char_is_a_letter(\"\")", "  txt.split.last[-1].ord\
    \ > 96 && txt.split.last[-1].ord < 123\nend\np check_if_last_char_is_a_letter(\"\
    \")", "\tif txt == \"\" || txt[-1] =~ /[^a-zA-Z]/ || txt[-2] =~ /[a-zA-Z]/\n\t\
    \treturn false\n\telse\n\t\treturn true\n\tend\nend", "  #I thought about this\
    \ one for a little bit and then tried the\n  #.split method and it worked perfectly.\n\
    \  txt_array = txt.split('')\n  txt_array[-1] == \" \" ? false : true\nend", " \
    \ txt.reverse.scan(/\\w/)[0] == txt.reverse.scan(/\\w/)[0].capitalize\nend", " \
    \ txt[-1].match(/[a-zA-Z]/) && !txt[-1].match(/\\w/)\nend", "  i = txt.length\
    \ - 1\n  while txt[i] == \" \" && i >= 0\n    i -= 1\n  end\n  if i < 0\n    false\n\
    \  else\n    /[[:alpha:]]/.match(txt[i]) && i == txt.length - 1\n  end\nend",
  "\treturn !txt.empty? && txt[-1] != \" \" && txt[-1] =~ /[a-zA-Z]/\nend\np check_if_last_char_is_a_letter(\"\
    apple pie\") == false\np check_if_last_char_is_a_letter(\"apple pi e\") == true\n\
    p check_if_last_char_is_a_letter(\"apple pi e \") == false\np check_if_last_char_is_a_letter(\"\
    \") == false\np check_if_last_char_is_a_letter(\" \") == false\np check_if_last_char_is_a_letter(\"\
    applepie\") == true\np check_if_last_char_is_a_letter(\"applep\") == true\np check_if_last_char_is_a_letter(\"\
    apple\") == true\np check_if_last_char_is_a_letter(\"appl\") == false\np check_if_last_char_is_a_letter(\"\
    app\") == false\np check_if_last_char_is_a_letter(\"ap\") == false\np check_if_last_char_is_a_letter(\"\
    a\") == true\np check_if_last_char_is_a_letter(\"\") == false", "  txt.split(\"\
    \ \").last[-1].match(/[a-zA-Z]/) ? true : false\nend", "  txt.split(\" \").each\
    \ do |x|\n    if x.chars.last == \" \"\n      return false\n    end\n  end\n \
    \ true\nend", "    if txt[-1].scan(/[A-Za-z]/).length == 1 and txt[-2].scan(/[A-Za-z]/).length\
    \ == 0 then\n        true\n    else\n        false\n    end\nend", "  txt[-1].match(/[a-zA-Z]/)\
    \ && !txt[-1].match(/\\w/)\nend", "  return txt.slice(-1).match(/[A-Za-z]/) &&\
    \ !txt.slice(-1).match(/\\s/)\nend", "  txt.split(/\\s+/).last.scan(/[a-zA-Z]/).empty?\
    \ ? false : true\nend", "    arr = txt.split(\" \")\n    last_str = arr[-1]\n\
    \    p last_str\n    i = last_str.length - 1\n    while last_str[i] =~ /[a-zA-Z]/\n\
    \        p i\n        if last_str[i] =~ /[a-zA-Z]/\n            return true\n\
    \        end\n        i -= 1\n    end\n    return false\nend", "\nend", "\tif\
    \ txt.length == 0\n\t\treturn false\n\telsif txt[-1].match(/[A-Za-z]/) == nil\n\
    \t\treturn false\n\telsif txt[-2].match(/[A-Za-z]/) != nil\n\t\treturn false\n\
    \telse\n\t\treturn true\n\tend\nend", "  if txt.size > 0\n    if txt[-1] =~ /[a-zA-Z]/\n\
    \      if txt[-2] =~ /\\s/\n        true\n      else\n        false\n      end\n\
    \    else\n      false\n    end\n  else\n    false\n  end\nend", "  if /[a-zA-Z]/.match(txt[-1])\
    \ && /\\s/ !~ txt[-2]\n    true\n  else\n    false\n  end\nend", "  txt.strip!\n\
    \  return true if txt[-1].match(/\\w/) && !txt[-2].match(/\\w/)\n  false\nend",
  "\tif txt.empty?\n\t\treturn false\n\tend\n\ttxt.split(\" \")[-1].reverse[0] =~\
    \ /\\A[a-zA-Z]\\z/ ? true : false\nend\np check_if_last_char_is_a_letter(\"apple\
    \ pie\")\np check_if_last_char_is_a_letter(\"apple pi e\")\np check_if_last_char_is_a_letter(\"\
    apple pi e \")\np check_if_last_char_is_a_letter(\"\")\np check_if_last_char_is_a_letter(\"\
    helo world\")", "  return true if /\\b[a-z]$/i =~ txt\n  false\nend", "\tif txt\
    \ == \"\"\n\t\tfalse\n\telsif txt[-1].match(/[a-zA-Z]/) and txt[-2].match(/[^a-zA-Z]/)\n\
    \t\ttrue\n\telse\n\t\tfalse\n\tend\nend\nputs check_if_last_char_is_a_letter(\"\
    apple pie\")\nputs check_if_last_char_is_a_letter(\"apple pi e\")\nputs check_if_last_char_is_a_letter(\"\
    apple pi e \")\nputs check_if_last_char_is_a_letter(\"\")", "  txt.rstrip.split('\
    \ ').last.chr.match(/\\w/).nil?\nend\np check_if_last_char_is_a_letter(\"apple\
    \ pie\")\np check_if_last_char_is_a_letter(\"apple pi e\")\np check_if_last_char_is_a_letter(\"\
    apple pi e \")\np check_if_last_char_is_a_letter(\"\")\np check_if_last_char_is_a_letter(\"\
    Hello, world\")\np check_if_last_char_is_a_letter(\"Hello, world:\")", "  return\
    \ txt.length < 2 ? false : txt[-1] == \" \" || !txt[-1].match(/[a-zA-Z]/) ? false\
    \ : true\nend\nputs check_if_last_char_is_a_letter(\"apple pie\")\nputs check_if_last_char_is_a_letter(\"\
    apple pi e\")\nputs check_if_last_char_is_a_letter(\"apple pi e \")\nputs check_if_last_char_is_a_letter(\"\
    \")", "\ttxt.split.last[-1].match(/[a-zA-Z]/) && !txt.include?(txt.split.last[-1])\n\
    end\nputs check_if_last_char_is_a_letter(\"apple pie\")\nputs check_if_last_char_is_a_letter(\"\
    apple pi e\")\nputs check_if_last_char_is_a_letter(\"apple pi e \")\nputs check_if_last_char_is_a_letter(\"\
    \")", "    if txt.match?(/[[:alpha:]]\\b$/)\n        return true\n    else\n \
    \       return false\n    end\nend", "  txt.length == 0 ? false : txt[-1].scan(/[a-zA-Z]/).any?\
    \ && !txt[-1].scan(/[a-zA-Z]/).empty? && !txt[-1].scan(/\\w/).any?\nend", "  \
    \  /\\b\\p{Alnum}$/.match(txt) != nil\nend", "  if /\\S/.match(txt[-1]) && /\\\
    s/.match(txt[-2])\n    return true\n  else\n    return false\n  end\nend\nputs\
    \ check_if_last_char_is_a_letter(\"apple pie\")\nputs check_if_last_char_is_a_letter(\"\
    apple pi e\")\nputs check_if_last_char_is_a_letter(\"apple pi e \")\nputs check_if_last_char_is_a_letter(\"\
    \")", "    txt[-1].match(/[A-Za-z]/) && !txt[-1].match(/[A-Za-z]/)\nend", "  \
    \  if txt.length > 0 and txt[-1] =~ /[a-zA-Z]/ and txt[-2] == \" \"\n        return\
    \ true\n    else\n        return false\n    end\nend", "  last_char = txt[-1]\n\
    \  if last_char.strip.empty?\n    false\n  elsif last_char =~ /[[:alpha:]]/\n\
    \    if last_char == \" \"\n      false\n    else\n      true\n    end\n  else\n\
    \    false\n  end\nend", "  return false if txt.empty?\n  last_char = txt[-1]\n\
    \  return false if last_char == ' '\n  return false if last_char == txt[-2]\n\
    \  last_char =~ /[a-zA-Z]/\nend", "  #puts txt.split(\" \").last\n  (txt.split(\"\
    \ \").last.split(\"\").last =~ /[a-zA-Z]/) ? true : false\nend", "    txt[-1]\
    \ != \" \" && txt[-1] =~ /[a-zA-Z]/ ? true : false\nend", "  # answer\n  return\
    \ nil if txt.empty?\n  alphabet = ('a'..'z').to_a\n  return false if txt[-1] ==\
    \ ' '\n  if alphabet.include?(txt[-1].downcase) && txt[-2] == ' '\n    true\n\
    \  else\n    false\n  end\nend", "    if txt[-1] =~ /[a-zA-Z]/ and !txt.end_with?('e')\n\
    \        return true\n    else\n        return false\n    end\nend\nputs check_if_last_char_is_a_letter(\"\
    apple pie\")\nputs check_if_last_char_is_a_letter(\"apple pi e\")\nputs check_if_last_char_is_a_letter(\"\
    apple pi e \")\nputs check_if_last_char_is_a_letter(\"\")", "  txt.split(' ').include?(txt[-1])\
    \ ? false : txt[-1].upcase.ord.between?(65, 90)\nend", "  txt[-1] =~ /[a-zA-Z]/\
    \ && !txt[-2].match?(/[a-zA-Z]/)\nend\nputs check_if_last_char_is_a_letter(\"\
    apple pie\")\nputs check_if_last_char_is_a_letter(\"apple pi e\")\nputs check_if_last_char_is_a_letter(\"\
    apple pi e \")\nputs check_if_last_char_is_a_letter(\"\")\nputs", "  return txt.slice(-1).match(/[a-zA-Z]/)\
    \ && txt.slice(-1).match(/\\s/) != nil\nend", "\ttxt[-1][/\\w/] ? false : true\n\
    end\ncheck_if_last_char_is_a_letter(\"apple pie\")\ncheck_if_last_char_is_a_letter(\"\
    apple pi e\")\ncheck_if_last_char_is_a_letter(\"apple pi e \")\ncheck_if_last_char_is_a_letter(\"\
    \")", "    txt[-1].upcase.match(/[A-Z]/) && txt[-2] != ' ' ? true : false\nend\n\
    puts check_if_last_char_is_a_letter(\"apple pie\")\nputs check_if_last_char_is_a_letter(\"\
    apple pi e\")\nputs check_if_last_char_is_a_letter(\"apple pi e \")\nputs check_if_last_char_is_a_letter(\"\
    \")\nputs \"-\" * 20", "  if txt.scan(/\\w$/).empty? && txt.scan(/\\s$/).empty?\n\
    \    return true\n  else\n    return false\n  end\nend\np check_if_last_char_is_a_letter(\"\
    apple pie\")\np check_if_last_char_is_a_letter(\"apple pi e\")\np check_if_last_char_is_a_letter(\"\
    apple pi e \")\np check_if_last_char_is_a_letter(\"\")", "    (txt[-1] =~ /[a-zA-Z]/)\
    \ && (txt[-2] == \" \")\nend", "    txt[-1] == ' ' ? false : true\nend\nputs check_if_last_char_is_a_letter(\"\
    apple pie\")", "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    idx = txt.length\
    \ - 1\n    while(idx >= 0 && txt[idx] == ' ')\n        idx -= 1\n    end\n   \
    \ if(idx < 0)\n        return false\n    end\n    alphabet.include?(txt[idx].downcase)\n\
    end\nputs check_if_last_char_is_a_letter(\"apple pie\") #\u279E False\nputs check_if_last_char_is_a_letter(\"\
    apple pi e\") #\u279E True\nputs check_if_last_char_is_a_letter(\"apple pi e \"\
    ) #\u279E False\nputs check_if_last_char_is_a_letter(\"\") #\u279E False", " \
    \ txt[-1] == \" \" ? false : true\nend\np check_if_last_char_is_a_letter(\"apple\
    \ pie\")\np check_if_last_char_is_a_letter(\"apple pi e\")\np check_if_last_char_is_a_letter(\"\
    apple pi e \")\np check_if_last_char_is_a_letter(\"\")", "\treturn false if txt.split.empty?\n\
    \t!(txt.split[-1] =~ /\\w/).nil? && txt[-1] =~ /\\W/\nend", "  return false if\
    \ txt.empty?\n  return true if txt[-1].match(/[a-zA-Z]/) && txt[-2].match(/\\\
    s/)\n  false\nend", "  txt.split(' ').last == '' ? false : !'a'.upto('z').include?(txt.split('\
    \ ').last)\nend", "\tif txt.empty?\n\t\tfalse\n\telsif txt[-1].match(/\\W/)\n\t\
    \tfalse\n\telse\n\t\ttrue\n\tend\nend", "  if txt == \"\"\n    return false\n\
    \  elsif txt[-1] == \" \"\n    return false\n  elsif txt[-1] =~ /[a-zA-Z]/\n \
    \   return true\n  else\n    return false\n  end\nend\nputs check_if_last_char_is_a_letter(\"\
    apple pie\")\nputs check_if_last_char_is_a_letter(\"apple pi e\")\nputs check_if_last_char_is_a_letter(\"\
    apple pi e \")\nputs check_if_last_char_is_a_letter(\"\")\nputs \"-\" * 20", "\t\
    if !txt.split(\" \").last.match(/[a-zA-Z]/)\n\t\treturn false\n\telse\n\t\treturn\
    \ true\n\tend\nend", "  txt.split(\" \").last.split(\"\").last.match(/[a-zA-Z]/)\
    \ && !txt.split(\" \").last.split(\"\").last.match(/[a-zA-Z][a-zA-Z]/)\nend",
  "    txt.empty? ? false : txt[-1].downcase =~ /[a-z]/ && txt[-2] =~ /[^a-z]/i\n\
    end", "  txt[-1] != \" \" && txt[-1] =~ /[a-zA-Z]/\nend\np check_if_last_char_is_a_letter(\"\
    apple pie\")\np check_if_last_char_is_a_letter(\"apple pi e\")\np check_if_last_char_is_a_letter(\"\
    apple pi e \")\np check_if_last_char_is_a_letter(\"\")", "\tif (txt.split(\"\"\
    ).last =~ /[a-zA-Z]/) && (txt.split(\" \").last.split(\"\").last != txt.split(\"\
    \").last)\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nputs check_if_last_char_is_a_letter(\"\
    apple pie\")\nputs check_if_last_char_is_a_letter(\"apple pi e\")\nputs check_if_last_char_is_a_letter(\"\
    apple pi e \")\nputs check_if_last_char_is_a_letter(\"\")", "  return txt.split(\"\
    \ \").last.split(\"\").last.match(/[a-zA-Z]/) != nil\nend\nputs check_if_last_char_is_a_letter(\"\
    apple pie\")", "  txt = txt.split(\" \")\n  txt.last.chars.last.match(/[a-zA-Z]/)\
    \ && txt.last.chars.length == 1\nend", "  txt.strip[-1] =~ /[a-zA-Z]/ && txt.strip[-1]\
    \ != \" \"\nend", "\tif txt[-1] == \" \"\n\t\treturn false\n\telse\n\t\ttrue\n\
    \tend\nend", "\ttxt[-1].match(/\\W/) != nil\nend\nputs check_if_last_char_is_a_letter(\"\
    apple pie\")\nputs check_if_last_char_is_a_letter(\"apple pi e\")\nputs check_if_last_char_is_a_letter(\"\
    apple pi e \")\nputs check_if_last_char_is_a_letter(\"\")", "    if txt.strip.empty?\n\
    \        false\n    elsif txt.strip[-1] != \" \"\n        true\n    else\n   \
    \     false\n    end\nend\nputs check_if_last_char_is_a_letter(\"apple pie\")\n\
    puts check_if_last_char_is_a_letter(\"apple pi e\")\nputs check_if_last_char_is_a_letter(\"\
    apple pi e \")\nputs check_if_last_char_is_a_letter(\"\")", "  return false if\
    \ txt.empty?\n  str = txt.strip.reverse\n  str[0] == str[0].downcase ? true :\
    \ false\nend", "  if txt.chop.split(\" \").last =~ /[a-zA-Z]/ && txt[-1] =~ /[^a-zA-Z]/\n\
    \    true\n  else\n    false\n  end\nend", "  txt[-1].match(/\\w/).nil?\nend",
  "\nend", "  last_char = txt[-1]\n  last_char.match(/[a-zA-Z]/) && !last_char.match(/\\\
    w/)\nend", "  if txt.empty?\n    false\n  elsif txt[-1] =~ /[a-zA-Z]/ && txt[-2]\
    \ =~ /\\s/\n    true\n  else\n    false\n  end\nend", "  txt.split.length <= 1\
    \ && txt[-1].match(/[a-zA-Z]/) ? true : false\nend", "\tif txt[-1].to_s.match?(/\\\
    w/) == true\n\t\tputs true\n\telse\n\t\tputs false\n\tend\nend\ncheck_if_last_char_is_a_letter(\"\
    pie e \")", "  txt.split('').reverse.find_index(/\\W+/)\nend", "  txt.split.length\
    \ == 0 ? false : txt.split[-1].length == 1 ? true : false\nend", "  return false\
    \ if txt.empty?\n  txt.split.last[-1].match?(/[a-zA-Z]/) && txt[-1].match?(/\\\
    W/)\nend", "    txt.split.last[-1] =~ /[a-zA-Z]/ && txt.split.last[-1] != ' '\n\
    end", "  array = txt.split('')\n  if array[-1] =~ /[a-zA-Z]/ && array[-2] != '\
    \ '\n    true\n  else\n    false\n  end\nend", "  last_letter = txt.split(\" \"\
    ).last\n  return last_letter.length == 1 && !!(last_letter =~ /[[:alpha:]]/)\n\
    end", "  if txt[-1].match(/[a-zA-Z]/) && !txt[-1].match(/[a-zA-Z][^\\s]/)\n  \
    \  return true\n  else\n    return false\n  end\nend", "\tif txt[-1] =~ /[a-zA-Z]/\
    \ && txt[-1] != /\\w/\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
  "    txt.strip.scan(/[a-z]\\b/i).any?\nend\np check_if_last_char_is_a_letter(\"\
    apple pie\")\np check_if_last_char_is_a_letter(\"apple pi e\")\np check_if_last_char_is_a_letter(\"\
    apple pi e \")\np check_if_last_char_is_a_letter(\"\")", "  # return true if there\
    \ is no letter in the string\n  # return false if the last letter is not an alphabetical\
    \ letter\n  return false if !('a'..'z').include?(txt[-1])\n  # create a counter\n\
    \  # create an array of words\n  words = txt.split(' ')\n  # loop through the\
    \ word array\n  words.each_with_index do |word, index|\n    # if it's the last\
    \ word\n    if index == words.length - 1\n      # check if the last letter is\
    \ an alphabetical letter\n      return false if !('a'..'z').include?(word[-1])\n\
    \    end\n  end\n  # return true if the last letter is an alphabetical letter\n\
    \  true\nend\nputs check_if_last_char_is_a_letter(\"apple pie\") # false\nputs\
    \ check_if_last_char_is_a_letter(\"apple pi e\") # true\nputs check_if_last_char_is_a_letter(\"\
    apple pi e \") # false\nputs check_if_last_char_is_a_letter(\"\") # false\nputs\
    \ check_if_last_char_is_a_letter(\"OddChar\") # true\nputs '-----'", "  return\
    \ true if txt[-1] =~ /[a-zA-Z]/ && !txt[-2] =~ /[a-zA-Z]/\n  false\nend\np check_if_last_char_is_a_letter(\"\
    apple pie\")\np check_if_last_char_is_a_letter(\"apple pi e\")\np check_if_last_char_is_a_letter(\"\
    apple pi e \")\np check_if_last_char_is_a_letter(\"\")", "  if txt[-1] =~ /[a-zA-Z]/\
    \ && txt[-1] != \" \"\n    true\n  else\n    false\n  end\nend", "    char=txt.split(\"\
    \ \").last\n    puts char.match(/^[a-zA-Z]*$/)\nend", "    # check if txt is empty\n\
    \    if txt.length == 0\n        return false\n    end\n    #check if the last\
    \ char is alphabetical\n    if txt[-1].match(/[a-zA-Z]/) && !txt[-1].match(/\\\
    w/)\n        return true\n    else\n        return false\n    end\nend\nputs check_if_last_char_is_a_letter(\"\
    apple pie\")\nputs check_if_last_char_is_a_letter(\"apple pi e\")\nputs check_if_last_char_is_a_letter(\"\
    apple pi e \")\nputs check_if_last_char_is_a_letter(\"\")", "  txt.split('').last\
    \ =~ /[a-zA-Z]/ && txt.split('').last =~ /[^\\s]/ ? true : false\nend", "\tlast_char\
    \ = txt[-1]\n\tlast_char.match(/[A-Za-z]/) && !txt.split(\" \").last.include?(last_char)\n\
    end", "    a = txt.split(/\\W/)\n    p a[-1][-1]\nend\ncheck_if_last_char_is_a_letter(\"\
    apple pie\")", "\treturn txt.split(\" \").last.gsub(/\\s+/, \"\").match(/^[a-zA-Z]$/)\
    \ ? true : false\nend", "  txt.split(\" \").last.match?(/[a-zA-Z]/) && txt.match?(/[a-zA-Z]\\\
    z/)\nend\nputs check_if_last_char_is_a_letter(\"apple pie\") #\u279E False\nputs\
    \ check_if_last_char_is_a_letter(\"apple pi e\") #\u279E True\nputs check_if_last_char_is_a_letter(\"\
    apple pi e \") #\u279E False\nputs check_if_last_char_is_a_letter(\"\") #\u279E\
    \ False\nputs \"-\" * 20", "  txt[-1] =~ /[A-Za-z]/ && txt[-1] != txt[-2]\nend",
  "  if txt.length == 0\n    false\n  elsif txt[-1] =~ /[a-zA-Z]/ && !txt[-1] =~ /\\\
    s/\n    true\n  else\n    false\n  end\nend", "\tif txt.strip.empty? then return\
    \ false end\n\tif txt.split(\" \").last.strip.empty? then return false end\n\t\
    txt.split(\" \").last.strip[-1].match(/[a-zA-Z]/) ? true : false\nend", "\tif\
    \ txt.empty? || txt.split('').last.match(/\\s/)\n\t\treturn false\n\telse\n\t\t\
    return true\n\tend\nend\nputs check_if_last_char_is_a_letter(\"apple pie\")\n\
    puts check_if_last_char_is_a_letter(\"apple pi e\")\nputs check_if_last_char_is_a_letter(\"\
    apple pi e \")\nputs check_if_last_char_is_a_letter(\"\")\nputs \"-\" * 15", " \
    \ if txt.end_with?(\"e\") && txt.split(\" \").length > 1\n    return true\n  else\n\
    \    return false\n  end\nend\np check_if_last_char_is_a_letter(\"apple pie\"\
    ) # \u279E False\np check_if_last_char_is_a_letter(\"apple pi e\") # \u279E True\n\
    p check_if_last_char_is_a_letter(\"apple pi e \") # \u279E False\np check_if_last_char_is_a_letter(\"\
    \") # \u279E False", "  txt.chars.last =~ /[a-zA-Z]/ && txt.chars.last != ' '\n\
    end", "  return true if (txt[-1] =~ /[a-zA-Z]/) && !(txt[-1] =~ /\\w/)\n  false\n\
    end", "  if txt.split(\" \").empty? || txt.split(\" \").last.empty?\n    return\
    \ false\n  else\n    return txt.split(\" \").last.split(\"\").last =~ /[a-zA-Z]/\
    \ ? true : false\n  end\nend", "  txt.split(\" \").last[-1].match(/[a-zA-Z]/)\
    \ ? true : false\nend\np check_if_last_char_is_a_letter(\"apple pie\") == false\n\
    p check_if_last_char_is_a_letter(\"apple pi e\") == true\np check_if_last_char_is_a_letter(\"\
    apple pi e \") == false\np check_if_last_char_is_a_letter(\"\") == false", " \
    \ txt[-1] == \"\" || txt[-1] =~ /[a-zA-Z]/ && !txt.split(\" \").last.include?(txt[-1])\n\
    end", "  txt[-1].match(/[a-zA-Z]/) && !txt[-1].match(/\\w/)\nend", "  if txt.length\
    \ == 0\n    return false\n  end\n  txt_no_space = txt.strip\n  txt_no_space[-1].match(/[a-zA-Z]/)\
    \ ? true : false\nend", "    # txt.split(\" \").last.split(\"\").last\n    # txt.chars.last\n\
    \    txt.split(\" \").last.chars.last.match?(/[a-zA-Z]/)\nend\np check_if_last_char_is_a_letter(\"\
    apple pie\") #\u279E False\np check_if_last_char_is_a_letter(\"apple pi e\") #\u279E\
    \ True\np check_if_last_char_is_a_letter(\"apple pi e \") #\u279E False\np check_if_last_char_is_a_letter(\"\
    \") #\u279E False", "  if txt[-1] =~ /[a-zA-Z]/\n    return true\n  else\n   \
    \ return false\n  end\nend\nputs check_if_last_char_is_a_letter(\"apple pie\"\
    )\nputs check_if_last_char_is_a_letter(\"apple pi e\")\nputs check_if_last_char_is_a_letter(\"\
    apple pi e \")\nputs check_if_last_char_is_a_letter(\"\")", "  arr=txt.split(\"\
    \ \")\n  arr.last.each_char do |char|\n    if char==char.downcase || char==char.upcase\n\
    \      return true\n    end\n  end\n  return false\nend\nputs check_if_last_char_is_a_letter(\"\
    apple pie\") #\u279E False\nputs check_if_last_char_is_a_letter(\"apple pi e\"\
    ) #\u279E True\nputs check_if_last_char_is_a_letter(\"apple pi e \") #\u279E False\n\
    puts check_if_last_char_is_a_letter(\"\") #\u279E False", "  txt.split(\" \").last[-1]\
    \ != \" \" && txt.split(\" \").last[-1] != \"_\" ? true : false\nend", "    return\
    \ txt[-1] =~ /[a-zA-Z]/ && txt.split(\" \")[-1][-1] != txt[-1]\nend\np check_if_last_char_is_a_letter(\"\
    apple pie\")\np check_if_last_char_is_a_letter(\"apple pi e\")\np check_if_last_char_is_a_letter(\"\
    apple pi e \")\np check_if_last_char_is_a_letter(\"\")", "  txt.split.last[-1].match(/[a-zA-Z]/)\
    \ && !txt.end_with?(' ')\nend\nputs check_if_last_char_is_a_letter(\"apple pie\"\
    )\nputs check_if_last_char_is_a_letter(\"apple pi e\")\nputs check_if_last_char_is_a_letter(\"\
    apple pi e \")\nputs check_if_last_char_is_a_letter(\"\")\nputs check_if_last_char_is_a_letter(\"\
    a\")\nputs check_if_last_char_is_a_letter(\"ab \")\nputs check_if_last_char_is_a_letter(\"\
    a b \")\nputs check_if_last_char_is_a_letter(\"  \")\nputs check_if_last_char_is_a_letter(\"\
    \  a \")", "  txt.gsub(/\\s+/,'').reverse.match(/\\w/) ? true : false\nend", " \
    \ if txt.empty?\n    false\n  elsif txt[-1] =~ /[a-zA-Z]/ && txt[-2] != \" \"\n\
    \    false\n  else\n    true\n  end\nend", "\t# txt.split(\" \")[-1].to_s.match?(/\\\
    w/)\n\t# txt.split(\" \")[-1].to_s.match?(/\\w+/)\n\ttxt.split(\" \")[-1].to_s.match?(/\\\
    w+/) ? false : true\nend", "\tif txt.empty?\n\t\treturn false\n\tend\n\tif txt[-1]\
    \ =~ /[a-zA-Z]/\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend", "  return\
    \ false if txt.empty?\n  words = txt.split(\" \")\n  last_char = words[-1][-1]\n\
    \  return false if words[-1].empty?\n  return false if last_char == \" \"\n  last_char.match?(/[a-zA-Z]/)\n\
    end", "  return false if txt.empty?\n  txt.split(\" \").last.chars.last =~ /[a-zA-Z]/\
    \ ? true : false\nend", "  txt.split.last[-1] =~ /[a-zA-Z]/\nend", "  return txt.split(\"\
    \ \").last.chars.last.match(/[a-zA-Z]/)\nend", "  txt = txt.gsub(\" \", \"\")\n\
    \  txt[-1].ord.between?(65, 90) || txt[-1].ord.between?(97, 122) ? true : false\n\
    end", "    return txt[-1] =~ /[a-zA-Z]/ && txt[-1] != ' ' && txt[-2] == ' '\n\
    end", "  array = txt.split('')\n  array.length == 0 ? false : (array[-1] =~ /[[:alpha:]]/)\
    \ && (array[-2] =~ /[[:space:]]/)\nend", "  txt = txt.chars.join.split(\" \")\n\
    \  txt.last[-1].match(/[a-zA-Z]/) && !txt.last[-1].match(/[a-zA-Z]+/)\nend", '  return
    false if txt.length < 1', "  txt.chars.last == \" \" ? false : true\nend", " \
    \ l = txt.split(/\\s/).pop\n  return false if l.empty?\n  l[-1] =~ /[a-zA-Z]/\
    \ && !(l =~ /[a-zA-Z]/ && l =~ /[a-zA-Z]/ && l =~ /[a-zA-Z]/)\nend", "  txt[-1].match(/[a-zA-Z]/)\
    \ && txt[-1].match(/\\s/)\nend", "\tif txt.length > 0\n\t\tif ( /^[A-Za-z]*$/\
    \ =~ txt[-1] ) && (txt[-2] == \" \")\n\t\t\treturn true\n\t\telse\n\t\t\treturn\
    \ false\n\t\tend\n\telse\n\t\treturn false\n\tend\nend\np check_if_last_char_is_a_letter(\"\
    apple pie\") \np check_if_last_char_is_a_letter(\"apple pi e\") \np check_if_last_char_is_a_letter(\"\
    apple pi e \") \np check_if_last_char_is_a_letter(\"\") \np check_if_last_char_is_a_letter(\"\
    app le pi e \") ", "  if (txt[-1].match(/\\w/)) && !(txt[-1].match(/\\s/))\n \
    \   return true\n  else\n    return false\n  end\nend", "  # str = txt.split(\"\
    \ \")\n  # len = str.length\n  # len == str[len-1].length ? false : true\n  #\
    \ len == str[len-1].length ? false : true\n  txt[-1] == \" \" ? false : true\n\
    end\np check_if_last_char_is_a_letter(\"apple pie\")\np check_if_last_char_is_a_letter(\"\
    apple pi e\")\np check_if_last_char_is_a_letter(\"apple pi e \")\np check_if_last_char_is_a_letter(\"\
    \")", "\tif txt.length == 0\n\t\treturn false\n\telsif txt[-1] =~ /[a-zA-Z]/\n\
    \t\treturn true\n\telse\n\t\treturn false\n\tend\nend", "  return false if txt.empty?\n\
    \  txt[-1] =~ /[a-zA-Z]/ && txt[-2] =~ /\\s/\nend", "  txt.empty? || txt.last\
    \ =~ /[a-z]/i && txt[-2] =~ /\\s/\nend", "    txt.split(' ').map { |w| w[-1] }.join.split('').map\
    \ { |l| l.match(/[a-zA-Z]/) }.count(nil) < 1\nend", "\nend", "  return false if\
    \ txt.empty?\n  txt.split.last[-1] != txt.split.last[-1].downcase || txt.split.last[-1]\
    \ != txt.split.last[-1].upcase\nend\np check_if_last_char_is_a_letter(\"apple\
    \ pie\")\np check_if_last_char_is_a_letter(\"apple pi e\")\np check_if_last_char_is_a_letter(\"\
    apple pi e \")\np check_if_last_char_is_a_letter(\"\")\np check_if_last_char_is_a_letter(\"\
    apple pi\")", '  return false if txt.empty?', "  txt[-1] =~ /\\w/ && txt[-2] =~\
    \ /\\s/\nend", "  txt[-1] =~ /[a-zA-Z]/ && txt[-1] != \" \"\nend", "    return\
    \ false if txt.length == 0\n    arr = txt.split(\" \")\n    arr[-1][-1].match(/[a-zA-Z]/)\
    \ && !txt.include?(arr[-1][-1])\nend\np check_if_last_char_is_a_letter(\"apple\
    \ pie\") == false\np check_if_last_char_is_a_letter(\"apple pi e\") == true\n\
    p check_if_last_char_is_a_letter(\"apple pi e \") == false\np check_if_last_char_is_a_letter(\"\
    \") == false\np check_if_last_char_is_a_letter(\"2 day\") == false\np check_if_last_char_is_a_letter(\"\
    what a beautiful day\") == true\np check_if_last_char_is_a_letter(\"math problems\"\
    ) == false\np check_if_last_char_is_a_letter(\"to be or not to be\") == true\n\
    p check_if_last_char_is_a_letter(\"no pain no gain\") == false\np check_if_last_char_is_a_letter(\"\
    the end\") == true\np check_if_last_char_is_a_letter(\"one big cake\") == false\n\
    p check_if_last_char_is_a_letter(\"a long trip\") == true\np check_if_last_char_is_a_letter(\"\
    the great depression\") == false\np check_if_last_char_is_a_letter(\"the big game\"\
    ) == true\np check_if_last_char_is_a_letter(\"an i for an eye\") == false\np check_if_last_char_is_a_letter(\"\
    tomorrow is monday\") == true\np check_if_last_char_is_a_letter(\"money can't\
    \ buy me love\") == false\np check_if_last_char_is_a_letter(\"it is time to work\"\
    ) == true\np check_if_last_char_is_a_letter(\"it is time to play\") == false\n\
    p check_if_last_char_is_a_letter(\"it is time to pray\") ==", "  if txt.split(\"\
    \").last =~ /[[:alpha:]]/\n    if txt.split(\"\").last == \" \"\n      return\
    \ false\n    else\n      return true\n    end\n  else\n    return false\n  end\n\
    end", "    txt.strip.chars.last.match?(/[a-zA-Z]/)\nend\np check_if_last_char_is_a_letter(\"\
    apple pie\") # \u279E False\np check_if_last_char_is_a_letter(\"apple pi e\")\
    \ # \u279E True\np check_if_last_char_is_a_letter(\"apple pi e \") # \u279E False\n\
    p check_if_last_char_is_a_letter(\"\") # \u279E False", "  if txt.chars.last ==\
    \ ' '\n    false\n  elsif txt.chars.last.ord.between?(65, 90) || txt.chars.last.ord.between?(97,\
    \ 122)\n    true\n  else\n    false\n  end\nend", "  txt.chars.last =~ /\\w/ ?\
    \ false : true\nend", "  # return false if txt.empty?\n  # txt = txt.split('')\n\
    \  # last_char = txt.last\n  # if last_char =~ /[a-zA-Z]/\n  #   last_char.strip\n\
    \  # end\n  # txt.length < 2 || txt.scan(/[a-zA-Z]/).empty? ? false : txt.split(/\\\
    s+/).last.chars.last =~ /\\w/ ? false : true\n  txt.chars.last =~ /\\b\\w/ ? false\
    \ : true\nend\np check_if_last_char_is_a_letter(\"apple pie\")\np check_if_last_char_is_a_letter(\"\
    apple pi e\")\np check_if_last_char_is_a_letter(\"apple pi e \")\np check_if_last_char_is_a_letter(\"\
    \")", "  txt = txt.strip.chars\n  txt[-1] =~ /[a-zA-Z]/ ? txt[-2] =~ /[a-zA-Z]/\
    \ ? false : true : false\nend", "    if txt[-1] =~ /[a-zA-Z]/\n        if txt[-2]\
    \ == \" \" || txt[-2] == nil\n            return true\n        else\n        \
    \    return false\n        end\n    else\n        return false\n    end\nend\n\
    p check_if_last_char_is_a_letter(\"apple pie\")\np check_if_last_char_is_a_letter(\"\
    apple pi e\")\np check_if_last_char_is_a_letter(\"apple pi e \")\np check_if_last_char_is_a_letter(\"\
    \")", "  return false if txt.split(\" \").last == \"\"\n  txt.match(/\\s[a-zA-Z]$/)\
    \ ? true : false\nend", "  return txt[-1] =~ /[a-zA-Z]/ && !txt.end_with?(\" \"\
    )\nend", "    return true if txt[-1] =~ /[[:alpha:]]/ && txt[-2] =~ /\\s/\n  \
    \  false\nend", "    return false if txt == \"\"\n    return false if txt[-1]\
    \ == \" \"\n    txt[-1].match(/[a-zA-Z]/) ? true : false\nend\nputs check_if_last_char_is_a_letter(\"\
    apple pie\")\nputs check_if_last_char_is_a_letter(\"apple pi e\")\nputs check_if_last_char_is_a_letter(\"\
    apple pi e \")\nputs check_if_last_char_is_a_letter(\"\")", "  txt = txt.strip.split('')\n\
    \  if txt.pop =~ /[a-zA-Z]/ && txt.last != ' '\n    true\n  else\n    false\n\
    \  end\nend", "  txt.split(\" \").last.chars.last.match?(/\\A[a-zA-Z]+\\z/)\n\
    end", "    if txt.empty?\n        return false\n    elsif txt[-1] =~ /[[:alpha:]]/\
    \ && txt[-2] =~ /\\s/\n        return true\n    else\n        return false\n \
    \   end\nend", "  txt = txt.split(\" \")\n  txt[-1][-1].scan(/[A-Za-z]/).any?\
    \ ? true : false\nend", "  if txt == \"\"\n    return false\n  end\n  n = txt.split(\"\
    \ \")\n  txt = n[n.length - 1]\n  alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n  for i in 0..txt.length - 1\n    if alphabet.include?(txt[i])\n      return\
    \ true\n    end\n  end\n  return false\nend", "  return false if txt.length ==\
    \ 0\n  letters = \"abcdefghijklmnopqrstuvwxyz\"\n  letters = letters.split(\"\"\
    )\n  if letters.include?(txt[-1])\n    if txt[-2] == \" \"\n      return true\n\
    \    else\n      return false\n    end\n  else\n    return false\n  end\nend",
  "\tif txt[-1] =~ /[A-Za-z]/ && txt[-2] != \" \"\n\t\ttrue\n\telse\n\t\tfalse\n\t\
    end\nend\nputs check_if_last_char_is_a_letter(\"apple pie\")\nputs check_if_last_char_is_a_letter(\"\
    apple pi e\")\nputs check_if_last_char_is_a_letter(\"apple pi e \")\nputs check_if_last_char_is_a_letter(\"\
    \")", "  # if txt == \"\"\n  #   false\n  # elsif txt[-1] == \" \"\n  #   false\n\
    \  # elsif txt.split(\" \").last == txt[-1]\n  #   false\n  # else\n  #   true\n\
    \  # end\n  if txt[-1] =~ /[a-zA-Z]/ && txt[-1] !~ /[a-zA-Z]\\w/\n    true\n \
    \ else\n    false\n  end\nend", "  return false if txt.empty?\n  chars = txt.chars\n\
    \  return false if !chars.last.match(/\\w/)\n  return false if chars[-2].match(/\\\
    w/)\n  true\nend", "    if txt.end_with?(\" \") \n        return false\n    else\n\
    \        return true\n    end\nend\nputs check_if_last_char_is_a_letter(\"apple\
    \ pie\")", "  return false if txt.empty?\n  txt.split(' ').last.gsub(/[\\W_]/,\
    \ '').size == 1\nend", "  (txt[-1] =~ /[[:alpha:]]/) && (txt[-2] !~ /[[:alpha:]]/)\n\
    end", "  txt[-1] =~ /[[:alpha:]]/ && txt[-1] != ' '\nend", "  return false if\
    \ txt.length < 1\n  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  return true if\
    \ alphabet.include?(txt[-1])\n  return false if alphabet.include?(txt[-2])\n \
    \ false\nend", "\tif !txt.empty? and txt[-1].match?(/[a-zA-Z]/) and txt[-2] ==\
    \ \" \"\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nputs \"######\
    \ 17 ######\"\nputs check_if_last_char_is_a_letter(\"apple pie\") #\u279E False\n\
    puts check_if_last_char_is_a_letter(\"apple pi e\") #\u279E True\nputs check_if_last_char_is_a_letter(\"\
    apple pi e \") #\u279E False\nputs check_if_last_char_is_a_letter(\"\") #\u279E\
    \ False\nputs", "  last = txt.chars.last\n  return false if last.nil?\n  last\
    \ =~ /[[:alpha:]]/ && last =~ /\\s/ ? true : false\nend", "  return false if txt.empty?\n\
    \  txt[-1] =~ /[[:alpha:]]/ && txt[-2] =~ /\\s/\nend", "    if txt[-1] == \" \"\
    \n        return false\n    else\n        return txt[-1].match(/[a-zA-Z]/)\n \
    \   end\nend", "  if /[a-zA-Z]$/.match(txt) && !/[a-zA-Z]\\w+$/.match(txt)\n \
    \   true\n  else\n    false\n  end\nend", "  if txt.length < 1\n    false\n  elsif\
    \ (txt[-1] =~ /[A-Za-z]/) == nil\n    false\n  elsif (txt[-2] =~ /[A-Za-z]/) ==\
    \ nil\n    true\n  else\n    false\n  end\nend", "  txt.chars.last =~ /[a-zA-Z]/\
    \ && txt.chars.last !~ /\\w/\nend", "    # txt.end_with?(' ') ? false : true\n\
    \    # txt.end_with?(' ') ? false : txt.chars.pop.scan(/\\w/).empty? ? false :\
    \ true\n    # txt.chars.pop.scan(/\\w/).empty? ? false : true\n    txt.chars.pop.match(/\\\
    w/) != nil\nend", "\ttxt[-1].match(/[a-zA-Z]/) && !txt[-1].match(/\\w/)\nend\n\
    p check_if_last_char_is_a_letter(\"apple pie\")#false\np check_if_last_char_is_a_letter(\"\
    apple pi e\")#true\np check_if_last_char_is_a_letter(\"apple pi e \")#false\n\
    p check_if_last_char_is_a_letter(\"\")#false", "\tif txt == \"\"\n\t\treturn false\n\
    \tend\n\tc = txt[-1]\n\tif c.match?(/[a-zA-Z]/) && !c.match?(/\\w/)\n\t\treturn\
    \ true\n\telse\n\t\treturn false\n\tend\nend", "  txt.split(' ').last == '' ?\
    \ false : txt.split(' ').last[-1].match(/[a-zA-Z]/) && !txt.split(' ').last[-1].match(/[\\\
    W]/)\nend\np check_if_last_char_is_a_letter(\"apple pie\") #false\np check_if_last_char_is_a_letter(\"\
    apple pi e\") #true\np check_if_last_char_is_a_letter(\"apple pi e \") #false\n\
    p check_if_last_char_is_a_letter(\"\") #false\np check_if_last_char_is_a_letter(\"\
    apple pi e!\") #false\np check_if_last_char_is_a_letter(\"apple pi e1\") #false",
  "  if txt[-1] =~ /[a-zA-Z]/\n    words = txt.split(' ')\n    chars = words.join('')\n\
    \    return true if chars[-1] == txt[-1]\n  end\n  false\nend\nputs \"##### check_if_last_char_is_a_letter\
    \ #####\"\nputs check_if_last_char_is_a_letter(\"apple pie\") == false\nputs check_if_last_char_is_a_letter(\"\
    apple pi e\") == true\nputs check_if_last_char_is_a_letter(\"apple pi e \") ==\
    \ false\nputs check_if_last_char_is_a_letter(\"\") == false\nputs", "  return\
    \ (txt != \"\") && (txt[-1] =~ /[a-zA-Z]/) && (txt.split(\" \")[-1].size == 1)\n\
    end", "    last_char = txt[-1]\n    return last_char.count(\"a-zA-Z\") && !last_char.count(\"\
    a-zA-Z0-9\")\nend\nputs check_if_last_char_is_a_letter(\"apple pie\") \nputs check_if_last_char_is_a_letter(\"\
    apple pi e\") \nputs check_if_last_char_is_a_letter(\"apple pi e \") \nputs check_if_last_char_is_a_letter(\"\
    \")", "  txt.end_with?(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"\
    j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"\
    w\",\"x\",\"y\",\"z\")\nend", "  puts txt\n  if txt[-1] == ' '\n    return false\n\
    \  else\n    # txt[-1]\n    n = txt.length\n    p txt[n-1]\n    p txt[n-2]\n \
    \   if txt[n-1] == txt[n-2]\n      return false\n    else\n      return true\n\
    \    end\n  end\nend", "    txt.split(' ').last.match?(/[a-zA-Z]/)\nend", "\t\
    txt.split[-1].chars.last.match(/[a-zA-Z]/) && !txt.chars.last.match(/[a-zA-Z]/)\n\
    end\ncheck_if_last_char_is_a_letter(\"apple pie\") #\u279E False\ncheck_if_last_char_is_a_letter(\"\
    apple pi e\") #\u279E True\ncheck_if_last_char_is_a_letter(\"apple pi e \") #\u279E\
    \ False\ncheck_if_last_char_is_a_letter(\"\") #\u279E False", "\tif txt == \"\"\
    \n\t\tfalse\n\telsif txt[-1].match(/\\S/) && txt[-1].match(/\\W/)\n\t\ttrue\n\t\
    else\n\t\tfalse\n\tend\nend", "  # check if the last character is an alphabetical\
    \ letter\n  # which is not part of a word i.e. it has a space before it.\n  if\
    \ txt[-1].match(/\\w/) and not txt[-2].match(/\\w/)\n    true\n  else\n    false\n\
    \  end\nend", "    txt.rstrip.length == txt.length ? txt.end_with?(\" \") ? false\
    \ : true : false\nend\nputs check_if_last_char_is_a_letter(\"apple pie\")\nputs\
    \ check_if_last_char_is_a_letter(\"apple pi e\")\nputs check_if_last_char_is_a_letter(\"\
    apple pi e \")\nputs check_if_last_char_is_a_letter(\"\")", "  if txt[-1].match(/[a-zA-Z]/)\n\
    \    txt[-2] == \" \" ? true : false\n  else\n    false\n  end\nend", "  return\
    \ true if txt.length == 0\n  if txt[-1] =~ /[[:alpha:]]/\n    if txt[-2] == \"\
    \ \"\n      return true\n    else\n      return false\n    end\n  else\n    return\
    \ false\n  end\nend", "  return txt[-1] =~ /[a-zA-Z]/ && txt[-1] =~ /\\S/\nend",
  "\tif txt.split[-1].chars.last.match(/[[:alpha:]]/) && txt.split[-1].chars.last.match(/[^a-zA-Z0-9]/)\n\
    \t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nputs check_if_last_char_is_a_letter(\"\
    apple pie\")\nputs check_if_last_char_is_a_letter(\"apple pi e\")\nputs check_if_last_char_is_a_letter(\"\
    apple pi e \")\nputs check_if_last_char_is_a_letter(\"\")", "  if txt[-1] =~ /[a-zA-Z]/\
    \ && !txt[-1] =~ /[\\w]/\n    return true\n  else\n    return false\n  end\nend",
  "  return false if txt.empty?\n  return false if !(txt[-1].match(/\\w/))\n  txt.split('\
    \ ').last[-1].match(/\\w/) ? true : false\nend", "\tletters = txt.gsub(/\\s/,\
    \ '')\n\t# print letters\n\tif letters.size > 0\n\t\tletters[-1].match(/[[:alpha:]]/)\
    \ ? true : false\n\telse\n\t\tfalse\n\tend\nend\ncheck_if_last_char_is_a_letter(\"\
    apple pi e\")", "  txt[-1] =~ /\\w/ ? txt[-2] =~ /\\w/ ? false : true : false\n\
    end", "  return false if txt.empty?\n  return false if txt[-1] == \" \"\n  txt[-1].ord.between?(65,\
    \ 122)\nend", "  return txt.end_with?(' ', '\\n', '\\t') ? false : true\nend\n\
    p check_if_last_char_is_a_letter(\"apple pie\") == false\np check_if_last_char_is_a_letter(\"\
    apple pi e\") == true\np check_if_last_char_is_a_letter(\"apple pi e \") == false\n\
    p check_if_last_char_is_a_letter(\"\") == false", "\ttxt[-1] =~ /[a-zA-Z]/ &&\
    \ txt[-1] =~ /\\b/\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
