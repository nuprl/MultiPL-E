name: HumanEval_133_sum_squares
language: rb
prompt: "# You are given a list of numbers.\n# You need to return the sum of squared\
  \ numbers in the given list,\n# round each element in the list to the upper int(Ceiling)\
  \ first.\n# Examples:\n# For lst = [1,2,3] the output should be 14\n# For lst =\
  \ [1,4,9] the output should be 98\n# For lst = [1,3,5,7] the output should be 84\n\
  # For lst = [1.4,4.2,0] the output should be 29\n# For lst = [-2.4,1,1] the output\
  \ should be 6\ndef sum_squares(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_squares\n\
  \    candidate = method(:sum_squares)\n    assert_equal(14, candidate.call([1.0,\
  \ 2.0, 3.0]))\n    assert_equal(14, candidate.call([1.0, 2.0, 3.0]))\n    assert_equal(84,\
  \ candidate.call([1.0, 3.0, 5.0, 7.0]))\n    assert_equal(29, candidate.call([1.4,\
  \ 4.2, 0.0]))\n    assert_equal(6, candidate.call([-2.4, 1.0, 1.0]))\n    assert_equal(10230,\
  \ candidate.call([100.0, 1.0, 15.0, 2.0]))\n    assert_equal(200000000, candidate.call([10000.0,\
  \ 10000.0]))\n    assert_equal(75, candidate.call([-1.4, 4.6, 6.3]))\n    assert_equal(1086,\
  \ candidate.call([-1.4, 17.9, 18.9, 19.9]))\n    assert_equal(0, candidate.call([0.0]))\n\
  \    assert_equal(1, candidate.call([-1.0]))\n    assert_equal(2, candidate.call([-1.0,\
  \ 1.0, 0.0]))\n  end\nend\n"
completions: ["  lst.map{|e| e.ceil}.map{|e| e*e}.reduce(:+)\nend", "  lst.inject(0)\
    \ { |sum, n| sum + n ** 2 }\nend", end, "  sum = 0\n  i = 0\n  while i < lst.length\n\
    \    sum += (lst[i] * lst[i]).round(0)\n    i += 1\n  end\n  sum\nend", "  return\
    \ lst.map{|x| x**2}.sum\nend", "  lst.map{|x|x.ceil()}.map{|x|x*x}.sum()\nend",
  "\tlst.map! {|x| x.ceil }\n\tsum = 0\n\tlst.each {|x| sum += x ** 2}\n\tsum\nend",
  "  lst.map! { |e| e.ceil }\n  lst.map! { |e| e ** 2 }\n  lst.sum\nend\np sum_squares([1,\
    \ 2, 3]) == 14\np sum_squares([1, 4, 9]) == 98\np sum_squares([1, 3, 5, 7]) ==\
    \ 84\np sum_squares([1.4, 4.2, 0]) == 29\np sum_squares([-2.4, 1, 1]) == 6", " \
    \ lst.map { |i| i.ceil }.map { |i| i * i }.sum\nend", "  lst.map{|x| x = x.ceil()}\n\
    \  sum = 0\n  lst.each do |item|\n    sum += item ** 2\n  end\n  sum\nend", " \
    \ new_lst = lst.map { |i| i.ceil }\n  new_lst.reduce(0) { |sum, x| sum + x**2\
    \ }\nend", "    lst.each do |n|\n        n.ceil\n    end\n    sum = 0\n    lst.each\
    \ do |n|\n        sum += n*n\n    end\n    return sum\nend\nputs sum_squares([1,2,3])\
    \ #14\nputs sum_squares([1,4,9]) #98\nputs sum_squares([1,3,5,7]) #84\nputs sum_squares([1.4,4.2,0])\
    \ #29\nputs sum_squares([-2.4,1,1]) #6", "  lst.map { |x| x.ceil ** 2 }.reduce(:+)\n\
    end", "  sum = 0\n  lst.each do |x|\n    sum += x.ceil ** 2\n  end\n  sum\nend",
  "  lst.map { |x| x**2 }.sum\nend", "  lst.map { |n| n.ceil ** 2 }.sum\nend", " \
    \ lst.map! { |x| x.ceil**2 }\n  lst.inject(:+)\nend", "  lst.map { |x| x.ceil\
    \ }.map { |x| x * x }.reduce(:+)\nend", "  lst.map{|i| i.ceil ** 2}.reduce(:+)\n\
    end", "  lst.map { |x| x.ceil }.reduce(0) { |acc, item| acc + item**2 }\nend",
  "  lst.inject(0) { |sum,x| sum + (x*x).ceil }\nend", "  res = 0\n  lst.each { |x|\
    \ res += (x.ceil)**2 }\n  res\nend", "  lst.reduce(0) { |sum, num| sum + num.ceil\
    \ ** 2 }\nend", "    lst.map {|i| i.ceil()}.inject(0) {|sum, i| sum + i**2}\n\
    end", "  # your code here\nend", "  lst.map! { |e| e.ceil }\n  lst.map! { |e|\
    \ e ** 2 }\n  lst.sum\nend", "  lst.map { |x| x.ceil }.map { |x| x ** 2 }.sum\n\
    end", "\tlst.map! {|n| n.ceil}\n\treturn lst.inject(0) {|sum, x| sum + x**2}\n\
    end", "  #your code here\nend", "   (lst.map! {|i| i.ceil**2}).sum\nend", "  lst.map\
    \ { |number| number.ceil**2 }.reduce(:+)\nend", "\tlst.each{|x| x = x.ceil}\n\t\
    lst.map!{|x| x*x}\n\treturn lst.inject(:+)\nend", "    lst.map {|x| x.ceil**2}.reduce(:+)\n\
    end", "  lst.map { |x| x.ceil }.map { |x| x ** 2 }.sum\nend", "  lst.map { |x|\
    \ x.ceil**2 }.reduce(:+)\nend", "  lst.map! { |num| (num + 1).floor }\n  lst.map!\
    \ { |num| num * num }\n  lst.inject(:+)\nend", "  squared_list = lst.map do |number|\n\
    \    number.ceil * number.ceil\n  end\n  squared_list.sum\nend", "  lst.map! {\
    \ |i| i.ceil }\n  lst.inject(0) { |sum, n| sum + n**2 }\nend", "  lst.map! { |x|\
    \ x.ceil ** 2 }\n  lst.reduce(:+)\nend", "\treturn lst.map{|x| x.ceil**2}.sum\n\
    end", "  sum = 0\n  lst.each do |x|\n    sum += x.ceil**2\n  end\n  sum\nend",
  "  lst.map { |x| x**2 }.reduce(:+)\nend", "  lst.map!{|num| num.ceil}\n  lst.inject{|sum,\
    \ num| sum += num**2}\nend\nputs sum_squares([1,2,3]) == 14\nputs sum_squares([1,4,9])\
    \ == 98\nputs sum_squares([1,3,5,7]) == 84\nputs sum_squares([1.4,4.2,0]) == 29\n\
    puts sum_squares([-2.4,1,1]) == 6", "  lst.map { |number| number.ceil**2 }.reduce(:+)\n\
    end", "  # your code here\nend", "  lst.each { |x| x = x.ceil }\n  lst.map! {\
    \ |y| y * y }\n  sum = 0\n  lst.each { |num| sum += num }\n  puts sum\nend", " \
    \ return lst.map { |num| num.ceil ** 2 }.sum\nend", "  lst.map! { |i| i.ceil **\
    \ 2 }\n  lst.reduce(:+)\nend", "  # write your code here\nend", "  lst.map { |e|\
    \ e.ceil }.map { |e| e ** 2 }.reduce(:+)\nend", "  lst.map { |num| num ** 2 }.sum\n\
    end", "  lst.map!{|i| i.ceil}.map!{|i| i ** 2}.sum\nend", "  lst.map { |n| n.ceil**2\
    \ }.reduce(:+)\nend", "  # Add up all the numbers, square them and return the\
    \ sum.\n  lst.map! { |num| num.ceil }\n  lst.reduce(0) { |acc, i| acc + i ** 2\
    \ }\nend", "  lst.map { |x| x.ceil**2 }.sum\nend", "  lst.map { |n| n.ceil **\
    \ 2 }.reduce(:+)\nend", "  lst.map{|x| x.ceil**2}.sum\nend", "  new_list = lst.map\
    \ { |e| e.ceil**2 }\n  new_list.inject(:+)\nend", "  lst.map{|x| x = x.ceil **\
    \ 2}.reduce(:+)\nend", "  sum = 0\n  lst.each do |num|\n    sum += num**2\n  end\n\
    \  return sum\nend", "  lst.map!{|num| num.round}\n  lst.map!{|num| num**2}\n\
    \  lst.sum\nend", "  lst.map { |i| i.ceil**2 }.sum\nend", "  lst.map!{|i| i.ceil}\n\
    \  sum = 0\n  lst.each do |i|\n    sum += i*i\n  end\n  sum\nend", "  square =\
    \ []\n  lst.each do |num|\n    square << num.ceil**2\n  end\n  square.inject(:+)\n\
    end", "\tsum = 0\n\tlst.each do |n|\n\t\tsum += n.ceil**2\n\tend\n\tsum\nend",
  "  squared_lst = lst.map { |x| x.ceil**2 }\n  squared_lst.reduce(:+)\nend", "  #\
    \ Your code here\nend", "    lst.map! {|i| i.ceil}\n    lst.map! {|i| i*i}\n \
    \   lst.reduce(:+)\nend", "  lst.map{|a| a.ceil ** 2}.sum\nend", "  lst.map {\
    \ |n| n.ceil ** 2 }.reduce(:+)\nend", "  sum = 0\n  lst.each do |n|\n    n = n.ceil\n\
    \    sum += n**2\n  end\n  sum\nend", "  lst.map { |x| x = x.ceil**2 }.sum\nend",
  "  lst.map! { |n| n = n.ceil }\n  lst.map! { |n| n = n**2 }\n  lst.reduce(:+)\n\
    end", "  lst.map!{|x| x.ceil}\n  sum = 0\n  lst.each do |x|\n    sum += x*x\n\
    \  end\n  return sum\nend", "  lst.map{|num| num.ceil}.inject(0){|sum, e| sum\
    \ + e ** 2}\nend", "  # Write your code here\nend", "  # code here\nend", "  \
    \  lst.map{|i| i.ceil}.inject(0){|sum, x| sum + x**2}\nend", "  answer = []\n\
    \  lst.each do |ele|\n    answer << ele * ele\n  end\n  return answer.reduce(:+)\n\
    end\nputs sum_squares([1,2,3]) # 14\nputs sum_squares([1,4,9]) # 98\nputs sum_squares([1,3,5,7])\
    \ # 84\nputs sum_squares([1.4,4.2,0]) # 29\nputs sum_squares([-2.4,1,1]) # 6",
  "  lst.map{|x| x.ceil}.map{|x| x**2}.reduce(:+)\nend", "  # Your code here\nend",
  "  sum = 0\n  lst.each { |x| sum += x.ceil ** 2 }\n  sum\nend\nputs sum_squares([1,2,3])\n\
    puts sum_squares([1,4,9])\nputs sum_squares([1,3,5,7])\nputs sum_squares([1.4,4.2,0])\n\
    puts sum_squares([-2.4,1,1])", "\tlst.map {|x| x.ceil**2}.reduce(:+)\nend", " \
    \ lst.map { |x| x.ceil ** 2 }.sum\nend", "  total = 0\n  lst.each { |x| total\
    \ += x * x }\n  total\nend", "  # TODO: your code here\nend", "  lst.map! do |n|\n\
    \    n = n.ceil\n    n ** 2\n  end\n  lst.reduce(:+)\nend", "  # print lst.map{|x|\
    \ x.round}\n  return (lst.map{|x| x.round}).inject(0){|x,y| x+y**2}\nend", " \
    \ # Your code here...\nend", "  # lst.map{|x| x.ceil}.map{|x| x*x}.reduce(:+)\n\
    \  lst.map{|x| x**2}.reduce(:+)\nend", "  sum = 0\n  lst.each { |e| sum += e**2\
    \ }\n  sum\nend", "  lst.map!{|x|x.ceil}\n  lst.map!{|x|x*x}\n  return lst.inject(:+)\n\
    end", "  lst.map! { |x| x.ceil }\n  lst.map! { |x| x * x }\n  lst.reduce(:+)\n\
    end\np sum_squares([1, 2, 3]) #14\np sum_squares([1, 4, 9]) #98\np sum_squares([1,\
    \ 3, 5, 7]) #84\np sum_squares([1.4, 4.2, 0]) #29\np sum_squares([-2.4, 1, 1])\
    \ #6", "  list = lst.map { |i| i.ceil }\n  list.map { |i| i ** 2 }.sum\nend",
  "  s = 0\n  lst.each { |x| s += x**2 }\n  s\nend", "  lst.map { |x| x = x.ceil }.map\
    \ { |x| x * x }.sum\nend", "  lst.map{|i| (i.ceil)**2}.sum\nend", "  lst.map!\
    \ { |x| x.ceil }\n  lst.map! { |x| x * x }\n  lst.reduce(:+)\nend", "  lst.map\
    \ { |element| element = element.ceil ** 2 }.reduce(:+)\nend", "  square = []\n\
    \  lst.each do |num|\n    num = num.ceil\n    num = num ** 2\n    square << num\n\
    \  end\n  p square.sum\nend", "  lst.map!{|v| v.ceil}.map!{|v| v**2}.sum\nend",
  "  lst.map { |element| element.ceil ** 2 }.reduce(:+)\nend", "  return lst.reduce(0)\
    \ { |sum, number| sum + (number.ceil)**2 }\nend", "  lst.map! { |i| i.ceil }\n\
    \  lst.map! { |i| i**2 }\n  lst.inject(:+)\nend", "  sum = 0\n  lst.each do |item|\n\
    \    sum += item**2\n  end\n  sum\nend\nputs sum_squares([1,2,3])", "\nend", " \
    \ # we need to round each element\n  # i.e. turn [1.4, 4.2, 0] into [2, 5, 0]\n\
    \  # we can do this by running each element through a function that takes in a\
    \ number and rounds it up\n  # so, .map will run each element through a function\n\
    \  # then, we want to square each element\n  # so, .map will run each element\
    \ through a function\n  # then, we want to add them together\n  # so, .reduce\
    \ will take the elements and add them together\n  lst.map { |num| num.ceil }.map\
    \ { |num| num**2 }.reduce(:+)\nend", "  sum = 0\n  lst.each { |x| sum += x **\
    \ 2 }\n  sum\nend", "  # your code here\nend\nputs sum_squares([1, 2, 3])", " \
    \ lst.map! { |x| x.ceil }\n  lst.map! { |x| x ** 2 }\n  lst.inject(:+)\nend",
  "  sum = 0\n  lst.each do |element|\n    sum += (element.ceil)**2\n  end\n  sum\n\
    end", "    # solution 1\n    # lst.map{|e| (e+0.5).floor**2}.sum\n    # solution\
    \ 2\n    # lst.map{|e| e.ceil**2}.sum\n    # solution 3\n    # lst.map{|e| (e>0\
    \ ? e.ceil : e.floor)**2}.sum\n    # solution 4\n    # lst.map{|e| (e+0.5).floor**2}.sum\n\
    \    # solution 5\n    # lst.map{|e| (e>0 ? e.ceil : e.floor)**2}.sum\n    # solution\
    \ 6\n    # lst.map{|e| (e+0.5).floor**2}.sum\n    # solution 7\n    # lst.map{|e|\
    \ (e+0.5).floor**2}.sum\n    # solution 8\n    # lst.map{|e| (e+0.5).floor**2}.sum\n\
    \    # solution 9\n    # lst.map{|e| (e+0.5).floor**2}.sum\n    # solution 10\n\
    \    # lst.map{|e| (e+0.5).floor**2}.sum\nend", "  if lst.length < 1\n    return\
    \ 0\n  else\n    sum = 0\n    lst.each do |x|\n      sum += x**2\n    end\n  \
    \  return sum\n  end\nend", "  # code here\nend", "  #write your code here\nend",
  "  n = lst.inject(0) { |sum, n| sum + n.ceil ** 2 }\n  n\nend", "  # TODO: Implement\
    \ me\nend", "  sum = 0\n  lst.each { |x| sum += x*x }\n  sum\nend", "  lst.map!\
    \ { |x| x.ceil**2 }\n  lst.inject { |a, b| a + b }\nend", "  lst.map { |x| (x.ceil)**2\
    \ }.sum\nend", "  sum = 0\n  lst.each { |x| sum += x**2 }\n  sum\nend", "  lst.map{|i|\
    \ i.ceil ** 2}.sum\nend", "    return lst.map {|x| x**2}.reduce(:+)\nend\nputs\
    \ sum_squares([1,2,3])\nputs sum_squares([1,4,9])\nputs sum_squares([1,3,5,7])\n\
    puts sum_squares([1.4,4.2,0])\nputs sum_squares([-2.4,1,1])", "\ts = 0\n\tlst.each\
    \ { |n| s += n**2 }\n\ts\nend", "  lst.map!{|num| num.ceil}.map!{|num| num **\
    \ 2}.reduce(:+)\nend", "  sum = 0\n  lst.each do |num|\n    sum += (num.ceil **\
    \ 2)\n  end\n  sum\nend", "  sum = 0\n  lst.each do |x|\n    sum += (x.ceil)**2\n\
    \  end\n  sum\nend", "  sum = 0\n  lst.each do |i|\n    sum += i.ceil ** 2\n \
    \ end\n  sum\nend", "  lst.map{|e| e.ceil}.map{|e| e*e}.reduce(:+)\nend", "  lst.map\
    \ { |x| x.ceil**2 }.sum\nend", "  lst.map { |x| (x.ceil)**2 }.reduce(:+)\nend",
  "  lst.map { |x| x.ceil ** 2 }.reduce(:+)\nend", "  lst.map { |x| x.ceil**2 }.reduce(:+)\n\
    end", "  lst.map { |e| e.ceil }.map { |e| e * e }.sum\nend\nputs sum_squares([1,\
    \ 2, 3])\nputs sum_squares([1, 4, 9])\nputs sum_squares([1, 3, 5, 7])\nputs sum_squares([1.4,\
    \ 4.2, 0])\nputs sum_squares([-2.4, 1, 1])", "  raise NotImplementedError\nend",
  "  squared_lst = lst.map { |n| n * n }\n  squared_lst.reduce(:+)\nend", "  # lst.map\
    \ { |n| n.round }.map { |n| n**2 }.reduce(:+)\n  lst.map { |n| n.round ** 2 }.reduce(:+)\n\
    end", "  lst.map{|i| i.ceil ** 2}.reduce(:+)\nend", "  lst.map { |num| num.ceil**2\
    \ }.sum\nend", "  lst.map!{|x| x.ceil}.map{|x| x**2}.sum\nend", "  #start coding\
    \ here\nend", "  sum = 0\n  lst.each do |num|\n    sum += num**2\n  end\n  sum\n\
    end", "  lst.map { |x| x.ceil ** 2 }.sum\nend", "  sum = 0\n  lst.each do |num|\n\
    \    sum += num.ceil ** 2\n  end\n  sum\nend\nputs sum_squares([1,2,3]) # 14\n\
    puts sum_squares([1,4,9]) # 98\nputs sum_squares([1,3,5,7]) # 84\nputs sum_squares([1.4,4.2,0])\
    \ # 29\nputs sum_squares([-2.4,1,1]) # 6", "\tsum = 0\n\tlst.each { |e| sum +=\
    \ e**2 }\n\treturn sum\nend", "\tlst.collect! {|e| e.ceil}\n\treturn lst.collect!\
    \ {|e| e*e}.inject(:+)\nend", "  lst.map{|i| i.ceil}.map{|x| x**2}.reduce(:+)\n\
    end", "\tlst.map {|e| e.ceil ** 2}.reduce(:+)\nend\nlst = [1,2,3]\nputs sum_squares(lst)\n\
    lst = [1,4,9]\nputs sum_squares(lst)\nlst = [1,3,5,7]\nputs sum_squares(lst)\n\
    lst = [1.4,4.2,0]\nputs sum_squares(lst)\nlst = [-2.4,1,1]\nputs sum_squares(lst)",
  "  # your code here\nend", "  return lst.map { |x| (x + 0.5).to_i }.map { |x| x\
    \ * x }.sum\nend", "  lst.map { |num| num.ceil ** 2 }.sum\nend", "  # add your\
    \ code here\nend", "  sum = 0\n  lst.each do |x|\n    sum += x.ceil ** 2\n  end\n\
    \  sum\nend", "  lst.map!{|x| x.ceil}.map!{|x| x*x}.reduce(:+)\nend", "  lst.map\
    \ { |num| num.ceil ** 2 }.reduce(:+)\nend", "  # Write a function that takes in\
    \ a list and returns the sum of squared numbers in the given list\n  # Round each\
    \ element in the list to the upper int(Ceiling) first\n  lst.map! { |i| i.ceil\
    \ }\n  lst.inject(0) { |a, e| a + e**2 }\nend", "  lst.map{|i| i.ceil}.map{|i|\
    \ i*i}.reduce(:+)\nend", "\t# Enter your code here\n\tlst.map!{|e| e.ceil}\n\t\
    return lst.inject(0){|sum,x| sum + x**2}\nend", "  sum = 0\n  lst.each { |i| sum\
    \ += i ** 2 }\n  sum\nend", "  # Write code here\nend", "  # Your code here\n\
    end", "  lst.map{|x| x.ceil**2}.reduce(:+)\nend", "\treturn lst.map{|num| num.ceil\
    \ ** 2}.reduce(:+)\nend\nprint \"Input the numbers seperated by space: \"\nlst\
    \ = gets.chomp.split(' ').map(&:to_f)\nprint \"Sum of Squares: #{sum_squares(lst)}\\\
    n\"", "  lst.map! { |i| i.ceil }\n  lst.map! { |i| i * i }\n  lst.inject(:+)\n\
    end", "  lst.map { |i| i.ceil }.reduce(0) { |sum, i| sum + i ** 2 }\nend", " \
    \ s = 0\n  lst.each { |n| s += (n.ceil ** 2) }\n  s\nend", "  lst.map{|x| x.ceil**2}.sum\n\
    end", "  # lst.map! { |e| e.ceil }.reduce(0) { |s,e| s += e**2 }\n  lst.map {\
    \ |e| e.ceil**2 }.reduce(:+)\nend", "  sum = 0\n  lst.each do |x|\n    x = x.ceil\n\
    \    sum += x**2\n  end\n  return sum\nend", "  lst.map { |e| e.ceil**2 }.sum\n\
    end", "\nend", "  # Your Code Here\nend", "\tsquares = []\n\tlst.each do |num|\n\
    \t\tsquares << num**2\n\tend\n\tsquares.reduce(:+)\nend\np sum_squares([1,2,3])\n\
    p sum_squares([1,4,9])\np sum_squares([1,3,5,7])\np sum_squares([1.4,4.2,0])\n\
    p sum_squares([-2.4,1,1])", "\nend", "  lst.map{|x| x=x.ceil}.inject(0){|sum,x|\
    \ sum+x**2}\nend\nputs sum_squares([1,2,3]) # 14\nputs sum_squares([1,4,9]) #\
    \ 98\nputs sum_squares([1,3,5,7]) # 84\nputs sum_squares([1.4,4.2,0]) # 29\nputs\
    \ sum_squares([-2.4,1,1]) # 6", "  lst.map{|x| x**2}.sum\nend", end, "  lst.map{|x|x.ceil}.map{|x|x**2}.sum\n\
    end", "  new_lst = lst.map{|x| x.ceil}\n  return new_lst.inject(0){|sum,x| sum\
    \ + x*x}\nend\np sum_squares([1,2,3])\np sum_squares([1,4,9])\np sum_squares([1,3,5,7])\n\
    p sum_squares([1.4,4.2,0])\np sum_squares([-2.4,1,1])", "  lst.map{|n| n.ceil**2}.reduce(:+)\n\
    end", "  lst.map{|x| x.ceil ** 2}.sum\nend\nputs \"**********#{sum_squares([1,2,3])}**********\"\
    \nputs \"**********#{sum_squares([1,4,9])}**********\"\nputs \"**********#{sum_squares([1,3,5,7])}**********\"\
    \nputs \"**********#{sum_squares([1.4,4.2,0])}**********\"\nputs \"**********#{sum_squares([-2.4,1,1])}**********\"",
  "  lst.map { |num| num.ceil ** 2 }.sum\nend", "  # your code here\nend", "  # insert\
    \ your code here\nend", "  lst.map { |x| x**2}.reduce(:+)\nend", "  # your code\
    \ here\nend", "\nend", "  lst.map { |num| num.ceil ** 2 }.sum\nend", "  lst.map{|x|\
    \ x=x.ceil**2}.reduce(:+)\nend\nputs sum_squares([1,2,3])\nputs sum_squares([1,4,9])\n\
    puts sum_squares([1,3,5,7])\nputs sum_squares([1.4,4.2,0])\nputs sum_squares([-2.4,1,1])",
  "  # return the sum of squared numbers in the given list\n  # round each element\
    \ in the list to the upper int(Ceiling) first\nend", "\nend", "  lst.map! { |e|\
    \ e = e.ceil }\n  lst.reduce(0) { |sum, e| sum + e * e }\nend", "  sum = 0\n \
    \ lst.each do |number|\n    sum += number.ceil ** 2\n  end\n  sum\nend\nputs sum_squares([1,\
    \ 2, 3]) # should be 14\nputs sum_squares([1, 4, 9]) # should be 98\nputs sum_squares([1,\
    \ 3, 5, 7]) # should be 84\nputs sum_squares([1.4, 4.2, 0]) # should be 29\nputs\
    \ sum_squares([-2.4, 1, 1]) # should be 6", "  lst.map{|i| i.ceil**2}.reduce(:+)\n\
    end", "  return 0 if lst.nil?\n  lst.map { |x| x.ceil**2 }.reduce(:+)\nend", " \
    \ lst.each_with_index do |element, index|\n    lst[index] = element.ceil**2\n\
    \  end\n  lst.sum\nend", "  lst.map{|i| i.ceil}.inject(0){|sum, x| sum + x**2}\n\
    end", "  sum = 0\n  lst.each do |x|\n    sum += (x.ceil)**2\n  end\n  return sum\n\
    end", "  lst.map!{|n| n.ceil}.map!{|n| n**2}.sum\nend", "  total = 0\n  lst.each\
    \ do |number|\n    total += number.ceil ** 2\n  end\n  total\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
