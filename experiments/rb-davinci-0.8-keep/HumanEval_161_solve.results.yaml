language: rb
name: HumanEval_161_solve
results:
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    return s.swapcase if s.match(/[a-zA-Z]/)\n\
    \    s.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0_y5mlxi

    Started

    .

    Finished in 0.000466749 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2142.48 tests/s, 17139.83 assertions/s

    '
  stdout: ''
  timestamp: 1659823458
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  if s.length > 0\n    s.reverse.gsub(/[a-z]/,\
    \ &:upcase).gsub(/[A-Z]/, &:downcase)\n  else\n    s.reverse\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp13uxg5h1\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp13uxg5h1.rb:21:in `test_solve'\n \
    \    18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_solve\n\
    \     20:     candidate = method(:solve)\n  => 21:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     22:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     23:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     24:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"fdsa\">\n\ndiff:\n? fdsaSdF\n===============================================================================\n\
    \nFinished in 0.006388681 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    156.53 tests/s, 156.53 assertions/s\n"
  timestamp: 1659823458
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  # regex : /[a-z]/\n  s.gsub(/[a-z]/){|match|\
    \ match == match.upcase ? match.downcase : match.upcase}\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate =\
    \ method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"\
    #aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqo9x3u_v\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpqo9x3u_v.rb:18:in `test_solve'\n \
    \    15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_solve\n\
    \     17:     candidate = method(:solve)\n  => 18:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     19:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     20:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     21:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"ASDF\">\n\ndiff:\n? aSdF\n? A D \n? ? ? \n===============================================================================\n\
    \nFinished in 0.00657368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.12 tests/s, 152.12 assertions/s\n"
  timestamp: 1659823458
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, '') == '' ? s.reverse\
    \ : s.chars.map{|x| x.match(/[a-z]/i) ? x == x.upcase ? x.downcase : x.upcase\
    \ : x}.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp_ikc33n7\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp_ikc33n7.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"fDsA\">\n===============================================================================\n\
    \nFinished in 0.006563693 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.35 tests/s, 152.35 assertions/s\n"
  timestamp: 1659823458
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    #Solution 1\n    # array = s.split(\"\
    \")\n    # array.map! {|element| element == element.upcase ? element.downcase\
    \ : element.upcase}\n    # array.join(\"\")\n    # Solution 2\n    # regex = /[a-zA-Z]/\n\
    \    # if regex =~ s\n    #     s.swapcase\n    # else\n    #     s.reverse\n\
    \    # end\n    # Solution 3\n    s.tr('a-zA-Z', 'A-Za-z').reverse\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpez_59wrj\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpez_59wrj.rb:29:in `test_solve'\n \
    \    26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_solve\n\
    \     28:     candidate = method(:solve)\n  => 29:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     30:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     31:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     32:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.012212976 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    81.88 tests/s, 81.88 assertions/s\n"
  timestamp: 1659823458
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  temp = \"\"\n  if s.scan(/[a-zA-Z]/).empty?\n\
    \    s.reverse\n  else\n    s.each_char do |ch|\n      if ch.match?(/[a-zA-Z]/)\n\
    \        temp << ch.swapcase\n      else\n        temp << ch\n      end\n    end\n\
    \    temp\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpi2e2qdws

    Started

    .

    Finished in 0.0005404 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1850.48 tests/s, 14803.85 assertions/s

    '
  stdout: ''
  timestamp: 1659823458
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |v| v.ord.between?(65,\
    \ 90) ? v.downcase : v.upcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp_r9y6ill\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp_r9y6ill.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.006272758 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.42 tests/s, 318.84 assertions/s\n"
  timestamp: 1659823458
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    if s.count(\"a-zA-Z\") == 0\n\
    \        s.reverse\n    else\n        s.swapcase\n    end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate =\
    \ method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"\
    #aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcdsyz7nk

    Started

    .

    Finished in 0.000463316 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2158.35 tests/s, 17266.83 assertions/s

    '
  stdout: ''
  timestamp: 1659823458
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    (0...s.length).each do |i|\n \
    \       if s[i] =~ /[a-z]/\n            s[i] = s[i].upcase\n        elsif s[i]\
    \ =~ /[A-Z]/\n            s[i] = s[i].downcase\n        end\n    end\n    s.reverse\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpwvndk8ne\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpwvndk8ne.rb:24:in `test_solve'\n \
    \    21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_solve\n\
    \     23:     candidate = method(:solve)\n  => 24:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     25:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     26:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     27:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.00650674 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.69 tests/s, 153.69 assertions/s\n"
  timestamp: 1659823458
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    x = []\n    j = 0\n    s.each_char\
    \ do |i|\n        if i.match(/^[[:alpha:]]$/)\n            x << i.swapcase\n \
    \       else\n            x << i\n        end\n    end\n    return x.join\nend\n\
    puts solve(\"1234\")\nputs solve(\"ab\")\nputs solve(\"#a@C\")\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate =\
    \ method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"\
    #aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "1234\nAB\n#A@c\nLoaded suite /tmp/tmpxox37vkd\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpxox37vkd.rb:30:in `test_solve'\n \
    \    27:   def test_solve\n     28:     candidate = method(:solve)\n     29: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 30:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     31:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     32:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     33:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.006443437 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    155.20 tests/s, 310.39 assertions/s\n"
  timestamp: 1659823458
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  if s.match?(/[a-zA-Z]/)\n    s.swapcase\n\
    \  else\n    s.reverse\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n   \
    \ assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmprdjuw4il

    Started

    .

    Finished in 0.000504259 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1983.11 tests/s, 15864.86 assertions/s

    '
  stdout: ''
  timestamp: 1659823458
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  # your code\n  a = []\n  if s.length\
    \ == 0\n    return s\n  end\n  s.split(\"\").each do |x|\n    if x.downcase.ord\
    \ != x.ord\n      a.push(x.downcase)\n    elsif x.downcase.ord == x.ord\n    \
    \  a.push(x.upcase)\n    else\n      a.push(x)\n    end\n  end\n  a.join(\"\"\
    )\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpiajv99ob\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpiajv99ob.rb:32:in `test_solve'\n \
    \    29:   def test_solve\n     30:     candidate = method(:solve)\n     31: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 32:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     33:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     34:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     35:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.006475592 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    154.43 tests/s, 308.85 assertions/s\n"
  timestamp: 1659823458
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  if s.match(/[a-zA-Z]/)\n    s.reverse\n\
    \  else\n    s.reverse.gsub(/[a-zA-Z]/) { |letter| letter.match(/[a-z]/) ? letter.upcase\
    \ : letter.downcase }\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n   \
    \ assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7726ewte\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp7726ewte.rb:21:in `test_solve'\n \
    \    18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_solve\n\
    \     20:     candidate = method(:solve)\n  => 21:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     22:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     23:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     24:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"fDsA\">\n===============================================================================\n\
    \nFinished in 0.006459376 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    154.81 tests/s, 154.81 assertions/s\n"
  timestamp: 1659823458
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.tr('a-zA-Z', 'A-Za-z').reverse!\
    \ || s.reverse!\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmph5tkou8b\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmph5tkou8b.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.00663901 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.62 tests/s, 150.62 assertions/s\n"
  timestamp: 1659823458
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  # your code\n  if s.empty?\n   \
    \ return s\n  else\n    s.swapcase\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd9hib7w9\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpd9hib7w9.rb:23:in `test_solve'\n \
    \    20:   def test_solve\n     21:     candidate = method(:solve)\n     22: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 23:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     24:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     25:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     26:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.006418924 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    155.79 tests/s, 311.58 assertions/s\n"
  timestamp: 1659823458
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.reverse.gsub(/[a-z]/, &:upcase).gsub(/[A-Z]/,\
    \ &:downcase)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp97we3v5i\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp97we3v5i.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"fdsa\">\n\ndiff:\n? fdsaSdF\n===============================================================================\n\
    \nFinished in 0.006583664 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.89 tests/s, 151.89 assertions/s\n"
  timestamp: 1659823458
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.tr(\"a-zA-Z\", \"A-Za-z\").reverse\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpjefzjm1n\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpjefzjm1n.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.006528349 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.18 tests/s, 153.18 assertions/s\n"
  timestamp: 1659823458
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  letters = ('a'..'z').to_a\n  if\
    \ letters.any? { |x| s.include?(x) }\n    s.chars.map { |x| letters.include?(x)\
    \ ? x.swapcase : x }.join\n  else\n    s.reverse\n  end\nend\np solve(\"1234\"\
    ) #=> \"4321\"\np solve(\"ab\") #=> \"AB\"\np solve(\"#a@C\") #=> \"#A@c\"\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "\"4321\"\n\"AB\"\n\"#A@C\"\nLoaded suite /tmp/tmpvxse57yj\nStarted\nF\n\
    ===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpvxse57yj.rb:25:in `test_solve'\n \
    \    22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_solve\n\
    \     24:     candidate = method(:solve)\n  => 25:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     26:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     27:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     28:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"ASDF\">\n\ndiff:\n? aSdF\n? A D \n? ? ? \n===============================================================================\n\
    \nFinished in 0.006714474 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.93 tests/s, 148.93 assertions/s\n"
  timestamp: 1659823458
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.each_with_object(\"\") do\
    \ |char, str|\n    if /[a-zA-Z]/.match(char)\n      str << if char.upcase == char\n\
    \              char.downcase\n            else\n              char.upcase\n  \
    \          end\n    else\n      str << char\n    end\n  end.reverse\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp09zc4ga7\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp09zc4ga7.rb:27:in `test_solve'\n \
    \    24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_solve\n\
    \     26:     candidate = method(:solve)\n  => 27:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     28:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     29:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     30:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.006290769 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    158.96 tests/s, 158.96 assertions/s\n"
  timestamp: 1659823458
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    s.reverse!\n    arr = s.split(\"\
    \")\n    arr.each_with_index do |value,index|\n        if (value =~ /[a-z]/)\n\
    \            arr[index] = value.upcase\n        elsif (value =~ /[A-Z]/)\n   \
    \         arr[index] = value.downcase\n        end\n    end\n    return arr.join(\"\
    \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7d8s30ih\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp7d8s30ih.rb:26:in `test_solve'\n \
    \    23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_solve\n\
    \     25:     candidate = method(:solve)\n  => 26:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     27:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     28:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     29:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.006596517 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.60 tests/s, 151.60 assertions/s\n"
  timestamp: 1659823458
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  #..\n  return s.swapcase if s.count(\"\
    a-zA-Z\") == 0\n  s.chars.map{|c| c =~ /[a-zA-Z]/ ? c.swapcase : c}.join\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpf3utkr7e\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpf3utkr7e.rb:20:in `test_solve'\n \
    \    17:   def test_solve\n     18:     candidate = method(:solve)\n     19: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 20:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     21:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     22:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     23:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.006522838 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.31 tests/s, 306.62 assertions/s\n"
  timestamp: 1659823458
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  flag = false\n  for i in 0..s.length\
    \ - 1\n    if s[i] =~ /[a-zA-Z]/\n      flag = true\n      if s[i] == s[i].upcase\n\
    \        s[i] = s[i].downcase\n      else\n        s[i] = s[i].upcase\n      end\n\
    \    end\n  end\n  return flag ? s : s.reverse\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n\
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp_2x_7vhw

    Started

    .

    Finished in 0.000538385 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1857.41 tests/s, 14859.25 assertions/s

    '
  stdout: ''
  timestamp: 1659823458
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  letters = s.chars.select { |c| c\
    \ =~ /[a-z]/i }\n  letters.empty? ? s.reverse : s.gsub(/[a-z]/i) { |c| c == c.upcase\
    \ ? c.downcase : c.upcase }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz1kvr7ha

    Started

    .

    Finished in 0.000546778 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1828.90 tests/s, 14631.17 assertions/s

    '
  stdout: ''
  timestamp: 1659823458
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/\\d/, '').reverse.tr('a-zA-Z',\
    \ 'A-Za-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4gybc4gp\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp4gybc4gp.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.006428411 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    155.56 tests/s, 155.56 assertions/s\n"
  timestamp: 1659823458
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.tr(\"a-z\", \"A-Z\").reverse!\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpkves52uy\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpkves52uy.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FDSA\">\n\ndiff:\n? a SdF\n? FD A \n? ? ?? \n===============================================================================\n\
    \nFinished in 0.010430605 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.87 tests/s, 95.87 assertions/s\n"
  timestamp: 1659823458
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  return s.reverse if s.tr('a-zA-Z',\
    \ '') == s\n  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp34k4u607

    Started

    .

    Finished in 0.000474911 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2105.66 tests/s, 16845.26 assertions/s

    '
  stdout: ''
  timestamp: 1659823458
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    string = s.scan(/[a-zA-Z]/)\n\
    \    if string.length == 0\n        return s.reverse\n    else\n        return\
    \ s.tr('a-z', 'A-Z').tr('A-Z', 'a-z')\n    end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n\
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy6xez990\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpy6xez990.rb:22:in `test_solve'\n \
    \    19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_solve\n\
    \     21:     candidate = method(:solve)\n  => 22:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     23:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     24:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     25:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"asdf\">\n\ndiff:\n? aSdF\n?  s f\n?  ? ?\n===============================================================================\n\
    \nFinished in 0.006225233 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    160.64 tests/s, 160.64 assertions/s\n"
  timestamp: 1659823458
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  chars = s.chars\n  chars.each_with_index\
    \ do |char, index|\n    chars[index] = char.reverse if char.scan(/[[:alpha:]]/).any?\n\
    \  end\n  chars.join.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n   \
    \ assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp6wryiasx\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp6wryiasx.rb:21:in `test_solve'\n \
    \    18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_solve\n\
    \     20:     candidate = method(:solve)\n  => 21:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     22:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     23:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     24:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"fDsA\">\n===============================================================================\n\
    \nFinished in 0.005986838 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    167.03 tests/s, 167.03 assertions/s\n"
  timestamp: 1659823458
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  return s.reverse if !s.match(/[a-zA-Z]/)\n\
    \  (0...s.length).each do |i|\n    if s[i].match(/[a-zA-Z]/)\n      if s[i] ==\
    \ s[i].upcase\n        s[i] = s[i].downcase\n      else\n        s[i] = s[i].upcase\n\
    \      end\n    end\n  end\n  s\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpodv83cjm

    Started

    .

    Finished in 0.000522925 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1912.32 tests/s, 15298.56 assertions/s

    '
  stdout: ''
  timestamp: 1659823458
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  #your code here\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate =\
    \ method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"\
    #aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpze2upan8\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpze2upan8.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007939155 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.96 tests/s, 125.96 assertions/s\n"
  timestamp: 1659823458
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s = s.reverse\n  s.tr!('A-Za-z',\
    \ 'a-zA-Z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpsdvvbb39\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpsdvvbb39.rb:18:in `test_solve'\n \
    \    15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_solve\n\
    \     17:     candidate = method(:solve)\n  => 18:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     19:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     20:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     21:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.006517211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.44 tests/s, 153.44 assertions/s\n"
  timestamp: 1659823458
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  return s.reverse unless s =~ /[a-zA-Z]/\n\
    \  s.gsub(/[a-zA-Z]/) { |match| match == match.upcase ? match.downcase : match.upcase\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg6qqruzi

    Started

    .

    Finished in 0.000464277 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2153.89 tests/s, 17231.09 assertions/s

    '
  stdout: ''
  timestamp: 1659823458
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s = s.chars.reverse.join\n  s =\
    \ s.tr(\"a-zA-Z\", \"A-Za-z\")\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl3re7ckz\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpl3re7ckz.rb:18:in `test_solve'\n \
    \    15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_solve\n\
    \     17:     candidate = method(:solve)\n  => 18:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     19:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     20:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     21:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.007278111 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    137.40 tests/s, 137.40 assertions/s\n"
  timestamp: 1659823458
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    return s.reverse if s.gsub(/[a-zA-Z]/,\
    \ '').length == s.length\n    s.chars.map{|char| char.match(/[a-zA-Z]/) ? char.swapcase\
    \ : char}.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4icacm8t

    Started

    .

    Finished in 0.00051542 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1940.17 tests/s, 15521.32 assertions/s

    '
  stdout: ''
  timestamp: 1659823458
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.reverse.gsub(/[a-z]/i, &:swapcase)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprgk756mu\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmprgk756mu.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.006399337 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    156.27 tests/s, 156.27 assertions/s\n"
  timestamp: 1659823458
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  if (s.scan(/[a-zA-Z]/).empty?)\n\
    \    return s.reverse\n  else\n    return s.tr(\"a-zA-Z\", \"A-Za-z\")\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpa_b1uvr3

    Started

    .

    Finished in 0.000452637 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2209.28 tests/s, 17674.21 assertions/s

    '
  stdout: ''
  timestamp: 1659823458
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfm39hoqs\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpfm39hoqs.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.007623424 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.17 tests/s, 131.17 assertions/s\n"
  timestamp: 1659823458
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  #s.chars.map { |c| c =~ /[a-z]/\
    \ ? c.upcase : c.downcase }.join\n  s.chars.map { |c| c =~ /[a-z]/ ? c.swapcase\
    \ : c }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc8bczp_k\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpc8bczp_k.rb:18:in `test_solve'\n \
    \    15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_solve\n\
    \     17:     candidate = method(:solve)\n  => 18:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     19:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     20:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     21:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"ASDF\">\n\ndiff:\n? aSdF\n? A D \n? ? ? \n===============================================================================\n\
    \nFinished in 0.006742731 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.31 tests/s, 148.31 assertions/s\n"
  timestamp: 1659823458
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    letters = ('a'..'z').to_a + ('A'..'Z').to_a\n\
    \    word = s.split('')\n    word.each_with_index do |let, i|\n        if letters.include?(let)\n\
    \            if let == let.upcase\n                word[i] = let.downcase\n  \
    \          else\n                word[i] = let.upcase\n            end\n     \
    \   end\n    end\n    if s == s.reverse\n        word.join('')\n    else\n   \
    \     word.join('').reverse\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpo4q2hc2l\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpo4q2hc2l.rb:32:in `test_solve'\n \
    \    29: class TestHumanEval < Test::Unit::TestCase\n     30:   def test_solve\n\
    \     31:     candidate = method(:solve)\n  => 32:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     33:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     34:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     35:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.006584343 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.88 tests/s, 151.88 assertions/s\n"
  timestamp: 1659823458
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  str = s.each_char.map { |x| x =~\
    \ /[a-z]/ ? x.swapcase : x }\n  str.all? { |x| x =~ /[^a-z]/ } ? str.reverse.join\
    \ : str.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpt63_6jc8\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpt63_6jc8.rb:18:in `test_solve'\n \
    \    15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_solve\n\
    \     17:     candidate = method(:solve)\n  => 18:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     19:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     20:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     21:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FDSA\">\n\ndiff:\n? a SdF\n? FD A \n? ? ?? \n===============================================================================\n\
    \nFinished in 0.006270412 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.48 tests/s, 159.48 assertions/s\n"
  timestamp: 1659823458
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    flag = true\n    s.each_char.map\
    \ do |i|\n        if flag\n            flag = false\n            i.swapcase!\n\
    \        else\n            flag = true\n            i\n        end\n    end.join\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpwiabf2fu\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpwiabf2fu.rb:26:in `test_solve'\n \
    \    23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_solve\n\
    \     25:     candidate = method(:solve)\n  => 26:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     27:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     28:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     29:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"asdf\">\n\ndiff:\n? aSdF\n?  s f\n?  ? ?\n===============================================================================\n\
    \nFinished in 0.006591756 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.70 tests/s, 151.70 assertions/s\n"
  timestamp: 1659823458
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  out=[]\n  s.chars.each do |ch|\n\
    \    if ch =~ /[a-zA-Z]/\n      out << ch.swapcase\n    else\n      out << ch\n\
    \    end\n  end\n  return out.join('')\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpdeu6q6ps\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpdeu6q6ps.rb:26:in `test_solve'\n \
    \    23:   def test_solve\n     24:     candidate = method(:solve)\n     25: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 26:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     27:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     28:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     29:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.006236559 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    160.34 tests/s, 320.69 assertions/s\n"
  timestamp: 1659823458
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  # TODO: Implement me\n  return \"\
    \" if s.empty?\n  return s.reverse unless s.match(/[a-zA-Z]/)\n  arr = s.split(\"\
    \")\n  arr.map! do |e|\n    if e.match(/[a-zA-Z]/)\n      e == e.upcase ? e.downcase\
    \ : e.upcase\n    else\n      e\n    end\n  end\n  arr.join(\"\")\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnwfs8vgl

    Started

    .

    Finished in 0.000516366 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1936.61 tests/s, 15492.89 assertions/s

    '
  stdout: ''
  timestamp: 1659823458
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n\tletters = s.scan(/[a-zA-Z]/)\n\t\
    # Non-letters could be arbitrary characters, so swap them\n\tswapped = s.split('').map\
    \ { |c| letters.include?(c) ? c.swapcase : c }\n\tswapped.join\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate =\
    \ method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"\
    #aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpem1je2tj\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpem1je2tj.rb:21:in `test_solve'\n \
    \    18:   def test_solve\n     19:     candidate = method(:solve)\n     20: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 21:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     22:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     23:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     24:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.006043523 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    165.47 tests/s, 330.93 assertions/s\n"
  timestamp: 1659823458
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  if s.match(/[a-zA-Z]/)\n    # If\
    \ there are letters in the string\n    s.chars.map { |x| x.match(/[a-zA-Z]/) ?\
    \ x.swapcase : x }.join(\"\")\n  else\n    # If there are no letters in the string\n\
    \    s.reverse\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpy12lbhlz

    Started

    .

    Finished in 0.000492683 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2029.70 tests/s, 16237.62 assertions/s

    '
  stdout: ''
  timestamp: 1659823458
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.each_char.inject(\"\") { |res,\
    \ c| (c =~ /[a-z]/i) ? res + c.swapcase : res + c }.reverse\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate =\
    \ method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"\
    #aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4jakapjv\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp4jakapjv.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.006245317 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    160.12 tests/s, 160.12 assertions/s\n"
  timestamp: 1659823458
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  return s.reverse if s.count(\"a-zA-Z\"\
    ) == 0\n  s.chars.map { |c| (\"a\"..\"z\").include?(c) ? c.upcase : c.downcase\
    \ }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmprrezrzdn

    Started

    .

    Finished in 0.000692415 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1444.22 tests/s, 11553.76 assertions/s

    '
  stdout: ''
  timestamp: 1659823459
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  if s.match(/[a-zA-Z]/)\n    s.tr('a-zA-Z',\
    \ 'A-Za-z')\n  else\n    s.reverse\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplno4ssrd

    Started

    .

    Finished in 0.000463901 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2155.63 tests/s, 17245.06 assertions/s

    '
  stdout: ''
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.split('').reverse.join('')\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmplu17t4mb\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmplu17t4mb.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"fDsA\">\n===============================================================================\n\
    \nFinished in 0.006168927 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    162.10 tests/s, 162.10 assertions/s\n"
  timestamp: 1659823459
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  return s.reverse if s.scan(/[a-zA-Z]/).empty?\n\
    \  s.split('').map{|c| c.upcase == c ? c.downcase : c.upcase}.join\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp8bypqqzc

    Started

    .

    Finished in 0.00056642 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1765.47 tests/s, 14123.80 assertions/s

    '
  stdout: ''
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.tr('a-z', 'A-Z').reverse.tr('A-Z',\
    \ 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpq6bh6xvy\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpq6bh6xvy.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"fdsa\">\n\ndiff:\n? fdsaSdF\n===============================================================================\n\
    \nFinished in 0.006497774 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.90 tests/s, 153.90 assertions/s\n"
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  letters = s.scan(/[a-zA-Z]/)\n \
    \ numbers = s.scan(/[0-9]/)\n  reversed_letters = letters.map { |l| l == l.upcase\
    \ ? l.downcase : l.upcase }\n  if letters.empty?\n    s.reverse\n  else\n    reversed_letters.join(\"\
    \") + numbers.join(\"\")\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp36pdvn8m\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp36pdvn8m.rb:27:in `test_solve'\n \
    \    24:     assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n     25:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     26:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n  => 27:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     28:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n     29:   \
    \  assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n     30:     assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n<\"#A@c\"> expected but was\n<\"Ac\">\n\n\
    diff:\n? #A@c\n===============================================================================\n\
    \nFinished in 0.006736125 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.45 tests/s, 593.81 assertions/s\n"
  timestamp: 1659823459
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  return s.reverse unless s.match(/[a-zA-Z]/)\n\
    \  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend\nputs \"\
    Solution of 'solve' = #{solve('ab')}\"\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Solution of ''solve'' = AB

    Loaded suite /tmp/tmp41gn7d_e

    Started

    .

    Finished in 0.000531576 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1881.20 tests/s, 15049.59 assertions/s

    '
  stdout: ''
  timestamp: 1659823459
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    letters = s.chars.select { |ch|\
    \ ('a'..'z').include?(ch) || ('A'..'Z').include?(ch) }\n    return s.reverse if\
    \ letters.empty?\n    s.gsub(/[a-zA-Z]/) { |letter| letter.upcase == letter ?\
    \ letter.downcase : letter.upcase }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpx19a3v3v

    Started

    .

    Finished in 0.001071959 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    932.87 tests/s, 7462.97 assertions/s

    '
  stdout: ''
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.reverse.gsub(/[a-z]/i) { |letter|\
    \ letter == letter.upcase ? letter.downcase : letter.upcase }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate =\
    \ method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"\
    #aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqpxvedcm\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpqpxvedcm.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.006421185 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    155.73 tests/s, 155.73 assertions/s\n"
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map{|c| c =~ /[a-z]/ ? c.upcase\
    \ : c.downcase}.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpbko3az7w\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpbko3az7w.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.006266949 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.57 tests/s, 319.13 assertions/s\n"
  timestamp: 1659823459
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  #..\n  return s.reverse unless s\
    \ =~ /[a-zA-Z]/\n  s.chars.map { |char| char.match(/[a-zA-Z]/) ? char.swapcase\
    \ : char }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpu42ogrgm

    Started

    .

    Finished in 0.000472735 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2115.35 tests/s, 16922.80 assertions/s

    '
  stdout: ''
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  #your code here\n  string = s.chars\n\
    \  string.each do |x|\n    if x =~ /[a-z]/ \n      string[string.index(x)] = x.upcase\n\
    \    elsif x =~ /[A-Z]/\n      string[string.index(x)] = x.downcase\n    end\n\
    \  end\n  string.join(\"\")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc752lg4p\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpc752lg4p.rb:27:in `test_solve'\n \
    \    24:   def test_solve\n     25:     candidate = method(:solve)\n     26: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 27:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     28:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     29:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     30:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.006299283 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    158.75 tests/s, 317.50 assertions/s\n"
  timestamp: 1659823459
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  if s.gsub(/[a-zA-Z]/, '').length\
    \ == s.length\n    s.reverse\n  else\n    s.split('').map { |x| x.gsub(/[a-zA-Z]/,\
    \ x == x.downcase ? x.upcase : x.downcase) }.join('')\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate =\
    \ method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"\
    #aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk5ojbs05

    Started

    .

    Finished in 0.000557294 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1794.39 tests/s, 14355.08 assertions/s

    '
  stdout: ''
  timestamp: 1659823459
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  str=\"\"\n  if s.match(/[a-zA-Z]/)\
    \ == nil\n    return s.reverse\n  else\n    s.chars.each do |x|\n      if x.match(/[a-zA-Z]/)\
    \ != nil\n        str << x.swapcase\n      else\n        str << x\n      end\n\
    \    end\n  end\n  return str\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n   \
    \ assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpsv8codmf

    Started

    .

    Finished in 0.000538484 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1857.07 tests/s, 14856.52 assertions/s

    '
  stdout: ''
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.swapcase\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate =\
    \ method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"\
    #aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpwvsclofq\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpwvsclofq.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.00622054 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    160.76 tests/s, 321.52 assertions/s\n"
  timestamp: 1659823459
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  if s.match(/[a-zA-Z]/)\n    s.swapcase\n\
    \  else\n    s.reverse\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n   \
    \ assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmptaa2_4ag

    Started

    .

    Finished in 0.000425517 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2350.08 tests/s, 18800.66 assertions/s

    '
  stdout: ''
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    s.reverse.gsub(/\\w/, &:swapcase)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl8qcja51\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpl8qcja51.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.006125686 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    163.25 tests/s, 163.25 assertions/s\n"
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    count_letters = 0\n    s.chars.map\
    \ do |char|\n        if char.ord > 96 && char.ord < 123\n            count_letters\
    \ += 1\n            char.upcase\n        elsif char.ord > 64 && char.ord < 91\n\
    \            count_letters += 1\n            char.downcase\n        else\n   \
    \         char\n        end\n    end.join(\"\").reverse\nend\nputs solve(\"1234\"\
    ) == \"4321\"\nputs solve(\"ab\") == \"AB\"\nputs solve(\"#a@C\") == \"#A@c\"\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "true\nfalse\nfalse\nLoaded suite /tmp/tmpvllzmwg1\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpvllzmwg1.rb:31:in `test_solve'\n \
    \    28: class TestHumanEval < Test::Unit::TestCase\n     29:   def test_solve\n\
    \     30:     candidate = method(:solve)\n  => 31:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     32:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     33:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     34:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.006178085 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    161.86 tests/s, 161.86 assertions/s\n"
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    char_array = s.split(\"\")\n \
    \   reverse_char_array = []\n    char_array.each do |char|\n        if (/[a-zA-Z]/\
    \ =~ char)\n            reverse_char_array << char.swapcase\n        else\n  \
    \          reverse_char_array << char\n        end\n    end\n    reverse_char_array.join\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpyj018b2q\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpyj018b2q.rb:27:in `test_solve'\n \
    \    24:   def test_solve\n     25:     candidate = method(:solve)\n     26: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 27:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     28:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     29:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     30:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.006273684 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.40 tests/s, 318.79 assertions/s\n"
  timestamp: 1659823459
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  if s.chars.any? { |char| ('a'..'z').include?(char)\
    \ || ('A'..'Z').include?(char) }\n    s.chars.map { |char| ('a'..'z').include?(char)\
    \ ? char.upcase : char.downcase }.join\n  else\n    s.reverse\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp2ekt4jk8

    Started

    .

    Finished in 0.000761543 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1313.12 tests/s, 10504.99 assertions/s

    '
  stdout: ''
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/\\w/, &:swapcase)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnzm7p87h\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpnzm7p87h.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.006176238 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    161.91 tests/s, 323.82 assertions/s\n"
  timestamp: 1659823459
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.scan(/[a-zA-Z]/).empty? ? s.reverse\
    \ : s.tr('a-zA-Z', 'A-Za-z')\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n   \
    \ assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpo85h04h8

    Started

    .

    Finished in 0.000516128 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1937.50 tests/s, 15500.03 assertions/s

    '
  stdout: ''
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    s.tr('a-zA-Z', 'A-Za-z').reverse\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp8ql_4rrz\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp8ql_4rrz.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.005965149 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    167.64 tests/s, 167.64 assertions/s\n"
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.reverse.split('').map do |char|\n\
    \    if char == char.upcase\n      char.downcase\n    elsif char == char.downcase\n\
    \      char.upcase\n    else\n      char\n    end\n  end.join('')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptlc2yji0\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmptlc2yji0.rb:25:in `test_solve'\n \
    \    22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_solve\n\
    \     24:     candidate = method(:solve)\n  => 25:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     26:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     27:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     28:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.00660702 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.35 tests/s, 151.35 assertions/s\n"
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  letters = ('a'..'z').to_a\n  s.reverse.chars.map\
    \ { |c| letters.include?(c.downcase) ? c.swapcase : c }.join\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate =\
    \ method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"\
    #aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqgmswomi\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpqgmswomi.rb:18:in `test_solve'\n \
    \    15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_solve\n\
    \     17:     candidate = method(:solve)\n  => 18:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     19:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     20:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     21:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.007047592 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    141.89 tests/s, 141.89 assertions/s\n"
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |i| ('a'..'z').include?(i)\
    \ ? i.upcase : i.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpx270sol5\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpx270sol5.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.006692354 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    149.42 tests/s, 298.85 assertions/s\n"
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    reversed = s.reverse\n    count\
    \ = 0\n    is_letter = false\n    if (s.size == 0)\n        return s\n    end\n\
    \    while count < s.size\n        if (/[a-zA-Z]/.match(s[count]))\n         \
    \   is_letter = true\n            break\n        end\n        count += 1\n   \
    \ end\n    if (is_letter)\n        s.size.times do |i|\n            if (/[a-z]/.match(s[i]))\n\
    \                reversed[i] = reversed[i].upcase\n            elsif (/[A-Z]/.match(s[i]))\n\
    \                reversed[i] = reversed[i].downcase\n            end\n       \
    \ end\n    end\n    return reversed\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpawli_10s\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpawli_10s.rb:39:in `test_solve'\n \
    \    36: class TestHumanEval < Test::Unit::TestCase\n     37:   def test_solve\n\
    \     38:     candidate = method(:solve)\n  => 39:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     40:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     41:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     42:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"fDsA\">\n===============================================================================\n\
    \nFinished in 0.006275487 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.35 tests/s, 159.35 assertions/s\n"
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  if s.empty?\n    \"\"\n  else\n\
    \    s.chars.map{|c| c =~ /[a-z]/ ? c.upcase : c.downcase}.join\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpht28v9e9\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpht28v9e9.rb:22:in `test_solve'\n \
    \    19:   def test_solve\n     20:     candidate = method(:solve)\n     21: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 22:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     23:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     24:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     25:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.006288866 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.01 tests/s, 318.02 assertions/s\n"
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]|[A-Z]/, 'a' => 'A',\
    \ 'A' => 'a', 'b' => 'B', 'B' => 'b', 'c' => 'C', 'C' => 'c', 'd' => 'D', 'D'\
    \ => 'd', 'e' => 'E', 'E' => 'e', 'f' => 'F', 'F' => 'f', 'g' => 'G', 'G' => 'g',\
    \ 'h' => 'H', 'H' => 'h', 'i' => 'I', 'I' => 'i', 'j' => 'J', 'J' => 'j', 'k'\
    \ => 'K', 'K' => 'k', 'l' => 'L', 'L' => 'l', 'm' => 'M', 'M' => 'm', 'n' => 'N',\
    \ 'N' => 'n', 'o' => 'O', 'O' => 'o', 'p' => 'P', 'P' => 'p', 'q' => 'Q', 'Q'\
    \ => 'q', 'r' => 'R', 'R' => 'r', 's' => 'S', 'S' => 's', 't' => 'T', 'T' => 't',\
    \ 'u' => 'U', 'U' => 'u', 'v' => 'V', 'V' => 'v', 'w' => 'W', 'W' => 'w', 'x'\
    \ => 'X', 'X' => 'x', 'y' => 'Y', 'Y' => 'y', 'z' => 'Z', 'Z' => 'z')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy1c8lby6\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpy1c8lby6.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.006406363 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    156.09 tests/s, 312.19 assertions/s\n"
  timestamp: 1659823459
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  if s.match(/[a-zA-Z]/)\n    s.swapcase\n\
    \  else\n    s.reverse\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n   \
    \ assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmptaa2_4ag

    Started

    .

    Finished in 0.000425517 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2350.08 tests/s, 18800.66 assertions/s

    '
  stdout: ''
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  str_arr = s.split('')\n  upper_case\
    \ = str_arr.select { |char| char.match(/[A-Z]/) }\n  lower_case = str_arr.select\
    \ { |char| char.match(/[a-z]/) }\n  reversed_str = \"\"\n  upper_case.each do\
    \ |char|\n    reversed_str << char.downcase\n  end\n  lower_case.each do |char|\n\
    \    reversed_str << char.upcase\n  end\n  reversed_str.reverse\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpsvfbit92\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpsvfbit92.rb:27:in `test_solve'\n \
    \    24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_solve\n\
    \     26:     candidate = method(:solve)\n  => 27:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     28:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     29:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     30:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FSda\">\n\ndiff:\n? aSdF\n? F  a\n? ?  ?\n===============================================================================\n\
    \nFinished in 0.008666353 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.39 tests/s, 115.39 assertions/s\n"
  timestamp: 1659823459
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  if s.gsub(/[^a-zA-Z]/, '').length\
    \ == 0\n    return s.reverse\n  else\n    return s.swapcase\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppu2v4o9a

    Started

    .

    Finished in 0.000462556 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2161.90 tests/s, 17295.20 assertions/s

    '
  stdout: ''
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.swapcase! if s =~ /[a-zA-Z]/\n\
    \  s.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp6i18ic09\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp6i18ic09.rb:18:in `test_solve'\n \
    \    15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_solve\n\
    \     17:     candidate = method(:solve)\n  => 18:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     19:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     20:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     21:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.006367171 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    157.06 tests/s, 157.06 assertions/s\n"
  timestamp: 1659823459
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  if s.count(\"a-zA-Z\") == 0\n  \
    \  return s.reverse\n  end\n  arr = s.split(\"\")\n  res = []\n  arr.each do |i|\n\
    \    if i =~ /[a-zA-Z]/\n      if i == i.upcase\n        res << i.downcase\n \
    \     else\n        res << i.upcase\n      end\n    else\n      res << i\n   \
    \ end\n  end\n  res.join(\"\")\nend\nputs solve(\"1234\")\nputs solve(\"ab\")\n\
    puts solve(\"#a@C\")\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: OK
  stderr: '4321

    AB

    #A@c

    Loaded suite /tmp/tmp8cpdn2hn

    Started

    .

    Finished in 0.000456452 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2190.81 tests/s, 17526.49 assertions/s

    '
  stdout: ''
  timestamp: 1659823459
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  # your code\n  letters = ('a'..'z').to_a\n\
    \  letters.concat(('A'..'Z').to_a)\n  rev = \"\"\n  if s.split(\"\").all? {|char|\
    \ !letters.include?(char)}\n    s.reverse\n  else\n    s.each_char do |char|\n\
    \      if letters.include?(char)\n        rev << char.swapcase\n      else\n \
    \       rev << char\n      end\n    end\n    rev\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate =\
    \ method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"\
    #aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp74mn9krw

    Started

    .

    Finished in 0.000628347 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1591.48 tests/s, 12731.82 assertions/s

    '
  stdout: ''
  timestamp: 1659823459
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    output = \"\"\n    s.each_char\
    \ do |c|\n        if ('a'..'z').cover?(c)\n            output += c.upcase\n  \
    \      elsif ('A'..'Z').cover?(c)\n            output += c.downcase\n        else\n\
    \            output += c\n        end\n    end\n    if output.match(/[a-zA-Z]/)\n\
    \        output\n    else\n        output.reverse\n    end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate =\
    \ method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"\
    #aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpp2dghadz

    Started

    .

    Finished in 0.000495241 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2019.22 tests/s, 16153.75 assertions/s

    '
  stdout: ''
  timestamp: 1659823459
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  #..\n  if s.scan(/[a-zA-Z]/).empty?\n\
    \    return s.reverse\n  else\n    return s.tr(\"a-zA-Z\", \"A-Za-z\")\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpwg0_f7lo

    Started

    .

    Finished in 0.000454072 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2202.29 tests/s, 17618.35 assertions/s

    '
  stdout: ''
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  if (str = s.scan(/[a-zA-Z]/)).length\
    \ > 0\n    str.reverse.join\n  else\n    s.reverse\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate =\
    \ method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"\
    #aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp_ir0ktwp\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp_ir0ktwp.rb:21:in `test_solve'\n \
    \    18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_solve\n\
    \     20:     candidate = method(:solve)\n  => 21:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     22:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     23:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     24:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"fDsA\">\n===============================================================================\n\
    \nFinished in 0.006043465 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    165.47 tests/s, 165.47 assertions/s\n"
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  if s.match(/\\d/)\n    return s.reverse\n\
    \  else\n    return s.split(\"\").map do |x|\n      if (\"a\"..\"z\").include?(x)\n\
    \        x.upcase\n      elsif (\"A\"..\"Z\").include?(x)\n        x.downcase\n\
    \      else\n        x\n      end\n    end.join(\"\")\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate =\
    \ method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"\
    #aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphmw27f80\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmphmw27f80.rb:33:in `test_solve'\n \
    \    30:     assert_equal(\"4321\", candidate.call(\"1234\"))\n     31:     assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n     32:     assert_equal(\"#A@c\", candidate.call(\"\
    #a@C\"))\n  => 33:     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"\
    ))\n     34:     assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n     35:  \
    \   assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n     36:     assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n<\"#aSDFw^45\"> expected but was\n<\"54^WfdsA#\"\
    >\n\ndiff:\n? 54^WfdsA#aSDFw^45\n===============================================================================\n\
    \nFinished in 0.013373663 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    74.77 tests/s, 373.87 assertions/s\n"
  timestamp: 1659823459
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  if s.scan(/[a-zA-Z]/).empty?\n \
    \   s.reverse\n  else\n    s.chars.map { |c| c[/[a-zA-Z]/] ? c.swapcase : c }.join\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpboy2ngqj

    Started

    .

    Finished in 0.000491856 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2033.12 tests/s, 16264.92 assertions/s

    '
  stdout: ''
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.each do |c|\n    if (\"\
    a\"..\"z\").include?(c) || (\"A\"..\"Z\").include?(c)\n      if c == c.upcase\n\
    \        c.downcase!\n      else\n        c.upcase!\n      end\n    end\n  end\n\
    \  s.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpzm3anoiq\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpzm3anoiq.rb:26:in `test_solve'\n \
    \    23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_solve\n\
    \     25:     candidate = method(:solve)\n  => 26:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     27:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     28:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     29:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"fDsA\">\n===============================================================================\n\
    \nFinished in 0.005888057 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    169.84 tests/s, 169.84 assertions/s\n"
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.tr('A-Za-z', 'a-zA-Z').reverse\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp6fqnsqe4\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp6fqnsqe4.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.007771644 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    128.67 tests/s, 128.67 assertions/s\n"
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.swapcase\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate =\
    \ method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"\
    #aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpwvsclofq\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpwvsclofq.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.00622054 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    160.76 tests/s, 321.52 assertions/s\n"
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    s.tr('a-zA-Z', 'A-Za-z').reverse\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp8ql_4rrz\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp8ql_4rrz.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.005965149 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    167.64 tests/s, 167.64 assertions/s\n"
  timestamp: 1659823459
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  only_chars = s.chars.select { |c|\
    \ c =~ /[a-zA-Z]/ }\n  only_chars.size == 0 ? s.reverse : s.tr('a-zA-Z', 'A-Za-z')\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp95oml_c3

    Started

    .

    Finished in 0.00044888 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2227.77 tests/s, 17822.14 assertions/s

    '
  stdout: ''
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfm39hoqs\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpfm39hoqs.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.007623424 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.17 tests/s, 131.17 assertions/s\n"
  timestamp: 1659823458
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  #your code here\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate =\
    \ method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"\
    #aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpze2upan8\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpze2upan8.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007939155 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.96 tests/s, 125.96 assertions/s\n"
  timestamp: 1659823458
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, \"\").empty? ?\
    \ s.reverse : s.swapcase\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmplwbj5uaf\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmplwbj5uaf.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"fDsA\">\n===============================================================================\n\
    \nFinished in 0.005802479 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    172.34 tests/s, 172.34 assertions/s\n"
  timestamp: 1659823459
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  !(s =~ /[a-zA-Z]/) ? s.reverse :\
    \ s.swapcase\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp_59e2zp4

    Started

    .

    Finished in 0.000501513 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1993.97 tests/s, 15951.73 assertions/s

    '
  stdout: ''
  timestamp: 1659823459
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n\tif s.match?(/[a-zA-Z]/)\n\t\ts.swapcase!\n\
    \telse\n\t\ts.reverse!\n\tend\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n   \
    \ assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphydpgepf

    Started

    .

    Finished in 0.0004331 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2308.94 tests/s, 18471.48 assertions/s

    '
  stdout: ''
  timestamp: 1659823459
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  return s.reverse if s.tr('a-zA-Z',\
    \ '') == s\n  s.swapcase\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnpdbt0ng

    Started

    .

    Finished in 0.000437013 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2288.26 tests/s, 18306.09 assertions/s

    '
  stdout: ''
  timestamp: 1659823459
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s = s.chars.map{|c| ('a'..'z').include?(c)\
    \ ? c.upcase : ('A'..'Z').include?(c) ? c.downcase : c}.join\n  s = s.reverse\
    \ if s.scan(/\\p{Alpha}/).empty?\n  s\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzjv2pkyn

    Started

    .

    Finished in 0.000530167 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1886.20 tests/s, 15089.58 assertions/s

    '
  stdout: ''
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/, 'a' => 'A', 'b'\
    \ => 'B', 'c' => 'C', 'd' => 'D', 'e' => 'E', 'f' => 'F', 'g' => 'G', 'h' => 'H',\
    \ 'i' => 'I', 'j' => 'J', 'k' => 'K', 'l' => 'L', 'm' => 'M', 'n' => 'N', 'o'\
    \ => 'O', 'p' => 'P', 'q' => 'Q', 'r' => 'R', 's' => 'S', 't' => 'T', 'u' => 'U',\
    \ 'v' => 'V', 'w' => 'W', 'x' => 'X', 'y' => 'Y', 'z' => 'Z')\n  .gsub(/[A-Z]/,\
    \ 'A' => 'a', 'B' => 'b', 'C' => 'c', 'D' => 'd', 'E' => 'e', 'F' => 'f', 'G'\
    \ => 'g', 'H' => 'h', 'I' => 'i', 'J' => 'j', 'K' => 'k', 'L' => 'l', 'M' => 'm',\
    \ 'N' => 'n', 'O' => 'o', 'P' => 'p', 'Q' => 'q', 'R' => 'r', 'S' => 's', 'T'\
    \ => 't', 'U' => 'u', 'V' => 'v', 'W' => 'w', 'X' => 'x', 'Y' => 'y', 'Z' => 'z')\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp_arjvbau\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp_arjvbau.rb:18:in `test_solve'\n \
    \    15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_solve\n\
    \     17:     candidate = method(:solve)\n  => 18:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     19:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     20:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     21:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"asdf\">\n\ndiff:\n? aSdF\n?  s f\n?  ? ?\n===============================================================================\n\
    \nFinished in 0.00636323 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    157.15 tests/s, 157.15 assertions/s\n"
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  #..\n  if s.include?(\"[a-zA-Z]\"\
    )\n    s.gsub(/[a-zA-Z]/) { |i| i.upcase == i ? i.downcase : i.upcase }\n  else\n\
    \    s.reverse\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpoqf3zfqy\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpoqf3zfqy.rb:22:in `test_solve'\n \
    \    19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_solve\n\
    \     21:     candidate = method(:solve)\n  => 22:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     23:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     24:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     25:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"fDsA\">\n===============================================================================\n\
    \nFinished in 0.007208069 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    138.73 tests/s, 138.73 assertions/s\n"
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    str = []\n    for i in 0..s.length\
    \ - 1\n        if s[i] =~ /[A-Za-z]/\n            if s[i] == s[i].upcase\n   \
    \             str << s[i].downcase\n            else\n                str << s[i].upcase\n\
    \            end\n        else\n            str << s[i]\n        end\n    end\n\
    \    str.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1vb1sx9k\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp1vb1sx9k.rb:30:in `test_solve'\n \
    \    27:   def test_solve\n     28:     candidate = method(:solve)\n     29: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 30:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     31:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     32:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     33:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.006605177 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.40 tests/s, 302.79 assertions/s\n"
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s == s.reverse ? s.reverse : s.gsub(/[a-zA-Z]/,\
    \ 'a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H',\
    \ 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P',\
    \ 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X',\
    \ 'y'=>'Y', 'z'=>'Z', 'A'=>'a', 'B'=>'b', 'C'=>'c', 'D'=>'d', 'E'=>'e', 'F'=>'f',\
    \ 'G'=>'g', 'H'=>'h', 'I'=>'i', 'J'=>'j', 'K'=>'k', 'L'=>'l', 'M'=>'m', 'N'=>'n',\
    \ 'O'=>'o', 'P'=>'p', 'Q'=>'q', 'R'=>'r', 'S'=>'s', 'T'=>'t', 'U'=>'u', 'V'=>'v',\
    \ 'W'=>'w', 'X'=>'x', 'Y'=>'y', 'Z'=>'z')\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpj_z1h8jn\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpj_z1h8jn.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.007049917 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    141.85 tests/s, 283.69 assertions/s\n"
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  if s.length > 0 \n    s.gsub(/[a-zA-Z]/,\
    \ \"abCDEFghIJKLMNopqRSTUVWXYz\" [0..25])\n  else\n    s.reverse\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp6kxe0uhc\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp6kxe0uhc.rb:21:in `test_solve'\n \
    \    18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_solve\n\
    \     20:     candidate = method(:solve)\n  => 21:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     22:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     23:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     24:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"abCDEFghIJKLMNopqRSTUVWXYzabCDEFghIJKLMNopqRSTUVWXYzabCDEFghIJKLMNopqRSTUVWXYzabCDEFghIJKLMNopqRSTUVWXYz\"\
    >\n\ndiff:\n? a                 Sd           F                               \
    \                                         \n?  bCDEFghIJKLMNopqR TUVWXYzabCDE\
    \ ghIJKLMNopqRSTUVWXYzabCDEFghIJKLMNopqRSTUVWXYzabCDEFghIJKLMNopqRSTUVWXYz\n?\
    \  +++++++++++++++++ ? ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
    ===============================================================================\n\
    \nFinished in 0.010159947 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    98.43 tests/s, 98.43 assertions/s\n"
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfm39hoqs\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpfm39hoqs.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.007623424 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.17 tests/s, 131.17 assertions/s\n"
  timestamp: 1659823458
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.tr(\"a-zA-Z\", \"A-Za-z\").reverse\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpjefzjm1n\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpjefzjm1n.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.006528349 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.18 tests/s, 153.18 assertions/s\n"
  timestamp: 1659823458
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.tr(\"a-zA-Z\", \"A-Za-z\").reverse\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpjefzjm1n\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpjefzjm1n.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.006528349 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.18 tests/s, 153.18 assertions/s\n"
  timestamp: 1659823458
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s = s.chars.map { |x| x =~ /[a-z]/\
    \ ? x.upcase : x =~ /[A-Z]/ ? x.downcase : x }.join\n  s.chars.any? { |x| x =~\
    \ /[a-z]/i } ? s : s.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n   \
    \ assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9begq4wt

    Started

    .

    Finished in 0.000483264 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2069.26 tests/s, 16554.10 assertions/s

    '
  stdout: ''
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  (s.chars.map { |c| c[/[a-z]/] ?\
    \ c.swapcase : c }.join).reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnnx0qf7k\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpnnx0qf7k.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FDSA\">\n\ndiff:\n? a SdF\n? FD A \n? ? ?? \n===============================================================================\n\
    \nFinished in 0.00652348 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.29 tests/s, 153.29 assertions/s\n"
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i) { |x| x.swapcase\
    \ }.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpkgr7mbf8\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpkgr7mbf8.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.006294517 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    158.87 tests/s, 158.87 assertions/s\n"
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  # solution 1\n  # str = ''\n  #\
    \ s.each_char do |char|\n  #   if char =~ /[a-zA-Z]/\n  #     char.downcase ==\
    \ char ? str << char.upcase : str << char.downcase\n  #   else\n  #     str <<\
    \ char\n  #   end\n  # end\n  # str.reverse\n  \n  # solution 2\n  s.reverse.tr('a-zA-Z',\
    \ 'A-Za-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpdy0vjxxp\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpdy0vjxxp.rb:29:in `test_solve'\n \
    \    26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_solve\n\
    \     28:     candidate = method(:solve)\n  => 29:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     30:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     31:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     32:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.006269991 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.49 tests/s, 159.49 assertions/s\n"
  timestamp: 1659823459
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  return s.reverse if s.scan(/[a-zA-Z]/).empty?\n\
    \  s.gsub(/[a-zA-Z]/) { |m| m == m.upcase ? m.downcase : m.upcase }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyrfdvhj

    Started

    .

    Finished in 0.000510579 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1958.56 tests/s, 15668.49 assertions/s

    '
  stdout: ''
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    s.chars.map{|x| x =~ /[a-z]/ ?\
    \ x.upcase : x.downcase}.join\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n   \
    \ assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp16lpb349\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp16lpb349.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.006360109 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    157.23 tests/s, 314.46 assertions/s\n"
  timestamp: 1659823459
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n\treturn s.reverse if s[/[a-zA-Z]/].nil?\n\
    \t\n\ts.gsub(/[a-zA-Z]/) { |l| l == l.upcase ? l.downcase : l.upcase }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpc_7xm7y2

    Started

    .

    Finished in 0.000464588 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2152.44 tests/s, 17219.56 assertions/s

    '
  stdout: ''
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  if s.length > 0\n    if s[0].match?(/[a-zA-Z]/)\n\
    \      s[0] = s[0].upcase\n    else\n      return s.reverse\n    end\n    s.length\
    \ > 1 ? s[1..-1] = s[1..-1].downcase : nil\n  else\n    return s.reverse\n  end\n\
    \  s\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n \
    \ def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5u4ybbzy\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp5u4ybbzy.rb:27:in `test_solve'\n \
    \    24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_solve\n\
    \     26:     candidate = method(:solve)\n  => 27:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     28:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     29:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     30:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"Asdf\">\n\ndiff:\n? aSdF\n? As f\n? ?? ?\n===============================================================================\n\
    \nFinished in 0.006100101 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    163.93 tests/s, 163.93 assertions/s\n"
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |char| char.ord.between?(65,\
    \ 90) ? char.downcase : char.upcase }.join(\"\")\nend\np solve(\"1234\") # = \"\
    4321\"\np solve(\"ab\") # = \"AB\"\np solve(\"#a@C\") # = \"#A@c\"\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate =\
    \ method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"\
    #aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "\"1234\"\n\"AB\"\n\"#A@c\"\nLoaded suite /tmp/tmprk6osoh5\nStarted\nF\n\
    ===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmprk6osoh5.rb:21:in `test_solve'\n \
    \    18:   def test_solve\n     19:     candidate = method(:solve)\n     20: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 21:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     22:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     23:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     24:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.006043239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    165.47 tests/s, 330.95 assertions/s\n"
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n\treturn s.swapcase if s.gsub(/[a-zA-Z]/,\
    \ '').length == s.length\n\ts.gsub(/[a-zA-Z]/, 'x').split('').map{|c| c == 'x'\
    \ ? s[s.index(c)].swapcase : c}.join('')\nend\nputs solve(\"#a@C\") # \"#A@c\"\
    \nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: SyntaxError
  stderr: "/tmp/tmpdyaerpfj.rb:12:in `[]': no implicit conversion from nil to integer\
    \ (TypeError)\n\tfrom /tmp/tmpdyaerpfj.rb:12:in `block in solve'\n\tfrom /tmp/tmpdyaerpfj.rb:12:in\
    \ `map'\n\tfrom /tmp/tmpdyaerpfj.rb:12:in `solve'\n\tfrom /tmp/tmpdyaerpfj.rb:14:in\
    \ `<main>'\n"
  stdout: ''
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    s.chars.map { |c| c.match(/[a-z]/i)\
    \ ? c.swapcase : c }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpjrle9nfz\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpjrle9nfz.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.006096959 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    164.02 tests/s, 328.03 assertions/s\n"
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    arr = []\n    s.split(\"\").each\
    \ do |x|\n        arr << x.swapcase\n    end\n    arr.join(\"\")\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp3o1c1sed\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp3o1c1sed.rb:22:in `test_solve'\n \
    \    19:   def test_solve\n     20:     candidate = method(:solve)\n     21: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 22:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     23:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     24:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     25:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.006428913 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    155.55 tests/s, 311.09 assertions/s\n"
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  #s.tr('a-z', 'A-Z')\n  s.tr('a-zA-Z',\
    \ 'A-Za-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphjehjew2\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmphjehjew2.rb:19:in `test_solve'\n \
    \    16:   def test_solve\n     17:     candidate = method(:solve)\n     18: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 19:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     20:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     21:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     22:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.006452648 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    154.98 tests/s, 309.95 assertions/s\n"
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, &:swapcase)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpiwn43274\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpiwn43274.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.006592142 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.70 tests/s, 303.39 assertions/s\n"
  timestamp: 1659823459
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n   new_string = []\n   s.each_char\
    \ do |char|\n    if ('a'..'z').include?(char)\n      new_string << char.upcase\n\
    \    elsif ('A'..'Z').include?(char)\n      new_string << char.downcase\n    else\n\
    \      new_string << char\n    end\n  end\n  if s == new_string.join\n    new_string.reverse.join\n\
    \  else\n    new_string.join\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9jthnz9c

    Started

    .

    Finished in 0.000522286 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1914.66 tests/s, 15317.28 assertions/s

    '
  stdout: ''
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map{|x| x.match(/[a-z]/i)\
    \ ? x.upcase != x ? x.upcase : x.downcase : x}.join\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate =\
    \ method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"\
    #aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpj88j2wvt\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpj88j2wvt.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.007090147 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    141.04 tests/s, 282.08 assertions/s\n"
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  str = \"\"\n  s.each_char do |char|\n\
    \    if char.match(/[a-zA-Z]/)\n      str << char.swapcase\n    else\n      str\
    \ << char\n    end\n  end\n  str\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpeoa2zd52\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpeoa2zd52.rb:26:in `test_solve'\n \
    \    23:   def test_solve\n     24:     candidate = method(:solve)\n     25: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 26:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     27:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     28:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     29:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.006431143 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    155.49 tests/s, 310.99 assertions/s\n"
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  chars = s.chars\n  reversed = []\n\
    \  chars.each do |char|\n    if char == char.downcase\n      reversed << char.upcase\n\
    \    elsif char == char.upcase\n      reversed << char.downcase\n    else\n  \
    \    reversed << char\n    end\n  end\n  reversed.join(\"\")\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate =\
    \ method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"\
    #aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp62pih3w3\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp62pih3w3.rb:29:in `test_solve'\n \
    \    26:   def test_solve\n     27:     candidate = method(:solve)\n     28: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 29:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     30:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     31:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     32:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.006059969 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    165.02 tests/s, 330.03 assertions/s\n"
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfm39hoqs\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpfm39hoqs.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.007623424 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.17 tests/s, 131.17 assertions/s\n"
  timestamp: 1659823458
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s =~ /[a-zA-Z]/ ? s.swapcase : s.reverse\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphfrn5yw8

    Started

    .

    Finished in 0.000441069 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2267.22 tests/s, 18137.75 assertions/s

    '
  stdout: ''
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    s.tr('a-zA-Z', 'A-Za-z').reverse\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp8ql_4rrz\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp8ql_4rrz.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.005965149 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    167.64 tests/s, 167.64 assertions/s\n"
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  res = []\n  split = s.split('')\n\
    \  split.each do |letter|\n    if letter == letter.upcase\n      res << letter.downcase\n\
    \    elsif letter == letter.downcase\n      res << letter.upcase\n    else\n \
    \     res << letter\n    end\n  end\n  res.join('')\nend\np solve(\"ab\")\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "\"AB\"\nLoaded suite /tmp/tmpy70pr2db\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpy70pr2db.rb:30:in `test_solve'\n \
    \    27:   def test_solve\n     28:     candidate = method(:solve)\n     29: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 30:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     31:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     32:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     33:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.006882596 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.29 tests/s, 290.59 assertions/s\n"
  timestamp: 1659823460
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  if s.count(\"a-zA-Z\") == 0\n  \
    \  s.reverse\n  else\n    s.split(\"\").map{|char| char =~ /[a-zA-Z]/ ? char.swapcase\
    \ : char}.join(\"\")\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp6te1rnpw

    Started

    .

    Finished in 0.000543629 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1839.49 tests/s, 14715.92 assertions/s

    '
  stdout: ''
  timestamp: 1659823460
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  return s.reverse if s.match(/[a-zA-Z]/).nil?\n\
    \  s.chars.map{|x| x.match(/[a-zA-Z]/) ? x.upcase == x ? x.downcase : x.upcase\
    \ : x}.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpi7k35n6j

    Started

    .

    Finished in 0.000465164 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2149.78 tests/s, 17198.24 assertions/s

    '
  stdout: ''
  timestamp: 1659823460
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  return s.reverse if s.gsub(/[a-zA-Z]/,\
    \ '').length == s.length\n  s.split('').map { |c| ('a'..'z').include?(c) ? c.upcase\
    \ : ('A'..'Z').include?(c) ? c.downcase : c }.join('')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate =\
    \ method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"\
    #aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpa742ipai

    Started

    .

    Finished in 0.000641093 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1559.84 tests/s, 12478.69 assertions/s

    '
  stdout: ''
  timestamp: 1659823460
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s = s.split(\"\")\n  if s.all? {|char|\
    \ char =~ /[^a-zA-Z]/}\n    s.reverse.join\n  else\n    s.map do |char|\n    \
    \  if char =~ /[a-z]/\n        char.upcase\n      elsif char =~ /[A-Z]/\n    \
    \    char.downcase\n      else\n        char\n      end\n    end.join\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpwk_06n5i

    Started

    .

    Finished in 0.000512756 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1950.25 tests/s, 15601.96 assertions/s

    '
  stdout: ''
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    s.split(\"\").map { |x| x.match(/[a-zA-Z]/)\
    \ ? x.swapcase : x}.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpw3qgxof1\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpw3qgxof1.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.006464939 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    154.68 tests/s, 309.36 assertions/s\n"
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.reverse!\n  s.gsub!(/[a-z]/, 'a'\
    \ => 'A', 'b' => 'B', 'c' => 'C', 'd' => 'D', 'e' => 'E', 'f' => 'F', 'g' => 'G',\
    \ 'h' => 'H', 'i' => 'I', 'j' => 'J', 'k' => 'K', 'l' => 'L', 'm' => 'M', 'n'\
    \ => 'N', 'o' => 'O', 'p' => 'P', 'q' => 'Q', 'r' => 'R', 's' => 'S', 't' => 'T',\
    \ 'u' => 'U', 'v' => 'V', 'w' => 'W', 'x' => 'X', 'y' => 'Y', 'z' => 'Z')\n  s.gsub!(/[A-Z]/,\
    \ 'A' => 'a', 'B' => 'b', 'C' => 'c', 'D' => 'd', 'E' => 'e', 'F' => 'f', 'G'\
    \ => 'g', 'H' => 'h', 'I' => 'i', 'J' => 'j', 'K' => 'k', 'L' => 'l', 'M' => 'm',\
    \ 'N' => 'n', 'O' => 'o', 'P' => 'p', 'Q' => 'q', 'R' => 'r', 'S' => 's', 'T'\
    \ => 't', 'U' => 'u', 'V' => 'v', 'W' => 'w', 'X' => 'x', 'Y' => 'y', 'Z' => 'z')\n\
    \  s\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n \
    \ def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgpzqrkmb\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpgpzqrkmb.rb:20:in `test_solve'\n \
    \    17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_solve\n\
    \     19:     candidate = method(:solve)\n  => 20:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     21:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     22:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     23:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"fdsa\">\n\ndiff:\n? fdsaSdF\n===============================================================================\n\
    \nFinished in 0.006745401 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.25 tests/s, 148.25 assertions/s\n"
  timestamp: 1659823460
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  if s.scan(/[a-zA-Z]/).length ==\
    \ 0\n    return s.reverse\n  else\n    s.split(\"\").map{|i| /[a-zA-Z]/.match(i)\
    \ ? i == i.upcase ? i.downcase : i.upcase : i}.join(\"\")\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpq2yfmbs0

    Started

    .

    Finished in 0.000519041 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1926.63 tests/s, 15413.04 assertions/s

    '
  stdout: ''
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.tr('a-z', 'A-Z').reverse\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpj4az96lp\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpj4az96lp.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FDSA\">\n\ndiff:\n? a SdF\n? FD A \n? ? ?? \n===============================================================================\n\
    \nFinished in 0.007858636 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.25 tests/s, 127.25 assertions/s\n"
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |c| c =~ /[a-z]/ ?\
    \ c.upcase : c.downcase }.join('')\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpjz3rt_2f\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpjz3rt_2f.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.006202254 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    161.23 tests/s, 322.46 assertions/s\n"
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  #your code here\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate =\
    \ method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"\
    #aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpze2upan8\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpze2upan8.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007939155 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.96 tests/s, 125.96 assertions/s\n"
  timestamp: 1659823458
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  return s.reverse unless /[a-zA-Z]/.match(s)\n\
    \  s.split('').map{|c| c.match(/[a-zA-Z]/) ? c.swapcase : c}.join('')\nend\np\
    \ solve(\"mY-mAn\")\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: OK
  stderr: '"My-MaN"

    Loaded suite /tmp/tmp_l_bmh5p

    Started

    .

    Finished in 0.000484988 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2061.91 tests/s, 16495.25 assertions/s

    '
  stdout: ''
  timestamp: 1659823460
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  if s.scan(/[a-zA-Z]/).empty?\n \
    \   s.reverse\n  else\n    s.gsub(/[a-zA-Z]/) { |letter| letter == letter.upcase\
    \ ? letter.downcase : letter.upcase }\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n\
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5potu2yf

    Started

    .

    Finished in 0.000497411 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2010.41 tests/s, 16083.28 assertions/s

    '
  stdout: ''
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s == s.reverse\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate =\
    \ method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"\
    #aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprmywq1eh\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmprmywq1eh.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<false>\n\ndiff:\n? \"aSdF\"\n? f lse \n? ? ???? \n===============================================================================\n\
    \nFinished in 0.006996124 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    142.94 tests/s, 142.94 assertions/s\n"
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map { |char| (char =~ /[a-z]/i)\
    \ ? char.swapcase : char }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpchjw15vp\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpchjw15vp.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.006656324 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.23 tests/s, 300.47 assertions/s\n"
  timestamp: 1659823460
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  return s.reverse if s.gsub(/[A-Za-z]/,\
    \ '').length == s.length\n  s.chars.map { |x| x.downcase == x ? x.upcase : x.downcase\
    \ }.join('')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp6vlpxx8z

    Started

    .

    Finished in 0.000539282 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1854.32 tests/s, 14834.54 assertions/s

    '
  stdout: ''
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.reverse.tr(\"a-z\", \"A-Z\").tr(\"\
    A-Z\", \"a-z\")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5r0zob5h\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp5r0zob5h.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"fdsa\">\n\ndiff:\n? fdsaSdF\n===============================================================================\n\
    \nFinished in 0.011080632 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    90.25 tests/s, 90.25 assertions/s\n"
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.swapcase! if s[/[a-zA-Z]/]\n \
    \ s.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpm94vg41s\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpm94vg41s.rb:18:in `test_solve'\n \
    \    15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_solve\n\
    \     17:     candidate = method(:solve)\n  => 18:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     19:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     20:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     21:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.006509589 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.62 tests/s, 153.62 assertions/s\n"
  timestamp: 1659823460
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  #your code here\n  if s.match(/[a-zA-Z]/)\n\
    \    s.split(\"\").map {|x| x.match(/[a-zA-Z]/) ? x.swapcase : x}.join(\"\")\n\
    \  else\n    s.reverse\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n   \
    \ assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpi322k8e3

    Started

    .

    Finished in 0.000480276 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2082.14 tests/s, 16657.09 assertions/s

    '
  stdout: ''
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    #..\n    if s.empty?\n       \
    \ return s\n    end\n    s=s.reverse\n    s=s.chars.map{|x|if (x=~/[a-z]/)==0\
    \ then x.upcase else x.downcase end}.join(\"\")\n    return s\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate =\
    \ method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"\
    #aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp_b8e1xqc\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp_b8e1xqc.rb:23:in `test_solve'\n \
    \    20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_solve\n\
    \     22:     candidate = method(:solve)\n  => 23:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     24:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     25:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     26:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.006545549 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.78 tests/s, 152.78 assertions/s\n"
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map{|x| x =~ /[a-z]/ ? x.swapcase\
    \ : x}.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5npn1p8u\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp5npn1p8u.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"ASDF\">\n\ndiff:\n? aSdF\n? A D \n? ? ? \n===============================================================================\n\
    \nFinished in 0.006408269 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    156.05 tests/s, 156.05 assertions/s\n"
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s = s.split(\"\")\n  s.map! do |char|\n\
    \    if char =~ /[a-z]/i\n      char == char.upcase ? char.downcase : char.upcase\n\
    \    else\n      char\n    end\n  end\n  s.join(\"\")\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate =\
    \ method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"\
    #aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnt2rih2p\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpnt2rih2p.rb:26:in `test_solve'\n \
    \    23:   def test_solve\n     24:     candidate = method(:solve)\n     25: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 26:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     27:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     28:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     29:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.006369758 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    156.99 tests/s, 313.98 assertions/s\n"
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.reverse.split(\"\").map { |x|\
    \ x.match(/[a-zA-Z]/) ? x.swapcase : x }.join(\"\")\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate =\
    \ method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"\
    #aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphbj07yeh\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmphbj07yeh.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.006240479 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    160.24 tests/s, 160.24 assertions/s\n"
  timestamp: 1659823460
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  alpha_indexes = []\n  s.split('').each_with_index\
    \ do |x, i|\n    alpha_indexes << i if x.match(/[a-zA-Z]/)\n  end\n  alpha_indexes.each\
    \ do |i|\n    s[i] = s[i].swapcase\n  end\n  return s.reverse if alpha_indexes.empty?\n\
    \  s\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n \
    \ def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpogax3j39

    Started

    .

    Finished in 0.000523357 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1910.74 tests/s, 15285.93 assertions/s

    '
  stdout: ''
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    s.gsub(/\\w/, &:swapcase)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprvni6a0g\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmprvni6a0g.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.006402681 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    156.18 tests/s, 312.37 assertions/s\n"
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    n = ''\n    (0...s.length).each\
    \ do |i|\n        if s[i] == s[i].upcase\n            n << s[i].downcase\n   \
    \     elsif s[i] == s[i].downcase\n            n << s[i].upcase\n        else\n\
    \            n << s[i]\n        end\n    end\n    n\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate =\
    \ method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"\
    #aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpmkfn6n5m\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpmkfn6n5m.rb:28:in `test_solve'\n \
    \    25:   def test_solve\n     26:     candidate = method(:solve)\n     27: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 28:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     29:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     30:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     31:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.00611264 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    163.60 tests/s, 327.19 assertions/s\n"
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    res = []\n    s.split(\"\").each\
    \ do |l|\n        res << l.swapcase\n    end\n    res.join\nend\nputs solve(\"\
    ab\")\nputs solve(\"#a@C\")\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "AB\n#A@c\nLoaded suite /tmp/tmpq94_co1m\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpq94_co1m.rb:24:in `test_solve'\n \
    \    21:   def test_solve\n     22:     candidate = method(:solve)\n     23: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 24:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     25:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     26:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     27:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.006755263 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.03 tests/s, 296.07 assertions/s\n"
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  #two cases\n  #not letters at all\
    \ => reverse\n  #letters? reverse cases\n  s.chars.inject([]) {|arr, c| arr <<\
    \ c.match(/[a-zA-Z]/) ? c.upcase == c ? c.downcase : c.upcase : c}.join\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpyiq03t8s\nStarted\nE\n===============================================================================\n\
    Error: test_solve(TestHumanEval): TypeError: no implicit conversion of MatchData\
    \ into String\n/tmp/tmpyiq03t8s.rb:14:in `<<'\n/tmp/tmpyiq03t8s.rb:14:in `block\
    \ in solve'\n/tmp/tmpyiq03t8s.rb:14:in `each'\n/tmp/tmpyiq03t8s.rb:14:in `inject'\n\
    /tmp/tmpyiq03t8s.rb:14:in `solve'\n/tmp/tmpyiq03t8s.rb:20:in `call'\n/tmp/tmpyiq03t8s.rb:20:in\
    \ `test_solve'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:\
    \   def test_solve\n     19:     candidate = method(:solve)\n  => 20:     assert_equal(\"\
    aSdF\", candidate.call(\"AsDf\"))\n     21:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     22:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     23:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n===============================================================================\n\
    \nFinished in 0.001198065 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    834.68 tests/s, 0.00 assertions/s\n"
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  if s.empty?\n    s.reverse\n  else\n\
    \    s.split(\"\").map{|letter| letter.match(/[a-zA-Z]/) ? letter.swapcase : letter}.join\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpyf069ygq\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpyf069ygq.rb:22:in `test_solve'\n \
    \    19:   def test_solve\n     20:     candidate = method(:solve)\n     21: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 22:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     23:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     24:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     25:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.007611546 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.38 tests/s, 262.76 assertions/s\n"
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.reverse.tr(\"A-Za-z\", \"a-zA-Z\"\
    )\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpijnmtuuv\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpijnmtuuv.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.007058718 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    141.67 tests/s, 141.67 assertions/s\n"
  timestamp: 1659823460
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  if s.match(/[a-zA-Z]/) == nil\n\
    \    s.reverse\n  else\n    s.swapcase\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n\
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp2wr7hg54

    Started

    .

    Finished in 0.000448842 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2227.96 tests/s, 17823.64 assertions/s

    '
  stdout: ''
  timestamp: 1659823460
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    arr = s.split(\"\")\n    arr.each_with_index\
    \ do |x, i|\n        if x.ord >= 97 and x.ord <= 122\n            arr[i] = x.upcase\n\
    \        elsif x.ord >= 65 and x.ord <= 90\n            arr[i] = x.downcase\n\
    \        end\n    end\n    s = arr.join(\"\")\n    if s.match(/[a-zA-Z]/)\n  \
    \      s\n    else\n        s.reverse\n    end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n\
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpkmsib_ay

    Started

    .

    Finished in 0.000488945 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2045.22 tests/s, 16361.76 assertions/s

    '
  stdout: ''
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  reverse_str = \"\"\n  s.each_char\
    \ do |char|\n    if char.match(/[a-zA-Z]/)\n      reverse_str += char.swapcase\n\
    \    else\n      reverse_str += char\n    end\n  end\n  reverse_str\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp6wram110\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp6wram110.rb:26:in `test_solve'\n \
    \    23:   def test_solve\n     24:     candidate = method(:solve)\n     25: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 26:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     27:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     28:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     29:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.007115458 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    140.54 tests/s, 281.08 assertions/s\n"
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  letters = (0..9).to_a + ('a'..'z').to_a\
    \ + ('A'..'Z').to_a\n  result = []\n  s.split('').each do |char|\n    if letters.include?(char)\n\
    \      if char == char.upcase\n        result << char.downcase\n      else\n \
    \       result << char.upcase\n      end\n    else\n      result << char\n   \
    \ end\n  end\n  result.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcxu9qma9\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpcxu9qma9.rb:31:in `test_solve'\n \
    \    28:   def test_solve\n     29:     candidate = method(:solve)\n     30: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 31:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     32:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     33:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     34:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.006742474 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.31 tests/s, 296.63 assertions/s\n"
  timestamp: 1659823460
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  num_letters = ('a'..'z').to_a.concat(('A'..'Z').to_a)\n\
    \  return s.reverse if s.split('').select{|n|num_letters.include?(n)}.empty?\n\
    \  s.split('').map do |i|\n    if num_letters.include?(i)\n      i == i.upcase\
    \ ? i.downcase : i.upcase\n    else\n      i\n    end\n  end.join('')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp2pqifg1x

    Started

    .

    Finished in 0.000682641 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1464.90 tests/s, 11719.19 assertions/s

    '
  stdout: ''
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  # your code\n  chars = s.split('')\n\
    \  chars.each_with_index do |char, index|\n    chars[index] = char.upcase! ||\
    \ char.downcase! if char =~ /[a-zA-Z]/\n  end\n  chars.reverse.join\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpokn8e92p\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpokn8e92p.rb:22:in `test_solve'\n \
    \    19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_solve\n\
    \     21:     candidate = method(:solve)\n  => 22:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     23:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     24:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     25:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.0065813 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.95 tests/s, 151.95 assertions/s\n"
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i) { |letter| letter\
    \ == letter.upcase ? letter.downcase : letter.upcase }.reverse\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate =\
    \ method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"\
    #aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp6y5mdnae\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp6y5mdnae.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.006064352 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    164.90 tests/s, 164.90 assertions/s\n"
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    case s.chars.all? { |c| !(\"a\"\
    ..\"z\").include?(c) }\n        when true\n            s.reverse\n        when\
    \ false\n            s.chars.map { |c| c.ord.between?(65, 90) ? c.downcase : c.upcase\
    \ }.join(\"\")\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpdjqngbnt\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpdjqngbnt.rb:28:in `test_solve'\n \
    \    25:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     26:     assert_equal(\"\
    #aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n     27:     assert_equal(\"2@6#\"\
    , candidate.call(\"#6@2\"))\n  => 28:     assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n     29:     assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n   \
    \  30:   end\n     31: end\n<\"^d\"> expected but was\n<\"D^\">\n\ndiff:\n? D^d\n\
    ===============================================================================\n\
    \nFinished in 0.006390026 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    156.49 tests/s, 1095.46 assertions/s\n"
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n\t# write your code here\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpdmokzhlv\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpdmokzhlv.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00761412 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.33 tests/s, 131.33 assertions/s\n"
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  p = ('a'..'z').to_a\n  q = ('A'..'Z').to_a\n\
    \  rev = []\n  if s.chars.all? {|x| p.include?(x) || q.include?(x)}\n    s.chars.each\
    \ do |i|\n      if p.include?(i)\n        rev << i.upcase\n      else\n      \
    \  rev << i.downcase\n      end\n    end\n    return rev.join('')\n  elsif s.chars.all?\
    \ {|x| p.include?(x) == false && q.include?(x) == false}\n    return s.reverse\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnz8o9wcz\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpnz8o9wcz.rb:34:in `test_solve'\n \
    \    31:     assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n     32:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     33:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n  => 34:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     35:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n     36:   \
    \  assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n     37:     assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n<\"#A@c\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007189255 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.10 tests/s, 556.39 assertions/s\n"
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    newString = \"\"\n    count =\
    \ 0\n    if !s.chars.any? {|x| (\"a\"..\"z\").include?(x)}\n        newString\
    \ = s.reverse\n    else\n        for i in 0..s.length - 1\n            if !s[i].match(/[a-z]/)\n\
    \                newString = newString + s[i]\n            else\n            \
    \    count = 1\n                newString = newString + s[i].swapcase\n      \
    \      end\n        end\n    end\n    if count == 0\n        newString = newString.reverse\n\
    \    end\n    return newString\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpj_fpr7x7\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpj_fpr7x7.rb:34:in `test_solve'\n \
    \    31: class TestHumanEval < Test::Unit::TestCase\n     32:   def test_solve\n\
    \     33:     candidate = method(:solve)\n  => 34:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     35:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     36:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     37:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"ASDF\">\n\ndiff:\n? aSdF\n? A D \n? ? ? \n===============================================================================\n\
    \nFinished in 0.006533352 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.06 tests/s, 153.06 assertions/s\n"
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpsu6qzx_x\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpsu6qzx_x.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.006118884 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    163.43 tests/s, 163.43 assertions/s\n"
  timestamp: 1659823460
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  if s.match?(/[a-zA-Z]/)\n    s.swapcase\n\
    \  else\n    s.reverse\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n   \
    \ assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmprdjuw4il

    Started

    .

    Finished in 0.000504259 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1983.11 tests/s, 15864.86 assertions/s

    '
  stdout: ''
  timestamp: 1659823458
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.reverse.gsub(/./) { |c| ('a'..'z').cover?(c)\
    \ ? c.upcase : c.downcase }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp00ssbeo8\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp00ssbeo8.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.006356821 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    157.31 tests/s, 157.31 assertions/s\n"
  timestamp: 1659823460
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  if s.count(\"a-zA-Z\") == 0\n  \
    \  s.reverse\n  else\n    s.chars.map{|c| c =~ /[a-z]/ ? c.upcase : c.downcase}.join\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnhfpetng

    Started

    .

    Finished in 0.000524588 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1906.26 tests/s, 15250.06 assertions/s

    '
  stdout: ''
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.reverse.gsub(/\\w/) { |x| x ==\
    \ x.upcase ? x.downcase : x.upcase }\nend\nputs solve(\"#a@C\")\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate =\
    \ method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"\
    #aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "c@A#\nLoaded suite /tmp/tmpgs0bxf3w\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpgs0bxf3w.rb:18:in `test_solve'\n \
    \    15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_solve\n\
    \     17:     candidate = method(:solve)\n  => 18:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     19:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     20:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     21:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.008784013 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.84 tests/s, 113.84 assertions/s\n"
  timestamp: 1659823460
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    a = s.split(\"\")\n    if a.any?{|x|\
    \ x =~ /[a-zA-Z]/}\n        b = a.map do |x|\n            if x =~ /[a-z]/\n  \
    \              x.upcase\n            elsif x =~ /[A-Z]/\n                x.downcase\n\
    \            else\n                x\n            end\n        end\n        return\
    \ b.join(\"\")\n    else\n        return s.reverse\n    end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate =\
    \ method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"\
    #aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpse09pui0

    Started

    .

    Finished in 0.000519759 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1923.97 tests/s, 15391.75 assertions/s

    '
  stdout: ''
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  new_str = \"\"\n  s.each_char do\
    \ |c|\n    if c =~ /[[:alpha:]]/\n      new_str << c.swapcase\n    else\n    \
    \  new_str << c\n    end\n  end\n  new_str.reverse\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate =\
    \ method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"\
    #aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpo6dsn_jq\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpo6dsn_jq.rb:25:in `test_solve'\n \
    \    22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_solve\n\
    \     24:     candidate = method(:solve)\n  => 25:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     26:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     27:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     28:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.009233794 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    108.30 tests/s, 108.30 assertions/s\n"
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    s.gsub(/[a-z]|[A-Z]/, 'a'=>'A',\
    \ 'A'=>'a', 'b'=>'B', 'B'=>'b', 'c'=>'C', 'C'=>'c', 'd'=>'D', 'D'=>'d', 'e'=>'E',\
    \ 'E'=>'e', 'f'=>'F', 'F'=>'f', 'g'=>'G', 'G'=>'g', 'h'=>'H', 'H'=>'h', 'i'=>'I',\
    \ 'I'=>'i', 'j'=>'J', 'J'=>'j', 'k'=>'K', 'K'=>'k', 'l'=>'L', 'L'=>'l', 'm'=>'M',\
    \ 'M'=>'m', 'n'=>'N', 'N'=>'n', 'o'=>'O', 'O'=>'o', 'p'=>'P', 'P'=>'p', 'q'=>'Q',\
    \ 'Q'=>'q', 'r'=>'R', 'R'=>'r', 's'=>'S', 'S'=>'s', 't'=>'T', 'T'=>'t', 'u'=>'U',\
    \ 'U'=>'u', 'v'=>'V', 'V'=>'v', 'w'=>'W', 'W'=>'w', 'x'=>'X', 'X'=>'x', 'y'=>'Y',\
    \ 'Y'=>'y', 'z'=>'Z', 'Z'=>'z')\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4uozbmh5\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp4uozbmh5.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.009265156 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    107.93 tests/s, 215.86 assertions/s\n"
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.swapcase\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate =\
    \ method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"\
    #aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpwvsclofq\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpwvsclofq.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.00622054 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    160.76 tests/s, 321.52 assertions/s\n"
  timestamp: 1659823459
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.map{|x| ('a'..'z').include?(x)\
    \ ? x.upcase : ('A'..'Z').include?(x) ? x.downcase : x}.join\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate =\
    \ method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"\
    #aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfmxkagkj\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpfmxkagkj.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.006146697 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    162.69 tests/s, 325.38 assertions/s\n"
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  if s.gsub(/[^a-zA-Z]/, '').empty?\n\
    \    s.reverse\n  else\n    s.reverse!.chars.map do |char|\n      if char =~ /[a-zA-Z]/\n\
    \        char == char.upcase ? char.downcase : char.upcase\n      else\n     \
    \   char\n      end\n    end.join\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpftsdkvqe\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpftsdkvqe.rb:27:in `test_solve'\n \
    \    24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_solve\n\
    \     26:     candidate = method(:solve)\n  => 27:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     28:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     29:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     30:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.006602199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.46 tests/s, 151.46 assertions/s\n"
  timestamp: 1659823460
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    if s.count(\"a-zA-Z\") == 0\n\
    \        s.reverse\n    else\n        answer = \"\"\n        s.each_char do |char|\n\
    \            if char =~ /[[:alpha:]]/\n                char.match(/[[:upper:]]/)\
    \ ? answer += char.downcase : answer += char.upcase\n            else\n      \
    \          answer += char\n            end\n        end\n        answer\n    end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmprzemwugo

    Started

    .

    Finished in 0.000468249 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2135.62 tests/s, 17084.93 assertions/s

    '
  stdout: ''
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    s.chars.map { |c| c =~ /[a-z]/\
    \ ? c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp8o80bo4a\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp8o80bo4a.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.006690823 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    149.46 tests/s, 298.92 assertions/s\n"
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    s.chars.map { |letter| letter.swapcase\
    \ }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpeqmagn6z\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpeqmagn6z.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.006203006 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    161.21 tests/s, 322.42 assertions/s\n"
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  ans = \"\"\n  s.each_char do |ch|\n\
    \    ans += ch.swapcase!\n  end\n  ans\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpo4u4aewt\nStarted\nE\n===============================================================================\n\
    Error: test_solve(TestHumanEval): TypeError: no implicit conversion of nil into\
    \ String\n/tmp/tmpo4u4aewt.rb:13:in `+'\n/tmp/tmpo4u4aewt.rb:13:in `block in solve'\n\
    /tmp/tmpo4u4aewt.rb:12:in `each_char'\n/tmp/tmpo4u4aewt.rb:12:in `solve'\n/tmp/tmpo4u4aewt.rb:22:in\
    \ `call'\n/tmp/tmpo4u4aewt.rb:22:in `test_solve'\n     19:   def test_solve\n\
    \     20:     candidate = method(:solve)\n     21:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n  => 22:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     23:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     24:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     25:     assert_equal(\"\
    #aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n===============================================================================\n\
    \nFinished in 0.001193151 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    838.12 tests/s, 838.12 assertions/s\n"
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    # 1. Solution\n    # s.gsub(/[a-z]/,\
    \ &:swapcase)\n    \n    # 2. Solution\n    # s.gsub(/[a-z]/, '\\0'.swapcase)\n\
    \    \n    # 3. Solution\n    # s.tr(\"a-z\", \"A-Z\").reverse.tr(\"a-z\", \"\
    A-Z\").reverse\n    \n    # 4. Solution\n    # s.gsub(/[a-z]/i, &:swapcase)\n\
    \    \n    # 5. Solution\n    # s.swapcase\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpodcuh_k3\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpodcuh_k3.rb:30:in `test_solve'\n \
    \    27: class TestHumanEval < Test::Unit::TestCase\n     28:   def test_solve\n\
    \     29:     candidate = method(:solve)\n  => 30:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     31:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     32:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     33:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006534696 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.03 tests/s, 153.03 assertions/s\n"
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, {'a'=>'A', 'b'=>'B',\
    \ 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J',\
    \ 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R',\
    \ 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z',\
    \ 'A'=>'a', 'B'=>'b', 'C'=>'c', 'D'=>'d', 'E'=>'e', 'F'=>'f', 'G'=>'g', 'H'=>'h',\
    \ 'I'=>'i', 'J'=>'j', 'K'=>'k', 'L'=>'l', 'M'=>'m', 'N'=>'n', 'O'=>'o', 'P'=>'p',\
    \ 'Q'=>'q', 'R'=>'r', 'S'=>'s', 'T'=>'t', 'U'=>'u', 'V'=>'v', 'W'=>'w', 'X'=>'x',\
    \ 'Y'=>'y', 'Z'=>'z'})\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpaez38t77\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpaez38t77.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.006737574 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.42 tests/s, 296.84 assertions/s\n"
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.reverse.map { |c| c =~ /[a-z]/\
    \ ? c.upcase : c.downcase }.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptm0u22ya\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmptm0u22ya.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.011523667 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.78 tests/s, 86.78 assertions/s\n"
  timestamp: 1659823460
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  letters = s.scan(/[a-zA-Z]/)\n \
    \ if letters.empty?\n    s.reverse\n  else\n    new_s = \"\"\n    s.each_char\
    \ do |char|\n      if /[a-zA-Z]/.match(char)\n        if char == char.upcase\n\
    \          new_s << char.downcase\n        else\n          new_s << char.upcase\n\
    \        end\n      else\n        new_s << char\n      end\n    end\n    new_s\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpeg5izkot

    Started

    .

    Finished in 0.000465018 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2150.45 tests/s, 17203.64 assertions/s

    '
  stdout: ''
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n\tputs s.chars.reverse_each.each_with_index.map\
    \ { |c,i| i.even? ? c.swapcase : c}.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n \
    \   assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp8kh1t0my\nStarted\nFDSA\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp8kh1t0my.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006254943 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.87 tests/s, 159.87 assertions/s\n"
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    s.reverse.gsub(/[a-z]/i, &:swapcase)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgi3_gr9j\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpgi3_gr9j.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.006205055 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    161.16 tests/s, 161.16 assertions/s\n"
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    s.chars.map{|c| c.count(\"a-zA-Z\"\
    )==1 ? c.swapcase : c}.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpe0nztfzj\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpe0nztfzj.rb:18:in `test_solve'\n \
    \    15:   def test_solve\n     16:     candidate = method(:solve)\n     17: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 18:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     20:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     21:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.00667949 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    149.71 tests/s, 299.42 assertions/s\n"
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfm39hoqs\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpfm39hoqs.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"\">\n===============================================================================\n\
    \nFinished in 0.007623424 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.17 tests/s, 131.17 assertions/s\n"
  timestamp: 1659823458
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.chars.each_with_object('') do\
    \ |c, r|\n    c =~ /[a-z]/ ? r << c.swapcase : r << c\n  end.reverse\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4hfxt8or\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp4hfxt8or.rb:19:in `test_solve'\n \
    \    16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_solve\n\
    \     18:     candidate = method(:solve)\n  => 19:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     20:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     21:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     22:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FDSA\">\n\ndiff:\n? a SdF\n? FD A \n? ? ?? \n===============================================================================\n\
    \nFinished in 0.007663896 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    130.48 tests/s, 130.48 assertions/s\n"
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n\t(0...s.length).each do |i|\n\t\t\
    if s[i] =~ /[[:alpha:]]/\n\t\t\ts[i] = (s[i] == s[i].upcase ? s[i].downcase :\
    \ s[i].upcase)\n\t\tend\n\tend\n\ts.length > 0 ? s : s.reverse\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate =\
    \ method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"\
    #aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5142gbox\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp5142gbox.rb:23:in `test_solve'\n \
    \    20:   def test_solve\n     21:     candidate = method(:solve)\n     22: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 23:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     24:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     25:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     26:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.006823266 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    146.56 tests/s, 293.11 assertions/s\n"
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  str = s.scan(/\\w/).join\n  str.empty?\
    \ ? s.reverse : str.swapcase\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_solve\n    candidate = method(:solve)\n   \
    \ assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"4321\"\
    , candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n\
    \    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\"\
    , candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp0p1jo3pe\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp0p1jo3pe.rb:19:in `test_solve'\n \
    \    16:   def test_solve\n     17:     candidate = method(:solve)\n     18: \
    \    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n  => 19:     assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n     20:     assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n     21:     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n     22:\
    \     assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n<\"4321\"> expected\
    \ but was\n<\"1234\">\n\ndiff:\n? 1234321\n===============================================================================\n\
    \nFinished in 0.005836692 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    171.33 tests/s, 342.66 assertions/s\n"
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  reversed = s.reverse\n  new_str\
    \ = \"\"\n  s.length.times do |i|\n    if s[i] == s[i].upcase\n      new_str <<\
    \ reversed[i].downcase\n    elsif s[i] == s[i].downcase\n      new_str << reversed[i].upcase\n\
    \    else\n      new_str << reversed[i]\n    end\n  end\n  if s == s.downcase\
    \ || s == s.upcase\n    new_str\n  else\n    s\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_solve\n    candidate =\
    \ method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"))\n    assert_equal(\"\
    4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\", candidate.call(\"\
    ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n    assert_equal(\"\
    #aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"\
    #6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"\
    #CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmplt1gagn8\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmplt1gagn8.rb:32:in `test_solve'\n \
    \    29: class TestHumanEval < Test::Unit::TestCase\n     30:   def test_solve\n\
    \     31:     candidate = method(:solve)\n  => 32:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     33:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     34:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     35:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"AsDf\">\n===============================================================================\n\
    \nFinished in 0.007308109 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.83 tests/s, 136.83 assertions/s\n"
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s.reverse.tr(\"a-zA-Z\", \"A-Za-z\"\
    )\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp9d2_1afy\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp9d2_1afy.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.005773602 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    173.20 tests/s, 173.20 assertions/s\n"
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    s.reverse.gsub(/[a-z]/, &:upcase).gsub(/[A-Z]/,\
    \ &:downcase)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpwbmcusy_\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpwbmcusy_.rb:17:in `test_solve'\n \
    \    14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_solve\n\
    \     16:     candidate = method(:solve)\n  => 17:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     18:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     19:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     20:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"fdsa\">\n\ndiff:\n? fdsaSdF\n===============================================================================\n\
    \nFinished in 0.005800135 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    172.41 tests/s, 172.41 assertions/s\n"
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n    letters = s.scan(/[a-zA-Z]/)\n\
    \    letters.each do |letter|\n        # if s.include?(letter) == true\n     \
    \   s = s.gsub(letter, letter.swapcase)\n        end\n    s.reverse!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp3ih74h5p\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmp3ih74h5p.rb:22:in `test_solve'\n \
    \    19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_solve\n\
    \     21:     candidate = method(:solve)\n  => 22:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     23:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     24:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     25:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.005858485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    170.69 tests/s, 170.69 assertions/s\n"
  timestamp: 1659823460
- exit_code: 1
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  s = s.reverse\n  a = \"\"\n  if\
    \ s.match(/[a-zA-Z]/)\n    s.each_char do |i|\n      if i.match(/[a-z]/)\n   \
    \     a += i.upcase\n      elsif i.match(/[A-Z]/)\n        a += i.downcase\n \
    \     else\n        a += i\n      end\n    end\n  else\n    a = s\n  end\n  a\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
    \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"\
    AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"\
    AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"\
    ))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
    2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
    #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpkr3s9s6l\nStarted\nF\n===============================================================================\n\
    Failure: test_solve(TestHumanEval)\n/tmp/tmpkr3s9s6l.rb:32:in `test_solve'\n \
    \    29: class TestHumanEval < Test::Unit::TestCase\n     30:   def test_solve\n\
    \     31:     candidate = method(:solve)\n  => 32:     assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n     33:     assert_equal(\"4321\", candidate.call(\"\
    1234\"))\n     34:     assert_equal(\"AB\", candidate.call(\"ab\"))\n     35:\
    \     assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n<\"aSdF\"> expected but\
    \ was\n<\"FdSa\">\n\ndiff:\n? FdSaSdF\n===============================================================================\n\
    \nFinished in 0.005841549 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    171.19 tests/s, 171.19 assertions/s\n"
  timestamp: 1659823460
- exit_code: 0
  program: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
    \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
    \ contains no letters, reverse the string.\n# The function should return the resulted\
    \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
    # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n  return s.reverse if s[/[a-zA-Z]/].nil?\n\
    \  s.chars.map { |c| c =~ /[a-zA-Z]/ ? c == c.upcase ? c.downcase : c.upcase :\
    \ c }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_solve\n    candidate = method(:solve)\n    assert_equal(\"aSdF\",\
    \ candidate.call(\"AsDf\"))\n    assert_equal(\"4321\", candidate.call(\"1234\"\
    ))\n    assert_equal(\"AB\", candidate.call(\"ab\"))\n    assert_equal(\"#A@c\"\
    , candidate.call(\"#a@C\"))\n    assert_equal(\"#aSDFw^45\", candidate.call(\"\
    #AsdfW^45\"))\n    assert_equal(\"2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"\
    #$A^d\", candidate.call(\"#$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"\
    #ccc\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp69iufiot

    Started

    .

    Finished in 0.000481575 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2076.52 tests/s, 16612.16 assertions/s

    '
  stdout: ''
  timestamp: 1659823460
