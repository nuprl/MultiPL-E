name: HumanEval_63_fibfib
language: rb
prompt: "# The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n# fibfib(0) == 0\n# fibfib(1) == 0\n# fibfib(2) ==\
  \ 1\n# fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n# Please write a function\
  \ to efficiently compute the n-th element of the fibfib number sequence.\n# >>>\
  \ fibfib(1)\n# 0\n# >>> fibfib(5)\n# 4\n# >>> fibfib(8)\n# 24\ndef fibfib(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fibfib\n\
  \    candidate = method(:fibfib)\n    assert_equal(1, candidate.call(2))\n    assert_equal(0,\
  \ candidate.call(1))\n    assert_equal(4, candidate.call(5))\n    assert_equal(24,\
  \ candidate.call(8))\n    assert_equal(81, candidate.call(10))\n    assert_equal(274,\
  \ candidate.call(12))\n    assert_equal(927, candidate.call(14))\n  end\nend\n"
completions: [end, "  sequence = [0, 0, 1]\n  n.times do\n    sequence << sequence[-1]\
    \ + sequence[-2] + sequence[-3]\n  end\n  sequence[n]\nend", "  i = 2\n  prev_prev\
    \ = 0\n  prev = 0\n  curr = 1\n  while i < n\n    prev_prev = prev\n    prev =\
    \ curr\n    curr = prev_prev + prev + curr\n    i += 1\n  end\n  curr\nend", end,
  "    sequence = [0, 0, 1]\n    return 0 if n == 0\n    return sequence[n] if n <=\
    \ 2\n    while sequence.length <= n do\n        sequence << sequence[-1] + sequence[-2]\
    \ + sequence[-3]\n    end\n    sequence[n]\nend", "  if n == 0 || n == 1\n   \
    \ return 0\n  elsif n == 2\n    return 1\n  else\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  end\nend", "\nend", "    return 0 if n == 0\n    return 0 if\
    \ n == 1\n    return 1 if n == 2\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "  return 0 if n == 0\n  return 0 if n == 1\n  return 1 if n == 2\n  fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "  if n < 2\n    return n\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend", "  i = 0\n  j = 0\n  k\
    \ = 1\n  (n-2).times do\n    i, j, k = j, k, k + j + i\n  end\n  k\nend", "\t\
    return 0 if n == 0\n\treturn 0 if n == 1\n\treturn 1 if n == 2\n\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "  fib = [0,0,1]\n  3.upto(n) do |i|\n  \
    \  fib << fib[i-1] + fib[i-2] + fib[i-3]\n  end\n  fib[n]\nend", "\nend", end,
  "  return 0 if n == 0\n  return 0 if n == 1\n  return 1 if n == 2\n  fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "  return 0 if n == 0\n  return 0 if n ==\
    \ 1\n  return 1 if n == 2\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", end, "  return 0 if n == 0\n  return 0 if n == 1\n  return 1 if n == 2\n\
    \  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  return 0 if n <= 1\n  return\
    \ 1 if n == 2\n  first = 0\n  second = 0\n  third = 1\n  # n = n - 2\n  n.times\
    \ do\n    current = first + second + third\n    first = second\n    second = third\n\
    \    third = current\n  end\n  third\nend", "  return n if n <= 1\n  fb = [0,\
    \ 0, 1]\n  3.upto(n) do |i|\n    fb[i] = fb[i-1] + fb[i-2] + fb[i-3]\n  end\n\
    \  fb[n]\nend", "  return 0 if n <= 1\n  return 1 if n == 2\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "  fibfib1(n, 0, 0, 1)\nend", "\tif n ==\
    \ 0\n\t\treturn 0\n\telsif n == 1\n\t\treturn 0\n\telsif n == 2\n\t\treturn 1\n\
    \telse\n\t\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\tend\nend", "  return\
    \ 0 if n.zero? || n == 1\n  return 1 if n == 2\n  fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3)\nend", "  # YOUR CODE HERE\nend", "  return 0 if n == 0\n  return\
    \ 0 if n == 1\n  return 1 if n == 2\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "  if n == 0 || n == 1\n    return 0\n  elsif n == 2\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend", "  return 0\
    \ if n == 0 || n == 1\n  return 1 if n == 2\n  first, second, third = 0, 0, 1\n\
    \  (n - 2).times do\n    first, second, third = second, third, third + second\
    \ + first\n  end\n  third\nend", "    return 0 if n <= 1\n    return 1 if n ==\
    \ 2\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "\treturn n if\
    \ n <= 1\n\tfibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "\nend", "  return\
    \ 0 if n == 0\n  return 0 if n == 1\n  return 1 if n == 2\n  # fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "\nend", "  return 0 if n == 0 || n == 1\n  return 1 if n == 2\n  fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "    arr = [0,0,1]\n    until arr.length\
    \ == n+1\n        arr << arr[-1] + arr[-2] + arr[-3]\n    end\n    arr[-1]\nend",
  "  return n if n <= 1\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  if n\
    \ == 0\n    return 0\n  elsif n == 1\n    return 0\n  elsif n == 2\n    return\
    \ 1\n  else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend",
  "  return 0 if n == 0 || n == 1\n  return 1 if n == 2\n  f1 = 0\n  f2 = 0\n  f3\
    \ = 1\n  (n-2).times do\n    f1 = f2\n    f2 = f3\n    f3 = f1 + f2 + f3\n  end\n\
    \  f3\nend", "\traise \"fibfib: n cannot be less than 0\" if n < 0\n\treturn 0\
    \ if n == 0\n\treturn 0 if n == 1\n\treturn 1 if n == 2\n\tn_minus_1 = 1\n\tn_minus_2\
    \ = 0\n\tn_minus_3 = 0\n\t(3..n).each do |i|\n\t\tn_minus_3 = n_minus_2\n\t\t\
    n_minus_2 = n_minus_1\n\t\tn_minus_1 = n_minus_1 + n_minus_2 + n_minus_3\n\tend\n\
    \treturn n_minus_1\nend", "\treturn n if n <= 1", "\treturn 0 if n == 0\n\treturn\
    \ 0 if n == 1\n\treturn 1 if n == 2\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "  fibfib_array = [0, 0, 1]\n  if n < 3\n    return fibfib_array[n]\n  else\n\
    \    (3..n).each do |i|\n      fibfib_array[i] = fibfib_array[i-1] + fibfib_array[i-2]\
    \ + fibfib_array[i-3]\n    end\n    return fibfib_array[n]\n  end\nend", "\treturn\
    \ 0 if n == 0 || n == 1\n\treturn 1 if n == 2\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "  return 0 if n < 2\n  return 1 if n == 2\n  (1..n).reduce([0,0,1])\
    \ { |memo, i| memo << memo[-1] + memo[-2] + memo[-3] }[-1]\nend", "\nend", " \
    \ return n if n < 2\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  fib =\
    \ [0,0,1]\n  (n-2).times { fib << fib[-1] + fib[-2] + fib[-3] }\n  fib[n]\nend",
  "  return 0 if n == 0 || n == 1\n  return 1 if n == 2\n  fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "  return n if n <= 1\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "  # TODO: implement it\nend", "  # Your code here\nend", "  sequence =\
    \ [0, 0, 1]\n  i = 2\n  while i < n\n    sequence << sequence[i-1] + sequence[i-2]\
    \ + sequence[i-3]\n    i += 1\n  end\n  sequence[n]\nend", "  return n if n <\
    \ 2\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "    fibfib_helper([0,0,1],\
    \ n)\nend", "\treturn 0 if n == 0 || n == 1\n\treturn 1 if n == 2\n\tfibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "  if n < 2\n    return n\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend", "  # Your code here\n\
    end", "\nend", "  a, b, c = 0, 0, 1\n  n.times do\n    a, b, c = b, c, b + c +\
    \ a\n  end\n  a\nend", "  return 0 if n < 2\n  return 1 if n == 2\n  a, b, c =\
    \ 0, 0, 1\n  (n - 2).times do\n    a, b, c = b, c, a + b + c\n  end\n  c\nend",
  "  (0..n).reduce([0, 0, 1]) { |fibfib_seq, _| fibfib_seq << fibfib_seq[-1] + fibfib_seq[-2]\
    \ + fibfib_seq[-3] }[n]\nend", "  return 0 if n <= 1\n  (n < 3) ? 1 : fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "  return 0 if n == 0\n  return 0 if n ==\
    \ 1\n  return 1 if n == 2\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", " \
    \ # your code here\nend", "  answer = 0\n  if n == 0\n    answer = 0\n  elsif\
    \ n == 1\n    answer = 0\n  elsif n == 2\n    answer = 1\n  else\n    answer =\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\n  return answer\nend", "  return\
    \ 0 if n == 0\n  return 0 if n == 1\n  return 1 if n == 2\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "  return 0 if n == 0\n  return 0 if n ==\
    \ 1\n  return 1 if n == 2\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", " \
    \ a, b, c = 0, 0, 1\n  return 0 if n == 0\n  return 1 if n == 2\n  (3..n).each\
    \ do |i|\n    d = a + b + c\n    a = b\n    b = c\n    c = d\n  end\n  c\nend",
  "  return 0 if n == 0 || n == 1\n  return 1 if n == 2\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "\treturn 0 if n == 0\n\treturn 0 if n == 1\n\treturn 1\
    \ if n == 2\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "\nend",
  "  return 0 if n == 0 || n == 1\n  return 1 if n == 2\n  a, b, c = 0, 0, 1\n  n.times\
    \ do\n    a, b, c = b, c, a + b + c\n  end\n  a\nend", "    return 0 if n == 0\
    \ || n == 1\n    return 1 if n == 2\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", end, "  return 0 if n == 0\n  return 0 if n == 1\n  return 1 if n == 2\n\
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  fib = [0, 0, 1]\n\
    \  (n - 2).times do\n    fib << fib[-1] + fib[-2] + fib[-3]\n  end\n  fib[n]\n\
    end", "  a, b, c = 0, 0, 1\n  return 0 if n == 0\n  return 1 if n == 2\n  (n-2).times\
    \ do\n    a, b, c = b, c, a + b + c\n  end\n  return c\nend", "  fib_array = [0,\
    \ 0, 1]\n  return 0 if n == 0\n  return 1 if n == 2\n  return fib_array[n] if\
    \ fib_array[n]", "\treturn n if n < 2\n\tfibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "  return 0 if n == 0\n  return 0 if n == 1\n  return 1 if n == 2\n  fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "  fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3)\nend", "  return 0 if n < 2\n  fibfib_rec(n, 0, 0, 1)\nend", "  return\
    \ 0 if n == 0\n  return 0 if n == 1\n  return 1 if n == 2\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "  if n == 0\n    return 0\n  elsif n ==\
    \ 1\n    return 0\n  elsif n == 2\n    return 1\n  else\n    fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  end\nend\nputs fibfib(1)\nputs fibfib(5)\nputs fibfib(8)",
  "  if n < 3\n    return n - 1\n  end\n  a = 0\n  b = 1\n  c = 1\n  (n - 3).times\
    \ do\n    a, b, c = b, c, (a + b + c)\n  end\n  c\nend", "  return 0 if n < 2\n\
    \  return 1 if n == 2\n  a, b, c = 0, 0, 1\n  (n - 2).times do\n    a, b, c =\
    \ b, c, a + b + c\n  end\n  c\nend", "  return 0 if n == 0\n  return 0 if n ==\
    \ 1\n  return 1 if n == 2\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", " \
    \ return 0 if n == 0\n  return 0 if n == 1\n  return 1 if n == 2\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "  case n\n  when 0 then 0\n  when 1 then\
    \ 0\n  when 2 then 1\n  else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\n\
    end", "\treturn 0 if n == 0\n\treturn 0 if n == 1\n\treturn 1 if n == 2\n\treturn\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", end, "  return 0 if n == 0\n\
    \  return 0 if n == 1\n  return 1 if n == 2\n  if n >= 3\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n  end\nend", "\treturn 0 if n <= 1\n\ta, b, c =\
    \ 0, 0, 1\n\t3.upto(n) do\n\t\ta, b, c = b, c, a + b + c\n\tend\n\tc\nend\nputs\
    \ fibfib(5)\nputs fibfib(8)\nputs fibfib(9)", "\treturn 0 if n == 0\n\treturn\
    \ 0 if n == 1\n\treturn 1 if n == 2\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "  arr = [0, 0, 1]\n  (n - 2).times do\n    next_fib = arr[-1] + arr[-2]\
    \ + arr[-3]\n    arr << next_fib\n  end\n  arr[-1]\nend", "  f = [0, 0, 1]\n \
    \ (n-3).times { f = [f[1], f[2], f[0]+f[1]+f[2]] }\n  f[2]\nend", "  return n\
    \ if n <= 1\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  fibfib_recurse(n,\
    \ 0, 0, 1)\nend", "  n == 0 ? 0 : n == 1 ? 0 : n == 2 ? 1 : fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "  a = 0\n  b = 0\n  c = 1\n  (n-2).times do\n    a = b\n\
    \    b = c\n    c = a + b + c\n  end\n  c\nend", "\nend", "\treturn 0 if n ==\
    \ 0\n\treturn 0 if n == 1\n\treturn 1 if n == 2\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "  if n == 0\n    return 0\n  elsif n == 1\n    return\
    \ 0\n  elsif n == 2\n    return 1\n  else\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  end\nend", "\treturn 0 if n==0\n\treturn 0 if n==1\n\treturn\
    \ 1 if n==2\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  return\
    \ 0 if n == 0\n  return 0 if n == 1\n  return 1 if n == 2\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "  return 0 if n == 0\n  return 0 if n ==\
    \ 1\n  return 1 if n == 2\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "  fibfib = Hash.new { |h, k| h[k] = k < 3 ? k-1 : h[k-1] + h[k-2] + h[k-3]\
    \ }\n  fibfib[n]\nend", "  if n == 0 || n == 1\n    return 0\n  elsif n == 2\n\
    \    return 1\n  else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\n\
    end", "  # your code here\nend", "  if n <= 1\n    return 0\n  elsif n == 2\n\
    \    return 1\n  else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\n\
    end", "    if n < 2\n        return n\n    else\n        return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3)\n    end\nend", "  return 0 if n <= 1\n  return 1\
    \ if n == 2\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  return n if n\
    \ < 2\n  (fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\nend\nputs fibfib(1)\nputs\
    \ fibfib(5)\nputs fibfib(8)", "  return 0 if n == 0\n  return 0 if n == 1\n  return\
    \ 1 if n == 2\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "\nend", "  return\
    \ 0 if n <= 1\n  return 1 if n == 2\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "  fibs = [0, 0, 1]\n  (n-2).times do |i|\n    fibs << fibs[i + 2] + fibs[i\
    \ + 1] + fibs[i]\n  end\n  fibs[n]\nend", "  # your code here\nend", "  # TODO:\
    \ Write me!\nend", "  a, b, c = 0, 0, 1\n  n.times do\n    a, b, c = b, c, a +\
    \ b + c\n  end\n  a\nend", "  return n if n < 2\n  first, second, third = 0, 0,\
    \ 1\n  n -= 2\n  until n == 0\n    first, second, third = second, third, first\
    \ + second + third\n    n -= 1\n  end\n  third\nend", "\t#YOUR CODE HERE\nend",
  "  return 0 if n <= 1\n  return 1 if n == 2\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "  return 0 if n == 0\n  return 0 if n == 1\n  return 1\
    \ if n == 2\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  return 0 if n\
    \ == 0 || n == 1\n  return 1 if n == 2\n  a, b, c = 0, 0, 1\n  3.upto(n) do\n\
    \    a, b, c = b, c, c + b + a\n  end\n  c\nend", "  if n <= 1\n    0\n  elsif\
    \ n == 2\n    1\n  else\n    a = 0\n    b = 0\n    c = 1\n    i = 2\n    while\
    \ i < n\n      temp = a + b + c\n      a = b\n      b = c\n      c = temp\n  \
    \    i += 1\n    end\n    return c\n  end\nend", "\treturn 0 if n <= 1\n\ta, b,\
    \ c = 0, 0, 1\n\t3.upto(n) do\n\t\ta, b, c = b, c, c + b + a\n\tend\n\tc\nend",
  "  fibfib_helper(n, 1, 0, 0)\nend", "\tif n == 0\n\t\treturn 0\n\telsif n == 1\n\
    \t\treturn 0\n\telsif n == 2\n\t\treturn 1\n\telse\n\t\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\tend\nend", "  if n == 0\n    return 0\n  elsif n == 1\n   \
    \ return 0\n  elsif n == 2\n    return 1\n  else\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  end\nend", "  return 0 if n == 0\n  return 0 if n == 1\n  return\
    \ 1 if n == 2\n  @known_fibfibs ||= [0, 0, 1]\n  return @known_fibfibs[n] if @known_fibfibs[n]\n\
    \  @known_fibfibs[n] = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "\treturn\
    \ n if n <= 1\n\tprev = 0\n\tcurr = 1\n\tnum = 1\n\t(n-2).times do \n\t\tnum =\
    \ prev + curr + num\n\t\tprev = curr\n\t\tcurr = num\n\tend\n\tnum\nend", "  #\
    \ Write your code here...\nend", "\nend", "  return n if n < 2\n  return 1 if\
    \ n == 2\n  x, y, z = 0, 0, 1\n  (n - 2).times do\n    x, y, z = y, z, x + y +\
    \ z\n  end\n  z\nend", "  return 0 if n == 0\n  return 0 if n == 1\n  return 1\
    \ if n == 2\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  # WRITE CODE\
    \ HERE\nend", "  return 0 if n == 0\n  return 0 if n == 1\n  return 1 if n ==\
    \ 2\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  if n == 0 || n == 1\n\
    \    return 0\n  elsif n == 2\n    return 1\n  else\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3)\n  end\nend", "  return 0 if n == 0\n  return 0 if\
    \ n == 1\n  return 1 if n == 2\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend",
  "  n = n.to_i\n  if n == 0\n    return 0\n  elsif n == 1\n    return 0\n  elsif\
    \ n == 2\n    return 1\n  else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  end\nend", "  return 0 if n == 0\n  return 0 if n == 1\n  return 1 if n ==\
    \ 2\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  # TODO\nend", "    #\
    \ Your Code Here\nend", "  return 0 if n == 0\n  return 0 if n == 1\n  return\
    \ 1 if n == 2\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  a = [0, 0,\
    \ 1]\n  (n - 3).times { a << a[-1] + a[-2] + a[-3] }\n  a[n]\nend", end, "  arr\
    \ = [0, 0, 1]\n  (n - 3).times do |i|\n    arr << arr[i] + arr[i + 1] + arr[i\
    \ + 2]\n  end\n  arr[n - 1]\nend", "  # TODO: write me\nend", "  # your code here\n\
    end", "  return 0 if n == 0\n  return 0 if n == 1\n  return 1 if n == 2\n  return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  return 0 if n == 0 || n ==\
    \ 1\n  return 1 if n == 2\n  n1 = 0\n  n2 = 0\n  n3 = 1\n  result = n\n  result.times\
    \ do\n    result = n1 + n2 + n3\n    n1 = n2\n    n2 = n3\n    n3 = result\n \
    \ end\n  result\nend", "  return 0 if n <= 1\n  return 1 if n == 2\n  prev_prev_fib\
    \ = 0\n  prev_fib = 0\n  fib = 1\n  (n - 2).times do\n    prev_prev_fib = prev_fib\n\
    \    prev_fib = fib\n    fib = prev_prev_fib + prev_fib + fib\n  end\n  fib\n\
    end", "  return 0 if n == 0\n  return 0 if n == 1\n  return 1 if n == 2\n  fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "  if n == 0\n    return 0\n  elsif n ==\
    \ 1\n    return 0\n  elsif n == 2\n    return 1\n  else\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n  end\nend", "  fibfib_array = []\n  n.times do\
    \ |x|\n    if x < 2\n      fibfib_array << 0\n    elsif x == 2\n      fibfib_array\
    \ << 1\n    else\n      fibfib_array << fibfib_array[x-1] + fibfib_array[x-2]\
    \ + fibfib_array[x-3]\n    end\n  end\n  fibfib_array[n-1]\nend", "  if n < 2\n\
    \    0\n  elsif n == 2\n    1\n  else\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  end\nend", "    array = [0,0,1]\n    if n <= 2\n        return array[n]\n \
    \   else\n        index = 2\n        while index < n\n            array[index%3]\
    \ = array[(index-1)%3] + array[(index-2)%3] + array[(index-3)%3]\n           \
    \ index += 1\n        end\n        return array[(index-1)%3]\n    end\nend", " \
    \ a, b, c = 0, 0, 1\n  n.times do\n    a, b, c = b, c, a + b + c\n  end\n  a\n\
    end", "  return 0 if n == 0 || n == 1\n  return 1 if n == 2\n  fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "  fib_arr = [0, 0, 1]\n  i = 3\n  while i <= n\n    fib_arr[i]\
    \ = fib_arr[i-1] + fib_arr[i-2] + fib_arr[i-3]\n    i += 1\n  end\n  fib_arr[n]\n\
    end", "  return 0 if n == 0 || n == 1\n  return 1 if n == 2\n  f1 = 0\n  f2 =\
    \ 0\n  f3 = 1\n  n.times do\n    temp = f1 + f2 + f3\n    f1 = f2\n    f2 = f3\n\
    \    f3 = temp\n  end\n  f3\nend", "\treturn n if n <= 1\n\tfibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend\np fibfib(1)\np fibfib(5)\np fibfib(8)", "  return 0 if n\
    \ == 0 || n == 1\n  return 1 if n == 2\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end\np fibfib(5)", "  # n is an integer > 0\n  return 0 if n <= 1\n  return 1\
    \ if n == 2\n  a = 0\n  b = 0\n  c = 1\n  (n-2).times do\n    d = a + b + c\n\
    \    a = b\n    b = c\n    c = d\n  end\n  c\nend", "  if n == 0\n    return 0\n\
    \  elsif n == 1\n    return 0\n  elsif n == 2\n    return 1\n  end\n  fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", end, "  fibs = [0, 0, 1]\n  return fibs[n]\
    \ if n < 3\n  3.upto(n) do |index|\n    fibs << fibs[index-1] + fibs[index-2]\
    \ + fibs[index-3]\n  end\n  fibs[n]\nend", "  return 0 if n == 0\n  return 0 if\
    \ n == 1\n  return 1 if n == 2\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "  if n <= 2\n    n\n  else\n    res = [0,0,1]\n    (n-3).times do\n   \
    \   res << res[-1] + res[-2] + res[-3]\n    end\n    res[-1]\n  end\nend", " \
    \ a = 0\n  b = 0\n  c = 1\n  i = 0\n  while i < n\n    a = b\n    b = c\n    c\
    \ = a + b + c\n    i += 1\n  end\n  return a\nend", "  return 0 if n == 0\n  return\
    \ 0 if n == 1\n  return 1 if n == 2\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "  return 0 if n < 1\n  fibs = [0, 0, 1]\n  (n - 2).times do\n    fibs <<\
    \ fibs[-1] + fibs[-2] + fibs[-3]\n  end\n  fibs[-1]\nend", "\t\nend", "  fibfib_arr\
    \ = [0, 0, 1]\n  return fibfib_arr[n] if n < 3\n  fibfib_arr[n] = fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "  return 0 if n < 2\n  fib_nums = [0, 0,\
    \ 1]\n  fibfib = 0\n  (3..n).each do |num|\n    fibfib = fib_nums[0] + fib_nums[1]\
    \ + fib_nums[2]\n    fib_nums.shift\n    fib_nums << fibfib\n  end\n  fibfib\n\
    end", "  first, second, third = 0, 0, 1\n  return first if n == 0\n  return second\
    \ if n == 1\n  return third if n == 2\n  (n-3).times do\n    first, second, third\
    \ = second, third, first + second + third\n  end\n  third\nend", "\treturn 0 if\
    \ n == 0\n\treturn 0 if n == 1\n\treturn 1 if n == 2\n\t\n\tnth_fib = [0, 0, 1]\n\
    \t(n-3).times do\n\t\tnth_fib << nth_fib[0] + nth_fib[1] + nth_fib[2]\n\t\tnth_fib.shift\n\
    \tend\n\t\n\tnth_fib[2]\nend", "  if n == 0\n    return 0\n  elsif n == 1\n  \
    \  return 0\n  elsif n == 2\n    return 1\n  else\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  end\nend", "  arr = [0, 0, 1]\n  while arr.length < n\n   \
    \ arr << arr[-1] + arr[-2] + arr[-3]\n  end\n  arr[n-1]\nend", "  if n == 0\n\
    \    return 0\n  elsif n == 1\n    return 0\n  elsif n == 2\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend", "  return 0\
    \ if n == 0 || n == 1\n  fibs = [0, 0, 1]\n  (n - 2).times do |i|\n    fibs[i\
    \ % 3] = fibs.inject(:+)\n  end\n  fibs[(n - 1) % 3]\nend", "  # WRITE CODE HERE\n\
    end", "    a = 0\n    b = 0\n    c = 1\n    4.upto(n) do\n        d = a + b +\
    \ c\n        a = b\n        b = c\n        c = d\n    end\n    return c\nend",
  "  fibfib_helper(n)[0]\nend", "  return 0 if n == 0 || n == 1\n  return 1 if n ==\
    \ 2\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  return 0 if n <= 1\n\
    \  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  return n if n < 2\n  a, b,\
    \ c = 0, 0, 1\n  for i in 3..n\n    a, b, c = b, c, a + b + c\n  end\n  c\nend",
  end, "    return 0 if n == 0\n    return 0 if n == 1\n    return 1 if n == 2\n \
    \   return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  return 0 if n ==\
    \ 0\n  return 0 if n == 1\n  return 1 if n == 2\n  fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3)\nend", "  return 0 if n == 0 || n == 1\n  return 1 if n == 2\n \
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "\tif n==0\n\t\t0\n\telsif n==1\n\
    \t\t0\n\telsif n==2\n\t\t1\n\telse\n\t\tfibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \tend\nend", "  return 0 if n < 2\n  return 1 if n == 2\n  fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "  n = n.to_i\n  return 0 if n == 0 || n == 1\n  return\
    \ 1 if n == 2\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  # your code\
    \ here\nend", "  if n == 0\n    return 0\n  elsif n == 1\n    return 0\n  elsif\
    \ n == 2\n    return 1\n  else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  end\nend", "  if n == 0\n    return 0\n  elsif n == 1\n    return 0\n  elsif\
    \ n == 2\n    return 1\n  end\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "  previous_fibfib_numbers = [0, 0, 1]\n  n.times do |i|\n    if i > 2\n\
    \      previous_fibfib_numbers[i % 3] = previous_fibfib_numbers.reduce(:+)\n \
    \   end\n  end\n  previous_fibfib_numbers[n % 3]\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
