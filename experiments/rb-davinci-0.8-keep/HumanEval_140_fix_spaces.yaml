name: HumanEval_140_fix_spaces
language: rb
prompt: "# Given a string text, replace all spaces in it with underscores, \n# and\
  \ if a string has more than 2 consecutive spaces, \n# then replace all consecutive\
  \ spaces with - \n# fix_spaces(\"Example\") == \"Example\"\n# fix_spaces(\"Example\
  \ 1\") == \"Example_1\"\n# fix_spaces(\" Example 2\") == \"_Example_2\"\n# fix_spaces(\"\
  \ Example   3\") == \"_Example-3\"\ndef fix_spaces(text)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fix_spaces\n\
  \    candidate = method(:fix_spaces)\n    assert_equal(\"Example\", candidate.call(\"\
  Example\"))\n    assert_equal(\"Mudasir_Hanif_\", candidate.call(\"Mudasir Hanif\
  \ \"))\n    assert_equal(\"Yellow_Yellow__Dirty__Fellow\", candidate.call(\"Yellow\
  \ Yellow  Dirty  Fellow\"))\n    assert_equal(\"Exa-mple\", candidate.call(\"Exa\
  \   mple\"))\n    assert_equal(\"-Exa_1_2_2_mple\", candidate.call(\"   Exa 1 2\
  \ 2 mple\"))\n  end\nend\n"
completions: ["  text.gsub(/\\s/, '_').gsub(/\\s{2,}/, '-')\nend", "  text.gsub(/\\\
    s+/, \"_\")\nend", "    text.gsub(/\\s/, '_').gsub(/\\s+/, '-')\nend", "  text.gsub(/\\\
    s{2,}/, '-').gsub(/\\s/, '_')\nend", "\ttext.gsub!(/\\s+/, '_')\n\ttext.gsub!(/\\\
    _\\_+/, '-')\n\ttext\nend", "\ttext.strip.gsub(/\\s{2,}/, '-').gsub(/\\s/, '_')\n\
    end", "  #TODO: implement this method\nend", "  str_arr = text.split('')\n  index\
    \ = 0\n  while index < str_arr.length\n    if str_arr[index] == ' '\n      str_arr[index]\
    \ = '_'\n      while str_arr[index + 1] == ' '\n        str_arr[index + 1] = '-'\n\
    \        index += 1\n      end\n    end\n    index += 1\n  end\n  str_arr.join('')\n\
    end", "  # Replace multiple spaces with \"-\"\n  text.gsub!(/\\s{2,}/, '-')",
  "  text.gsub!(/ {2,}/, '-')\n  text.gsub!(/ /, '_')\n  text\nend", "\t# if text.include?('\
    \  ')\n\t# \ttext.gsub!('  ', '-')\n\t# \ttext.strip\n\t# end\n\t# if text.include?('\
    \ ')\n\t# \ttext.gsub!(' ', '_')\n\t# \ttext.strip\n\t# end\n\t# text\n\ttext.strip.gsub('\
    \ ', '_').gsub('  ', '-')\nend", "  text.gsub(/\\s+/, '-').gsub(/^\\s/, '_').gsub(/\\\
    s$/, '_')\nend", "  text.gsub(/\\s{2,}/, '-').gsub(/\\s/, '_')\nend", "  text.squeeze(\"\
    \ \").gsub(\" \", \"_\")\nend", "  # write your code here\nend", "  text.gsub(/\\\
    s+/, '_').gsub(/\\s{2,}/, '-')\nend", "  # text.gsub(/\\s+/, '-')\n  text.gsub(/\\\
    s{2,}/, '-')\nend", "  text.squeeze(' ').tr(' ', '_').gsub('__', '-')\nend", " \
    \ text.gsub(/ {2,}/, '-').gsub(/ /, '_')\nend", "  text.gsub!(/\\s/, '_')\n  text.gsub!(/_+/,\
    \ '-')\nend", "  text.gsub('  ', '-').gsub(' ', '_')\nend", "  text.gsub(/\\s/,\
    \ '_').gsub(/_{2,}/, '-')\nend", "    #do loop until 3 consecutive spaces\n  \
    \  #set up for loop to traverse through text\n    #when i find a space\n    #replace\
    \ it with an underscore\n    #counter variable to see if I have more than 2 consecutive\
    \ spaces\n    #if i find a space put space_counter + 1\n    #if space_counter\
    \ > 2 then put -\n    counter = 0\n    text = text.split(\"\")\n    text.each_with_index\
    \ do |char, index|\n        if char == \" \"\n            text[index] = \"_\"\n\
    \            counter += 1\n            if counter > 2\n                text[index]\
    \ = \"-\"\n            end\n        else\n            counter = 0\n        end\n\
    \    end\n    return text.join(\"\")\nend", "    arr = text.split(\" \")\n   \
    \ arr = arr.join(\"-\")\n    arr = arr.split(\"--\")\n    arr = arr.join(\"-\"\
    )\n    arr = arr.split(\"_\")\n    arr = arr.join(\"_\")\n    arr = arr.split(\"\
    -\")\n    arr = arr.join(\"_\")\n    arr\nend", "  text.gsub(/\\s{2,}/, '-').gsub(/\\\
    s/, '_')\nend", "  res = text.gsub(/\\s/, '_')\n  res.gsub(/_{2,}/, '-')\nend",
  "\t# remove leading and trailing spaces\n\t# replace all spaces with underscores\n\
    \t# replace all consecutive spaces with -\n\ttext.strip.gsub(/\\s+/, '_').gsub(/\\\
    s/, '-')\nend", "  text.gsub(/ +/, '_').gsub(/_+/, '-')\nend", "  text.gsub(/\\\
    s+/, '-').gsub(/\\s/, '_')\nend", "  text.gsub!(/ +/, '_')\n  text.gsub!(/_{2,}/,\
    \ '-')\n  text\nend", "  result = text.split(' ').join('_')\n  result.gsub(/(_)+/,\
    \ '-')\nend", "  text.gsub(/\\s+/, '-').gsub('-', '_')\nend", "\ttext.gsub!(/\\\
    s/, '_')\n\ttext.gsub!(/_+/, '-')\nend", "\ttext.gsub(\"  \", \"-\").gsub(\" \"\
    , \"_\")\nend", "  text.gsub(/\\s+/, '_').gsub(/_/, '-').gsub(/_-_/, '-')\nend",
  "  string = text.sub(/\\s/, '_')\n  string.sub(/\\s/, '-')\nend", "    text.gsub(/\\\
    s/, '_').gsub(/\\s{2,}/, '-')\nend", "\ttext.gsub(/\\s{3,}/, '-').gsub(/\\s/,\
    \ '_')\nend", "\tarr = text.split('')\n\tspace_count = 0\n\tarr.each_with_index\
    \ do |char, i|\n\t\tif char == ' '\n\t\t\tspace_count += 1\n\t\t\tif space_count\
    \ > 2\n\t\t\t\tarr[i] = '-'\n\t\t\telse\n\t\t\t\tarr[i] = '_'\n\t\t\tend\n\t\t\
    else\n\t\t\tspace_count = 0\n\t\tend\n\tend\n\tarr.join('')\nend", "\t(text.gsub(/\
    \ +/, '_')).gsub(/_+/, '-')\nend", "    text.gsub(\" \", \"_\").gsub(\"_ \", \"\
    _\").gsub(\"_  \", \"_\").gsub(\"_   \", \"_\")\nend", "  text.gsub(/\\s{2,}/,\
    \ '-').gsub(/\\s/, '_')\nend", "  text.gsub(/[ ]+/, ' ').tr(' ', '_').gsub(/_{2,}/,\
    \ '-')\nend\nputs fix_spaces(\"Example\") == \"Example\"\nputs fix_spaces(\"Example\
    \ 1\") == \"Example_1\"\nputs fix_spaces(\" Example 2\") == \"_Example_2\"\nputs\
    \ fix_spaces(\" Example   3\") == \"_Example-3\"\nputs fix_spaces(\" Example \
    \   3\") == \"_Example--3\"\nputs fix_spaces(\" Example     3\") == \"_Example---3\"",
  "  # YOUR CODE HERE\nend", "  # return text\n  if text.scan(/\\s+/).max.length <=\
    \ 2\n    text.gsub!(/\\s/, '_')\n  else\n    text.gsub!(/\\s+/, '-')\n  end\n\
    end", "    text.gsub(/\\s+/, '_').gsub(/\\_\\_/, '-')\nend", "  if text.include?('\
    \  ')\n    text.gsub!('  ', '-')\n  else\n    text.gsub!(' ', '_')\n  end\nend\n\
    fix_spaces(\" Example   3\")", "\ttext.gsub(/ {2,}/, '-').sub(/ /, '_')\nend",
  "  text.gsub(/\\s+/, '-').gsub(/-/, '_')\nend", "  text.gsub(/  +/, '-').gsub(/\
    \ /, '_')\nend", "  text.strip.gsub(/\\s+/, '_')\nend", "  text.gsub(/ {2,}/,\
    \ '-').gsub(/ /, '_')\nend", "\ttext.gsub(/  /, \"-\").gsub(/ /, \"_\")\nend",
  "  text.gsub(/\\s+/, '-').gsub(/\\s/, '_')\nend", "  # your code here\nend", "\t\
    return text.gsub(/  +/, \"-\").gsub(/ /, \"_\")\nend", "  return text.gsub(/ {2,}/,\
    \ '-').gsub(/ /, '_')\nend", "  text.gsub(/\\s/, '_').gsub(/_{2,}/, '-')\nend",
  "    text.gsub(/\\s/, '_').gsub(/_{2,}/, '-')\nend", "    text.gsub(/\\s{2,}/, '-').gsub('\
    \ ', '_')\nend", "  text.gsub(/ {2,}/, '-').gsub(/ /, '_')\nend", "    # your\
    \ code here\nend", "  text.gsub(/\\s/, '_').gsub(/_+/, '-').strip\nend", "  text.split(\"\
    \  \").join(\"-\").gsub(\" \", \"_\")\nend", "  text.gsub(/\\s+/, \"_\")\nend",
  "  text.gsub(/\\s{3,}/, '-').gsub(/\\s/, '_')\nend", "  text.gsub(/\\s{3,}/, '-').gsub(/\\\
    s/, '_')\nend", "  text.gsub(/\\s/, '-').gsub(/[-]{2,}/, '_')\nend", "  return\
    \ text.gsub(/\\s+/, \"_\")\nend", "  if text.include?(\"  \")\n    text.gsub(\"\
    \  \", \"-\")\n  else\n    text.gsub(\" \", \"_\")\n  end\nend", "  string = text.gsub(/\\\
    s{2,}/, '-')\n  string.gsub(/\\s/, '_')\nend", "  # TODO: your code here\n  text.gsub!(/[\
    \ ]{2,}/, '-')\n  text.gsub!(/[ ]/, '_')\n  text\nend", "  p text.gsub(/[ ]+/,\
    \ '_').gsub(/[_]{2,}/, '-')\nend", "  text.gsub(/\\s+/, '-').gsub(/\\s/, '_')\n\
    end", "  text.gsub(/ {2,}/, '-').gsub(/ /, '_')\nend", "  text.gsub(/ {2,}/, '-').gsub(/\
    \ /, '_')\nend", "\ttext.tr(' ', '_').gsub(/\\s{2,}/, '-')\nend", "  # your code\
    \ here\nend", "    # text.gsub(\"\\s\",\"_\")\n    # text.gsub(/\\s\\s+/,\"-\"\
    )\n    text.gsub(/\\s\\s+/, '-').gsub(/\\s/, '_')\nend", "    # Your code here\n\
    end", "\nend", "  text.tr(' ', '_').gsub(/_{2,}/, '-')\nend", "  new_text = text.gsub(\"\
    \  \", \"-\")\n  new_text.gsub(\" \", \"_\")\nend", "  pattern = /\\s{2,}/\n \
    \ text.gsub(' ', '_').gsub(pattern, '-')\nend", "  text.gsub(/ {2,}/, '-').gsub(/\
    \ /, '_')\nend", "  text.strip.gsub(/\\s+/, '-').tr(' ', '_')\nend", "  text.gsub(/\\\
    s+/, \" \").gsub(\" \", \"_\").gsub(\" \", \"-\")\nend", "    text.gsub(/\\s+/,\
    \ '-').gsub(' ', '_')\nend", "  text.gsub(/\\s{2,}/, '-').gsub(/\\s/, '_')\nend",
  "\ttext.gsub(/\\s+/, ' ').gsub(/\\s/, '_')\nend", "  text.gsub(/\\s{2,}/, '-').gsub(/\\\
    s/, '_')\nend", "\nend", "  text.gsub('  ', '-').gsub(' ', '_')\nend", "  text.gsub(/\\\
    s+/, '-').gsub(/\\s/, '_')\nend", "    text.gsub(/ {2,}/, \"-\").gsub(/ /, \"\
    _\")\nend", "    text.gsub(\"  \", \"-\").gsub(\" \", \"_\")\nend", "  text.gsub(/\\\
    s{2,}/, '-').gsub(/\\s/, '_')\nend", "  text.gsub(/[\\s]{2,}/, '-').gsub(/[\\\
    s]/, '_')\nend", "  text.squeeze(' ').gsub(/\\s/, '_')\nend", "\t#\"Example 1\"\
    .sub(\" \", \"_\")\n\t#puts \"Example 1\".sub(\" \", \"_\")", "  # return text\
    \ if text.size <= 2\n  # text.size.times.with_object(\"\") do |i, memo|\n  # \
    \  if text[i] == \" \"\n  #     memo << \"_\"\n  #   else\n  #     memo << text[i]\n\
    \  #   end\n  # end\n  text.gsub(/\\s/, \"_\").gsub(/\\s{2,}/, \"-\")\nend", "\n\
    end", "  text.gsub(/\\s/, '_').gsub(/_+/, '-')\nend", "  text.gsub('  ', '-').gsub('\
    \ ', '_')\nend", "  text.gsub(/\\s+/, \"_\")\nend", "  arr = text.split(\" \"\
    )\n  arr.join(\"_\").gsub(\"__\", \"-\")\nend", "  text.gsub(/\\s+/, \"_\")\n\
    end", "  if text.match(/ /)\n    text.squeeze(\" \").gsub(\" \", \"_\")\n  else\n\
    \    text\n  end\nend", "\ttext.gsub!('  ', '-')\n\ttext.gsub!(' ', '_')\n\ttext\n\
    end", "  # your code here\nend", "\tfixed_spaces = text.gsub(\" \", \"_\")\n\t\
    fixed_spaces.gsub!(\"_ _ _\", \"-\")\n\tfixed_spaces.gsub!(\"_ _\", \"-\")\n\t\
    fixed_spaces\nend", "  text.gsub(/\\s/, '_').gsub(/(_){2,}/, '-')\nend", "  text.gsub(/\\\
    s{2,}/, '-').gsub(/\\s/, '_')\nend", "\ttext.gsub(/\\s{2,}/, '-').gsub(/\\s/,\
    \ '_')\nend", "  # return text.gsub(/\\s+/, '_')\n  # text.gsub(/\\s+/, '_').gsub(/\\\
    _+/, '-')\n  text.gsub(/\\s+/, '_').gsub(/_{2,}/, '-')\nend", "  # #1\n  # text.gsub('\
    \  ', '-').gsub(' ', '_')\n  # #2\n  # text.gsub(/\\s+/, '-').gsub(' ', '_')\n\
    \  # #3\n  text.gsub(/\\s{2,}/, '-').gsub(' ', '_')\nend", "  text.gsub(/\\s{2,}/,\
    \ '-').gsub(/\\s/, '_')\nend", "  text.gsub(/\\s+/, ' ').gsub(/\\s/, '_')\nend",
  "  text.gsub(/\\s{2,}/, '-').gsub(/\\s/, '_')\nend", "  text.gsub(/\\s/, '_').gsub(/_{2,}/,\
    \ '-')\nend", "\ttext.gsub(/\\s{2,}/, '-').gsub(/\\s/, '_')\nend", "  text.squeeze(\"\
    \ \").tr(\" \", \"_\")\nend", "\tresult = text.strip\n\treturn result if result.include?(\"\
    \  \") == false\n\tresult.gsub!(\"  \", \"-\")\n\twhile result.include?(\"  \"\
    )\n\t\tresult.gsub!(\"  \", \"-\")\n\tend\n\tresult.gsub!(\" \", \"_\")\n\tresult\n\
    end", "  text.gsub(/\\s{2,}/, '-').gsub(/\\s/, '_')\nend", "  text.gsub(/\\s{2,}/,\
    \ '-').gsub(/\\s/, '_')\nend", "  text.gsub!(/\\s+/, '-')\n  text.gsub!(' ', '_')\n\
    \  return text\nend", "  # your code here\nend", "    # your code here\n    while\
    \ text.include?(\"  \")\n        text = text.gsub(\"  \", \"-\")\n    end\n  \
    \  return text.gsub(\" \", \"_\")\nend", "  spaces = text.scan(/\\s{2,}/)\n  if\
    \ spaces.empty?\n    text.gsub(' ', '_')\n  else\n    text.gsub(/\\s{2,}/, '-').gsub('\
    \ ', '_')\n  end\nend", "  if text.count(\" \") > 2\n    text.tr(\" \", \"-\"\
    )\n  else\n    text.tr(\" \", \"_\")\n  end\nend", "  text.gsub(/ {3,}/, '-').gsub(/\
    \ /, '_')\nend", "  text.gsub(/\\s+/, '_').gsub(/\\_\\_/, '-')\nend", "  text.gsub(/\
    \ {2,}/, '-').gsub(/ /, '_')\nend", "  text.gsub(/\\s{2,}/, '-').gsub(/\\s/, '_')\n\
    end", "  text.gsub(/\\s+/, '_').tr(' ', '_')\nend", "\tif text.scan(/\\S+/).join('_')\
    \ == text\n\t\ttext.split(\" \").join(\"_\")\n\telse\n\t\ttext.gsub(/\\s+/, '-')\n\
    \tend\nend", "    text.tr(\" \", \"_\").gsub(\"__\", \"-\")\nend", "\t# your code\
    \ here\nend", "  text.gsub(/\\s{2,}/, '-').gsub(/\\s/, '_')\nend", "  text.gsub('\
    \  ', '-').gsub(' ', '_')\nend", "  # ...\nend", "  # your code here\nend", " \
    \ text.strip.gsub(/\\s+/, '-')\nend", "  text.tr(' ', '_').gsub(/(_){2,}/, '-')\n\
    end\nputs fix_spaces(\"Example   3\")", "  text.gsub(/[ ]{2,}/, '-').gsub(/ /,\
    \ '_')\nend", "\ttext.gsub(/\\s+/, '_').gsub(/\\s/, '-')\nend", "\treturn text.gsub(\"\
    \ \", \"_\").gsub(\"_\", \"-\").gsub(\"--\", \"-\")\nend", "  text.gsub(/\\s/,\
    \ '_').gsub(/_+/, '-')\nend", "    text.gsub(/\\s+/, '-').gsub(' ', '_')\nend",
  "\tif (text.gsub!(/\\s{3,}/, \"-\"))\n\t\treturn text.gsub(/\\s/, \"_\")\n\telse\n\
    \t\treturn text.gsub(/\\s/, \"_\")\n\tend\nend", "  text.gsub(/\\s{2,}/, '-').gsub(/\\\
    s/, '_')\nend", "  text.gsub(/\\s{2,}/, '-').gsub(/\\s/, '_')\nend", "  text.gsub(/\\\
    s+/, ' ').gsub(/ /, '_').gsub(/\\_+/, '-')\nend", "    text.gsub(/[ ]{2,}/, '-').gsub(/\
    \ /, '_')\nend\np fix_spaces(\"Example\") == \"Example\"\np fix_spaces(\"Example\
    \ 1\") == \"Example_1\"\np fix_spaces(\" Example 2\") == \"_Example_2\"\np fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"", "  result = text.gsub('  ', '-')\n  result.gsub('\
    \ ', '_')\nend", "    if text.include?(\"  \")\n        return text.split(\" \
    \ \").join(\"-\")\n    else\n        return text.split(\" \").join(\"_\")\n  \
    \  end\nend", "  text.gsub(/\\s{2,}/, '-').gsub(/\\s/, '_')\nend", "  text.gsub(/\\\
    s{2,}/, '-').gsub(/\\s/, '_')\nend", "  # replace the first space with underscore\n\
    \  # if the character after that space is another space, then replace the second\
    \ space with a dash and remove the rest of the spaces\n  text.gsub(/\\s/, '_').gsub(/\\\
    s\\s+/, '-')\nend", "\tif text.gsub!(/\\s/, \"_\") != nil && text.gsub!(/\\s+/,\
    \ \"-\") != nil\n\t\treturn text\n\telse\n\t\treturn text\n\tend\nend", "  text.gsub(/\\\
    s+/, ' ').gsub(' ', '_').tr(' ', '-')\nend", "  text.strip.gsub(/\\s+/, \"_\"\
    )\nend", "\ttext.gsub(/  +/, '-').gsub(/ +/, '_')\nend", "  text.split(\"  \"\
    ).join(\"-\").split(\" \").join(\"_\")\nend", "\ttext.gsub(/\\s{2,}/, '-').gsub(/\\\
    s/, '_')\nend", "\t# Returns the string with underscores instead of spaces\n\t\
    text.gsub(/\\s+/, '_')\nend", "  text.gsub(/\\s{3,}/, '-').gsub(/\\s/, '_')\n\
    end", "  text.gsub(/\\s{2,}/, '-').gsub(/\\s/, '_')\nend", "  text.gsub(/\\s+/,\
    \ ' ').gsub(' ', '_').gsub('__', '-')\nend", "  text.gsub(/\\s+/, '-').gsub(/\\\
    s/, '_')\nend", "  text.gsub(/\\s/, '_').gsub(/\\s{2,}/, '-')\nend", "  text.gsub(/\\\
    s{2,}/, '-').gsub(/\\s/, '_')\nend", "    text.gsub(/ {2,}/, '-').gsub(' ', '_')\n\
    end", "  fix_spaces = text.gsub(/\\s+/, '_')\n  fix_spaces.gsub!(/\\_/, '-') if\
    \ fix_spaces.match(/\\s{2,}/)\n  fix_spaces\nend", "  # 1\n  # text.gsub(/\\s+/,\
    \ '-')\n  # 2\n  text.gsub(' ', '_').gsub(/\\s+/, '-')\nend", "  text.gsub(/ {2,}/,\
    \ '-').gsub(/ /, '_')\nend", "  text.gsub(/\\s+/, '-').gsub(/\\s/, '_')\nend",
  "  text.gsub(/\\s+/, ' ').tr(' ', '_').gsub('_ ', '-')\nend", "  text.gsub(/\\s+/,\
    \ \"_\")\nend", "  fix_text = text.gsub(\" \", \"_\")\n  fix_text.gsub!(/_+/,\
    \ '-')\n  fix_text\nend", "\ttext.gsub!(/\\s+/, '-')\n\ttext.gsub!(/-/, '_')\n\
    end", "  text.gsub(/\\s{2,}/, '-').gsub(/\\s/, '_')\nend", "  text.gsub(/\\s+/,\
    \ '-').gsub(/\\s/, '_')\nend", "  text.gsub!(/\\s{2,}/, '-')\n  text.gsub(/\\\
    s/, '_')\nend", "  text.gsub(/\\s+/, '_').gsub('_', '-')\nend", "  text.gsub(/\
    \ +/, '_').gsub(/_+/, '-')\nend", "    text.tr(\" \",\"_\").gsub(/\\s{2,}/, \"\
    -\")\nend", "    # text.gsub(/ /, '_').gsub(/ {2,}/, '-')\n    text.gsub(/ {2,}/,\
    \ '-').gsub(/ /, '_')\nend", "\ttext.gsub(/  +/, '-').gsub(' ', '_')\nend", " \
    \ # text.gsub(/\\s{2,}/, '-').gsub(/ /, '_')\n  text.gsub(/\\s{2,}/, '-').tr('\
    \ ', '_')\nend", "    text.gsub(/\\s{2,}/, '-').gsub(/\\s/, '_')\nend", "\nend",
  "  text.gsub('  ', '-').gsub(' ', '_')\nend", "  text.gsub(/ {3,}/, '-').gsub(/\
    \ /, '_')\nend", "\ttext.gsub!(/ +/, '-')\n\ttext.gsub!(' ', '_')\n\ttext\nend",
  "  text.gsub(/\\s+/, '-').gsub(' ', '_')\nend", "\ttext.tr(\" \", \"_\").gsub(\"\
    __\", \"-\")\nend", "  str = text.gsub(/\\s{2,}/, '-').gsub(/\\s/, '_')\n  str\n\
    end\nputs fix_spaces(\"Example\") \nputs fix_spaces(\"Example 1\") \nputs fix_spaces(\"\
    \ Example 2\") \nputs fix_spaces(\" Example   3\") \nputs \"\\n\"", "\tif text.include?(\"\
    \  \")\n\t\ttext.gsub!(\"  \", \"-\")\n\t\ttext.gsub!(\" \", \"_\")\n\telse\n\t\
    \ttext.gsub!(\" \", \"_\")\n\tend\nend", "  text.gsub(/\\s+/, '-').gsub(' ', '_')\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
