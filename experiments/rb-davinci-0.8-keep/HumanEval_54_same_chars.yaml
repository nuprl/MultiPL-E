name: HumanEval_54_same_chars
language: rb
prompt: "# Check if two words have the same characters.\n# >>> same_chars('eabcdzzzz',\
  \ 'dddzzzzzzzddeddabc')\n# True\n# >>> same_chars('abcd', 'dddddddabc')\n# True\n\
  # >>> same_chars('dddddddabc', 'abcd')\n# True\n# >>> same_chars('eabcd', 'dddddddabc')\n\
  # False\n# >>> same_chars('abcd', 'dddddddabce')\n# False\n# >>> same_chars('eabcdzzzz',\
  \ 'dddzzzzzzzddddabc')\n# False\ndef same_chars(s0, s1)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_same_chars\n\
  \    candidate = method(:same_chars)\n    assert_equal(true, candidate.call(\"eabcdzzzz\"\
  , \"dddzzzzzzzddeddabc\"))\n    assert_equal(true, candidate.call(\"abcd\", \"dddddddabc\"\
  ))\n    assert_equal(true, candidate.call(\"dddddddabc\", \"abcd\"))\n    assert_equal(false,\
  \ candidate.call(\"eabcd\", \"dddddddabc\"))\n    assert_equal(false, candidate.call(\"\
  abcd\", \"dddddddabcf\"))\n    assert_equal(false, candidate.call(\"eabcdzzzz\"\
  , \"dddzzzzzzzddddabc\"))\n    assert_equal(false, candidate.call(\"aabb\", \"aaccc\"\
  ))\n  end\nend\n"
completions: ["  s0.chars.sort == s1.chars.sort\nend", "  s0.chars.sort == s1.chars.sort\n\
    end", "  # YOUR CODE HERE\nend", "  # TODO: Your code here\nend", "  s0_chars\
    \ = s0.split('')\n  s1_chars = s1.split('')\n  s0_chars.each do |s0_char|\n  \
    \  if s1_chars.include?(s0_char)\n      s1_chars.delete_at(s1_chars.index(s0_char))\n\
    \    else\n      return false\n    end\n  end\n  return true\nend", "  # print\
    \ s0, s1, \"==\"\n  s0.chars.sort.join == s1.chars.sort.join\nend", "  # your\
    \ code here\nend", "  # Make a hash of the letter counts in both strings.\n  h0\
    \ = letter_counts(s0)\n  h1 = letter_counts(s1)", "    return (s0.split('').sort\
    \ - s1.split('').sort).length == 0\nend", "  if s0.length != s1.length\n    return\
    \ false\n  end\n  s0_map = Hash.new(0)\n  s1_map = Hash.new(0)\n  s0.each_char\
    \ do |c|\n    s0_map[c] += 1\n  end\n  s1.each_char do |c|\n    s1_map[c] += 1\n\
    \  end\n  s0_map.keys.each do |k|\n    if s0_map[k] != s1_map[k]\n      return\
    \ false\n    end\n  end\n  return true\nend", "  s0.chars.sort == s1.chars.sort\n\
    end", "  # YOUR CODE HERE\nend", "  h = Hash.new(0)\n  s0.each_char { |c| h[c]\
    \ += 1 }\n  s1.each_char { |c| h[c] -= 1 }\n  h.values.all? { |v| v == 0 }\nend",
  "  #your code here\nend", "  if s0.length != s1.length\n    return false\n  end\n\
    \  s0 = s0.split('').sort.join\n  s1 = s1.split('').sort.join\n  if s0 != s1\n\
    \    return false\n  end\n  return true\nend", "  return false if s0.length !=\
    \ s1.length\n  chars0 = s0.split('')\n  chars1 = s1.split('')\n  chars0.each do\
    \ |char|\n    return false if !chars1.include?(char)\n    chars1.delete_at(chars1.index(char))\n\
    \  end\n  true\nend", "  # your code here\nend", "  s0.chars.sort == s1.chars.sort\n\
    end", "  return false if s0.length != s1.length\n  s0.each_char do |c|\n    return\
    \ false if s0.count(c) != s1.count(c)\n  end\n  true\nend", "  letter_count(s0)\
    \ == letter_count(s1)\nend", "  # YOUR CODE HERE\nend", "    # check if s0 contains\
    \ all chars of s1\n    s0.split('').each do |c|\n        # return false if not\
    \ found\n        return false if s1.index(c).nil?\n    end\n    # check if s1\
    \ contains all chars of s0\n    s1.split('').each do |c|\n        # return false\
    \ if not found\n        return false if s0.index(c).nil?\n    end\n    return\
    \ true\nend", "  char_count = {}\n  s0.each_char do |char|\n    char_count[char]\
    \ = char_count[char].to_i + 1\n  end\n  s1.each_char do |char|\n    char_count[char]\
    \ = char_count[char].to_i - 1\n  end\n  char_count.values.inject(0, &:+) == 0\n\
    end", "  alphabet = ('a'..'z').to_a\n  result = true\n  alphabet.each do |letter|\n\
    \    result = false if s0.count(letter) != s1.count(letter)\n  end\n  result\n\
    end", "  p s0.chars.sort == s1.chars.sort\nend", "  s0.split('').sort.join ==\
    \ s1.split('').sort.join\nend", "  if s0.length == s1.length\n    sorted0 = s0.split('').sort\n\
    \    sorted1 = s1.split('').sort\n    sorted0 == sorted1\n  else\n    false\n\
    \  end\nend", "  if s0.chars.sort == s1.chars.sort\n    true\n  else\n    false\n\
    \  end\nend", "  s0 = s0.split('').sort\n  s1 = s1.split('').sort\n  if s0 ==\
    \ s1\n    true\n  else\n    false\n  end\nend", "  !s0.chars.detect{|c| s0.count(c)\
    \ != s1.count(c)}\nend", "  if s0.downcase.chars.sort.join('') == s1.downcase.chars.sort.join('')\n\
    \    true\n  else\n    false\n  end\nend", "  s0.chars.sort == s1.chars.sort\n\
    end", "  same = 0\n  s0.split('').each do |s|\n    same += 1 if s1.include?(s)\n\
    \  end\n  s0.length == same\nend", "  # TODO: implement this function\n  return\
    \ false if s0.length != s1.length\n  s0.split('').sort == s1.split('').sort\n\
    end", "  s0.split('').sort.join == s1.split('').sort.join\nend", "\thash1 = {}\n\
    \thash2 = {}\n\ts0.split(\"\").each do |char|\n\t\tif hash1[char] == nil\n\t\t\
    \thash1[char] = 1\n\t\telse\n\t\t\thash1[char] += 1\n\t\tend\n\tend\n\ts1.split(\"\
    \").each do |char|\n\t\tif hash2[char] == nil\n\t\t\thash2[char] = 1\n\t\telse\n\
    \t\t\thash2[char] += 1\n\t\tend\n\tend\n\tif hash1 == hash2\n\t\treturn true\n\
    \telse\n\t\treturn false\n\tend\nend", "  # two words have the same characters\
    \ if the following \n  # expression is true:\n  #     (map of frequencies of characters\
    \ in s0) - (map of frequencies of characters in s1) == {}\n  #\n  # This can be\
    \ simplified to:\n  #     (map of frequencies of characters in s0) == (map of\
    \ frequencies of characters in s1)\n  #\n  # We can use our character_counts function\
    \ to build maps of frequencies.\n  #\n  # Example:\n  #     s0 = 'abcd'\n  # \
    \    s1 = 'dddddddabc'\n  #     same_chars(s0, s1) is True\n  #     character_counts(s0)\
    \ == character_counts(s1)\n  #     character_counts(s0) == {'a': 1, 'b': 1, 'c':\
    \ 1, 'd': 1}\n  #     character_counts(s1) == {'a': 1, 'b': 1, 'c': 1, 'd': 6}\n\
    \  \n  # ADD YOUR CODE HERE\n  return character_counts(s0) == character_counts(s1)\n\
    \  \nend", "  return false if s0.length != s1.length\n  s0.split('').each do |c|\n\
    \    return false if s0.count(c) != s1.count(c)\n  end\n  true\nend", "  # your\
    \ code here\nend", "  # your code goes here\n  s0_array = s0.split('')\n  s1_array\
    \ = s1.split('')\n  (s0_array - s1_array).empty? && (s1_array - s0_array).empty?\n\
    end", "  s0.chars.sort == s1.chars.sort\nend", "  array_s0 = s0.chars.sort\n \
    \ array_s1 = s1.chars.sort\n  p array_s0 == array_s1\nend", "  return true if\
    \ s0.length == 0 && s1.length == 0\n  return false if s0.length != s1.length\n\
    \  char = s0[0]\n  char_count = 0\n  s0.each_char do |c|\n    char_count += 1\
    \ if c == char\n  end\n  s1.each_char do |c|\n    char_count -= 1 if c == char\n\
    \  end\n  return false if char_count != 0\n  same_chars(s0[1..-1], s1[1..-1])\n\
    end", "  # TODO: Write me\n  return false if s0.length != s1.length\n  s0.each_char\
    \ do |char|\n    return false if s0.count(char) != s1.count(char)\n  end\n  true\n\
    end", "  c0 = {}\n  c1 = {}\n  s0.each_char { |c| c0[c] = c0[c].to_i + 1 }\n \
    \ s1.each_char { |c| c1[c] = c1[c].to_i + 1 }\n  c0 == c1\nend", "    s0_counts\
    \ = Hash.new(0)\n    s1_counts = Hash.new(0)\n    (0...s0.length).each do |i|\n\
    \        s0_counts[s0[i]] += 1\n    end\n    (0...s1.length).each do |i|\n   \
    \     s1_counts[s1[i]] += 1\n    end\n    s0_counts == s1_counts\nend", "  same_chars\
    \ = []\n  s0.chars.each { |c| same_chars << c if s1.include?(c) }\n  s1.chars.each\
    \ { |c| same_chars << c if s0.include?(c) }\n  same_chars.sort == s0.chars.sort\
    \ && same_chars.sort == s1.chars.sort\nend", "  # using split()\n  # return sorted(s0.split())\
    \ == sorted(s1.split())", "  if (s0.split('').sort & s1.split('').sort).length\
    \ == s0.length && (s0.split('').sort & s1.split('').sort).length == s1.length\n\
    \    return true\n  else\n    return false\n  end\nend", "  s0_arr = s0.split('')\n\
    \  s1_arr = s1.split('')\n  s0_arr.each do |ch|\n    if s1_arr.include?(ch)\n\
    \      s1_arr.delete_at(s1_arr.index(ch))\n    else\n      return false\n    end\n\
    \  end\n  return true\nend", "  return true if s0.chars.sort == s1.chars.sort\n\
    \  false\nend", "\ts1_c = s1.split('')\n\ts0.split('').each { |c|\n\t\treturn\
    \ false if not s1_c.delete_at(s1_c.index(c))\n\t}\n\treturn true\nend", "  s0.chars.sort\
    \ == s1.chars.sort\nend", "  s0.chars.each do |char|\n    s1.sub!(char, '')\n\
    \  end\n  s1.empty?\nend", "  s0.chars.sort == s1.chars.sort\nend", "  s0_chars_array\
    \ = s0.chars.sort\n  s1_chars_array = s1.chars.sort\n  s0_chars_array == s1_chars_array\n\
    end", "  # your code here\nend", "  s0.chars.sort == s1.chars.sort\nend", "  chars0\
    \ = Hash.new\n  chars1 = Hash.new\n  s0.each_char { |c|\n    chars0[c] ||= 0\n\
    \    chars0[c] += 1\n  }\n  s1.each_char { |c|\n    chars1[c] ||= 0\n    chars1[c]\
    \ += 1\n  }\n  chars0 == chars1\nend", "  m0 = {}\n  s0.each_char do |c|\n   \
    \ m0[c] = m0[c].to_i + 1\n  end\n  m1 = {}\n  s1.each_char do |c|\n    m1[c] =\
    \ m1[c].to_i + 1\n  end\n  m0 == m1\nend", "  raise \"Not a string\" unless s0.is_a?(String)\
    \ && s1.is_a?(String)\n  s0_char_counts = Hash.new(0)\n  s1_char_counts = Hash.new(0)\n\
    \  s0.each_char { |char| s0_char_counts[char] += 1 }\n  s1.each_char { |char|\
    \ s1_char_counts[char] += 1 }\n  s0_char_counts == s1_char_counts\nend", "  return\
    \ false if s0.length != s1.length\n  s0.chars.sort.join == s1.chars.sort.join\n\
    end", "  if s0.length == s1.length\n    s0.chars.each { |char| return false if\
    \ s1.count(char) != s0.count(char) }\n    true\n  else\n    false\n  end\nend",
  "  # Write your code here\n  return false if s0.length != s1.length\n  s0_h = {}\n\
    \  s1_h = {}\n  s0.each_char do |c|\n    s0_h[c] = s0_h[c].to_i + 1\n  end\n \
    \ s1.each_char do |c|\n    s1_h[c] = s1_h[c].to_i + 1\n  end\n  #puts s0_h\n \
    \ #puts s1_h\n  return false if s0_h.length != s1_h.length\n  s0_h.each do |k,\
    \ v|\n    return false if s1_h[k].nil?\n    return false if s1_h[k] != v\n  end\n\
    \  return true\nend", "  h0 = {}\n  h1 = {}\n  s0.chars.each do |c|\n    h0[c]\
    \ ||= 0\n    h0[c] += 1\n  end\n  s1.chars.each do |c|\n    h1[c] ||= 0\n    h1[c]\
    \ += 1\n  end\n  h0 == h1\nend", "  # No need to count how many of each character\
    \ - just need to know if\n  # there is the same number of the same characters\n\
    \  # Make a set of each set of characters.\n  # If the sets are equal, the sets\
    \ of characters are the same.\n  Set.new(s0.chars) == Set.new(s1.chars)\nend",
  "  m0 = char_frequency(s0)\n  m1 = char_frequency(s1)\n  m0 == m1\nend", "  # Fill\
    \ me in!\nend", "  if s0.length != s1.length\n    return false\n  end\n  s2 =\
    \ s0.split('').sort\n  s3 = s1.split('').sort\n  i = 0\n  while i < s2.length\n\
    \    if s2[i] != s3[i]\n      return false\n    end\n    i += 1\n  end\n  return\
    \ true\nend", "  if s0.length != s1.length\n    return false\n  end\n  0.upto(s0.length\
    \ - 1) do |i|\n    found = false\n    for c in s1.split('')\n      if c == s0[i]\n\
    \        found = true\n        break\n      end\n    end\n    if !found\n    \
    \  return false\n    end\n  end\n  return true\nend", "  return false if s0.length\
    \ != s1.length\n  s0_chars = s0.chars.sort\n  s1_chars = s1.chars.sort\n  s0_chars.each_with_index\
    \ do |ch, i|\n    return false if ch != s1_chars[i]\n  end\n  true\nend", end,
  "\tarr0, arr1 = s0.split(''), s1.split('')\n\tarr0.all? { |c| arr1.count(c) >= arr0.count(c)\
    \ }\nend", "  s0.chars.sort == s1.chars.sort\nend", "  s0_freq = Hash.new(0)\n\
    \  s1_freq = Hash.new(0)\n  s0.each_char { |c| s0_freq[c] += 1 }\n  s1.each_char\
    \ { |c| s1_freq[c] += 1 }\n  s0_freq == s1_freq\nend", "  if s0.split('').sort\
    \ == s1.split('').sort\n    return true\n  else\n    return false\n  end\nend",
  "  s0_counter = word_counter(s0)\n  s1_counter = word_counter(s1)\n  s0_counter.keys.all?\
    \ { |char| s0_counter[char] == s1_counter[char] }\nend", "  # 1. split string\
    \ into characters in an array.\n  # 2. sort them\n  # 3. put them back into a\
    \ string\n  # 4. check if they are the same\n  s0.split('').sort.join == s1.split('').sort.join\n\
    end", "  # TODO:\n  # return a boolean (True or False)\n  # use frequency array\
    \ and sort\n  #sort the string\n  # if sorted strings are equal then they have\
    \ the same chars\n  s0.split('').sort == s1.split('').sort\nend", "  return false\
    \ if s0.length != s1.length\n  s0.chars.sort == s1.chars.sort\nend", "  return\
    \ false if s0.length != s1.length\n  s0.split('').each do |c|\n    return false\
    \ if s0.count(c) != s1.count(c)\n  end\n  true\nend", "  if s0.chars.sort == s1.chars.sort\n\
    \    return true\n  else\n    return false\n  end\nend", "  res0 = s0.split('').sort\n\
    \  res1 = s1.split('').sort\n  res0 == res1\nend", "  letters = {}\n  s0.chars.each\
    \ do |letter|\n    if letters[letter]\n      letters[letter] += 1\n    else\n\
    \      letters[letter] = 1\n    end\n  end\n  s1.chars.each do |letter|\n    if\
    \ letters[letter]\n      letters[letter] -= 1\n    else\n      return false\n\
    \    end\n  end\n  letters.values.all? { |value| value == 0 }\nend", "  if s0.length\
    \ == s1.length\n    for i in 0..s0.length-1\n      if s0.count(s0[i]) == s1.count(s0[i])\n\
    \        return true\n      else\n        return false\n      end\n    end\n \
    \ else\n    return false\n  end\nend", "\tdict = {}\n\ts0.each_char { |c| dict[c]\
    \ = true }\n\ts1.each_char { |c| return false unless dict[c] }\n\treturn true\n\
    end", "  # Your code here\nend", "  chars_in_s0 = char_freq(s0)\n  chars_in_s1\
    \ = char_freq(s1)\n  chars_in_s0 == chars_in_s1\nend", "  a = s0.split('').sort\n\
    \  b = s1.split('').sort\n  return false if a.length != b.length\n  a.each_with_index\
    \ do |letter, i|\n    return false if letter != b[i]\n  end\n  true\nend", " \
    \ # TODO: your code here\nend", "  a0 = s0.chars.sort\n  a1 = s1.chars.sort\n\
    \  a0 == a1\nend", "  char_count(s0) == char_count(s1)\nend", "\treturn false\
    \ if s0.length != s1.length\n\t\n\ttable0 = {}\n\ttable1 = {}\n\t\n\ts0.each_char\
    \ do |c|\n\t\tif table0[c]\n\t\t\ttable0[c] += 1\n\t\telse\n\t\t\ttable0[c] =\
    \ 1\n\t\tend\n\tend\n\t\n\ts1.each_char do |c|\n\t\tif table1[c]\n\t\t\ttable1[c]\
    \ += 1\n\t\telse\n\t\t\ttable1[c] = 1\n\t\tend\n\tend\n\t\n\ttable0 == table1\n\
    end", "  (s0.chars.uniq.count == s1.chars.uniq.count) && (s0.chars.uniq.sort ==\
    \ s1.chars.uniq.sort)\nend", "  s0_char_count = count_characters(s0)\n  s1_char_count\
    \ = count_characters(s1)\n  s0_char_count == s1_char_count\nend", "  return false\
    \ if s0.length != s1.length\n  hash_a = Hash.new(0)\n  hash_b = Hash.new(0)\n\
    \  s0.chars.each do |char|\n    hash_a[char] += 1\n  end\n  s1.chars.each do |char|\n\
    \    hash_b[char] += 1\n  end\n  hash_a == hash_b\nend", "  # Write your code\
    \ here.\nend", "\thash = Hash.new(0)\n\tfor i in 0..s0.length-1\n\t\thash[s0[i]]\
    \ += 1\n\tend\n\tfor i in 0..s1.length-1\n\t\thash[s1[i]] -= 1\n\tend\n\thash.each\
    \ do |k, v|\n\t\tif v != 0\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\n\
    end", "    words = [s0, s1]\n    word_counts = []\n    words.each do |word|\n\
    \        char_count = Hash.new\n        word.each_char do |char|\n           \
    \ if char_count[char]\n                char_count[char] += 1\n            else\n\
    \                char_count[char] = 1\n            end\n        end\n        word_counts\
    \ << char_count\n    end\n    word_counts[0] == word_counts[1]\nend", "\tss0 =\
    \ s0.chars.sort\n\tss1 = s1.chars.sort\n\tss0 == ss1\nend", "  s0.split('').each\
    \ do |c|\n    return false if s1.count(c) != s0.count(c)\n  end\n  true\nend",
  "  arr = s0.split('')\n  arr.each do |letter|\n    s1.count(letter) == s0.count(letter)\
    \ ? next : (return false)\n  end\n  true\nend", "    s0 = s0.split('').sort\n\
    \    s1 = s1.split('').sort\n    s0 == s1\nend", "  s0.each_char do |c|\n    break\
    \ unless s1.include?(c)\n    s1.sub!(c, '')\n  end\n  s1.empty?\nend", "  return\
    \ false if s0.length != s1.length\n  s0.split('').sort.join == s1.split('').sort.join\n\
    end", "  return false if s0.length != s1.length\n  for i in (0..s0.length - 1)\n\
    \    if s0.count(s0[i]) != s1.count(s0[i])\n      return false\n    end\n  end\n\
    \  return true\nend", "  # if s0.length != s1.length\n  #   return false\n  #\
    \ end\n  #\n  # s0.chars.each do |ch|\n  #   idx = s1.index(ch)\n  #   if idx\n\
    \  #     s1.slice!(idx)\n  #   else\n  #     return false\n  #   end\n  # end\n\
    \  #\n  # return true", "\t# s0.chars.sort.join == s1.chars.sort.join\n\t# return\
    \ true if sorted string are the same\n\ts0.chars.sort.join == s1.chars.sort.join\n\
    end", "  if (s0.chars - s1.chars).empty?\n    return true\n  else\n    return\
    \ false\n  end\nend", "  a = Array.new(256, 0)\n  for i in 0...s0.length\n   \
    \ a[s0[i].ord] += 1\n  end\n  for i in 0...s1.length\n    a[s1[i].ord] -= 1\n\
    \  end\n  a.each { |val| return false if val != 0 }\n  return true\nend", end,
  "  if s0.chars.sort.join == s1.chars.sort.join\n    true\n  else\n    false\n  end\n\
    end", "    s0.chars.uniq.sort == s1.chars.uniq.sort\nend", "  (s0 + s1).chars.sort.uniq.join.chars.sort\
    \ == (s0 + s1).chars.sort\nend", "    return s0.chars.sort.join == s1.chars.sort.join\n\
    end", "  s0.chars.sort == s1.chars.sort\nend", "  s0 = s0.chars.sort.join\n  s1\
    \ = s1.chars.sort.join\n  s0 == s1\nend", "  s0 = s0.chars.sort.join\n  s1 = s1.chars.sort.join\n\
    \  s0 == s1\nend", "  # Your code here\nend", "  return false if s0.length !=\
    \ s1.length\n  s0.split('').sort == s1.split('').sort\nend", "  string_to_count(s0)\
    \ == string_to_count(s1)\nend", "    s0_char_map = {}\n    s1_char_map = {}\n\
    \    s0.each_char do |s0_char|\n        s0_char_map[s0_char] = (s0_char_map[s0_char]\
    \ || 0) + 1\n    end\n    s1.each_char do |s1_char|\n        s1_char_map[s1_char]\
    \ = (s1_char_map[s1_char] || 0) + 1\n    end\n    s0_char_map == s1_char_map\n\
    end", "  h0 = Hash.new(0)\n  h1 = Hash.new(0)\n  s0.chars.each { |c| h0[c] +=\
    \ 1 }\n  s1.chars.each { |c| h1[c] += 1 }\n  h0 == h1\nend", "  s0 = s0.downcase\n\
    \  s1 = s1.downcase\n  s0 = s0.split('').sort.join\n  s1 = s1.split('').sort.join\n\
    \  return s0 == s1\nend", "  h0 = count_letters(s0)\n  h1 = count_letters(s1)\n\
    \  if h0.length != h1.length\n    return false\n  end\n  (0...h0.length).each\
    \ do |i|\n    if h0[i][0] != h1[i][0]\n      return false\n    end\n    if h0[i][1]\
    \ != h1[i][1]\n      return false\n    end\n  end\n  return true\nend", "  s0.chars.sort\
    \ == s1.chars.sort\nend", "  s0.chars.sort == s1.chars.sort\nend", "  s0.chars.all?{|c|\
    \ s1.count(c) >= s0.count(c)}\nend", "\treturn false if s0.length != s1.length\n\
    \t# split the string into an array of characters\n\ts0.split('').each do |char|\n\
    \t\t# take the first index of a character from the second string\n\t\t# if it\
    \ doesn't exist then return false\n\t\t# otherwise remove the character from the\
    \ string\n\t\treturn false unless index = s1.index(char)\n\t\ts1.slice!(index)\n\
    \tend\n\ttrue\nend", "  # Use a hash to count how many times each character appears\
    \ in a string.\n  def count_chars(s)\n    h = {}\n    for c in s.split('')\n \
    \     if h.has_key?(c)\n        h[c] += 1\n      else\n        h[c] = 1\n    \
    \  end\n    end\n    h\n  end", "  # Write your code here.\n  s0_count = count_char(s0)\n\
    \  s1_count = count_char(s1)\n  compare(s0_count, s1_count)\nend", "    return\
    \ s0.chars.sort.join == s1.chars.sort.join\nend", "  if s0.length > s1.length\n\
    \    s0, s1 = s1, s0\n  end\n  s0_map = {}\n  s0.chars.each do |c|\n    s0_map[c]\
    \ = 0 unless s0_map.has_key?(c)\n    s0_map[c] += 1\n  end\n  s1.chars.each do\
    \ |c|\n    return false unless s0_map.has_key?(c)\n    s0_map[c] -= 1\n    return\
    \ false if s0_map[c] < 0\n  end\n  return true\nend", "  if (s0.length == s1.length)\n\
    \    s0.each_char do |c|\n      return false if (s1.count(c) != s0.count(c))\n\
    \    end\n    return true\n  end\n  return false\nend", "  (0..s0.length-1).all?\
    \ { |i| s1.include?(s0[i]) } && (0..s1.length-1).all? { |i| s0.include?(s1[i])\
    \ }\nend", "  s0_char_count = Hash.new(0)\n  s1_char_count = Hash.new(0)", " \
    \ return false if s0.length != s1.length\n  # loop\n  # counter = s0.length -\
    \ 1\n  # while counter >= 0\n  #   if s0.count(s0[counter]) != s1.count(s0[counter])\n\
    \  #     return false\n  #   end\n  #   counter -= 1\n  # end\n  # return true\n\
    \  # for loop\n  for i in 0..s0.length-1\n    if s0.count(s0[i]) != s1.count(s0[i])\n\
    \      return false\n    end\n  end\n  return true\nend", "  s0.chars.sort ==\
    \ s1.chars.sort\nend", "  s0.chars.sort == s1.chars.sort\nend", "    str1 = s0.chars.sort.join('')\n\
    \    str2 = s1.chars.sort.join('')\n    str1 == str2\nend", "  if s0.chars.to_a.sort\
    \ == s1.chars.to_a.sort\n    return true\n  else\n    return false\n  end\nend",
  "  list_s0 = string_to_list s0\n  list_s1 = string_to_list s1\n  if (list_s0.length\
    \ != list_s1.length)\n    return false\n  end\n  list_s0.each do |c|\n    if not\
    \ list_s1.include? c\n      return false\n    end\n  end\n  true\nend", "  s0.chars.sort\
    \ == s1.chars.sort\nend", "  l0 = s0.length\n  l1 = s1.length\n  if l0 != l1\n\
    \    return false\n  end\n  s0.split('').sort == s1.split('').sort\nend", "  hash\
    \ = Hash.new {|h, k| h[k] = 0}\n  s0.each_char {|c| hash[c] += 1}\n  s1.each_char\
    \ {|c| hash[c] -= 1}\n  hash.values.all?(&:zero?)\nend", "  return count_chars(s0)\
    \ == count_chars(s1)\nend", "  s0.chars.sort == s1.chars.sort\nend", "  s0.chars.sort\
    \ == s1.chars.sort\nend", "  # Your code here...\nend", "    chars = Hash.new(0)\n\
    \    s0.each_char do |char|\n        chars[char] += 1\n    end\n    s1.each_char\
    \ do |char|\n        chars[char] -= 1\n    end\n    chars.values.all? { |count|\
    \ count == 0 }\nend", "  if s0.chars.sort == s1.chars.sort\n    return true\n\
    \  else\n    return false\n  end\nend", "  s0.each_char do |char|\n    s1.sub!(char,\
    \ '')\n  end\n  s1.empty?\nend", "  s0_ = \"\"\n  s1_ = \"\"\n  s0.each_char do\
    \ |c|\n    if !s0_.include?(c)\n      s0_ += c\n    end\n  end\n  s1.each_char\
    \ do |c|\n    if !s1_.include?(c)\n      s1_ += c\n    end\n  end\n  s0_.chars.sort\
    \ == s1_.chars.sort\nend", "  if s0.length != s1.length\n    return false\n  end\n\
    \  for i in 0..s0.length\n    if !(s1.include?(s0[i]))\n      return false\n \
    \   end\n  end\n  return true\nend", "    alpha = ('a'..'z').to_a\n    h0 = alpha.each_with_object({})\
    \ { |ch, hash| hash[ch] = 0 }\n    h1 = alpha.each_with_object({}) { |ch, hash|\
    \ hash[ch] = 0 }\n    s0.each_char { |ch| h0[ch] += 1 }\n    s1.each_char { |ch|\
    \ h1[ch] += 1 }\n    alpha.all? { |ch| h0[ch] == h1[ch] }\nend", "  hash = {}\n\
    \  s0.each_char { |c| hash[c] = 0 }\n  s1.each_char { |c| hash[c] = 0 }\n  s0.each_char\
    \ { |c| hash[c] += 1 }\n  s1.each_char { |c| hash[c] -= 1 }\n  hash.each_value\
    \ { |v| return false if v != 0 }\n  true\nend", "  return s0.split('').sort.join\
    \ == s1.split('').sort.join\nend", "  #  s0.chars.sort { |x, y| x.casecmp(y) }\
    \ == s1.chars.sort { |x, y| x.casecmp(y) }\n  #  s0.chars.sort.join == s1.chars.sort.join\n\
    \  s0.chars.sort.join == s1.chars.sort.join\nend", "\tif (s0.length != s1.length)\n\
    \t\treturn false\n\tend\n\ttemp = s1.gsub(s0, \"\")\n\tif (temp.length == 0)\n\
    \t\treturn true\n\telse\n\t\treturn false\n\tend\nend", "  word_hash = Hash.new\n\
    \  s0.each_char do |c|\n    word_hash[c] = (word_hash[c] || 0) + 1\n  end\n  s1.each_char\
    \ do |c|\n    word_hash[c] = (word_hash[c] || 0) - 1\n  end\n  # All values in\
    \ word_hash should now be zero or it's false\n  return word_hash.values.all? {\
    \ |c| c == 0 }\nend", "  # your code here\nend", "    #...\n    s0.chars.sort\
    \ == s1.chars.sort\nend", "  s0.chars.sort == s1.chars.sort\nend", "  hash = {}\n\
    \  s0.each_char do |char|\n    if hash[char]\n      hash[char] += 1\n    else\n\
    \      hash[char] = 1\n    end\n  end\n  s1.each_char do |char|\n    if hash[char]\n\
    \      hash[char] -= 1\n    else\n      return false\n    end\n  end\n  hash.each\
    \ do |_key, value|\n    return false if value != 0\n  end\n  true\nend", "  s0_arr\
    \ = s0.split('')\n  s1_arr = s1.split('')\n  s0_arr.sort == s1_arr.sort\nend",
  "  s0_counter = Hash.new(0)\n  s1_counter = Hash.new(0)\n  s0.each_char { |x| s0_counter[x]\
    \ += 1 }\n  s1.each_char { |x| s1_counter[x] += 1 }\n  s0_counter == s1_counter\n\
    end", "  s0.chars.sort == s1.chars.sort\nend", "  is_same = true\n  s0.each_char\
    \ do |c|\n    if s1.include?(c)\n      s1.sub!(c, '')\n    else\n      is_same\
    \ = false\n      break\n    end\n  end\n  if s1.length != 0\n    is_same = false\n\
    \  end\n  return is_same\nend", "  hashed_s0 = {}\n  hashed_s1 = {}\n  s0.chars.each\
    \ do |c|\n    hashed_s0[c] = hashed_s0[c].to_i + 1\n  end\n  s1.chars.each do\
    \ |c|\n    hashed_s1[c] = hashed_s1[c].to_i + 1\n  end\n  hashed_s0 == hashed_s1\n\
    end", "  s0.delete(s1) == ''\nend", "  a, b = [s0, s1].map{|s| s.chars.sort.join}\n\
    \  a == b\nend", "  return false if s0.length != s1.length\n  s0.split('').each\
    \ do |i|\n    return false if s1.count(i) != s0.count(i)\n  end\n  true\nend",
  "  s0.chars.sort == s1.chars.sort\nend", "  return false if s0.length != s1.length\n\
    \  (0...s0.length).each do |i|\n    return false if s0[i] != s1[i]\n  end\n  true\n\
    end", "  # Your code here\nend", "  s0.chars.sort == s1.chars.sort\nend", "  if\
    \ s0.split('').sort == s1.split('').sort\n    return true\n  else\n    return\
    \ false\n  end\nend", "  s0.chars.sort == s1.chars.sort\nend", "  s0.chars.uniq.all?\
    \ { |char| s0.count(char) == s1.count(char) }\nend", "  s0.split('').sort == s1.split('').sort\n\
    end", "  # Your code here\nend", "  counts = {}\n  str0 = s0.split('')\n  str1\
    \ = s1.split('')\n  str0.each do |c|\n    counts[c] = 0 if counts[c].nil?\n  \
    \  counts[c] += 1\n  end\n  str1.each do |c|\n    counts[c] = 0 if counts[c].nil?\n\
    \    counts[c] -= 1\n  end\n  counts.each_value do |v|\n    return false if v\
    \ != 0\n  end\n  true\nend", "  # check if two words have the same characters\n\
    \  # s0 and s1 are strings\n  # return boolean", "  s0 = s0.split('').sort\n \
    \ s1 = s1.split('').sort\n  if s0 == s1\n    true\n  else\n    false\n  end\n\
    end", "  return false if s0.length != s1.length\n  s0.each_char do |char|\n  \
    \  return false if !s1.include?(char)\n  end\n  true\nend", "\t# Code here\nend",
  "  # Your code here\nend", "  s0.split('').sort == s1.split('').sort\nend", "  s0.chars.sort\
    \ == s1.chars.sort\nend", "  return false if s0.length != s1.length\n  return\
    \ false if s0.length == 0\n  return false if s1.length == 0\n  return true if\
    \ s0.chars.sort == s1.chars.sort\n  return false\nend", "  (0...s0.length).each\
    \ do |i|\n    if s0[i] != s1[i]\n      return false\n    end\n  end\n  (s0.length...s1.length).each\
    \ do |i|\n    if s1[i] != s1[i-s0.length]\n      return false\n    end\n  end\n\
    \  return true\nend", "  t0 = Hash.new(0)\n  t1 = Hash.new(0)\n  s0.each_char\
    \ { |c| t0[c] += 1 }\n  s1.each_char { |c| t1[c] += 1 }\n  t0 == t1\nend", " \
    \ # ----- your code here -----\n  s0_chars = s0.chars.sort\n  s1_chars = s1.chars.sort\n\
    \  if s0_chars == s1_chars\n    return true\n  else\n    return false\n  end\n\
    end", "  # Your code here\nend", "  len0 = s0.length\n  len1 = s1.length\n  (len0\
    \ < len1 ? s0 : s1).each_char.map { |c|\n    idx0 = s0.index(c)\n    idx1 = s1.index(c)\n\
    \    if idx0 and idx1\n      s0 = s0[0...idx0] + s0[idx0+1..-1]\n      s1 = s1[0...idx1]\
    \ + s1[idx1+1..-1]\n    end\n  }\n  s0.empty? and s1.empty?\nend", "  char_counts\
    \ = Hash.new(0)\n  s0.each_char { |char| char_counts[char] += 1 }\n  s1.each_char\
    \ { |char| char_counts[char] -= 1 }\n  char_counts.all? { |_, count| count ==\
    \ 0 }\nend", "  s0.chars.sort == s1.chars.sort\nend", "  char_count(s0) == char_count(s1)\n\
    end", "  d0 = {}\n  d1 = {}\n  s0.each_char do |c|\n    d0[c] ||= 0\n    d0[c]\
    \ += 1\n  end\n  s1.each_char do |c|\n    d1[c] ||= 0\n    d1[c] += 1\n  end\n\
    \  d0 == d1\nend", "  return false if s0.length != s1.length\n  sort(s0) == sort(s1)\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
