name: HumanEval_64_vowels_count
language: rb
prompt: "# Write a function vowels_count which takes a string representing\n# a word\
  \ as input and returns the number of vowels in the string.\n# Vowels in this case\
  \ are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n# vowel, but only when it is\
  \ at the end of the given word.\n# Example:\n# >>> vowels_count(\"abcde\")\n# 2\n\
  # >>> vowels_count(\"ACEDY\")\n# 3\ndef vowels_count(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_vowels_count\n\
  \    candidate = method(:vowels_count)\n    assert_equal(2, candidate.call(\"abcde\"\
  ))\n    assert_equal(3, candidate.call(\"Alone\"))\n    assert_equal(2, candidate.call(\"\
  key\"))\n    assert_equal(1, candidate.call(\"bye\"))\n    assert_equal(2, candidate.call(\"\
  keY\"))\n    assert_equal(1, candidate.call(\"bYe\"))\n    assert_equal(3, candidate.call(\"\
  ACEDY\"))\n  end\nend\n"
completions: ["  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  count = 0\n  s.each_char\
    \ do |x|\n    count += 1 if vowels.include?(x)\n  end\n  count\nend", "  s.downcase.gsub(/[^aeiouy]/,\
    \ '').length\nend", "\tvowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\ts.split(\"\
    \").count{|c| vowels.include?(c)}\nend", "  vowel_count = 0\n  s.downcase.each_char\
    \ do |i|\n    if \"aeiouy\".include?(i)\n      vowel_count += 1\n    end\n  end\n\
    \  return vowel_count\nend", "  vowels = 0\n  vowels += s.count('a')\n  vowels\
    \ += s.count('e')\n  vowels += s.count('i')\n  vowels += s.count('o')\n  vowels\
    \ += s.count('u')\n  vowels += 1 if s[-1] == 'y'\n  vowels\nend", "  last_idx\
    \ = s.length - 1\n  s.chars.inject(0) do |vowels, c|\n    if (c =~ /[aeiou]/i)\
    \ || (c == 'y' && last_idx == s.index(c))\n      vowels += 1\n    end\n    vowels\n\
    \  end\nend", "  s.count('aeiouy')\nend", "  vowels = 'aeiou'\n  count = 0\n \
    \ s.downcase.each_char do |char|\n    if vowels.include?(char)\n      count +=\
    \ 1\n    end\n  end\n  if s[-1] == 'y'\n    count += 1\n  end\n  count\nend",
  "  s.scan(/[aeiouy]/i).count\nend", "\tvowels = ['a', 'e', 'i', 'o', 'u']\n\tcount\
    \ = 0\n\ts.each_char do |c|\n\t\tcount += 1 if vowels.include?(c.downcase)\n\t\
    end\n\tcount\nend", "  if s == \"\"\n    return 0\n  end\n  word = s.downcase\n\
    \  count = 0\n  for letter in word.split(\"\")\n    if letter == \"a\" || letter\
    \ == \"e\" || letter == \"i\" || letter == \"o\" || letter == \"u\"\n      count\
    \ += 1\n    end\n  end\n  return count\nend", "    s.count('aeiouy')\nend", " \
    \   s.count(\"aeiouy\")\nend", "  count = 0\n  s.chars.each_with_index do |c,\
    \ i|\n    if 'aeiouy'.include?(c.downcase)\n      count += 1 unless i == s.length\
    \ - 1 && c.downcase == 'y'\n    end\n  end\n  count\nend", "  vowels = ['a', 'e',\
    \ 'i', 'o', 'u']\n  count = 0\n  for i in 0..s.length\n    if s[i] == 'y' && i\
    \ == s.length-1\n      count += 1\n    elsif vowels.include?(s[i])\n      count\
    \ += 1\n    end\n  end\n  return count\nend", "    vowels = ['a', 'e', 'i', 'o',\
    \ 'u']\n    counter = 0\n    s.each_char do |c|\n        if vowels.include?(c)\n\
    \            counter += 1\n        end\n    end\n    counter\nend", "  [s].reject{|x|\
    \ x =~ /[aeiouy]/}.length\nend", "  s.downcase.count(\"aeiouy\")\nend", "\tvowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\tcount = 0\n\tfor i in 0..s.length-1\n\
    \t\tif vowels.include?(s[i].downcase)\n\t\t\tcount += 1\n\t\tend\n\tend\n\treturn\
    \ count\nend", end, "  vowel = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  count =\
    \ 0\n  s.split(\"\").each { |letter| count += 1 if vowel.include?(letter) }\n\
    \  count\nend", "  vowel = ['a', 'e', 'i', 'o', 'u']\n  result = 0\n  s.split('').each\
    \ do |str|\n    if vowel.include?(str)\n      result += 1\n    end\n  end\n  if\
    \ s[-1] == 'y'\n    result += 1\n  end\n  result\nend", "  if s.match(/[aeiouy]/i)\n\
    \    return s.scan(/[aeiouy]/i).length\n  else\n    return 0\n  end\nend", " \
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  count = 0\n  s.each_char { |char|\
    \ count += 1 if vowels.include?(char) }\n  count\nend", "  vowels = %w(a e i o\
    \ u)\n  count = 0\n  s.downcase.each_char do |char|\n    if vowels.include?(char)\n\
    \      count += 1\n    end\n  end\n  count\nend", "  vcount = 0\n  last_index\
    \ = s.length - 1\n  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  s.downcase.each_char.with_index\
    \ do |c, i|\n    if i == last_index && c == \"y\"\n      vcount += 1\n    elsif\
    \ vowels.include?(c)\n      vcount += 1\n    end\n  end\n  vcount\nend", "  vowels\
    \ = ['a', 'e', 'i', 'o', 'u']\n  count = 0\n  s.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      count += 1\n    end\n  end\n  count\nend", "  s.downcase.chars.select{|x|\
    \ \"aeiouy\".include?(x)}.length\nend", end, "  s.downcase.count(\"aeiouy\")\n\
    end", "  vowels = \"aeiou\"\n  count = 0\n  s.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      count += 1\n    end\n  end\n  count\nend", "  c = 0\n  s.downcase.each_char\
    \ do |c|\n    if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n  \
    \    c += 1\n    end\n  end\n  return c\nend\nputs vowels_count(\"ABCDE\")", " \
    \ count = 0\n  ('a'..'z').each do |vowel|\n    if vowel == 'y'\n      count +=\
    \ s.end_with?(vowel) ? 1 : 0\n    else\n      count += s.count(vowel)\n    end\n\
    \  end\n  count\nend", "  vowels = 'aeiouy'\n  count = 0\n  s.chars.each do |c|\n\
    \    count += 1 if vowels.include?(c.downcase)\n  end\n  count\nend", "  if (s.end_with?('y'))\n\
    \    return s.count('aeiouy')\n  else\n    return s.count('aeiou')\n  end\nend",
  "  count = 0\n  for i in 0..s.length-1\n    if s[i] == 'a' or s[i] == 'e' or s[i]\
    \ == 'i' or s[i] == 'o' or s[i] == 'u'\n      count += 1\n    end\n  end\n  if\
    \ count > 0\n    return count\n  else\n    return 0\n  end\nend", "\treturn s.scan(/[aeiou]/i).count\n\
    end", "  num_vowels = 0\n  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  s.downcase.each_char\
    \ do |ch|\n    if vowels.include?(ch)\n      num_vowels += 1\n    end\n  end\n\
    \  num_vowels\nend", "  # Write your code here\nend", "  c = 0\n  ('a'..'z').each\
    \ do |x|\n    c += 1 if s.downcase.include?(x)\n  end\n  c\nend", "  s.downcase.gsub(/[^aeiouy]/,\
    \ '').length\nend", "  return s.count(\"aeiouy\")\nend", "  s.count(\"aeiouy\"\
    )\nend", "\treturn s.count('aeiouyAEIOUY')\nend", "  # Your code here\nend", " \
    \ # TODO: your solution here\n  c=0\n  s.downcase.each_char do |c|\n    if c=='a'\
    \ or c=='e' or c=='i' or c=='o' or c=='u' or c=='y'\n      c+=1\n    end\n  end\n\
    \  return c\nend", "  # your code here\nend", "\tvowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n\tcount = 0\n\ts.split(\"\").each do |letter|\n\t\tif vowels.include?(letter)\n\
    \t\t\tcount += 1\n\t\tend\n\tend\n\tif s[-1] == \"y\"\n\t\tcount += 1\n\tend\n\
    \tcount\nend", "\tcount = 0\n\ts.downcase.each_char do |c|\n\t\tcount += 1 if\
    \ c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u'\n\tend\n\tcount\nend",
  "  n = 0\n  for i in 0...s.length\n    if s[i] == 'a' || s[i] == 'e' || s[i] ==\
    \ 'i' || s[i] == 'o' || s[i] == 'u'\n      n = n + 1\n    end\n  end\n  if s[s.length\
    \ - 1] == 'y'\n    n = n + 1\n  end\n  return n\nend", "  vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]\n  count = 0\n  s.downcase.split(\"\").each do |letter|\n\
    \    if vowels.include?(letter)\n      count += 1\n    end\n  end\n  count\nend",
  "  (s.downcase.count \"aeiouy\") - (s.downcase.count \"a\")\nend", "  count = 0\n\
    \  length = s.length\n  s.each_char do |c|\n    if c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u'\n      count += 1\n    elsif c == 'y' && s.index(c)\
    \ == length - 1\n      count += 1\n    end\n  end\n  count\nend", "  vowels =\
    \ ['a', 'e', 'i', 'o', 'u']\n  count = 0\n  s.split('').each do |x|\n    if vowels.include?(x)\
    \ or x == 'y'\n      count += 1\n    end\n  end\n  count\nend", "\tvowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n\tcount = 0\n\ts.split(\"\").each do |c|\n\t\
    \tcount += 1 if vowels.include?(c)\n\tend\n\tcount\nend", "  s.downcase.count('aeiouy')\n\
    end", "  s.count('aeiouy')\nend", "  vowels = ['a', 'e', 'i', 'o', 'u']\n  count\
    \ = 0\n  s.each_char do |char|\n    count += 1 if vowels.include?(char.downcase)\n\
    \  end\n  count\nend", "  a = s.downcase.split('')\n  b = Array.new\n  for n in\
    \ a\n    b.push n if n =~ /[aeiou]/\n  end\n  return b.length\nend", "  vowels\
    \ = \"aeiouy\"\n  count = 0\n  s.downcase.each_char do |char|\n    if vowels.include?(char)\n\
    \      count += 1\n    end\n  end\n  return count\nend", "\tc = 0\n\tif (s[-1]\
    \ == 'y')\n\t\tc = c + 1\n\tend\n\ts.downcase!\n\tfor x in 0..s.length\n\t\tif\
    \ s[x] == 'a'\n\t\t\tc = c + 1\n\t\telsif s[x] == 'e'\n\t\t\tc = c + 1\n\t\telsif\
    \ s[x] == 'i'\n\t\t\tc = c + 1\n\t\telsif s[x] == 'o'\n\t\t\tc = c + 1\n\t\telsif\
    \ s[x] == 'u'\n\t\t\tc = c + 1\n\t\tend\n\tend\n\tc\nend", "  if s.count(\"aeiou\"\
    ) == 1\n    return s.count(\"aeiou\")\n  elsif s.count(\"aeiou\") > 1\n    return\
    \ s.count(\"aeiou\")\n  elsif s.count(\"aeiou\") == 0\n    return 0\n  end\nend",
  "\tvowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\ti = 0\n\tcount = 0\n\twhile i\
    \ < s.length\n\t\t# if s[i] == \"a\" || s[i] == \"e\" || s[i] == \"i\" || s[i]\
    \ == \"o\" || s[i] == \"u\"\n\t\t# if s[i] == \"a\" || s[i] == \"e\" || s[i] ==\
    \ \"i\" || s[i] == \"o\" || s[i] == \"u\"\n\t\tif vowels.include?(s[i])\n\t\t\t\
    count += 1\n\t\tend\n\t\ti += 1\n\tend\n\tcount\nend", "    vowels = ['a', 'e',\
    \ 'i', 'o', 'u']\n    count = 0\n    if vowels.include? s[-1]\n        count +=\
    \ 1\n    end\n    for i in (0..s.length-2)\n        if vowels.include? s[i]\n\
    \            count += 1\n        end\n    end\n    return count\nend", "  s.count(\"\
    aeiouy\")\nend", "\tvowels = ['a', 'e', 'i', 'o', 'u']\n\ts = s.downcase\n\tvowels.reduce(0)\
    \ { |acc, c| acc + (s.count(c) + (s[-1] == c ? 1 : 0)) }\nend", "\t# Write your\
    \ code here\n\t# Replace 0 with the correct number of vowels\n\treturn 0\nend",
  "  (s =~ /a|e|i|o|u/i ? s.downcase.count(\"aeiou\") : 0) +\n    (s.downcase.reverse\
    \ =~ /^y/ ? 1 : 0)\nend", "\ts.downcase!\n\tvowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]\n\tcount = 0\n\tletters = s.split(\"\")\n\tletters.each do |x|\n\t\
    \tif vowels.include?(x) == true\n\t\t\tcount += 1\n\t\tend\n\tend\n\treturn count\n\
    end", "  # Your code here\nend", "\t# TODO\nend", "  count = 0\n  vowels = 'aeiou'\n\
    \  s.each_char do |l|\n    if vowels.include?(l)\n      count += 1\n    end\n\
    \  end\n  count\nend", "  vowels = %w(a e i o u)\n  s.chars.inject(0) do |count,\
    \ char|\n    if vowels.include?(char.downcase)\n      count + 1\n    else\n  \
    \    count\n    end\n  end\nend", "  vowels = 0\n  if (s.end_with?(\"y\"))\n \
    \   vowels += 1\n  end\n  i = 0\n  while (i < s.length)\n    if s[i] == \"a\"\
    \ or s[i] == \"e\" or s[i] == \"i\" or s[i] == \"o\" or s[i] == \"u\"\n      vowels\
    \ += 1\n    end\n    i += 1\n  end\n  return vowels\nend", "\t# your code here\n\
    \t# n = 0\n\t# s.chars.each do |c|\n\t# \tif c.downcase == 'a' or c.downcase ==\
    \ 'e' or c.downcase == 'i' or c.downcase == 'o' or c.downcase == 'u' or c.downcase\
    \ == 'y'\n\t# \t\tn += 1\n\t# \tend\n\t# end\n\t# return n\n\t# above code works\
    \ but try a more elegent solution with regex\n\treturn s.downcase.scan(/[aeiouy]/).length\n\
    end", "  # FILL ME IN\nend", "  vowels = s.downcase.scan(/[aeiouy]/)\n  vowels.count\n\
    end", "  s.downcase.scan(/[aeiouy]/).size\nend", "    count = 0\n    arr = s.split(\"\
    \")\n    arr.each do |c|\n        if c.downcase == \"a\" || c.downcase == \"e\"\
    \ || c.downcase == \"i\" || c.downcase == \"o\" || c.downcase == \"u\"\n     \
    \       count += 1\n        end\n    end\n    if s[-1].downcase == \"y\"\n   \
    \     count += 1\n    end\n    return count\nend", "  s.delete!('^aeiouy')\n \
    \ s.size\nend", "  s.scan(/[aeiouy]/i).size\nend", "    return (s.downcase.count('aeiouy')\
    \ - (s.downcase.count('y') - 1))\nend", "  #y is not a vowel in words that don't\
    \ end with it\n  if s[-1] == \"y\"\n    s.delete!(\"^aeiouy\")\n  else\n    s.delete!(\"\
    ^aeiou\")\n  end\n  s.length\nend", "    vowels_in_word = 0\n    vowels = \"aeiouy\"\
    \n    s.each_char do |character|\n        if vowels.include?(character)\n    \
    \        vowels_in_word += 1\n        end\n    end\n    return vowels_in_word\n\
    end", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  count = 0\n  s.split(\"\
    \").each do |letter|\n    if vowels.include?(letter)\n      count += 1\n    end\n\
    \  end\n  return count\nend\nputs vowels_count(\"abcde\")\nputs vowels_count(\"\
    ACEDY\")", "  s.count('a','e','i','o','u','y')\nend", "    # Your code here\n\
    \    s.downcase.count(\"aeiouy\")\nend", "    if s.class != String\n        return\
    \ \"Please enter a string!\"\n    end\n    counter = 0\n    vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]\n    vowels.each do |vowel|\n        if s.include?(vowel)\n\
    \            counter += 1\n        end\n    end\n    if s[-1] == \"y\"\n     \
    \   counter += 1\n    end\n    return counter\nend", "  vowels = \"aeiou\"\n \
    \ count = 0\n  s.each_char do |c|\n    if c.downcase == \"y\"\n      count +=\
    \ 1 if s.index(c) == s.length - 1\n    else\n      count += 1 if vowels.include?(c.downcase)\n\
    \    end\n  end\n  count\nend", "\t#takes a string\n\t#returns number of vowels\
    \ in string\n\tn = 0\n\tvowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\ts.split(\"\
    \").each do |letter|\n\t\tif vowels.include?(letter)\n\t\t\tn += 1\n\t\tend\n\t\
    end\n\tif s[-1] == \"y\"\n\t\tn += 1\n\tend\n\tn\nend", "  n = 0\n  if s[-1] ==\
    \ 'y'\n    n += 1\n  end\n  s.each_char do |c|\n    if c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u'\n      n += 1\n    end\n  end\n  return n\n\
    end", "  s.chars.count { |c| ['a', 'e', 'i', 'o', 'u'].include?(c.downcase) }\n\
    end", "    if s.length == 0\n        return 0\n    elsif s[0] == 'a' or s[0] ==\
    \ 'e' or s[0] == 'i' or s[0] == 'o' or s[0] == 'u'\n        return 1 + vowels_count(s[1,\
    \ s.length - 1])\n    elsif s[0] == 'y' and s.length == 1\n        return 1\n\
    \    else\n        return vowels_count(s[1, s.length - 1])\n    end\nend", " \
    \ # TODO: write your code here\nend", "  count = 0\n  vowels = 'aeiouy'\n  arr\
    \ = s.split('')\n  arr.each do |i|\n    if vowels.include?(i)\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "\nend", "  string_array = s.split(\"\
    \")\n  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  counter = 0\n  string_array.each\
    \ do |x|\n    if vowels.include?(x) || (x == \"y\" && string_array.last == \"\
    y\")\n      counter += 1\n    end\n  end\n  return counter\nend", "  return s.count('aeiouy')\n\
    end\nputs vowels_count(\"acexy\")", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n  v_count = 0\n  s.downcase.each_char do |x|\n    v_count += 1 if vowels.include?(x)\n\
    \  end\n  if s[-1] == \"y\"\n    v_count += 1\n  end\n  return v_count\nend",
  "\nend", "\ts.scan(/[aeiouy]/i).length\nend", "\tstring = s.downcase\n\tvowels =\
    \ 0\n\tstring.each_char do |c|\n\t\tvowels += 1 if ['a', 'e', 'i', 'o', 'u'].include?(c)\n\
    \tend\n\tvowels\nend", "  count = 0\n  vowels = ['a', 'e', 'i', 'o', 'u']\n  for\
    \ i in (0..s.length-1)\n    if vowels.include?(s[i].downcase)\n      count +=\
    \ 1\n    end\n  end\n  if s[-1] == 'y'\n    count += 1\n  end\n  return count\n\
    end", "  ary = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  count = 0\n  s.downcase.each_char\
    \ do |c|\n    count += 1 if ary.include?(c)\n  end\n  count\nend", "  # Insert\
    \ your code here.\nend", "  # \n  s.downcase!\n  vowels = 'aeiou'\n  count = 0\n\
    \  s.each_char do |c|\n    count += 1 if vowels.include?(c)\n  end\n  count\n\
    end", "  count = 0\n  if s.length == 1\n    if s.downcase == \"a\" or s.downcase\
    \ == \"e\" or s.downcase == \"i\" or s.downcase == \"o\" or s.downcase == \"u\"\
    \n      count += 1\n    end\n  elsif s.length > 1\n    if s[0].downcase == \"\
    a\" or s[0].downcase == \"e\" or s[0].downcase == \"i\" or s[0].downcase == \"\
    o\" or s[0].downcase == \"u\"\n      count += 1\n    end\n    count += vowels_count(s[1..-1])\n\
    \  end\n  return count\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \  #count = 0\n  #s.each_char do |c|\n  #  count = count + 1 if vowels.include?(c)\n\
    \  #end\n  #count\n  vowels.inject(0) { |c, vowel| c + s.downcase.count(vowel)\
    \ }\nend", "\tcount = 0\n\ti = 0\n\twhile i < s.length\n\t\tif s[i] == \"a\" or\
    \ s[i] == \"e\" or s[i] == \"i\" or s[i] == \"o\" or s[i] == \"u\"\n\t\t\tcount\
    \ += 1\n\t\telsif s[i] == \"y\" and i == s.length - 1\n\t\t\tcount += 1\n\t\t\
    end\n\t\ti += 1\n\tend\n\treturn count\nend", "  return s.downcase.scan(/[aeiouy]/).count\n\
    end", "  return s.count(\"a\").to_i + s.count(\"e\").to_i + s.count(\"i\").to_i\
    \ + s.count(\"o\").to_i + s.count(\"u\").to_i + (s.count(\"y\").to_i if s[-1]\
    \ == \"y\")\nend", "\ts = s.chars.select{|c| /[aeiou]/i.match?(c)}.length\nend",
  "  s.downcase.chars.count{|c| 'aeiouy'.include?(c)}\nend", "  # Make it lowercase\n\
    \  s = s.downcase\n  # Count the vowels\n  vowels = s.count \"aeiou\"\n  # Return\
    \ the number of vowels\n  return vowels\nend", "  # Your code here\nend", "  vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  num_vowels = 0\n  i = 0\n  length =\
    \ s.length\n  while i < length\n    letter = s[i]\n    if vowels.include?(letter)\n\
    \      num_vowels += 1\n    end\n    i += 1\n  end\n  return num_vowels\nend",
  "  # return number of vowels\n  return 0 if s.length == 0", "  num = 0\n  (0..s.length-1).each\
    \ do |i|\n    case s[i]\n    when 'a', 'e', 'i', 'o', 'u'\n      num += 1\n  \
    \  when 'y'\n      if i == s.length-1\n        num += 1\n      end\n    end\n\
    \  end\n  return num\nend", "\tif !s.is_a? String\n\t\tputs \"Sorry, you need\
    \ to enter a word.\"\n\t\treturn\n\tend\n\tcount = 0\n\ts.each_char do |c|\n\t\
    \tif c.upcase == \"A\" || c.upcase == \"E\" || c.upcase == \"I\" || c.upcase ==\
    \ \"O\" || c.upcase == \"U\" || c.upcase == \"Y\"\n\t\t\tcount += 1\n\t\tend\n\
    \tend\n\treturn count\nend", "  if s.downcase.include?('y')\n    vowels = s.downcase.chars.select{|a|\
    \ a == 'a' || a == 'e' || a == 'i' || a == 'o' || a == 'u' || a == 'y'}\n    return\
    \ vowels.count\n  else\n    vowels = s.downcase.chars.select{|a| a == 'a' || a\
    \ == 'e' || a == 'i' || a == 'o' || a == 'u'}\n    return vowels.count\n  end\n\
    end", "  num = 0\n  s.downcase.each_char do |char|\n    if char == 'a' || char\
    \ == 'e' || char == 'i' || char == 'o' || char == 'u'\n      num += 1\n    end\n\
    \  end\n  return num\nend", "  # define vowels\n  vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n  # init counter\n  counter = 0\n  # init empty string\n  new_string\
    \ = \"\"\n  # iterate through string\n  s.each_char do |char|\n    # if last char\
    \ is a vowel\n    if char == s[-1] && vowels.include?(char)\n      # add it to\
    \ string\n      new_string << char\n    # if char is a vowel\n    elsif vowels.include?(char)\n\
    \      # add it to string\n      new_string << char\n      # add 1 to counter\n\
    \      counter += 1\n    end\n  end\n  # if new string is empty\n  if new_string\
    \ == \"\"\n    # return nil\n    return nil\n  else\n    # else return counter\n\
    \    return counter\n  end\nend", "  count = 0\n  i = 0\n  while i < s.length\n\
    \    if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u'\n\
    \      count += 1\n    end\n    i += 1\n  end\n  count\nend", "  #your code here\n\
    end", "  # Write your code here\nend", "  a=0\n  s.downcase.each_char do |x|\n\
    \    if x == \"a\" || x == \"e\" || x == \"i\" || x == \"o\" || x == \"u\"\n \
    \     a=a+1\n    end\n  end\n  return a\nend", "\tcount = 0\n\ts.each_char do\
    \ |char|\n\t\tif char == 'a' || char == 'e' || char == 'i' || char == 'o' || char\
    \ == 'u'\n\t\t\tcount += 1\n\t\tend\n\tend\n\tcount\nend", "  s.scan(/[aeiouy]/i).size\n\
    end", "  s.scan(/[aeiouy]/i).count\nend", "  vowels = \"aeiou\"\n  s.chars.select\
    \ { |char| vowels.include?(char.downcase) }.size\nend", "  count = 0\n  is_last_letter_y\
    \ = false\n  s.split(\"\").each do |c|\n    if c == \"y\"\n      is_last_letter_y\
    \ = true\n    elsif %w(a e i o u).include?(c)\n      count += 1\n    end\n  end\n\
    \  is_last_letter_y && s[-1] == \"y\" ? count + 1 : count\nend", "  vowels = ['a',\
    \ 'e', 'i', 'o', 'u']\n  count = 0\n  for i in 0..s.length-1\n    if s[i] == 'y'\
    \ && i == s.length-1\n      count = count + 1\n    elsif vowels.include?(s[i].downcase)\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "\t# vowels =\
    \ ['a', 'e', 'i', 'o', 'u']\n\t# count = 0\n\t# s.each_char do |char|\n\t# \t\
    if vowels.include?(char.downcase)\n\t# \t\tcount += 1\n\t# \tend\n\t# end\n\t\
    # count\n\t# return s.scan(/[aeiou]/i).count\n\tvowels = ['a', 'e', 'i', 'o',\
    \ 'u']\n\tlast_letter = s[-1]\n\tvowels.include?(last_letter) ? vowels.count(last_letter)\
    \ + s.count('aeiou') : s.count('aeiou')\nend", "    vowels = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"]\n    count = 0\n    s.downcase.split(\"\").each do |ch|\n \
    \       if vowels.include?(ch)\n            count += 1\n        end\n    end\n\
    \    count\nend", "  s.downcase.count('aeiouy')\nend", "    vowels = ['a', 'e',\
    \ 'i', 'o', 'u']\n    count = 0\n    s.downcase.each_char do |c|\n        if vowels.include?(c)\n\
    \            count += 1\n        end\n    end\n    return count\nend", "  count\
    \ = 0\n  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  for i in 0..s.length\n\
    \    if vowels.include?(s[i])\n      count += 1\n    end\n  end\n  return count\n\
    end", "  vowels = 0\n  for i in 0..s.length-1\n    if s[i] == 'a' || s[i] == 'e'\
    \ || s[i] == 'i' || s[i] == 'o' || s[i] == 'u'\n      vowels = vowels + 1\n  \
    \  end\n  end\n  return vowels\nend", "  count = 0\n  s.split(\"\").each do |char|\n\
    \    if ['a', 'e', 'i', 'o', 'u'].include?(char.downcase)\n      count += 1\n\
    \    end\n  end\n  count\nend", "  vowels = \"aeiouy\"\n  count = 0\n  s.each_char\
    \ do |char|\n    count += 1 if vowels.include?(char.downcase)\n  end\n  count\n\
    end", "  return s.scan(/[aeiouy]/i).count\nend", "  count = 0\n  s.downcase.each_char\
    \ { |char| count += 1 if \"aeiouy\".include?(char) }\n  count\nend", "\ts.downcase!\n\
    \tvowels = \"aeiou\"\n\tcount = 0\n\ts.each_char do |ch|\n\t\tif vowels.include?(ch)\n\
    \t\t\tcount += 1\n\t\tend\n\tend\n\tif (s[-1] == \"y\") && (!vowels.include?(s[-2]))\n\
    \t\tcount += 1\n\tend\n\treturn count\nend", "  # Approach 1: uses Regex\n  #\
    \ (?i) makes the regex case insensitive\n  s.scan(/(?i)[aeiouy]/).count", "  v=0\n\
    \  l=s.length\n  0.upto(l-1) do |i|\n    c=s[i]\n    c=c.downcase\n    v=v+1 if\
    \ c=='a' or c=='e' or c=='i' or c=='o' or c=='u'\n  end\n  v=v+1 if s[l-1]=='y'\n\
    \  v\nend", "  return s.downcase.count('aeiouy')\nend", "  vowels = ['a', 'e',\
    \ 'i', 'o', 'u']\n  vowels_count = 0\n  s.each_char do |c|\n    if vowels.include?(c)\n\
    \      vowels_count += 1\n    end\n  end\n  return vowels_count\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  if s.end_with?(\"y\")\n    return (s.downcase.count(\"aeiou\") + 1)\n\
    \  else\n    return s.downcase.count(\"aeiou\")\n  end\nend", "  # 1\n  s.downcase.scan(/[aeiou]/).count",
  "  a = s.scan(/[aeiou]/i)\n  a.length\nend", "  vowels = %w[a e i o u]\n  s.downcase.chars.count\
    \ { |x| vowels.include?(x) }\nend", "  counter = 0\n  vowels = %w[a e i o u]\n\
    \  s.downcase.chars.each do |x|\n    counter += 1 if vowels.include?(x)\n  end\n\
    \  counter\nend", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    count\
    \ = 0\n    s.downcase.each_char do |c|\n        if vowels.include?(c)\n      \
    \      count += 1\n        end\n    end\n    return count\nend", "  vowel = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n  s.split(\"\").count{|i| vowel.include?(i)}\n\
    end", "  vowels = 0\n  vowels += s.downcase.count \"aeiou\"\n  vowels += 1 if\
    \ (s.downcase.include? \"y\") and (s.downcase[-1] == \"y\")\n  vowels\nend", "\t\
    vowels = \"aeiouy\"\n\tcount = 0\n\ts.each_char do |char|\n\t\tcount += 1 if vowels.include?(char.downcase)\n\
    \tend\n\tcount\nend", "  vowels = \"aeiou\"\n  return s.count(vowels)\nend", " \
    \ # convert string to lowercase\n  s.downcase!\n  # add y to the vowels array\
    \ if it's the last character\n  if s[-1] == \"y\"\n    s[-1] = \"y \"\n  end\n\
    \  # replace vowel with space\n  s.gsub!(/[aeiou]/, \" \")\n  # split the string\
    \ and count the spaces\n  s.split.count\nend", '', "  vowels = %w[a e i o u]\n\
    \  count = 0\n  s.each_char do |v|\n    count += 1 if vowels.include?(v)\n  end\n\
    \  count\nend", "  count = 0\n  s.each_char do |c|\n    case c\n    when 'a',\
    \ 'e', 'i', 'o', 'u'\n      count += 1\n    when 'y'\n      count += 1 if s.index(c)\
    \ == s.length - 1\n    end\n  end\n  count\nend", "  # YOUR CODE HERE\nend", " \
    \ s.count(\"aAeEiIoOuUyY\")\nend", "  s.scan(/[aeiouy]/i).size\nend", "  s.downcase.count\
    \ \"aeiouy\"\nend", "  s.downcase.count(\"aeiouy\")\nend", "  counter = 0\n  vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  s.downcase.split(\"\").each do |c|\n\
    \    counter += 1 if vowels.include?(c)\n  end\n  counter\nend", "  # TODO: complete\
    \ the function\n  # Raise an exception with an error message if the input is not\
    \ a string\n  # Hint: use the inbuilt Ruby methods s.downcase and s.end_with?\n\
    \  # Hint: use the operator || (logical OR) to check for multiple conditions\n\
    \  # Hint: use the * operator to check if a character is contained in a string\n\
    \  # Hint: Ruby has a method called count that computes the number of occurences\n\
    \  # of a character in a string\n  # Hint: use the ternary operator ?: to return\
    \ 1 if s is \"y\" or 0 otherwise\n  # Hint: Ruby has a method to convert a string\
    \ to an array of characters (s.chars)\n  raise \"#{s} is not a string\" unless\
    \ s.is_a? String\n  (s.downcase.end_with?(\"y\") && s.size != 1) ? s.chars.count\
    \ { |c| c =~ /[aeiou]/ || c == \"y\" } : s.chars.count { |c| c =~ /[aeiou]/ }\n\
    end", "  alphabets = (\"a\"..\"z\").to_a\n  vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]\n  vowel_count = 0\n  s = s.downcase\n  s.split(\"\").each do |letter|\n\
    \    if vowels.include?(letter)\n      vowel_count += 1\n    end\n  end\n  if\
    \ s[-1] == \"y\"\n    vowel_count += 1\n  end\n  vowel_count\nend", "  s.count(\"\
    aeiouy\")\nend", "  s.downcase.scan(/[aeiouy]/).count\nend", "  count = 0\n  last_letter\
    \ = s[-1]\n  vowels = %w(a e i o u)\n  last_letter_vowel = last_letter == 'y'\n\
    \  s.each_char do |c|\n    if vowels.include?(c.downcase)\n      count += 1\n\
    \    end\n  end\n  last_letter_vowel ? count + 1 : count\nend", "  counter = 0\n\
    \  s.downcase.each_char do |i|\n    if i == \"a\" || i == \"e\" || i == \"i\"\
    \ || i == \"o\" || i == \"u\"\n      counter += 1\n    end\n  end\n  counter\n\
    end", "\t# get all vowels\n\tvowels = %w(a e i o u)\n\t# iterate through string\n\
    \t# if vowel, increment count\n\tcount = 0\n\ts.each_char do |char|\n\t\tif vowels.include?(char.downcase)\n\
    \t\t\tcount += 1\n\t\tend\n\tend\n\tcount\nend", "\tl=0\n\ts.downcase!\n\tfor\
    \ i in 0..s.length-1\n\t\tcase s[i]\n\t\twhen 'a'\n\t\t\tl+=1\n\t\twhen 'e'\n\t\
    \t\tl+=1\n\t\twhen 'i'\n\t\t\tl+=1\n\t\twhen 'o'\n\t\t\tl+=1\n\t\twhen 'u'\n\t\
    \t\tl+=1\n\t\twhen 'y'\n\t\t\tif i==s.length-1\n\t\t\t\tl+=1\n\t\t\tend\n\t\t\
    end\n\tend\n\treturn l\nend", "  vowel_count = 0\n  vowels = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"]\n  s.downcase.each_char do |letter|\n    if vowels.include?(letter)\n\
    \      vowel_count += 1\n    end\n  end\n  vowel_count\nend", "  vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n  count = 0\n  s.split(\"\").each do |letter|\n\
    \    if vowels.include?(letter)\n      count += 1\n    end\n  end\n  count\nend",
  "  # Let's use a regular expression to match vowels.\n  # So, we want to match any\
    \ of the vowels (a, e, i, o, u) anywhere in the\n  # string. We can either match\
    \ one of the vowels (a) or match two of the\n  # vowels (a|e|i|o|u) or match three\
    \ of the vowels (a|e|i|o|u) or match all\n  # of the vowels (a|e|i|o|u), and we\
    \ want to match these vowels anywhere\n  # in the string, so we use the metacharacter\
    \ '.' to match anything, and\n  # we put an asterisk after that to match 0 or\
    \ more of the last expression\n  # (the expression is '.', so 0 or more anything).\n\
    \  # So, we end up with the regular expression /(a|e|i|o|u).*/ which matches\n\
    \  # the empty string (0 or more of anything) through to the end of the string.\n\
    \  # Then, we need to use the regular expression match operator, which returns\n\
    \  # a \"MatchData\" object if there was a match, and nil if there was no match.\n\
    \  # Finally, if there was a match, we can use the length method on the MatchData\n\
    \  # object to get the length of the match.\n  # We can also use the nil? method\
    \ to check for the nil object, which is\n  # returned when there is no match.\n\
    \  match_data = s.match(/(a|e|i|o|u).*/)\n  if match_data.nil?\n    return 0\n\
    \  else\n    return match_data.length\n  end\nend", "  counter = 0\n  s.downcase.each_char\
    \ do |c|\n    if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n  \
    \    counter += 1\n    end\n  end\n  return counter\nend", "  # TODO: Implement.\n\
    end", "  s.scan(/[aeiouy]/i).count\nend", "  vowels = 'aeiou'\n  count = 0\n \
    \ i = 0\n  for i in 0..s.length\n    if (s[i] == 'y' && i == s.length-1) || vowels.include?(s[i])\n\
    \      count += 1\n    end\n  end\n  count\nend\nputs vowels_count(\"ABCDE\")\n\
    puts vowels_count(\"ACEDY\")\nputs vowels_count(\"y\")\nputs vowels_count(\"aeiou\"\
    )\nputs vowels_count(\"\")", "    count = 0\n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    s.each_char do |letter|\n        if letter.downcase == \"\
    y\" && s.index(letter) == s.length - 1\n            count += 1\n        elsif\
    \ vowels.include?(letter.downcase)\n            count += 1\n        end\n    end\n\
    \    return count\nend", "  return 0 if s.nil?\n  return 0 if s.length == 0\n\
    \  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  count = 0\n  s.chars.each do\
    \ |letter|\n    if vowels.include?(letter.downcase)\n      count += 1\n    end\n\
    \  end\n  count\nend", "  if s[-1] == \"y\" || s[-1] == \"Y\"\n    return (s.downcase.count('aeiou')\
    \ + 1)\n  else\n    return s.downcase.count('aeiou')\n  end\nend", "  vowels =\
    \ ['a', 'e', 'i', 'o', 'u']\n  count = 0\n  s.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      count += 1\n    end\n  end\n  count\nend", "\tvowels = ['a', 'e', 'i',\
    \ 'o', 'u']\n\tresult = 0\n\tlength = s.length\n\t# get rid of 'y' at the end\n\
    \tif (s[length-1] == 'y') \n\t\ts = s[0..length-2]\n\tend\n\t# count the vowels\n\
    \tfor i in 0..length-1\n\t\tif vowels.include?(s[i])\n\t\t\tresult += 1\n\t\t\
    end\n\tend\n\treturn result\nend", "  # Your code goes here\nend", "    vowels\
    \ = {'a' => 0, 'e' => 0, 'i' => 0, 'o' => 0, 'u' => 0, 'y' => 0}\n    str = s.downcase\n\
    \    i = 0\n    while i < str.length do\n        if vowels.include?(str[i])\n\
    \            vowels[str[i]] += 1\n        end\n        i += 1\n    end\n    if\
    \ str[str.length - 1] == 'y'\n        return vowels['y']\n    else\n        return\
    \ vowels.values.inject(:+)\n    end\nend", "  s.downcase.count \"aeiouy\"\nend",
  "  s.count(\"aeiou\")\nend", "\nend", "  sum = 0\n  vowels = ['a', 'e', 'i', 'o',\
    \ 'u']\n  s.each_char do |c|\n    sum += 1 if vowels.include?(c)\n  end\n  sum\n\
    end", "  vowels = ['a', 'e', 'i', 'o', 'u']\n  result = 0\n  count = 0\n  s.chars.each\
    \ do |ch|\n    count += 1\n    if vowels.include?(ch)\n      result += 1\n   \
    \ end\n  end\n  if s[count - 1] == 'y'\n    result += 1\n  end\n  result\nend",
  "  vowels = ['a', 'e', 'i', 'o', 'u']\n  count = 0\n  s.split('').each do |v|\n\
    \    if vowels.include?(v)\n      count += 1\n    end\n  end\n  count\nend", "\t\
    vowels = \"aeiou\"\n\tcount = 0\n\t\n\ts.downcase.each_char do |char|\n\t\tif\
    \ vowels.include?(char)\n\t\t\tcount += 1\n\t\tend\n\tend\n\t\n\tif (s[-1] ==\
    \ \"y\") && vowels.include?(s[-2])\n\t\tcount -= 1\n\tend\n\t\n\treturn count\n\
    end", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    count = 0\n    s.each_char\
    \ do |c|\n        if vowels.include?(c.downcase)\n            count += 1\n   \
    \     end\n    end\n    return count\nend", "  # your code here\nend", "  count\
    \ = 0\n  for i in 0..s.length - 1\n    if s[i] == 'a' || s[i] == 'e' || s[i] ==\
    \ 'i' || s[i] == 'o' || s[i] == 'u'\n      count += 1\n    end\n  end\n  return\
    \ count\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
