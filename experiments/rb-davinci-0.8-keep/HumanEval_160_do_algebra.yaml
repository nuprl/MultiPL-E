name: HumanEval_160_do_algebra
language: rb
prompt: "# Given two lists operator, and operand. The first list has basic algebra\
  \ operations, and \n# the second list is a list of integers. Use the two given lists\
  \ to build the algebric \n# expression and return the evaluation of this expression.\n\
  # The basic algebra operations:\n# Addition ( + ) \n# Subtraction ( - ) \n# Multiplication\
  \ ( * ) \n# Floor division ( // ) \n# Exponentiation ( ** ) \n# Example:\n# operator['+',\
  \ '*', '-']\n# array = [2, 3, 4, 5]\n# result = 2 + 3 * 4 - 5\n# => result = 9\n\
  # Note:\n# The length of operator list is equal to the length of operand list minus\
  \ one.\n# Operand is a list of of non-negative integers.\n# Operator list has at\
  \ least one operator, and operand list has at least two operands.\ndef do_algebra(operator,\
  \ operand)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
  \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"**\"\
  , \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\", \"*\"\
  , \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
  \ 3, 4]))\n  end\nend\n"
completions: ["  new_operand = []\n  operator.each_with_index do |op, i|\n    case\
    \ op\n    when '+'\n      new_operand.push(operand[i] + operand[i+1])\n    when\
    \ '-'\n      new_operand.push(operand[i] - operand[i+1])\n    when '*'\n     \
    \ new_operand.push(operand[i] * operand[i+1])\n    when '//'\n      new_operand.push(operand[i]\
    \ / operand[i+1])\n    when '**'\n      new_operand.push(operand[i] ** operand[i+1])\n\
    \    end\n  end\n  if new_operand.length == 1\n    return new_operand[0]\n  else\n\
    \    return do_algebra(operator, new_operand)\n  end\nend", "  #your code here\n\
    end", "    op = ''\n    operand.each.with_index do |x, i|\n        if i == 0\n\
    \            op += \"#{x}\"\n        else\n            op += \"#{operator[i-1]}#{x}\"\
    \n        end\n    end\n    eval(op)\nend", "  operand.each_with_index.reduce(0)\
    \ do |acc, (op, index)|\n    acc = operand[index] if index == 0\n    acc.send(operator[index\
    \ - 1], op)\n  end\nend", "  operand.each_cons(2).reduce(operand.first) do |acc,\
    \ (operator, operand)|\n    acc.send(operator, operand)\n  end\nend", "    operator.each_with_index\
    \ do |operation, index|\n        return operand[0] if index == operator.length\n\
    \        operand[index] = operand[index].send(operation, operand[index + 1])\n\
    \    end\nend", "    i = 1\n    while i < operand.length\n        if operator[i-1]\
    \ == '+'\n            operand[i] = operand[i-1] + operand[i]\n        elsif operator[i-1]\
    \ == '-'\n            operand[i] = operand[i-1] - operand[i]\n        elsif operator[i-1]\
    \ == '*'\n            operand[i] = operand[i-1] * operand[i]\n        elsif operator[i-1]\
    \ == '//'\n            operand[i] = operand[i-1] / operand[i]\n        elsif operator[i-1]\
    \ == '**'\n            operand[i] = operand[i-1] ** operand[i]\n        end\n\
    \        i += 1\n    end\n    return operand[-1]\nend\nputs do_algebra(['+', '*',\
    \ '-'], [2, 3, 4, 5]) #== 9\nputs do_algebra(['+', '*', '-'], [1, 2, 3, 4, 5])\
    \ #== 12\nputs do_algebra(['+', '*', '-', '//'], [4, 6, 3, 2, 1]) #== 17\nputs\
    \ do_algebra(['+', '*', '-', '//', '**'], [3, 6, 2, 4, 2, 1]) #== 53\nputs do_algebra(['+',\
    \ '*', '-', '//', '**'], [1, 2, 3, 4, 5, 6]) #== 7", "  answer = operand[0]\n\
    \  operator.each_with_index do |function, index|\n    if function == '+'\n   \
    \   answer += operand[index + 1]\n    elsif function == '-'\n      answer -= operand[index\
    \ + 1]\n    elsif function == '*'\n      answer *= operand[index + 1]\n    elsif\
    \ function == '//'\n      answer /= operand[index + 1]\n    elsif function ==\
    \ '**'\n      answer **= operand[index + 1]\n    end\n  end\n  answer\nend", " \
    \ operand.inject(0) do |memo, elem|\n    memo.public_send(operator.shift, elem)\n\
    \  end\nend", "  #your code here\n  sum = operand[0]\n  i = 0\n  while i < operator.length\n\
    \    sum = sum.send(operator[i], operand[i+1])\n    i += 1\n  end\n  sum\nend",
  "    i = 0\n    while i < operator.length do\n        case operator[i]\n       \
    \ when '+'\n            operand[i] = operand[i] + operand[i+1]\n        when '-'\n\
    \            operand[i] = operand[i] - operand[i+1]\n        when '*'\n      \
    \      operand[i] = operand[i] * operand[i+1]\n        when '//'\n           \
    \ operand[i] = operand[i] / operand[i+1]\n        when '**'\n            operand[i]\
    \ = operand[i] ** operand[i+1]\n        end\n        operand.delete_at(i+1)\n\
    \        operator.delete_at(i)\n    end\n    operand[0]\nend", "  i, result =\
    \ 0, operand[0]\n  operator.each do |o|\n    result = result.send(o, operand[i\
    \ + 1])\n    i += 1\n  end\n  result\nend", "  total = operand[0]\n  operand.shift\n\
    \  operand.each_with_index do |num, idx|\n    case operator[idx]\n    when '+'\n\
    \      total += num\n    when '-'\n      total -= num\n    when '*'\n      total\
    \ *= num\n    when '/'\n      total /= num\n    when '^'\n      total **= num\n\
    \    end\n  end\n  total\nend", "    (1...operand.length).each do |i|\n      \
    \  operand[i-1] = operand[i-1].send(operator[i-1], operand[i])\n    end\n    operand[0]\n\
    end", "    result = operand[0]\n    index = 0\n    while index < operator.length\
    \ do\n        if operator[index] == '+'\n            result += operand[index +\
    \ 1]\n        elsif operator[index] == '-'\n            result -= operand[index\
    \ + 1]\n        elsif operator[index] == '*'\n            result *= operand[index\
    \ + 1]\n        elsif operator[index] == '//'\n            result /= operand[index\
    \ + 1]\n        elsif operator[index] == '**'\n            result **= operand[index\
    \ + 1]\n        end\n        index += 1\n    end\n    return result\nend", "\t\
    result = operand[0]\n\ti = 0\n\twhile i < operator.length do\n\t\tif operator[i]\
    \ == \"+\"\n\t\t\tresult += operand[i+1]\n\t\telsif operator[i] == \"-\"\n\t\t\
    \tresult -= operand[i+1]\n\t\telsif operator[i] == \"*\"\n\t\t\tresult *= operand[i+1]\n\
    \t\telsif operator[i] == \"//\"\n\t\t\tresult /= operand[i+1]\n\t\telsif operator[i]\
    \ == \"**\"\n\t\t\tresult **= operand[i+1]\n\t\tend\n\t\ti += 1\n\tend\n\tresult\n\
    end", "    num = operand.shift\n    operand.each_with_index { |n, i| num = eval(\"\
    #{num} #{operator[i]} #{n}\") }\n    num\nend", "  result = operand[0]\n  operator.each_with_index\
    \ do |o,i|\n    next if i == 0\n    result = result.send(o, operand[i])\n  end\n\
    \  result\nend", "  #My Solution\n  # counter = 0\n  # operator.each do |x|\n\
    \  #   if x == '+'\n  #     operand[counter + 1] = operand[counter] + operand[counter\
    \ + 1]\n  #   elsif x == '-'\n  #     operand[counter + 1] = operand[counter]\
    \ - operand[counter + 1]\n  #   elsif x == '*'\n  #     operand[counter + 1] =\
    \ operand[counter] * operand[counter + 1]\n  #   elsif x == '//'\n  #     operand[counter\
    \ + 1] = operand[counter] / operand[counter + 1]\n  #   elsif x == '**'\n  # \
    \    operand[counter + 1] = operand[counter] ** operand[counter + 1]\n  #   end\n\
    \  #   counter += 1\n  # end\n  # operand[-1]\n  #Solution\n  result = operand[0]\n\
    \  operand[1..-1].each_with_index do |num, idx|\n    result = result.send(operator[idx],\
    \ num)\n  end\n  result\nend", "  #your code here\nend", "    exp = []\n    operand.each_with_index\
    \ { |x,i| \n        if i < operand.length - 1 \n            exp << x << operator[i]\n\
    \        else\n            exp << x\n        end \n    }\n    return eval(exp.join(''))\n\
    end", "  operand.each_with_index.inject { |sum, (operand, index)| sum.send(operator[index],\
    \ operand) }\nend", "  # your code here\nend", "    op_index = 0\n    result =\
    \ operand[0]\n    operand.shift\n    while op_index < operator.length\n      \
    \  case operator[op_index]\n        when '+'\n            result += operand[op_index]\n\
    \        when '-'\n            result -= operand[op_index]\n        when '*'\n\
    \            result *= operand[op_index]\n        when '//'\n            result\
    \ /= operand[op_index]\n        when '**'\n            result **= operand[op_index]\n\
    \        end\n        op_index += 1\n    end\n    return result\nend", "  result\
    \ = operand[0]\n  for i in 0..(operator.length - 1)\n    result = eval(\"#{result}\
    \ #{operator[i]} #{operand[i + 1]}\")\n  end\n  result\nend", "  #your code here\n\
    end", "  output = operand[0]\n  operator.each_with_index do |op, i|\n    output\
    \ = output.send(op, operand[i+1])\n  end\n  output\nend", "\tresult = operand[0]\n\
    \tindex = 0\n\twhile index < operator.length\n\t\tresult = result.send(operator[index],\
    \ operand[index + 1])\n\t\tindex += 1\n\tend\n\tresult\nend", "    operand.reduce{|a,b|\
    \ a.send(operator.shift, b)}\nend", "\tres = operand[0]\n\toperator.each_with_index\
    \ do |op, index|\n\t\tres = res.send(op, operand[index+1])\n\tend\n\tres\nend\n\
    p do_algebra(['+', '*', '-'], [2, 3, 4, 5]) # => 9\np do_algebra(['+', '-', '*'],\
    \ [5, 6, 7, 8]) # => -15\np do_algebra(['/', '+', '*'], [2, 3, 4, 5]) # => 1\n\
    p do_algebra(['+', '*', '*'], [2, 3, 4, 5]) # => 54", "  result = operand[0]\n\
    \  operator.each_with_index do |o, i|\n    case o\n    when '+'\n      result\
    \ += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when '*'\n\
    \      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n \
    \   when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend\n\
    operator = ['+', '*', '-']\noperand = [2, 3, 4, 5]\np do_algebra(operator, operand)",
  "  result = operand[0]\n  i = 0\n  while i < operator.length do\n    result = operator[i]\
    \ == \"+\" ? result + operand[i+1] : operator[i] == \"-\" ? result - operand[i+1]\
    \ : operator[i] == \"*\" ? result * operand[i+1] : operator[i] == \"//\" ? result\
    \ / operand[i+1] : result ** operand[i+1]\n    i += 1\n  end\n  result\nend",
  "  result = operand[0]\n  operator.each_with_index do |op, i|\n    result = result.send(op,\
    \ operand[i+1])\n  end\n  result\nend", "  i = 1\n  while i < operand.length\n\
    \    operand[i-1] = operand[i-1].send(operator[i-1], operand[i])\n    i += 1\n\
    \  end\n  operand[0]\nend", "    result = operand[0]\n    (1...operand.length).each\
    \ do |i|\n        result = result.method(operator[i-1]).call(operand[i])\n   \
    \ end\n    result\nend\nputs do_algebra(['+', '*', '-'], [2, 3, 4, 5])", "  nums\
    \ = operand.dup\n  ops = operator.dup\n  nums.reduce{|a,b| a.send(ops.shift, b)}\n\
    end", "  if operator.length != operand.length - 1\n    raise \"Wrong number of\
    \ operands\"\n  end\n  result = operand[0]\n  idx = 0\n  while idx < operator.length\n\
    \    operator_idx = OPERATORS.index(operator[idx])\n    result = OPERATORS_FUNC[operator_idx].call(result,\
    \ operand[idx + 1])\n    idx += 1\n  end\n  result\nend", "  (1...operand.length).each\
    \ { |i| operand[i] = operand[i - 1].send(operator[i - 1], operand[i]) }\n  operand.last\n\
    end", "  # code\nend", "  (1...operand.length).each do |i|\n    operand[i] = eval\
    \ \"#{operand[i-1]} #{operator[i-1]} #{operand[i]}\"\n  end\n  operand[-1]\nend",
  "  operand = operand.map(&:to_s)\n  operator.each_with_index do |val, index|\n \
    \   operand.insert(index*2+1, val)\n  end\n  eval(operand.join)\nend", "  operand.each_cons(2).reduce(0)\
    \ do |result, (x, y)|\n    result += operator.shift.to_sym.call(x, y)\n  end\n\
    end", "    operand.inject(operand.shift){|r, o| r.send(operator.shift, o)}\nend",
  "  (1...operator.length).each { |i| operand[i] = eval(\"#{operand[i-1]} #{operator[i-1]}\
    \ #{operand[i]}\") }\n  operand[-1]\nend", "  # your code here\n  result = operand[0]\n\
    \  operand.shift\n  operator.each do |i|\n    if i == '+'\n      result += operand[0]\n\
    \    elsif i == '-'\n      result -= operand[0]\n    elsif i == '*'\n      result\
    \ *= operand[0]\n    elsif i == '//'\n      result /= operand[0]\n    elsif i\
    \ == '**'\n      result **= operand[0]\n    end\n    operand.shift\n  end\n  result\n\
    end", "  operand.each_with_index do |el, index|\n    operator[index] == '//' ?\
    \ operand[index + 1] = operand[index + 1].to_f.fdiv(el) : operand[index + 1] =\
    \ operand[index + 1].send(operator[index], el)\n  end\n  operand.last\nend", " \
    \   # your code here\n    if operator.empty?\n      return operand.sum\n    end\n\
    \    operand.each_with_index do |val, ind|\n      if ind != operand.length - 1\n\
    \        case operator[ind]\n        when \"+\"\n          operand[ind + 1] =\
    \ operand[ind] + operand[ind + 1]\n        when \"-\"\n          operand[ind +\
    \ 1] = operand[ind] - operand[ind + 1]\n        when \"*\"\n          operand[ind\
    \ + 1] = operand[ind] * operand[ind + 1]\n        when \"//\"\n          operand[ind\
    \ + 1] = operand[ind] / operand[ind + 1]\n        when \"**\"\n          operand[ind\
    \ + 1] = operand[ind] ** operand[ind + 1]\n        end\n      end\n    end\n \
    \   operand[-1]\nend", "  i = 0\n  res = operand[0]\n  while i < operator.length\n\
    \    res = res.send(operator[i], operand[i+1])\n    i += 1\n  end\n  res\nend",
  "  operand.reduce{|total, number| total.send(operator.shift, number)}\nend", " \
    \ #code\nend", "    length = operator.length\n    for i in 0..length-1\n     \
    \   operand[i+1] = operand[i].send(operator[i], operand[i+1])\n    end\n    return\
    \ operand[length]\nend", "  result = operand[0]\n  operand.zip(operator).each\
    \ do |o|\n    case o[1]\n    when '+'\n      result += o[0]\n    when '-'\n  \
    \    result -= o[0]\n    when '*'\n      result *= o[0]\n    when '//'\n     \
    \ result /= o[0]\n    when '**'\n      result **= o[0]\n    end\n  end\n  result\n\
    end", "    final = operand[0]\n    i = 0\n    while i < operator.length do\n \
    \       if operator[i] == '+'\n            final += operand[i+1]\n        elsif\
    \ operator[i] == '-'\n            final -= operand[i+1]\n        elsif operator[i]\
    \ == '*'\n            final *= operand[i+1]\n        elsif operator[i] == '//'\n\
    \            final = final.to_f / operand[i+1]\n        elsif operator[i] == '**'\n\
    \            final **= operand[i+1]\n        end\n        i += 1\n    end\n  \
    \  final\nend", "  # Good Luck!\n  # Your code here:\n  num = operand[0]\n  operand.each_with_index\
    \ do |num2, i|\n    if i == 0\n      next\n    end\n    case operator[i-1]\n \
    \   when \"+\"\n      num += num2\n    when \"-\"\n      num -= num2\n    when\
    \ \"*\"\n      num *= num2\n    when \"//\"\n      num = num / num2\n    when\
    \ \"**\"\n      num = num ** num2\n    end\n  end\n  return num\nend", "    #\
    \ evaluate the expression, return the integer value of it\n    operators = {\n\
    \        '*' => '*',\n        '+' => '+',\n        '-' => '-',\n        '/' =>\
    \ '/',\n        '**' => '**'\n    }\n    exp = \"(\" + operand[0].to_s + operators[operator[0]].to_s\
    \ + operand[1].to_s + \")\"\n    (1..operator.length-1).each do |idx|\n      \
    \  exp += operators[operator[idx]].to_s + \"(\" + operand[idx+1].to_s + \")\"\n\
    \    end\n    eval(exp)\nend\nputs do_algebra(['+', '*', '-'], [2, 3, 4, 5])\n\
    puts do_algebra(['+', '*', '-'], [2, 3, 4, 5]) == 9\nputs do_algebra(['+', '*',\
    \ '-'], [2, 3, 4, 5]) == 9\nputs do_algebra(['+', '*', '-'], [2, 3, 4, 5]) ==\
    \ 9\nputs do_algebra(['+', '*', '-'], [2, 3, 4, 5]) == 9\nputs do_algebra(['*',\
    \ '//', '+', '*', '-'], [4, 12, 6, 20, 2, 1]) == 24\nputs do_algebra(['*', '//',\
    \ '+', '*', '-'], [4, 12, 6, 20, 2, 1]) == 24\nputs do_algebra(['*', '//', '+',\
    \ '*', '-'], [4, 12, 6, 20, 2, 1]) == 24\nputs do_algebra(['*', '//', '+', '*',\
    \ '-'], [4, 12, 6, 20, 2, 1]) == 24\nputs do_algebra(['*', '//', '+', '*', '-'],\
    \ [4, 12, 6, 20, 2, 1]) == 24\nputs do_algebra(['+', '*', '//', '+', '*", "\t\
    str = \"\"\n\toperator.each_with_index {|op, i| str += \"#{operand[i]} #{op} \"\
    }\n\tstr += \"#{operand[-1]}\"\n\teval(str)\nend\noperator=['*', '+', '-', '//']\n\
    array = [2, 3, 4, 5]\np do_algebra(operator, array) # => 2 * 3 + 4 - 5 // 2 =\
    \ 9", "   result = operand[0]\n   index = 0\n   while index < operator.length\n\
    \       result = result.send(operator[index], operand[index + 1])\n       index\
    \ += 1\n   end\n   result\nend", "  # code here\nend", "  output = operand[0]\n\
    \  operator.each_with_index do |op, idx|\n    output = output.send(op, operand[idx\
    \ + 1])\n  end\n  output\nend", "  operator.zip(operand.each_cons(2).to_a).map\
    \ do |a, b|\n    if a == '//'\n      a = '/'\n      b[0].to_f.send(a, b[1])\n\
    \    else\n      b[0].send(a, b[1])\n    end\n  end.reduce(:+)\nend", "    result\
    \ = operand[0]\n    (1...operand.length).each do |i|\n        case operator[i-1]\n\
    \        when '+'\n            result += operand[i]\n        when '-'\n      \
    \      result -= operand[i]\n        when '*'\n            result *= operand[i]\n\
    \        when '//'\n            result /= operand[i]\n        when '**'\n    \
    \        result **= operand[i]\n        end\n    end\n    result\nend", "\ti =\
    \ 0\n\twhile i < operator.length\n\t\tif operator[i] == '+'\n\t\t\toperand[i]\
    \ = operand[i] + operand[i+1]\n\t\t\toperand.delete_at(i+1)\n\t\t\toperator.delete_at(i)\n\
    \t\telsif operator[i] == '-'\n\t\t\toperand[i] = operand[i] - operand[i+1]\n\t\
    \t\toperand.delete_at(i+1)\n\t\t\toperator.delete_at(i)\n\t\telsif operator[i]\
    \ == '*'\n\t\t\toperand[i] = operand[i] * operand[i+1]\n\t\t\toperand.delete_at(i+1)\n\
    \t\t\toperator.delete_at(i)\n\t\telsif operator[i] == '//'\n\t\t\toperand[i] =\
    \ operand[i] / operand[i+1]\n\t\t\toperand.delete_at(i+1)\n\t\t\toperator.delete_at(i)\n\
    \t\telsif operator[i] == '**'\n\t\t\toperand[i] = operand[i] ** operand[i+1]\n\
    \t\t\toperand.delete_at(i+1)\n\t\t\toperator.delete_at(i)\n\t\tend\n\tend\n\t\
    operand[0]\nend", "    # res=operand[0]\n    # i=1\n    # j=0\n    # while i<operand.length\
    \ && j<operator.length\n    #     if operator[j]=='+'\n    #         res=res+operand[i]\n\
    \    #     elsif operator[j]=='-'\n    #         res=res-operand[i]\n    #   \
    \  elsif operator[j]=='*'\n    #         res=res*operand[i]\n    #     elsif operator[j]=='//'\n\
    \    #         res=res/operand[i]\n    #     elsif operator[j]=='**'\n    #  \
    \       res=res**operand[i]\n    #     end\n    #     i+=1\n    #     j+=1\n \
    \   # end\n    # return res\n    operand.zip(operator).map { |a, b| [a, b] }.flatten.compact.join(\"\
    \ \")\nend\n  ", "  result = operand[0]\n  operator.each_with_index do |operation,\
    \ i|\n    case operation\n    when '+'\n      result += operand[i + 1]\n    when\
    \ '-'\n      result -= operand[i + 1]\n    when '*'\n      result *= operand[i\
    \ + 1]\n    when '//'\n      result = result.to_f / operand[i + 1]\n    when '**'\n\
    \      result **= operand[i + 1]\n    end\n  end\n  result\nend", "  \nend", " \
    \   operand.insert(0, 0)\n    result = operand[0]\n    operator.each_with_index\
    \ do |x, i|\n        if x == \"+\"\n            result += operand[i+1]\n     \
    \   elsif x == \"-\"\n            result -= operand[i+1]\n        elsif x == \"\
    *\"\n            result *= operand[i+1]\n        elsif x == \"//\"\n         \
    \   result /= operand[i+1]\n        elsif x == \"**\"\n            result **=\
    \ operand[i+1]\n        end\n    end\n    result\nend\nputs do_algebra(['+', '*',\
    \ '-'], [2, 3, 4, 5]) == 9\nputs do_algebra(['+', '*', '**', '//'], [2, 3, 4,\
    \ 5]) == 3\nputs do_algebra(['+', '*', '**', '//'], [1, 2, 3, 4, 5]) == 1\nputs\
    \ do_algebra(['*', '**', '+', '//'], [1, 2, 3, 4, 5]) == 0\nputs do_algebra(['+',\
    \ '*', '-'], [5, 8, 2, 9, 1]) == 36\nputs do_algebra(['+', '*', '**', '//'], [2,\
    \ 3, 4, 5, 1]) == 8\nputs do_algebra(['+', '*', '-'], [2, 3, 4, 5, 1]) == 14\n\
    puts do_algebra(['+', '*', '**', '//'], [2, 3, 4, 5, 1]) == 8\nputs do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5, 1]) == 14\nputs do_algebra(['*', '**', '+', '//'], [2,\
    \ 3, 4, 5, 1]) == -2\nputs do_algebra(['+', '*', '-'], [1, 2, 3, 4, 5]) == -4\n\
    puts do_algebra(['*", "  operators = {\n    \"+\" => ->(x, y) { x + y },\n   \
    \ \"-\" => ->(x, y) { x - y },\n    \"*\" => ->(x, y) { x * y },\n    \"//\" =>\
    \ ->(x, y) { x / y },\n    \"**\" => ->(x, y) { x ** y }\n  }\n  operand.each_with_index.reduce(0)\
    \ do |acc, (n, i)|\n    acc.send(operators[operator[i]], n)\n  end\nend", "\t\
    operand.each_with_index.map do |v, i|\n\t\tif i.zero?\n\t\t\tv\n\t\telse\n\t\t\
    \toperator[i-1] == '+' ? v + operand[i-1] :\n\t\t\toperator[i-1] == '-' ? v -\
    \ operand[i-1] :\n\t\t\toperator[i-1] == '*' ? v * operand[i-1] :\n\t\t\toperator[i-1]\
    \ == '/' ? v / operand[i-1] :\n\t\t\toperator[i-1] == '^' ? v ** operand[i-1]\
    \ : 0\n\t\tend\n\tend.last\nend", "    result = operand[0]\n    for i in 1..operand.length-1\n\
    \        result = result.send(operator[i-1], operand[i])\n    end\n    return\
    \ result\nend", "   res = operand[0]\n   i = 0\n   while i < operator.length\n\
    \      case operator[i]\n      when '+'\n         res += operand[i+1]\n      when\
    \ '-'\n         res -= operand[i+1]\n      when '*'\n         res *= operand[i+1]\n\
    \      when '//'\n         res /= operand[i+1]\n      when '**'\n         res\
    \ **= operand[i+1]\n      end\n      i += 1\n   end\n   res\nend", "  # code here\n\
    end", "    result = operand[0]\n    i = 0\n    while i < operator.length do\n\
    \        result = result.send(operator[i], operand[i+1])\n        i += 1\n   \
    \ end\n    return result\nend", "    result = operand[0]\n    operand.shift\n\
    \    i = 0\n    while i < operator.length\n        if operator[i] == '+'\n   \
    \         result += operand[i]\n        elsif operator[i] == '-'\n           \
    \ result -= operand[i]\n        elsif operator[i] == '*'\n            result *=\
    \ operand[i]\n        elsif operator[i] == '//'\n            result /= operand[i]\n\
    \        elsif operator[i] == '**'\n            result **= operand[i]\n      \
    \  end\n        i += 1\n    end\n    return result\nend", "  eval operand.zip(operator).flatten.join\n\
    end", "\tarr = [operand.shift]\n\ti = 0\n\twhile i < operator.length\n\t\tcase\
    \ operator[i]\n\t\twhen '+'\n\t\t\tarr[i] += operand[i]\n\t\twhen '-'\n\t\t\t\
    arr[i] -= operand[i]\n\t\twhen '*'\n\t\t\tarr[i] *= operand[i]\n\t\twhen '//'\n\
    \t\t\tarr[i] /= operand[i]\n\t\twhen '**'\n\t\t\tarr[i] **= operand[i]\n\t\tend\n\
    \t\ti += 1\n\tend\n\tarr.inject(:+)\nend", "    # write your code here\n    res\
    \ = operand[0]\n    for i in 0..operator.length-1\n        if operator[i] == '+'\n\
    \            res += operand[i+1]\n        elsif operator[i] == '-'\n         \
    \   res -= operand[i+1]\n        elsif operator[i] == '*'\n            res *=\
    \ operand[i+1]\n        elsif operator[i] == '//'\n            res /= operand[i+1]\n\
    \        elsif operator[i] == '**'\n            res **= operand[i+1]\n       \
    \ end\n    end\n    return res\nend", "    value = operand[0]\n    for i in 0..operator.length-1\n\
    \        if operator[i] == '+'\n            value += operand[i+1]\n        elsif\
    \ operator[i] == '-'\n            value -= operand[i+1]\n        elsif operator[i]\
    \ == '*'\n            value *= operand[i+1]\n        elsif operator[i] == '//'\n\
    \            value /= operand[i+1]\n        elsif operator[i] == '**'\n      \
    \      value **= operand[i+1]\n        end\n    end\n    return value\nend", " \
    \ n = operator.size\n  result = operand[0]\n  (1..n).each do |i|\n    result =\
    \ result.send(operator[i-1], operand[i])\n  end\n  result\nend", "    o=operand.shift\n\
    \    operand.each_with_index{|e,i|o=o.send(operator[i],e)}\n    o\nend\np do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5])# ==> 9\np do_algebra(['+', '+', '+', '+'], [2, 3, 4,\
    \ 5])# ==> 14\np do_algebra(['+', '-', '*', '//'], [1, 2, 3, 4])# ==> -2\np do_algebra(['//',\
    \ '*', '+', '**'], [1, 2, 3, 4])# ==> 1\np do_algebra(['*', '*', '*', '*'], [1,\
    \ 2, 3, 4])# ==> 24\np do_algebra(['*', '*', '*', '*'], [1, 2, 3, 4, 5])# ==>\
    \ 120\np do_algebra(['+', '-', '*', '**'], [1, 2, 3, 4, 5])# ==> -44", "  result\
    \ = operand[0]\n  operator.each_with_index { |op, index| result = result.send(op,\
    \ operand[index + 1]) }\n  result\nend", "    result = operand[0]\n    operand[1..-1].each_with_index\
    \ do |x, i|\n        result = result.send(operator[i], x)\n    end\n    result\n\
    end", "    expression = operand.shift.to_s\n    operand.each_with_index do |n,\
    \ i|\n        expression += operator[i] + n.to_s\n    end\n    eval(expression)\n\
    end", "  equation = ''\n  operator.each_with_index do |op, i|\n    equation <<\
    \ \"#{operand[i]} #{op} \"\n  end\n  equation << operand.last.to_s\n  eval(equation)\n\
    end", "  result = operand[0]\n  operator.each_with_index { |op, i|\n    result\
    \ = result.send(op, operand[i+1])\n  }\n  result\nend", "    (1...operator.length).each\
    \ { |i|\n        operator[i-1] == '*' ? (operand[i] *= operand[i-1]) :\n     \
    \   operator[i-1] == '/' ? (operand[i] = operand[i-1] / operand[i]) :\n      \
    \  operator[i-1] == '+' ? (operand[i] += operand[i-1]) :\n        operator[i-1]\
    \ == '-' ? (operand[i] = operand[i-1] - operand[i]) :\n        (operator[i-1]\
    \ == '**' ? (operand[i] = operand[i-1] ** operand[i]) :\n        nil )\n     \
    \   operand[i-1] = nil\n    }\n    operand.compact!\n    operand[0]\nend", " \
    \ result = operand[0]\n  operand.each_with_index do |num, i|\n    operator.include?(\"\
    //\") ? result = result.fdiv(num) : result\n    operator.include?(\"**\") ? result\
    \ = result.pow(num) : result\n    operator.include?(\"*\") ? result = result *\
    \ num : result\n    operator.include?(\"-\") ? result = result - num : result\n\
    \    operator.include?(\"+\") ? result = result + num : result\n  end\n  result\n\
    end", "    arr = []\n    while !operand.empty?\n        operand1 = operand.shift\n\
    \        operand2 = operand.shift\n        arr << operand1\n        arr << operand2\n\
    \        operation = operator.shift\n        arr << operation\n    end\n    eval(arr.join)\n\
    end", "  result = operand[0]\n  operator.each_with_index { |op, i| result = result.send(op,\
    \ operand[i+1]) }\n  result\nend", "  operator.each_with_index.reduce(operand.shift)\
    \ do |result, (op, i)|\n    operand[i].send(op, result)\n  end\nend\nputs do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]) # 2 + 3 * 4 - 5 = 9\nputs do_algebra(['+', '**', '*',\
    \ '+'], [2, 3, 2, 1, 4]) # 2 + 3 ** 2 * 1 + 4 = 13\nputs do_algebra(['+', '-',\
    \ '//', '*', '**'], [3, 8, 2, 4, 2]) # 3 + 8 - 2 // 4 * 2 ** 2 = 23", "    result\
    \ = operand[0]\n    for i in 1..operand.length-1\n        result = result.send(operator[i-1],\
    \ operand[i])\n    end\n    return result\nend", "\toperator.each_with_index.map{|op,\
    \ i| operand[i].send(op, operand[i+1])}[-1]\nend", "    (1...operand.length).each\
    \ { |i| operand[i] = operand[i].send(operator[i-1], operand[i-1]) }\n    operand[-1]\n\
    end\nputs do_algebra(['+', '*', '-'], [2, 3, 4, 5]) == 9", "    # remove one operand\
    \ from the end of the list\n    operand.pop()\n    # puts operator.size\n    #\
    \ puts operand.size\n    # first operand to start the calculation\n    index =\
    \ operand[0]\n    # loop through the operator and operand list until all operators\
    \ are used\n    for i in 0..operator.size\n        # puts operator[i]\n      \
    \  # puts operand[i+1]\n        case operator[i]\n        when \"+\"\n       \
    \     index += operand[i+1]\n        when \"-\"\n            index -= operand[i+1]\n\
    \        when \"*\"\n            index *= operand[i+1]\n        when \"//\"\n\
    \            index = index / operand[i+1]\n        when \"**\"\n            index\
    \ = index ** operand[i+1]\n        end\n    end\n    index\nend", "  \n    operand.each_with_index.inject(operand[0])\
    \ do |result, (item, index)|\n      break result unless operator[index]\n    \
    \  result.send(operator[index], item)\n    end\n  end", "    result = operand[0]\n\
    \    operator.each_with_index { |op, idx| result = result.send(op, operand[idx+1])\
    \ }\n    result\nend", "  result = operand[0]\n  (1...operand.length).each do\
    \ |index|\n    operator[index - 1] == '+' ? result += operand[index] :\n    operator[index\
    \ - 1] == '-' ? result -= operand[index] :\n    operator[index - 1] == '*' ? result\
    \ *= operand[index] :\n    operator[index - 1] == '//' ? result = result.floor(operand[index])\
    \ :\n    operator[index - 1] == '**' ? result **= operand[index] : 'error'\n \
    \ end\n  result\nend", "  #your code here\nend", "  operand.each_with_index.inject\
    \ { |memo, (el, idx)| idx == 0 ? memo = el : memo.send(operator[idx - 1], el)\
    \ }\nend", "  operator.each_with_index do |operator, index|\n    case operator\n\
    \    when '+'\n      operand[index + 1] = operand[index] + operand[index + 1]\n\
    \    when '-'\n      operand[index + 1] = operand[index] - operand[index + 1]\n\
    \    when '*'\n      operand[index + 1] = operand[index] * operand[index + 1]\n\
    \    when '//'\n      operand[index + 1] = operand[index] / operand[index + 1]\n\
    \    when '**'\n      operand[index + 1] = operand[index] ** operand[index + 1]\n\
    \    end\n  end\n  operand[-1]\nend", "\tresult = operand[0]\n\toperator.each_with_index\
    \ do |op, index|\n\t\tresult = result.method(op).(operand[index + 1])\n\tend\n\
    \tresult\nend", "  #your code here\nend", "    result = operand[0]\n    operator.each_with_index\
    \ do |i, index|\n        op = eval(\"#{result} #{i} #{operand[index + 1]}\")\n\
    \        result = op\n    end\n    result\nend", "  # your code here\nend", " \
    \   result = operand[0]\n    i = 0\n    while i < operator.length do\n       \
    \ if operator[i] == '+'\n            result += operand[i+1]\n        elsif operator[i]\
    \ == '-'\n            result -= operand[i+1]\n        elsif operator[i] == '*'\n\
    \            result *= operand[i+1]\n        elsif operator[i] == '//'\n     \
    \       result /= operand[i+1]\n        elsif operator[i] == '**'\n          \
    \  result **= operand[i+1]\n        end\n        i += 1\n    end\n    return result\n\
    end", "    expression = \"\"\n    operand.each_with_index { |num, idx|\n     \
    \   expression += num.to_s\n        if (idx < operator.length)\n            expression\
    \ += operator[idx]\n        end\n    }\n    return eval(expression)\nend\nputs\
    \ do_algebra(['+', '*', '-'], [2, 3, 4, 5])\nputs do_algebra(['*', '-', '+'],\
    \ [4, 2, 3, 5])\nputs do_algebra(['//', '*', '**'], [10, 3, 3, 3])\nputs do_algebra(['//',\
    \ '*', '**'], [10, 3, 2, 3])", "  i = 0\n  result = operand[0]\n  operator.each\
    \ do |x|\n    if x == '+'\n      result += operand[i + 1]\n    elsif x == '-'\n\
    \      result -= operand[i + 1]\n    elsif x == '*'\n      result *= operand[i\
    \ + 1]\n    elsif x == '//'\n      result /= operand[i + 1]\n    elsif x == '**'\n\
    \      result **= operand[i + 1]\n    end\n    i += 1\n  end\n  result\nend",
  "  result = operand[0]\n  for i in 1..(operand.length - 1)\n    case operator[i\
    \ - 1]\n    when '+'\n      result += operand[i]\n    when '-'\n      result -=\
    \ operand[i]\n    when '*'\n      result *= operand[i]\n    when '//'\n      result\
    \ /= operand[i]\n    when '**'\n      result **= operand[i]\n    end\n  end\n\
    \  result\nend", "    result = operand[0]\n    for i in 0..operator.length-1\n\
    \        case operator[i]\n        when '+'\n            result += operand[i+1]\n\
    \        when '-'\n            result -= operand[i+1]\n        when '*'\n    \
    \        result *= operand[i+1]\n        when '//'\n            result /= operand[i+1]\n\
    \        when '**'\n            result **= operand[i+1]\n        end\n    end\n\
    \    return result\nend", "\tresult = operand[0]\n\tindex = 0\n\t\n\twhile index\
    \ < operator.length\n\t\toperator[index] == '+' ? result += operand[index + 1]\
    \ : nil\n\t\toperator[index] == '-' ? result -= operand[index + 1] : nil\n\t\t\
    operator[index] == '*' ? result *= operand[index + 1] : nil\n\t\toperator[index]\
    \ == '//' ? result /= operand[index + 1] : nil\n\t\toperator[index] == '**' ?\
    \ result **= operand[index + 1] : nil\n\t\tindex += 1\n\tend\n\t\n\tresult\nend",
  "  #your code here\nend", "  total = operand[0]\n  i = 0\n  while i < operator.length\n\
    \    if operator[i] == '+'\n      total += operand[i+1]\n    elsif operator[i]\
    \ == '-'\n      total -= operand[i+1]\n    elsif operator[i] == '*'\n      total\
    \ *= operand[i+1]\n    elsif operator[i] == '//'\n      total /= operand[i+1]\n\
    \    elsif operator[i] == '**'\n      total **= operand[i+1]\n    end\n    i +=\
    \ 1\n  end\n  total\nend", "    operand.each_with_index.inject(0) do |result,\
    \ (value, index)|\n        result = value if index == 0\n        result = result.send(operator[index\
    \ - 1], value)\n    end\nend", "  #\U0001F4AC Loop through the operator and operand\n\
    \  #\U0001F4AC The last operand is the result of all the previous operations\n\
    \  operator.each_with_index do |value, index|\n    #\U0001F4AC Evaluate all the\
    \ elements (using String#send)\n    operand[index+1] = operand[index].send(value,\
    \ operand[index+1])\n  end\n  #\U0001F4AC Return the result\n  operand[-1]\nend",
  "  result = operand[0]\n  for i in 0..operator.length - 1\n    case operator[i]\n\
    \    when '+'\n      result += operand[i + 1]\n    when '-'\n      result -= operand[i\
    \ + 1]\n    when '*'\n      result *= operand[i + 1]\n    when '//'\n      result\
    \ /= operand[i + 1]\n    when '**'\n      result **= operand[i + 1]\n    end\n\
    \  end\n  result\nend", "    result = operand[0]\n    for i in 1..operand.length-1\n\
    \        case operator[i-1]\n        when '+'\n            result += operand[i]\n\
    \        when '-'\n            result -= operand[i]\n        when '*'\n      \
    \      result *= operand[i]\n        when '//'\n            result /= operand[i]\n\
    \        when '**'\n            result **= operand[i]\n        end\n    end\n\
    \    return result\nend", "  result = operand[0]\n  for i in 0..operator.length-1\n\
    \    operator[i] == \"+\" ? result += operand[i+1] : result\n    operator[i] ==\
    \ \"-\" ? result -= operand[i+1] : result\n    operator[i] == \"*\" ? result *=\
    \ operand[i+1] : result\n    operator[i] == \"//\" ? result /= operand[i+1] :\
    \ result\n    operator[i] == \"**\" ? result **= operand[i+1] : result\n  end\n\
    \  result\nend", "  operators = operator.map { |i| i == \"//\" ? \"div\" : i }\n\
    \  operand.each_with_index.inject(0) do |result, (num, i)|\n    result.send(operators[i],\
    \ num)\n  end\nend\ndo_algebra(['+', '-', '*', '//'], [2, 2, 2, 2])", "    while\
    \ operator.length > 0 do\n        if operator[0] == \"+\"\n            operand[0]\
    \ = operand[0] + operand[1]\n        elsif operator[0] == \"-\"\n            operand[0]\
    \ = operand[0] - operand[1]\n        elsif operator[0] == \"*\"\n            operand[0]\
    \ = operand[0] * operand[1]\n        elsif operator[0] == \"//\"\n           \
    \ operand[0] = operand[0] / operand[1]\n        elsif operator[0] == \"**\"\n\
    \            operand[0] = operand[0] ** operand[1]\n        end\n        operator.shift\n\
    \        operand.shift\n    end\n    return operand[0]\nend", "  result = operand[0]\n\
    \  operand.each_with_index do |num, index|\n    next if index == 0\n    case operator[index\
    \ - 1]\n    when '+'\n      result += num\n    when '-'\n      result -= num\n\
    \    when '*'\n      result *= num\n    when '/'\n      result /= num\n    when\
    \ '**'\n      result **= num\n    end\n  end\n  result\nend", "    # list of operators\
    \ (:+, :-, :*, :/ etc)\n    # list of operands (integers)\n    # list of operators\
    \ is 1 less than operands\n    # return value is result of calculation\n    #\
    \ e.g. '+', '*', '-' and [2, 3, 4, 5] => 2 + 3 * 4 - 5\n    # equation = \"#{operand[0]}\
    \ #{operator[0]} #{operand[1]} #{operator[1]} #{operand[2]} #{operator[2]} #{operand[3]}\"\
    \n    # eval(equation)\n    # reduce operator and operand lists into single value\n\
    \    if operator.length == 0\n        return operand[0]\n    end\n    # can't\
    \ use reduce with a symbol, so create an array of symbols first\n    opers = operator.map\
    \ { |oper| oper.to_sym }\n    # p opers\n    # p operand\n    # p opers.zip(operand)\n\
    \    # p opers.zip(operand).flatten\n    # p opers.zip(operand).flatten(1)\n \
    \   p opers.zip(operand).flatten(1).reduce(:+)\n    \nend", "    i = 0\n    result\
    \ = operand[0]\n    while i < operator.length do\n        case operator[i]\n \
    \       when '+'\n            result += operand[i+1]\n        when '-'\n     \
    \       result -= operand[i+1]\n        when '*'\n            result *= operand[i+1]\n\
    \        when '//'\n            result = result / operand[i+1]\n        when '**'\n\
    \            result = result ** operand[i+1]\n        end\n        i += 1\n  \
    \  end\n    return result\nend\nputs do_algebra(['+', '*', '-'], [2, 3, 4, 5])\
    \ # => 9\nputs do_algebra(['+', '*', '//'], [5, 3, 3, 2]) # => 12\nputs do_algebra(['//',\
    \ '*', '-'], [12, 3, 2, 1]) # => 5", "  if operator.size != operand.size - 1\n\
    \    return -1\n  end\n  idx = 0\n  result = operand[0]\n  while idx < operator.size\n\
    \    if operator[idx] == '+'\n      result += operand[idx + 1]\n    elsif operator[idx]\
    \ == '-'\n      result -= operand[idx + 1]\n    elsif operator[idx] == '*'\n \
    \     result *= operand[idx + 1]\n    elsif operator[idx] == '//'\n      result\
    \ = result / operand[idx + 1]\n    elsif operator[idx] == '**'\n      result =\
    \ result ** operand[idx + 1]\n    end\n    idx += 1\n  end\n  return result\n\
    end", "    result = operand[0]\n    operator.each_with_index do |op, index|\n\
    \        result = result.send(op, operand[index + 1])\n    end\n    result\nend",
  "    x = operand.shift\n    operand.each_with_index do |item, index|\n        op\
    \ = operator[index]\n        case op\n        when '+'\n            x += item\n\
    \        when '-'\n            x -= item\n        when '*'\n            x *= item\n\
    \        when '/'\n            x /= item\n        when '^'\n            x **=\
    \ item\n        end\n    end\n    x\nend", "    #your code here\n    res = operand[0]\n\
    \    for i in 0..operator.length-1\n      if operator[i] == '+'\n        res +=\
    \ operand[i+1]\n      elsif operator[i] == '-'\n        res -= operand[i+1]\n\
    \      elsif operator[i] == '*'\n        res *= operand[i+1]\n      elsif operator[i]\
    \ == '//'\n        res /= operand[i+1]\n      elsif operator[i] == '**'\n    \
    \    res **= operand[i+1]\n      end\n    end\n    return res\nend", "  #code\
    \ here\nend", "  operator.map.with_index{|e,i| \"(\"+operand[i].to_s+e+operand[i+1].to_s+\"\
    )\"}.join(\"\").to_i\nend", "  result = operand[0]\n  1.upto(operator.length)\
    \ do |idx|\n    operand_idx = idx\n    case operator[idx - 1]\n    when '+'\n\
    \      result += operand[operand_idx]\n    when '-'\n      result -= operand[operand_idx]\n\
    \    when '*'\n      result *= operand[operand_idx]\n    when '//'\n      result\
    \ /= operand[operand_idx]\n    when '**'\n      result **= operand[operand_idx]\n\
    \    end\n  end\n  result\nend", "  sum = operand[0]\n  1.upto(operator.length)\
    \ do |i|\n    case operator[i-1]\n    when '+'\n      sum += operand[i]\n    when\
    \ '-'\n      sum -= operand[i]\n    when '*'\n      sum *= operand[i]\n    when\
    \ '//'\n      sum /= operand[i]\n    when '**'\n      sum **= operand[i]\n   \
    \ end\n  end\n  sum\nend", "    (1...operand.length).reduce(operand[0]) { |result,\
    \ i| result.send(operator[i - 1], operand[i]) }\nend", "    operand.each_with_index.inject(0)\
    \ do |a, (e, i)|\n        a.send(operator[i], e)\n    end\nend", "  result = operand[0]\n\
    \  operator.each_with_index do |x, index|\n    case x\n    when \"+\"\n      result\
    \ += operand[index + 1]\n    when \"-\"\n      result -= operand[index + 1]\n\
    \    when \"*\"\n      result *= operand[index + 1]\n    when \"//\"\n      result\
    \ /= operand[index + 1]\n    when \"**\"\n      result **= operand[index + 1]\n\
    \    end\n  end\n  result\nend", "  if operator.length == 1\n    operand[0].send(operator[0],\
    \ operand[1])\n  else\n    do_algebra([operator[0]], [operand[0].send(operator[1],\
    \ operand[1])] + operand[2..-1])\n  end\nend", "  new_operand = []\n  operand.each_with_index\
    \ do |x, i|\n    if operator[i] == \"/\"\n      new_operand << operand[i].to_f\n\
    \    else\n      new_operand << operand[i]\n    end\n  end\n  p new_operand\n\
    \  result = new_operand[0]\n  operator.each_with_index do |i, x|\n    if i ==\
    \ \"+\"\n      result += new_operand[x+1]\n    elsif i == \"-\"\n      result\
    \ -= new_operand[x+1]\n    elsif i == \"*\"\n      result *= new_operand[x+1]\n\
    \    elsif i == \"/\"\n      result /= new_operand[x+1]\n    else\n      result\
    \ **= new_operand[x+1]\n    end\n  end\n  result\nend", "\t# Your Code Here\n\
    end", "  #your code here\n  new_array = []\n  operator.each do |op|\n    case\
    \ op\n    when '+'\n      new_array << operand.shift.to_i + operand.shift.to_i\n\
    \    when '-'\n      new_array << operand.shift.to_i - operand.shift.to_i\n  \
    \  when '*'\n      new_array << operand.shift.to_i * operand.shift.to_i\n    when\
    \ '/'\n      new_array << operand.shift.to_i / operand.shift.to_i\n    when '**'\n\
    \      new_array << operand.shift.to_i ** operand.shift.to_i\n    end\n  end\n\
    \  new_array[0]\nend", "  operator.each_with_index.inject(operand.shift) do |result,\
    \ (op, i)|\n    result.send(op, operand[i])\n  end\nend\np do_algebra(['+', '*',\
    \ '-'], [2, 3, 4, 5])", "    operand.each_with_index.inject do |total, (item,\
    \ index)|\n        total.send(operator[index-1], item)\n    end\nend", "    str\
    \ = \"\"\n    operand.each_with_index { |num, index| str += num.to_s + operator[index].to_s\
    \ }\n    str += operand.last.to_s\n    eval(str)\nend", "    # write your code\
    \ here\n    ans = operand[0]\n    operand.each_with_index { |element, index| \n\
    \        case operator[index]\n        when '+'\n            ans += element\n\
    \        when '-'\n            ans -= element\n        when '*'\n            ans\
    \ *= element\n        when '//'\n            ans = ans.floor(element)\n      \
    \  when '**'\n            ans = ans ** element\n        end\n    }\n    ans\n\
    end", "    operator.each_with_index.reduce(operand[0]) do |result, (op, i)|\n\
    \        result.send(op, operand[i + 1])\n    end\nend", "  operand.inject { |result,\
    \ val| result.send(operator.shift, val) }\nend", "  str = operand.zip(operator).flatten.join\n\
    \  eval(str)\nend", "  result = operand[0]\n  operand.drop(1).each_with_index\
    \ do |op, idx|\n    case operator[idx]\n    when '+'\n      result += op\n   \
    \ when '-'\n      result -= op\n    when '*'\n      result *= op\n    when '/'\n\
    \      result /= op\n    when '**'\n      result **= op\n    end\n  end\n  result\n\
    end", "  operand.zip(operator).flatten.compact.join(' ')\nend", "    result =\
    \ operand[0]\n    operators = [\"+\", \"-\", \"*\", \"//\", \"**\"]\n    operator.each_with_index\
    \ do |op, i|\n        if operators.include?(op)\n            result = result.send(op,\
    \ operand[i+1])\n        end\n    end\n    result\nend", "    operand.each_with_index.map\
    \ do |e, i|\n        i == 0 ? e : e.send(operator[i-1], operand[i-1])\n    end.last\n\
    end", "  operator.map.with_index{|val,idx| \n    val == \"//\" ? operand[idx]/operand[idx+1]\
    \ : operand[idx].send(val, operand[idx+1])\n  }.reduce(:+)\nend", "    total =\
    \ operand[0]\n    for i in 0..operator.length - 1\n        case operator[i]\n\
    \        when '+'\n            total += operand[i + 1]\n        when '-'\n   \
    \         total -= operand[i + 1]\n        when '*'\n            total *= operand[i\
    \ + 1]\n        when '//'\n            total /= operand[i + 1]\n        when '**'\n\
    \            total **= operand[i + 1]\n        end\n    end\n    return total\n\
    end", "    i = 0\n    while (i < operator.length)\n        if operator[i] == \"\
    **\"\n            operand[i] = operand[i] ** operand[i+1]\n            operator.delete_at(i)\n\
    \            operand.delete_at(i+1)\n            i -= 1\n        elsif operator[i]\
    \ == \"//\"\n            operand[i] = operand[i] / operand[i+1]\n            operator.delete_at(i)\n\
    \            operand.delete_at(i+1)\n            i -= 1\n        elsif operator[i]\
    \ == \"*\"\n            operand[i] = operand[i] * operand[i+1]\n            operator.delete_at(i)\n\
    \            operand.delete_at(i+1)\n            i -= 1\n        elsif operator[i]\
    \ == \"+\"\n            operand[i] = operand[i] + operand[i+1]\n            operator.delete_at(i)\n\
    \            operand.delete_at(i+1)\n            i -= 1\n        elsif operator[i]\
    \ == \"-\"\n            operand[i] = operand[i] - operand[i+1]\n            operator.delete_at(i)\n\
    \            operand.delete_at(i+1)\n            i -= 1\n        end\n       \
    \ i += 1\n    end\n    return operand[0]\nend\nputs do_algebra(['+', '*', '-'],\
    \ [2, 3, 4, 5]) == 9\nputs do_algebra(['+', '*', '-'], [6, 2, 1, 2]) == 14\nputs\
    \ do_algebra(['+', '*', '-'], [3, 2, 1, 2]) == 7\nputs do_algebra(['+', '*', '-'],\
    \ [9, 2, 1, 2]) == 21\nputs do_algebra(['+', '*', '-'], [2, 2, 1, 2]) == 5\nputs\
    \ do_algebra(['+', '-', '-'], [6, 1, 2, 2]) == 5\nput", "\treturn operand[0] if\
    \ operator.length == 0\n\top = operator.shift\n\treturn operand[0] if op == \"\
    *\" || op == \"/\" || op == \"**\"\n\tcase op\n\twhen \"+\"\n\t\treturn operand[0]\
    \ + do_algebra(operator, operand[1..-1])\n\twhen \"-\"\n\t\treturn operand[0]\
    \ - do_algebra(operator, operand[1..-1])\n\tend\nend", "  str = ''\n  operator.each_with_index\
    \ do |i, index|\n    str += index == 0 ? \"#{operand[index]} #{i} #{operand[index\
    \ + 1]}\" : \" #{i} #{operand[index + 1]}\"\n  end\n  str.to_i\nend", "  array\
    \ = []\n  operand.each_with_index { |e,i| array << \"#{e} #{operator[i]}\" }\n\
    \  array << operand.last.to_s\n  eval(array.join)\nend", "\t# create variable\
    \ to store the result\n\tresult = 0\n\t# loop through the given list\n\toperator.each_with_index\
    \ do |op, index|\n\t\t# add first element if the first one\n\t\tif index == 0\n\
    \t\t\tresult = operand[index]\n\t\t# multiply next element if multiply\n\t\telsif\
    \ op == '*'\n\t\t\tresult *= operand[index + 1]\n\t\t# divide next element if\
    \ divide\n\t\telsif op == '//'\n\t\t\tresult /= operand[index + 1]\n\t\t# subtract\
    \ next element if subtract\n\t\telsif op == '-'\n\t\t\tresult -= operand[index\
    \ + 1]\n\t\t# add next element if add\n\t\telsif op == '+'\n\t\t\tresult += operand[index\
    \ + 1]\n\t\t# exponentiate next element if exponentiate\n\t\telsif op == '**'\n\
    \t\t\tresult **= operand[index + 1]\n\t\tend\n\tend\n\t# return result\n\tresult\n\
    end", "    i = 0\n    result = operand[0]\n    while i < operator.length\n   \
    \     if operator[i] == '+'\n            result += operand[i+1]\n        elsif\
    \ operator[i] == '-'\n            result -= operand[i+1]\n        elsif operator[i]\
    \ == '*'\n            result *= operand[i+1]\n        elsif operator[i] == '//'\n\
    \            result /= operand[i+1]\n        elsif operator[i] == '**'\n     \
    \       result **= operand[i+1]\n        end\n        i += 1\n    end\n    return\
    \ result\nend", "  operator.each_with_index.inject(operand[0]) do |result, (op,\
    \ i)|\n    result.send(op, operand[i + 1])\n  end\nend", "  operators = [:+, :-,\
    \ :*, :/, :**]\n  operand.each_with_index.reduce(0) do |result, (operand, index)|\n\
    \    result.public_send(operators[operator[index]], operand)\n  end\nend", " \
    \ #your code here\n  total = operand[0]\n  (1..operand.length-1).each do |i|\n\
    \    total = eval(\"#{total} #{operator[i-1]} #{operand[i]}\")\n  end\n  total\n\
    end", "  operand.each_with_index.inject(0) do |result, (operand, index)|\n   \
    \ operation = operator[index].to_sym\n    result.send(operation, operand)\n  end\n\
    end", "   result = operand[0]\n    for i in 0..operator.length-1\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elsif operator[i] == \"\
    -\"\n            result -= operand[i+1]\n        elsif operator[i] == \"*\"\n\
    \            result *= operand[i+1]\n        elsif operator[i] == \"//\"\n   \
    \         result /= operand[i+1]\n        elsif operator[i] == \"**\"\n      \
    \      result **= operand[i+1]\n        end\n    end\n    return result\nend",
  "  counter = 0\n  while operator.length > 0\n    operand.insert(counter + 1, operator.shift)\n\
    \    counter += 2\n  end\n  operand.join(\" \").gsub(\"*\", \"**\").gsub(\"//\"\
    , \"/\").to_i\nend", "  #your code here\nend", "  result = operand[0]\n  for i\
    \ in 0..operator.length-1\n    case operator[i]\n    when '+'\n      result +=\
    \ operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when '*'\n   \
    \   result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n    when\
    \ '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend\nputs do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5])\nputs do_algebra(['*', '+', '-'], [2, 3, 4, 5])\nputs\
    \ do_algebra(['*', '+', '-'], [2, 3, 4, 5])", "    count = 0\n    while operator.length\
    \ > 0\n        operand[count] = operand[count].send(operator[0], operand[count\
    \ + 1])\n        operator.shift\n        operand.delete_at(count + 1)\n    end\n\
    \    return operand[0]\nend", "  i = 1\n  operator.each do |o|\n    case o\n \
    \   when '+'\n      operand[i] = operand[i-1] + operand[i]\n    when '-'\n   \
    \   operand[i] = operand[i-1] - operand[i]\n    when '*'\n      operand[i] = operand[i-1]\
    \ * operand[i]\n    when '//'\n      operand[i] = operand[i-1] / operand[i]\n\
    \    when '**'\n      operand[i] = operand[i-1] ** operand[i]\n    end\n    i\
    \ += 1\n  end\n  operand[-1]\nend", "  expression = \"\"\n  operator.each_with_index\
    \ { |operator, index| expression += operand[index].to_s + operator }\n  expression\
    \ += operand[-1].to_s\n  eval(expression)\nend", "\toperand.each_with_index.inject\
    \ do |sum, (value, index)|\n\t\tif index < operand.length - 1\n\t\t\toperator[index]\
    \ == '+' ? sum + value : sum - value\n\t\telse\n\t\t\tsum * value\n\t\tend\n\t\
    end\nend", "    exp = operator.map.with_index { |e, i| \"#{operand[i]} #{e} #{operand[i+1]}\"\
    \ }.join\n    exp.gsub!(/\\s+/, ' ')\n    exp.gsub!(/\\s*/, '')\n    exp.gsub!(/\\\
    s*$/, '')\n    p eval(exp)\nend", "    operand.each_with_index.inject(0) do |sum,\
    \ (operand, index)|\n        sum.send(operator[index - 1], operand) if index.nonzero?\n\
    \    end\nend", "  if operator[1] == '*'\n    operand[0] + operator[0] + operand[1]\
    \ + operator[1] + operand[2] + operator[2] + operand[3]\n  elsif operator[1] ==\
    \ '//'\n    operand[0] + operator[0] + operand[1] + operator[1] + operand[2] +\
    \ operator[2] + operand[3]\n  elsif operator[1] == '**'\n    operand[0] + operator[0]\
    \ + operand[1] + operator[1] + operand[2] + operator[2] + operand[3]\n  else\n\
    \    operand[0] + operator[0] + operand[1] + operator[1] + operand[2] + operator[2]\
    \ + operand[3]\n  end\nend", "    #your code here\n  result = operand[0]\n  \n\
    \  i = 0\n  while i < operator.length\n    j = i + 1\n    num = operand[j]\n \
    \   # p \"result is #{result}\"\n    # p \"num is #{num}\"\n    # p \"operator\
    \ is #{operator[i]}\"\n    case operator[i]\n    when \"+\"\n      result += num\n\
    \    when \"-\"\n      result -= num\n    when \"*\"\n      result *= num\n  \
    \  when \"//\"\n      result /= num\n    when \"**\"\n      result **= num\n \
    \   end\n    i += 1\n  end\n  result\nend", "  result = 0\n  result = operand[0]\n\
    \  for i in 0..operator.length\n    if i == 0\n      next\n    end\n    if operator[i-1]\
    \ == \"+\"\n      result += operand[i]\n    elsif operator[i-1] == \"-\"\n   \
    \   result -= operand[i]\n    elsif operator[i-1] == \"*\"\n      result *= operand[i]\n\
    \    elsif operator[i-1] == \"//\"\n      result /= operand[i]\n    elsif operator[i-1]\
    \ == \"**\"\n      result **= operand[i]\n    end\n  end\n  return result\nend",
  "    # Your code goes here\n    sum = operand[0]\n    i = 0\n    while i < operator.length\n\
    \      if operator[i] == \"+\"\n        sum += operand[i+1]\n      elsif operator[i]\
    \ == \"-\"\n        sum -= operand[i+1]\n      elsif operator[i] == \"*\"\n  \
    \      sum *= operand[i+1]\n      elsif operator[i] == \"//\"\n        sum /=\
    \ operand[i+1]\n      elsif operator[i] == \"**\"\n        sum **= operand[i+1]\n\
    \      end\n      i += 1\n    end\n    return sum\nend", "    return operand[0]\
    \ if operator.length < 1\n    operator.each_with_index do |op, i|\n        operand[i],\
    \ operand[i+1] = op.gsub(/\\d+/,\"\") == \"//\" ? operand[i].to_f.fdiv(operand[i+1])\
    \ : eval(\"#{operand[i]} #{op} #{operand[i+1]}\")\n    end\n    do_algebra(operator,\
    \ operand[0...-1])\nend", "  array = [operand.shift]\n  operator.each do |oper|\n\
    \    array << operand.shift\n    array = [array.reduce(oper)]\n  end\n  array.first\n\
    end", "  #your code here\nend", "  (1...operand.length).each { |i| operand[i]\
    \ = operand[i - 1].send(operator[i - 1], operand[i]) }\n  operand.last\nend",
  "  operator = operator.split(', ')\n  operand = operand.split(', ')\n  operator\
    \ = operator.map { |x| x.to_sym }\n  operand = operand.map { |x| x.to_i }\n  if\
    \ operator.length == operand.length - 1\n    result = operand[0]\n    i = 0\n\
    \    while i < operator.length\n      result = result.send(operator[i], operand[i\
    \ + 1])\n      i += 1\n    end\n    puts result\n  else\n    puts 'Operator and\
    \ operand arrays are not of equal length.'\n  end\nend\ndo_algebra('+', '2, 3,\
    \ 4, 5')", "  operators = operator\n  numbers = operand\n  result = operand[0]\n\
    \  for i in 0..operators.length-1\n    case operators[i]\n    when \"+\"\n   \
    \   result += numbers[i+1]\n    when \"-\"\n      result -= numbers[i+1]\n   \
    \ when \"*\"\n      result *= numbers[i+1]\n    when \"//\"\n      result = result.fdiv(numbers[i+1])\n\
    \    when \"**\"\n      result **= numbers[i+1]\n    end\n  end\n  return result\n\
    end", "  result = operand[0]\n  operand.each_with_index do |x, i|\n    result\
    \ = result.send(operator[i-1], x) unless i == 0\n  end\n  result\nend", "    result\
    \ = operand[0]\n    (1...operand.length).each do |i|\n        result = result.send(operator[i-1],\
    \ operand[i])\n    end\n    result\nend", "  operand.zip(operator).inject { |acc,\
    \ op| acc.send(op.last, op.first) }\nend", "  answer = operand[0]\n  operator.each_with_index\
    \ do |op, i|\n    operand[i + 1] ? answer = answer.send(op, operand[i + 1]) :\
    \ answer\n  end\n  answer\nend", "    num = operand.shift\n    operand.each_with_index\
    \ do |n, i|\n        num = num.send(operator[i], n)\n    end\n    num\nend", " \
    \ result = operand[0]\n  operand.drop(1).each_with_index do |o, i|\n    case operator[i]\n\
    \    when '+'\n      result += o\n    when '-'\n      result -= o\n    when '*'\n\
    \      result *= o\n    when '/'\n      result /= o\n    when '**'\n      result\
    \ **= o\n    end\n  end\n  result\nend", "  eval(operand.each_with_index.inject('')\
    \ { |s, (v, i)| s + v.to_s + operator[i] })\nend", "  if operator.include?(\"\
    //\")\n    operator.delete(\"//\")\n    operand.map! {|x| x.to_f}\n  end\n  operator.map!\
    \ {|x| x == \"**\" ? \"**\" : x.to_sym}\n  operand.zip(operator).flatten.join('\
    \ ')\nend", "    result = operand[0]\n    1.upto(operand.length - 1) do |i|\n\
    \        result = result.send(operator[i - 1], operand[i])\n    end\n    result\n\
    end", "    result = 0\n    i = 0\n    while i < operator.length do\n        case\
    \ operator[i]\n        when '+'\n            result += operand[i] + operand[i+1]\n\
    \        when '-'\n            result += operand[i] - operand[i+1]\n        when\
    \ '*'\n            result += operand[i] * operand[i+1]\n        when '//'\n  \
    \          result += operand[i] / operand[i+1]\n        when '**'\n          \
    \  result += operand[i] ** operand[i+1]\n        end\n        i += 1\n    end\n\
    \    return result\nend", "  result = operand[0]\n  (0...operator.length).each\
    \ do |i|\n    case operator[i]\n    when '+'\n      result += operand[i+1]\n \
    \   when '-'\n      result -= operand[i+1]\n    when '*'\n      result *= operand[i+1]\n\
    \    when '//'\n      result /= operand[i+1]\n    when '**'\n      result **=\
    \ operand[i+1]\n    end\n  end\n  result\nend", "    # your code here\n    total\
    \ = operand[0]\n    for i in (0...operator.length)\n      case operator[i]\n \
    \     when \"+\"\n        total += operand[i+1]\n      when \"-\"\n        total\
    \ -= operand[i+1]\n      when \"*\"\n        total *= operand[i+1]\n      when\
    \ \"//\"\n        total = total / operand[i+1]\n      when \"**\"\n        total\
    \ = total ** operand[i+1]\n      end\n    end\n    return total\nend", "    result\
    \ = operand[0]\n    operator.each_with_index do |op, index|\n        case op\n\
    \        when '+'\n            result += operand[index + 1]\n        when '-'\n\
    \            result -= operand[index + 1]\n        when '*'\n            result\
    \ *= operand[index + 1]\n        when '//'\n            result //= operand[index\
    \ + 1]\n        when '**'\n            result **= operand[index + 1]\n       \
    \ end\n    end\n    result\nend", "    operand.zip(operator.drop(1)).map(&:flatten).inject\
    \ do |total, value|\n        if value[1] == '+'\n            total += value[0]\n\
    \        elsif value[1] == '-'\n            total -= value[0]\n        elsif value[1]\
    \ == '*'\n            total *= value[0]\n        elsif value[1] == '//'\n    \
    \        total /= value[0]\n        elsif value[1] == '**'\n            total\
    \ **= value[0]\n        end\n    end\nend\np do_algebra(['+', '*', '-'], [2, 3,\
    \ 4, 5]) #, 9)\np do_algebra(['+', '*', '-'], [4, 2, 2, 6]) #, 20)\np do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 9]) #, 15)\np do_algebra(['+', '*', '-'], [1, 2, 3, 4])\
    \ #, 5)\np do_algebra(['//', '*', '-'], [10, 5, 6, 3]) #, 3)\np do_algebra(['//',\
    \ '*', '-'], [10, 5, 2, 3]) #, -4)\np do_algebra(['//', '*', '-'], [10, 5, 2,\
    \ 2]) #, -2)\np do_algebra(['//', '*', '-'], [10, 5, 2, 1]) #, 0)\np do_algebra(['//',\
    \ '*', '-'], [5, 2, 3, 2]) #, 2)\np do_algebra(['//', '*', '-'], [5, 2, 3, 1])\
    \ #, 1)\np do_algebra(['//', '*', '-'], [5, 2, 3, 0]) #, 0)\np do_algebra(['//',\
    \ '*', '-'], [5, 2, 2, 1]) #, 0)\np do_algebra(['//', '*', '-'], [5, 2, 2", "\t\
    answer = operand[0]\n\toperator.each_with_index do |x, i|\n\t\tif x == '+'\n\t\
    \t\tanswer += operand[i+1]\n\t\telsif x == '-'\n\t\t\tanswer -= operand[i+1]\n\
    \t\telsif x == '*'\n\t\t\tanswer *= operand[i+1]\n\t\telsif x == '//'\n\t\t\t\
    answer /= operand[i+1]\n\t\telsif x == '**'\n\t\t\tanswer **= operand[i+1]\n\t\
    \tend\n\tend\n\treturn answer\nend", "  result = operand[0]\n  for i in 0..operator.length\
    \ - 1\n    case operator[i]\n    when '+'\n      result += operand[i + 1]\n  \
    \  when '-'\n      result -= operand[i + 1]\n    when '*'\n      result *= operand[i\
    \ + 1]\n    when '//'\n      result /= operand[i + 1]\n    when '**'\n      result\
    \ **= operand[i + 1]\n    end\n  end\n  result\nend", "  answer = operand[0]\n\
    \  for i in 1..operand.length-1\n    answer = answer.send(operator[i-1], operand[i])\n\
    \  end\n  return answer\nend\noperator = [\"*\", \"**\", \"//\", \"+\", \"-\"\
    ]\noperand = [12, 2, 3, 10, 5]\nputs do_algebra(operator, operand) #=> -1204",
  "  result = operand[0]\n  i = 0\n  while i < operator.length\n    case operator[i]\n\
    \    when '+'\n      result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n\
    \    when '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end", "  result = operand[0]\n  operand[1..-1].each_with_index do |num, i|\n \
    \   result = result.public_send(operator[i], num)\n  end\n  result\nend", "  operand.each_cons(2).map\
    \ { |a, b| b.public_send(operator.shift, a) }.inject(:+)\nend", "  operator.map.with_index{|op,\
    \ i| op == \"+\" ? operand[i] + operand[i+1] : op == \"-\" ? operand[i] - operand[i+1]\
    \ : op == \"*\" ? operand[i] * operand[i+1] : op == \"//\" ? operand[i] / operand[i+1]\
    \ : op == \"**\" ? operand[i] ** operand[i+1] : 0}\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
