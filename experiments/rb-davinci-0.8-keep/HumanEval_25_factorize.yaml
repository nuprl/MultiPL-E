name: HumanEval_25_factorize
language: rb
prompt: "# Return list of prime factors of given integer in the order from smallest\
  \ to largest.\n# Each of the factors should be listed number of times corresponding\
  \ to how many times it appeares in factorization.\n# Input number should be equal\
  \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
  # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\ndef factorize(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_factorize\n\
  \    candidate = method(:factorize)\n    assert_equal([2], candidate.call(2))\n\
  \    assert_equal([2, 2], candidate.call(4))\n    assert_equal([2, 2, 2], candidate.call(8))\n\
  \    assert_equal([3, 19], candidate.call(57))\n    assert_equal([3, 3, 19, 19],\
  \ candidate.call(3249))\n    assert_equal([3, 3, 3, 19, 19, 19], candidate.call(185193))\n\
  \    assert_equal([3, 19, 19, 19], candidate.call(20577))\n    assert_equal([2,\
  \ 3, 3], candidate.call(18))\n  end\nend\n"
completions: ["  divider = 2\n  factors = []\n  while n != 1\n    if n % divider ==\
    \ 0\n      factors << divider\n      n /= divider\n    else\n      divider +=\
    \ 1\n    end\n  end\n  factors\nend", "  a = []\n  b = 2\n  while n > 1\n    while\
    \ n % b == 0\n      a << b\n      n /= b\n    end\n    b += 1\n  end\n  a\nend",
  "  factor = []\n  current_number = n\n  number = 2\n  while current_number != 1\n\
    \    if current_number % number == 0\n      factor << number\n      current_number\
    \ = current_number / number\n    else\n      number += 1\n    end\n  end\n  factor\n\
    end", "  primes = prime_factors(n)\n  exp = exponent(n, primes)\n  factors = []\n\
    \  primes.zip(exp).each { |e| e[1].times { factors << e[0] } }\n  factors\nend",
  "\nend", "  result = []\n  divisor = 2\n  while n > 1\n    until n % divisor !=\
    \ 0\n      result << divisor\n      n /= divisor\n    end\n    divisor += 1\n\
    \  end\n  result\nend", "  list = Array.new\n  prime = 2\n  while n >= prime\n\
    \    while n % prime == 0\n      list << prime\n      n /= prime\n    end\n  \
    \  prime += 1\n  end\n  list\nend", "  factors = []\n  p = 2\n  while n > 1\n\
    \    while n % p == 0\n      factors << p\n      n /= p\n    end\n    p += 1\n\
    \  end\n  factors\nend", "    factors = []\n    # This loop will go through all\
    \ the integers from 2 to n to see if there are divisible by n\n    # if n is divisible\
    \ by any number it will be placed in the factors array\n    for i in 2..n do\n\
    \        if n % i == 0\n            factors << i\n            # we divide n by\
    \ i to get the new number to be factorized\n            n = n / i\n          \
    \  # we start the loop again and repeat the process untill we end up with 1\n\
    \            # and the factors array is full of prime factors of the original\
    \ number\n            i = 1\n        end\n    end\n    factors\nend", "  # puts\
    \ n\n  arr = []\n  i = 2\n  while n > 1\n    while n % i == 0\n      arr << i\n\
    \      n /= i\n    end\n    i += 1\n  end\n  arr\nend", end, "  n.prime_division.flatten.uniq.map\
    \ { |x| [x] * n.prime_division.flatten.count(x) }.flatten\nend", "  result = []\n\
    \  Prime.prime_division(n).each do |fact|\n    fact[1].times { result << fact[0]\
    \ }\n  end\n  result\nend", "  num = n\n  result = []\n  index = 2\n  while num\
    \ > 1\n    if num % index == 0\n      result << index\n      num /= index\n  \
    \  else\n      index += 1\n    end\n  end\n  result\nend", "  factorial = [1]\n\
    \  factor_count = {}\n  while factorial.last != n\n    factorial << next_factor(factorial.last)\n\
    \    factor_count[factorial.last] ||= 0\n    factor_count[factorial.last] += 1\n\
    \  end\n  factor_count.keys.sort.map { |n| [n] * factor_count[n] }.flatten\nend",
  "  factors = []\n  (2..n).each do |i|\n    while n % i == 0\n      factors << i\n\
    \      n /= i\n    end\n  end\n  factors\nend", "  arry = []\n  div = 2\n  while\
    \ n > 1\n    while n % div == 0\n      arry << div\n      n /= div\n    end\n\
    \    div += 1\n  end\n  arry\nend", "    result = []\n    while n > 1\n      \
    \  (2..n).each do |x|\n            if n % x == 0\n                result << x\n\
    \                n = n / x\n                break\n            end\n        end\n\
    \    end\n    result\nend", "\ti = 2\n\tarr = []\n\twhile i <= n\n\t\tif n % i\
    \ == 0\n\t\t\tarr << i\n\t\t\tn = n / i\n\t\telse\n\t\t\ti += 1\n\t\tend\n\tend\n\
    \tarr\nend", "  # your code here\n  factors = []\n  divisor = 2\n  while n > 1\n\
    \    if n % divisor == 0\n      factors << divisor\n      n /= divisor\n    else\n\
    \      divisor += 1\n    end\n  end\n  factors\nend", "  result = []\n  number\
    \ = n\n  for i in 2..number do\n    if number % i == 0\n      number = number\
    \ / i\n      result << i\n      factorize(number) if number != 1\n    end\n  end\n\
    \  result\nend", "  primes = get_primes_up_to(n)\n  div = n\n  result = []\n \
    \ while div > 1\n    primes.each do |p|\n      if div % p == 0\n        result\
    \ << p\n        div /= p\n        break\n      end\n    end\n  end\n  result\n\
    end", "  result = []\n  2.upto(n) do |x|\n    n2 = n\n    n2 /= x while n2 % x\
    \ == 0\n    result << x if n2 < x\n    n = n2\n    break if n == 1\n  end\n  result\n\
    end", "\tresults = []\n\tdivisor = 2\n\twhile n != 1\n\t\tif n % divisor == 0\n\
    \t\t\tresults << divisor\n\t\t\tn = n / divisor\n\t\telse\n\t\t\tdivisor += 1\n\
    \t\tend\n\tend\n\tresults\nend", "  a = []\n  while (n % 2 == 0)\n    a << 2\n\
    \    n = n / 2\n  end\n  (3..n**0.5).step(2) do |i|\n    while (n % i == 0)\n\
    \      a << i\n      n = n / i\n    end\n  end\n  a << n if n > 2\n  a\nend",
  "  result = []\n  index = 2\n  until n == 1\n    if n % index == 0\n      result\
    \ << index\n      n /= index\n    else\n      index += 1\n    end\n  end\n  result\n\
    end", "  factors = []\n  prime_factors(n).each do |x|\n    while n % x == 0\n\
    \      factors << x\n      n /= x\n    end\n  end\n  factors\nend", "  n.to_s.chars.map(&:to_i)\n\
    end", "  factors = []\n  (2..n).each do |f|\n    if n%f == 0\n      factors <<\
    \ f\n      n = n/f\n      redo\n    end\n  end\n  factors\nend", "  result = []\n\
    \  i = 2\n  while n != 1\n    while n % i == 0\n      result << i\n      n /=\
    \ i\n    end\n    i += 1\n  end\n  result\nend", end, "  raise ArgumentError if\
    \ n < 0\n  primes = []\n  for i in (2..n)\n    if prime?(i)\n      primes << i\n\
    \    end\n  end\n  primes.select { |pr| n % pr == 0 }\nend", "  result = []\n\
    \  for i in 2..n-1\n    if n % i == 0\n      result << i\n      n = n / i\n  \
    \    i = i - 1\n    end\n  end\n  result << n\nend\nfactorize(80)", "\tfactors\
    \ = []\n\tx = 2\n\twhile n > 1\n\t\twhile n % x == 0\n\t\t\tfactors << x\n\t\t\
    \tn /= x\n\t\tend\n\t\tx += 1\n\tend\n\tfactors\nend", "  factors = []\n  d =\
    \ 2\n  until n <= 1\n    if n % d == 0\n      factors << d\n      n /= d\n   \
    \ else\n      d += 1\n    end\n  end\n  factors\nend", "    factors = []\n   \
    \ i = 2\n    while n > 1\n        while n % i == 0\n            factors << i\n\
    \            n /= i\n        end\n        i += 1\n    end\n    factors\nend",
  "\nend", "  prime_factors = []\n  divisor = 2\n  while n > 1\n    while n % divisor\
    \ == 0\n      prime_factors << divisor\n      n /= divisor\n    end\n    divisor\
    \ += 1\n  end\n  prime_factors\nend", "  result = []\n  while n % 2 == 0\n   \
    \ result << 2\n    n /= 2\n  end\n  p = 3\n  while n > 1\n    while n % p == 0\n\
    \      result << p\n      n /= p\n    end\n    p += 2\n  end\n  result\nend",
  "  raise ArgumentError unless n.is_a? Integer\n  raise ArgumentError if n <= 0\n\
    \  return [n] if n <= 3\n  res = []\n  prime = 2\n  while n > 1\n    break if\
    \ prime > n\n    while n % prime == 0\n      res << prime\n      n /= prime\n\
    \    end\n    prime += 1\n  end\n  res\nend", "\t# write your code here\n\treturn\
    \ [] if n <= 1\n\ti = 2\n\tprime_factors = []\n\twhile i <= n\n\t\twhile n % i\
    \ == 0\n\t\t\tprime_factors << i\n\t\t\tn /= i\n\t\tend\n\t\ti += 1\n\tend\n\t\
    prime_factors\nend", "  list = []\n  number = n\n  divisor = 2\n  while number\
    \ != 1\n    if number % divisor == 0\n      list << divisor\n      number = number\
    \ / divisor\n    else\n      divisor += 1\n    end\n  end\n  list\nend", "  result\
    \ = []\n  primes = []\n  i = 2\n  while i < n\n    if n % i == 0\n      primes\
    \ << i\n      n = n / i\n      result << i\n    else\n      i += 1\n    end\n\
    \  end\n  result << n\nend", "  # your code here\nend", "  nums = []\n  prime_factors\
    \ = []\n  i = 2\n  while n != 1\n    if n % i == 0\n      prime_factors << i\n\
    \      n = n / i\n    else\n      i += 1\n    end\n  end\n  prime_factors\nend",
  "  #### NOT WORKING\n  primes = n.prime_division\n  return [1] if n == 1\n  primes.map\
    \ { |p, c| p * c }\nend", "  factors = []\n  d = 2\n  while n > 1\n    while n\
    \ % d == 0\n      factors << d\n      n /= d\n    end\n    d += 1\n  end\n  factors\n\
    end", "\tresult = []\n\tnumber = n", "  factors = []\n  divisor = 2\n  while n\
    \ > 1\n    while n % divisor == 0\n      factors << divisor\n      n /= divisor\n\
    \    end\n    divisor += 1\n  end\n  factors\nend", "  primes = []\n  begin\n\
    \    primes << next_prime(n)\n    n /= primes.last\n  end until n <= 1\n  primes\n\
    end", "\tprimes = prime_generator(n)\n\tres = []\n\tprimes.each do |prime|\n\t\
    \twhile n % prime == 0\n\t\t\tres << prime\n\t\t\tn /= prime\n\t\tend\n\tend\n\
    \tres\nend", "\nend", "  primes = []\n  i = 2\n  while n > 1\n    if n % i ==\
    \ 0\n      primes << i\n      n /= i\n    else\n      i += 1\n    end\n  end\n\
    \  primes\nend", "  arr = []\n  x = 2\n  while n != 1\n    if n % x == 0\n   \
    \   arr << x\n      n = n / x\n    else\n      x += 1\n    end\n  end\n  arr\n\
    end", "  p = 2\n  factors = []\n  while n > 1\n    if n % p == 0\n      factors\
    \ << p\n      n /= p\n    else\n      p += 1\n    end\n  end\n  factors\nend",
  "  result = []\n  while n > 1\n    result << 2 and n /= 2 while n % 2 == 0\n   \
    \ result << 3 and n /= 3 while n % 3 == 0\n    result << 5 and n /= 5 while n\
    \ % 5 == 0\n    result << 7 and n /= 7 while n % 7 == 0\n    result << n\n   \
    \ break\n  end\n  result\nend", "  result = []\n  x = 2\n  while x <= n\n    if\
    \ n % x == 0\n      result << x\n      n = n / x\n    else\n      x += 1\n   \
    \ end\n  end\n  result\nend\nfactorize(70)", "\tif n < 2\n\t\treturn []\n\tend\n\
    \ti = 2\n\tfactor_array = []\n\twhile i <= n do\n\t\tif n % i == 0\n\t\t\tn =\
    \ n / i\n\t\t\tfactor_array << i\n\t\t\ti = 1\n\t\tend\n\t\ti += 1\n\tend\n\t\
    return factor_array\nend", "  res = []\n  cur = 2\n  while n > 1\n    res << cur\
    \ if n % cur == 0\n    n /= cur while n % cur == 0\n    cur += 1\n  end\n  res\n\
    end", "  factors = []\n  while n > 1\n    factor = (2..n).detect { |i| n % i ==\
    \ 0 }\n    factors << factor\n    n /= factor\n  end\n  factors\nend", "  factors\
    \ = []\n  divisor = 2\n  while n > 1\n    while n % divisor == 0\n      factors\
    \ << divisor\n      n /= divisor\n    end\n    divisor += 1\n  end\n  factors\n\
    end", "    if n == 1\n        return [1]\n    else\n        divisor = 2\n    \
    \    factors = []\n        while n > 1\n            if n % divisor == 0\n    \
    \            factors << divisor\n                n /= divisor\n            else\n\
    \                divisor += 1\n            end\n        end\n        return factors\n\
    \    end\nend", "  #  if n < 2\n  #    return []\n  #  end\n  #\n  #  result =\
    \ []\n  #  divisor = 2\n  #\n  #  while n > 1\n  #    while n % divisor == 0\n\
    \  #      result << divisor\n  #      n /= divisor\n  #    end\n  #    divisor\
    \ += 1\n  #  end\n  #\n  #  result\n  #", "\tdividers = []\n\t(2..n).each do |num|\n\
    \t\tbreak if num > n\n\t\twhile n % num == 0\n\t\t\tdividers << num\n\t\t\tn /=\
    \ num\n\t\tend\n\tend\n\tdividers\nend", "  primes = find_primes(n)\n  output\
    \ = []\n  primes.each do |prime|\n    while n % prime == 0\n      output << prime\n\
    \      n /= prime\n    end\n  end\n  output\nend", "  if n <= 0\n    return []\n\
    \  end\n  prime_factors = []\n  factor = 2\n  while n > 1\n    if n % factor ==\
    \ 0\n      prime_factors << factor\n      n /= factor\n    else\n      factor\
    \ += 1\n    end\n  end\n  prime_factors\nend", "  arr = []\n  until n == 1\n \
    \   factor = (2..n).find { |x| n % x == 0 }\n    arr << factor\n    n /= factor\n\
    \  end\n  arr\nend", "  factors = []\n  divisor = 2\n  while n > 1\n    while\
    \ n % divisor == 0\n      factors << divisor\n      n /= divisor\n    end\n  \
    \  divisor += 1\n  end\n  factors\nend", "  x = n\n  factor_list = []\n  while\
    \ x > 1\n    (2..x).each do |y|\n      if x % y == 0\n        factor_list << y\n\
    \        x = x / y\n        break\n      end\n    end\n  end\n  return factor_list\n\
    end", "  num = n\n  list = []\n  while num > 1\n    for i in 2..num\n      if\
    \ num % i == 0\n        list << i\n        num = num / i\n        break\n    \
    \  end\n    end\n  end\n  list\nend", "\tx = 2\n\tlst = []\n\twhile x <= n\n\t\
    \tif n % x == 0\n\t\t\tlst << x\n\t\t\tn = n / x\n\t\t\tx = 1\n\t\tend\n\t\tx\
    \ += 1\n\tend\n\tlst\nend", "  (2..n).each do |i|\n    if n % i == 0\n      return\
    \ [i] + factorize(n / i)\n    end\n  end\n  [n]\nend", "  # Insert your code here\n\
    end", "    result = []\n    number = n\n    divider = 2\n    while divider <=\
    \ number\n        if number % divider == 0\n            result << divider\n  \
    \          number /= divider\n        else\n            divider += 1\n       \
    \ end\n    end\n    result\nend", "  factors = []\n  (2..n).each do |item|\n \
    \   if n % item == 0\n      n /= item\n      factors << item\n      redo\n   \
    \ end\n  end\n  factors\nend", "  factors = []\n  sqrt_n = Math.sqrt(n)\n  number\
    \ = n\n  k = 2\n  while k <= sqrt_n\n    if number % k == 0\n      factors <<\
    \ k\n      number /= k\n      sqrt_n = Math.sqrt(number)\n    else\n      k +=\
    \ 1\n    end\n  end\n  factors << number\nend", "  factors = []\n  prime_factors\
    \ = find_primes(n)\n  # iterate through primes from smallest to largest\n  i =\
    \ 0\n  until n == 1\n    # check if a prime factor is a factor of n\n    if n\
    \ % prime_factors[i] == 0\n      factors << prime_factors[i]\n      n = n / prime_factors[i]\n\
    \    else\n      i += 1\n    end\n  end\n  factors\nend", "\tif n == 1\n\t\treturn\
    \ [1]\n\tend\n\tresult = []\n\twhile n != 1\n\t\tfor i in 2..n\n\t\t\tif n % i\
    \ == 0\n\t\t\t\tresult << i\n\t\t\t\tn = n / i\n\t\t\t\tbreak\n\t\t\tend\n\t\t\
    end\n\tend\n\treturn result\nend", "  result = []\n  i = 2\n  while n > 1\n  \
    \  if n % i == 0\n      result << i\n      n /= i\n    else\n      i += 1\n  \
    \  end\n  end\n  result\nend", "  result = []\n  for i in 2..n do\n    while n\
    \ % i == 0\n      result << i\n      n /= i\n    end\n  end\n  result\nend", " \
    \ # TODO: Write your code here\n  a = []\n  for i in 2..n\n    a << i if n % i\
    \ == 0\n    n = n / i\n    i = i - 1\n    break if n == 1\n  end\n  a\nend", " \
    \ res = []\n  if n > 1\n    (2..Math.sqrt(n)).each do |x|\n      if n % x == 0\n\
    \        n /= x\n        res << x\n        res += factorize(n)\n        break\n\
    \      end\n    end\n  end\n  res\nend", "  if n == 1\n    [1]\n  else\n    prime_factors(n).flat_map\
    \ { |factor| [factor] * (n.to_s(2).count(factor.to_s(2))) }\n  end\nend", "  result\
    \ = []\n  (2..n).each do |i|\n    if n % i == 0\n      result << i\n      n /=\
    \ i\n      redo\n    end\n  end\n  result\nend", "  factors = []\n  prime_numbers\
    \ = find_prime_numbers(n)\n  while n > 1\n    prime_numbers.each do |prime_number|\n\
    \      while n % prime_number == 0\n        factors << prime_number\n        n\
    \ /= prime_number\n      end\n    end\n  end\n  factors\nend", "  factors = []\n\
    \  while n % 2 == 0\n    factors << 2\n    n /= 2\n  end\n  factor = 3\n  while\
    \ n > 1\n    while n % factor == 0\n      factors << factor\n      n /= factor\n\
    \    end\n    factor += 2\n  end\n  factors\nend", "  i = 2\n  res = []\n  while\
    \ n > 1\n    if n % i == 0\n      res << i\n      n /= i\n    else\n      i +=\
    \ 1\n    end\n  end\n  res\nend", "  result = []\n  counter = 2\n  while counter\
    \ * counter <= n\n    if n % counter == 0\n      n /= counter\n      result <<\
    \ counter\n    else\n      counter += 1\n    end\n  end\n  result << n\nend",
  "  factors = []\n  while n > 1\n    (2..n).each do |i|\n      if n % i == 0\n  \
    \      factors << i\n        n /= i\n        break\n      end\n    end\n  end\n\
    \  factors\nend", "  prime_number = 2\n  fact = []\n  while n >= prime_number\n\
    \    if n % prime_number == 0\n      fact << prime_number\n      n = n / prime_number\n\
    \    else\n      prime_number += 1\n    end\n  end\n  fact\nend", "  prime_factors\
    \ = []\n  i = 2\n  while i <= n\n    if n % i == 0\n      prime_factors << i\n\
    \      n /= i\n    else\n      i += 1\n    end\n  end\n  prime_factors\nend\n\
    p factorize(8)\np factorize(25)\np factorize(70)", "\tresult = []\n\tfactor =\
    \ 2\n\twhile n > 1\n\t\tif n % factor == 0\n\t\t\tresult << factor\n\t\t\tn /=\
    \ factor\n\t\telse\n\t\t\tfactor += 1\n\t\tend\n\tend\n\tresult\nend", "  result\
    \ = []\n  divisor = 2\n  while n > 1\n    while n % divisor == 0\n      result\
    \ << divisor\n      n /= divisor\n    end\n    divisor += 1\n  end\n  result\n\
    end", "  # add you solution here\nend", "  result = []\n  prime_divisor = 2\n\
    \  while prime_divisor <= n\n    if n % prime_divisor == 0\n      result << prime_divisor\n\
    \      n /= prime_divisor\n    else\n      prime_divisor += 1\n    end\n  end\n\
    \  result\nend", "  prime_factors = []\n  prime_factors_found = []\n  i = 2\n\
    \  while i <= n\n    if prime_factors_found.include?(i) == false\n      if n %\
    \ i == 0\n        prime_factors_found << i\n        prime_factors << i\n     \
    \   n = n / i\n        next\n      end\n    end\n    i += 1\n  end\n  prime_factors\n\
    end", "  factors = []\n  if n.even?\n    factors << 2\n    n = n / 2\n  end\n\
    \  while n != 1\n    if n.odd?\n      factors << 3\n      n = n / 3\n    else\n\
    \      factors << 2\n      n = n / 2\n    end\n  end\n  factors\nend\np factorize(8)\n\
    p factorize(25)\np factorize(70)\np factorize(4)\np factorize(18)\np factorize(81)\n\
    p factorize(256)\np factorize(1024)\np factorize(11)\np factorize(13)\np factorize(17)\n\
    p factorize(19)\np factorize(23)\np factorize(29)\np factorize(31)\np factorize(37)\n\
    p factorize(41)\np factorize(43)\np factorize(47)\np factorize(53)\np factorize(59)\n\
    p factorize(61)\np factorize(67)\np factorize(71)\np factorize(73)\np factorize(79)\n\
    p factorize(83)\np factorize(89)\np factorize(97)\np factorize(101)\np factorize(103)\n\
    p factorize(107)\np factorize(109)\np factorize(113)\np factorize(127)\np factorize(131)\n\
    p factorize(137)\np factorize(139)\np factorize(149)\np factorize(151)\np factorize(157)\n\
    p factorize(163)\np factorize(167)\np factorize(173)\np factorize(179)\np factorize(181)\n\
    p factorize(191)\np factorize(193)\np factorize(197)\np factorize(199)\np factorize(211)\n\
    p factorize(223)\np factorize(227)\np factorize(229)\np factorize(233)\np factorize(239)\n\
    p factorize(241)\np factorize(251)\np factorize(257)\np factorize(263)\np factorize(269)\n\
    p factorize(271)", "  result = []\n  factor = 2\n  while n > 1\n    while n %\
    \ factor == 0\n      result << factor\n      n /= factor\n    end\n    factor\
    \ += 1\n  end\n  result\nend", "    if n <= 0 or not n.integer?\n        raise\
    \ ArgumentError\n    end\n    res = []\n    prod = 1\n    while prod != n\n  \
    \      factor = get_factor(n)\n        prod *= factor\n        res << factor\n\
    \    end\n    res\nend", "  res = []\n  i = 2\n  while n != 1\n    if n % i ==\
    \ 0\n      res << i\n      n /= i\n    else\n      i += 1\n    end\n  end\n  res\n\
    end", "  raise 'Negative argument error' if n < 0\n  raise 'Expected integer >\
    \ 0' if n.class != Fixnum", "  arr = []\n  prime = 2\n  while n > 1\n    while\
    \ n % prime == 0\n      arr << prime\n      n /= prime\n    end\n    prime +=\
    \ 1\n  end\n  arr\nend\nfactorize(8)\nfactorize(25)\nfactorize(70)", "  factors\
    \ = []\n  i = 2\n  until n == 1\n    if n % i == 0\n      factors << i\n     \
    \ n /= i\n    else\n      i += 1\n    end\n  end\n  factors\nend", "  array =\
    \ []\n  i = 2\n  while n != 1\n    if n % i == 0\n      array << i\n      n =\
    \ n / i\n    else\n      i += 1\n    end\n  end\n  array\nend", "  Array.new(n.to_s(2).count('1'))\
    \ {|i| i=2**i; [i]*(n.to_s(i).count('1'))}.flatten\nend", "  ret = []\n  for i\
    \ in 2..n do\n    cnt = 0\n    while n % i == 0 do\n      cnt += 1\n      n /=\
    \ i\n    end\n    if cnt > 0\n      (cnt-1).times { ret << i }\n      ret << i\n\
    \    end\n  end\n  ret\nend", "  divisor = 2\n  output = []\n  while n > 1\n \
    \   while n % divisor == 0\n      output << divisor\n      n /= divisor\n    end\n\
    \    divisor += 1\n  end\n  output\nend", "  factors = []\n  prime_factors(n).each\
    \ do |number|\n    factors << number\n  end\n  factors\nend", "  result = []\n\
    \  counter = 2\n  until n == 1\n    if n % counter == 0\n      result << counter\n\
    \      n /= counter\n    else\n      counter += 1\n    end\n  end\n  result\n\
    end", "  fact = []\n  i = 2\n  while n >= i\n    if n % i == 0\n      fact <<\
    \ i\n      n = n / i\n    else\n      i += 1\n    end\n  end\n  fact\nend", " \
    \ result = []\n  while n > 1\n    (2..n).each do |i|\n      if n % i == 0\n  \
    \      result << i\n        n /= i\n        break\n      end\n    end\n  end\n\
    \  result\nend", "  factors = []\n  number = n\n  while number > 1\n    2.upto(number)\
    \ do |i|\n      if number % i == 0\n        factors << i\n        number /= i\n\
    \        break\n      end\n    end\n  end\n  factors\nend", "  p = 2\n  factors\
    \ = []\n  while p <= n\n    if n % p == 0\n      factors << p\n      n = n / p\n\
    \    else\n      p += 1\n    end\n  end\n  factors\nend", "  prime_factors = []\n\
    \  (2..Math.sqrt(n)).each do |i|\n    while n % i == 0\n      prime_factors <<\
    \ i\n      n /= i\n    end\n  end\n  prime_factors << n\nend", "  prime_divisors\
    \ = []\n  divisor = 2\n  while divisor <= n\n    if n % divisor == 0\n      prime_divisors\
    \ << divisor\n      n /= divisor\n    else\n      divisor += 1\n    end\n  end\n\
    \  prime_divisors\nend", "\tresult = []\n\tif n != 1\n\t\t(2..n).each do |i|\n\
    \t\t\tif n % i == 0\n\t\t\t\tresult << i\n\t\t\t\tn = n / i\n\t\t\t\tbreak\n\t\
    \t\tend\n\t\tend\n\t\tresult += factorize(n)\n\tend\n\tresult\nend", "  prime_factors(n).each_with_object(Hash.new(0))\
    \ do |factor, hash|\n    hash[factor] += 1\n  end.map { |key, value| [key] * value\
    \ }.flatten\nend", "    # x = []\n    # [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,130",
  "  (2..n).each_with_object([]) do |f, factors|\n    factors << f << f while (n /=\
    \ f) % 1 == 0\n  end\nend", "\t# your code goes here\nend", "  factors = []\n\
    \  divisor = 2\n  while n > 1\n    while n % divisor == 0\n      factors << divisor\n\
    \      n /= divisor\n    end\n    divisor += 1\n  end\n  factors\nend", "  arr\
    \ = []\n  factor = 2\n  while n != 1\n    while n % factor == 0\n      arr <<\
    \ factor\n      n /= factor\n    end\n    factor += 1\n  end\n  arr\nend", " \
    \ list = []\n  limit = Math.sqrt(n).to_i + 1\n  i = 2\n  while i < limit\n   \
    \ if n % i == 0\n      list << i\n      n /= i\n      limit = Math.sqrt(n).to_i\
    \ + 1\n    else\n      i += 1\n    end\n  end\n  list << n\nend", "  prime_factors\
    \ = []\n  divisor = 2\n  while n > 1\n    while n % divisor == 0\n      prime_factors\
    \ << divisor\n      n /= divisor\n    end\n    divisor += 1\n  end\n  prime_factors\n\
    end", "  factors = []\n  (2..n).each do |div|\n    break if n == 1\n    while\
    \ n % div == 0\n      factors << div\n      n /= div\n    end\n  end\n  factors\n\
    end", "  if n < 0\n    raise ArgumentError.new(\"Can't factorize negative number\"\
    )\n  end\n  if n == 0\n    raise ArgumentError.new(\"Can't factorize 0\")\n  end\n\
    \  if n == 1\n    return [1]\n  end\n  result = []\n  x = 2\n  while x <= n\n\
    \    if n % x == 0\n      result << x\n      n = n / x\n    else\n      x += 1\n\
    \    end\n  end\n  result\nend", "    factors = []\n    (2..n).each do |number|\n\
    \        while n%number == 0\n            factors << number\n            n = n/number\n\
    \        end\n    end\n    return factors\nend", "  result = []\n  i = 2\n  while\
    \ n != 1\n    if n % i == 0\n      result << i\n      n /= i\n    else\n     \
    \ i += 1\n    end\n  end\n  result\nend", "  primes = []\n  while n%2 == 0\n \
    \   primes << 2\n    n /= 2\n  end\n  i = 3\n  while i < Math.sqrt(n)\n    while\
    \ n%i == 0\n      primes << i\n      n /= i\n    end\n    i += 2\n  end\n  primes\
    \ << n if n > 2\n  primes\nend", "  number = n\n  result = []\n  current_divisor\
    \ = 2\n  while number > 1\n    if number % current_divisor == 0\n      result\
    \ << current_divisor\n      number /= current_divisor\n    else\n      current_divisor\
    \ += 1\n    end\n  end\n  result\nend", "  result = []\n  prime_factors = [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157,\
    \ 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241,\
    \ 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\
    \ 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439,\
    \ 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547,\
    \ 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643,\
    \ 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751,\
    \ 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859,\
    \ 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977,\
    \ 983, 991, 997]\n  prime_factors.each do |pf|\n    while n%pf == 0\n      result\
    \ << pf\n      n /= pf\n    end\n  end\n  result\nend", "\nend", "  result = []\n\
    \  while (n % 2 == 0)\n    result << 2\n    n /= 2\n  end\n  while (n % 3 == 0)\n\
    \    result << 3\n    n /= 3\n  end\n  while (n % 5 == 0)\n    result << 5\n \
    \   n /= 5\n  end\n  result\nend", "  list = []\n  sum = 1\n  primes = (2..Math.sqrt(n)).to_a.select\
    \ { |i| Prime.prime?(i) }\n  if Prime.prime?(n)\n    list << n\n  else\n    primes.each\
    \ do |i|\n      if n % i == 0\n        sum *= i\n        list << i\n        break\
    \ if sum == n\n      end\n    end\n    list << factorize(n / sum)\n  end\n  list.flatten\n\
    end", "  factors = []\n  f = 2\n  while n > 1\n    while n % f == 0\n      factors\
    \ << f\n      n /= f\n    end\n    f += 1\n  end\n  factors\nend", "\tlist = []\n\
    \tif n == 0\n\t\treturn [0]\n\tend\n\tif n == 1\n\t\treturn [1]\n\tend\n\tif n\
    \ > 1\n\t\ti = 2\n\t\twhile n > 1\n\t\t\tif n % i == 0\n\t\t\t\tlist << i\n\t\t\
    \t\tn = n / i\n\t\t\telse\n\t\t\t\ti += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ list\nend", "\treturn [] if n < 2\n\tprimes = []\n\twhile n > 1\n\t\tprimes\
    \ << smallest_factor(n)\n\t\tn /= smallest_factor(n)\n\tend\n\tprimes\nend", " \
    \ # TODO\nend", "  factors = []\n  i = 2\n  while n > 1\n    if n % i == 0\n \
    \     factors << i\n      n /= i\n    else\n      i += 1\n    end\n  end\n  factors\n\
    end", "  factors = []\n  i = 2\n  while n > 1\n    while n % i == 0\n      factors\
    \ << i\n      n /= i\n    end\n    i += 1\n  end\n  factors\nend", "  prime_numbers\
    \ = []\n  prime_factors = []\n  (2..n).each do |i|\n    if n % i == 0\n      if\
    \ prime_factors.include?(i)\n        prime_factors << i\n      else\n        prime_factors\
    \ << i\n        (2..i/2).each do |j|\n          if i % j == 0\n            prime_factors.pop\n\
    \            break\n          end\n        end\n      end\n    end\n  end\n  prime_factors\n\
    end", "\tif n < 2\n\t\treturn []\n\tend\n\tfactors = []\n\ti = 2\n\t\n\twhile\
    \ n > 1\n\t\tif n % i == 0\n\t\t\tfactors << i\n\t\t\tn /= i\n\t\telse\n\t\t\t\
    i += 1\n\t\tend\n\tend\n\tfactors\nend", "  prime_factors = []\n  i = 2\n  limit\
    \ = Math.sqrt(n)\n  while i <= limit\n    if n % i == 0\n      prime_factors <<\
    \ i\n      n /= i\n      limit = Math.sqrt(n)\n    else\n      i += 1\n    end\n\
    \  end\n  prime_factors << n\nend", "  factors = []\n  2.upto(n) do |num|\n  \
    \  next if n % num != 0\n    factors << num\n    return factors if num == n\n\
    \    n /= num\n    redo\n  end\nend", "    factor = Array.new\n    x = 2\n   \
    \ while n > 1\n        while n % x == 0\n            factor.push(x)\n        \
    \    n /= x\n        end\n        x += 1\n    end\n    return factor\nend", " \
    \ prime_factors = []\n  divisor = 2\n  while n > 1\n    prime_factors << divisor\
    \ if n % divisor == 0\n    n /= divisor while n % divisor == 0\n    divisor +=\
    \ 1\n  end\n  prime_factors\nend", "  factors = []\n  divisor = 2\n  while divisor\
    \ <= n\n    if n % divisor == 0\n      factors << divisor\n      n /= divisor\n\
    \    else\n      divisor += 1\n    end\n  end\n  factors\nend", "  # ...\nend",
  '  primes = (2..n).select{|x| (2..x-1).select{|y| x % y == 0}.count == 0}', "  p\
    \ = 2\n  result = []\n  while n > 1\n    if n % p == 0\n      result << p\n  \
    \    n /= p\n    else\n      p += 1\n    end\n  end\n  result\nend", "  array_of_factors\
    \ = []\n  2.upto(n) do |i|\n    if n % i == 0\n      array_of_factors << i\n \
    \     factorize(n / i)\n      break\n    end\n  end\n  array_of_factors\nend",
  "  factors = []\n  f = 2\n  while n > 1\n    if n % f == 0\n      factors << f\n\
    \      n /= f\n    else\n      f += 1\n    end\n  end\n  factors\nend", "  factors\
    \ = []\n  prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131,\
    \ 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223,\
    \ 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311,\
    \ 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409,\
    \ 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503,\
    \ 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613,\
    \ 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719,\
    \ 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827,\
    \ 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941,\
    \ 947, 953, 967, 971, 977, 983, 991, 997]\n  num = n\n  while num > 1\n    prime_numbers.each\
    \ do |factor|\n      if num % factor == 0\n        factors << factor\n       \
    \ num = num / factor\n        break\n      end\n    end\n  end\n  factors\nend\n\
    factorize(8)", "  factors = {}\n  i = 2\n  while i*i <= n\n    while n % i ==\
    \ 0\n      n /= i\n      factors[i] = factors[i].to_i + 1\n    end\n    i += 1\n\
    \  end\n  factors[n] = 1 if n > 1\n  factors.keys.sort.map{|x| x * factors[x]}\n\
    end", "  i = 2\n  result = []\n  until n == 1\n    n % i == 0 ? result << i :\
    \ i += 1\n    n /= i if n % i == 0\n  end\n  result\nend", "  result = []\n  i\
    \ = 2\n  while n > 1\n    if n % i == 0\n      result << i\n      n /= i\n   \
    \ else\n      i += 1\n    end\n  end\n  result\nend", "\t# return [1] if n ==\
    \ 1\n\t# this is incorrect\n\treturn [1] if n == 1\n\tresult = []\n\tfactors =\
    \ []\n\tf = 2\n\twhile n > 1 do\n\t\twhile n % f == 0 do\n\t\t\tfactors << f\n\
    \t\t\tn /= f\n\t\tend\n\t\tf += 1\n\tend\n\tfactors\nend", "  prime_factors =\
    \ []\n  d = 2\n  while n > 1\n    while n % d == 0\n      prime_factors << d\n\
    \      n /= d\n    end\n    d += 1\n  end\n  prime_factors\nend", "  array = []\n\
    \  for i in (2..n)\n    if n % i == 0\n      array << i\n      n = n / i\n   \
    \   break if n == 1\n      i = 1\n    end\n  end\n  array\nend\np factorize(8)\n\
    p factorize(25)\np factorize(70)", "    i = 2\n    ar = []\n    while n != 1\n\
    \        if n % i == 0\n            ar << i\n            n = n / i\n        else\n\
    \            i += 1\n        end\n    end\n    return ar\nend", "  a = []\n  i\
    \ = 2\n  while i <= n\n    if n % i == 0\n      a << i\n      n = n / i\n    \
    \  i = 2\n    else\n      i += 1\n    end\n  end\n  a\nend", "\tnumbers = []\n\
    \tdividers = (2..n).to_a\n\ti = 0\n\t\twhile (numbers.inject(:*) != n)\n\t\t\t\
    factor = dividers[i]\n\t\t\tif (n % factor == 0)\n\t\t\t\tnumbers << factor\n\t\
    \t\t\tn = n / factor\n\t\t\t\ti = 0\n\t\t\telse\n\t\t\t\ti += 1\n\t\t\tend\n\t\
    \tend\n\tp numbers\nend", "  n.prime_division.map { |factor, power| [factor] *\
    \ power }.flatten\nend", "  res = []\n  i = 2\n  while i <= n\n    res << i if\
    \ n % i == 0\n    n /= i if n % i == 0\n    i += 1\n  end\n  res\nend", "  factors\
    \ = []\n  2.upto(n) do |i|\n    while n % i == 0\n      factors << i\n      n\
    \ /= i\n    end\n  end\n  factors\nend", "  result = []\n  if n > 0\n    while\
    \ n % 2 == 0\n      result << 2\n      n /= 2\n    end\n    3.step(Math.sqrt(n).to_i,\
    \ 2) do |i|\n      while n % i == 0\n        result << i\n        n /= i\n   \
    \   end\n    end\n    result << n if n > 2\n  end\n  result\nend", "  factor_set\
    \ = []\n  i = 2\n  while i <= n\n    while n % i == 0\n      factor_set << i\n\
    \      n /= i\n    end\n    i += 1\n  end\n  factor_set\nend\np factorize(8)\n\
    p factorize(25)\np factorize(70)", "  factors = []\n  while n % 2 == 0\n    factors\
    \ << 2\n    n /= 2\n  end\n  i = 3\n  while i <= n\n    while n % i == 0\n   \
    \   factors << i\n      n /= i\n    end\n    i += 2\n  end\n  factors\nend", " \
    \ factors = []\n  divisor = 2\n  until n == 1\n    while n % divisor == 0\n  \
    \    factors << divisor\n      n /= divisor\n    end\n    divisor += 1\n  end\n\
    \  factors\nend", "  factors = []\n  curr_prime = 2\n  while n != 1\n    while\
    \ n % curr_prime == 0\n      factors << curr_prime\n      n /= curr_prime\n  \
    \  end\n    curr_prime += 1\n  end\n  factors\nend", "  factors = []\n  factor\
    \ = 2\n  until n == 1\n    if n % factor == 0\n      factors << factor\n     \
    \ n /= factor\n    else\n      factor += 1\n    end\n  end\n  factors\nend", " \
    \ prime_factors = []\n  while n != 1\n    (2..n).each do |i|\n      if n % i ==\
    \ 0\n        prime_factors << i\n        n = n / i\n        break\n      end\n\
    \    end\n  end\n  prime_factors\nend", "  if n % 2 == 0\n    return [2] + factorize(n\
    \ / 2)\n  end\n  factor = 3\n  while n > 1\n    if n % factor == 0\n      return\
    \ [factor] + factorize(n / factor)\n    end\n    factor += 2\n  end\nend", " \
    \ result = []\n  n.prime_division.each do |item|\n    result.concat([item[0]]\
    \ * item[1])\n  end\n  result\nend", "  # TODO: return list of prime factors of\
    \ given integer in the order from smallest to largest\n  list_of_factors = []\n\
    \  # n = n * n\n  for i in 2..(n / 2)\n    if n % i == 0\n      if i > 2\n   \
    \     list_of_factors << i\n      end\n    end\n  end\n  list_of_factors\nend",
  "  if n == 1\n    return [1]\n  else\n    prime_factors = []\n    i = 2\n    while\
    \ i <= n\n      if n % i == 0\n        prime_factors << i\n        n = n / i\n\
    \        i = 2\n      else\n        i += 1\n      end\n    end\n    return prime_factors\n\
    \  end\nend", "  if n == 0\n    p [0]\n  elsif n == 1\n    p [1]\n  else\n   \
    \ arr = []\n    while n % 2 == 0\n      arr << 2\n      n = n / 2\n    end\n \
    \   (3..Math.sqrt(n)).step(2) do |i|\n      while n % i == 0\n        arr << i\n\
    \        n = n / i\n      end\n    end\n    if n > 2\n      arr << n\n    end\n\
    \    arr\n  end\nend", "    i = 2\n    factors = []\n    while i <= n\n      \
    \  while n % i == 0\n            factors << i\n            n /= i\n        end\n\
    \        i += 1\n    end\n    factors\nend", "  factors = []\n  2.upto(n) do |factor|\n\
    \    while n % factor == 0\n      factors << factor\n      n /= factor\n    end\n\
    \  end\n  factors\nend", "  factor_list = []\n  num = n\n  prime_list = prime_list(num)\n\
    \  p prime_list\n  #   prime_list.each do |x|\n  #       while num % x == 0\n\
    \  #         factor_list << x\n  #         num = num / x\n  #         end\n  #\
    \       end\n  # factor_list\n  # end\n  (2..num).each do |x|\n    while num %\
    \ x == 0\n      factor_list << x\n      num = num / x\n    end\n  end\n  factor_list\n\
    end", "  res = []\n  cur = 2\n  while cur <= n\n    res << cur if n % cur == 0\n\
    \    n /= cur if n % cur == 0\n    cur += 1\n  end\n  res\nend", "  factors =\
    \ []\n  until n == 1\n    (2..n).each do |i|\n      if n % i == 0\n        factors\
    \ << i\n        n /= i\n        break\n      end\n    end\n  end\n  factors\n\
    end", "  result = []\n  a = n\n  b = 2\n  while a > 1\n    if a % b == 0\n   \
    \   result << b\n      a = a / b\n    else\n      b += 1\n    end\n  end\n  result\n\
    end", "  i = 2\n  a = []\n  while i <= n\n    if n % i == 0\n      a << i\n  \
    \    n = n / i\n      i = 2\n    else\n      i += 1\n    end\n  end\n  return\
    \ a\nend", "  arr = []\n  factors = []\n  i = 2\n  while n > 1\n    while n %\
    \ i == 0\n      factors << i\n      n /= i\n    end\n    i += 1\n  end\n  factors\n\
    end", "  if n == 1\n    return []\n  end\n  div = 2\n  factors = []\n  while div\
    \ <= n\n    while n % div == 0\n      factors << div\n      n /= div\n    end\n\
    \    div += 1\n  end\n  factors\nend", "  a = []\n  while n % 2 == 0\n    a <<\
    \ 2\n    n /= 2\n  end\n  (3..n).step(2) do |i|\n    while n % i == 0\n      a\
    \ << i\n      n /= i\n    end\n  end\n  a\nend", "  primes = []\n  i = 2\n  while\
    \ n > 1\n    if n % i == 0\n      primes << i\n      n /= i\n    else\n      i\
    \ += 1\n    end\n  end\n  primes\nend", "  if n.even?\n    (n/2).downto(2).each\
    \ { |x| return [x, x] if x.even? && n % x == 0 }\n  else\n    (n/2).downto(2).each\
    \ { |x| return [x, x] if n % x == 0 }\n  end\nend", "  a = []\n  b = 2\n  while\
    \ b <= n\n    if n % b == 0\n      a << b\n      n = n / b\n    else\n      b\
    \ += 1\n    end\n  end\n  a\nend", "  res = []\n  i = 2\n  while n > 1\n    if\
    \ n % i == 0\n      res << i\n      n /= i\n    else\n      i += 1\n    end\n\
    \  end\n  res\nend", "  factor_list = []\n  (2..n).each do |i|\n    if n % i ==\
    \ 0\n      factor_list << i\n      n = n / i\n      redo\n    end\n  end\n  factor_list\n\
    end", "  res = []\n  a = 2\n  while n > 1\n    res << a if n % a == 0\n    n /=\
    \ a while n % a == 0\n    a += 1\n  end\n  res\nend", "  prime_list = prime_list_upto(n)\n\
    \  factor_list = []\n  p = 0\n  while n > 1\n    # p \"n = #{n}\"\n    if n %\
    \ prime_list[p] == 0\n      factor_list << prime_list[p]\n      n = n / prime_list[p]\n\
    \    else\n      p += 1\n    end\n  end\n  return factor_list\nend", "  res =\
    \ []\n  i = 2\n  while n != 1\n    if n % i == 0\n      res << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  res\nend", "  # create empty list to\
    \ store factors\n  factors = []\n  # divide by every prime number less than n\n\
    \  # add each factor to list\n  # repeat with n/factor\n  i = 2\n  while i <=\
    \ n\n    if is_prime?(i)\n      if n % i == 0\n        factors << i\n        n\
    \ = n / i\n        i = 1\n      end\n    end\n    i += 1\n  end\n  factors\nend",
  "  # this function takes an integer, returns the list of the integer's prime factors\n\
    \  # in ascending order, each integer repeated a number of times equal to its\
    \ power in the factorization.\n  # e.g. 8 -> [2, 2, 2] as 8 = 2^3\n  #      25\
    \ -> [5, 5] as 25 = 5^2\n  #      70 -> [2, 5, 7] as 70 = 2*5*7\n  # hints:\n\
    \  #   - https://ruby-doc.org/core-2.5.1/Integer.html#method-i-prime_division\n\
    \  #   - https://ruby-doc.org/core-2.5.1/Array.html#method-i-flatten\n  #   -\
    \ https://ruby-doc.org/core-2.5.1/Array.html#method-i-join\n  #   - https://ruby-doc.org/core-2.5.1/String.html#method-i-to_i\n\
    \  #   - https://ruby-doc.org/core-2.5.1/Array.html#method-i-map\n  #   - https://ruby-doc.org/core-2.5.1/Array.html#method-i-each\n\
    \  #   - https://ruby-doc.org/core-2.5.1/Integer.html#method-i-times\nend", " \
    \ result = []\n  check_num = 2\n  while check_num * check_num <= n\n    while\
    \ n % check_num == 0\n      result << check_num\n      n /= check_num\n    end\n\
    \    check_num += 1\n  end\n  result << n\nend", "  factors = []\n  x = 2\n  while\
    \ x < n \n    if n % x == 0\n      factors << x\n      n = n / x\n    else\n \
    \     x += 1\n    end\n  end\n  factors << n\nend", "  factors = []\n  current_number\
    \ = n\n  (2..n).each do |i|\n    while current_number % i == 0\n      factors\
    \ << i\n      current_number /= i\n    end\n  end\n  factors\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
