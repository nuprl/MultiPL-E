name: HumanEval_30_get_positive
language: rb
prompt: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2, -4,\
  \ 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
  # [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_positive\n\
  \    candidate = method(:get_positive)\n    assert_equal([4, 5, 6], candidate.call([-1,\
  \ -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3, 9, 123, 1], candidate.call([5,\
  \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([], candidate.call([-1,\
  \ -2]))\n    assert_equal([], candidate.call([]))\n  end\nend\n"
completions: ["  return l.select { |num| num > 0 }\nend", "  l.select { |x| x > 0\
    \ }\nend", "    return l.select { |num| num > 0 }\nend", "  return l.select {\
    \ |x| x > 0 }\nend", "    return l.select { |num| num > 0 }\nend", "    return\
    \ l.select { |num| num > 0 }\nend", "  l.select{|n| n > 0}\nend", "\nend", " \
    \ new_list = []\n  l.each do |num|\n    if num > 0\n      new_list << num\n  \
    \  end\n  end\n  return new_list\nend", "  # your code goes here\nend", "    l.select{|num|\
    \ num > 0}\nend", "  return l.select { |x| x > 0 }\nend", "    l.select { |number|\
    \ number > 0 }\nend", "  l.select { |x| x > 0 }\nend", "\tl.delete_if{|x| x<0}\n\
    end", "  l.select { |n| n > 0 }\nend", "\nend", "  l.select { |i| i > 0 }\nend",
  "  l.select{|n| n>0}\nend", "\t# write code here\n\treturn l.select{|x| x > 0}\n\
    end", "\t@num = 0\n\t@new_list = []\n\twhile @num < l.length\n\t\tif l[@num] >\
    \ 0\n\t\t\t@new_list << l[@num]\n\t\tend\n\t\t@num += 1\n\tend\n\treturn @new_list\n\
    end", "  positives = []\n  l.each do |num|\n    if num > 0\n      positives <<\
    \ num\n    end\n  end\n  return positives\nend", "  l.find_all { |x| x > 0 }\n\
    end", "  #TODO\nend", "\nend", "  # your code here\nend", "  # TODO: Return only\
    \ positive numbers in the list\n  return l.find_all { |x| x > 0 }\nend", "  positives\
    \ = []\n  l.each do |number|\n    if number > 0\n      positives << number\n \
    \   end\n  end\n  positives\nend", "    new_l = []\n    l.each do |num|\n    \
    \    if num > 0\n            new_l << num\n        end\n    end\n    return new_l\n\
    end", "  list = []\n  l.each do |x|\n    if x > 0\n      list << x\n    end\n\
    \  end\n  return list\nend", "  l.select { |number| number > 0 }\nend", "  l.reject\
    \ { |num| num < 0 }\nend", "  l.select do |e|\n    e > 0\n  end\nend", "    return\
    \ l.select { |n| n > 0 }\nend", "  l.select { |n| n > 0 }\nend", "  l.reject {\
    \ |n| n < 0 }\nend", "\tl.select {|n| n > 0}\nend", "    list = []\n    l.each\
    \ { |i| list << i if i > 0 }\n    return list\nend", "  # l.select do |num|\n\
    \  #   num > 0\n  # end\n  l.select { |num| num > 0 }\nend", end, "  # YOUR CODE\
    \ HERE\nend", "\tl.delete_if {|x| x < 0}\nend", "  positives = []\n  l.each do\
    \ |num|\n    if num > 0\n      positives << num\n    end\n  end\n  return positives\n\
    end", "  # l.select { |num| num > 0 }\n  l.reject { |num| num < 0 }\nend", " \
    \ l.select{|num| num > 0}\nend", "\t# return l.select { |n| n > 0 }\n\tl.select\
    \ { |n| n.positive? }\nend", "\tnew_array = []\n\tl.each do |item|\n\t\tif item\
    \ >= 0\n\t\t\tnew_array << item\n\t\tend\n\tend\n\treturn new_array\nend", end,
  "    new_list = []\n    l.each { |x| new_list << x if x > 0 }\n    new_list\nend",
  end, "    l.select do |item|\n      item > 0\n    end\nend", "  # Your code here\n\
    end", "  l.select { |x| x > 0 }\nend", "  l.select { |i| i > 0 }\nend", "  l.select\
    \ { |n| n > 0 }\nend", "    arr = []\n    l.each { |num| num >= 0 ? arr << num\
    \ : num }\n    return arr\nend", "  l.select { |x| x > 0 }\nend", "  return l.find_all\
    \ { |x| x > 0 }\nend", "  positive_list = []\n  l.each do |num|\n    if num >\
    \ 0\n      positive_list << num\n    end\n  end\n  return positive_list\nend",
  "    pos = []\n    l.each { |i| pos << i if i > 0 }\n    pos\nend", "  # set variable\
    \ for the return array\n  pos_array = []\n  # iterate over the array\n  l.each\
    \ do |num|\n    # if number is greater than 0 add it to the pos_array\n    if\
    \ num > 0\n      pos_array << num\n    end\n  end\n  # return pos_array\n  pos_array\n\
    end", "  return l.find_all{|e| e > 0}\nend", "  l.select { |n| n > 0 }\nend",
  "\tl.delete_if {|i| i < 0}\nend", "\nend", "\nend", "\tp = []\n\tfor num in l\n\t\
    \tif num > 0\n\t\t\tp.push(num)\n\t\tend\n\tend\n\treturn p\nend", "  l.select\
    \ { |number| number > 0 }\nend", "  l.find_all { |n| n > 0 }\nend", end, "  new_list\
    \ = []\n  l.each do |element|\n    if element > 0\n      new_list << element\n\
    \    end\n  end\n  new_list\nend", "\tp_list = []\n\tl.each do |num|\n\t\tif num\
    \ > 0\n\t\t\tp_list << num\n\t\tend\n\tend\n\treturn p_list\nend", "  l.select\
    \ { |i| i > 0 }\nend", "  return l.select{|n| n > 0}\nend", "  l.select { |num|\
    \ num > 0 }\nend", "  # your code here\nend", "  return l.select{|x| x > 0}\n\
    end", "  l.select{|x| x > 0}\nend", "  positive_array = []\n  l.each do |num|\n\
    \    if num > 0\n      positive_array << num\n    end\n  end\n  positive_array\n\
    end", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select\
    \ { |num| num.positive? }\nend", "    l.select{|x| x > 0}\nend", "  l.select {\
    \ |number| number > 0 }\nend", "  l.select do |num|\n    num > 0\n  end\nend",
  "  positive_numbers = []\n  l.each do |n|\n    if n > 0\n      positive_numbers\
    \ << n\n    end\n  end\n  return positive_numbers\nend", "  l.select { |v| v >\
    \ 0 }\nend", "  #l.each {|x| x if x > 0 }\n  #puts l.select {|x| x if x > 0 }\n\
    \  #puts l.select {|x| x > 0 }\n  puts l.select {|x| x.positive? }\nend\nget_positive([-1,\
    \ 2, -4, 5, 6])\nget_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])", "  #\
    \ your code here\nend", "  l.delete_if { |e| e < 0 }\nend", "    new_list = []\n\
    \    for i in l\n        if i > 0\n            new_list.push(i)\n        end\n\
    \    end\n    return new_list\nend", "  l.select { |x| x > 0 }\nend", "  l.select\
    \ do |e|\n    e > 0\n  end\nend", "\nend", "    l.select{|i| i > 0}\nend", " \
    \ return l.select{|x| x > 0}\nend", "  # l.each.select { |x| x >= 0 }\n  l.each.select(&:positive?)\n\
    end", "    l.select { |x| x > 0 }\nend", "  l.select{|num| num > 0}\nend", " \
    \   l.select do |n|\n        n > 0\n    end\nend", "  # CODE HERE\nend", "  #\
    \ your code here\nend", "\tl.select {|num| num > 0}\nend", "  l.select { |i| i\
    \ > 0 }\nend", "\nend", "  return l.select { |x| x > 0 }\nend", "  # l.reject\
    \ { |n| n < 0 }\n  l.select { |n| n > 0 }\nend", "  result = []\n  l.each do |n|\n\
    \    if n > 0\n      result << n\n    end\n  end\n  result\nend", "  # your code\
    \ here\nend", "  results = []\n  l.each do |num|\n    if num > 0\n      results\
    \ << num\n    end\n  end\n  results\nend", "  l.select do |num|\n    num > 0\n\
    \  end\nend", "  l.select{|num| num > 0}\nend", "  l.select{|i| i > 0}\nend",
  "    l.select { |x| x > 0 }\nend", "  l.select{|i| i > 0}\nend", "  l.select { |x|\
    \ x > 0 }\nend", "  # l.each.select { |num| num > 0 }\n  l.select { |num| num\
    \ > 0 }\nend", "  p l.select{|n| n >= 0}\nend", "\tpos = []\n\tl.each do |i|\n\
    \t\tif i > 0\n\t\t\tpos << i\n\t\tend\n\tend\n\treturn pos\nend", "\nend", " \
    \ # TODO: Return only positive numbers in the list.\n  new_array = []\n  l.each\
    \ do |e|\n    if e > 0\n      new_array << e\n    end\n  end\n  return new_array\n\
    end", "  # if l.is_a? Array\n  #   l.select { |num| num.is_a? Integer && num >\
    \ 0 }\n  # end\n  l.select { |num| num.is_a? Integer && num > 0 } if l.is_a? Array\n\
    end", "  l.select { |x| x > 0 }\nend", "  # TODO: Return only the positive values\
    \ in the given list\n  l.select { |i| i > 0 }\nend", "  l.select do |i|\n    i\
    \ > 0\n  end\nend", "\tl.select {|n| n > 0}\nend", "  # Your code here\nend",
  "  # your code goes here\n  pos = []\n  for num in l\n    if num > 0\n      pos.push(num)\n\
    \    end\n  end\n  return pos\nend", "    l.select{|num| num > 0}\nend", "  l.select{|i|\
    \ i > 0}\nend", "  l.select{|num| num > 0}\nend", "  # l.select{|item| item >\
    \ 0}\n  l.find_all{|item| item > 0}\nend", "  l.select { |i| i > 0 }\nend", "\t\
    positive_numbers = []\n\tl.each do |number|\n\t\tif number > 0\n\t\t\tpositive_numbers\
    \ << number\n\t\tend\n\tend\n\tpositive_numbers\nend", "  # TODO: return only\
    \ positive numbers\n  return l.delete_if { |n| n < 0 }\nend", "\nend", "  l.select\
    \ { |x| x > 0 }\nend", "  # This is a **good** example of using the built-in library!\n\
    \  l.select { |x| x > 0 }\nend", "  # your code here\nend", "  l.select{|a| a\
    \ > 0}\nend", end, "\tp = []\n\tl.each do |item|\n\t\tif item > 0\n\t\t\tp <<\
    \ item\n\t\tend\n\tend\n\treturn p\nend", "    new_list = []\n    l.each do |number|\n\
    \        if number > 0\n            new_list << number\n        end\n    end\n\
    \    return new_list\nend\nprint get_positive([-1, 2, -4, 5, 6])\nprint get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])", "\tl.select {|x| x > 0}\nend", "  l.select\
    \ { |item| item > 0 }\nend", "  l.select { |e| e > 0 }\nend", "  l.select { |number|\
    \ number > 0 }\nend", "  return l.select { |e| e > 0 }\nend", "\tresult = []\n\
    \t# for each item in the list\n\tl.each do |item|\n\t\t# if it's a positive item,\
    \ add it to the result list\n\t\tif item > 0\n\t\t\tresult << item\n\t\tend\n\t\
    end\n\t# return the resulting list\n\treturn result\nend", "\nend", "  l.select\
    \ do |num|\n    num > 0\n  end\nend", "  # YOUR CODE HERE\nend", "  l.select {\
    \ |x| x > 0 }\nend", "  l.select { |x| x >= 0 }\nend", "    arr = []\n    l.each\
    \ { |n| if n > 0 then arr.push(n) end }\n    return arr\nend", "    l.select {\
    \ |x| x >= 0 }\nend", "    return l.select { |number| number > 0 }\nend", "  \
    \  l.select { |i| i > 0 }\nend", "  # code goes here\nend", "  l.select { |i|\
    \ i > 0 }\nend", "  l.reject{|x| x<0}\nend", "  new_l = []\n  for i in l\n   \
    \ if i > 0\n      new_l << i\n    end\n  end\n  return new_l\nend", "\treturn\
    \ l.select { |x| x > 0 }\nend", "  r = []\n  l.each do |n|\n    if n >= 0\n  \
    \    r << n\n    end\n  end\n  r\nend", "  l.select { |x| x > 0 }\nend", end,
  "    positives = []\n    l.each do |i|\n        if i > 0\n            positives\
    \ << i\n        end\n    end\n    return positives\nend\nputs get_positive([-1,\
    \ 2, -4, 5, 6])\nputs get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])",
  "  l.select { |num| num > 0 }\nend", "\tl.select {|n| n > 0}\nend", "  l.select\
    \ do |element|\n    element > 0\n  end\nend", "  l.select { |num| num > 0 }\n\
    end", "  l.select { |num| num > 0 }\nend", "\tresult = []\n\tfor i in l\n\t\t\
    if i > 0\n\t\t\tresult << i\n\t\tend\n\tend\n\treturn result\nend", "  # TODO:\
    \ return only the positive numbers in l\n  l.select { |n| n >= 0 }\nend", "  #\
    \ l.select { |x| x > 0 }\n  l.find_all { |x| x > 0 }\nend", "\tl.select {|x| x\
    \ > 0}\nend", "  l.select{|x| x > 0}\nend", "\treturn l.select{|i| i > 0}\nend",
  "  # put your code here\nend", "    l.select { |el| el > 0 }\nend", "\tpos = []\n\
    \tl.each do |n|\n\t\tif n > 0\n\t\t\tpos << n\n\t\tend\n\tend\n\tpos\nend", " \
    \ l.select { |x| x > 0 }\nend", "  # select returns a new array containing all\
    \ elements of enum for which the given block returns a true value.\n  l.select\
    \ { |number| number > 0 }\nend", "  l.select { |n| n > 0 }\nend", "  l.select\
    \ { |n| n > 0 }\nend", "  l.select{|i| i > 0}\nend", "  l.reject { |num| num <\
    \ 0 }\nend", "  #write your code here\nend", end, "  l.select{|n| n > 0}\nend",
  "  l.select { |x| x > 0 }\nend", "    l.select { |num| num > 0 }\nend", "\tl.select\
    \ {|x| x > 0}\nend", "  l.select{|n| n > 0}\nend", "  # code here\nend", "  l.select{|i|\
    \ i > 0}\nend", "  l.select { |num| num > 0 }\nend", "    # your code here\nend",
  "  # your code here\nend", "  return l.select { |i| i > 0 }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
