name: HumanEval_14_all_prefixes
language: rb
prompt: "# Return list of all prefixes from shortest to longest of the input string\n\
  # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_all_prefixes\n\
  \    candidate = method(:all_prefixes)\n    assert_equal([], candidate.call(\"\"\
  ))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"],\
  \ candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"WW\", \"WWW\"], candidate.call(\"\
  WWW\"))\n  end\nend\n"
completions: ["  index = 0\n  array = []\n  while index < string.length\n    array\
    \ << string[0..index]\n    index += 1\n  end\n  array\nend", "  result = []\n\
    \  string.length.times do |i|\n    result << string[0..i]\n  end\n  result\nend",
  "  (1..string.length).inject([]) { |memo, i| memo << string[0...i] }\nend", "  prefixes\
    \ = []\n  (0..string.length).each do |i|\n    prefixes << string[0..i]\n  end\n\
    \  prefixes\nend", "  prefixes = []\n  string.length.times do |i|\n    prefixes\
    \ << string[0..i]\n  end\n  prefixes\nend", "  length = string.length\n  prefixes\
    \ = []\n  for i in 1..length\n    prefixes << string[0, i]\n  end\n  prefixes\n\
    end", "  n = string.length\n  (1..n).map { |i| string[0, i] }\nend", "  (1..string.length).collect\
    \ { |i| string[0...i] }\nend", "  prefixes = []\n  for i in 1..string.length\n\
    \    prefixes << string[0...i]\n  end\n  prefixes\nend", "  max_index = string.length\
    \ - 1\n  prefixes = []\n  (0..max_index).each do |index|\n    prefixes << string[0..index]\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  (0..string.length-1).each do |i|\n\
    \    prefixes << string[0..i]\n  end\n  prefixes\nend", "  result = []\n  string.size.times\
    \ do |i|\n    result << string[0..i]\n  end\n  result\nend", "\treturn string.size.times.map{|i|\
    \ string[0..i]}\nend", "  string.chars.each_with_object([]) do |_, output|\n \
    \   output << string.dup\n    string.chop!\n  end\nend", "  prefixes = []\n  (1..string.length).each\
    \ do |i|\n    prefixes << string[0...i]\n  end\n  prefixes\nend", "  prefixes\
    \ = []\n  (0..string.length).each do |i|\n    prefixes << string[0..i]\n  end\n\
    \  prefixes\nend", "    prefixes = []\n    string.chars.each_with_index do |char,\
    \ i|\n        prefixes << string[0..i]\n    end\n    prefixes\nend", "\toutput\
    \ = []\n\tstring.each_char.with_index do |char, i|\n\t\toutput << string[0..i]\n\
    \tend\n\toutput\nend", "  (1..string.length).map{|n| string[0...n]}\nend", " \
    \ prefixes = []\n  string.size.times do |i|\n    prefixes << string[0..i]\n  end\n\
    \  prefixes\nend", "\tresult = []\n\tsize = string.size\n\tsize.times do |i|\n\
    \t\tresult << string[0..i]\n\tend\n\tresult\nend", "  result = []\n  (1..string.length).each\
    \ do |i|\n    result << string[0..i-1]\n  end\n  result\nend", "  arr = []\n \
    \ until string.empty?\n    arr << string\n    string = string[0...-1]\n  end\n\
    \  arr\nend", "  prefixes = []\n  0.upto(string.length-1) do |i|\n    prefixes\
    \ << string[0..i]\n  end\n  prefixes\nend", "    prefixes = []\n    (0...string.length).each\
    \ do |i|\n        prefixes << string[0..i]\n    end\n    prefixes\nend", "  (1..string.length).map{|n|\
    \ string[0...n]}\nend", "  string.size.times.map { |i| string[0..i] }\nend", " \
    \ (1..string.length).map { |l| string[0...l] }\nend", "  output = []\n  string.each_char.with_index\
    \ do |char, i|\n    output << string[0..i]\n  end\n  output\nend", "  [string].tap\
    \ { |result|\n    (1...string.length).each { |i|\n      result << string[0...i]\n\
    \    }\n  }\nend", "  (1..string.length).map { |i| string[0, i] }\nend", "  (1..string.length).map\
    \ { |n| string[0...n] }\nend", "  (1..string.length).map { |i| string[0, i] }\n\
    end", "  (1..string.length).map { |n| string[0...n] }\nend", "  prefixes = []\n\
    \  0.upto(string.length - 1) do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\n\
    end", "\tarr = []\n\tstring.each_char.with_index do |c,i|\n\t\tarr << string[0..i]\n\
    \tend\n\tarr\nend", "  (1..string.length).map { |i| string[0...i] }\nend", "\t\
    prefixes = []\n\tsize = 1\n\twhile size <= string.length\n\t\tprefixes << string[0,\
    \ size]\n\t\tsize += 1\n\tend\n\tprefixes\nend", "  result = []\n  (1..string.length).each\
    \ do |i|\n    result << string[0..i-1]\n  end\n  result\nend", "    all_prefixes\
    \ = []\n    (0...string.length).each do |i|\n        all_prefixes << string[0..i]\n\
    \    end\n    all_prefixes\nend", "  (1..string.length).map { |n| string[0...n]\
    \ }\nend", "  prefixes = []\n  string.length.times do |i|\n    prefixes << string[0..i]\n\
    \  end\n  prefixes\nend", "\tprefixes = []\n\t(1..string.length).each do |i|\n\
    \t\tprefixes << string[0...i]\n\tend\n\tprefixes\nend", "  string.chars.map.with_index\
    \ { |_, i| string[0..i] }\nend", "  string.chars.each_index.map { |i| string[0..i]\
    \ }\nend", "  string.chars.map.with_index { |_, index| string[0..index] }\nend",
  "  # TODO\nend", "    result = []\n    string.chars.each_with_index do |char, i|\n\
    \        result << string[0..i]\n    end\n    result\nend", "    prefixes = []\n\
    \    (1..string.length).each do |prefix_length|\n        prefixes << string[0...prefix_length]\n\
    \    end\n    prefixes\nend", "    list = []\n    string.each_char.with_index\
    \ do |char, i|\n        list << string[0..i]\n    end\n    list\nend", "  if string.length\
    \ == 1\n    return [string]\n  else\n    return all_prefixes(string[0...-1]) +\
    \ [string]\n  end\nend", "  prefixes = []\n  string.length.times do |i|\n    prefixes\
    \ << string[0..i]\n  end\n  prefixes\nend", "\tprefixes = []\n\t0.upto(string.length\
    \ - 1) do |idx|\n\t\tprefixes << string[0..idx]\n\tend\n\tprefixes\nend", "  (1..string.length).map\
    \ { |len| string[0...len] }\nend", "  # Use a helper function to generate prefixes.\n\
    \  def generate_prefixes(string, index, prefixes)\n    prefixes << string[0..index]\n\
    \    index += 1\n    generate_prefixes(string, index, prefixes) if index < string.length\n\
    \  end", "    # prepend each letter to the list of all prefixes of the remaining\
    \ string\n    if string.empty? \n        return []\n    else\n        return all_prefixes(string[0...-1])\
    \ + [string]\n    end\nend", "  string.size.times.with_object([]) do |i, prefixes|\n\
    \    prefixes << string[0..i]\n  end\nend", "  n = string.length\n  result = []\n\
    \  (1..n).each do |i|\n    result << string[0...i]\n  end\n  result\nend", " \
    \   if string.length == 0\n        return []\n    else\n        return all_prefixes(string[0...-1])\
    \ + [string]\n    end\nend", "  list = []\n  (1..string.length).each do |x|\n\
    \    list << string[0..x-1]\n  end\n  list\nend", "\tprefixes = []\n\t(1..string.length).each\
    \ do |i|\n\t\tprefixes << string[0..i-1]\n\tend\n\tprefixes\nend", "  string.length.times.map\
    \ { |i| string[0..i] }\nend", "  # Put your code here.\n  result = []\n  word\
    \ = ''\n  string.each_char do |letter|\n    word += letter\n    result << word\n\
    \  end\n  result\nend", "  results = []\n  counter = 0\n  while counter < string.length\n\
    \    results << string[0..counter]\n    counter += 1\n  end\n  results\nend",
  "  result = []\n  (0...string.length).each do |i|\n    result << string[0..i]\n\
    \  end\n  result\nend", "  result = []\n  string.length.times do |n|\n    result\
    \ << string[0..n]\n  end\n  result\nend", "  # Your code here\nend", "\tresult\
    \ = []\n\t(1..string.length).each do |i|\n\t\tresult << string[0...i]\n\tend\n\
    \tresult\nend", "    prefixes = []\n    string.length.times do |i|\n        prefixes\
    \ << string[0..i]\n    end\n    prefixes\nend", "\tresults = []\n\ti = 0\n\twhile\
    \ i < string.length\n\t\tresults << string[0..i]\n\t\ti += 1\n\tend\n\tresults\n\
    end", "  prefixes = []\n  0.upto(string.length - 1) do |i|\n    prefixes << string[0..i]\n\
    \  end\n  prefixes\nend", "\tresults = []\n\t(1..string.length).each do |i|\n\t\
    \tresults << string[0...i]\n\tend\n\tresults\nend", "  (1..string.length).collect\
    \ { |n| string[0, n] }\nend", "  prefixes = []\n  prefixes << string[0]\n  prefixes\
    \ << string[0..1]\n  prefixes << string[0..2]\n  prefixes\nend", "  # Create empty\
    \ list to store prefixes\n  prefixes = []\n  # Loop over every letter in the string\n\
    \  string.length.times do |i|\n    # Append the letter to prefixes\n    prefixes\
    \ << string[0..i]\n  end\n  # Return prefixes\n  prefixes\nend", "  string.chars.each_with_object([])\
    \ do |char, prefixes|\n    if prefixes.empty?\n      prefixes << char\n    else\n\
    \      prefixes << prefixes.last + char\n    end\n  end\nend", "  prefixes = []\n\
    \  length = string.length\n  i = 0\n  while i < length\n    prefixes << string[0..i]\n\
    \    i += 1\n  end\n  prefixes\nend", "  prefixes = []\n  (1..string.length).each\
    \ do |len|\n    prefixes << string[0, len]\n  end\n  prefixes\nend", "  1.upto(string.length).map\
    \ { |i| string[0, i] }\nend", "\treturn [string] if string.length <= 1\n\t\n\t\
    all_prefixes(string[0...-1]) << string\nend", "    output = []\n    1.upto(string.length)\
    \ do |i|\n        output << string[0...i]\n    end\n    output\nend", "  string.size.times.map{|i|\
    \ string[0..i]}\nend", "  prefixes = []\n  (1..string.length).each do |num|\n\
    \    prefixes << string[0..num-1]\n  end\n  prefixes\nend", "  (1..string.length).map\
    \ { |i| string[0, i] }\nend", "  (1..string.length).map { |n| string[0...n] }\n\
    end", "  (1..string.length).map { |n| string[0, n] }\nend", "  (1..string.length).map\
    \ { |i| string[0...i] }\nend", "  prefixes = []\n  1.upto(string.length) do |i|\n\
    \    prefixes << string[0...i]\n  end\n  prefixes\nend", "  # YOUR CODE HERE\n\
    \  num = 1\n  prefixes = []\n  while num <= string.length\n    prefixes << string[0...num]\n\
    \    num += 1\n  end\n  prefixes\nend", "  (1..string.length).inject([]) do |prefixes,\
    \ len|\n    prefixes << string[0, len]\n  end\nend", "  prefixes = []\n  string.size.times\
    \ do |index|\n    prefixes << string[0..index]\n  end\n  prefixes\nend", "\treturn\
    \ [] if string.empty?\n\treturn all_prefixes(string[0...-1]) << string\nend",
  "  list = []\n  (1..string.length).each do |l|\n    list << string[0...l]\n  end\n\
    \  list\nend", "  (1..string.length).map{|n| string[0...n]}\nend", "  res = []\n\
    \  1.upto(string.length) do |i|\n    res << string[0, i]\n  end\n  res\nend",
  "\tresults = []\n\tfor i in 0..string.length-1\n\t\tresults << string[0..i]\n\t\
    end\n\tresults\nend", "    string.chars.map.with_index do |char, index|\n    \
    \    string[0..index]\n    end\nend", "  result = []\n  (0...string.length).each\
    \ do |i|\n    result << string[0..i]\n  end\n  result\nend", "  prefixes = []\n\
    \  while string.length > 0\n    prefixes << string\n    string = string[0...-1]\n\
    \  end\n  prefixes\nend", "  (1..string.length).map { |l| string[0...l] }\nend",
  "  (1..string.length).map { |x| string[0, x] }\nend", "  (1..string.length).map\
    \ { |x| string[0, x] }\nend", "  string.chars.map.with_index { |_, i| string[0..i]\
    \ }\nend", "  # raise NotImplementedError\n  array = []\n  string.each_char.with_index\
    \ do |char, i|\n    array << string[0..i]\n  end\n  array\nend", "  out = []\n\
    \  string.length.times do |i|\n    out << string[0..i]\n  end\n  out\nend", "\t\
    all_prefixes = []\n\t(1..string.length).each do |i|\n\t\tall_prefixes << string[0..i-1]\n\
    \tend\n\tall_prefixes\nend", "  prefixes = []\n  string.chars.each_with_index\
    \ do |letter, i|\n    prefixes << string[0..i]\n  end\n  prefixes\nend", "  (1..string.length).map\
    \ { |n| string[0, n] }\nend", "  (1..string.length).map { |i| string[0...i] }\n\
    end", "\t#Base Case if string is empty return empty list\n\tif string.empty?\n\
    \t\t[]\n\telse\n\t\t[string] + all_prefixes(string[0...-1])\n\tend\nend", "  \
    \  (0...string.length).map { |i| string[0..i] }\nend", "  prefixes = []\n  string.size.times\
    \ do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\nend", "  (1..string.length).map\
    \ { |i| string[0...i] }\nend", "  prefixes = []\n  counter = 0\n  while counter\
    \ < string.length\n    prefixes << string[0..counter]\n    counter += 1\n  end\n\
    \  prefixes\nend", "  prefixes = []\n  (1..string.length).each do |i|\n    prefixes\
    \ << string[0...i]\n  end\n  prefixes\nend", "  (1..string.length).map { |n| string[0,\
    \ n] }\nend", "  if string.empty?\n    string\n  else\n    all_prefixes(string[0..-2])\
    \ << string\n  end\nend", "  result = []\n  (1..string.length).each do |i|\n \
    \   result << string[0...i]\n  end\n  result\nend", "  1.upto(string.length).map\
    \ { |i| string[0...i] }\nend", "  (1..string.length).map{|len| string[0, len]}\n\
    end", "    prefixes = []\n    string.length.times do |i|\n        prefixes <<\
    \ string[0..i]\n    end\n    prefixes\nend", "  prefixes = []\n  0.upto(string.length-1)\
    \ do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\nend", "  result = []\n\
    \  0.upto(string.length - 1) do |idx|\n    result << string[0..idx]\n  end\n \
    \ result\nend", "  prefixes = []\n  0.upto(string.length - 1) do |i|\n    prefixes\
    \ << string[0..i]\n  end\n  prefixes\nend", "  # 1) Build an empty hash\n  # 2)\
    \ For every item, see if it's already in the hash\n  # 2.1) If yes, don't do anything\n\
    \  # 2.2) If no, add the word to the hash, then add a random number to the word\
    \ and add that to the hash\n  # 3) Return all keys in the hash, excluding those\
    \ with random numbers at the end\n  hash = {}\n  string.chars.each_index do |i|\n\
    \    prefix = string[0..i]\n    if hash[prefix]\n      hash[prefix + Random.rand(10)]\
    \ = 1\n    else\n      hash[prefix] = 1\n    end\n  end\n  hash.keys.reject {\
    \ |key| key.length != key.to_i.to_s.length }\nend", "  return [string] if string.length\
    \ == 1\n  return [string[0]] + all_prefixes(string[1..-1])\nend", "    prefixes\
    \ = []\n    string.length.times do |i|\n        prefixes << string[0..i]\n   \
    \ end\n    prefixes\nend", "  result = []\n  for i in 0..string.length-1\n   \
    \ result << string[0..i]\n  end\n  result\nend", "  prefixes = []\n  string.length.times\
    \ do |l|\n    prefixes << string[0..l]\n  end\n  prefixes\nend", "  reversed_prefixes\
    \ = []\n  until string.length == 0\n    reversed_prefixes << string\n    string\
    \ = string[0...-1]\n  end\n  reversed_prefixes.reverse\nend", "  prefixes = []\n\
    \  i = 0\n  while i < string.length\n    prefixes << string[0..i]\n    i += 1\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  (1..string.length).each do |end_index|\n\
    \    prefixes << string[0..end_index-1]\n  end\n  prefixes\nend", "  (1..string.length).map\
    \ { |i| string[0, i] }\nend", "    prefixes = []\n    i = 0\n    while i < string.length\n\
    \        prefixes << string[0..i]\n        i += 1\n    end\n    prefixes\nend",
  "  prefixes = []\n  (1..string.length).each do |n|\n    prefixes << string[0...n]\n\
    \  end\n  prefixes\nend", "  result = []\n  1.upto(string.length) do |i|\n   \
    \ result << string[0, i]\n  end\n  result\nend", "  result = []\n  0.upto(string.length\
    \ - 1) do |i|\n    result << string[0..i]\n  end\n  result\nend", "  (1..string.length).map\
    \ { |i| string[0, i] }\nend", "  (1..string.length).map { |n| string[0...n] }\n\
    end", "  prefixes = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n\
    \  end\n  prefixes\nend", "  (1..string.length).map { |n| string[0, n] }\nend",
  "\tresult = []\n\tfor i in 0..string.length-1\n\t\tresult << string[0..i]\n\tend\n\
    \tresult\nend", "  prefixes = []\n  i = 0\n  while i < string.length\n    prefixes\
    \ << string[0..i]\n    i += 1\n  end\n  prefixes\nend", "  prefixes = []\n  1.upto(string.length)\
    \ do |n|\n    prefixes << string[0...n]\n  end\n  prefixes\nend", "  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend", "    # base case\n    return [] if string.length == 0\n   \
    \ # recursive case\n    [string] + all_prefixes(string[0...-1])\nend", "  (1..string.length).map\
    \ { |i| string[0, i] }\nend", "    results = []\n    (1..string.length).each do\
    \ |num|\n        results << string[0...num]\n    end\n    results\nend", "  (1..string.length).map\
    \ { |i| string[0, i] }\nend", "  (1..string.length).map { |i| string[0, i] }\n\
    end", "  [].tap do |prefixes|\n    length = string.length\n    length.times do\
    \ |length|\n      prefixes << string[0..length]\n    end\n  end\nend", "  results\
    \ = []\n  string.length.times do |i|\n    results << string[0..i]\n  end\n  results\n\
    end", "  result = []\n  (1..string.length).each do |n|\n    result << string[0...n]\n\
    \  end\n  result\nend", "  [].tap do |prefixes|\n    (0..string.length - 1).each\
    \ do |i|\n      prefixes << string[0..i]\n    end\n  end\nend", "\tprefixes =\
    \ []\n\ti = 0\n\twhile i < string.length\n\t\tprefixes << string[0..i]\n\t\ti\
    \ += 1\n\tend\n\tprefixes\nend", "  # Set up list to store prefixes\n  prefixes\
    \ = []\n  # Set up starting index and prefix to start at the beginning\n  index\
    \ = 0\n  prefix = ''\n  # Build up prefixes from shortest to longest and store\
    \ in prefixes list\n  while index < string.length\n    prefix = string[0..index]\n\
    \    prefixes << prefix\n    index += 1\n  end\n  # Return prefixes list\n  prefixes\n\
    end", "  raise \"String expected\" unless string.is_a?(String)\n  string.chars.each_with_index.map\
    \ { |char, index| string[0..index] }\nend", "  (1..string.length).map { |n| string[0,\
    \ n] }\nend", "\tprefixes = []\n\t(0..string.length-1).each do |i|\n\t\tprefixes\
    \ << string[0..i]\n\tend\n\tprefixes\nend", "  result = []\n  for i in 0..string.length\n\
    \    result << string[0...i]\n  end\n  result\nend", "  array = []\n  for i in\
    \ 1..string.length\n    array << string[0..i-1]\n  end\n  array\nend", "  string.chars.map.with_index\
    \ { |_, i| string[0..i] }\nend", "  result = []\n  string.size.times do |i|\n\
    \    result << string[0..i]\n  end\n  result\nend", "  result = []\n  (1..string.length).each\
    \ do |index|\n    result << string[0..index-1]\n  end\n  result\nend", "  (1..string.length).map\
    \ { |length| string[0, length] }\nend", "  (1..string.length).map{|i| string[0...i]}\n\
    end", "    if string.empty?\n        return []\n    end\n    output = []\n   \
    \ string.split('').each_with_index do |letter, index|\n        output << string[0..index]\n\
    \    end\n    output\nend", "  arr = []\n  (1..string.length).each do |x|\n  \
    \  arr << string[0..x - 1]\n  end\n  arr\nend", "  prefixes = []\n  0.upto(string.length\
    \ - 1) do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\nend", "    result\
    \ = []\n    (1..string.length).each do |i|\n        result << string[0...i]\n\
    \    end\n    result\nend", "  string.length.times.map { |i| string[0..i] }\n\
    end", "  prefixes = []\n  if string.length == 1\n    prefixes.push(string)\n \
    \ else\n    prefixes = all_prefixes(string[0...-1])\n    prefixes.push(string)\n\
    \  end\n  prefixes\nend", "  all_prefixes = []\n  len = 1\n  while len <= string.length\n\
    \    all_prefixes << string[0, len]\n    len += 1\n  end\n  all_prefixes\nend",
  "\treturn [string] if string.size == 1\n\treturn [string[0], string] if string.size\
    \ == 2\n\t(all_prefixes(string[0..-2]) << string).flatten\nend", "  array = []\n\
    \  (0..string.length).each do |x|\n    array << string[0..x]\n  end\n  array\n\
    end", "\tprefixes = []\n\ti = 0\n\twhile i < string.length\n\t\tprefixes << string[0..i]\n\
    \t\ti += 1\n\tend\n\tprefixes\nend", "  1.upto(string.length).map { |i| string[0,\
    \ i] }\nend", "  ans = []\n  until string.length == 0\n    ans << string\n   \
    \ string = string[0...-1]\n  end\n  ans\nend", "  result = []\n  (1..string.length).each\
    \ do |n|\n    result << string[0, n]\n  end\n  result\nend", "  arr = []\n  string.chars.each_with_index\
    \ do |_,i|\n    arr << string[0..i]\n  end\n  arr\nend", "  (1..string.length).collect\
    \ { |i| string[0...i] }\nend", "  prefixes = []\n  letters = string.chars\n  letters.length.times\
    \ do |index|\n    prefixes << letters[0..index].join\n  end\n  prefixes\nend",
  "  results = []\n  count = 0\n  while count < string.length\n    results << string[0..count]\n\
    \    count += 1\n  end\n  results\nend", "  results = []\n  (1..string.length).each\
    \ do |size|\n    results << string[0...size]\n  end\n  results\nend", "  prefixes\
    \ = []\n  length = string.length\n  length.times do |i|\n    prefixes << string[0..i]\n\
    \  end\n  prefixes\nend", "  string_array = string.split('')\n  string_array.each_with_index.map\
    \ { |_, idx| string_array[0..idx].join }\nend", "  prefixes = []\n  (1..string.length).each\
    \ do |n|\n    prefixes << string[0...n]\n  end\n  prefixes\nend", "  0.upto(string.length).map\
    \ { |i| string[0...i] }\nend", "  (1..string.length).map { |i| string[0...i] }\n\
    end", "  # Base Case\n  return [string] if string.length == 1", "  prefixes =\
    \ []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend", "  prefixes = []\n  (0..string.length).each do |i|\n    prefixes\
    \ << string[0..i]\n  end\n  prefixes\nend", "  length = string.length - 1\n  prefixes\
    \ = []\n  length.times do |index|\n    prefixes << string[0..index]\n  end\n \
    \ prefixes << string\nend", "  (1..string.length).map { |i| string[0...i] }\n\
    end", "  prefixes = []\n  (1..string.length).each do |length|\n    prefixes <<\
    \ string[0...length]\n  end\n  prefixes\nend", "  result = []\n  (1..string.length).each\
    \ do |i|\n    result << string[0..i-1]\n  end\n  result\nend", "  (1..string.length).inject([])\
    \ do |prefixes, i|\n    prefixes << string[0, i]\n  end\nend", "  prefixes = []\n\
    \  (1..string.length).each do |n|\n    prefixes << string[0...n]\n  end\n  prefixes\n\
    end", "\tprefixes = []\n\t(1..string.length).each do |i|\n\t\tprefixes << string[0...i]\n\
    \tend\n\tprefixes\nend", "  start = -1\n  string.chars.each_with_object([]) do\
    \ |char, arr|\n    start += 1\n    arr << string[0..start]\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
