name: HumanEval_61_correct_bracketing
language: rb
prompt: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
  \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\")\n\
  # False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"(()())\"\
  )\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
  \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
  ()\"))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true,\
  \ candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"\
  ))\n    assert_equal(false, candidate.call(\"((()())))\"))\n    assert_equal(false,\
  \ candidate.call(\")(()\"))\n    assert_equal(false, candidate.call(\"(\"))\n  \
  \  assert_equal(false, candidate.call(\"((((\"))\n    assert_equal(false, candidate.call(\"\
  )\"))\n    assert_equal(false, candidate.call(\"(()\"))\n    assert_equal(false,\
  \ candidate.call(\"()()(()())())(()\"))\n    assert_equal(false, candidate.call(\"\
  ()()(()())()))()\"))\n  end\nend\n"
completions: ["  count = 0\n  if brackets[0] == \")\"\n    return false\n  else\n\
    \    brackets.each_char do |char|\n      if char == \"(\"\n        count += 1\n\
    \      elsif char == \")\"\n        count -= 1\n      end\n      if count < 0\n\
    \        return false\n      end\n    end\n  end\n  return count == 0\nend", " \
    \ open = 0\n  close = 0\n  while brackets.length > 0\n    if brackets[0] == \"\
    (\"\n      open += 1\n    elsif brackets[0] == \")\"\n      close += 1\n    end\n\
    \    brackets = brackets[1..-1]\n  end\n  return open == close\nend", "\t# your\
    \ code here\nend", "\nend", "  count = 0\n  for bracket in brackets:\n    if bracket\
    \ == \"(\":\n      count += 1\n    elsif bracket == \")\":\n      count -= 1\n\
    \    if count < 0:\n      return False\n  return count == 0\nend", "    count\
    \ = 0\n    result = false\n    brackets.each_char do |bracket|\n        if bracket\
    \ == \"(\"\n            count += 1\n        else\n            count -= 1\n   \
    \     end\n        if count < 0\n            return false\n        end\n    end\n\
    \    if count == 0\n        result = true\n    end\n    return result\nend", " \
    \ pass\nend", "  return False if brackets.empty?\n  opening = 0\n  closing = 0\n\
    \  index = 0\n  while index < brackets.length\n    if brackets[index] == \"(\"\
    \n      opening += 1\n    elsif brackets[index] == \")\"\n      closing += 1\n\
    \    end\n    return False if closing > opening\n    index += 1\n  end\n  opening\
    \ == closing\nend", "    num_open = 0\n    num_close = 0\n    brackets.each_char\
    \ do |char|\n        if char == \"(\"\n            num_open += 1\n        else\n\
    \            num_close += 1\n        end\n        if num_close > num_open\n  \
    \          return False\n        end\n    end\n    return num_open == num_close\n\
    end", "    # open_brackets = 0\n    # for b in brackets:\n    #     if b == \"\
    (\":\n    #         open_brackets += 1\n    #     elif b == \")\":\n    #    \
    \     open_brackets -= 1\n    #     if open_brackets < 0:\n    #         return\
    \ False\n    # return open_brackets == 0\n    return brackets.count(\"(\") ==\
    \ brackets.count(\")\")\nend", "  stack = []\n  brackets.each_char do |c|\n  \
    \  if c == '('\n      stack.push(c)\n    elsif c == ')'\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "\nend", "  bracket_stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"(\"\n      bracket_stack.push(char)\n    elsif char\
    \ == \")\"\n      if bracket_stack.empty?\n        return false\n      else\n\
    \        bracket_stack.pop\n      end\n    end\n  end\n  bracket_stack.empty?\n\
    end", "    if brackets == ''\n        return True\n    elsif brackets[0] == ')'\n\
    \        return False\n    else\n        n = find_matching_parenthesis(brackets,\
    \ 0)\n        return n == brackets.length - 1\n    end\nend", "    open = 0\n\
    \    close = 0\n    brackets.each_char do |c|\n        if c == \"(\"\n       \
    \     open += 1\n        elsif c == \")\"\n            close += 1\n        end\n\
    \        if close > open\n            return False\n        end\n    end\n   \
    \ if open == close\n        return True\n    else\n        return False\n    end\n\
    end", "\nend", "  return false if brackets.length % 2 != 0\n  count = 0\n  brackets.each_char\
    \ do |char|\n    count += 1 if char == \"(\"\n    count -= 1 if char == \")\"\n\
    \    return false if count < 0\n  end\n  count == 0\nend", "  opening_brackets\
    \ = []\n  brackets.each_char do |char|\n    if char == \"(\"\n      opening_brackets.push(char)\n\
    \    elsif char == \")\"\n      return false if opening_brackets.empty?\n    \
    \  opening_brackets.pop\n    end\n  end\n  return opening_brackets.empty?\nend",
  "    stack = []\n    brackets.chars.each do |c|\n        if c == \"(\"\n       \
    \     stack.push(c)\n        elsif c == \")\"\n            if stack.empty?\n \
    \               return false\n            else\n                stack.pop\n  \
    \          end\n        end\n    end\n    return stack.empty?\nend", "    stack\
    \ = []\n    for i in 0...brackets.length\n        if brackets[i] == \"(\"\n  \
    \          stack.push(1)\n        else\n            if stack.empty?\n        \
    \        return false\n            else\n                stack.pop\n         \
    \   end\n        end\n    end\n    if stack.empty?\n        return true\n    else\n\
    \        return false\n    end\nend\nputs \"for brackets as (\"), your answer\
    \ is #{correct_bracketing(\"(\")}\"\nputs \"for brackets as ()), your answer is\
    \ #{correct_bracketing(\"())\")}\"\nputs \"for brackets as (()), your answer is\
    \ #{correct_bracketing(\"(()\")}\"\nputs \"for brackets as ()), your answer is\
    \ #{correct_bracketing(\"()\")}\"\nputs \"for brackets as (()())), your answer\
    \ is #{correct_bracketing(\"(()())\")}\"\nputs \"for brackets as )(()), your answer\
    \ is #{correct_bracketing(\")(()\")}\"\nputs \"for brackets as (())(()), your\
    \ answer is #{correct_bracketing(\"(())(()\")}\"", "  open_count = 0\n  brackets.each_char\
    \ do |ch|\n    open_count += 1 if ch == \"(\"\n    open_count -= 1 if ch == \"\
    )\"\n    return False if open_count < 0\n  end\n  open_count == 0\nend", "  open_count\
    \ = 0\n  closed_count = 0\n  brackets.chars.each do |char|\n    if char == \"\
    (\"\n      open_count += 1\n    elsif char == \")\"\n      closed_count += 1\n\
    \    end\n    return false if closed_count > open_count\n  end\n  open_count ==\
    \ closed_count\nend", "\nend", "  # fill in code here\n  num = 0\n  brackets.each_char\
    \ do |i|\n  \tif i == \"(\"\n  \t\tnum += 1\n  \telsif i == \")\"\n  \t\tnum -=\
    \ 1\n  \tend\n  \tif num < 0\n  \t\treturn false\n  \tend\n  end\n  if num ==\
    \ 0\n  \treturn true\n  else\n  \treturn false\n  end\nend", "  count = 0\n  brackets.each_char\
    \ do |char|\n    count += 1 if char == \"(\"\n    count -= 1 if char == \")\"\n\
    \    if count < 0\n      return false\n    end\n  end\n  count == 0\nend", " \
    \   opening = 0\n    closing = 0\n    brackets.each_char do |c|\n        if c\
    \ == \"(\"\n            opening += 1\n        elsif c == \")\"\n            closing\
    \ += 1\n        end\n        if closing > opening\n            return False\n\
    \        end\n    end\n    return closing == opening\nend", "    if brackets.length\
    \ == 0 || brackets.length % 2 != 0\n        return false\n    end\n    open =\
    \ 0\n    close = 0\n    brackets.split(\"\").each do |i|\n        if i == \"(\"\
    \n            open += 1\n        else\n            close += 1\n        end\n \
    \       if close > open\n            return false\n        end\n    end\n    return\
    \ true\nend", "  # check each character in the string\n  # if it is an open bracket,\
    \ increment count\n  # if it is a closed bracket, decrement count\n  # if count\
    \ is negative, return false\n  # return true if count is 0\n  count = 0\n  brackets.each_char\
    \ do |char|\n    count += 1 if char == \"(\"\n    count -= 1 if char == \")\"\n\
    \    return false if count < 0\n  end\n  count == 0\nend", "    return False if\
    \ brackets.length % 2 != 0\n    stack = Array.new\n    brackets.each_char do |ch|\n\
    \        if ch == \"(\"\n            stack.push(ch)\n        else\n          \
    \  stack.pop\n        end\n    end\n    return stack.empty?\nend", "\tif brackets.size\
    \ > 0\n\t\tbrackets.count(\"(\") == brackets.count(\")\")\n\telse\n\t\ttrue\n\t\
    end\nend", "\treturn false if brackets.length % 2 != 0\n\ti = 0\n\twhile i < brackets.length\n\
    \t\treturn false if brackets[i] == \")\"\n\t\ti += 1\n\tend\n\treturn true\nend",
  "    if brackets == \"\"\n        return true\n    elsif brackets[0] == \")\"\n\
    \        return false\n    elsif brackets[-1] == \"(\"\n        return false\n\
    \    else\n        close = brackets.count(\")\")\n        open = brackets.count(\"\
    (\")\n        return close == open\n    end\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"(\"\n      stack.push(\")\")\n    elsif char ==\
    \ \")\"\n      if stack.last == \")\"\n        stack.pop\n      else\n       \
    \ return false\n      end\n    end\n  end\n  stack.empty?\nend", "  if brackets.empty?\n\
    \    return true\n  end\n  if brackets[0] == \")\"\n    return false\n  end\n\
    \  if brackets[-1] == \"(\"\n    return false\n  end\n  open = 0\n  closed = 0\n\
    \  i = 0\n  while i < brackets.length\n    if brackets[i] == \"(\"\n      open\
    \ += 1\n    else\n      closed += 1\n    end\n    i += 1\n  end\n  if open ==\
    \ closed\n    return true\n  else\n    return false\n  end\nend", "\tstack = []\n\
    \tbrackets.each_char do |c|\n\t\tif c == \"(\"\n\t\t\tstack.push(c)\n\t\telsif\
    \ c == \")\"\n\t\t\tif stack.empty?\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\t\
    stack.pop\n\t\t\tend\n\t\tend\n\tend\n\treturn stack.empty?\nend", "    open_brackets\
    \ = 0\n    (0...brackets.length).each do |i|\n        if brackets[i] == \"(\"\n\
    \            open_brackets += 1\n        elsif brackets[i] == \")\"\n        \
    \    open_brackets -= 1\n        end\n        if open_brackets < 0\n         \
    \   return False\n        end\n    end\n    return open_brackets == 0\nend", " \
    \ opens = 0\n  brackets.each_char do |c|\n    if c == \"(\"\n      opens += 1\n\
    \    elsif c == \")\"\n      opens -= 1\n    end\n    return false if opens <\
    \ 0\n  end\n  opens == 0\nend", "  puts \"not yet implemented\"\nend", "  # STUDENT\
    \ WORKS HERE\nend", "  i = 0\n  brackets.chars.each do |c|\n    if c == \"(\"\n\
    \      i += 1\n    elsif c == \")\"\n      i -= 1\n    end\n    if i < 0\n   \
    \   return false\n    end\n  end\n  return i == 0\nend", "  ### \nend", "  return\
    \ false if brackets[0] == \")\"\n  opening = 0\n  closing = 0\n  brackets.each_char\
    \ do |char|\n    opening += 1 if char == \"(\"\n    closing += 1 if char == \"\
    )\"\n    return false if closing > opening\n  end\n  return true if opening ==\
    \ closing\n  false\nend", "  # if there is only one bracket in brackets, return\
    \ false\n  return false if brackets.length == 1\n  # if the first bracket is \"\
    )\" return false\n  return false if brackets[0] == \")\"\n  # if the last bracket\
    \ is \"(\" return false\n  return false if brackets[-1] == \"(\"\n  # if brackets[0]\
    \ is \"(\" check if brackets[-1] is \")\"\n  # if brackets[0] is \")\" check if\
    \ brackets[-1] is \"(\"\n  # else false\n  if brackets[0] == \"(\"\n    return\
    \ true if brackets[-1] == \")\"\n  elsif brackets[0] == \")\"\n    return true\
    \ if brackets[-1] == \"(\"\n  else\n    return false\n  end\nend", "  temp = 0\n\
    \  brackets.each_char do |c|\n    if c == \"(\"\n      temp += 1\n    elsif c\
    \ == \")\"\n      temp -= 1\n    end\n    if temp < 0\n      return false\n  \
    \  end\n  end\n  if temp == 0\n    return true\n  else\n    return false\n  end\n\
    end", "  counter = 0\n  brackets.chars.each do |char|\n    if char == \"(\"\n\
    \      counter += 1\n    elsif char == \")\"\n      counter -= 1\n    end\n  \
    \  if counter < 0\n      return false\n    end\n  end\n  counter == 0\nend", " \
    \ count = 0\n  brackets.each_char do |char|\n    count += 1 if char == \"(\"\n\
    \    count -= 1 if char == \")\"\n    return false if count < 0\n  end\n  count\
    \ == 0\nend", "  stack = []\n  brackets.each_char do |b|\n    if b == \"(\"\n\
    \      stack.push(b)\n    elsif b == \")\"\n      if stack.empty?\n        return\
    \ false\n      else\n        stack.pop\n      end\n    end\n  end\n  stack.empty?\n\
    end", "  open = 0\n  brackets.each_char do |char|\n    open += 1 if char == \"\
    (\"\n    open -= 1 if char == \")\"\n    return false if open < 0\n  end\n  open\
    \ == 0\nend", "  count = 0\n  for i in 0..brackets.length-1\n    if brackets[i]\
    \ == \"(\"\n      count = count + 1\n    elsif brackets[i] == \")\"\n      count\
    \ = count - 1\n    end\n    if count < 0\n      return false\n    end\n  end\n\
    \  return count == 0\nend", "\t# set count = 0\n\t# everytime '(' appears, count\
    \ += 1\n\t# everytime ')' appears, count -= 1\n\t# if count is positive, we should\
    \ see a ')'\n\t# if count is negative, we should see a '('\n\t# return True only\
    \ if count is 0\n\tcount = 0\n\tbrackets.chars.each do |character|\n\t\tcase character\n\
    \t\twhen '('\n\t\t\tcount += 1\n\t\twhen ')'\n\t\t\tcount -= 1\n\t\tend\n\t\t\
    return false if count < 0\n\tend\n\tcount == 0\nend", '', "  length = brackets.length\n\
    \  return false if brackets[0] == \")\" || brackets[length-1] == \"(\"\n  return\
    \ true if length == 0 || length == 2\n  count = 0\n  brackets.each_char do |bracket|\n\
    \    count += 1 if bracket == \"(\"\n    count -= 1 if bracket == \")\"\n    return\
    \ false if count < 0\n  end\n  count == 0\nend", "    # print(brackets)\n    if\
    \ brackets == \"\"\n        return True\n    elsif brackets[0] == \")\"\n    \
    \    return False\n    else\n        return correct_bracketing(brackets[1..-1])\n\
    \    end\nend\nprint(correct_bracketing(\"(())\"))", "  open = 0\n  close = 0\n\
    \  brackets.each_char do |char|\n    if char == \"(\"\n      open += 1\n    elsif\
    \ char == \")\"\n      close += 1\n    end\n    if close > open\n      return\
    \ false\n    end\n  end\n  if open == close\n    return true\n  else\n    return\
    \ false\n  end\nend", "\nend", "\tstack = []\n\tbrackets.each_char do |c|\n\t\t\
    if c == \"(\"\n\t\t\tstack.push(c)\n\t\telsif c == \")\"\n\t\t\treturn false if\
    \ stack.empty?\n\t\t\tstack.pop\n\t\tend\n\tend\n\tstack.empty?\nend", "    index_counter\
    \ = 0\n    bracket_counter = 0\n    while index_counter < brackets.length\n  \
    \      bracket_counter += 1 if brackets[index_counter] == \"(\"\n        bracket_counter\
    \ -= 1 if brackets[index_counter] == \")\"\n        return false if bracket_counter\
    \ < 0\n        index_counter += 1\n    end\n    bracket_counter == 0\nend", " \
    \ # your code here\nend", "  # your code here\nend", "\tleft_bracket = 0\n\tright_bracket\
    \ = 0\n\tfor i in 0..brackets.length\n\t\tif brackets[i] == \"(\"\n\t\t\tleft_bracket\
    \ += 1\n\t\telsif brackets[i] == \")\"\n\t\t\tright_bracket += 1\n\t\t\treturn\
    \ false if right_bracket > left_bracket\n\t\tend\n\tend\n\tleft_bracket == right_bracket\n\
    end", '  # replace this with your code', "    stack = []\n    for bracket in brackets.split(\"\
    \")\n        if bracket == \"(\"\n            stack.push(bracket)\n        else\n\
    \            if stack.length == 0 || stack.pop != \"(\"\n                return\
    \ false\n            end\n        end\n    end\n    return stack.length == 0\n\
    end", "  stack = []\n  # Write your code here\n  return stack.empty?\nend", "\t\
    left_count, right_count = 0, 0\n\tbrackets.each_char do |bracket|\n\t\tif bracket\
    \ == \"(\"\n\t\t\tleft_count += 1\n\t\telsif bracket == \")\"\n\t\t\tright_count\
    \ += 1\n\t\t\tif right_count > left_count\n\t\t\t\treturn false\n\t\t\tend\n\t\
    \tend\n\tend\n\treturn left_count == right_count\nend", "\t# --- your code here\
    \ ---\n\tbrackets.each_char.with_index do |char, i|\n\t\tputs \"char #{char}\"\
    \n\t\tputs \"i #{i}\"\n\t\tif char == \"(\" && brackets[i+1] != \")\"\n\t\t\t\
    return false\n\t\telsif char == \")\" && brackets[i-1] != \"(\"\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn true\nend", "    open, closed = 0, 0\n    brackets.each_char\
    \ do |char|\n        if char == \"(\"\n            open += 1\n        elsif char\
    \ == \")\"\n            closed += 1\n        end\n        return false if closed\
    \ > open\n    end\n    open == closed\nend", "  stack = Array.new\n  brackets.chars.each\
    \ do |ch|\n    if ch == \"(\"\n      stack.push(ch)\n    elsif ch == \")\"\n \
    \     if stack.empty?\n        return false\n      else\n        stack.pop\n \
    \     end\n    end\n  end\n  stack.empty?\nend", "  cnt = 0\n  brackets.chars.each\
    \ do |c|\n    cnt += 1 if c == '('\n    cnt -= 1 if c == ')'\n    return false\
    \ if cnt < 0\n  end\n  cnt == 0\nend", "    open_count = 0\n    brackets.each_char\
    \ do |char|\n        open_count += 1 if char == \"(\"\n        open_count -= 1\
    \ if char == \")\"\n        return false if open_count < 0\n    end\n    return\
    \ open_count == 0\nend", "\nend", "    stack = []\n    brackets.each_char do |bracket|\n\
    \        if bracket == \"(\"\n            stack.push(bracket)\n        elsif bracket\
    \ == \")\"\n            if stack.empty?\n                return false\n      \
    \      else\n                stack.pop\n            end\n        end\n    end\n\
    \    return stack.empty?\nend", "\nend", "  left = 0\n  right = 0\n  brackets.each_char\
    \ do |bracket|\n    if bracket == \"(\"\n      left += 1\n    elsif bracket ==\
    \ \")\"\n      right += 1\n    end\n    return false if right > left\n  end\n\
    \  return left == right\nend", "    stack = Stack.new\n    for br in brackets.split(\"\
    \")\n        if br == \"(\"\n            stack.push(br)\n        elsif br == \"\
    )\"\n            if stack.empty?\n                return False\n            else\n\
    \                stack.pop\n            end\n        end\n    end\n    return\
    \ stack.empty?\nend", "  opening_brackets = 0\n  brackets.each_char do |char|\n\
    \    if char == \"(\"\n      opening_brackets += 1\n    elsif char == \")\"\n\
    \      opening_brackets -= 1\n    end\n    if opening_brackets < 0\n      return\
    \ false\n    end\n  end\n  return opening_brackets == 0\nend", "  # Create a variable\
    \ to count the number of open brackets and\n  # another variable to count the\
    \ number of closed brackets\n  # Loop through the string\n  # for each opening\
    \ bracket, increase the value of the open bracket counter\n  # for each closing\
    \ bracket, increase the value of the closed bracket counter\n  # at the end of\
    \ the loop, compare the two values to determine whether the\n  # brackets are\
    \ balanced\n  counter_open = 0\n  counter_closed = 0\n  for bracket in brackets.split(\"\
    \")\n    if bracket == \"(\"\n      counter_open += 1\n    else\n      counter_closed\
    \ += 1\n    end\n  end\n  counter_open == counter_closed\nend", "    # replace\
    \ this code with your own\n    # remember the return keyword\n    true\nend",
  "  counter = 0\n  for char in brackets.split(\"\")\n    if char == \"(\"\n     \
    \ counter += 1\n    elsif char == \")\"\n      counter -= 1\n    end\n    if counter\
    \ < 0\n      return false\n    end\n  end\n  return counter == 0\nend", "  opening\
    \ = []\n  brackets.each_char do |bracket|\n    if bracket == \"(\"\n      opening\
    \ << bracket\n    elsif bracket == \")\"\n      return false if opening.empty?\n\
    \      opening.pop\n    end\n  end\n  opening.empty?\nend", "  stack = Stack.new()\n\
    \  brackets.each_char do |x|\n    if (x == \"(\")\n      stack.push(x)\n    elsif\
    \ (x == \")\")\n      return false if stack.is_empty?\n      stack.pop()\n   \
    \ end\n  end\n  return stack.is_empty?\nend", "  new_list = []\n  for char in\
    \ brackets\n    if char == \"(\"\n      new_list.push(char)\n    elsif char ==\
    \ \")\"\n      if new_list.empty?\n        return false\n      else\n        new_list.pop\n\
    \      end\n    end\n  end\n  if new_list.empty?\n    return true\n  else\n  \
    \  return false\n  end\nend", "  stack = []\n  brackets.chars.each do |char|\n\
    \    if char == \"(\"\n      stack.push(char)\n    elsif char == \")\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  stack.empty?\nend", "  return false if brackets[0] ==\
    \ \")\"\n  stack = []\n  brackets.each_char do |ch|\n    if ch == \"(\"\n    \
    \  stack.push(ch)\n    else\n      return false if stack.empty?\n      stack.pop\n\
    \    end\n  end\n  stack.empty?\nend", "  num_open = 0\n  brackets.each_char do\
    \ |char|\n    num_open += 1 if char == \"(\"\n    num_open -= 1 if char == \"\
    )\"\n    return false if num_open < 0\n  end\n  num_open == 0\nend", "  if brackets\
    \ == \"(\"\n    return false\n  elsif brackets == \")\"\n    return false\n  elsif\
    \ brackets.length % 2 != 0\n    return false\n  elsif (brackets.count \"(\") !=\
    \ (brackets.count \")\")\n    return false\n  else\n    return true\n  end\nend",
  "  # You will want to keep track of opening brackets.\n  # Use a loop to go through\
    \ the string.\n  # If you see an opening bracket, you know you have to see a closing\
    \ bracket.\n  # Keep track of how many opening brackets you have seen.\n  # There\
    \ should be one more closing bracket than the number of opening brackets you have\
    \ seen.\n  # If you have seen more opening brackets than closing brackets, then\
    \ there is a problem.\n  # Return False\n  # If you have gone through the entire\
    \ string and you have seen the right number of each kind of bracket, then return\
    \ True\n  # If you get an error, then there was a problem.\n  # Return False\n\
    end", "  b = brackets.gsub(\"()\", \"\")\n  while b != brackets\n    brackets\
    \ = b\n    b = brackets.gsub(\"()\", \"\")\n  end\n  brackets == \"\"\nend", " \
    \ open = brackets.count(\"(\")\n  close = brackets.count(\")\")\n  if open > close\n\
    \    return False\n  elsif open == close\n    return True\n  else\n    return\
    \ False\n  end\nend", "  brackets.chars.each_with_object([]) do |char, stack|\n\
    \    return false if char == ')' && stack.empty?\n    stack.push(char) if char\
    \ == '('\n    stack.pop if char == ')'\n  end.empty?\nend", "  stack = []\n  for\
    \ bracket in brackets.split(\"\")\n    if bracket == \"(\"\n      stack.push(bracket)\n\
    \    elsif bracket == \")\" && stack.length > 0\n      stack.pop\n    else\n \
    \     return false\n    end\n  end\n  stack.length == 0\nend", "  bracket_count\
    \ = 0\n  brackets.each_char do |bracket|\n    if bracket == \"(\"\n      bracket_count\
    \ += 1\n    elsif bracket == \")\"\n      bracket_count -= 1\n    end\n    if\
    \ bracket_count < 0\n      return false\n    end\n  end\n  return bracket_count\
    \ == 0\nend", "\nend", "    # your code here\nend", "  brackets.count(\"(\") ==\
    \ brackets.count(\")\")\nend", "    if brackets.length.odd?\n        return false\n\
    \    end\n    if brackets.length == 2 && brackets[0] == \")\" && brackets[1] ==\
    \ \"(\"\n        return false\n    end\n    if brackets.length == 0\n        return\
    \ true\n    end\n    if brackets[0] == \")\"\n        return false\n    end\n\
    \    if brackets[-1] == \"(\"\n        return false\n    end\n    i = 0\n    while\
    \ i < brackets.length - 1\n        if brackets[i] == \"(\" && brackets[i + 1]\
    \ == \")\"\n            return correct_bracketing(brackets[0...i] + brackets[i\
    \ + 2..-1])\n        end\n        i += 1\n    end\n    false\nend", end, end,
  "\nend", "\t# YOUR CODE HERE\n\treturn false\nend", '  return false if brackets.length
    == 1', "  # call the helper function\n  return _correct_bracketing(brackets, 0)\n\
    end", "    count = 0\n    brackets.each_char do |char|\n        if char == \"\
    (\"\n            count += 1\n        elsif char == \")\"\n            count -=\
    \ 1\n        end\n        if count < 0\n            return false\n        end\n\
    \    end\n    if count == 0\n        return true\n    else\n        return false\n\
    \    end\nend", "\nend", "    # YOUR CODE HERE\nend", "  brackets.each_char.inject(0)\
    \ do |counter, bracket|\n    return false if counter < 0\n    counter += bracket\
    \ == '(' ? 1 : -1\n  end == 0\nend", "    open_brackets = 0\n    brackets.each_char\
    \ do |x|\n        open_brackets += 1 if x == \"(\"\n        open_brackets -= 1\
    \ if x == \")\"\n        return False if open_brackets < 0\n    end\n    return\
    \ open_brackets == 0\nend", "    # use something here to keep track of which opening\
    \ bracket we need to look for\n    # next. \n    # Use either a counter or a stack\n\
    \    stack = []\n    (0...brackets.length).each do |i|\n        # if current character\
    \ is an opening bracket, add it to the stack\n        if brackets[i] == \"(\"\n\
    \            stack.push(brackets[i])\n        elsif brackets[i] == \")\"\n   \
    \         # if current character is a closing bracket, remove it from the stack\n\
    \            if stack.empty?\n                return false\n            else\n\
    \                stack.pop()\n            end\n        end\n    end\n    stack.empty?\n\
    end", "    # your code here\nend", "  count = 0\n  brackets.each_char do |c|\n\
    \    count += 1 if c == \"(\"\n    count -= 1 if c == \")\"\n    return false\
    \ if count < 0\n  end\n  count == 0\nend", "\tif brackets.length % 2 != 0\n\t\t\
    return false\n\telse\n\t\ti = 0\n\t\tarray = []\n\t\twhile i < brackets.length\n\
    \t\t\tif brackets[i] == \"(\"\n\t\t\t\tarray.push(brackets[i])\n\t\t\telsif brackets[i]\
    \ == \")\"\n\t\t\t\tif array.length == 0\n\t\t\t\t\treturn false\n\t\t\t\telse\n\
    \t\t\t\t\tarray.pop\n\t\t\t\tend\n\t\t\tend\n\t\t\ti += 1\n\t\tend\n\t\tif array.length\
    \ == 0\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\nend",
  "  stack = []\n  brackets.chars.each do |c|\n    case c\n    when '('\n      stack.push(c)\n\
    \    when ')'\n      return false if stack.empty?\n      stack.pop\n    end\n\
    \  end\n  stack.empty?\nend", "  count = 0\n  brackets.each_char do |i|\n    count\
    \ += 1 if i == \"(\"\n    count -= 1 if i == \")\"\n    return false if count\
    \ < 0\n  end\n  count == 0\nend", "\t# use a while loop and two counters\n\t#\
    \ one counter tracks the opening brackets and the other\n\t# the closing. when\
    \ you find an opening you increment\n\t# the opening brackets and when you find\
    \ a closing you\n\t# increment the closing brackets.\n\t# if the counter of closing\
    \ brackets ever gets ahead of\n\t# the opening ones, return false\n\treturn false\
    \ if brackets.length % 2 == 1\n\topen_brackets = 0\n\tclosed_brackets = 0\n\t\
    while brackets.length > 0\n\t\tif brackets[0] == \"(\"\n\t\t\topen_brackets +=\
    \ 1\n\t\telsif brackets[0] == \")\"\n\t\t\tclosed_brackets += 1\n\t\tend\n\t\t\
    if closed_brackets > open_brackets\n\t\t\treturn false\n\t\tend\n\t\tbrackets\
    \ = brackets[1..-1]\n\tend\n\treturn true\nend", "    counter = 0\n    for i in\
    \ brackets.chars\n        if i == \"(\"\n            counter += 1\n        elsif\
    \ i == \")\"\n            counter -= 1\n        end\n        if counter < 0\n\
    \            return false\n        end\n    end\n    if counter == 0\n       \
    \ return true\n    else\n        return false\n    end\nend", end, "\tbrackets\
    \ = brackets.chars\n\treturn false if brackets.empty?", "    # YOUR CODE HERE\n\
    \    count = 0\n    brackets.each_char do |c|\n        count += 1 if c == \"(\"\
    \n        count -= 1 if c == \")\"\n        if count < 0\n            return false\n\
    \        end\n    end\n    return count == 0\nend", "  count = 0\n  brackets.each_char\
    \ do |c|\n    count += 1 if c == \"(\"\n    count -= 1 if c == \")\"\n    return\
    \ false if count < 0\n  end\n  count == 0\nend", "  n_open = 0\n  n_close = 0\n\
    \  brackets.each_char do |c|\n    if c == \"(\"\n      n_open += 1\n    elsif\
    \ c == \")\"\n      n_close += 1\n    end\n    if n_close > n_open\n      return\
    \ False\n    end\n  end\n  return n_open == n_close\nend", "    # place your code\
    \ here\nend", "  parens = []\n  for bracket in brackets\n    if bracket == \"\
    (\"\n      parens.push(bracket)\n    elsif bracket == \")\"\n      parens.pop\n\
    \    end\n  end\n  return parens.empty?\nend", "\tstack = []\n\tfor bracket in\
    \ brackets.chars\n\t\tif bracket == \"(\"\n\t\t\tstack.push(bracket)\n\t\telsif\
    \ bracket == \")\"\n\t\t\tif stack.length == 0\n\t\t\t\treturn false\n\t\t\telse\n\
    \t\t\t\tstack.pop\n\t\t\tend\n\t\tend\n\tend\n\tif stack.length == 0\n\t\treturn\
    \ true\n\telse\n\t\treturn false\n\tend\nend", "\tlcount = 0\n\trcount = 0\n\t\
    i = 0\n\twhile i < brackets.length\n\t\tif brackets[i] == \"(\"\n\t\t\tlcount\
    \ += 1\n\t\telsif brackets[i] == \")\"\n\t\t\trcount += 1\n\t\tend\n\t\tif rcount\
    \ > lcount\n\t\t\treturn false\n\t\tend\n\t\ti += 1\n\tend\n\tif lcount == rcount\n\
    \t\treturn true\n\telse\n\t\treturn false\n\tend\nend", "\topen = 0\n\tclose =\
    \ 0\n\t\n\tfor i in brackets.chars\n\t\tif i == \"(\"\n\t\t\topen += 1\n\t\telsif\
    \ i == \")\"\n\t\t\tclose += 1\n\t\tend\n\tend\n\t\n\topen == close\nend", " \
    \ stack = []\n  brackets.each_char do |char|\n    if char == \"(\"\n      stack.push(char)\n\
    \    elsif char == \")\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "    count\
    \ = 0\n    while brackets.length > 0\n        if brackets[0] == \"(\"\n      \
    \      count += 1\n        elsif brackets[0] == \")\"\n            count -= 1\n\
    \        end\n        if count < 0\n            return false\n        end\n  \
    \      brackets = brackets[1..-1]\n    end\n    return count == 0\nend", "   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elsif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\nend",
  "  stack = []\n  brackets.chars.each do |bracket|\n    case bracket\n    when '('\n\
    \      stack.push(bracket)\n    when ')'\n      if stack.empty?\n        return\
    \ false\n      else\n        stack.pop\n      end\n    end\n  end\n  stack.empty?\n\
    end", "\t\nend", "    stack = []\n    brackets.each_char do |ch|\n        if ch\
    \ == \"(\"\n            stack.push(ch)\n        elsif ch == \")\"\n          \
    \  if stack.empty?\n                return False\n            else\n         \
    \       stack.pop\n            end\n        end\n    end\n    stack.empty?\nend",
  "  # TODO: Complete this function!\nend", "\tstack = []\n\tbrackets.each_char do\
    \ |bracket|\n\t\tif bracket == \"(\"\n\t\t\tstack.push(bracket)\n\t\telsif bracket\
    \ == \")\"\n\t\t\tif stack.length == 0\n\t\t\t\treturn false\n\t\t\tend\n\t\t\t\
    stack.pop\n\t\tend\n\tend\n\treturn stack.length == 0\nend", "\t#write your solution\
    \ here\n\tbrackets\nend", "  stack = []\n  brackets.each_char do |c|\n    case\
    \ c\n    when '('\n      stack.push(c)\n    when ')'\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "    # CODE\nend", "  count = 0\n  brackets.chars.each\
    \ do |c|\n    count += 1 if c == \"(\"\n    count -= 1 if c == \")\"\n    return\
    \ false if count < 0\n  end\n  count == 0\nend", "    open = 0\n    closed = 0\n\
    \    brackets.each_char do |bracket|\n        if bracket == \"(\"\n          \
    \  open += 1\n        elsif bracket == \")\"\n            closed += 1\n      \
    \  end\n        if closed > open\n            return false\n        end\n    end\n\
    \    return closed == open\nend", "    open_brackets = 0\n    for s in brackets:\n\
    \        if s == \"(\":\n            open_brackets += 1\n        elif s == \"\
    )\":\n            open_brackets -= 1\n        if open_brackets < 0:\n        \
    \    return False\n    return open_brackets == 0", "  bracket_counter = 0\n  brackets.chars.each\
    \ do |bracket|\n    bracket_counter += 1 if bracket == \"(\"\n    bracket_counter\
    \ -= 1 if bracket == \")\"\n    return false if bracket_counter < 0\n  end\n \
    \ return bracket_counter == 0\nend", "    # error checking for if there is only\
    \ one bracket present. if its true, return false.\n    if brackets.length == 1\n\
    \        return false\n    end\n    # make the brackets into an array, then sort\
    \ them.\n    bracket_array = brackets.split(\"\")\n    bracket_array.sort!", " \
    \ str = brackets.split(\"\")\n  paren = []\n  str.each do |x|\n    if x == \"\
    (\"\n      paren << x\n    elsif x == \")\"\n      return false if paren.empty?\n\
    \      paren.pop\n    end\n  end\n  paren.empty?\nend", "    stack = []\n    if\
    \ brackets[0] == \")\"\n        return false\n    end\n    brackets.each_char\
    \ do |char|\n        if char == \"(\"\n            stack.push(char)\n        else\n\
    \            popped = stack.pop\n            if popped != \"(\"\n            \
    \    return false\n            end\n        end\n    end\n    return stack.empty?\n\
    end", "  left = 0\n  right = 0\n  brackets.each_char do |char|\n    if char ==\
    \ \"(\"\n      left += 1\n    elsif char == \")\"\n      right += 1\n    end\n\
    \    if right > left\n      return false\n    end\n  end\n  left == right\nend",
  "  counter = 0\n  brackets.each_char do |char|\n    if char == \"(\"\n      counter\
    \ += 1\n    elsif char == \")\"\n      counter -= 1\n    end\n    if counter <\
    \ 0\n      return false\n    end\n  end\n  if counter == 0\n    return true\n\
    \  else\n    return false\n  end\nend", "\nend", "  opening = 0\n  closing = 0\n\
    \  brackets.split(\"\").each do |x|\n    opening += 1 if x == \"(\"\n    closing\
    \ += 1 if x == \")\"\n    return false if closing > opening\n  end\n  return true\
    \ if opening == closing\n  false\nend", "  temp = 0\n  brackets.each_char do |char|\n\
    \    temp += 1 if char == \"(\"\n    temp -= 1 if char == \")\"\n    return false\
    \ if temp < 0\n  end\n  temp == 0\nend", "  open_count = 0\n  brackets.each_char\
    \ do |char|\n    if char == \"(\"\n      open_count += 1\n    elsif char == \"\
    )\"\n      open_count -= 1\n    end\n    if open_count < 0\n      return false\n\
    \    end\n  end\n  return open_count == 0\nend", "    i = 0 \n    while brackets[i]\
    \ != nil\n        if brackets[i] == \"(\"\n            i += 1\n        elsif brackets[i]\
    \ == \")\"\n            i -= 1\n        end\n        if i < 0\n            return\
    \ false\n        end\n    end\n    if i == 0\n        return true\n    else\n\
    \        return false\n    end\nend", "  stack = []\n  brackets.each_char do |char|\n\
    \    if char == \"(\"\n      stack.push(char)\n    elsif char == \")\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  return stack.empty?\nend", "  count = 0\n  for i in 0..brackets.length\
    \ - 1\n    if brackets[i] == \"(\"\n      count += 1\n    elsif brackets[i] ==\
    \ \")\"\n      count -= 1\n    end\n    if count < 0\n      return false\n   \
    \ end\n  end\n  return count == 0\nend", "  stack = []\n  brackets.each_char do\
    \ |char|\n    if char == \"(\"\n      stack.push(char)\n    elsif char == \")\"\
    \n      if stack.length == 0\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.length == 0\nend", "  # the number\
    \ of open brackets\n  open_brackets = 0\n  # for each character in the string\n\
    \  for bracket in brackets\n    # if it's a \"(\"\n    if bracket == \"(\"\n \
    \     # add 1 to the number of open brackets\n      open_brackets += 1\n    #\
    \ if it's a \")\"\n    elsif bracket == \")\"\n      # subtract 1 from the number\
    \ of open brackets\n      open_brackets -= 1\n    end\n    # if there are no open\
    \ brackets\n    if open_brackets < 0\n      # there is no possible way for every\
    \ opening bracket to have a closing\n      # bracket.\n      return False\n  \
    \  end\n  end\n  # there are no open brackets\n  open_brackets == 0\nend", " \
    \ # TODO: implement this!\n  if brackets.length % 2 != 0\n    return false\n \
    \ end\n  left = []\n  right = []\n  hash = {\n    '(' => ')'\n  }\n  brackets.each_char\
    \ do |x|\n    if x == '('\n      left << x\n    elsif x == ')'\n      right <<\
    \ x\n    end\n  end\n  if left.length != right.length\n    return false\n  end\n\
    \  left.each_with_index do |x, i|\n    if hash[x] != right[i]\n      return false\n\
    \    end\n  end\n  return true\nend", "  count = 0\n  brackets.chars.each do |char|\n\
    \    count += 1 if char == \"(\"\n    count -= 1 if char == \")\"\n    return\
    \ false if count < 0\n  end\n  count == 0\nend", "  count = 0\n  return false\
    \ if brackets[0] == \")\"\n  brackets.each_char do |b|\n    if b == \"(\"\n  \
    \    count += 1\n    elsif b == \")\"\n      count -= 1\n    end\n    return false\
    \ if count < 0\n  end\n  count == 0\nend", '  return brackets.include?(")") ==
    false if brackets.include?("(") == false', "\t# your code here\nend", "  bracket_count\
    \ = 0\n  brackets.chars.each do |char|\n    bracket_count += 1 if char == \"(\"\
    \n    bracket_count -= 1 if char == \")\"\n    return false if bracket_count <\
    \ 0\n  end\n  return false if bracket_count != 0\n  true\nend", "    stack = []\n\
    \    for b in brackets:\n        if b == \"(\":\n            stack.push(b)\n \
    \       elsif b == \")\":\n            if stack.size == 0:\n                return\
    \ False\n            stack.pop\n        end\n    end\n    return stack.size ==\
    \ 0\nend", "    open_brackets = []\n    closed_brackets = []\n    brackets.each_char\
    \ do |c|\n        if c == \"(\"\n            open_brackets.push(c)\n        elsif\
    \ c == \")\"\n            if open_brackets.length == 0\n                return\
    \ false\n            else\n                open_brackets.pop\n            end\n\
    \        end\n    end\n    return open_brackets.length == 0\nend", "\nend", " \
    \ counter = 0\n  for ch in brackets\n    if ch == \"(\"\n      counter += 1\n\
    \    elsif ch == \")\"\n      counter -= 1\n    end\n    if counter < 0\n    \
    \  return False\n    end\n  end\n  if counter != 0\n    return False\n  end\n\
    \  return True\nend", "    stack = []\n    brackets.each_char do |char|\n    \
    \    if char == \"(\"\n            stack.push(char)\n        elsif char == \"\
    )\"\n            if stack.length == 0\n                return False\n        \
    \    else\n                stack.pop\n            end\n        end\n    end\n\
    \    return stack.length == 0\nend", end, "  counter = 0\n  brackets.each_char\
    \ do |ch|\n    counter += 1 if ch == \"(\"\n    counter -= 1 if ch == \")\"\n\
    \    return false if counter < 0\n  end\n  counter == 0\nend", "  correct = 0\n\
    \  brackets.each_char do |char|\n    if char == \"(\"\n      correct += 1\n  \
    \  elsif char == \")\"\n      correct -= 1\n    end\n    return false if correct\
    \ < 0\n  end\n  return true if correct == 0\n  false\nend", "  num_brackets =\
    \ 0\n  brackets.chars.each do |char|\n    if char == \"(\"\n      num_brackets\
    \ += 1\n    elsif char == \")\"\n      num_brackets -= 1\n    end\n    return\
    \ false if num_brackets < 0\n  end\n  num_brackets == 0\nend", "  a = []\n  brackets.split(\"\
    \").each do |x|\n    if x == \"(\"\n      a.push(x)\n    elsif x == \")\"\n  \
    \    a.pop\n    end\n  end\n  if a.length == 0\n    return True\n  else\n    return\
    \ False\n  end\nend", "  bracket_count = 0\n  brackets.each_char do |char|\n \
    \   bracket_count += 1 if char == \"(\"\n    bracket_count -= 1 if char == \"\
    )\"\n    return false if bracket_count < 0\n  end\n  bracket_count == 0\nend",
  " \nend", "  # YOUR CODE HERE\nend", "  len = brackets.length\n  i = 0\n  while\
    \ i < len\n    if brackets[i] == \"(\"\n      i += 1\n      while brackets[i]\
    \ != \")\"\n        if brackets[i] == \"(\"\n          return false\n        end\n\
    \        i += 1\n      end\n    end\n    i += 1\n  end\n  return true\nend", " \
    \ count = 0\n  brackets.each_char do |b|\n    count -= 1 if b == \")\"\n    count\
    \ += 1 if b == \"(\"\n    return false if count < 0\n  end\n  count == 0\nend",
  "  # your code here\nend", "    left_count = 0\n    right_count = 0\n    brackets.chars.each\
    \ do |c|\n        left_count += 1 if c == \"(\"\n        right_count += 1 if c\
    \ == \")\"\n        return false if right_count > left_count\n    end\n    return\
    \ true if left_count == right_count\n    false\nend", "  return false if brackets.nil?\n\
    \  check = 0\n  brackets.each_char do |bracket|\n    check += 1 if bracket ==\
    \ '('\n    check -= 1 if bracket == ')'\n    return false if check < 0\n  end\n\
    \  check == 0\nend", "    # in order to check if there is a pair of bracket, we\
    \ will create two counters\n    # one for \"(\", one for \")\"\n    # if there\
    \ is a \"(\", counter for \"(\" will +1, counter for \")\" will -1\n    # if there\
    \ is a \")\", counter for \"(\" will -1, counter for \")\" will +1\n    # when\
    \ the result is 0, that means there is a pair,\n    # we will continue to check\
    \ the string until we reach the end\n    # then we will check if both counters\
    \ are 0, \n    # if they are, return True, if not, return False\n    # if the\
    \ string starts with \")\", the result will be -1, so return False\n    # if the\
    \ string starts with \"(\", we will keep +1, -1, +1, -1, etc.\n    # until we\
    \ reach the end, then check if the result is 0, if not, return False\n    # if\
    \ the string starts with \")\", the result will be -1, so return False\n    if\
    \ brackets[0] == \")\":\n        return False\n    result = 0\n    for i in range(len(brackets)):\n\
    \        if brackets[i] == \"(\":\n            result += 1\n        else:\n  \
    \          result -= 1\n    if result == 0:\n        return True\n    else:\n\
    \        return False", "\nend", "    # your code here\nend", "    open = 0\n\
    \    brackets.each_char do |bracket|\n        if bracket == \"(\"\n          \
    \  open += 1\n        elsif bracket == \")\"\n            open -= 1\n        end\n\
    \        if open < 0\n            return False\n        end\n    end\n    return\
    \ open == 0\nend", "  counter = 0\n  brackets.each_char do |char|\n    if char\
    \ == \"(\"\n      counter += 1\n    elsif char == \")\"\n      counter -= 1\n\
    \    end\n    return false if counter < 0\n  end\n  counter == 0\nend", "  # YOUR\
    \ CODE HERE\nend", "    count = 0\n    brackets.each_char do |char|\n        if\
    \ char == \"(\"\n            count += 1\n        elsif char == \")\"\n       \
    \     count -= 1\n        end\n        if count < 0\n            return false\n\
    \        end\n    end\n    return count == 0\nend", "  if brackets == \"()\"\n\
    \    return true\n  elsif brackets == \"\"\n    return true\n  elsif brackets\
    \ == \"(\"\n    return false\n  else\n    return correct_bracketing(brackets[1..-1])\n\
    \  end\nend", "    number = 0\n    brackets.each_char do |char|\n        if char\
    \ == \"(\"\n            number += 1\n        elsif char == \")\"\n           \
    \ number -= 1\n        end\n        if number < 0\n            return False\n\
    \        end\n    end\n    if number == 0\n        return True\n    else\n   \
    \     return False\n    end\nend", "  stack = []\n  hash = {\")\" => \"(\"}\n\
    \  brackets.each_char do |bracket|\n    if hash.has_key?(bracket) && stack.empty?\n\
    \      return false\n    elsif hash.has_key?(bracket) && hash[bracket] == stack.last\n\
    \      stack.pop\n    else\n      stack.push(bracket)\n    end\n  end\n  stack.empty?\n\
    end", end, "  # returns True if brackets is an empty string\n  if brackets ==\
    \ \"\"\n    return True\n  # returns False if brackets has no more closing brackets\
    \ than opening brackets\n  elsif brackets.count(\")\") > brackets.count(\"(\"\
    )\n    return False\n  # otherwise, returns the truthiness of the \"recursive\"\
    \n  # call to correct_bracketing, with the first bracket removed\n  else\n   \
    \ correct_bracketing(brackets[1..-1])\n  end\nend", "  open = 0\n  close = 0\n\
    \  brackets.chars.each do |char|\n    if char == \"(\"\n      open += 1\n    elsif\
    \ char == \")\"\n      close += 1\n    end\n    if close > open\n      return\
    \ false\n    end\n  end\n  return open == close\nend", "    # for each opening\
    \ bracket, check that there is a corresponding closing bracket\n    return brackets\
    \ == \"\" or brackets == \"()\" or brackets[0] == \"(\" and brackets[-1] == \"\
    )\" and correct_bracketing(brackets[1..-2])\nend", "    #\nend", "\t#make sure\
    \ the number of opening and closing brackets are equal\n\t#look at the very first\
    \ one - if it's a closing bracket, it's immediately false\n\t#every time you see\
    \ an opening, decrease a counter\n\t#every time you see a closing, increase a\
    \ counter\n\t#return true if counter == 0 at the end\n\tif brackets[0] == \")\"\
    \n\t\treturn false\n\tend\n\tcounter = 0\n\tbrackets.split(\"\").each do |bracket|\n\
    \t\tif bracket == \"(\"\n\t\t\tcounter -= 1\n\t\telsif bracket == \")\"\n\t\t\t\
    counter += 1\n\t\tend\n\tend\n\treturn counter == 0\nend", "    opening_count\
    \ = 0\n    closing_count = 0\n    for c in brackets\n        if c == \"(\"\n \
    \           opening_count += 1\n        elsif c == \")\"\n            closing_count\
    \ += 1\n        end\n    end\n    return closing_count == opening_count\nend",
  "\tstack = []\n\tbrackets.each_char do |c|\n\t\tif c == \"(\"\n\t\t\tstack.push(c)\n\
    \t\telsif c == \")\"\n\t\t\tif stack.empty?\n\t\t\t\treturn false\n\t\t\telse\n\
    \t\t\t\tstack.pop\n\t\t\tend\n\t\tend\n\tend\n\treturn stack.empty?\nend", "\n\
    end", "    n = 0\n    for i in 0..brackets.length-1\n        if brackets[i] ==\
    \ \"(\"\n            n += 1\n        elsif brackets[i] == \")\"\n            n\
    \ -= 1\n        end\n        if n < 0\n            return false\n        end\n\
    \    end\n    if n == 0\n        return true\n    else\n        return false\n\
    \    end\nend", "  # YOUR CODE HERE\n  if brackets.length == 0\n    return true\n\
    \  end\n  if brackets.length == 1\n    return false\n  end\n  count = 0\n  brackets.each_char\
    \ do |b|\n    if b == \"(\"\n      count += 1\n    else\n      count -= 1\n  \
    \  end\n    if count < 0\n      return false\n    end\n  end\n  if count == 0\n\
    \    return true\n  else\n    return false\n  end\nend", "\nend", "\t#initiate\
    \ counter\n\tcount = 0\n\t#iterate through each char in string\n\tbrackets.each_char\
    \ do |char|\n\t\t#if opening parenthesis count increases by 1\n\t\tif char ==\
    \ \"(\"\n\t\t\tcount += 1\n\t\t#if closing parenthesis count decreases by 1\n\t\
    \telsif char == \")\"\n\t\t\tcount -= 1\n\t\tend\n\t\t#if count is less than 0,\
    \ return false\n\t\tif count < 0\n\t\t\treturn false\n\t\tend\n\tend\n\t#if count\
    \ is greater than 0, return false\n\tif count > 0\n\t\treturn false\n\tend\n\t\
    #otherwise return true\n\treturn true\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
