name: HumanEval_59_largest_prime_factor
language: rb
prompt: "# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  # >>> largest_prime_factor(13195)\n# 29\n# >>> largest_prime_factor(2048)\n# 2\n\
  def largest_prime_factor(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_prime_factor\n\
  \    candidate = method(:largest_prime_factor)\n    assert_equal(5, candidate.call(15))\n\
  \    assert_equal(3, candidate.call(27))\n    assert_equal(7, candidate.call(63))\n\
  \    assert_equal(11, candidate.call(330))\n    assert_equal(29, candidate.call(13195))\n\
  \  end\nend\n"
completions: ["\tlargest_factor = 1\n\tsmallest_prime = 2\n\tnum = n\n\twhile num\
    \ >= smallest_prime\n\t\tif num % smallest_prime == 0\n\t\t\tlargest_factor =\
    \ smallest_prime\n\t\t\tnum = num / smallest_prime\n\t\telse\n\t\t\tsmallest_prime\
    \ += 1\n\t\tend\n\tend\n\treturn largest_factor\nend", "  (1..n).each do |i|\n\
    \    return n / i if n % i == 0 && is_prime?(n / i)\n  end\nend", "  i = 2\n \
    \ while n > 1\n    while n % i == 0\n      n /= i\n    end\n    i += 1\n  end\n\
    \  i - 1\nend", "  # find all primes that are factors of n\n  # among them, find\
    \ the largest\n  # might be faster to remove from n all the primes that are its\
    \ factors\n  # and then find the primes of the remaining number\n  return n if\
    \ is_prime?(n)", "  max_factor = 1\n  factor = 2\n  while factor <= n / 2\n  \
    \  if n % factor == 0\n      max_factor = factor\n      n /= factor\n    else\n\
    \      factor += 1\n    end\n  end\n  max_factor\nend", "\tprime = 2\n\twhile\
    \ (n > prime) do\n\t\tif n % prime == 0\n\t\t\tn /= prime\n\t\telse\n\t\t\tprime\
    \ += 1\n\t\tend\n\tend\n\treturn prime\nend", "  last_divisor = nil\n  n.downto(2)\
    \ do |divisor|\n    if n % divisor == 0\n      n /= divisor\n      last_divisor\
    \ = divisor\n    end\n  end\n  last_divisor\nend", "  if n % 2 == 0\n    n = n\
    \ / 2\n    largest_prime_factor(n)\n  else\n    n\n  end\nend", "  primes = []\n\
    \  i = 2\n  while i <= n\n    if n % i == 0\n      primes << i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  primes.last\nend", "  # Prime numbers\
    \ are numbers who are only divisible by themselves and 1.\n  # 1, 2, 3, 5, 7,\
    \ 11, 13, 17, 19\n  # As soon as we get a prime number, we know it's a prime factor.\n\
    \  # We also know that the largest prime factor is less than or equal to\n  #\
    \ the square root of the number.\n  # We also know that we only need to try to\
    \ divide the number by primes\n  # because any non-prime factors will be divisible\
    \ by a prime factor.\n  i = 2\n  while i * i <= n\n    while n % i == 0\n    \
    \  n = n / i\n    end\n    i += 1\n  end\n  n\nend", "  factors = prime_factors(n)\n\
    \  factors[-1]\nend", "\tfactor = 1\n\tcounter = n\n\twhile (counter > 1)\n\t\t\
    if (n % counter == 0) && (is_prime(counter))\n\t\t\tfactor = counter\n\t\t\tbreak\n\
    \t\tend\n\t\tcounter -= 1\n\tend\n\treturn factor\nend", "  if n % 2 == 0\n  \
    \  return n / 2\n  end\n  max = n / 2\n  (max).downto(3) do |i|\n    if n % i\
    \ == 0\n      if prime(i)\n        return i\n      end\n    end\n  end\nend",
  "  # i = 2\n  # loop do\n  #   if n % i == 0\n  #     n /= i\n  #   else\n  #  \
    \   i += 1\n  #   end\n  #   break if i > n\n  # end\n  # return i", "  i = 2\n\
    \  largest_factor = 1\n  until n == 1\n    if n % i == 0\n      largest_factor\
    \ = i\n      n /= i\n    else\n      i += 1\n    end\n  end\n  largest_factor\n\
    end", "  counter = 2\n  while counter < n\n    if n % counter == 0\n      n =\
    \ n / counter\n    else\n      counter += 1\n    end\n  end\n  n\nend", "  # It's\
    \ inefficient, but I'm getting there. \n  (1..n).each do |i|\n    return i if\
    \ n % i == 0 && n/i != 1 && n/i != n && largest_prime_factor(n/i) == 1\n  end\n\
    \  return 1\nend", "  primes = get_primes(n)\n  primes.select { |prime| n % prime\
    \ == 0 }.max\nend", "  # base case\n  return n if n < 4", "  # START SOLUTION\n\
    \  return nil if n < 2\n  n.downto(2) do |factor|\n    if n % factor == 0 && is_prime?(factor)\n\
    \      return factor\n    end\n  end\n  # END SOLUTION\nend", "  factors = []\n\
    \  (2..n).each do |i|\n    if n % i == 0\n      n /= i\n      factors << i\n \
    \   end\n  end\n  factors.max\nend", "  # TODO\nend", "    divisor = 2\n    #\
    \ p n\n    while n > 1\n        if n % divisor == 0\n            p n = n / divisor\n\
    \        else\n            divisor += 1\n        end\n    end\n    divisor\nend",
  "    factors = []\n    i = 2\n    while i < n\n        if n % i == 0 && is_prime(i)\n\
    \            factors << i\n        end\n        i += 1\n    end\n    factors.max\n\
    end", "    i = 2\n    until n == 1\n        if n % i == 0\n            n /= i\n\
    \        else\n            i += 1\n        end\n    end\n    i\nend", "  factor\
    \ = 2\n  while factor <= n\n    if n % factor == 0\n      n /= factor\n    else\n\
    \      factor += 1\n    end\n  end\n  factor\nend", "  # Start with smallest prime\
    \ number.\n  current_factor = 2\n  # Increase current_factor by 1 until it becomes\
    \ a factor of n.\n  until n % current_factor == 0\n    current_factor += 1\n \
    \ end\n  # Divide n by current_factor and repeat until no more factors are left.\n\
    \  until n == current_factor\n    n /= current_factor\n    until n % current_factor\
    \ == 0\n      current_factor += 1\n    end\n  end\n  current_factor\nend", " \
    \ factor = 2\n  while n > 1 do\n    if n % factor == 0\n      n /= factor\n  \
    \    if prime?(n)\n        return n\n      end\n    else\n      factor += 1\n\
    \    end\n  end\nend", "  (1..n).select { |x| n % x == 0 && prime?(x) }.max\n\
    end", "  i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n  \
    \    i += 1\n    end\n  end\n  return i\nend", "  n.prime_division.max.first\n\
    end", "    (2..n).each do |num|\n        if n % num == 0 && prime?(num)\n    \
    \        return num\n        end\n    end\nend", "  primes = prime_factors(n)\n\
    \  primes[-1]\nend", "  factors = []\n  factor = 2\n  while n != 1\n    if n %\
    \ factor == 0\n      factors << factor\n      n /= factor\n    else\n      factor\
    \ += 1\n    end\n  end\n  factors.sort[-1]\nend", "  while true\n    # if n is\
    \ divisible by any number that is not 1 or n, \n    # then the largest prime factor\
    \ of n is the largest prime\n    # factor of n / that number.\n    factor = (2..n).find\
    \ { |i| n % i == 0 }\n    if factor.nil?\n      return n\n    else\n      n /=\
    \ factor\n    end\n  end\nend", "\t# if n is even, divide by 2 as many times as\
    \ possible.\n\t# now n will be odd. \n\twhile n.even?\n\t\tn = n / 2\n\tend\n\t\
    # start with a prime, 2.\n\ti = 3\n\t# while i is less than the square root of\
    \ n (n is the largest possible prime)\n\twhile i <= Math.sqrt(n)\n\t\t#if n is\
    \ divisible by i, then it's a prime. so start dividing.\n\t\twhile n % i == 0\n\
    \t\t\tn = n / i\n\t\tend\n\t\t# increment i by 2. the loop will exit when it is\
    \ not possible to divide by a prime anymore\n\t\ti = i + 2\n\tend\n\t# if you\
    \ made it out of the while loop, n is now prime. return n\n\treturn n\nend", " \
    \ # Prime factors are all numbers that are prime AND factors\n  # Factors are\
    \ numbers that multiply together to create n\n  # Factors of 2047: 1, 2, 3, 6,\
    \ 11, 17, 19, 33, 57, 101, 171, 323, 521, 743, 1043, 1651, 1729, 2047\n  # Prime\
    \ numbers of factors: 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137,\
    \ 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227,\
    \ 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313,\
    \ 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419,\
    \ 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509,\
    \ 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617,\
    \ 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727,\
    \ 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829,\
    \ 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947,\
    \ 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031,", "  i = 1\n\
    \  largest_prime = 0\n  while i <= n\n    if n % i == 0\n      largest_prime =\
    \ i\n      n = n / i\n    end\n    i += 1\n  end\n  largest_prime\nend", "   \
    \ prime = 2\n    while n != 1\n        if n % prime == 0\n            n /= prime\n\
    \        else\n            prime += 1\n        end\n    end\n    prime\nend",
  "  # You may find the divisors_of helper method from the previous problem helpful\
    \ here.\n  divisors_of(n).select { |number| is_prime?(number) }.max\nend", " \
    \ max = 0\n  (2..Math.sqrt(n)).each do |i|\n    if n % i == 0\n      if is_prime?(i)\n\
    \        max = i\n      end\n    end\n  end\n  max\nend", "    # loop through\
    \ all possible factors\n    (2..n-1).each do |i|\n        # is this factor?\n\
    \        if n % i == 0\n            # is this factor a prime?\n            if\
    \ (2..i/2).none? { |j| i % j == 0 }\n                # return this factor\n  \
    \              return i\n            end\n        end\n    end\nend", "  divisor\
    \ = 2\n  until n <= divisor\n    if n % divisor == 0\n      n /= divisor\n   \
    \ else\n      divisor += 1\n    end\n  end\n  divisor\nend", "    2.upto(n-1)\
    \ do |divisor|\n        if n % divisor == 0\n            return largest_prime_factor(n/divisor)\n\
    \        end\n    end\n    return n\nend", "  (2..n).reverse_each do |i|\n   \
    \ if is_prime?(i) && n % i == 0\n      return i\n    end\n  end\nend", "  divisor\
    \ = 2\n  while divisor <= n do\n    if n % divisor == 0\n      n /= divisor\n\
    \    else\n      divisor += 1\n    end\n  end\n  return divisor\nend", "  i =\
    \ 2\n  while i < n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n\
    \    end\n  end\n  return n\nend", "  i = 2\n  while i <= n\n    if n % i == 0\n\
    \      n /= i\n    else\n      i += 1\n    end\n  end\n  i\nend", "  return 1\
    \ if n == 1\n  factors = (2..n).select { |x| n % x == 0 }\n  factors.each do |factor|\n\
    \    return factor if factors.all? { |f| factor % f == 0 }\n  end\nend", "  check\
    \ = n\n  while check > 1\n    if is_prime?(check) && n % check == 0\n      return\
    \ check\n    end\n    check -= 1\n  end\nend", "  factor = n\n  num = 2\n  while\
    \ num <= factor\n    if factor % num == 0\n      factor /= num\n    else\n   \
    \   num += 1\n    end\n  end\n  factor\nend", "    div = 2\n    last_prime = 1\n\
    \    while n > 1\n        if n % div == 0\n            last_prime = div\n    \
    \        n /= div\n            while n % div == 0\n                n /= div\n\
    \            end\n        end\n        div += 1\n    end\n    last_prime\nend",
  "  largest_prime = 1\n  (2..Math.sqrt(n)).each do |i|\n    if n % i == 0\n     \
    \ largest_prime = i\n      while n % i == 0\n        n /= i\n      end\n    end\n\
    \  end\n  return n if n > 1\n  largest_prime\nend", "  max = Math.sqrt(n).to_i\n\
    \  (1..max).to_a.reverse.each do |x|\n    if n % x == 0 && prime?(x)\n      return\
    \ x\n    end\n  end\nend", "  all_factors = []\n  (1..n).each do |i|\n    if n\
    \ % i == 0\n      all_factors << i\n    end\n  end\n  prime_factors = []\n  all_factors.each\
    \ do |i|\n    if is_prime?(i)\n      prime_factors << i\n    end\n  end\n  prime_factors.max\n\
    end", "  i = 2\n  while i * i <= n\n    while n % i == 0\n      n /= i\n    end\n\
    \    i += 1\n  end\n  n\nend", "  # loop from 2 to n, find the first divisor,\
    \ if it is not a prime, keep searching,\n  # if it is a prime, return it.\n  i\
    \ = 2\n  while i < n\n    if n % i == 0\n      n /= i\n      i -= 1\n    end\n\
    \    i += 1\n  end\n  n\nend", "  factors = []\n  i = 2\n  while n > 1\n    factors\
    \ << i if n % i == 0\n    n /= i while n % i == 0\n    i += 1\n  end\n  factors.max\n\
    end", end, "  (2..n).each do |i|\n    if is_prime?(i) && n % i == 0\n      return\
    \ i\n    end\n  end\nend", "  divisor = n/2\n  while divisor > 0\n    return divisor\
    \ if n % divisor == 0 && is_prime?(divisor)\n    divisor -= 1\n  end\nend", " \
    \ i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n      i +=\
    \ 1\n    end\n  end\n  return i\nend", "  (2..n).each do |i|\n    return n / i\
    \ if n % i == 0 && prime?(n / i)\n  end\nend", "  i = 2\n  while i < n\n    if\
    \ n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  n\nend",
  "  prime_factor = 2\n  while (n > prime_factor)\n    if (n % prime_factor) == 0\n\
    \      n /= prime_factor\n      prime_factor -= 1\n    end\n    prime_factor +=\
    \ 1\n  end\n  prime_factor\nend", "  # Fill this in.\n  prime_numbers = []\n \
    \ (2..n).each do |num|\n    next if prime_numbers.any? { |prime| num % prime ==\
    \ 0 }\n    prime_numbers << num\n    break if n % num == 0\n  end\n  n / prime_numbers.last\n\
    end", "\tdivisor = 2\n\twhile divisor < n\n\t\tif (n % divisor) == 0\n\t\t\tn\
    \ /= divisor\n\t\t\tdivisor -= 1\n\t\tend\n\t\tdivisor += 1\n\tend\n\tn\nend",
  "  (2..Math.sqrt(n)).each do |factor|\n    if n % factor == 0\n      return largest_prime_factor(n\
    \ / factor)\n    end\n  end\n  n\nend", "  prime_factor = 2\n  while n > prime_factor\n\
    \    while n % prime_factor == 0\n      n /= prime_factor\n    end\n    prime_factor\
    \ += 1\n  end\n  prime_factor\nend", "  return nil if n <= 1\n  divisor = n -\
    \ 1\n  while divisor > 1\n    return divisor if n % divisor == 0 && prime?(divisor)\n\
    \    divisor -= 1\n  end\nend", "    i = 2\n    while i < n\n        if (n % i\
    \ == 0)\n            n /= i\n        else\n            i += 1\n        end\n \
    \   end\n    return n\nend", "  # Hint: Remember the 'is_prime?' function from\
    \ the last question.\n  # Return n if n is prime.\n  return n if is_prime?(n)",
  end, "  # return n if n is a prime, or largest prime factor if n is not a prime\n\
    \  return n if n.prime?\n  prime_factors(n).last\nend", "  factors = []\n  (2..n).each\
    \ do |number|\n    factors << number if n % number == 0\n  end\n  return factors.max\
    \ if factors.max.prime?\n  largest_prime_factor(factors.max)\nend", "  factor\
    \ = n\n  i = 2\n  while i * i <= factor\n    while factor % i == 0\n      factor\
    \ /= i\n    end\n    i += 1\n  end\n  factor\nend", "  factors = prime_factors(n)\n\
    \  factors[-1]\nend", "\tassert(n > 1, \"n must be greater than 1\")\n\ti = n\
    \ / 2\n\twhile i > 1\n\t\tif n % i == 0\n\t\t\tif is_prime(i)\n\t\t\t\treturn\
    \ i\n\t\t\tend\n\t\tend\n\t\ti -= 1\n\tend\nend", "  factor = n\n  while (factor\
    \ > 1)\n    if is_prime?(factor)\n      return factor\n    end\n    for j in (2..factor)\n\
    \      if factor % j == 0\n        factor = factor / j\n        break\n      end\n\
    \    end\n  end\nend", "  max_prime = -1\n  (2..n).each do |x|\n    if n % x ==\
    \ 0\n      max_prime = [max_prime, x].max\n      while n % x == 0\n        n /=\
    \ x\n      end\n    end\n  end\n  max_prime\nend", "  prime_factors(n).max\nend",
  "  num = n\n  primes = []\n  # calculate possible factors:\n  factors = *(2..n)\n\
    \  # create an array of all factors of n\n  while num > 1\n    factors.each do\
    \ |factor|\n      # puts \"#{factor}, #{num}\"\n      if num % factor == 0\n \
    \       primes << factor\n        num = num / factor\n        break\n      end\n\
    \    end\n  end\n  primes.max\nend", "  d = 2\n  while n > 1\n    if n % d ==\
    \ 0\n      n /= d\n    else\n      d += 1\n    end\n  end\n  d\nend", "  i = n\n\
    \  factors = []\n  primes = []\n  while i > 0\n    if n % i == 0\n      factors\
    \ << i\n    end\n    i -= 1\n  end\n  for num in factors\n    primes << num if\
    \ prime?(num)\n  end\n  primes.last\nend", "  potential_factors = (2..n).to_a\n\
    \  primes = potential_factors.select { |x| is_prime?(x) }\n  primes.select { |x|\
    \ n % x == 0 }.max\nend", "  n\nend", "  prime_factors(n).max\nend", "  # return\
    \ 2 if n == 2048\n  all_primes(n).max\nend", "  (2..n).reverse_each do |i|\n \
    \   return i if n % i == 0 && prime?(i)\n  end\nend", "\tmax_prime = 2\n\twhile\
    \ n % 2 == 0\n\t\tn /= 2\n\tend\n\ti = 3\n\twhile i <= n\n\t\tif n % i == 0\n\t\
    \t\tn /= i\n\t\t\tmax_prime = i\n\t\telse\n\t\t\ti += 2\n\t\tend\n\tend\n\tmax_prime\n\
    end", "\t\nend", "\tfactors = factors(n)\n\tfactors.max\nend", "  i = 1\n  while\
    \ i <= n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n \
    \ end\n  i\nend", "    return n if prime?(n)\n    largest_prime_factor(smallest_factor(n))\n\
    end", "  primes = []\n  (1..n).each do |i|\n    if is_prime?(i)\n      primes\
    \ << i\n    end\n  end\n  primes.each do |prime|\n    return prime if n % prime\
    \ == 0\n  end\nend", "  factor = 2\n  while n > 1\n    if n % factor == 0\n  \
    \    n /= factor\n      factor -= 1\n    end\n    factor += 1\n  end\n  factor\n\
    end", "  i = 2\n  while i < n do\n    if n % i == 0\n      n /= i\n    else\n\
    \      i += 1\n    end\n  end\n  n\nend", "  factors = []\n  primes = []\n  (2..n).each\
    \ do |i|\n    if n % i == 0\n      factors << i\n    end\n  end\n  factors.each\
    \ do |i|\n    if is_prime?(i)\n      primes << i\n    end\n  end\n  primes.last\n\
    end", "  curr_factor = 2\n  max_factor = n", "  #\nend", "    i = 2\n    while\
    \ i * i <= n\n        if n % i == 0\n            n /= i\n        else\n      \
    \      i += 1\n        end\n    end\n    return n\nend", "    factors = []\n \
    \   possible_factor = 2\n    while n > 1\n        while n % possible_factor ==\
    \ 0\n            factors << possible_factor\n            n /= possible_factor\n\
    \        end\n        possible_factor += 1\n    end\n    factors.last\nend", "\t\
    # print \"DEBUG: #{n}\\n\"\n\treturn n if is_prime?(n)\n\ti = 2\n\twhile i < n\
    \ / 2\n\t\tif is_prime?(i) && n % i == 0\n\t\t\treturn largest_prime_factor(n\
    \ / i)\n\t\tend\n\t\ti += 1\n\tend\nend", "\tfactor = 1\n\tfor i in (2..n)\n\t\
    \tif n % i == 0\n\t\t\tfactor = i\n\t\t\twhile n % i == 0\n\t\t\t\tn /= i\n\t\t\
    \tend\n\t\tend\n\tend\n\tfactor\nend", "  # TODO: implement!\nend", "  i = 2\n\
    \  while i <= n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n   \
    \ end\n  end\n  return i\nend", "    i = 2\n    while i < n\n        while n %\
    \ i == 0\n            n /= i\n        end\n        i += 1\n    end\n    n\nend",
  "  largest_prime = 1\n  while n > 1\n    (2..n).each do |i|\n      largest_prime\
    \ = i if n % i == 0\n      n /= i\n      break\n    end\n  end\n  largest_prime\n\
    end", "  while n % 2 == 0\n    n /= 2\n  end\n  result = n\n  div = 3\n  while\
    \ div <= Math.sqrt(n)\n    while n % div == 0\n      result = div\n      n /=\
    \ div\n    end\n    div += 2\n  end\n  return result if n <= 1\n  n\nend", " \
    \ divisor = 2\n  while n > 1\n    if n % divisor == 0\n      n /= divisor\n  \
    \  else\n      divisor += 1\n    end\n  end\n  divisor\nend", "  a = n\n  i =\
    \ 2\n  while i <= a\n    if a % i == 0\n      a = a / i\n    else\n      i +=\
    \ 1\n    end\n  end\n  i\nend", "  prime_factors(n).last\nend", "  divisor = n\n\
    \  while divisor > 1\n    # n is divisible by divisor\n    if n % divisor == 0\n\
    \      # if divisor is prime, we've found the largest prime\n      if prime?(divisor)\n\
    \        return divisor\n      end\n    end\n    divisor -= 1\n  end\nend", " \
    \ i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n      i +=\
    \ 1\n    end\n  end\n  return i\nend", "\tif n <= 1\n\t\traise \"n must be greater\
    \ than 1\"\n\tend\n\tpossible_divisor = n - 1\n\twhile n % possible_divisor !=\
    \ 0\n\t\tpossible_divisor -= 1\n\tend\n\tfactor = n / possible_divisor\n\tif is_prime?(factor)\n\
    \t\treturn factor\n\telse\n\t\treturn largest_prime_factor(factor)\n\tend\nend",
  "  i = 2\n  while i <= n\n    if (n % i).zero?\n      n /= i\n    else\n      i\
    \ += 1\n    end\n  end\n  i\nend", "  prime_factors(n).max\nend", "\tprimes =\
    \ [2]\n\tn_orig = n\n\tcandidate = 3\n\twhile n > 1\n\t\twhile (n % candidate).zero?\n\
    \t\t\tn /= candidate\n\t\t\tif !primes.include?(candidate)\n\t\t\t\tprimes <<\
    \ candidate\n\t\t\tend\n\t\tend\n\t\tcandidate += 2\n\tend\n\tputs \"The largest\
    \ prime factor of #{n_orig} is #{primes.last}\"\nend", "\ti = 2\n\twhile i < n\n\
    \t\tif n % i == 0\n\t\t\tn /= i\n\t\t\ti = 2\n\t\telse\n\t\t\ti += 1\n\t\tend\n\
    \tend\n\tn\nend", "  (n-1).downto(2) do |i|\n    if n % i == 0\n      if prime?(i)\n\
    \        return i\n      end\n    end\n  end\nend", end, "  number = n\n  factors\
    \ = []\n  if is_prime?(n)\n    return n\n  end\n  while number > 1\n    factors.each\
    \ do |factor|\n      if number % factor == 0\n        number = number / factor\n\
    \        break\n      end\n    end\n    if number > 1\n      factors << next_prime(factors.last)\n\
    \    end\n  end\n  factors.last\nend", "    curr = 2\n    # divide n by the smallest\
    \ prime possible\n    while curr <= n\n        if n % curr == 0\n            n\
    \ /= curr\n        else\n            curr += 1\n        end\n    end\n    return\
    \ curr\nend", "  i = 2\n  while n > 1\n    while n % i == 0\n      n /= i\n  \
    \  end\n    i += 1\n  end\n  i - 1\nend", "    return nil if n <= 1 || n.prime?\n\
    \    largest_prime_factor = n / 2 #initialize so we can run while loop", "  #\
    \ loop from n-1 down to 1:\n  # if n % i == 0 && is_prime(i):\n  # return i\n\
    \  # return n\n  (n-1).downto(1) do |x|\n    if n % x == 0 && is_prime(x)\n  \
    \    return x\n    end\n  end\n  return n\nend", "  factors = find_prime_factors(n)\n\
    \  return factors.last\nend", "  # TODO: implement this\nend", "  i = 2\n  max\
    \ = 1\n  # find the greatest divisor\n  while i < n\n    if n % i == 0\n     \
    \ max = i\n      n = n / i\n    else\n      i += 1\n    end\n  end\n  max\nend",
  "  i = 2\n  while i < n\n    if (n % i).zero?\n      n /= i\n    else\n      i +=\
    \ 1\n    end\n  end\n  n\nend", "  # TODO\nend", "  largest_factor = 1\n  i =\
    \ 2\n  while n > i\n    if n % i == 0\n      largest_factor = i\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  return largest_factor\nend", "  largest_prime\
    \ = 2\n  i = 2\n  while i <= n / i\n    if n % i == 0\n      largest_prime = i\n\
    \      n /= i\n    else\n      i += 1\n    end\n  end\n  largest_prime\nend",
  "  i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n      i +=\
    \ 1\n    end\n  end\n  i\nend", "    #get factors\n    #is it prime\n    #return\
    \ the biggest one\n    factors = factorize(n)\n    primes = factors.select {|num|\
    \ prime?(num)}\n    primes.last\nend", "    prime_factors = get_prime_factors(n)\n\
    \    prime_factors.max\nend", "    i = 2\n    while i <= n\n        if n % i ==\
    \ 0\n            n /= i\n        else\n            i += 1\n        end\n    end\n\
    \    return i\nend", "  # Return the largest prime factor of n.\nend", "  puts\
    \ \"largest_prime_factor of #{n}\"\n  #1. We want to test every integer from 1\
    \ to n, inclusive. \n  #2. If a number, m, divides evenly into n, we want to test\
    \ if m is prime\n  #3. We'll keep the largest prime found so far in a variable\
    \ largest_prime. \n  #4. The last value assigned to this variable will be the\
    \ largest prime factor of n.\n  (1..n).each do |m|\n    if n % m == 0 && is_prime?(m)\n\
    \      largest_prime = m\n    end\n  end\n  largest_prime\nend", "  if n % 2 ==\
    \ 0\n    n /= 2\n    largest_prime_factor(n)\n  else\n    i = 3\n    while i <=\
    \ n / 2\n      if n % i == 0\n        n /= i\n        largest_prime_factor(n)\n\
    \      end\n      i += 2\n    end\n  end\n  n\nend", "  i = 2\n  while i < n\n\
    \    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  return\
    \ n\nend", "  i = 2\n  while i < n do\n    if n % i == 0\n      return largest_prime_factor(n\
    \ / i)\n    end\n    i += 1\n  end\n  return n\nend", "  i = 2\n  while n > 1\n\
    \    while n % i == 0\n      n /= i\n    end\n    i += 1\n  end\n  i - 1\nend",
  "  (2..n).to_a.reverse.each do |i|\n    if n % i == 0\n      if prime?(i)\n    \
    \    return i\n      end\n    end\n  end\nend", "  #primes = [2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173,\
    \ 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263,\
    \ 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359,\
    \ 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457,\
    \ 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569,\
    \ 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659,\
    \ 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769,\
    \ 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881,\
    \ 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n\
    \  fact = 2\n  largest = 0\n  while n > 1\n    if n % fact == 0\n      largest\
    \ = fact\n      n /= fact\n    else\n      fact += 1\n    end\n  end\n  largest\n\
    end", "  if n == 1\n    return n\n  end\n  prime_numbers = primes(n)\n  prime_numbers.last\n\
    end", "  primes = []\n  prime_test(n, primes)\n  primes.last\nend", "  prime_factors(n).max\n\
    end", "  factor = 2\n  while n > 1\n    if n % factor == 0\n      n /= factor\n\
    \      factor -= 1\n    end\n    factor += 1\n  end\n  factor\nend", "\tprime_factors\
    \ = []\n\tprime_factor = 2\n\twhile n > 1 \n\t\tif n % prime_factor == 0\n\t\t\
    \tprime_factors << prime_factor\n\t\t\tn /= prime_factor\n\t\telse\n\t\t\tprime_factor\
    \ += 1\n\t\tend\n\tend\n\tprime_factors.max\nend", "  max_prime = 1\n  while n\
    \ % 2 == 0\n    max_prime = 2\n    n /= 2\n  end\n  p = 3\n  while n != 1\n  \
    \  while n % p == 0\n      max_prime = p\n      n /= p\n    end\n    p += 2\n\
    \  end\n  max_prime\nend", "  factor = smallest_prime_factor(n)\n  while true\n\
    \    n = n / factor\n    break if is_prime?(n)\n    factor = smallest_prime_factor(n)\n\
    \  end\n  n\nend", "  largest_factor = nil\n  divisor = 1\n  while divisor <=\
    \ n\n    if n % divisor == 0\n      # Check if divisor is prime\n      is_prime\
    \ = true\n      (2..divisor-1).each do |i|\n        if divisor % i == 0\n    \
    \      is_prime = false\n          break\n        end\n      end\n      if is_prime\n\
    \        largest_factor = divisor\n      end\n    end\n    divisor += 1\n  end\n\
    \  largest_factor\nend", "  if n % 2 == 0\n    largest_prime_factor(n / 2)\n \
    \ else\n    divisor = 3\n    while n > 1 do\n      if n % divisor == 0\n     \
    \   n /= divisor\n      else\n        divisor += 2\n      end\n    end\n    divisor\n\
    \  end\nend", "  Prime.prime_division(n).flatten.max\nend", "    factors = prime_factors(n)\n\
    \    factors[-1]\nend", end, "  return nil if is_prime?(n)\n  primes(n).select\
    \ { |prime| n % prime == 0 }.max\nend", "  # YOUR CODE HERE\nend", "\tfactor =\
    \ 2\n\twhile n > 1\n\t\tif n % factor == 0\n\t\t\tn /= factor\n\t\telse\n\t\t\t\
    factor += 1\n\t\tend\n\tend\n\tfactor\nend", "  max = n\n  while max > 1\n   \
    \ max -= 1\n    n % max == 0 && return max if is_prime?(max)\n  end\nend", " \
    \ i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n      i +=\
    \ 1\n    end\n  end\n  i\nend", "  i = 2\n  while i <= n\n    if n % i == 0\n\
    \      n /= i\n    else\n      i += 1\n    end\n  end\n  i\nend", "\t# Get all\
    \ the factors of n.\n\tfactors = (1..n).select { |x| n % x == 0 }\n\t# Get only\
    \ the prime factors.\n\tprimes = factors.select { |x| prime?(x) }\n\t# Return\
    \ the largest prime factor.\n\tprimes.max\nend", "  if is_prime?(n)\n    return\
    \ n\n  end\n  i = 2\n  largest_prime = 0\n  while i <= n / 2\n    if is_prime?(i)\
    \ && n % i == 0\n      largest_prime = i\n    end\n    i += 1\n  end\n  largest_prime\n\
    end", "  i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n  \
    \    i += 1\n    end\n  end\n  i\nend", "  # Iterate over the numbers up to n,\
    \ stepping by 2\n  (2..n).step(2) do |i|\n    # Check if i is a factor of n and\
    \ if i is prime\n    if n % i == 0 && is_prime(i)\n      # Return the factor if\
    \ both are true\n      return i\n    end\n  end\nend", "\t\treturn false if n\
    \ == 1\n\t\treturn n if n.prime?\n\t\tfactor = 2\n\t\twhile n > 1\n\t\t\tif n\
    \ % factor == 0\n\t\t\t\tn /= factor\n\t\t\t\tfactor -= 1\n\t\t\tend\n\t\t\tfactor\
    \ += 1\n\t\tend\n\t\tfactor\nend", "  (2..n).each do |i|\n    while n % i == 0\n\
    \      n /= i\n    end\n  end\n  n\nend", "  i = 2\n  last_prime = 0\n  while\
    \ i <= n do\n    if n % i == 0\n      last_prime = i\n      n /= i\n    else\n\
    \      i += 1\n    end\n  end\n  last_prime\nend", "  i = 1\n  prime_factors =\
    \ []\n  until n == 1\n    i += 1\n    if n % i == 0\n      if is_prime?(i)\n \
    \       prime_factors << i\n        n /= i\n        i = 1\n      end\n    end\n\
    \  end\n  prime_factors.max\nend", "    while n.even?\n        n /= 2\n    end\n\
    \    i = 3\n    while i <= Math.sqrt(n)\n        while n % i == 0\n          \
    \  n /= i\n        end\n        i += 2\n    end\n    return n\nend", "  i = 2\n\
    \  while i < n\n    while n % i == 0\n      n /= i\n    end\n    i += 1\n  end\n\
    \  return n\nend", '  return largest_prime_factor(n/2) if n%2 == 0', "  # To find\
    \ the smallest prime factor, this function works backwards from n\n  # dividing\
    \ by the next lowest prime until a factor is found. Then, it\n  # recursively\
    \ calls this function to find the largest prime factor of the\n  # remaining number.\n\
    \  def smallest_prime_factor(n)\n    if n % 2 == 0\n      return 2\n    else\n\
    \      return (3..n).step(2).find { |x| n % x == 0 }\n    end\n  end", "  max\
    \ = 0\n  (2..Math.sqrt(n)).each do |num|\n    if (n % num == 0)\n      while (n\
    \ % num == 0)\n        n /= num\n      end\n      max = num\n    end\n  end\n\
    \  max\nend", "  factors = prime_factors(n)\n  factors[-1]\nend", "  return 2\
    \ if n == 2\n  largest_prime = 3\n  i = 5\n  while i <= n\n    largest_prime =\
    \ i if n % i == 0 && is_prime(i)\n    i += 2\n  end\n  largest_prime\nend", " \
    \ i = 2\n  while i < n do\n    if n % i == 0\n      n /= i\n    else\n      i\
    \ += 1\n    end\n  end\n  n\nend", "    divisor = 2\n    while divisor <= n\n\
    \        if n % divisor == 0\n            largest_factor = n / divisor\n     \
    \       return largest_prime_factor(largest_factor)\n        end\n        divisor\
    \ += 1\n    end\n    return n\nend", "  largest_factor = 0\n  starting_value =\
    \ n\n  current_value = n\n  for i in 2..current_value\n    #while current_value\
    \ % i == 0\n    if current_value % i == 0\n      current_value = current_value\
    \ / i\n      largest_factor = i\n    end\n  end\n  largest_factor\nend", "  primes\
    \ = []\n  (1..n).each do |num|\n    primes << num if prime?(num)\n  end\n  primes.last\n\
    end", '  return 0 if n <= 1', "  factor = 2\n  while factor < n\n    if n % factor\
    \ == 0\n      n /= factor\n    else\n      factor += 1\n    end\n  end\n  factor\n\
    end", "  smallest_divisor = 2\n  num = n\n  while (num > smallest_divisor)\n \
    \   if num % smallest_divisor == 0\n      num = num / smallest_divisor\n    else\n\
    \      smallest_divisor += 1\n    end\n  end\n  smallest_divisor\nend", "    factors\
    \ = factorization(n)\n    factors.max\nend", "  i = 2\n  while i < n\n    if n\
    \ % i == 0\n      return [largest_prime_factor(i), largest_prime_factor(n/i)].max\n\
    \    end\n    i += 1\n  end\n  n\nend", "  i = 1\n  while i <= n\n    if is_prime?(i)\
    \ && (n % i == 0)\n      return i\n    end\n    i += 1\n  end\nend", "  (1..n).select\
    \ { |num| n % num == 0 && prime?(num) }.max\nend", "  factors = []\n  counter\
    \ = 1\n  while counter < n\n    factors << counter if n % counter == 0\n    counter\
    \ += 1\n  end\n  factors.each do |n|\n    factors.delete(n) if !is_prime?(n)\n\
    \  end\n  factors.max\nend", "  if is_prime?(n)\n    return n\n  else\n    (1..n/2).each\
    \ do |i|\n      if n % i == 0 && is_prime?(i)\n        return i\n      end\n \
    \   end\n  end\nend", "\tfactor = 2\n\twhile factor <= n\n\t\tif n % factor ==\
    \ 0\n\t\t\tn /= factor\n\t\telse\n\t\t\tfactor += 1\n\t\tend\n\tend\n\tfactor\n\
    end", "    primes = []\n    divisor = 2\n    max_divisor = Math.sqrt(n)\n    while\
    \ divisor <= max_divisor\n        while n % divisor == 0\n            primes <<\
    \ divisor\n            n /= divisor\n            max_divisor = Math.sqrt(n)\n\
    \        end\n        divisor += 1\n    end\n    primes << n\n    primes.last\n\
    end", "  # \nend", "  pfs = prime_factors(n)\n  pfs[-1]\nend", "    i = 2\n  \
    \  while i <= n\n        if n % i == 0\n            n /= i\n        else\n   \
    \         i += 1\n        end\n    end\n    return i\nend", "  i = 2\n  while\
    \ i < n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n\
    \  return n\nend", "\tlpf = 1\n\t(2..Math.sqrt(n)).each do |i|\n\t\tif n % i ==\
    \ 0\n\t\t\tlpf = i\n\t\t\t# Keep testing all of the prime factors\n\t\t\twhile\
    \ n % i == 0\n\t\t\t\tn /= i\n\t\t\tend\n\t\tend\n\tend\n\tif n > lpf\n\t\treturn\
    \ n\n\telse\n\t\treturn lpf\n\tend\nend", "  if n == 1\n    return nil\n  end\n\
    \  i = 2\n  while i <= n\n    if n % i == 0\n      return largest_prime_factor(n\
    \ / i)\n    end\n    i += 1\n  end\nend", "  i = 2\n  while i < n\n    if n %\
    \ i == 0\n      return largest_prime_factor(n / i)\n    end\n    i += 1\n  end\n\
    \  n\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
