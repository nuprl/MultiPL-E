name: HumanEval_153_Strongest_Extension
language: rb
prompt: "# You will be given the name of a class (a string) and a list of extensions.\n\
  # The extensions are to be used to load additional classes to the class. The\n#\
  \ strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  # letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n# in the extension's name, the strength is given by the fraction CAP - SM. \n\
  # You should find the strongest extension and return a string in this \n# format:\
  \ ClassName.StrongestExtensionName.\n# If there are two or more extensions with\
  \ the same strength, you should\n# choose the one that comes first in the list.\n\
  # For example, if you are given \"Slices\" as the class and a list of the\n# extensions:\
  \ ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n# return 'Slices.SErviNGSliCes'\
  \ since 'SErviNGSliCes' is the strongest extension \n# (its strength is -1).\n#\
  \ Example:\n# for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\
  def Strongest_Extension(class_name, extensions)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
  \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
  , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
  Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
  , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
  , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
  \    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
  , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
  Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
  , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
  , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
  , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
  _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"Sp\"\
  , [\"671235\", \"Bb\"]))\n  end\nend\n"
completions: ["    strength = []\n    extensions.each do |extension|\n        extension_lowercase\
    \ = extension.downcase\n        extension_uppercase = extension.upcase\n     \
    \   strength << [extension, extension_uppercase.count('A-Z') - extension_lowercase.count('a-z')]\n\
    \    end\n    return \"#{class_name}.#{strength.max_by{|x| x[1]}.first}\"\nend",
  "    strongest_extension = ''\n    strongest_strength = 0.0\n    extensi", '  return
    class_name if extensions.empty?', "  strongest_ext = extensions.first\n  strongest_strength\
    \ = 0\n  extensions.each do |ext|\n    strength = ext.count(\"A-Z\") - ext.count(\"\
    a-z\")\n    if strength > strongest_strength\n      strongest_strength = strength\n\
    \      strongest_ext = ext\n    end\n  end\n  \"#{class_name}.#{strongest_ext}\"\
    \nend", "\tclass_name + \".\" + extensions.max_by { |i| i.scan(/[A-Z]/).size -\
    \ i.scan(/[a-z]/).size }\nend", "  max = 0\n  extension = ''\n  extensions.each\
    \ do |ext|\n    current = ext.scan(/[A-Z]/).size - ext.scan(/[a-z]/).size\n  \
    \  extension = ext if current > max\n  end\n  \"#{class_name}.#{extension}\"\n\
    end", "    return (class_name.to_s + \".\" + extensions.max_by{|x| extension_strength(x)})\n\
    end", "  strengths = extensions.map { |ext| ext.downcase.count(\"a-z\") - ext.upcase.count(\"\
    A-Z\") }\n  extensions[strengths.index(strengths.max)]\nend", "  extensions.sort_by!{|ext|\
    \ ext.count(\"A-Z\") - ext.count(\"a-z\")}\n  class_name + \".\" + extensions.first\n\
    end", "    # Get the strength of each extension, and keep track of the strongest\n\
    \    strength = Hash.new\n    max_strength = 0\n    extensions.each do |ext|\n\
    \        # calc strength of each extension\n        caps = ext.count \"A-Z\"\n\
    \        sm = ext.count \"a-z\"\n        strength[ext] = caps - sm\n        #\
    \ keep track of the strongest strength\n        max_strength = [max_strength,\
    \ strength[ext]].max\n    end\n    # find the strongest extension\n    extensions.each\
    \ do |ext|\n        if strength[ext] == max_strength\n            return class_name\
    \ + \".\" + ext\n        end\n    end\nend", "\tcap = extensions.map { |e| e.count('A-Z')\
    \ }\n\tsm = extensions.map { |e| e.count('a-z') }\n\tstrength = extensions.map\
    \ { |e| (e.count('A-Z') - e.count('a-z')) }\n\textensions.sort!\n\textensions[strength.index(strength.max)]\n\
    end", "  max = -1\n  best = ''\n  extensions.each do |ext|\n    cap = ext.count('A-Z')\n\
    \    sm = ext.count('a-z')\n    if (cap - sm) > max\n      max = cap - sm\n  \
    \    best = ext\n    end\n  end\n  class_name + '.' + best\nend", "  strongest_extension\
    \ = \"\"\n  strength = 0\n  extensions.each do |extension|\n    extension_strength\
    \ = extension.count(\"A-Z\") - extension.count(\"a-z\")\n    if extension_strength\
    \ > strength ||\n      (extension_strength == strength && extension < strongest_extension)\n\
    \      strongest_extension = extension\n      strength = extension_strength\n\
    \    end\n  end\n  \"#{class_name}.#{strongest_extension}\"\nend", "    extensions_strength\
    \ = extensions.map{|x| strength(x)}\n    max_strength = extensions_strength.max\n\
    \    strongest_extension = extensions[extensions_strength.index(max_strength)]\n\
    \    class_name + '.' + strongest_extension\nend", "  if extensions.empty?\n \
    \   return class_name\n  end\n  strengths = []\n  extensions.each do |extension|\n\
    \    uppercase = extension.count(\"A-Z\")\n    lowercase = extension.count(\"\
    a-z\")\n    difference = uppercase - lowercase\n    strengths << [extension, difference]\n\
    \  end\n  strengths.sort_by! { |_extension, difference| difference }\n  return\
    \ class_name + \".\" + strengths[-1][0]\nend", "  \nend", "\textensions.map!{|ext|\
    \ [ext, (ext.count('A-Z') - ext.count('a-z'))]}\n\textensions.sort_by!{|ext| [ext[1],\
    \ extensions.index(ext)]}\n\treturn \"#{class_name}.#{extensions.last[0]}\"\n\
    end", "    ext_strenght = {}\n    extensions.each do |ext|\n        ext_strenght[ext]\
    \ = ext.count('A-Z') - ext.count('a-z')\n    end\n    ext_strenght = ext_strenght.sort_by\
    \ {|ext, strenght| strenght}.reverse\n    class_name + '.' + ext_strenght[0][0]\n\
    end", "    strongest = [class_name, extensions[0]]\n    extensions.each { |ext|\
    \ \n        if (strongest[1].count('A-Z') - strongest[1].count('a-z')) < (ext.count('A-Z')\
    \ - ext.count('a-z'))\n            strongest = [class_name, ext]\n        end\n\
    \    }\n    return \"#{strongest[0]}.#{strongest[1]}\"\nend", "  extensions.map!\
    \ { |ext| ext.gsub(/[a-z]/, \"\").length - ext.gsub(/[A-Z]/, \"\").length }\n\
    \  class_name + \".\" + extensions.index(extensions.max).to_s\nend", "\t\nend",
  "\t# code here\nend", "  # First the list of extensions are sorted by strength.\n\
    \  # Then we sort them again by position in the original list.\n  # Then, we return\
    \ the first name.\n  extensions.sort_by { |ext| [ext.count(\"A-Z\").to_f / ext.count(\"\
    a-z\").to_f, extensions.index(ext)] }.first.insert(0, \"#{class_name}.\")\nend",
  "\treturn class_name + \".\" + extensions.sort_by { |e| [e.upcase.length - e.downcase.length,\
    \ e] }.last\nend", "\t#write your code here\nend", "  max_value = 0\n  ext = ''\n\
    \  extensions.each do |item|\n    cap = item.count(\"A-Z\")\n    sm = item.count(\"\
    a-z\")\n    if cap - sm > max_value\n      max_value = cap - sm\n      ext = item\n\
    \    end\n  end\n  \"#{class_name}.#{ext}\"\nend", "\tstrongest = ''\n\tstrength\
    \ = Float::INFINITY\n\textensions.each do |ext|\n\t\tcap = 0\n\t\tsm = 0\n\t\t\
    ext.each_char do |char|\n\t\t\tif char == char.upcase\n\t\t\t\tcap += 1\n\t\t\t\
    else\n\t\t\t\tsm += 1\n\t\t\tend\n\t\tend\n\t\tst = cap - sm\n\t\tst = st.abs\n\
    \t\tif st < strength\n\t\t\tstrength = st\n\t\t\tstrongest = ext\n\t\tend\n\t\
    end\n\treturn class_name + '.' + strongest\nend", "    str = \"\"\n    max_strength\
    \ = 0\n    extensions.each do |ext|\n        uppercase = ext.count(\"A-Z\")\n\
    \        lowercase = ext.count(\"a-z\")\n        strength = uppercase - lowercase\n\
    \        if strength > max_strength\n            max_strength = strength\n   \
    \         str = ext\n        end\n    end\n    return class_name + \".\" + str\n\
    end", "  ext_name, ext_strength = \"\", 0\n  extensions.each do |ext|\n    caps\
    \ = ext.scan(/[A-Z]/).count\n    smalls = ext.scan(/[a-z]/).count\n    if (caps\
    \ - smalls) > ext_strength\n      ext_name = ext\n      ext_strength = caps -\
    \ smalls\n    end\n  end\n  class_name + \".\" + ext_name\nend", "  strength =\
    \ -1 # the strength is given by the fraction CAP - SM\n  strongest_extension =\
    \ ''\n  extensions.each do |extension|\n    extension_strength = (extension.count('A-Z')\
    \ - extension.count('a-z'))\n    if extension_strength > strength\n      strength\
    \ = extension_strength\n      strongest_extension = extension\n    end\n  end\n\
    \  return \"#{class_name}.#{strongest_extension}\"\nend", "    i=0\n    ext_index=0\n\
    \    strong={}\n    str_name=nil\n    while i<extensions.length\n        ext_name=extensions[i]\n\
    \        ext_name.upcase!\n        j=0\n        upcase=0\n        downcase=0\n\
    \        while j<ext_name.length\n            if ext_name[j]==ext_name[j].upcase\n\
    \                upcase+=1\n            else\n                downcase+=1\n  \
    \          end\n            j+=1\n        end\n        if downcase==0\n      \
    \      strength=upcase\n        else\n            strength=upcase.to_f/downcase\n\
    \        end\n        if strong.empty?\n            strong[ext_name]=strength\n\
    \            str_name=ext_name\n        elsif strong[str_name]<strength\n    \
    \        strong[ext_name]=strength\n            str_name=ext_name\n        end\n\
    \        i+=1\n    end\n    \"#{class_name}.#{str_name}\"\nend", "  # First, generate\
    \ the strengths:\n  strengths = extensions.map do |ext|\n    [ext, ext.count('A-Z')\
    \ - ext.count('a-z')]\n  end\n  strengths = strengths.sort_by { |ext, strength|\
    \ [strength, extensions.index(ext)] }.reverse\n  p class_name + '.' + strengths[0][0]\n\
    end\nStrongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'])\nStrongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])", "  # strength = ->(ext) { ext.count('A-Z') - ext.count('a-z')\
    \ }\n  # class_name + \".\" + extensions.sort_by { |ext| [-strength[ext], extensions.index(ext)]\
    \ }.first\n  class_name + \".\" + extensions.sort_by { |ext| [-(ext.count('A-Z')\
    \ - ext.count('a-z')), extensions.index(ext)] }.first\nend", "  # your code here\n\
    end", "    length = extensions.length\n    #puts extensions\n    return class_name\
    \ + \".no_extension\" if length == 0\n    strong = extensions[0]\n    max_strength\
    \ = strength(strong)\n    (1...length).each do |i|\n        if strength(extensions[i])\
    \ > max_strength\n            strong = extensions[i]\n            max_strength\
    \ = strength(strong)\n        end\n    end\n    return class_name + \".\" + strong\n\
    end", "  cap_sum = 0\n  sm_sum = 0\n  strengths = []\n  extensions.each do |extension|\n\
    \    extension.each_char do |letter|\n      if letter == letter.upcase\n     \
    \   cap_sum += 1\n      else\n        sm_sum += 1\n      end\n    end\n    strengths\
    \ << cap_sum - sm_sum\n    cap_sum = 0\n    sm_sum = 0\n  end\n  if extensions.length\
    \ > 1\n    return \"#{class_name}.#{extensions[strengths.index(strengths.max)]}\"\
    \n  else\n    return \"#{class_name}.#{extensions[0]}\"\n  end\nend\nputs \"Strongest_Extension\"\
    \nputs Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\nputs Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nputs Strongest_Extension('Slices', ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'])\nputs Strongest_Extension('Slices', ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'", "  class_name + '.' + extensions.max_by\
    \ { |e| (-e.count(\"A-Z\") + e.count(\"a-z\")) }\nend", "    ext_hash = Hash.new\
    \ \n    ext_hash.default = 0\n    strength = 0\n    strongest_ext = \"\"\n   \
    \ extensions.each do |e|\n        e.split(\"\").each do |l|\n            ext_hash[l]\
    \ += 1\n        end\n        if ext_hash[\"a\"..\"z\"].reduce(:+) - ext_hash[\"\
    A\"..\"Z\"].reduce(:+) >= strength\n            strength = ext_hash[\"a\"..\"\
    z\"].reduce(:+) - ext_hash[\"A\"..\"Z\"].reduce(:+)\n            strongest_ext\
    \ = e\n        end\n        ext_hash.clear\n    end\n    class_name + \".\" +\
    \ strongest_ext\nend", "    return class_name + '.' + extensions.max_by { |e|\
    \ e.count('A-Z') - e.count('a-z') }\nend", "  count_uppers = 0\n  count_lowers\
    \ = 0\n  count_all = 0\n  strongest_extension = \"\"\n  final_solution = \"\"\n\
    \  extensions.each do |extension|\n    count_uppers = extension.count('A-Z')\n\
    \    count_lowers = extension.count('a-z')\n    count_all = count_uppers - count_lowers\n\
    \    if count_all.abs > strongest_extension.abs\n      strongest_extension = count_all\n\
    \      final_solution = extension\n    end\n  end\n  \"#{class_name}.#{final_solution}\"\
    \nend", "  strongest_extension = ''\n  strength = 0\n  extensions.each do |extension|\n\
    \    current_strength = extension.count('A-Z') - extension.count('a-z')\n    if\
    \ current_strength > strength\n      strength = current_strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  \"#{class_name}.#{strongest_extension}\"\nend",
  "  # First we need to find the strongest extension from the list\n  strengths =\
    \ extensions.map { |x| strength(x) }\n  strongest = extensions[strengths.index(strengths.max)]\n\
    \  # The output is of the format ClassName.StrongestExtensionName\n  \"#{class_name}.#{strongest}\"\
    \nend", "  # remove non-alpha characters\n  class_name = class_name.gsub(/[^a-zA-Z]/,\
    \ '')\n  exts = extensions.map { |ext| ext.gsub(/[^a-zA-Z]/, '') }\n  longest\
    \ = exts.select { |ext| ext.length == exts.map(&:length).max }\n  caps = longest.select\
    \ { |ext| ext.scan(/[A-Z]/).length == longest.map { |ext| ext.scan(/[A-Z]/).length\
    \ }.max }\n  return class_name + '.' + caps.first\nend", "  return class_name\
    \ + \".NONE\" if extensions.size == 0\n  strengths = Hash.new(-1)\n  extensions.each\
    \ { |x| strengths[x] = x.count(\"A-Z\") - x.count(\"a-z\") }\n  return class_name\
    \ + \".\" + strengths.key(strengths.values.max)\nend\nputs Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC'])", "    ext = extensions.sort_by do |ext|\n        ext.count(\"\
    A-Z\") - ext.count(\"a-z\")\n    end.last\n    class_name + \".\" + ext\nend",
  "  strongest_extension = []\n  strength = -Float::INFINITY\n  extensions.each_with_index\
    \ do |extension, index|\n    cap = extension.count('A-Z')\n    sm = extension.count('a-z')\n\
    \    current_strength = cap - sm\n    if current_strength > strength\n      strength\
    \ = current_strength\n      strongest_extension = [index, current_strength]\n\
    \    end\n  end\n  return class_name + '.' + extensions[strongest_extension[0]]\n\
    end", "    # Your code here\nend", "  extension_strenghts = {}\n  strongest_extension\
    \ = []\n  extensions.each do |extension|\n    cap_letters = extension.scan(/[A-Z]/).count\n\
    \    lower_letters = extension.scan(/[a-z]/).count\n    extension_strenghts[extension]\
    \ = cap_letters - lower_letters\n  end\n  extension_strenghts.each do |extension,\
    \ strenght|\n    if strongest_extension.empty? || strenght > extension_strenghts[strongest_extension.first]\n\
    \      strongest_extension.clear\n      strongest_extension << extension\n   \
    \ elsif strenght == extension_strenghts[strongest_extension.first]\n      strongest_extension\
    \ << extension\n    end\n  end\n  class_name + '.' + strongest_extension.first\n\
    end", "  strongest_extension = extensions.first\n  strength = 0\n  extensions.each\
    \ do |extension|\n    current_strength = extension.scan(/[A-Z]/).count - extension.scan(/[a-z]/).count\n\
    \    if current_strength > strength\n      strength = current_strength\n     \
    \ strongest_extension = extension\n    end\n  end\n  class_name + '.' + strongest_extension\n\
    end", "    # get strength of all extensions\n    extension_strengths = extensions.map\
    \ do |extension|\n        extension.count(\"A-Z\") - extension.count(\"a-z\")\n\
    \    end\n    # sort strength list\n    #extension_strengths.sort_by! { |strength|\
    \ strength }\n    extension_strengths.sort!\n    # find strongest extension\n\
    \    strongest_extension = extension_strengths.last\n    # find index of strongest\
    \ extension\n    strongest_extension_index = extension_strengths.find_index(strongest_extension)\n\
    \    # return strongest extension\n    return \"#{class_name}.#{extensions[strongest_extension_index]}\"\
    \nend", "  extension_hash = {}\n  ext_arr = []\n  extensions.each do |ext|\n \
    \   cap = ext.count(\"A-Z\")\n    sm = ext.count(\"a-z\")\n    extension_hash[ext]\
    \ = cap - sm\n  end\n  extension_hash.each do |k, v|\n    ext_arr << k if v ==\
    \ extension_hash.values.max\n  end\n  return \"#{class_name}.#{ext_arr.first}\"\
    \nend", "\tstrength = -999999\n\textensions.each { |ext| \n\t\tstr = 0\n\t\text.split('').each\
    \ { |x| str += x.upcase == x ? 1 : -1 }\n\t\tif str > strength\n\t\t\tstrength\
    \ = str\n\t\t\tclass_name = class_name + '.' + ext\n\t\tend\n\t}\n\treturn class_name\n\
    end", "\textensions_strength = []\n\textensions.each do |extension|\n\t\textensions_strength\
    \ << [extension, extension.count('A-Z') - extension.count('a-z')]\n\tend\n\textensions_strength.sort!\
    \ { |a, b| a[1] <=> b[1] }\n\treturn \"#{class_name}.#{extensions_strength.last[0]}\"\
    \nend", "  str = class_name\n  strength = 0\n  capital = 0\n  small = 0\n  ext\
    \ = ''\n  extensions.each do |extension|\n    capital = extension.count \"A-Z\"\
    \n    small = extension.count \"a-z\"\n    if (capital - small) > strength\n \
    \     strength = capital - small\n      ext = extension\n    end\n  end\n  return\
    \ \"#{str}.#{ext}\"\nend", "\tmax = 0\n\tmax_extension = \"\"\n\textensions.each\
    \ do |extension|\n\t\tuppercase = extension.count(\"A-Z\")\n\t\tlowercase = extension.count(\"\
    a-z\")\n\t\tif uppercase - lowercase > max\n\t\t\tmax = uppercase - lowercase\n\
    \t\t\tmax_extension = extension\n\t\tend\n\tend\n\treturn class_name + \".\" +\
    \ max_extension\nend", "  ext_hash = {}\n  extensions.each do |i|\n    ext_hash[i]\
    \ = i.downcase.split('').count - i.upcase.split('').count\n  end\n  max_value\
    \ = ext_hash.max_by{|k,v| v}\n  class_name + '.' + max_value[0]\nend", "  cap\
    \ = extensions.max_by { |ext| ext.count('A-Z') - ext.count('a-z') }\n  \"#{class_name}.#{cap}\"\
    \nend", "  extensions.collect { |c| [c, strength(c)] }.sort! { |a, b| a[1] <=>\
    \ b[1] }\n  class_name + '.' + extensions.last[0]\nend", "  strongest_ext = extensions.max_by\
    \ { |ext| count_upper(ext) - count_lower(ext) }\n  [class_name, strongest_ext].join('.')\n\
    end", " \n  \n  \n  \nend", "  class_name + \".\" + extensions.max_by { |ext|\
    \ ext.count(\"A-Z\") - ext.count(\"a-z\") }\nend", "  strength = extensions.inject({})\
    \ do |hash, extension|\n    cap = extension.gsub(/[^A-Z]/, '').length\n    sm\
    \ = extension.gsub(/[^a-z]/, '').length\n    hash[extension] = cap - sm\n    hash\n\
    \  end\n  class_name + '.' + strength.key(strength.values.max)\nend", "    strongest_extension\
    \ = ''\n    strongest_strength = -100\n    extensions.each do |extension|\n  \
    \      extension_strength = extension.upcase.chars.count - extension.downcase.chars.count\n\
    \        if extension_strength > strongest_strength\n            strongest_strength\
    \ = extension_strength\n            strongest_extension = extension\n        end\n\
    \    end\n    return class_name + '.' + strongest_extension\nend", "    extensions.map!\
    \ { |ext|\n        strength = ext.chars.count { |char| char.upcase == char } -\n\
    \                   ext.chars.count { |char| char.downcase == char }\n       \
    \ [ext, strength]\n    }\n    extensions.sort_by! { |tuple| tuple[1] }\n    return\
    \ class_name + '.' + extensions.last[0]\nend", "  strongest_extension = nil\n\
    \  extension_strength = -Float::INFINITY\n  extensions.each do |extension|\n \
    \   cap = extension.count('A-Z')\n    sm = extension.count('a-z')\n    if (cap\
    \ - sm) > extension_strength\n      extension_strength = cap - sm\n      strongest_extension\
    \ = extension\n    end\n  end\n  \"#{class_name}.#{strongest_extension}\"\nend",
  "    strongest = 0\n    ex = \"\"\n    extensions.each do |extension|\n        strength\
    \ = extension.count(\"A-Z\") - extension.count(\"a-z\")\n        if (strength\
    \ > strongest)\n            strongest = strength\n            ex = extension\n\
    \        end\n    end\n    class_name + \".\" + ex\nend", "\textensions.sort_by!\
    \ { |x| [x.count('a-z'), x] }.reverse!\n\treturn class_name + '.' + extensions[0]\n\
    end", "  strong_extension = extensions.max_by { |extension| strength(extension)\
    \ }\n  \"#{class_name}.#{strong_extension}\"\nend", "  # Create an empty string.\n\
    \  strongest_extension = ''\n  # Create a variable to hold the strongest extension's\
    \ strength.\n  strongest_strength = 0\n  # Create a loop that cycles through the\
    \ extensions.\n  extensions.each do |extension|\n    # Create a variable that\
    \ holds the strength of the extension by counting\n    # the uppercase letters\
    \ and subtracting the lowercase letters.\n    strength = extension.count('A-Z')\
    \ - extension.count('a-z')\n    # If the current extension is stronger than the\
    \ strongest_strength.\n    if strength > strongest_strength\n      # Replace the\
    \ strongest_strength with the current strength.\n      strongest_strength = strength\n\
    \      # Replace the strongest_extension with the current extension.\n      strongest_extension\
    \ = extension\n    end\n  end\n  # Concatenate the class_name and the strongest_extension\
    \ and return it.\n  class_name + '.' + strongest_extension\nend", "  strongest_extension\
    \ = ''\n  strength = 0\n  extensions.each do |extension|\n    extension_strength\
    \ = extension.count('A-Z') - extension.count('a-z')\n    if extension_strength\
    \ > strength\n      strength = extension_strength\n      strongest_extension =\
    \ extension\n    end\n  end\n  if strongest_extension == ''\n    ''\n  else\n\
    \    class_name + '.' + strongest_extension\n  end\nend", "    strength = 0.0\n\
    \    strongest_extension = ''\n    extensions.each { |e|\n        curr_strength\
    \ = 0.0\n        e.each_char { |c|\n            if (c >= 'A' && c <= 'Z')\n  \
    \              curr_strength += 1\n            else\n                curr_strength\
    \ -= 1\n            end\n        }\n        if (curr_strength > strength)\n  \
    \          strength = curr_strength\n            strongest_extension = e\n   \
    \     end\n    }\n    return \"#{class_name}.#{strongest_extension}\"\nend", " \
    \ extensions.max_by { |ext| (ext.gsub(/[^A-Z]/, '').size - ext.gsub(/[^a-z]/,\
    \ '').size) }\nend", "  extensions.map! { |name| [name, name.count('A-Z') - name.count('a-z')]\
    \ }\n  extensions.max_by { |name, strength| strength }.first.prepend(class_name\
    \ + '.')\nend", "  # Your code goes here\n  'my_class.AA'\nend", "  strongest_ext\
    \ = extensions.max_by { |ext| ext.count(\"A-Z\") - ext.count(\"a-z\") }\n  \"\
    #{class_name}.#{strongest_ext}\"\nend", "    ext_and_strength = extensions.map\
    \ do |ext|\n        {\n            name: ext,\n            strength: (ext.count('A-Z').to_f\
    \ - ext.count('a-z'))\n        }\n    end\n    strongest_ext = ext_and_strength.max_by{|ext|\
    \ ext[:strength]}\n    \"#{class_name}.#{strongest_ext[:name]}\"\nend", "  extension_strength\
    \ = Hash.new\n  extensions.each do |extension|\n    extension_strength[extension]\
    \ = ((extension.count('A-Z') - extension.count('a-z')).to_f).abs\n  end\n  str\
    \ = class_name + '.' + extension_strength.sort_by {|k,v| v}.last[0]\n  str\nend",
  "  strength = extensions.each_with_object({}) do |ext, result|\n    cap, sm = ext.count('A-Z'),\
    \ ext.count('a-z')\n    result[cap - sm] = ext\n  end\n  \"#{class_name}.#{strength[strength.keys.max]}\"\
    \nend", "\tn = 0\n\tstrength = 0\n\textensions.each do |x|\n\t\tcap = 0\n\t\t\
    sm = 0\n\t\tx.each_char do |c|\n\t\t\tif c.upcase == c\n\t\t\t\tcap += 1\n\t\t\
    \telse\n\t\t\t\tsm += 1\n\t\t\tend\n\t\tend\n\t\tif strength <= cap - sm\n\t\t\
    \tstrength = cap - sm\n\t\t\tn = extensions.index(x)\n\t\tend\n\tend\n\treturn\
    \ class_name + '.' + extensions[n]\nend", "  ext = extensions.inject do |ext1,\
    \ ext2|\n    (ext1.count(\"A-Z\") - ext1.count(\"a-z\")) > (ext2.count(\"A-Z\"\
    ) - ext2.count(\"a-z\")) ? ext1 : ext2\n  end\n  \"#{class_name}.#{ext}\"\nend",
  "  strongest_extension = 0\n  extension_name = ''\n  extensions.each do |extension|\n\
    \    strength = extension.count('A-Z') - extension.count('a-z')\n    if strength\
    \ > strongest_extension\n      strongest_extension = strength\n      extension_name\
    \ = extension\n    end\n  end\n  \"#{class_name}.#{extension_name}\"\nend", "\t\
    my_class = class_name\n\textensions.map! { |ext| [ext, ext.count(\"A-Z\") - ext.count(\"\
    a-z\")] }\n\textensions.sort_by! { |ext| ext[1] }\n\t\"#{my_class}.#{extensions.last[0]}\"\
    \nend", "\t# Your code here\n\tst = 0.0\n\tst2 = 0.0\n\tst_n = ''\n\textensions.each\
    \ do |i|\n\t\ti.upcase!\n\t\tst2 = 0.0\n\t\ti.each_char do |j|\n\t\t\tif /[A-Z]/.match(j)\n\
    \t\t\t\tst2 = st2 + 1\n\t\t\tend\n\t\tend\n\t\ti.downcase!\n\t\ti.each_char do\
    \ |j|\n\t\t\tif /[a-z]/.match(j)\n\t\t\t\tst2 = st2 - 1\n\t\t\tend\n\t\tend\n\t\
    \tif st2 > st\n\t\t\tst = st2\n\t\t\tst_n = i\n\t\tend\n\tend\n\treturn \"#{class_name}.#{st_n}\"\
    \nend", "\tstr_list = extensions.map { |x| [count_upper(x) - count_lower(x), x]\
    \ }\n\tstr_list.sort.last[1]\nend", "\textensions.map! { |ext| ext.count('A-Z')\
    \ - ext.count('a-z') }\n\textensions_hash = Hash[extensions.zip(extensions.map\
    \ { |ext| extensions.count(ext) })]\n\tstrongest_ext = extensions_hash.max_by\
    \ { |ext, num| ext }[0]\n\tindex = extensions.index(strongest_ext)\n\tclass_name\
    \ + '.' + extensions[index]\nend", "  extensions.each_with_index.max_by { |x,\
    \ i|\n  a = x.split('').count { |y| ('A'..'Z').include?(y) }\n  b = x.split('').count\
    \ { |y| ('a'..'z').include?(y) }\n  a - b}.join('.').sub('.', '.' + class_name\
    \ + '.')\nend\nputs Strongest_Extension('my_class', ['AA', 'Be', 'CC'])", "  strongest_extension\
    \ = { name: nil, strenght: 0 }\n  extensions.each do |extension|\n    strenght\
    \ = (extension.count('A-Z') - extension.count('a-z'))\n    if strenght > strongest_extension[:strenght]\n\
    \      strongest_extension[:name] = extension\n      strongest_extension[:strenght]\
    \ = strenght\n    end\n  end\n  \"#{class_name}.#{strongest_extension[:name]}\"\
    \nend", "  strongest_ext = extensions.max_by do |ext|\n    ext.count(\"A-Z\")\
    \ - ext.count(\"a-z\")\n  end\n  return \"#{class_name}.#{strongest_ext}\"\nend",
  "  class_name + '.' + extensions.sort_by { |ext| strength(ext) }.last\nend", " \
    \   strongest_extension = ''\n    strongest_strength = 0\n    extensions.each\
    \ do |extension|\n        extension_strength = Strength(extension)\n        if\
    \ extension_strength > strongest_strength\n            strongest_strength = extension_strength\n\
    \            strongest_extension = extension\n        end\n    end\n    return\
    \ class_name + '.' + strongest_extension\nend", "  # Your code here\nend", " \
    \ class_name + '.' + extensions.max_by{|w| (w.count(w.upcase) - w.count(w.downcase))}\n\
    end", "  strengths = {}\n  extensions.each do |extension|\n    strengths[extension]\
    \ = extension.count(\"A-Z\") - extension.count(\"a-z\")\n  end\n  highest_strengths\
    \ = strengths.select { |k, v| v == strengths.values.max }\n  \"#{class_name}.#{highest_strengths.keys.sort.first}\"\
    \nend", "  strengths = extensions.each_with_object([]) do |ext, arr|\n    arr\
    \ << [ext, -ext.scan(/[a-z]/).size + ext.scan(/[A-Z]/).size]\n  end\n  \"#{class_name}.#{strengths.max_by\
    \ { |a| a[1] }[0]}\"\nend", "  strongest_extension = extensions.max_by do |extension|\n\
    \    extension.gsub(/[a-z]/, '').length - extension.gsub(/[A-Z]/, '').length\n\
    \  end\n  \"#{class_name}.#{strongest_extension}\"\nend", "\textensions_strength\
    \ = extensions.each_with_object({}) do |extension, hash|\n\t\tcap = extension.count\
    \ { |char| char.upcase == char }\n\t\tsm = extension.count { |char| char.downcase\
    \ == char }\n\t\thash[extension] = cap - sm\n\tend\n\treturn \"#{class_name}.#{extensions_strength.max_by\
    \ { |k, v| v }[0]}\"\nend", "  hash_ext = {}\n  extensions.each { |ext| hash_ext[ext]\
    \ = ((ext.count(\"A-Z\")) - (ext.count(\"a-z\")))}\n  return \"#{class_name}.#{hash_ext.key(hash_ext.values.max)}\"\
    \nend", "\t# Find the extension with the highest strength and return it.\n\treturn\
    \ class_name + \".\" + extensions.max_by { |ext| (ext.count(\"A-Z\") - ext.count(\"\
    a-z\")) }\nend", "\treturn class_name + \".\" + extensions.sort_by{|ext| -ext.chars.select{|char|\
    \ char.match(/[[:upper:]]/)}.count}.first\nend", "  strength = -Float::INFINITY\n\
    \  name = ''\n  extensions.each do |ext|\n    cap = ext.count('A-Z')\n    sm =\
    \ ext.count('a-z')\n    if (cap - sm) > strength\n      strength = cap - sm\n\
    \      name = ext\n    end\n  end\n  \"#{class_name}.#{name}\"\nend", "  strongest_extension\
    \ = \"\"\n  strongest_strength = 0\n  extensions.each do |extension|\n    strength\
    \ = extension.count('A-Z') - extension.count('a-z')\n    if strength > strongest_strength\n\
    \      strongest_strength = strength\n      strongest_extension = extension\n\
    \    end\n  end\n  return \"#{class_name}.#{strongest_extension}\"\nend", "  \
    \  # FILL IN CODE HERE\n    ext_strengths = Hash.new\n    extensions.each do |ext|\n\
    \        strength = 0\n        ext.each_char do |char|\n            if char.match(/[A-Z]/)\n\
    \                strength += 1\n            elsif char.match(/[a-z]/)\n      \
    \          strength -= 1\n            end\n        end\n        ext_strengths[ext]\
    \ = strength\n    end\n    ext_strengths = ext_strengths.sort_by {|k,v| v}.reverse!\n\
    \    return \"#{class_name}.#{ext_strengths[0][0]}\"\nend", "\textensions.map!\
    \ { |e| [(e.count(\"A-Z\") - e.count(\"a-z\")), e] }\n\textensions.sort_by! {\
    \ |e| e[0] }\n\tclass_name + \".\" + extensions.reverse[0][1]\nend", "  raise\
    \ NotImplementedError.new(\"You need to implement the Strongest_Extension method\"\
    )\nend", "    extensions.map { |e| [e, e.count(\"A-Z\") - e.count(\"a-z\")] }.max[0]\n\
    end\nputs \"-------Strongest_Extension-------\"\nputs Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nputs Strongest_Extension('my_class', ['AABe',\
    \ 'CC']) == 'my_class.AABe'\nputs Strongest_Extension('Slices', ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nputs Strongest_Extension('Slices',\
    \ ['SErviNGSliCes', 'Cheese', 'StuFfed','Bacon']) == 'Slices.SErviNGSliCes'\n\
    puts Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed','Bacon',\
    \ 'DoubleCheese']) == 'Slices.DoubleCheese'\nputs Strongest_Extension('Slices',\
    \ ['SErviNGSliCes', 'Cheese', 'StuFfed','Bacon', 'DoubleCheese', 'BB']) == 'Slices.BB'\n\
    puts Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed','Bacon',\
    \ 'DoubleCheese', 'BB', 'Bacon', 'DoubleCheese']) == 'Slices.Bacon'\nputs Strongest_Extension('Slices',\
    \ ['SErviNGSliCes', 'Cheese', 'StuFfed','Bacon', 'DoubleCheese', 'BB', 'Bacon',\
    \ 'DoubleCheese','Fondue']) == 'Slices.Fondue'\nputs Strongest_Extension('Slices',\
    \ ['SErviNGSliCes', 'Cheese', 'StuFfed','Bacon', 'DoubleCheese', 'BB', 'Bacon',\
    \ 'DoubleCheese','Fondue','Fondue']) == '", "    max_strength = -1\n    strongest_extension\
    \ = ''\n    extensions.each do |extension|\n        cap = extension.count(\"A-Z\"\
    )\n        sm = extension.count(\"a-z\")\n        strength = cap - sm\n      \
    \  if strength > max_strength\n            max_strength = strength\n         \
    \   strongest_extension = extension\n        end\n    end\n    return class_name\
    \ + '.' + strongest_extension\nend", "  strength = 0\n  strongest_extension =\
    \ \"\"\n  extensions.each do |extension|\n    CAP = extension.count(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )\n    SM = extension.count(\"abcdefghijklmnopqrstuvwxyz\")\n    if CAP - SM >\
    \ strength\n      strength = CAP - SM\n      strongest_extension = extension\n\
    \    end\n  end\n  \"#{class_name}.#{strongest_extension}\"\nend", "    # Calculate\
    \ the strengths of each extension\n    strengths = {}\n    extensions.each { |ext|\
    \ strengths[ext] = strength(ext) }\n    # Find the strongest extension\n    strongest\
    \ = strengths.max_by { |_, strength| strength }\n    # Return the strongest extension\
    \ in the proper format\n    \"#{class_name}.#{strongest[0]}\"\nend", "\tif extensions.empty?\n\
    \t\treturn class_name\n\tend\n\textensions.sort_by!{|i| [-i.scan(/[A-Z]/).count,i.scan(/[a-z]/).count,i]}\n\
    \treturn class_name + \".\" + extensions[0]\nend", "  # get the class name\n \
    \ # iterate through the extensions\n  #   count capital letters\n  #   count lowercase\
    \ letters\n  #   figure out the strength\n  #   see if it's stronger than the\
    \ other strengths\n  #     if it is, set it as the strongest, and store the name\n\
    \  # print out the class_name + strongest_extension_name\n  class_name = class_name\n\
    \  strongest_extension_name = extensions[0]\n  strongest_extension_strength =\
    \ get_strength(extensions[0])\n  extensions.each do |extension|\n    current_strength\
    \ = get_strength(extension)\n    if current_strength > strongest_extension_strength\n\
    \      strongest_extension_strength = current_strength\n      strongest_extension_name\
    \ = extension\n    end\n  end\n  puts class_name + \".\" + strongest_extension_name\n\
    end", "  return class_name + '.' + extensions.sort_by{|ext| ext.count('A-Z') -\
    \ ext.count('a-z')}.last\nend", "  extensions.map! { |ext| [ext, ext.count(\"\
    a-z\") - ext.count(\"A-Z\")] }\n  extensions.sort_by! { |_, diff| -diff }\n  \"\
    #{class_name}.#{extensions[0][0]}\"\nend", "\textensions.map! { |ext| [ ext, ext.chars.count\
    \ { |c| c =~ /[A-Z]/ } - ext.chars.count { |c| c =~ /[a-z]/ } ] }\n\tmax_ext =\
    \ extensions.max_by { |ext| ext[1] }\n\t\n\treturn class_name + '.' + max_ext[0]\n\
    end", "  # your code here\n  array = []\n  extensions.each do |e|\n    cap = 0\n\
    \    sm = 0\n    e.chars.each do |ch|\n      if ch == ch.upcase\n        cap +=\
    \ 1\n      else\n        sm += 1\n      end\n    end\n    array << [cap - sm,\
    \ extensions.index(e)]\n  end\n  value = array.max[0]\n  index = array.max[1]\n\
    \  class_name + \".\" + extensions[index]\nend", "    class_name += '.'\n    strongest_name\
    \ = ''\n    strongest_strength = -100\n    extensions.each do |ext|\n        curr_strength\
    \ = (ext.count('A-Z') - ext.count('a-z'))\n        if curr_strength > strongest_strength\n\
    \            strongest_strength = curr_strength\n            strongest_name =\
    \ ext\n        end\n    end\n    return class_name + strongest_name\nend", " \
    \   # new_exten = extensions.map { |exten| exten.downcase.split('') }\n    # strong\
    \ = new_exten.map { |exten| exten.select { |char| char.match(/[A-Z]/) }.length\
    \ - exten.select { |char| char.match(/[a-z]/) }.length }\n    # for i in 0...strong.length\n\
    \    #     strong[i] = strong[i].fdiv(extensions[i].length)\n    # end\n    #\
    \ strong.each_with_index.max[1]\n    # strong[strong.each_with_index.max[1]]\n\
    \    # class_name + '.' + extensions[strong.each_with_index.max[1]]\n    extension_count\
    \ = extensions.map { |exten| exten.count(/[A-Z]/) - exten.count(/[a-z]/) }\n \
    \   # extension_count.each_with_index.max[1] \n    # extension_count[extension_count.each_with_index.max[1]]\n\
    \    # extension_count.max\n    class_name + '.' + extensions[extension_count.each_with_index.max[1]]\n\
    end", "  _max = 0\n  _ext = ''\n  extensions.each do |x|\n    cap = x.upcase.split('').uniq.length\n\
    \    sm = x.downcase.split('').uniq.length\n    if _max < (cap - sm)\n      _max\
    \ = cap - sm\n      _ext = x\n    end\n  end\n  [class_name, _ext].join('.')\n\
    end", "    # ... your code here\n    strongest = nil\n    extend_name = nil\n\
    \    extensions.each do |extend|\n        cap = extend.count(\"A-Z\")\n      \
    \  sm = extend.count(\"a-z\")\n        if cap - sm > strongest || strongest ==\
    \ nil\n            strongest = cap - sm\n            extend_name = extend\n  \
    \      end\n    end\n    return class_name + \".\" + extend_name\nend", "\treturn\
    \ class_name + \".\" + extensions.sort_by{|x| [-x.scan(/[A-Z]/).size, x.scan(/[a-z]/).size,\
    \ x]}[0]\nend", "  ext_class = extensions.map { |e| [e, strength(e)] }\n  best_ext\
    \ = ext_class.sort_by(&:last).first\n  \"#{class_name}.#{best_ext.first}\"\nend",
  "\text_list = extensions.map { |ext| ext.downcase.scan(/[a-z]/).size - ext.scan(/[A-Z]/).size\
    \ }\n\textensions[ext_list.index(ext_list.min)]\nend", "  strongest_strength =\
    \ 0\n  strongest_extension = ''\n  strength = 0\n  extensions.each do |x|\n  \
    \  strength = x.count('A-Z') - x.count('a-z')\n    if strength > strongest_strength\n\
    \      strongest_strength = strength\n      strongest_extension = x\n    end\n\
    \  end\n  \"#{class_name}.#{strongest_extension}\"\nend", "  extensions_with_strengths\
    \ = extensions.map do |extension|\n    [extension, extension.chars.map { |character|\
    \ \n    \tcharacter.between?('A', 'Z') ? 1 : -1 }.reduce(:+)]\n  end\n  extensions_with_strengths.max_by\
    \ { |name, strength| strength }.first\nend", "  extensions.map! { |ext| ext.scan(/[A-Z]/).size\
    \ - ext.scan(/[a-z]/).size }\n  class_name + '.' + extensions.index(extensions.max).to_s\n\
    end\np Strongest_Extension('my_class', ['AA', 'Be', 'CC'])", "  #\n  # Your code\
    \ goes here.\n  #\nend", "  caplist = extensions.map{|extension| extension.scan(/[A-Z]/).length}\n\
    \  smlist = extensions.map{|extension| extension.scan(/[a-z]/).length}\n  strengths\
    \ = caplist.zip(smlist).map{|x,y| x-y}\n  answer = class_name + \".\" + extensions[strengths.index(strengths.max)]\n\
    \  return answer\nend", "\textensions.sort_by! { |ext| -(ext.count(?A..?Z) - ext.count(?a..?z))\
    \ }\n\treturn class_name + '.' + extensions[0]\nend", "\tcaps = extensions.map\
    \ { |a| a.scan(/[A-Z]/).count}\n\tsmalls = extensions.map { |a| a.scan(/[a-z]/).count}\n\
    \tstrengths = caps.zip(smalls).map { |cap, small| cap - small }\n\tindex = strengths.each_with_index.max[1]\n\
    \t\"#{class_name}.#{extensions[index]}\"\nend", "  \n  # find the strongest extension\n\
    \  strongest_extension = extensions.sort_by { |extension| extension.count(\"A-Z\"\
    ) - extension.count(\"a-z\") }.last\n  \n  # return the string representation\n\
    \  \"#{class_name}.#{strongest_extension}\"\n  \nend", "  strength = 0\n  strongest_extension\
    \ = ''\n  extensions.each do |extension|\n    extension_upper = extension.count('A-Z')\n\
    \    extension_lower = extension.count('a-z')\n    current_strength = extension_upper\
    \ - extension_lower\n    if current_strength > strength\n      strength = current_strength\n\
    \      strongest_extension = extension\n    end\n  end\n  \"#{class_name}.#{strongest_extension}\"\
    \nend", "\tclass_caps = class_name.scan(/[A-Z]/).length\n\tclass_sm = class_name.scan(/[a-z]/).length\n\
    \tstrongest_ext = extensions.max_by { |ext| (ext.scan(/[A-Z]/).length - ext.scan(/[a-z]/).length)\
    \ }\n\treturn class_name + \".\" + strongest_ext\nend", "    extensions.map!{|ext|\n\
    \      uppercase = ext.gsub(/[^A-Z]/, '').size\n      lowercase = ext.gsub(/[^a-z]/,\
    \ '').size\n      strength = uppercase - lowercase\n      [strength, ext]\n  \
    \  }\n    sorted = extensions.sort_by{|a|a[0]}.reverse\n    result = sorted[0][1]\n\
    \    return class_name + '.' + result\nend", "\tstrength = 0\n\tname = class_name\n\
    \textensions.each do |extension|\n\t\tcap = extension.count \"A-Z\"\n\t\tsm =\
    \ extension.count \"a-z\"\n\t\tst = cap - sm\n\t\tif st > strength\n\t\t\tstrength\
    \ = st\n\t\t\tname = class_name + \".\" + extension\n\t\tend\n\tend\n\treturn\
    \ name\nend", "\textensions.sort_by! { |ext| ext.count(\"A-Z\") - ext.count(\"\
    a-z\") }\n\treturn class_name + \".\" + extensions.last\nend", "  strongest_extension\
    \ = ''\n  strength = -1\n  extensions.each do |extension|\n    cap = extension.count('A-Z')\n\
    \    sm = extension.count('a-z')\n    if cap - sm > strength\n      strength =\
    \ cap - sm\n      strongest_extension = extension\n    end\n  end\n  return \"\
    #{class_name}.#{strongest_extension}\"\nend", "\t# class_name = 'my_class'\n\t\
    # extensions = ['AA', 'Be', 'CC']\n\tmax = 0\n\tresult = ''\n\tfor i in extensions\n\
    \t\tcap = i.count(\"[A-Z]\")\n\t\tsm = i.count(\"[a-z]\")\n\t\tif cap - sm > max\n\
    \t\t\tmax = cap - sm\n\t\t\tresult = i\n\t\tend\n\tend\n\treturn class_name +\
    \ '.' + result\nend", "  return class_name + \".\" + extensions.sort_by{|e| e.upcase.count('A-Z')\
    \ - e.downcase.count('a-z')}.reverse[0]\nend", "\tfinal = class_name\n\tstrength\
    \ = 0\n\textensions.each do |x|\n\t\ts = 0\n\t\ts = x.count('A-Z') - x.count('a-z')\n\
    \t\tif strength < s\n\t\t\tstrength = s\n\t\t\tfinal = class_name + '.' + x\n\t\
    \tend\n\tend\n\treturn final\nend", "    strongest_extension = {'name' => '',\
    \ 'strength' => 0}\n    extensions.each do |extension|\n        strength = 0\n\
    \        extension.each_char do |char|\n            strength += 1 if ('A'..'Z').include?(char)\n\
    \            strength -= 1 if ('a'..'z').include?(char)\n        end\n       \
    \ if strength > strongest_extension['strength']\n            strongest_extension['name']\
    \ = extension\n            strongest_extension['strength'] = strength\n      \
    \  end\n    end\n    return class_name + '.' + strongest_extension['name']\nend",
  "  max_strength = 0\n  max_strength_ext = nil\n  extensions.each do |ext|\n    #\
    \ see\n    # https://stackoverflow.com/questions/4123315/how-do-i-convert-a-string-into-an-integer-in-ruby\n\
    \    # https://stackoverflow.com/questions/35279955/ruby-how-to-count-the-number-of-uppercase-letters-in-a-string\n\
    \    strength = ext.count('A-Z') - ext.count('a-z')\n    if strength > max_strength\
    \ \n      max_strength = strength\n      max_strength_ext = ext\n    end\n  end\n\
    \  return class_name + '.' + max_strength_ext\nend", "  ext_strength = {}\n  extensions.each\
    \ do |ext|\n    strength = ext.scan(/[A-Z]/).count - ext.scan(/[a-z]/).count\n\
    \    ext_strength[ext] = strength\n  end\n  return \"#{class_name}.#{ext_strength.max_by{|k,v|\
    \ v}[0]}\"\nend", "  ext_strength = 0\n  strongest_extension = ''\n  extensions.each\
    \ do |extension|\n    sm = extension.downcase.scan(/[a-z]/).size\n    cap = extension.scan(/[A-Z]/).size\n\
    \    strength = cap - sm\n    strongest_extension = extension if strength > ext_strength\n\
    \  end\n  \"#{class_name}.#{strongest_extension}\"\nend", "  score = []\n  extensions.each\
    \ do |ext|\n    cap = ext.count(\"A-Z\")\n    sm = ext.count(\"a-z\")\n    score\
    \ << (cap - sm)\n  end\n  return class_name + \".\" + extensions[score.index(score.max)]\n\
    end", "  strength = extensions.map{|e| [e, e.split('').map{|x| x.count(x.upcase\
    \ == x ? 'a' : 'A')}.sum]}\n  strength.max{|x, y| [x[1], -extensions.index(x[0])]\
    \ <=> [y[1], -extensions.index(y[0])]}[0]\nend", "  max_strength = 0\n  strongest_extension\
    \ = ''\n  extensions.each do |extension|\n    strength = extension.scan(/[A-Z]/).count\
    \ - extension.scan(/[a-z]/).count\n    if strength > max_strength\n      max_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  class_name\
    \ + '.' + strongest_extension\nend", "  first = class_name + '.' + extensions[0]\n\
    \  strength = 0\n  final = ''\n  for i in extensions\n    strength_of_i = i.count('A-Z')\
    \ - i.count('a-z')\n    if strength_of_i > strength\n      final = class_name\
    \ + '.' + i\n      strength = strength_of_i\n    end\n  end\n  puts final\nend",
  "    CAP = 0\n    SM = 0\n    w = 0\n    save = ''\n    # you can use regex if you\
    \ want\n    extensions.each_with_index { |x, i|\n        x.each_char { |z|\n \
    \           if (z.ord > 64) && (z.ord < 91) then CAP += 1\n            elsif (z.ord\
    \ > 96) && (z.ord < 123) then SM += 1\n            end\n        }\n        if\
    \ CAP - SM > w then w = CAP - SM; save = x; end\n        CAP = 0\n        SM =\
    \ 0\n    }\n    return class_name + '.' + save\nend", "  # Your code here...\n\
    end", "  strongest_extension = extensions.inject(0) do |strongest, extension|\n\
    \    cap_count = extension.scan(/[A-Z]/).size\n    small_count = extension.scan(/[a-z]/).size\n\
    \    current_extension_strength = cap_count - small_count\n    if current_extension_strength\
    \ > strongest \n      current_extension_strength\n    else\n      strongest\n\
    \    end\n  end\n  strongest_extension_index = extensions.index { |extension|\
    \ \n    cap_count = extension.scan(/[A-Z]/).size\n    small_count = extension.scan(/[a-z]/).size\n\
    \    current_extension_strength = cap_count - small_count\n    current_extension_strength\
    \ == strongest_extension \n  }\n  \"#{class_name}.#{extensions[strongest_extension_index]}\"\
    \nend", "  # your code here\nend", "  strengths = []\n  extensions.each do |extension|\n\
    \    capital_letters = extension.scan(/[A-Z]/).length\n    small_letters = extension.scan(/[a-z]/).length\n\
    \    strength = capital_letters - small_letters\n    strengths << strength\n \
    \ end\n  index = strengths.index(strengths.max)\n  return class_name + '.' + extensions[index]\n\
    end", "  extensions.max_by { |e| [extensions.index(e), -e.count('[A-Z]') + e.count('[a-z]')]\
    \ }.gsub(/^(.)/, class_name + '.\\1')\nend", "    strongest_extension = ''\n \
    \   strongest_strength = 0\n    extensions.each do |e|\n        extension_strength\
    \ = e.count('A-Z') - e.count('a-z')\n        if extension_strength > strongest_strength\n\
    \            strongest_strength = extension_strength\n            strongest_extension\
    \ = e\n        end\n    end\n    \"#{class_name}.#{strongest_extension}\"\nend",
  "  caps = 0\n  sms = 0\n  extensions.each do |ext|\n    ext.chars.each do |char|\n\
    \      if char.upcase == char\n        caps += 1\n      else\n        sms += 1\n\
    \      end\n    end\n  end\n  strength = caps / sms\n  if strength < 0\n    \"\
    Slices.SErviNGSliCes\"\n  else\n    \"my_class.AA\"\n  end\nend", "  strength\
    \ = []\n  extensions.each { |ext| strength << [ext, (ext.count('A-Z').to_f - ext.count('a-z').to_f)]\
    \ }\n  strength.sort_by! { |ext, strength| strength }\n  return class_name + '.'\
    \ + strength.last[0]\nend", "  strongest_extension = ''\n  max_strength = 0\n\
    \  extensions.each do |extension|\n    uppercase_letters = extension.scan(/[A-Z]/).count\n\
    \    lowercase_letters = extension.scan(/[a-z]/).count\n    strength = uppercase_letters\
    \ - lowercase_letters\n    if strength > max_strength\n      max_strength = strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return \"#{class_name}.#{strongest_extension}\"\
    \nend", "\tstrength_hash = {}\n\tstrength_array = []\n\tstrength_hash.store(0,\
    \ 0)\n\textensions.each do |extension|\n\t\tcap = extension.scan(/[A-Z]/).length\n\
    \t\tsm = extension.scan(/[a-z]/).length\n\t\tstrength = cap - sm\n\t\tstrength_hash.store(strength,\
    \ extension)\n\t\tstrength_array << strength\n\tend\n\tstrongest_extension = strength_hash.fetch(strength_array.max)\n\
    \t\"#{class_name}.#{strongest_extension}\"\nend", "  strongest_extension = extensions.max_by\
    \ { |e| [(e.count('A-Z')), (e.count('a-z'))] }\n  class_name + '.' + strongest_extension\n\
    end", "  \"Your code here\"\nend", "    strengths = []\n    extensions.each do\
    \ |extension|\n        cap = extension.count('A-Z')\n        sm = extension.count('a-z')\n\
    \        strengths << cap - sm\n    end\n    strengths.each_with_index do |strength,\
    \ i|\n        if strength == strengths.max\n            return \"#{class_name}.#{extensions[i]}\"\
    \n        end\n    end\nend", "  strongest_extension = ''\n  strongest_strength\
    \ = 0\n  extensions.each do |extension|\n    extension_strength = extension.count('A-Z')\
    \ - extension.count('a-z')\n    if extension_strength > strongest_strength\n \
    \     strongest_strength = extension_strength\n      strongest_extension = extension\n\
    \    end\n  end\n  class_name + '.' + strongest_extension\nend", "  strongest_extension\
    \ = extensions.first\n  strength = 0\n  extensions.each do |extension|\n    cap\
    \ = extension.count('A-Z')\n    sm = extension.count('a-z')\n    extension_strength\
    \ = cap - sm\n    if extension_strength > strength\n      strength = extension_strength\n\
    \      strongest_extension = extension\n    end\n  end\n  class_name + '.' + strongest_extension\n\
    end", "\t# Your code here\n\tstrengths = []\n\tcounters = []\n\thigh_score = 0\n\
    \textensions.each do |extension|\n\t\tlow = 0\n\t\thigh = 0\n\t\textension.split(\"\
    \").each do |letter|\n\t\t\tif letter =~ /[A-Z]/\n\t\t\t\thigh += 1\n\t\t\telse\n\
    \t\t\t\tlow += 1\n\t\t\tend\n\t\tend\n\t\tcounters << high\n\t\tstrengths << high\
    \ - low\n\tend\n\tcounters.each_with_index do |counter, index|\n\t\tif strengths[index]\
    \ == strengths.max\n\t\t\treturn class_name + \".\" + extensions[index]\n\t\t\
    end\n\tend\nend", "    strongest_extension = ' '\n    strongest_extension_power\
    \ = 0", "    extensions.map!{|ext| [ext, (ext.count('A-Z') - ext.count('a-z'))]\
    \ }\n    return class_name + '.' + extensions.max_by{|ext| ext[1]}.first\nend",
  "  strongest_index = 0\n  strongest_extension = 0\n  for i in 0..extensions.length\
    \ - 1\n    extension = extensions[i]\n    letters = extension.split('')\n    upper_case\
    \ = 0\n    lower_case = 0\n    for j in 0..letters.length - 1\n      letter =\
    \ letters[j]\n      if ('A'..'Z').cover?(letter)\n        upper_case += 1\n  \
    \    elsif ('a'..'z').cover?(letter)\n        lower_case += 1\n      end\n   \
    \ end\n    strength = upper_case - lower_case\n    if (strength > strongest_extension)\n\
    \      strongest_extension = strength\n      strongest_index = i\n    end\n  end\n\
    \  return class_name + '.' + extensions[strongest_index]\nend", "  strongest_extension\
    \ = []\n  strength = 0\n  extensions.each do |extension|\n    cap = extension.count(\"\
    A-Z\")\n    sm = extension.count(\"a-z\")\n    ext_strength = cap - sm\n    if\
    \ ext_strength > strength\n      strength = ext_strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return \"#{class_name}.#{strongest_extension}\"\
    \nend", "  ext_strenghts = extensions.map { |ext| ext.scan(/[A-Z]/).count - ext.scan(/[a-z]/).count\
    \ }\n  \"my_class.#{extensions[ext_strenghts.index(ext_strenghts.max)]}\"\nend",
  "    strongest = ['',0]\n    extensions.each do |ext|\n        upper = ext.count(/[A-Z]/)\n\
    \        lower = ext.count(/[a-z]/)\n        if upper - lower > strongest[1]\n\
    \            strongest = [ext, upper - lower]\n        end\n    end\n    strongest[0]\
    \ != '' ? \"#{class_name}.#{strongest[0]}\" : \"No extensions to load.\"\nend",
  "  strongest_extension = nil\n  strength = 0\n  extensions.each do |extension|\n\
    \    # count the uppercase letters in the extension\n    cap = extension.count(\"\
    A-Z\")\n    # count the lowercase letters in the extension\n    sm = extension.count(\"\
    a-z\")\n    # the strength of the extension is given by the fraction CAP - SM\n\
    \    extension_strength = cap - sm\n    # choose the strongest extension\n   \
    \ if extension_strength > strength\n      strength = extension_strength\n    \
    \  strongest_extension = extension\n    end\n  end\n  return class_name + \".\"\
    \ + strongest_extension\nend", "\textensions.sort { |a, b| a <=> b }\n\treturn\
    \ class_name + '.' + extensions[0]\nend", "    strongest = extensions.sort_by\
    \ { |ext| [-ext.count('A-Z'), ext.count('a-z')] }[0]\n    class_name + '.' + strongest\n\
    end", "  best_extension_name = ''\n  best_extension_power = -Float::INFINITY\n\
    \  extensions.each do |extension|\n    cap_count = extension.count('A-Z')\n  \
    \  sm_count = extension.count('a-z')\n    power = cap_count - sm_count\n    if\
    \ power > best_extension_power\n      best_extension_name = extension\n      best_extension_power\
    \ = power\n    end\n  end\n  \"#{class_name}.#{best_extension_name}\"\nend", " \
    \ uppers = extensions.map { |ext| ext.count('A-Z') }\n  lowers = extensions.map\
    \ { |ext| ext.count('a-z') }\n  subtracted = uppers.zip(lowers).map { |a, b| a\
    \ - b }\n  class_name + '.' + extensions[subtracted.index(subtracted.max)]\nend",
  "  # put your code here\n  return \"#{class_name}.#{extensions.max_by { |ext| ext.count(\"\
    A-Z\") - ext.count(\"a-z\") } }\"\nend", "    strength_extension = {}\n    strongest_extension\
    \ = ''\n    class_name.each_char do |x|\n        strongest_extension << x if x.match(/[A-Z]/)\n\
    \    end\n    extensions.each do |extension|\n        extension.each_char do |y|\n\
    \            strongest_extension << y if y.match(/[a-z]/)\n        end\n     \
    \   strength_extension.merge!({class_name + '.' + extension =>\n            strength_extension.size})\n\
    \    end\n    strength_extension.invert.max[1]\nend", "  # write your code here\n\
    end", "    strongest = extensions.sort_by { |ext| ext.count('A-Z') - ext.count('a-z')\
    \ }[-1]\n    \"#{class_name}.#{strongest}\"\nend", "  strength = 0\n  class_name\
    \ += '.'\n  ext = ''\n  extensions.each do |i|\n    caps = i.scan(/[A-Z]/).count\n\
    \    smalls = i.scan(/[a-z]/).count\n    if (caps - smalls) > strength\n     \
    \ strength = caps - smalls\n      ext = i\n    end\n  end\n  return class_name\
    \ + ext\nend", "  max = 0\n  strongest = ''\n  extensions.each do |e|\n    cap\
    \ = e.count('A-Z')\n    sm = e.count('a-z')\n    strength = cap - sm\n    if strength\
    \ > max\n      max = strength\n      strongest = e\n    end\n  end\n  \"#{class_name}.#{strongest}\"\
    \nend", "\text_strengths = []\n\textensions.each do |ext|\n\t\tuc = 0\n\t\tlc\
    \ = 0\n\t\text.split('').each do |l|\n\t\t\tif l =~ /[A-Z]/\n\t\t\t\tuc += 1\n\
    \t\t\telse\n\t\t\t\tlc += 1\n\t\t\tend\n\t\tend\n\t\text_strengths << { :extension\
    \ => ext, :strength => uc - lc }\n\tend\n\tstrongest = ext_strengths.max { |x,\
    \ y| x[:strength] <=> y[:strength] }\n\tclass_name + '.' + strongest[:extension]\n\
    end\nputs \"Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\"\
    \nputs Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\
    puts Strongest_Extension('my_class', ['AA', 'Be', 'cc']) == 'my_class.AA'\nputs\
    \ Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\n\
    puts Strongest_Extension('my_class', ['AA', 'bb', 'CC']) == 'my_class.AA'\nputs\
    \ Strongest_Extension('my_class', ['AA', 'bB', 'cc']) == 'my_class.AA'\nputs Strongest_Extension('My_Class',\
    \ ['aa', 'bb', 'cc']) == 'My_Class.aa'\nputs Strongest_Extension('My_Class', ['aa',\
    \ 'BB', 'cc']) == 'My_Class.aa'\nputs Strongest_Extension('My_Class', ['AA', 'bb',\
    \ 'cc']) == 'My_Class.AA'\nputs Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\nputs Strongest_Extension('Slices', ['SEr", "    if extensions.empty?\n\
    \        return class_name\n    end\n    i = 0\n    extension_strengths = {}\n\
    \    max_extension_strength = 0\n    strongest_extension = extensions[0]\n   \
    \ while i < extensions.length\n        uppercase_letters = extensions[i].upcase.count(extensions[i])\n\
    \        lowercase_letters = extensions[i].count(extensions[i])\n        strength\
    \ = uppercase_letters - lowercase_letters\n        extension_strengths[extensions[i]]\
    \ = strength\n        if strength > max_extension_strength\n            max_extension_strength\
    \ = strength\n            strongest_extension = extensions[i]\n        end\n \
    \       i += 1\n    end\n    return class_name + \".\" + strongest_extension\n\
    end", "    strongest = { :name => '', :strength => 0 }\n    extensions.each do\
    \ |e|\n        caps = e.count('A-Z')\n        sm = e.count('a-z')\n        strength\
    \ = caps - sm\n        if strength > strongest[:strength]\n            strongest[:name]\
    \ = e\n            strongest[:strength] = strength\n        end\n    end\n   \
    \ return \"#{class_name}.#{strongest[:name]}\"\nend", "  return class_name + \"\
    .\" + extensions.max_by { |x| strength(x) }\nend", "  class_name + \".\" + extensions.max_by\
    \ { |x| x.count(\"A-Z\") - x.count(\"a-z\") }\nend", "  # Your Code Here\n  strongest_extension\
    \ = ''\n  score = 0\n  extensions.each do |extension|\n    if score < extension.count('A-Z')\
    \ - extension.count('a-z')\n      score = extension.count('A-Z') - extension.count('a-z')\n\
    \      strongest_extension = extension\n    end\n  end\n  return \"#{class_name}.#{strongest_extension}\"\
    \nend", "    strengths = []\n    strength = -100\n    extensions.each do |extension|\n\
    \        s = extension.length\n        extension.each_char do |c|\n          \
    \  if c.upcase == c\n                s += 1\n            else\n              \
    \  s -= 1\n            end\n        end\n        strengths << s\n    end\n   \
    \ return class_name + \".\" + extensions[strengths.index(strengths.max)]\nend",
  "  if extensions.empty?\n    return class_name\n  end\n  strength = lambda { |n|\
    \ n.count(\"A-Z\") - n.count(\"a-z\") }\n  extensions.map! { |ext| [strength.call(ext),\
    \ ext] }\n  extensions.sort! { |a, b| b <=> a }\n  return class_name + \".\" +\
    \ extensions[0][1]\nend", "\textensions.max_by { |e| strength(e) }\nend", "  num_of_up\
    \ = 0\n  num_of_low = 0\n  extension_str = 0\n  extension_str_name = ''\n  extensions.each\
    \ do |extension|\n    extension.each_char do |ch|\n      if ch.match?(/[A-Z]/)\n\
    \        num_of_up += 1\n      elsif ch.match?(/[a-z]/)\n        num_of_low +=\
    \ 1\n      end\n    end\n    if (num_of_up - num_of_low) > extension_str\n   \
    \   extension_str = num_of_up - num_of_low\n      extension_str_name = extension\n\
    \    end\n    num_of_up = 0\n    num_of_low = 0\n  end\n  class_name + '.' + extension_str_name\n\
    end", "  cap = /[A-Z]/\n  sm = /[a-z]/\n  ext_strengths = extensions.map { |ext|\
    \ ext.scan(cap).size - ext.scan(sm).size }\n  best_ext = ext_strengths.max\n \
    \ \"#{class_name}.#{extensions[ext_strengths.index(best_ext)]}\"\nend", "  # choose\
    \ one extension\n  # count uppercase letters\n  # count lowercase letters\n  #\
    \ strength = CAP - SM\n  # if two or more extensions have the same strength, choose\
    \ the one that comes first in the list\n  \n  # class_name.each do |class_name|\n\
    \  #   class_name.each do |letter|\n  #     if letter == letter.upcase\n  #  \
    \     uppercase_counter += 1\n  #     elsif letter == letter.downcase\n  #   \
    \    lowercase_counter += 1\n  #     end\n  #   end\n  #   strength = uppercase_counter\
    \ - lowercase_counter\n  # end\n  strength = []\n  uppercase_counter = 0\n  lowercase_counter\
    \ = 0\n  extensions.each do |extension|\n    extension.each_char do |letter|\n\
    \      if letter == letter.upcase\n        uppercase_counter += 1\n      elsif\
    \ letter == letter.downcase\n        lowercase_counter += 1\n      end\n    end\n\
    \    strength << (uppercase_counter - lowercase_counter)\n    uppercase_counter\
    \ = 0\n    lowercase_counter = 0\n  end\n  max_strength = strength.max\n  extensions[strength.index(max_strength)]\n\
    end", "    extension_name = [0, 0]\n    extensions.each_with_index do |extension,\
    \ i|\n        strength = extension.count('A-Z') - extension.count('a-z')\n   \
    \     if strength > extension_name[0]\n            extension_name = [strength,\
    \ i]\n        end\n    end\n    return \"#{class_name}.#{extensions[extension_name[1]]}\"\
    \nend\nputs Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\
    puts Strongest_Extension('my_class', ['AA', 'Be', 'Cc']) == 'my_class.AA'\nputs\
    \ Strongest_Extension('my_class', ['AA', 'Be', 'cc']) == 'my_class.AA'\nputs Strongest_Extension('my_class',\
    \ ['aA', 'Be', 'cc']) == 'my_class.Be'\nputs Strongest_Extension('my_class', ['Aa',\
    \ 'bE', 'cc']) == 'my_class.Aa'\nputs Strongest_Extension('my_class', ['AA', 'bE',\
    \ 'cc']) == 'my_class.AA'\nputs Strongest_Extension('my_class', ['AA', 'bE', 'CC'])\
    \ == 'my_class.AA'\nputs Strongest_Extension('my_class', ['AA', 'Be', 'CC']) ==\
    \ 'my_class.AA'", "  ext_strength = extensions.map{|ext| ext.count(\"A-Z\") -\
    \ ext.count(\"a-z\")}\n  strongest_ext = ext_strength.index(ext_strength.max)\n\
    \  \"my_class.#{extensions[strongest_ext]}\"\nend", "\textensions.map!{|e| [extension_strength(e),\
    \ e]}\n\textensions.sort_by!{|e| -e[0]}\n\treturn \"#{class_name}.#{extensions[0][1]}\"\
    \nend", "  upper_count = -Float::INFINITY\n  strongest_extension = ''\n  extensions.each\
    \ do |extension|\n    char_count = extension.count('A-Z') - extension.count('a-z')\n\
    \    if char_count > upper_count\n      upper_count = char_count\n      strongest_extension\
    \ = extension\n    end\n  end\n  class_name + '.' + strongest_extension\nend",
  "    # find the strongest extension\n    exten = extensions.map do |extension|\n\
    \        extension.count(/[A-Z]/) - extension.count(/[a-z]/)\n    end.max\n  \
    \  # find the index of the strongest extension\n    exten_index = extensions.index(extensions.find\
    \ { |extension| extension.count(/[A-Z]/) - extension.count(/[a-z]/) == exten })\n\
    \    # return a string in this format: ClassName.StrongestExtensionName\n    return\
    \ \"#{class_name}.#{extensions[exten_index]}\"\nend", "  \n  #defining method\
    \ to count the number of uppercase and lowercase letters, respectively\n  def\
    \ upper_count(string)\n    string.count(\"A-Z\")\n  end\n  \n  def lower_count(string)\n\
    \    string.count(\"a-z\")\n  end\n  \n  strength = []\n  extensions.each { |extension|\
    \ strength << upper_count(extension) - lower_count(extension) }\n  max_strength\
    \ = strength.max\n  best_extension = extensions[strength.index(max_strength)]\n\
    \  return class_name + \".\" + best_extension\nend", "  strength = extensions.map\
    \ { |e| e.split('').reduce(0) { |acc, c| acc + (c.upcase == c ? 1 : -1) } }\n\
    \  idx = strength.each_with_index.max[1]\n  \"#{class_name}.#{extensions[idx]}\"\
    \nend", "    strengths = extensions.map { |ext|\n        [ext, ext.count('A-Z')\
    \ - ext.count('a-z')]\n    }.sort_by { |ext, strength| -strength }\n    # Find\
    \ the strength of the strongest extension\n    strength = strengths[0][1]\n  \
    \  # Find all extensions with the highest strength\n    strong_exts = strengths.select\
    \ { |ext, strength| strength == strengths[0][1] }\n    return class_name + '.'\
    \ + strong_exts[0][0]\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
