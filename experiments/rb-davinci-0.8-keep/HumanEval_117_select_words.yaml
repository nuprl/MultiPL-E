name: HumanEval_117_select_words
language: rb
prompt: "# Given a string s and a natural number n, you have been tasked to implement\
  \ \n# a function that returns a list of all words from string s that contain exactly\
  \ \n# n consonants, in order these words appear in the string s.\n# If the string\
  \ s is empty then the function should return an empty list.\n# Note: you may assume\
  \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
  Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
  \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2)\
  \ ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
  Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n\
  \    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"\
  Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
  Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
  \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n\
  \    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
  \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
  a b c d e f\", 1))\n  end\nend\n"
completions: ["    s.split.select { |x| x.downcase.count(\"bcdfghjklmnpqrstvwxyz\"\
    ) == n }\nend", "  s.scan(/\\w+/).select { |w| w.downcase.scan(/[bcdfghjklmnpqrstvwxyz]/).size\
    \ == n }\nend", "  arr = s.split(\" \")\n  arr.select{|x| x.count(\"aeiou\") ==\
    \ x.length - n}\nend", "    res = []\n    words = s.split(\" \")\n    words.each\
    \ { |word|\n        c = 0\n        word.each_char { |x|\n            c += 1 if\
    \ !'aeiouAEIOU'.include?(x)\n        }\n        res << word if c == n\n    }\n\
    \    res\nend", "  s.split.select { |word| word.downcase.count(\"aeiou\") == n\
    \ }\nend", "  s.scan(/\\b\\w*[^aeiou]{#{n}}\\w*\\b/i)\nend", "  s.split(\" \"\
    ).select { |x| x.downcase.count(\"aeiou\") == n }\nend", "  words = s.split\n\
    \  words.select { |word| word.count(\"aeiou\") == n }\nend", "    words = s.split(\"\
    \ \")\n    result = []\n    words.each do |word|\n        count = 0\n        word.each_char\
    \ do |char|\n            count += 1 if char =~ /[qwrtypsdfghjklzxcvbnm]/i\n  \
    \      end\n        result << word if count == n\n    end\n    result\nend", " \
    \ # TODO: Implement the method\nend", "    s.split.select { |word| word.chars.select\
    \ { |letter| letter.match(/[aeiou]/i) }.length == n }\nend", "  s.split.select\
    \ { |w| w.count(\"aeiou\") == n }\nend", "  vl = %w[a e i o u y]\n  words = s.split\n\
    \  new_arr = []\n  words.each do |word|\n    counter = 0\n    word.each_char do\
    \ |char|\n      if vl.include?(char)\n        counter += 1\n      end\n    end\n\
    \    if counter == n\n      new_arr << word\n    end\n  end\n  new_arr\nend",
  "  s.split.select { |w| w.count('aeiou') == n }\nend", "  s.split.select { |word|\
    \ word.scan(/[^aeiouAEIOU]/).size == n }\nend", "  s.split.select { |word| word.downcase.gsub(/[aeiou]/,\
    \ '').length == n }\nend", "  return [] if s.empty?\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend", "  s.scan(/\\b[^aeiouAEIOU\
    \ ]{#{n}}\\b/).sort\nend", "  s.split(\" \").select { |word| (word.scan(/[^aeiou]/).size)\
    \ == n }\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  result = []\n\
    \  s.split.each do |word|\n    count = 0\n    word.chars.each do |ch|\n      count\
    \ += 1 unless vowels.include?(ch)\n    end\n    result << word if count == n\n\
    \  end\n  result\nend", "  s.split(\" \").select{|word| word.downcase.count(\"\
    aeiou\") == n}\nend\nputs select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\nputs select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\nputs select_words(\"simple white space\", 2) ==> []\nputs select_words(\"\
    Hello world\", 4) ==> [\"world\"]\nputs select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]", "    s.split(' ').select { |w| w.chars.count { |l| !%w(a e i o u).include?(l)\
    \ } == n }\nend", "  s.split.select { |word| word.scan(/[bcdfghjklmnpqrstvwxyz]/i).size\
    \ == n }\nend", "  words = s.split(' ')\n  words.select do |word|\n    word.scan(/[b-df-hj-np-tv-z]/i).size\
    \ == n\n  end\nend", "  # n_consonants = 'bcdfghjklmnpqrstvwxz'.split('')\n  #\
    \ n_consonants = n_consonants.join('')\n  # select_words = s.split(' ').select\
    \ { |word| word.count(n_consonants) == n }\n  # select_words = s.split(' ').select\
    \ { |word| word.count(n_consonants) == n }\n  # if s.empty?\n  #   return []\n\
    \  # else\n  #   return select_words\n  # end\n  n_consonants = 'bcdfghjklmnpqrstvwxz'.split('')\n\
    \  n_consonants = n_consonants.join('')\n  return s.split(' ').select { |word|\
    \ word.count(n_consonants) == n }\nend", "    consonants = 'qwrtypsdfghjklzxcvbnm'\n\
    \    s.split.select{|x| x.downcase.count(consonants) == n }\nend", "    s.split.select\
    \ { |x| x.chars.select { |y| y =~ /[b-df-hj-np-tv-z]/ }.size == n }\nend", " \
    \ s.split.select { |word| word.count('aeiou') == n }\nend\np select_words(\"Mary\
    \ had a little lamb\", 4)# ==> [\"little\"]\np select_words(\"Mary had a little\
    \ lamb\", 3)# ==> [\"Mary\", \"lamb\"]\np select_words(\"simple white space\"\
    , 2)# ==> []\np select_words(\"Hello world\", 4)# ==> [\"world\"]\np select_words(\"\
    Uncle sam\", 3)# ==> [\"Uncle\"]", "  words = s.split(' ')\n  selected_words =\
    \ []\n  words.each do |word|\n    if word.scan(/[^aeiou]/).size == n\n      selected_words\
    \ << word\n    end\n  end\n  selected_words\nend", "  s.split.find_all { |i| count_consonants(i)\
    \ == n }\nend", "  s.split.select { |w| w.scan(/[^aeiou\\s]/).size == n }\nend",
  "  # puts s.split.inspect\n  # puts s.split.select { |x| x.count(\"aeiou\", \"AEIOU\"\
    ) == n }.inspect\n  s.split.select { |x| x.count(\"aeiou\", \"AEIOU\") == n }\n\
    end", "  s.split.select { |word| word.count('bcdfghjklmnpqrstvwxyz') == n }\n\
    end", "  # your code here\nend", "  s.split.select { |word| word.count('aeiouAEIOU')\
    \ == n }\nend\np select_words(\"Mary had a little lamb\", 4)\np select_words(\"\
    Mary had a little lamb\", 3)\np select_words(\"simple white space\", 2)\np select_words(\"\
    Hello world\", 4)\np select_words(\"Uncle sam\", 3)", "  vowels = 'aeiou'\n  s.split.select\
    \ { |w| w.count(\"^#{vowels}\") == n }\nend", "    words = s.split(\" \")\n  \
    \  words.select { |word| word.count(\"aeiou\") == n }\nend", "  s.split.select\
    \ { |w| w.scan(/[^aeiou]/).size == n }\nend", "\ts.gsub(/[AEIOUaeiou]/, \"\").split.select\
    \ { |word| word.length == n }\nend", "  s.split.select { |word| word.scan(/[^aeiouAEIOU]/).count\
    \ == n }\nend", "  s.split(\" \").select{|x| x.count(\"^aeiou \") == n}\nend",
  "  s.split(' ').select { |w| w.chars.count { |c| c =~ /[^aeiou]/ } == n }\nend",
  "  # Write your code here\n  s.split(\" \").select { |word| word.delete(\"aeiou\"\
    ).length == n }\nend", "  string = s.split(\" \")\n  string.select { |str| str.count(\"\
    aieou\") == n}\nend", "  return [] if s.empty?\n  vowels = 'aeiouAEIOU'\n  s.split(\"\
    \ \").select{|word| word.split(\"\").select{|c| !vowels.include?(c)}.size == n}\n\
    end", "    arr = s.split(' ')\n    arr.select { |word| word.count('aeiou') ==\
    \ n }\nend", "  s.split.select { |x| x.downcase.scan(/[^aeiou]/).count == n }\n\
    end", "    vowels = ['a', 'e', 'i', 'o', 'u']\n    words = s.split(' ')\n    result\
    \ = []\n    words.each do |word|\n        count = 0\n        word.split('').each\
    \ do |char|\n            if !vowels.include?(char)\n                count += 1\n\
    \            end\n        end\n        if count == n\n            result << word\n\
    \        end\n    end\n    result\nend", "  str_arr = s.split\n  sel_arr = []\n\
    \  cons = %w(b c d f g h j k l m n p q r s t v w x y z)\n  str_arr.each do |word|\n\
    \    counter = 0\n    word.chars.each do |c|\n      counter += 1 if cons.include?(c.downcase)\n\
    \    end\n    sel_arr << word if counter == n\n  end\n  sel_arr\nend", "    a\
    \ = []\n    t = 0\n    i = 0\n    while i <= s.length - 1\n      if s[i] == \"\
    \ \"\n        a << i\n      end\n      i += 1\n    end\n    s = s.split(\" \"\
    )\n    i = 0\n    while i <= s.length - 1\n      j = 0\n      k = 0\n      while\
    \ j <= s[i].length - 1\n        if s[i][j] != \"a\" && s[i][j] != \"e\" && s[i][j]\
    \ != \"i\" && s[i][j] != \"o\" && s[i][j] != \"u\"\n          k += 1\n       \
    \ end\n        j += 1\n      end\n      if k == n\n        t += 1\n      end\n\
    \      i += 1\n    end\n    if t == 0\n      return []\n    end\n    i = 0\n \
    \   a.each do |x|\n      s[i] = s[i..x].join\n      i += 1\n    end\n    s = s.compact\n\
    \    a = []\n    i = 0\n    while i <= s.length - 1\n      j = 0\n      k = 0\n\
    \      while j <= s[i].length - 1\n        if s[i][j] != \"a\" && s[i][j] != \"\
    e\" && s[i][j] != \"i\" && s[i][j] != \"o\" && s[i][j] != \"u\"\n          k +=\
    \ 1\n        end\n        j += 1\n      end\n      if k == n\n        a << s[i]\n\
    \      end\n      i += 1\n    end\n    return a\nend\nputs select_words(\"Mary\
    \ had a little lamb\", 4)", "    s.scan(/\\w+/).select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend", "  s.split.select { |w| w.scan(/[a-z&&[^aeiou]]/i).size\
    \ == n }\nend", "  s.split.select { |w| w.count(\"aeiou\") == n }\nend", "   \
    \ vwl = 'aeiou'\n    s.split.select { |word| word.downcase.count(vwl) == n }\n\
    end", "  s.split.select { |word| vowel_count(word) == n }\nend", "  words = s.split(\"\
    \ \")\n  words.select { |word| consonants(word) == n }\nend", "    s.split(' ').select\
    \ { |word| word.delete('aeiou').length == n }\nend\nputs select_words(\"Mary had\
    \ a little lamb\", 4) ==> [\"little\"]\nputs select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\nputs select_words(\"simple white space\"\
    , 2) ==> []\nputs select_words(\"Hello world\", 4) ==> [\"world\"]\nputs select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]", "  words = s.split\n  words.select { |w| w.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend", "    s.gsub(/[^a-z ]/i, '').split(\" \"\
    ).select { |x| x.count(\"bcdfghjklmnpqrstvwxyz\") == n}\nend", "  s.split.select\
    \ { |w| w.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend", "    words = s.split(\"\
    \ \")\n    words.select{|word| get_consonants(word) == n}\nend", "  vowels = %w(a\
    \ e i o u)\n  result = []\n  s.split.each do |word|\n    count = 0\n    word.chars.each\
    \ do |c|\n      count += 1 unless vowels.include?(c.downcase)\n    end\n    result\
    \ << word if count == n\n  end\n  result\nend", "  words = s.split\n  output =\
    \ []\n  words.each do |word|\n    output << word if vowels_count(word) == n\n\
    \  end\n  output\nend", "  list_of_words = s.split(\" \")\n  list_of_words.select{|word|\
    \ word.count(\"aeiou\") == n}\nend", "  words = s.split\n  consonants = %w[b c\
    \ d f g h j k l m n p q r s t v w x y z]\n  consonants_count = {}\n  words.each\
    \ { |word| consonants_count[word] = word.count(consonants.join) }\n  consonants_count.select\
    \ { |_, val| val == n }.keys\nend", "  return [] if s.empty?\n  words = s.split('\
    \ ')\n  results = []\n  words.each do |word|\n    count = 0\n    word.chars.each\
    \ do |char|\n      count += 1 if char =~ /[^aeiou]/i\n    end\n    results <<\
    \ word if count == n\n  end\n  results\nend", "    #...\n    words = s.split(\"\
    \ \")\n    selected_words = []\n    words.each do |word|\n        if word.count(\"\
    aeiou\") == n\n            selected_words << word\n        end\n    end\n    return\
    \ selected_words\nend", "  s.split(\" \").select { |word| word.count(\"aeiouAEIOU\"\
    ) == word.length - n }\nend", "  s.gsub(/[aeiou]/i,'').scan(/\\w+/).select{|e|\
    \ e.length == n}\nend", "    s.split.select { |word| word.scan(/[^aeiou]/).count\
    \ == n }\nend", "  s.split.select { |w| (w.chars - ['a', 'e', 'i', 'o', 'u']).size\
    \ == n }\nend", "    s.split(\" \").select { |word| word.scan(/[^aeiou ]/).size\
    \ == n }\nend", "  a=s.split(\" \")\n  a.select{|x| x.count(\"bcdfghjklmnpqrstvwxyz\"\
    )==n}\nend", "  words = s.split(\" \")\n  arr = []\n  words.each do |word|\n \
    \   if count_consonants(word) == n\n      arr << word\n    end\n  end\n  arr\n\
    end", "  s.split(\" \").select{|w| w.downcase.chars.count{|c| \"bcdfghjklmnpqrstvwxyz\"\
    .include?(c)} == n}\nend", "  s.split.select { |x| x.scan(/[bcdfghjklmnpqrstvwxyz]/i).count\
    \ == n }\nend", end, "  s.split(' ').select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\"\
    ) == n }\nend", "  s.split.select { |word| word.scan(/[^aeiou]/).count == n }\n\
    end", "  # TODO: implement\nend", "  if s.empty?\n    return []\n  end\n  cons\
    \ = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'z']\n  words = s.split(\" \")\n  final = []\n  words.each\
    \ do |word|\n    count = 0\n    word.each_char do |ch|\n      count += 1 if cons.include?(ch.downcase)\n\
    \    end\n    final << word if count == n\n  end\n  final\nend", "\t#filter the\
    \ string to only return the words with the number of consonants equal to n\n\t\
    s.split.select{|word| word.count('bcdfghjklmnpqrstvwxyz') == n}\nend", "\tarray\
    \ = s.split(' ')\n\tresult = []\n\tarray.each do |item|\n\t\tcount = 0\n\t\titem.each_char\
    \ do |ch|\n\t\t\tif not \"aeiouAEIOU\".include?(ch)\n\t\t\t\tcount += 1\n\t\t\t\
    end\n\t\tend\n\t\tif count == n\n\t\t\tresult << item\n\t\tend\n\tend\n\treturn\
    \ result\nend", "  v, w = [], []\n  s.split.each { |x| v << x if /[aeiou]/i.match(x)\
    \ == nil }\n  v.each { |x| w << x if x.length == n }\n  w\nend", "    s.split.select\
    \ { |word| word.scan(/[^aeiou]/).count == n }\nend\nputs \"Problem 6\\n\"\nputs\
    \ select_words(\"Mary had a little lamb\", 4)\nputs select_words(\"Mary had a\
    \ little lamb\", 3)\nputs select_words(\"simple white space\", 2)\nputs select_words(\"\
    Hello world\", 4)\nputs select_words(\"Uncle sam\", 3)\nputs \"\\n\"", "  s.split(\"\
    \ \").select { |word| word.gsub(/[aeiou]/i, \"\").length == n }\nend", end, " \
    \ s.split.select { |w| n == count_consonants(w) }\nend", "  #your code here\n\
    end", "  vowels = %w(a e i o u)\n  s.split.select { |word| word.count(vowels)\
    \ == word.length - n }\nend", "  # regexp = /[^aeiouAEIOU]+/\n  regexp = /[^aeiouAEIOU]/\n\
    \  s.split.select{|word| word.scan(regexp).count == n}\nend", "  #your code here\n\
    end", "  words = s.split(' ')\n  selected_words = []\n  words.each do |word|\n\
    \    if word.count('bcdfghjklmnpqrstvwxyz') == n\n      selected_words << word\n\
    \    end\n  end\n  selected_words\nend", "  s.gsub(/[^a-z\\s]/i, '').split(' ').map\
    \ { |x| x if x.scan(/[b-df-hj-np-tv-z]/i).size == n }.compact\nend", "  # your\
    \ code here\nend", "    arr = s.split(' ')\n    arr.select { |word| word.count('aeiou')\
    \ == n }\nend", "\t# your code here\nend", "  s.split.select { |w| w.scan(/[a-z&&[^aeiou]]/i).size\
    \ == n }\nend", "  s.split(' ').select { |word| word.count('bcdfghjklmnpqrstvwxyz')\
    \ == n }\nend", "  consonants = \"bcdfghjklmnpqrstvwxyz\"\n  s.split.select {\
    \ |w| w.downcase.count(consonants) == n }\nend", "  s.split(\" \").select { |word|\
    \ (word.count(\"bcdfghjklmnpqrstvwxyz\") == n) }\nend", "    # Your code here\n\
    end", "    result = []\n    s.split.select do |word|\n        if consonants(word)\
    \ == n\n            result << word\n        end\n    end\n    result\nend", " \
    \   s.split(\" \").select { |w| w.count(\"aeiou\") == n }\nend", "  s.split.select\
    \ { |word| word.scan(/[^aeiouAEIOU]/).size == n }\nend", "  s.split(' ').select{|w|\
    \ w.count('^aeiouAEIOU') == n}\nend", "\tif s.empty?\n\t\treturn []\n\telse\n\t\
    \ts.split(\" \").select { |word| word.gsub(/[^bcdfghjklmnpqrstvwxz]/i, '').length\
    \ == n }\n\tend\nend", "  words = s.split\n  words.keep_if { |word| word.gsub(/[aeiou]/i,\
    \ '').length == n }\nend", "\tconsonants = 'bcdfghjklmnpqrstvwxyz'\n\tarray =\
    \ s.split(' ')\n\tfinal = []\n\tif s == ''\n\t\tfinal\n\telse\n\t\tarray.each\
    \ do |word|\n\t\t\tcount = 0\n\t\t\tword.chars.each do |letter|\n\t\t\t\tcount\
    \ += 1 if consonants.include?(letter.downcase)\n\t\t\tend\n\t\t\tfinal << word\
    \ if count == n\n\t\tend\n\t\tfinal\n\tend\nend", "  s.split.select { |w| w.count('bcdfghjklmnpqrstvwxyz')\
    \ == n }\nend", "  result = []\n  s.split.each { |word| result << word if word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\n  result\nend", "  words = s.split(' ')\n  words.select{|w|\
    \ w.count('^aeiou') == n}\nend", "  # your code goes here\nend", "  s.split.select\
    \ { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend", "  # your code\
    \ goes here\nend", "    words = s.split(' ')\n    r = ''\n    final = []\n   \
    \ vowels = ['a', 'e', 'i', 'o', 'u']\n    words.each do |w|\n        w.each_char\
    \ do |c|\n            if vowels.include?(c)\n                r += ' '\n      \
    \      else\n                r += c\n            end\n        end\n        if\
    \ r.count(' ') == n\n            final << w\n        end\n        r = ''\n   \
    \ end\n    final\nend", "  s.split.select { |word| word.gsub(/[aeiou]/i, '').length\
    \ == n }\nend", "  return [] if s.empty?\n  s.scan(/\\w+/).reject { |w| w.chars.count\
    \ { |c| c =~ /[bcdfghjklmnpqrstvwxyz]/ } != n }\nend", "  s.split(' ').select{|x|\
    \ x.scan(/[bcdfghjklmnpqrstvwxyz]/).size == n}\nend", "  s.split.select { |w|\
    \ w.count(\"^aeiou\") == n }\nend", "    vowels = %w[a e i o u]\n    s.split(\"\
    \ \").select{|i| i.split(\"\").count{|i| !vowels.include?(i)} == n}\nend", " \
    \ s.split.select { |w| w.count(\"^aeiou\") == n }\nend", "  vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]\n  words = s.split(\" \")\n  result = []\n  words.each\
    \ do |word|\n    if word.split(\"\").reject { |x| vowels.include?(x) }.length\
    \ == n\n      result << word\n    end\n  end\n  result\nend", "  # your code here\n\
    end", "  s.split.select { |w| w.count(\"^aeiou\") == n }\nend", "    s.split.select\
    \ { |x| x.count(\"aeiouAEIOU\") == n }\nend", "  # write your code here\nend",
  "  s.split(' ').select { |word| word.scan(/[aeiou]/).count == n }\nend", "  arr\
    \ = s.split(\" \")\n  result = []\n  arr.each do |word|\n    if word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n\n      result << word\n    end\n  end\n  result\n\
    end", "    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    s.split(\" \").select {\
    \ |word| word.downcase.chars.count { |char| consonants.include?(char) } == n }\n\
    end", "  words = s.split\n  words.delete_if { |w| w.length <= n }\n  words.select\
    \ { |w| w.scan(/[qwrtypsdfghjklzxcvbnm]/).length == n }\nend", "  s.split(' ').select{|word|\
    \ word.scan(/[^aeiou\\s]/).size == n}\nend", "  s.gsub(/[aeiou]/i, '').gsub(/[^\\\
    s]/, '1').split.select { |x| x.length == n }\nend", "  s.split.select { |word|\
    \ word.downcase.count(\"aeiou\") == n }\nend", "  #your code goes here\nend",
  "    s.gsub!(/[^a-zA-Z\\s]/, '')\n    s.split.select{|w| w.downcase.delete('aeiou').length\
    \ == n}\nend", "  words = s.split\n  words.select { |word| count_consonants(word)\
    \ == n }\nend", "  s.split(\" \").select{|i| i.count(\"^aeiou\") == n}\nend",
  "  new_arr = []\n  s.split.each do |word|\n    if word.count(\"bcdfghjklmnpqrstvwxyz\"\
    ) == n\n      new_arr << word\n    end\n  end\n  new_arr\nend", "  return [] if\
    \ s.empty?\n  s.split.select { |word| consonants(word) == n }\nend", "  words\
    \ = s.split\n  words.select { |w| n_consonants(w) == n }\nend", "    # p s.split(\"\
    \ \").map{|x| x if x.count(\"a-zA-Z\") == n}.delete_if{|x| x == nil}.map{|x| x\
    \ if x.count(\"aeiouAEIOU\") != x.length}\n    p s.split(\" \").select{|x| x.length\
    \ == n && x.count(\"aeiouAEIOU\") != x.length}\nend", "  count_vowels = lambda\
    \ { |word|\n    vowels = %w(a e i o u)\n    word.split('').select { |char| !vowels.include?(char)\
    \ }.count\n  }\n  s.split(' ').select { |word| count_vowels.call(word) == n }\n\
    end", "  # Your code here...\nend", "  s.scan(/\\b[a-zA-Z]+\\b/).select { |w|\
    \ w.count('aeiou') == n }\nend", "    vowels = %w(a e i o u)\n    s.split.select\
    \ { |w| w.downcase.chars.select { |l| !vowels.include?(l) }.size == n }\nend",
  "    words = s.split(\" \")\n    words.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\"\
    ) == n }\nend", "  s.scan(/\\w+/).select { |w| w.scan(/[^aeiou\\s]/).count ==\
    \ n }\nend", "  # your code here\nend", "  s.split.select { |word| word.gsub(/[aeiou]/i,\
    \ '').length == n }\nend", "  s.split.select { |word| word.count('^aeiou') ==\
    \ n }\nend", "  s.split(' ').select{|w| w.count('bcdfghjklmnpqrstvwxyz') == n}\n\
    end", "  s.gsub(/[aeiouAEIOU]/, '').downcase.split(' ').select { |x| x.length\
    \ == n }\nend", "  consonants = %w(b c d f g h j k l m n p q r s t v w x y z)\n\
    \  words = s.split(\" \")\n  selected_words = []\n  words.each do |word|\n   \
    \ count = 0\n    word.each_char do |letter|\n      count += 1 if consonants.include?(letter.downcase)\n\
    \    end\n    selected_words << word if count == n\n  end\n  selected_words\n\
    end\np select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\np select_words(\"\
    Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\np select_words(\"simple\
    \ white space\", 2) ==> []\np select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\np select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]", "  s.split.select { |word|\
    \ word.downcase.scan(/[^aeiou\\s]/).count == n }\nend", "  s.split.select { |word|\
    \ consonants_count(word) == n }\nend", "  array = s.split(\" \")\n  new = []\n\
    \  array.each do |word|\n    count = 0\n    word.each_char do |char|\n      count\
    \ += 1 if \"qwrtypsdfghjklzxcvbnm\".include?(char)\n    end\n    new << word if\
    \ count == n\n  end\n  new\nend", "  return [] if s.empty?\n  s.split.select {\
    \ |word| word.count(\"b-df-hj-np-tv-z\", \"B-DF-HJ-NP-TV-Z\") == n }\nend", " \
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  words = s.split(\" \")\n  output\
    \ = []\n  words.each do |word|\n    consonants = 0\n    word.each_char do |ch|\n\
    \      consonants += 1 unless vowels.include?(ch.downcase)\n    end\n    output\
    \ << word if consonants == n\n  end\n  output\nend", "  list = s.split(' ')\n\
    \  consonants = \"bcdfghjklmnpqrstvwxyz\"\n  result = []\n  list.each do |word|\n\
    \    count = 0\n    word.each_char do |letter|\n      count += 1 if consonants.include?(letter.downcase)\n\
    \    end\n    result << word if count == n\n  end\n  result\nend", "  return []\
    \ if s.empty?\n  consonants = \"bcdfghjklmnpqrstvwxyz\"\n  s.split.select { |word|\
    \ word.downcase.count(consonants) == n }\nend\np select_words(\"Mary had a little\
    \ lamb\", 4) #==> [\"little\"]\np select_words(\"Mary had a little lamb\", 3)\
    \ #==> [\"Mary\", \"lamb\"]\np select_words(\"simple white space\", 2) #==> []\n\
    p select_words(\"Hello world\", 4) #==> [\"world\"]\np select_words(\"Uncle sam\"\
    , 3) #==> [\"Uncle\"]\np select_words(\"\", 0) #==> []", "  vowels = 'aeiou'\n\
    \  s.split.select { |e| e.chars.count { |letter| !vowels.include?(letter) } ==\
    \ n }\nend", "  s.split(\" \").select { |word| (word.chars.to_a - [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]).length == n }\nend", "  s.split.select { |word| word.count('bcdfghjklmnpqrstvwxyz')\
    \ == n }\nend", "  s.split(' ').select { |word| word.count('bcdfghjklmnpqrstvwxyz')\
    \ == n }\nend", "  num = 0\n  words = []\n  if s.length > 0\n    words = s.split(\"\
    \ \")\n    words.select do |word|\n      word.each_char do |c|\n        if c.upcase\
    \ =~ /[AEIOU]/\n          num += 1\n        end\n      end\n      word if num\
    \ == n\n    end\n  end\nend", "  # Write your code here\n  ret = []\n  s.split.each\
    \ do |word|\n    count = 0\n    word.each_char do |c|\n      count += 1 if 'bcdfghjklmnpqrstvwxyz'.include?(c.downcase)\n\
    \    end\n    ret << word if count == n\n  end\n  ret\nend", "  s.gsub(/[aeiouAEIOU\\\
    s]/, '').chars.each_with_object([]) do |c, words|\n    words << s.split(' ').select\
    \ { |w| w.downcase.count(c.downcase) == n }.join(',')\n  end.reject(&:empty?).map\
    \ { |w| w.split(',') }.flatten.uniq\nend", "  s.split(\" \").select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend", "  a = s.split(' ')\n  l = []\n  a.each\
    \ do |e|\n    if e.scan(/[bcdfghjklmnpqrstvwxyz]/).count == n\n      l << e\n\
    \    end\n  end\n  l\nend", "  s.split.select { |i| i.count('^aeiou') == n }\n\
    end", "  l = s.split.select{|word| word.count(\"^aeiouAEIOU\") == n}\n  l = l.map(&:downcase)\n\
    end", "  s.split(' ').select { |word| word.scan(/[aeiou]/).count == n }\nend",
  "  words = s.split\n  words.select { |word| consonants_count(word) == n }\nend",
  "  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend", " \
    \ s.split.select { |word| word.count(\"aeiou\") == n }\nend", "  s.split(\" \"\
    ).select{|x| x.scan(/[aeiou]/).size == n}\nend", "  array = s.split(\" \")\n \
    \ new_array = []\n  array.each do |x|\n    if x.scan(/[^aeiou ]/).length == n\n\
    \      new_array << x\n    end\n  end\n  new_array\nend", "  consonants = %w(b\
    \ c d f g h j k l m n p q r s t v w x y z)\n  s.split.select { |word| word.split('').map\
    \ { |char| consonants.include?(char) }.count(true) == n }\nend", "    return []\
    \ if s.size == 0\n    s.split(' ').select{|x| x.scan(/[bcdfghjklmnpqrstvwxyz]/).size\
    \ == n}\nend", "  s.split(' ').select { |w| w.downcase.count('aeiou') == w.length\
    \ - n }\nend", "  # your code here\nend", "  p (s.split.select { |word| word.downcase.scan(/[bcdfghjklmnpqrstvwxyz]/).length\
    \ == n})\nend", "  return [] if s.empty?\n  res = []\n  s.split.each { |word|\
    \ res << word if word.count('bcdfghjklmnpqrstvwxyz') == n }\n  res\nend", "  s.split('\
    \ ').select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend", "  s.split.select\
    \ { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend", "  words = s.split\n\
    \  words.select do |word|\n    word.count(\"aeiou\") == n\n  end\nend", "  # Your\
    \ code here.\nend", "  arr = s.split(\" \")\n  arr.select { |str| str.count(\"\
    aeiou\") == str.length - n }\nend\np select_words(\"Mary had a little lamb\",\
    \ 4) #==> [\"little\"]\np select_words(\"Mary had a little lamb\", 3) #==> [\"\
    Mary\", \"lamb\"]\np select_words(\"simple white space\", 2) #==> []\np select_words(\"\
    Hello world\", 4) #==> [\"world\"]\np select_words(\"Uncle sam\", 3) #==> [\"\
    Uncle\"]", "  s.split(\" \").select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\"\
    ) == n }\nend", "    s.split.select { |word| word.scan(/[bcdfghjklmnpqrstvwxyz]/i).size\
    \ == n }\nend", "  vowels = ['a', 'e', 'i', 'o', 'u']\n  s.split.select { |word|\
    \ word.downcase.scan(/[^#{vowels.join}]/).size == n }\nend", "  s.split(' ').select\
    \ { |x| count_consonants(x) == n }\nend", "    arr = s.split(\" \")\n    new_arr\
    \ = []\n    arr.each do |a|\n        p a\n        if a.count(\"^aeiou\") == n\n\
    \            new_arr << a\n        end\n    end\n    return new_arr\nend\np select_words(\"\
    Mary had a little lamb\", 4)\np select_words(\"Mary had a little lamb\", 3)\n\
    p select_words(\"simple white space\", 2)\np select_words(\"Hello world\", 4)\n\
    p select_words(\"Uncle sam\", 3)", "  words = s.split\n  words.select { |word|\
    \ word.scan(/[a-z]/i).size == n }\nend", "  # your code here\nend", "  s.split(\"\
    \ \").select { |w| w.gsub(/[aeiou]/i, \"\").length == n }\nend", "    result =\
    \ s.split(\" \").select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\n\
    \    result.map(&:to_s)\nend", "  words = s.split(' ')\n  words.select { |word|\
    \ word.count('aeiou') == n }\nend", "    # code goes here\n  end\n  \n  # Given\
    \ an array of natural numbers and a string s, you have been tasked \n  # to implement\
    \ a function that returns a string with each number from \n  # the array duplicated\
    \ the number of times specified by that number, \n  # followed by the string s.\n\
    \  # If the array is empty then the function should return an empty string.\n\
    \  # Examples:\n  # repeat_and_append([2, 3, 1], '#') ==> \"## #### #\"\n  # repeat_and_append([2,\
    \ 3, 1], 'a') ==> \"aa aaa a\"\n  # repeat_and_append([2, 3, 1], 'abc') ==> \"\
    aabbaa ccc a\"\n  # repeat_and_append([3, 5, 7], '!') ==> \"!!! !!!!!! !!!!!!!!!!\"\
    \n  # repeat_and_append([], '*') ==> \"\"\n  def repeat_and_append(arr, s)\n \
    \   # code goes here\n  end\n  \n  # Given a string s, you have been tasked to\
    \ implement a function that \n  # returns the first character that appears multiple\
    \ times within the \n  # string, in order it appears.\n  # If there are no characters\
    \ that appear more than once, return a space ' '.\n  # Examples:\n  # first_repeat(\"\
    abcde\") ==> \" \"\n  # first_repeat(\"abca\") ==> \"a\"\n  # first_repeat(\"\
    aabb\") ==> \"a\"\n  # first_repeat(\"abcba\") ==> \"b\"\n  # first_repeat(\"\
    aabbaa\") ==> \"a\"\n  # first_repeat(\"aaabb\") ==> \"a\"\n  # first_repeat(\"\
    aabbb\") ==> \"b\"\n  # first_repeat(\"abcabc\") ==> \"a\"\n  # first_repeat(\"\
    abcabcabc\") ==> \"a\"\n  # first_repeat(\"abcabcc\") ==> \"c\"\n  # first_repeat(\"\
    aaaaaa\") ==> \"a\"\n  # first_repeat(\"abbabb\") ==> \"b\"\n  # first_repeat(\"\
    abbbabb\") ==> \"b\"\n  # first"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
