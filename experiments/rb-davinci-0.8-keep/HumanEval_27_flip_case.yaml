name: HumanEval_27_flip_case
language: rb
prompt: "# For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n# >>> flip_case('Hello')\n# 'hELLO'\ndef flip_case(string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_flip_case\n\
  \    candidate = method(:flip_case)\n    assert_equal(\"\", candidate.call(\"\"\
  ))\n    assert_equal(\"hELLO!\", candidate.call(\"Hello!\"))\n    assert_equal(\"\
  tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\", candidate.call(\"These violent delights\
  \ have violent ends\"))\n  end\nend\n"
completions: ["  #WRITE YOUR CODE HERE\nend", "  chars = string.chars.map do |char|\n\
    \    if char =~ /[a-z]/\n      char.upcase\n    elsif char =~ /[A-Z]/\n      char.downcase\n\
    \    else\n      char\n    end\n  end\n  chars.join\nend", end, "  string.swapcase\n\
    end", "  string.swapcase\nend", "  return string.swapcase\nend", "  string.gsub(/[a-z]/,\
    \ &:upcase).gsub(/[A-Z]/, &:downcase)\nend", "  new_string = string.chars.map\
    \ do |char|\n    if char == char.upcase\n      char.downcase\n    else\n     \
    \ char.upcase\n    end\n  end\n  new_string.join\nend", "  string.chars.map {\
    \ |char| char == char.upcase ? char.downcase : char.upcase }.join\nend", "  flipped_string\
    \ = \"\"\n  string.each_char do |char|\n    flipped_string += (char.upcase ==\
    \ char) ? char.downcase : char.upcase\n  end\n  flipped_string\nend", "  new_str\
    \ = string.chars.map do |char|\n    if char.upcase == char\n      char.downcase\n\
    \    else\n      char.upcase\n    end\n  end\n  new_str.join('')\nend", "  return\
    \ \"Not a string!\" unless string.is_a? String\n  string.swapcase\nend", "  string.chars.map{|char|\
    \ char == char.upcase ? char.downcase : char.upcase}.join('')\nend", "  string.each_char.inject(\"\
    \") { |flipped, char| flipped << (char.downcase == char ? char.upcase : char.downcase)\
    \ }\nend", "  new_string = \"\"\n  string.each_char do |character|\n    if character.upcase\
    \ == character\n      new_string += character.downcase\n    else\n      new_string\
    \ += character.upcase\n    end\n  end\n  new_string\nend", "  string.swapcase\n\
    end", "    string.swapcase\nend", "  flipped_array = []\n  string.split(\"\").each\
    \ do |letter|\n    if letter == letter.upcase\n      flipped_array << letter.downcase\n\
    \    else\n      flipped_array << letter.upcase\n    end\n  end\n  flipped_array.join(\"\
    \")\nend", "  string.chars.map do |char|\n    if char =~ /[a-z]/\n      char.upcase\n\
    \    elsif char =~ /[A-Z]/\n      char.downcase\n    else\n      char\n    end\n\
    \  end.join\nend", "  result = ''\n  string.each_char do |char|\n    if char.match(/[a-z]/)\n\
    \      result += char.upcase\n    elsif char.match(/[A-Z]/)\n      result += char.downcase\n\
    \    else\n      result += char\n    end\n  end\n  result\nend\nputs \"flip_case('Hello')\
    \ == 'hELLO': #{flip_case('Hello') == 'hELLO'}\"\nputs \"flip_case('ByeBye') ==\
    \ 'bYEyBYE': #{flip_case('ByeBye') == 'bYEyBYE'}\"\nputs \"flip_case('Live from\
    \ NY, Welcome to the Voice') == 'lIVE FROM ny, wELCOME TO THE vOICE': #{flip_case('Live\
    \ from NY, Welcome to the Voice') == 'lIVE FROM ny, wELCOME TO THE vOICE'}\"\n\
    puts \"flip_case('1,2,3 GO!') == '1,2,3 gO!': #{flip_case('1,2,3 GO!') == '1,2,3\
    \ gO!'}\"\nputs \"flip_case('THX1138') == 'thx1138': #{flip_case('THX1138') ==\
    \ 'thx1138'}\"\nputs \"flip_case('[{]') == '[{]': #{flip_case('[{]') == '[{]'}\"\
    \nputs \"flip_case('1111') == '1111': #{flip_case('1111') == '1111'}\"\nputs \"\
    flip_case('L3t\\s g0 play Halo') == 'l3T\\S G0 PLAY hALO': #{flip_case('L3t\\\
    s g0 play Halo') == 'l3T\\S G0 PLAY hALO'}\"\nputs \"flip_case('\\n') == '\\n':\
    \ #{flip_case('\\n') == '\\n'}\"\nputs \"flip_case('') == '': #{flip_case('')\
    \ == ''}\"\nput", "  string.swapcase\nend", "  string.swapcase\nend", "  string.swapcase\n\
    end", "  characters = string.chars.map do |char|\n    if char =~ /[a-z]/\n   \
    \   char.upcase\n    elsif char =~ /[A-Z]/\n      char.downcase\n    else\n  \
    \    char\n    end\n  end\n  characters.join\nend", "  flipped_string = \"\"\n\
    \  string.split(\"\").each do |letter|\n    if letter == letter.upcase\n     \
    \ flipped_string += letter.downcase\n    else\n      flipped_string += letter.upcase\n\
    \    end\n  end\n  flipped_string\nend", "  flipped_chars = []\n  string.each_char\
    \ do |char|\n    if char.upcase == char\n      flipped_chars << char.downcase\n\
    \    else\n      flipped_chars << char.upcase\n    end\n  end\n  flipped_chars.join\n\
    end", "  chars = string.chars.map do |char|\n    if char =~ /[a-z]/\n      char.upcase\n\
    \    elsif char =~ /[A-Z]/\n      char.downcase\n    else\n      char\n    end\n\
    \  end\n  chars.join\nend", "  new_string = \"\"\n  string.each_char do |char|\n\
    \    if char == char.upcase\n      new_string << char.downcase\n    else\n   \
    \   new_string << char.upcase\n    end\n  end\n  new_string\nend", "  string.chars.map\
    \ { |char| char == char.upcase ? char.downcase : char.upcase }.join\nend", " \
    \ # array = string.split('')\n  # array.map! do |letter|\n  #   if letter == letter.upcase\n\
    \  #     letter.downcase\n  #   else\n  #     letter.upcase\n  #   end\n  # end\n\
    \  # array.join('')\n  string.swapcase\nend", "  string.swapcase\nend", "  string.chars.map\
    \ do |char|\n    if char.match(/[a-z]/)\n      char.upcase\n    elsif char.match(/[A-Z]/)\n\
    \      char.downcase\n    else\n      char\n    end\n  end.join\nend", "\tstring.swapcase\n\
    end", "  flipped_characters = string.chars.map do |char|\n    if char =~ /[a-z]/\n\
    \      char.upcase\n    elsif char =~ /[A-Z]/\n      char.downcase\n    else\n\
    \      char\n    end\n  end\n  flipped_characters.join\nend", "  string.swapcase\n\
    end", "  string.swapcase\nend", "  new_str = \"\"\n  (0...string.length).each\
    \ do |index|\n    if string[index] == string[index].upcase\n      new_str += string[index].downcase\n\
    \    else\n      new_str += string[index].upcase\n    end\n  end\n  new_str\n\
    end", "  a = string.chars.map do |c|\n    if /[a-z]/.match(c)\n      c.upcase\n\
    \    elsif /[A-Z]/.match(c)\n      c.downcase\n    else\n      c\n    end\n  end\n\
    \  a.join\nend", "  string.swapcase\nend", "  flipper = []\n  counter = 0\n  while\
    \ counter < string.length\n    if string[counter] == string[counter].upcase\n\
    \      flipper << string[counter].downcase\n    else\n      flipper << string[counter].upcase\n\
    \    end\n    counter += 1\n  end\n  flipper.join\nend", "    array = string.split(\"\
    \")\n    # array.map! do |x|\n    #     if (x == x.upcase)\n    #         x.downcase\n\
    \    #     else\n    #         x.upcase\n    #     end\n    # end\n    # array.join(\"\
    \")\n    array.map! { |x| x == x.upcase ? x.downcase : x.upcase }.join(\"\")\n\
    end", "  flipped_case = \"\"\n  string.each_char do |c|\n    if c == c.upcase\n\
    \      flipped_case += c.downcase\n    else\n      flipped_case += c.upcase\n\
    \    end\n  end\n  flipped_case\nend", "  flipped_string = \"\"\n  chars = string.split(\"\
    \")\n  chars.each do |char|\n    if char == char.upcase\n      flipped_string\
    \ << char.downcase\n    else\n      flipped_string << char.upcase\n    end\n \
    \ end\n  flipped_string\nend", "  new_string = \"\"\n  string.each_char do |char|\n\
    \    if char == char.upcase\n      new_string << char.downcase\n    else\n   \
    \   new_string << char.upcase\n    end\n  end\n  new_string\nend", "  string_case\
    \ = string.split('')\n  string_case.map! do |letter|\n    if letter == letter.upcase\n\
    \      letter.downcase\n    else\n      letter.upcase\n    end\n  end\n  string_case.join('')\n\
    end", "  index = 0\n  while index < string.length\n    char = string[index]\n\
    \    if char == char.upcase\n      string[index] = char.downcase\n    else\n \
    \     string[index] = char.upcase\n    end\n    index += 1\n  end\n  string\n\
    end", "  converted_string = string.split('').map do |char|\n    if char.eql?(char.downcase)\n\
    \      char.upcase\n    else\n      char.downcase\n    end\n  end\n  converted_string.join\n\
    end\nputs flip_case('Hello')\nputs flip_case('Hello There')\nputs flip_case('Hello\
    \ There, how is it going?')\nputs flip_case('Hello THere')\nputs flip_case('12345')\n\
    puts flip_case('1,2,3,4,5')\nputs flip_case('!@#$%^&*()')\nputs flip_case('QwErTy911poqqqq')",
  "  new_string = \"\"\n  string.each_char do |char|\n    if char == char.upcase\n\
    \      new_string << char.downcase\n    else\n      new_string << char.upcase\n\
    \    end\n  end\n  new_string\nend", "  string.chars.map do |char|\n    char ==\
    \ char.upcase ? char.downcase : char.upcase\n  end.join\nend", "  string.split(\"\
    \").map { |char| char == char.upcase ? char.downcase : char.upcase }.join(\"\"\
    )\nend", "\t#string.split(\"\").map {|char| char.swapcase}.join\n\tstring.swapcase\n\
    end", "  string.chars.map do |char|\n    if char.upcase == char\n      char.downcase\n\
    \    else\n      char.upcase\n    end\n  end.join\nend", "  string.chars.map {\
    \ |letter| letter.downcase == letter ? letter.upcase : letter.downcase }.join\n\
    end", "  # string.chars.map do |char|\n  #   if char.downcase == char\n  #   \
    \  char.upcase\n  #   else\n  #     char.downcase\n  #   end\n  # end.join", "\t\
    string.swapcase\nend", "  # <YOUR CODE HERE>\nend", "\t# your code here\nend",
  "  string.swapcase\nend", "  string.swapcase\nend\nputs flip_case('Hello')", " \
    \ string.chars.map do |l|\n    if l == l.upcase\n      l.downcase\n    else\n\
    \      l.upcase\n    end\n  end.join\nend", "  # your code here\nend", "  string.chars.map\
    \ do |char|\n    if char.upcase == char\n      char.downcase\n    else\n     \
    \ char.upcase\n    end\n  end.join\nend\nputs flip_case('Hello')", "  string.swapcase\n\
    end", "  string.swapcase\nend", "  chars = string.chars.map do |char|\n    if\
    \ char =~ /[a-z]/\n      char.upcase\n    elsif char =~ /[A-Z]/\n      char.downcase\n\
    \    else\n      char\n    end\n  end\n  chars.join\nend", "\tflipped_string =\
    \ \"\"\n\tstring.each_char do |letter|\n\t\tif letter.match(/[a-z]/)\n\t\t\tflipped_string\
    \ << letter.upcase\n\t\telsif letter.match(/[A-Z]/)\n\t\t\tflipped_string << letter.downcase\n\
    \t\telse\n\t\t\tflipped_string << letter\n\t\tend\n\tend\n\tflipped_string\nend",
  "  flipped_string = \"\"\n  string.each_char do |character|\n    if character.downcase\
    \ == character\n      flipped_string += character.upcase\n    else\n      flipped_string\
    \ += character.downcase\n    end\n  end\n  flipped_string\nend", "  string.swapcase\n\
    end", "  arr = string.split('')\n  arr.map do |char|\n    if char == char.upcase\n\
    \      char.downcase\n    else\n      char.upcase\n    end\n  end.join('')\nend",
  "  flipped_arr = []\n  string.split(\"\").each do |char|\n    if char.match?(/[[:lower:]]/)\n\
    \      flipped_arr << char.upcase\n    else\n      flipped_arr << char.downcase\n\
    \    end\n  end\n  flipped_arr.join(\"\")\nend", "  string.swapcase\nend", " \
    \ myString = string.split(\"\")\n  i = 0\n  while i < myString.length\n    if\
    \ myString[i] == myString[i].upcase\n      myString[i] = myString[i].downcase\n\
    \    else\n      myString[i] = myString[i].upcase\n    end\n    i += 1\n  end\n\
    \  return myString.join(\"\")\nend", "  string.swapcase\nend", "  string.swapcase\n\
    end", "  string.swapcase\nend", "  chars = string.chars.map do |char|\n    if\
    \ char =~ /[a-z]/\n      char.upcase\n    elsif char =~ /[A-Z]/\n      char.downcase\n\
    \    else\n      char\n    end\n  end\n  chars.join\nend", "    flipped = \"\"\
    \n    string.each_char do |char|\n        if char == char.upcase\n           \
    \ flipped += char.downcase\n        else\n            flipped += char.upcase\n\
    \        end\n    end\n    flipped\nend", "\tstring.swapcase\nend", "  new_string\
    \ = ''\n  string.each_char do |ch|\n    if ch == ch.upcase\n      new_string +=\
    \ ch.downcase\n    else\n      new_string += ch.upcase\n    end\n  end\n  new_string\n\
    end", "  array = string.chars\n  array.map! do |char|\n    if char == char.upcase\n\
    \      char.downcase\n    else\n      char.upcase\n    end\n  end\n  array.join\n\
    end", "  string.swapcase\nend", "  string.each_char.map do |char|\n    char.upcase\
    \ == char ? char.downcase : char.upcase\n  end.join\nend", "  to_change = (\"\
    a\"..\"z\").to_a + (\"A\"..\"Z\").to_a\n  string.chars.map { |char| to_change.include?(char)\
    \ ? char.swapcase : char }.join\nend", "  final = ''\n  string.each_char do |char|\n\
    \    if char == char.upcase\n      final += char.downcase\n    else\n      final\
    \ += char.upcase\n    end\n  end\n  final\nend", "  string.chars.map do |char|\n\
    \    if char.upcase == char\n      char.downcase\n    else\n      char.upcase\n\
    \    end\n  end.join\nend", "  str = ''\n  string.each_char do |c|\n    if c ==\
    \ c.upcase\n      str += c.downcase\n    else\n      str += c.upcase\n    end\n\
    \  end\n  str\nend", "  flipped_chars = string.chars.map do |char|\n    if char\
    \ =~ /[a-z]/\n      char.upcase\n    elsif char =~ /[A-Z]/\n      char.downcase\n\
    \    else\n      char\n    end\n  end\n  flipped_chars.join\nend", "  string.split('').map{|c|\
    \ c == c.upcase ? c.downcase : c.upcase}.join\nend", "  array = string.split('')\n\
    \  string.length.times do |i|\n    array[i] = array[i].upcase if array[i] == array[i].downcase\n\
    \    array[i] = array[i].downcase if array[i] == array[i].upcase\n  end\n  array.join('')\n\
    end", "  flipped_string = ''\n  string.each_char do |char|\n    if char == char.upcase\n\
    \      flipped_string += char.downcase\n    else\n      flipped_string += char.upcase\n\
    \    end\n  end\n  flipped_string\nend", "  string.each_char.map do |char|\n \
    \   if char == char.upcase\n      char.downcase\n    else\n      char.upcase\n\
    \    end\n  end.join\nend", "  letters = string.split(\"\")\n  letters.map! do\
    \ |letter|\n    if /[a-z]/.match(letter)\n      letter.upcase\n    elsif /[A-Z]/.match(letter)\n\
    \      letter.downcase\n    else\n      letter\n    end\n  end\n  letters.join(\"\
    \")\nend", "  string.chars.map do |char|\n    char.upcase == char ? char.downcase\
    \ : char.upcase\n  end.join\nend", "  string.swapcase\nend", "    output = \"\"\
    \n    string.each_char do |char|\n        if char.match(/[a-z]/)\n           \
    \ output += char.upcase\n        elsif char.match(/[A-Z]/)\n            output\
    \ += char.downcase\n        else\n            output += char\n        end\n  \
    \  end\n    output\nend", "  arr = string.split('')\n  new_arr = []\n  arr.each\
    \ do |char|\n    if char == char.upcase\n      new_arr << char.downcase\n    else\n\
    \      new_arr << char.upcase\n    end\n  end\n  new_arr.join('')\nend", "  flipped_string\
    \ = ''\n  string.chars.each do |letter|\n    flipped_string << (letter.upcase\
    \ == letter ? letter.downcase : letter.upcase)\n  end\n  flipped_string\nend",
  "  string.chars.map { |char| char.upcase == char ? char.downcase : char.upcase }.join\n\
    end\nputs flip_case('Hello')", "\nend", "  flipped_case = ''\n  string.each_char\
    \ do |letter|\n    if letter.upcase == letter\n      flipped_case += letter.downcase\n\
    \    else\n      flipped_case += letter.upcase\n    end\n  end\n  flipped_case\n\
    end", "  string_array = string.split('')\n  string_array.map! do |x|\n    if x\
    \ == x.upcase\n      x.downcase\n    else\n      x.upcase\n    end\n  end\n  string_array.join\n\
    end", " \n    arr = string.split(\"\")\n    \n    arr.each_with_index do |char,\
    \ idx|\n        if char == char.upcase\n            arr[idx] = char.downcase\n\
    \        else\n            arr[idx] = char.upcase\n        end\n    end\n    arr.join(\"\
    \")\n    \nend", "  output = []\n  string.split(\"\").each do |letter|\n    if\
    \ letter == letter.upcase\n      output << letter.downcase\n    else\n      output\
    \ << letter.upcase\n    end\n  end\n  output.join(\"\")\nend", "  string_array\
    \ = string.split('')\n  string_array.map! do |char|\n    if char.match(/[a-z]/)\n\
    \      char.upcase\n    elsif char.match(/[A-Z]/)\n      char.downcase\n    else\n\
    \      char\n    end\n  end\n  string_array.join('')\nend", end, "\tstring.swapcase\n\
    end", "  string.swapcase\nend", "  string.swapcase\nend", "\tstring.chars.map\
    \ { |ch| ch.match(/[a-z]/) ? ch.upcase : ch.downcase }.join\nend", "  string.swapcase\n\
    end", "  string.swapcase\nend", "  string.chars.map do |x|\n    if x.match(/[a-z]/)\n\
    \      x.upcase\n    elsif x.match(/[A-Z]/)\n      x.downcase\n    else\n    \
    \  x\n    end\n  end.join\nend", "  string.each_char.map { |char| char == char.upcase\
    \ ? char.downcase : char.upcase }.join\nend", "  @new_string = \"\"\n  @string\
    \ = string.to_s.split(\"\")\n  @string.each do |letter|\n    if letter =~ /[a-z]/\n\
    \      @new_string << letter.upcase\n    elsif letter =~ /[A-Z]/\n      @new_string\
    \ << letter.downcase\n    else\n      @new_string << letter\n    end\n  end\n\
    \  @new_string\nend", "  str2 = ''\n  string.split('').each do |letter|\n    if\
    \ letter == letter.upcase\n      str2 += letter.downcase\n    else\n      str2\
    \ += letter.upcase\n    end\n  end\n  return str2\nend", "  length = string.length\n\
    \  string.each_char.with_index do |char, index|\n    if char == char.upcase\n\
    \      string[index] = char.downcase\n    else\n      string[index] = char.upcase\n\
    \    end\n  end\n  string\nend", "    flipped = ''\n    string.each_char do |c|\n\
    \        if c.match(/[a-z]/)\n            flipped += c.upcase\n        elsif c.match(/[A-Z]/)\n\
    \            flipped += c.downcase\n        else\n            flipped += c\n \
    \       end\n    end\n    flipped\nend", "  string.swapcase\nend", "    new_string\
    \ = ''\n    string.each_char do |char|\n        if char == char.upcase\n     \
    \       new_string += char.downcase\n        else\n            new_string += char.upcase\n\
    \        end\n    end\n    new_string\nend", "    flipped = \"\"\n    string.each_char\
    \ do |char|\n        if char == char.upcase\n            flipped += char.downcase\n\
    \        else\n            flipped += char.upcase\n        end\n    end\n    flipped\n\
    end", "  flip = []\n  string.each_char do |char|\n    if char.upcase == char\n\
    \      flip << char.downcase\n    else\n      flip << char.upcase\n    end\n \
    \ end\n  flip.join('')\nend", "  chars = string.chars.map do |char|\n    if char\
    \ =~ /[a-z]/\n      char.upcase\n    elsif char =~ /[A-Z]/\n      char.downcase\n\
    \    else\n      char\n    end\n  end\n  chars.join\nend", "  string.swapcase\n\
    end", "  result = \"\"\n  i = 0\n  while i < string.length\n    char = string[i]\n\
    \    if char == char.upcase\n      result += char.downcase\n    else\n      result\
    \ += char.upcase\n    end\n    i += 1\n  end\n  result\nend", "  string.swapcase\n\
    end", "  array_string = string.split('')\n  array_string.map! do |char|\n    if\
    \ char.upcase == char\n      char.downcase\n    else\n      char.upcase\n    end\n\
    \  end\n  array_string.join\nend", "  to_return = \"\"\n  string.each_char do\
    \ |char|\n    if char == char.upcase\n      to_return += char.downcase\n    else\n\
    \      to_return += char.upcase\n    end\n  end\n  to_return\nend", "  letters\
    \ = string.split(\"\")\n  letters.map! do |letter|\n    if letter.match(/\\p{Lower}/)\n\
    \      letter.upcase\n    elsif letter.match(/\\p{Upper}/)\n      letter.downcase\n\
    \    else\n      letter\n    end\n  end\n  letters.join(\"\")\nend", "  new_string\
    \ = string.chars.map do |char|\n    if char.match(/[a-z]/)\n      char.upcase\n\
    \    elsif char.match(/[A-Z]/)\n      char.downcase\n    else\n      char\n  \
    \  end\n  end\n  new_string.join\nend", "  new_string = string.split(\"\")\n \
    \ new_string.map! do |char|\n    if char == char.upcase\n      char.downcase\n\
    \    else\n      char.upcase\n    end\n  end\n  new_string.join(\"\")\nend", " \
    \   x = string.split(\"\")\n    new_arr = []\n    x.each do |char|\n        if\
    \ char.upcase == char\n            new_arr << char.downcase\n        else\n  \
    \          new_arr << char.upcase\n        end\n    end\n    return new_arr.join(\"\
    \")\nend", "  string.swapcase\nend", "  string.chars.map do |char|\n    if char.match?(/[a-z]/)\n\
    \      char.upcase\n    elsif char.match?(/[A-Z]/)\n      char.downcase\n    else\n\
    \      char\n    end\n  end.join\nend", "  reversed_chars = string.chars.map do\
    \ |char|\n    if char =~ /[a-z]/\n      char.upcase\n    elsif char =~ /[A-Z]/\n\
    \      char.downcase\n    else\n      char\n    end\n  end\n  reversed_chars.join\n\
    end", "  i = 0\n  while i < string.length\n    char = string[i]\n    if char ==\
    \ char.upcase\n      string[i] = char.downcase\n    else\n      string[i] = char.upcase\n\
    \    end\n    i += 1\n  end\n  string\nend", "  string.swapcase\nend", "  result\
    \ = \"\"\n  string.each_char do |char|\n    if char == char.upcase\n      result\
    \ += char.downcase\n    else\n      result += char.upcase\n    end\n  end\n  result\n\
    end", end, "  string.chars.map { |char| char.match(/[a-z]/) ? char.upcase : char.downcase\
    \ }.join\nend", "  string.swapcase\nend", "  string.chars.map { |c| c == c.upcase\
    \ ? c.downcase : c.upcase }.join\nend\nputs flip_case('Hello')", "  flipped_case\
    \ = \"\"\n  string.each_char do |character|\n    if character == character.upcase\n\
    \      flipped_case += character.downcase\n    else\n      flipped_case += character.upcase\n\
    \    end\n  end\n  flipped_case\nend", "  new_str = \"\"\n  string.split(\"\"\
    ).each do |char|\n    if char == char.upcase\n      new_str += char.downcase\n\
    \    else\n      new_str += char.upcase\n    end\n  end\n  new_str\nend", "  flip_hash\
    \ = {}\n  string.each_char do |char|\n    if char == char.upcase\n      flip_hash[char]\
    \ = char.downcase\n    else\n      flip_hash[char] = char.upcase\n    end\n  end\n\
    \  string.each_char.map { |char| flip_hash[char] }.join\nend", "  flip = ''\n\
    \  string.each_char do |c|\n    if c == c.upcase\n      flip += c.downcase\n \
    \   else\n      flip += c.upcase\n    end\n  end\n  flip\nend\nputs \"flip_case('Hello')\
    \ == 'hELLO': #{flip_case('Hello') == 'hELLO'}\"\nputs \"flip_case('Bye') == 'bYE':\
    \ #{flip_case('Bye') == 'bYE'}\"\nputs \"flip_case('Adios') == 'aDIOS': #{flip_case('Adios')\
    \ == 'aDIOS'}\"\nputs \"flip_case('Goodbye') == 'gOODBYE': #{flip_case('Goodbye')\
    \ == 'gOODBYE'}\"\nputs \"flip_case('Ciao') == 'cIAO': #{flip_case('Ciao') ==\
    \ 'cIAO'}\"\nputs \"flip_case('arrivederci') == 'ARRIEDERCI': #{flip_case('arrivederci')\
    \ == 'ARRIEDERCI'}\"\nputs", "  string.swapcase\nend", "  new_string = string.split(\"\
    \")\n  new_string.map! do |char|\n    if char == char.upcase\n      char.downcase\n\
    \    else\n      char.upcase\n    end\n  end\n  new_string.join(\"\")\nend", " \
    \   string.swapcase\nend", "  string.swapcase\nend", "  string.split(\"\").map\
    \ do |char|\n    if char == char.upcase\n      char.downcase\n    else\n     \
    \ char.upcase\n    end\n  end.join(\"\")\nend", "  string.swapcase\nend", "  new_string\
    \ = \"\"\n  string.each_char do |char|\n    if char == char.upcase\n      new_string\
    \ << char.downcase\n    else\n      new_string << char.upcase\n    end\n  end\n\
    \  new_string\nend", "  # your code here!\nend", "  string.swapcase\nend", " \
    \ string.swapcase\nend", "  string.swapcase\nend", "  flipped_string = \"\"\n\
    \  string.each_char do |char|\n    if char.match(/[[:lower:]]/)\n      flipped_string\
    \ << char.upcase\n    elsif char.match(/[[:upper:]]/)\n      flipped_string <<\
    \ char.downcase\n    else\n      flipped_string << char\n    end\n  end\n  flipped_string\n\
    end", "  return string.swapcase\nend", "  new_str = ''\n  for i in 0..string.length\
    \ - 1\n    if string[i] == string[i].upcase\n      new_str = new_str + string[i].downcase\n\
    \    else\n      new_str = new_str + string[i].upcase\n    end\n  end\n  return\
    \ new_str\nend", "  to_return = \"\"\n  string.each_char do |c|\n    if c == c.upcase\n\
    \      to_return += c.downcase\n    else\n      to_return += c.upcase\n    end\n\
    \  end\n  to_return\nend", "  string.gsub(/[a-z]/,&:swapcase)\nend", "  string.swapcase\n\
    end", "  string.swapcase\nend", "    # ...your code here\n    lower = string.downcase\n\
    \    upper = string.upcase\n    swapped = \"\"\n    string.each_char do |char|\n\
    \        if lower.include?(char)\n            swapped += upper[lower.index(char)]\n\
    \        else\n            swapped += lower[upper.index(char)]\n        end\n\
    \    end\n    swapped\nend", "  string_ary = string.split('')\n  string_ary.map!\
    \ do |char|\n    if char.match(/[a-z]/)\n      char.upcase\n    elsif char.match(/[A-Z]/)\n\
    \      char.downcase\n    else\n      char\n    end\n  end\n  return string_ary.join\n\
    end", "  # length = string.length\n  # new_string = ''\n  # length.times do |num|\n\
    \  #   if string[num] == string[num].upcase\n  #     new_string += string[num].downcase\n\
    \  #   else\n  #     new_string += string[num].upcase\n  #   end\n  # end\n  #\
    \ new_string\n  string.swapcase\nend", "  string.split(\"\").map { |char| char\
    \ == char.upcase ? char.downcase : char.upcase }.join(\"\")\nend", "\tstring =\
    \ string.split(\"\")\n\tstring.map! do |char|\n\t\tif char == char.upcase\n\t\t\
    \tchar.downcase\n\t\telse\n\t\t\tchar.upcase\n\t\tend\n\tend\n\tstring.join(\"\
    \")\nend", "  new_string = \"\"\n  string.each_char do |char|\n    if char.ord\
    \ > 96 && char.ord < 123\n      new_string += char.upcase\n    elsif char.ord\
    \ > 64 && char.ord < 91\n      new_string += char.downcase\n    else\n      new_string\
    \ += char\n    end\n  end\n  new_string\nend", "  new_string = \"\"\n  string.each_char\
    \ do |char|\n    if char.upcase == char\n      new_string += char.downcase\n \
    \   else\n      new_string += char.upcase\n    end\n  end\n  new_string\nend",
  "    string.chars.map { |char| char == char.upcase ? char.downcase : char.upcase\
    \ }.join\nend", "  string.swapcase\nend", "  string.swapcase\nend", "  chars =\
    \ string.chars.map do |char|\n    if char =~ /[a-z]/\n      char.upcase\n    elsif\
    \ char =~ /[A-Z]/\n      char.downcase\n    else\n      char\n    end\n  end\n\
    \  chars.join('')\nend", "  #string.swapcase\n  string.chars.map do |ch|\n   \
    \ if ch == ch.upcase\n      ch.downcase\n    else\n      ch.upcase\n    end\n\
    \  end.join\nend", "  # TODO: implement me\n  new_array = []\n  string.split(\"\
    \").each do |letter|\n    if letter.upcase == letter\n      new_array << letter.downcase\n\
    \    else\n      new_array << letter.upcase\n    end\n  end\n  return new_array.join(\"\
    \")\nend", "  new_string = ''\n  string.each_char do |c|\n    if c == c.upcase\n\
    \      new_string += c.downcase\n    else\n      new_string += c.upcase\n    end\n\
    \  end\n  new_string\nend", "  string.chars.map { |char|\n    char.match(/[a-z]/)\
    \ ? char.upcase : char.downcase\n  }.join\nend", "  flipped_str = \"\"\n  string.each_char\
    \ do |letter|\n    if letter.ord >= 65 && letter.ord <= 90\n      flipped_str\
    \ += letter.downcase\n    elsif letter.ord >= 97 && letter.ord <= 122\n      flipped_str\
    \ += letter.upcase\n    else\n      flipped_str += letter\n    end\n  end\n  flipped_str\n\
    end", "  result = []\n  string.each_char do |char|\n    if char == char.upcase\n\
    \      result << char.downcase\n    else\n      result << char.upcase\n    end\n\
    \  end\n  result.join\nend", "  string.chars.map do |char|\n    if char.match(/[a-z]/)\n\
    \      char.upcase\n    elsif char.match(/[A-Z]/)\n      char.downcase\n    else\n\
    \      char\n    end\n  end.join\nend", "  # Write your code here.\n  flipped_string\
    \ = \"\"\n  string.each_char do |char|\n    if char == char.upcase\n      flipped_string\
    \ << char.downcase\n    else\n      flipped_string << char.upcase\n    end\n \
    \ end\n  flipped_string\nend", "  string.swapcase\nend", "  string.each_char.with_object('')\
    \ do |char, result|\n    if char.match(/[a-z]/)\n      result << char.upcase\n\
    \    elsif char.match(/[A-Z]/)\n      result << char.downcase\n    else\n    \
    \  result << char\n    end\n  end\nend\nputs flip_case('Hello')", "    new_string\
    \ = \"\"\n    for char in string.split(\"\")\n        if char.upcase == char\n\
    \            new_string += char.downcase\n        else\n            new_string\
    \ += char.upcase\n        end\n    end\n    return new_string\nend", "  string_array\
    \ = string.split('')\n  upper_array = ('A'..'Z').to_a\n  lower_array = ('a'..'z').to_a\n\
    \  final_array = []\n  string_array.each do |letter|\n    if upper_array.include?(letter)\n\
    \      final_array << letter.downcase\n    elsif lower_array.include?(letter)\n\
    \      final_array << letter.upcase\n    else\n      final_array << letter\n \
    \   end\n  end\n  final_array.join('')\nend", "  new_string = \"\"\n  string.each_char\
    \ do |char|\n    if char.upcase == char\n      new_string += char.downcase\n \
    \   else\n      new_string += char.upcase\n    end\n  end\n  new_string\nend",
  "  words = string.split\n  words.each do |word|\n    word.gsub!(/[a-z]/, \"a\" =>\
    \ \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\"\
    \ => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\", \"\
    k\" => \"K\", \"l\" => \"L\", \"m\" => \"M\", \"n\" => \"N\", \"o\" => \"O\",\
    \ \"p\" => \"P\", \"q\" => \"Q\", \"r\" => \"R\", \"s\" => \"S\", \"t\" => \"\
    T\", \"u\" => \"U\", \"v\" => \"V\", \"w\" => \"W\", \"x\" => \"X\", \"y\" =>\
    \ \"Y\", \"z\" => \"Z\")\n    word.gsub!(/[A-Z]/, \"A\" => \"a\", \"B\" => \"\
    b\", \"C\" => \"c\", \"D\" => \"d\", \"E\" => \"e\", \"F\" => \"f\", \"G\" =>\
    \ \"g\", \"H\" => \"h\", \"I\" => \"i\", \"J\" => \"j\", \"K\" => \"k\", \"L\"\
    \ => \"l\", \"M\" => \"m\", \"N\" => \"n\", \"O\" => \"o\", \"P\" => \"p\", \"\
    Q\" => \"q\", \"R\" => \"r\", \"S\" => \"s\", \"T\" => \"t\", \"U\" => \"u\",\
    \ \"V\" => \"v\", \"W\" => \"w\", \"X\" => \"x\", \"Y\" => \"y\", \"Z\" => \"\
    z\")\n  end\n  words.join(\" \")\nend", "\tstring.chars.map { |char| char.match(/[a-z]/)\
    \ ? char.upcase : char.downcase }.join('')\nend", "\tstring.chars.map do |char|\n\
    \t\tif char.ord.between?(65, 90)\n\t\t\tchar.downcase\n\t\telsif char.ord.between?(97,\
    \ 122)\n\t\t\tchar.upcase\n\t\telse\n\t\t\tchar\n\t\tend\n\tend.join\nend", " \
    \ flipped_case = ''\n  string.chars.each do |letter|\n    if letter.match(/[a-z]/)\n\
    \      flipped_case += letter.upcase\n    elsif letter.match(/[A-Z]/)\n      flipped_case\
    \ += letter.downcase\n    else\n      flipped_case += letter\n    end\n  end\n\
    \  flipped_case\nend", "  flipped_case = \"\"\n  string.each_char do |char|\n\
    \    if (char =~ /[a-z]/) == 0\n      flipped_case += char.upcase\n    elsif (char\
    \ =~ /[A-Z]/) == 0\n      flipped_case += char.downcase\n    else\n      flipped_case\
    \ += char\n    end\n  end\n  flipped_case\nend", "  result = ''\n  string.each_char\
    \ do |char|\n    if char.match?(/[a-z]/)\n      result += char.upcase\n    elsif\
    \ char.match?(/[A-Z]/)\n      result += char.downcase\n    else\n      result\
    \ += char\n    end\n  end\n  result\nend", "  string.chars.map { |char| char.downcase\
    \ == char ? char.upcase : char.downcase }.join\nend", "  new_string = \"\"\n \
    \ string.each_char do |char|\n    if char.match(/[a-z]/)\n      new_string <<\
    \ char.upcase\n    elsif char.match(/[A-Z]/)\n      new_string << char.downcase\n\
    \    else\n      new_string << char\n    end\n  end\n  new_string\nend", "  result\
    \ = \"\"\n  string.each_char do |char|\n    char == char.upcase ? result << char.downcase\
    \ : result << char.upcase\n  end\n  result\nend", "  string.swapcase\nend", " \
    \ new_string = string.chars.map do |char|\n    if char.match(/[a-z]/)\n      char.upcase\n\
    \    elsif char.match(/[A-Z]/)\n      char.downcase\n    else\n      char\n  \
    \  end\n  end\n  new_string.join\nend", "  uppercase_str = string.upcase\n  lowe",
  "  result = \"\"\n  string.each_char do |char|\n    if char == char.upcase\n   \
    \   result += char.downcase\n    else\n      result += char.upcase\n    end\n\
    \  end\n  result\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
