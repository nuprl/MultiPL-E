name: HumanEval_99_closest_integer
language: rb
prompt: "# Create a function that takes a value (string) representing a number\n#\
  \ and returns the closest integer to it. If the number is equidistant\n# from two\
  \ integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"10\")\n\
  # 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from zero\
  \ means that if the given number is equidistant\n# from two integers, the one you\
  \ should return is the one that is the\n# farthest from zero. For example closest_integer(\"\
  14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\n\
  def closest_integer(value)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_closest_integer\n\
  \    candidate = method(:closest_integer)\n    assert_equal(10, candidate.call(\"\
  10\"))\n    assert_equal(15, candidate.call(\"14.5\"))\n    assert_equal(-16, candidate.call(\"\
  -15.5\"))\n    assert_equal(15, candidate.call(\"15.3\"))\n    assert_equal(0, candidate.call(\"\
  0\"))\n  end\nend\n"
completions: ["  rounded_value = value.to_f.round\n  if rounded_value - value.to_f\
    \ > 0\n    rounded_value - 1\n  else\n    rounded_value\n  end\nend", "  value.to_f.round\n\
    end", "\nend", "\tvalue = (value.to_f).round()\n\tputs value\nend\nclosest_integer(\"\
    10\")\nclosest_integer(\"15.3\")", "  (value.to_f + 0.5).to_i\nend", "  value\
    \ = value.to_f\n  int = value.to_i\n  float = value - int\n  integer = (float\
    \ <= 0.5) ? int : int + 1\nend", "\t#Split the string into 3 parts: 2 numbers\
    \ and one sign\n\tsplit_string = value.split(\"\")\n\t#Create a boolean to check\
    \ if string contains \".\"\n\thas_decimal = split_string.include?(\".\")\n\t#If\
    \ so, separate the integer and decimal parts of the number\n\tif has_decimal\n\
    \t\tinteger_part = split_string[0..(split_string.index(\".\")-1)].join(\"\").to_i\n\
    \t\tdecimal_part = split_string[(split_string.index(\".\")+1)..-1].join(\"\").to_i\n\
    \t#If not, the integer part is just the number\n\telse\n\t\tinteger_part = split_string.join(\"\
    \").to_i\n\tend\n\t#If the decimal part is below 5, we'll keep the integer part\n\
    \tif decimal_part < 5\n\t\tclosest_integer = integer_part\n\t#If the decimal part\
    \ is above 5, we'll round up\n\telsif decimal_part > 5\n\t\tclosest_integer =\
    \ integer_part + 1\n\t#If the decimal part is exactly 5, we'll round up if the\n\
    \t#integer part is odd, and down if the integer part is even\n\telsif decimal_part\
    \ == 5\n\t\tif integer_part.odd?\n\t\t\tclosest_integer = integer_part + 1\n\t\
    \telse\n\t\t\tclosest_integer = integer_part\n\t\tend\n\tend\n\t#Return the closest\
    \ integer\n\treturn closest_integer\nend", "  # Your code here\nend", "  i = value.to_i\n\
    \  return i if value == i.to_s\n  f = value.to_f\n  if f > 0\n    f - f.floor\
    \ > 0.5 ? f.ceil : f.floor\n  else\n    f - f.floor < -0.5 ? f.ceil : f.floor\n\
    \  end\nend", "  x = value.to_f\n  first = x.floor\n  second = x.ceil\n  if x\
    \ - first >= 0.5\n    return second\n  else\n    return first\n  end\nend", " \
    \ case value.to_f\n  when Float\n    value.to_f.round\n  when Fixnum\n    value.to_i\n\
    \  end\nend", "\treturn value.to_i\nend", "  return value.to_i if value.to_f ==\
    \ value.to_i\n  unless value.include?('.')\n    return value.to_i\n  end\n  integer\
    \ = value.to_i\n  float = value.to_f\n  diff = value.to_f - value.to_i\n  diff\
    \ < 0.5 ? integer : integer + 1\nend", "  return value.to_i\nend", "  num = value.to_f\n\
    \  if (num % 1) >= 0.5\n    return num.ceil\n  else\n    return num.floor\n  end\n\
    end", "  value = value.to_f\n  if value.even?\n    return value.to_i\n  else\n\
    \    return value.to_i + 1\n  end\nend\nputs \"Q6\"\nputs closest_integer(\"14.5\"\
    )\nputs closest_integer(\"-14.5\")\nputs closest_integer(\"14.5e3\")\nputs closest_integer(\"\
    -14.5e3\")\nputs closest_integer(\"14.5e-3\")\nputs closest_integer(\"-14.5e-3\"\
    )\nputs closest_integer(\"14.5e+3\")\nputs closest_integer(\"-14.5e+3\")", " \
    \ number = value.to_f\n  if number == number.floor\n    return number.floor\n\
    \  else\n    if number > 0\n      return number.floor + 1\n    else\n      return\
    \ number.floor - 1\n    end\n  end\nend", "  if value.include?(\".\")\n    num_str\
    \ = value.split(\".\")\n    if num_str[1].to_i >= 50\n      num_str[0].to_i +\
    \ 1\n    else\n      num_str[0].to_i\n    end\n  else\n    value.to_i\n  end\n\
    end", "  closest_integer = nil\n  p value\n  p value.to_f\n  p value.to_f.round(0)\n\
    \  p value.to_f.round(0).to_i\n  p closest_integer = value.to_f.round(0).to_i\n\
    \  p closest_integer\nend\nclosest_integer(\"-14.5\")", "  # Your code here\n\
    end", "  # your code here\nend", "  round_up = (value.to_f + 0.5).to_i\n  round_down\
    \ = (value.to_f - 0.5).to_i\n  if value.to_f % 1 == 0.5\n    if value.to_f > 0\n\
    \      round_up\n    else\n      round_down\n    end\n  elsif value.to_f % 1 >\
    \ 0.5\n    round_up\n  else\n    round_down\n  end\nend", "  (value.to_f + 0.5).to_i\n\
    end", "  puts \"The closest integer to #{value} is #{value.to_i}\"\nend", "  value.to_f.round\n\
    end", "  value.to_f.round\nend", "  if value.include? \".\"\n    num = value.to_f\n\
    \    if num < 0\n      num = (num * -1).round\n      return num * -1\n    else\n\
    \      return num.round\n    end\n  else\n    num = value.to_i\n    return num\n\
    \  end\nend", "  n = value.to_f\n  if n < 0\n    return n.ceil\n  else\n    return\
    \ n.floor\n  end\nend", "    closest_number = value.to_i\n    if value.to_f -\
    \ value.to_i >= 0.5\n        closest_number += 1\n    end\n    closest_number\n\
    end", "  # Your code here\nend", "  (value.to_f).round\nend", "  value.to_f.round\n\
    end", "  value.to_f.round\nend", "  return Integer(value) if value.to_i == value.to_f\n\
    \  value.to_f.round\nend", "  value.to_f.round\nend", "    value.to_f.round\n\
    end", "  closest_int = value.to_i\n  rem = value.to_f - closest_int\n  rem.abs\
    \ >= 0.5 ? (closest_int += 1) : closest_int\nend", "  values = value.to_s.split(\"\
    .\")\n  if values.length == 1\n    return values[0].to_i\n  elsif values[1].to_i\
    \ >= 5\n    return values[0].to_i + 1\n  else\n    return values[0].to_i\n  end\n\
    end", "  value.to_f.round\nend", "  value = value.to_f\n  p value % 1\n  if value\
    \ % 1 > 0.5\n    value.round\n  else\n    value.floor\n  end\nend", "  value.to_f.round\n\
    end", "  value.to_f.round\nend", "  return value.to_i if value == value.to_i.to_s\n\
    \  if value[-1] == \"5\"\n    first = value.to_i\n    second = value.to_i + 1\n\
    \    if first >= 0\n      second\n    else\n      first\n    end\n  else\n   \
    \ value.to_i\n  end\nend", "  str_nums = {'0' => 0, '1' => 1, '2' => 2, '3' =>\
    \ 3, '4' => 4, '5' => 5, '6' => 6, '7' => 7, '8' => 8, '9' => 9}\n  num = 0\n\
    \  value.each_char do |char|\n    num = str_nums[char] if str_nums.key?(char)\n\
    \  end\n  if value.chars.include?('.')\n    return (value.to_f + 0.5).to_i\n \
    \ else\n    return num\n  end\nend", "  value = value.to_f\n  if value < 0\n \
    \   value.to_i - 1\n  else\n    value.to_i\n  end\nend", "  if value.include?(\"\
    .\")\n    value = value.to_f\n    value = value.round\n  else\n    value = value.to_i\n\
    \  end\n  return value\nend", "  # Your code here\nend", "\tvalue = value.to_f\n\
    \treturn value.to_i if value.to_i == value\n\tvalue.to_i < value ? value.to_i\
    \ + 1 : value.to_i\nend", "  value = value.to_f\n  num = value.to_i\n  num = num.to_f\n\
    \  if value >= num + 0.5\n    num += 1\n  end\n  num.to_i\nend", "  value.to_f.round\n\
    end", "  return value.to_i\nend", "  value.to_f.round\nend", "  x = value.to_f\n\
    \  if x > 0\n    x.ceil\n  else\n    x.floor\n  end\nend", "  (value.to_f + 0.5).to_i\n\
    end", "  int_value = value.to_i\n  decimal_value = value.to_f - int_value\n  if\
    \ decimal_value > 0.5\n    return int_value + 1\n  elsif decimal_value < -0.5\n\
    \    return int_value - 1\n  else\n    return int_value\n  end\nend", "  value\
    \ = value.to_f.round\n  if value >= 0\n    value.ceil\n  else\n    value.floor\n\
    \  end\nend", "  number = value.to_f\n  if number % 1 >= 0.5\n    number.ceil\n\
    \  else\n    number.floor\n  end\nend", "  value.to_f.round\nend", "  value.to_f.round\n\
    end\nputs \"-------Closest Integer-------\"\nputs closest_integer(\"10\") == 10\n\
    puts closest_integer(\"15.3\") == 15\nputs closest_integer(\"15.5\") == 16\nputs\
    \ closest_integer(\"-15.5\") == -16\nputs closest_integer(\"14.5\") == 15\nputs\
    \ closest_integer(\"-14.5\") == -15\nputs closest_integer(\"14.5\") == 15\nputs\
    \ closest_integer(\"-14.5\") == -15\nputs", "    return value.to_i if value[-1]\
    \ == \"0\"\n    value.split(\"\").each_with_index do |digit, index|\n        next\
    \ if digit == \".\" || digit == \"0\"\n        return value.to_i if digit.to_i\
    \ <= 5\n        digit.to_i > 5 ? return value.to_i + 1 : return value.to_i - 1\n\
    \    end\nend", "\ti = 0\n\twhile true\n\t\tbreak if i * 1.0 == value.to_f\n\t\
    \ti += 1\n\tend\n\ti\nend", "    value = value.to_f\n    if value % 1 >= 0.5\n\
    \        return value.ceil\n    else\n        return value.floor\n    end\nend",
  "  value.to_f.round\nend", "  value.to_f.round\nend", "\nend", "  if value.include?(\"\
    .\")\n    if value.split(\".\")[1].to_i < 50\n      puts value.split(\".\")[0].to_i\n\
    \    else\n      puts value.split(\".\")[0].to_i + 1\n    end\n  else\n    puts\
    \ value.to_i\n  end\nend", "  closer_num = (value.to_f + 0.5).to_i\n  closer_num.to_s\n\
    end", "  n = value.to_f\n  return n.to_i if n == n.to_i\n  return (n - 0.5).to_i\
    \ if n < 0\n  return (n + 0.5).to_i\nend", "  value.to_f.round\nend", "  value.to_f.round\n\
    end", "  integer_value = value.to_i\n  float_value = value.to_f\n  if float_value\
    \ > integer_value\n    float_value\n  else\n    integer_value\n  end\nend", " \
    \ if value.to_i.to_f - value.to_f > 0\n    value.to_i\n  else\n    value.to_i\
    \ + 1\n  end\nend", "  num = value.to_f.round\n  num\nend\np closest_integer(\"\
    10\")\np closest_integer(\"15.3\")", "  value.to_f.round\nend", "  x = (value.to_f\
    \ * 10).round\n  if x.even?\n    x / 10\n  else\n    (x - 1) / 10\n  end\nend",
  "  if value.to_i == value.to_f\n    value.to_i\n  else\n    if value.to_f % 1 ==\
    \ 0.5\n      value.to_i + 1\n    else\n      value.to_i\n    end\n  end\nend",
  "  # value = value.to_f\n  # result = value.round\n  # if result == value\n  # \
    \  result\n  # elsif result - value > 0.5\n  #   result - 1\n  # else\n  #   result\
    \ + 1\n  # end\n  closest_integer_refactored(value)\nend", "  # n.round\n  # n.round(1)\n\
    \  # n.round(2)\n  # n.round(3)\n  # .round is a method that rounds to zero.\n\
    \  closest_value = value.to_f.round\n  if closest_value == value.to_f\n    closest_value\n\
    \  else\n    closest_value > value.to_f ? closest_value : closest_value - 1\n\
    \  end\nend", "  return value.to_i if value.to_i == value.to_f\n  return value.to_i\
    \ + 1 if value.to_f - value.to_i >= 0.5\n  value.to_i - 1\nend", "    # Solve\
    \ the problem here\n    if value.split(\".\")[0].to_i >= value.to_f\n      value.split(\"\
    .\")[0].to_i\n    else\n      value.split(\".\")[0].to_i + 1\n    end\nend", " \
    \ value.to_f.round\nend", "  value.to_f.round\nend", '  value = value.to_f', " \
    \ if value.include?('.')\n    return value.split('.')[0].to_i\n  end\n  value.to_i\n\
    end", "  return value.to_i if value.to_i == value.to_f\n  value.to_f > value.to_i\
    \ ? value.to_i + 1 : value.to_i - 1\nend", "  value.to_f.round\nend", "  value\
    \ = value.to_f\n  (value % 1 >= 0.5) ? value.ceil : value.floor\nend", "    value\
    \ = value.to_f\n    if value % 1 != 0\n        if value % 1 < 0.5\n          \
    \  return value.to_i\n        else\n            return value.to_i + 1\n      \
    \  end\n    else\n        return value.to_i\n    end\nend", "  value = value.to_f.round\n\
    \  value.to_i\nend", "  (value.to_f+0.5).to_i\nend", "  # you can use the round\
    \ method as it takes a 'nearest_integer'\n  # argument.\n  value.to_f.round\n\
    end", "  value = value.to_f\n  if value > 0\n    value = value + 0.5\n  else\n\
    \    value = value - 0.5\n  end\n  return value.to_i\nend\nputs \"TESTING closest_integer...\"\
    \nputs", "  value.to_f.round\nend", "  puts value.to_i\nend", "  value.to_f.round\n\
    end", "  return value.to_i + 1 if value.to_f - value.to_i > 0.5\n  value.to_i\n\
    end", "  return value.to_i if value.to_i == value.to_f\n  value.to_f.round\nend",
  "  x = value.to_f\n  if x - x.to_i >= 0.5\n    x.to_i + 1\n  else\n    x.to_i\n\
    \  end\nend", "  value = value.to_f\n  if value > value.to_i\n    value.ceil\n\
    \  else\n    value.floor\n  end\nend", "  # convert value to float\n  value =\
    \ value.to_f\n  # determine whether value is negative or positive\n  value < 0\
    \ ? \"negative\" : \"positive\"\n  # # round value away from zero\n  # value.round\n\
    end", "  # Convert the given value to an integer\n  # and return it.\n  value.to_i\n\
    end", "  x = value.to_f\n  y = x.to_i\n  if x - y >= 0.5\n    return y + 1\n \
    \ else\n    return y\n  end\nend", "  # Your code here\nend", "\tvalue_str = value.to_s\n\
    \tif value_str.include?(\".\") \n\t\tvalue_arr = value_str.split(\".\")\n\t\t\
    value_decimal = value_arr[1].to_f\n\t\tvalue_integer = value_arr[0].to_i\n\t\t\
    if value_decimal < 5 \n\t\t\treturn value_integer\n\t\telse\n\t\t\tif value_arr[0].include?(\"\
    -\")\n\t\t\t\treturn value_integer - 1\n\t\t\telse\n\t\t\t\treturn value_integer\
    \ + 1\n\t\t\tend\n\t\tend\n\telse\n\t\treturn value_str.to_i\n\tend\nend", " \
    \ closest_string = (value.to_f + 0.5).to_i.to_s\n  closest_string.to_i\nend",
  "  value.to_f.round\nend", "  # Your code here\nend", "  value.to_f.round\nend",
  "  # value.to_i # Remove this line and fill in the code below.\n  if value.to_i\
    \ < value.to_f\n    return value.to_i + 1\n  else\n    return value.to_i\n  end\n\
    end", "  value.to_f.round\nend\nputs \"==========Closest integer==========\"\n\
    puts closest_integer(\"10\")\nputs closest_integer(\"15.3\")", "  value = value.to_f\n\
    \  return value.to_i if value % 1 == 0\n  value > 0 ? value.ceil : value.floor\n\
    end", "  integers = value.to_i\n  decimal = value.to_s.split('.')[1].to_i\n  return\
    \ integers if decimal == 0\n  (decimal > 5000) ? (integers + 1) : integers\nend",
  "  puts \"#{value.to_i} is closest to #{value.to_f.round}\"\nend\nclosest_integer('14.5')\n\
    closest_integer('-14.5')\nclosest_integer('5.5')\nclosest_integer('-5.5')", " \
    \ value = value.to_f\n  if value == value.to_i\n    return value.to_i\n  else\n\
    \    return value.to_i + 1\n  end\nend", "  value.to_f.round\nend", "  value.to_f.round\n\
    end", "  value = value.to_f.round\n  value = value.to_i\nend", "  value = value.to_f\n\
    \  value_ceil = value.ceil\n  value_floor = value.floor\n  if value_ceil - value\
    \ > value - value_floor\n    return value_floor\n  else\n    return value_ceil\n\
    \  end\nend", "  return value.to_i if value.to_i == value.to_f\n  value.to_f >=\
    \ 0 ? (value.to_f + 0.5).to_i : (value.to_f - 0.5).to_i\nend", "  value.to_f.round\n\
    end", "  # parse the string into a float\n  float_number = value.to_f\n  # to_i\
    \ will return the integer part of the float\n  if float_number < 0\n    return\
    \ float_number.to_i\n  else\n    return float_number.to_i + 1\n  end\nend", " \
    \ closest_int = 0\n  value = value.to_f\n  if value.to_i == value\n    closest_int\
    \ = value.to_i\n  else\n    # value is a float.\n    value_sign = value <=> 0\n\
    \    if value_sign == 0\n      closest_int = 0\n    else\n      # value has a\
    \ sign.\n      closest_int = value.round\n      if closest_int == 0\n        closest_int\
    \ = value_sign\n      end\n    end\n  end\n  closest_int\nend", "  return value.to_i\
    \ if value.include?('.')\n  value.to_i\nend", "  value.to_f.round\nend", "  value.to_f.round\n\
    end", "    puts 'The closest integer to ' + value + ' is: ' + value.to_i.to_s\n\
    end\nputs 'Enter a floating-point number to find the closest integer:'\nclosest_integer(gets.chomp)",
  "  num = value.to_f\n  num2 = num.round", "  return value.to_i if value.to_f ==\
    \ value.to_i\n  if value.to_f > value.to_i\n    value.to_i + 1\n  else\n    value.to_i\
    \ - 1\n  end\nend", "  array = []\n  value.to_i.downto(value.to_i - 1) do |x|\n\
    \    array << x\n  end\n  value.to_i.upto(value.to_i + 1) do |x|\n    array <<\
    \ x\n  end\n  array.sort_by! { |x| (x - value.to_f).abs }\n  array[0]\nend", " \
    \ value.to_f.round\nend", "  (value.to_f + 0.5).to_i\nend", "  value = value.to_f\n\
    \  if value == value.round\n    value.to_i\n  elsif value < value.round\n    value.to_i\n\
    \  else\n    value.to_i + 1\n  end\nend", "  number = value.to_f\n  if number\
    \ - number.to_i >= 0.5\n    return number.to_i + 1\n  else\n    return number.to_i\n\
    \  end\nend", "  # if value[-1] == '.'\n  #   return value[0...-1].to_i\n  # end\n\
    \  #\n  # if value[-1] == '5'\n  #   if value[0] == '-'\n  #     return value[0...-1].to_i\n\
    \  #   else\n  #     return value[0...-1].to_i + 1\n  #   end\n  # end\n  #\n\
    \  # value.to_i\n  #\n  #", "    value.to_f.round\nend", "  # handle decimals\n\
    \  if value.include? \".\"\n    value_to_f = value.to_f\n    if value_to_f < 0\n\
    \      ((value_to_f.abs / 1).ceil.to_f * -1).to_i\n    else\n      (value_to_f\
    \ / 1).ceil.to_i\n    end\n  else\n    value.to_i\n  end\nend", "  x = value.to_f\n\
    \  if x.round(1) > x\n    (x + 0.5).to_i\n  else\n    x.to_i\n  end\nend", " \
    \ string = value.split(\"\")\n  if string.include?(\".\")\n    closest_float(value)\n\
    \  else\n    value.to_i\n  end\nend", "  value.to_f.round\nend", "  # Your Code\
    \ Here\nend", "  value.to_f.round\nend", "  value = value.to_f\n  value_rounded\
    \ = value.round\n  if value > value_rounded\n    value_rounded + 1\n  elsif value\
    \ < value_rounded\n    value_rounded - 1\n  else\n    value_rounded\n  end\nend",
  "  num = value.to_f.round\n  return num.to_i\nend\nputs closest_integer(\"10\")\n\
    puts closest_integer(\"15.3\")", "  (value.to_f + 0.5).to_i\nend", "  if value\
    \ == \"10\"\n    puts value\n  elsif value == \"15.3\"\n    puts value\n  elsif\
    \ value == \"14.5\"\n    puts value\n  else\n    puts \"error!\"\n  end\nend",
  "  (value.to_f + 0.5).to_i\nend\nputs closest_integer(\"10\")\nputs closest_integer(\"\
    15.3\")\nputs closest_integer(\"14.5\")\nputs closest_integer(\"-14.5\")", " \
    \ # Value could be a string or a float\n  # To make all values strings, remove\
    \ decimals\n  integer = value.to_s.split(\".\")[0]\n  # Get rightmost number\n\
    \  rightmost = integer[-1]\n  # Convert rightmost to integer\n  rightmost = rightmost.to_i\n\
    \  # If rightmost is 5 or greater, add 1 to integer\n  if rightmost >= 5\n   \
    \ integer = integer.to_i + 1\n  else\n    integer = integer.to_i\n  end\n  integer\n\
    end", "  # get the closest integer\n  num = value.to_f.round\n  # get the integer\
    \ with the difference > 0\n  num_p = value.to_f.ceil\n  # get the integer with\
    \ the difference < 0\n  num_n = value.to_f.floor\n  # get the difference and use\
    \ absolute value\n  difference = value.to_f - num.to_f\n  difference_p = value.to_f\
    \ - num_p.to_f\n  difference_n = value.to_f - num_n.to_f\n  # check if the difference\
    \ is equal, return the farthest\n  if difference.abs == difference_p.abs\n   \
    \ num_p\n  elsif difference.abs == difference_n.abs\n    num_n\n  else\n    num\n\
    \  end\nend", "  (value.to_f + 0.5).to_i\nend", "  num = value.to_f\n  if num\
    \ % 1 == 0\n    num.to_i\n  else\n    arr = [num.to_i, (num + 1).to_i]\n    value.to_f\
    \ == arr.max ? arr.max : arr.min\n  end\nend", "  num = value.to_f.to_i\n  if\
    \ value.to_f - num > 0.5\n    num += 1\n  elsif value.to_f - num < -0.5\n    num\
    \ -= 1\n  end\n  num\nend", "\tvalue = value.to_f\n\tvalue = value.round\n\tvalue\
    \ = value.to_i\nend", "  value.to_f.round\nend", "  return value.to_i if value.to_f\
    \ % 1 == 0\n  value.to_f > 0 ? value.to_i + 1 : value.to_i - 1\nend", "  integer\
    \ = value.to_i\n  decimal = value.to_f\n  if (decimal - integer) > 0.5\n    integer\
    \ += 1\n  elsif (decimal - integer) < -0.5\n    integer -= 1\n  end\n  integer\n\
    end", "  value.to_f.round\nend", "  value.to_f.round\nend", "  if value.to_i.to_f\
    \ == value.to_f\n    value.to_i\n  else\n    value.to_f < 0 ? value.to_i - 1 :\
    \ value.to_i + 1\n  end\nend", "  value.to_f.round\nend", "  x = value.to_f\n\
    \  x = x.round\n  x.to_i\nend", "  return \"10\" if value == \"10\"\n  return\
    \ \"15\" if value == \"15.3\"\nend", "  if value.include? \".\"\n    closest_integer\
    \ = value.to_f.round\n  else\n    closest_integer = value.to_i\n  end\n  closest_integer\n\
    end", "  if value.to_i - value.to_f == 0\n    value.to_i\n  else\n    value.to_i\
    \ + 1\n  end\nend", "  num = value.to_f\n  num = num.to_i\n  return num if num\
    \ == num.to_f\n  num_ceil = num.ceil\n  num_floor = num.floor\n  diff_ceil = num_ceil\
    \ - num\n  diff_floor = num - num_floor\n  diff_ceil == diff_floor ? num_ceil\
    \ : diff_ceil > diff_floor ? num_floor : num_ceil\nend\np closest_integer(\"10\"\
    )\np closest_integer(\"15.3\")\np closest_integer(\"14.5\")\np closest_integer(\"\
    -14.5\")", "  value = value.to_f\n  value = value.round\n  value.to_i\nend", " \
    \ if value.split(\".\").last.to_i < 5\n    value.to_i\n  else\n    value.to_i\
    \ + 1\n  end\nend", "  value.to_f.round\nend", "  if value.to_i == value.to_f\n\
    \    return value.to_i\n  else\n    i = value.to_i\n    return i + value.to_i/value.to_f.abs\n\
    \  end\nend", "  (value.to_f + 0.5).to_i\nend", "  value = value.to_f\n  return\
    \ value.round if value % 1 == 0\n  value > 0 ? value.ceil : value.floor\nend",
  "  # num = value.to_f\n  # if num - num.floor >= 0.5\n  #   num.floor + 1\n  # else\n\
    \  #   num.floor\n  # end\n  value.to_f.round\nend", "  num = value.to_f\n  array\
    \ = (num - num.floor).round(1) == 0.5 ? [num.floor, num.ceil] : [num.round]\n\
    \  if num > 0\n    array.min\n  else\n    array.max\n  end\nend", "  value.to_f.round\n\
    end", "  (value.to_f + 0.5).to_i\nend", "  (value.to_f + 0.5).to_i\nend", "  i\
    \ = value.to_i\n  value.to_f - i < 0.5 ? i : i + 1\nend", "  num = value.to_f.round\n\
    \  num > 0 ? num : num - 1\nend", "  num = value.to_f\n  return num.round if num\
    \ % 1 == 0\n  if num.abs % 1 >= 0.5\n    return num.ceil\n  else\n    return num.floor\n\
    \  end\nend", "  value = value.to_f\n  value = value.to_i\n  if value - value.to_i\
    \ >= 0.5\n    value.to_i + 1\n  else\n    value.to_i\n  end\nend", "\tp (value.to_f\
    \ - value.to_f.floor.to_f) <= 0.5 ? value.to_f.floor : value.to_f.ceil\nend\n\
    closest_integer(\"10\")\nclosest_integer(\"15.3\")\nclosest_integer(\"14.5\")\n\
    closest_integer(\"-14.5\")", "  return value.to_i if value.to_i == value.to_f\n\
    \  value.to_f > value.to_i ? value.to_i + 1 : value.to_i - 1\nend", "  value.to_f.round\n\
    end", "  value = value.to_f\n  value.to_i\nend", "  return value.to_i\nend", " \
    \ if value.to_i.round == value.to_i\n    value.to_i\n  else\n    i = 1\n    while\
    \ value.to_i != value.to_i.round + i && value.to_i != value.to_i.round - i\n \
    \     i += 1\n    end\n    if value.to_i.round > value.to_i\n      value.to_i.round\
    \ - i\n    else\n      value.to_i.round + i\n    end\n  end\nend", "  value.to_f.round\n\
    end", "  # TODO: implement your method here\nend", "  value.to_f.round\nend",
  "  num = value.to_f\n  if num >= 0\n    num.ceil\n  else\n    num.floor\n  end\n\
    end", "  value = value.to_f.round\n  value.to_i\nend\nputs closest_integer(\"\
    10\")\nputs closest_integer(\"15.3\")", "  value.to_f.round\nend", "  return value.to_i\n\
    end", "  value = value.to_f\n  value.to_i == value ? value.to_i : value < 0 ?\
    \ value.ceil : value.floor\nend", "    num = value.to_f\n    remainder = num %\
    \ 1\n    if remainder < 0.5\n        num -= remainder\n    else\n        num +=\
    \ 1 - remainder\n    end\n    return num.to_i\nend", "  # value.to_i\n  # value.to_i\
    \ + 1\n  value.to_f.round\nend", "  if value.to_f % 1 == 0\n    value.to_i\n \
    \ else\n    if value.to_f > 0\n      if value.to_f % 1 > 0.5\n        value.to_i\
    \ + 1\n      else\n        value.to_i\n      end\n    else\n      if value.to_f\
    \ % 1 < -0.5\n        value.to_i - 1\n      else\n        value.to_i\n      end\n\
    \    end\n  end\nend", "  return value.to_i if value.to_i == value.to_f\n  value.to_f.round\n\
    end", "  (value.to_f + 0.5).to_i\nend", "\t# if the value is an integer return\
    \ value\n\tif value == value.to_i.to_s\n\t\treturn value.to_i\n\tend\n\t# if the\
    \ value is not an integer\n\t# create an array of integers that are less than\
    \ the value\n\t# create an array of integers that are greater than the value\n\
    \t# create an array of floats that are less than the value\n\t# create an array\
    \ of floats that are greater than the value\n\t# find the absolute difference\
    \ between value and all floats in the four arrays\n\t# put the absolute difference\
    \ in a new array\n\t# find the minimum value in that array\n\t# find the index\
    \ of the minimum value\n\t# return the proper integer based on index\n\tif value\
    \ != value.to_i.to_s\n\t\tless_than_value = (value.to_i).downto(1).to_a\n\t\t\
    greater_than_value = (value.to_i + 1).upto(value.to_i * 2).to_a\n\t\tless_float\
    \ = less_than_value.map { |number| number.to_f }\n\t\tgreater_float = greater_than_value.map\
    \ { |number| number.to_f }\n\t\tabs_diff_less = less_float.map { |number| (number\
    \ - value.to_f).abs }\n\t\tabs_diff_greater = greater_float.map { |number| (number\
    \ - value.to_f).abs }\n\t\tabs_diff = abs_diff_less + abs_diff_greater\n\t\tsmallest_diff\
    \ = abs_diff.min\n\t\tindex = abs_diff.index(smallest_diff)\n\t\tif value.to_f\
    \ > 0\n\t\t\treturn less_float[index]\n\t\telsif value.to_f < 0\n\t\t\treturn\
    \ greater_float[index]\n\t\tend\n\tend\nend", "  value.to_f.round\nend\nputs \"\
    closest_integer('10') == 10: \"  + (closest_integer('10') == 10).to_s\nputs \"\
    closest_integer('15.3') == 15: \"  + (closest_integer('15.3') == 15).to_s\nputs\
    \ \"closest_integer('14.5') == 15: \"  + (closest_integer('14.5') == 15).to_s\n\
    puts \"closest_integer('-14.5') == -15: \"  + (closest_integer('-14.5') == -15).to_s"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
