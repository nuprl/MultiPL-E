name: HumanEval_103_rounded_avg
language: rb
prompt: "# You are given two positive integers n and m, and your task is to compute\
  \ the\n# average of the integers from n through m (including n and m). \n# Round\
  \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
  \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
  \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
  \ndef rounded_avg(n, m)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
  \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
  \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
  0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
  \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
  0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
  \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
  0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
  \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\", candidate.call(5,\
  \ 5))\n  end\nend\n"
completions: ["  return -1 if n > m\n  answer = ((n + m) / 2.0).round\n  '0b' + answer.to_s(2)\n\
    end", "  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend",
  "    # return -1 if n > m\n    # ((n + m) / 2.0).round.to_s(2)\n    return -1 if\
    \ n > m\n    ((n + m) / 2.0).round.to_s(2)\nend", "  if n <= m\n    ((n..m).sum\
    \ / (m-n+1)).to_s(2)\n  else\n    -1\n  end\nend", "  # your code here\nend",
  "  # your code here\nend", "  if n > m\n    return -1\n  else\n    sum = 0\n   \
    \ for i in n..m\n      sum += i\n    end\n    return \"0b\" + (sum / (m - n +\
    \ 1)).to_s(2)\n  end\nend", "  # your code here\nend", "\tif n > m\n\t\treturn\
    \ -1\n\tend\n\taverage = (n+m)/2\n\tbinary = average.to_s(2)\n\treturn \"0b#{binary}\"\
    \nend", "\tif n > m\n\t\tresult = -1\n\telse\n\t\tsum = (n + m) * ((m - n) / 2\
    \ + 1)\n\t\tresult = sum / ((m - n) + 1)\n\tend\n\t'0b' + result.to_s(2)\nend",
  "  \nend", "  if n > m\n    return -1\n  else\n    average = (n + m) / 2\n    average.to_s(2)\n\
    \  end\nend", "  res = ((n + m) / 2.0).round\n  res > m ? -1 : \"0b#{res.to_s(2)}\"\
    \nend", "  # Write your code here\nend", "  answer = \"\"\n  if n > m\n    return\
    \ -1\n  else\n    solution = (n + m) / 2\n    answer = \"0b\"\n    solution.to_s(2).each_char\
    \ do |i|\n      answer << i\n    end\n  end\n  return answer\nend", "  total =\
    \ (n..m).reduce(:+)\n  avg = (total.to_f / (m - n + 1)).round\n  if avg == 0\n\
    \    return '0b0'\n  else\n    return \"0b#{avg.to_s(2)}\"\n  end\nend", "   \
    \ return -1 if n > m\n    bin = (n..m).sum / (m - n + 1)\n    \"0b#{bin.to_s(2)}\"\
    \nend", "  return -1 if n > m\n  (n..m).reduce(:+).to_f / (m - n + 1).to_f\nend",
  "  if n > m\n    -1\n  else\n    binary = ((n + m) / 2.0).round.to_s(2)\n    \"\
    0b#{binary}\"\n  end\nend", "  if n > m\n    -1\n  else\n    arr = (n..m).to_a\n\
    \    sum = arr.inject{|a, b| a + b}\n    average = sum / arr.length\n    average.to_s(2)\n\
    \  end\nend", end, "  return -1 if n > m\n  result = (n+m)/2\n  result.to_s(2)\n\
    end", "  if n > m\n    -1\n  else\n    sum = 0\n    n.upto(m) { |num| sum += num\
    \ }\n    avg = sum / (m - n + 1)\n    avg.to_s(2)\n  end\nend", "\tif n > m\n\t\
    \treturn -1\n\telse\n\t\tanswer = (n+m)/2\n\t\treturn answer.to_s(2)\n\tend\n\
    end", "  (n+m)/2.0\nend", "  return -1 if n > m\n  av = (n + m) / 2\n  binary\
    \ = av.to_s(2)\n  \"0b#{binary}\"\nend", "  avg = ((n+m)/2.0).round\n  avg < n\
    \ || avg > m ? -1 : \"0b#{avg.to_s(2)}\"\nend", "  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  avg.to_s(2)\nend", "  return -1 if n > m\n  (n..m).reduce(:+).fdiv(n..m).round.to_s(2)\n\
    end", "  return -1 if n > m\n  avg = (n + m).to_f / 2\n  \"0b#{avg.round.to_s(2)}\"\
    \nend", "  if n > m\n    -1\n  else\n    avg = (n + m) / 2\n    \"0b#{avg.to_s(2)}\"\
    \n  end\nend", "  if n > m\n    return -1\n  else\n    sum = 0\n    (n..m).each\
    \ do |i|\n      sum += i\n    end\n    ((sum.to_f/(m-n+1)).round).to_s(2)\n  end\n\
    end", "  # your code here\nend", "  return -1 if n > m\n  binary_average = ((n\
    \ + m) / 2.0).round.to_s(2)\n  \"0b#{binary_average}\"\nend", "  return -1 if\
    \ n > m\n  avg = (n + m) / 2\n  binary = \"0b\"\n  while avg > 0\n    binary.insert(2,\
    \ (avg % 2).to_s)\n    avg /= 2\n  end\n  binary\nend", "  return -1 if n > m\n\
    \  avg = (n..m).reduce(:+) / (m - n + 1)\n  avg.to_s(2)\nend", "\t(n..m).reduce(:+)/(m-n+1)\n\
    end", "  # your code here\nend", "    sum = 0\n    (n..m).each { |num| sum +=\
    \ num }\n    avg = sum / (m - n + 1)\n    avg.to_s(2)\nend", "\tif n <= m\n\t\t\
    (n..m).reduce(:+)/(m-n+1.0).round.to_s(2)\n\telse\n\t\t-1\n\tend\nend", "  return\
    \ -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend", "\tif n > m\n\
    \t\treturn -1\n\telse\n\t\tavg = (n + m) / 2\n\t\treturn avg.to_s(2)\n\tend\n\
    end", "    if n > m\n        return -1\n    end\n    avg = n + m\n    avg /= 2.0\n\
    \    avg.ceil.to_s(2)\nend", "  (n > m) ? -1 : (\"0b\" + (\"%b\" % (((n+m)/2.0).round)))\n\
    end", "  rounded_avg = (n+m)/2\n  if rounded_avg >= n && rounded_avg <= m\n  \
    \  return \"0b#{rounded_avg.to_s(2)}\"\n  else\n    return -1\n  end\nend", '  raise
    "n must be greater than or equal to m" if n > m', "    average = (n + m) / 2.0\n\
    \    average.round == average ? \"0b#{average.to_s(2)}\" : \"0b#{average.round.to_s(2)}\"\
    \nend\nputs rounded_avg(1, 5)", "\tarr = (n..m).to_a\n\tsum = arr.inject(:+)\n\
    \tavg = (sum / arr.size).round\n\tavg.to_s(2)\nend", "  sum = 0\n  counter = 0\n\
    \  if n > m\n    return -1\n  end\n  n.upto(m) do |i|\n    sum += i\n    counter\
    \ += 1\n  end\n  avg = sum/counter\n  binary = avg.to_s(2)\n  '0b' + binary\n\
    end", "  # your code here\nend", "  if n < m\n    # your code here\n  else\n \
    \   -1\n  end\nend", "  if n > m \n    return -1\n  end\n  sum = (n + m).to_f\
    \ / 2\n  sum.round.to_s(2)\nend", "  if n < m\n    average = (n + m) / 2\n   \
    \ (average.to_s(2)).to_i\n  else\n    -1\n  end\nend", "  avg = n.upto(m).inject(:+).to_f\
    \ / (m - n + 1)\n  avg = (avg + 0.5).to_i.to_s(2)\n  return \"0b#{avg}\" if n\
    \ <= m\n  -1\nend", '  return -1 if n > m', "  # your code here\nend", "  return\
    \ -1 if n > m\n  a = (n + m) / 2\n  a.to_s(2)\nend", "  if n > m\n    -1\n  else\n\
    \    num = (n + m) / 2\n    num.to_s(2)\n  end\nend", "  return -1 if n > m\n\
    \  bin = (n + m).fdiv(2).round.to_s(2)\n  \"0b#{bin}\"\nend", "  if n > m\n  \
    \  return -1\n  else\n    nums = (n..m).to_a\n    avg = nums.inject(:+)/nums.length\n\
    \    binary = avg.to_s(2)\n    return \"0b#{binary}\"\n  end\nend", "  if n >\
    \ m\n    return -1\n  end\n  avg = (n + m) / 2\n  return '0b' + avg.to_s(2)\n\
    end", "  if n > m\n    return -1\n  end\n  avg = (n + m) / 2\n  if avg.odd?\n\
    \    avg += 1\n  end\n  return \"0b#{avg.to_s(2)}\"\nend", "  (n > m) ? -1 : n.upto(m).inject(&:+).to_f\
    \ / ((m - n) + 1).to_f\nend", "  ((n + m) / 2.0).round.to_s(2)\nend", "  return\
    \ -1 if n > m\n  a = ((n+m).to_f/2).round\n  \"0b#{a.to_s(2)}\"\nend", "  return\
    \ -1 if n > m\n  (n + m) / 2.0.round(0).to_s(2)\nend", "\treturn -1 if n > m\n\
    \ttotal = n\n\t(n+1..m).each do |i|\n\t\ttotal += i\n\tend\n\tavg = total.to_f\
    \ / (m-n+1)\n\trounded = avg.round\n\treturn \"0b#{rounded.to_s(2)}\"\nend\nputs\
    \ \"Question 7:\"\nputs rounded_avg(1, 5) == \"0b11\"\nputs rounded_avg(7, 5)\
    \ == -1\nputs rounded_avg(10, 20) == \"0b1111\"\nputs rounded_avg(20, 33) == \"\
    0b11010\"", "  #your code here\nend", "  if n > m\n    \"-1\"\n  else\n    average\
    \ = (n..m).reduce(:+) / (m - n + 1)\n    \"0b#{average.to_s(2)}\"\n  end\nend",
  "  avg = (n + m) / 2.0\n  avg.ceil.to_s(2)\nend", "  # your code here\nend", " \
    \ return -1 if n > m\n  sum = 0\n  for i in n..m\n    sum += i\n  end\n  number\
    \ = (sum / (m - n + 1)).round\n  return \"0b#{number.to_s(2)}\"\nend", "  (n >\
    \ m) ? -1 : avg(n, m).to_s(2)\nend", "  sum = 0\n  (n..m).each { |i| sum += i\
    \ }\n  sum = sum.to_f / (m - n + 1)\n  if sum.floor != sum\n    sum = sum.ceil\n\
    \  else\n    sum = sum.floor\n  end\n  sum.to_s(2)\nend", "  return -1 if n >\
    \ m\n  average = (n + m) / 2\n  average = average.round\n  average.to_s(2)\nend",
  "  return -1 if n > m\n  (n..m).reduce(:+).fdiv(m - n + 1).round.to_s(2)\nend",
  "  # your code here\nend", "  return -1 if n > m\n  sum = 0\n  (n..m).each { |num|\
    \ sum += num }\n  average = (sum / (m - n + 1)).round\n  \"0b#{average.to_s(2)}\"\
    \nend", "  # write your code here\nend", "\treturn -1 if n > m\n\tavg = (n + m)\
    \ / 2\n\treturn \"0b#{avg.to_s(2)}\"\nend", "  (n..m).reduce(:+).fdiv(m - n +\
    \ 1).round.to_s(2)\nend", "  average = (n..m).inject(:+)/(m-n+1).to_f\n  average.to_i\
    \ == average ? \"0b#{average.to_i.to_s(2)}\" : -1\nend\nputs \"##########  Q.4\
    \  ##########\"\nputs rounded_avg(1, 5) # \"0b11\"\nputs rounded_avg(7, 5) # -1\n\
    puts rounded_avg(10, 20) # \"0b1111\"\nputs rounded_avg(20, 33) # \"0b11010\"\n\
    puts \"##########  Q.4  ##########\"\nputs", "  n, m = m, n if n > m\n  return\
    \ -1 if n > m\n  average = n.upto(m).inject(:+).to_f / (m - n + 1)\n  [average.to_i.to_s(2)].pack('B*')\n\
    end", "    return -1 if n > m\n    avg = (n + m) / 2\n    avg.to_s(2)\nend", " \
    \ # Write your code here\nend", "  return -1 if n > m\n  average = (n + m) / 2\n\
    \  \"0b#{average.to_s(2)}\"\nend", "  return -1 if n > m\n  average = ((n + m).to_f\
    \ / 2).round\n  \"0b#{average.to_s(2)}\"\nend", "  if n > m\n    -1\n  else\n\
    \    (n + m) / 2.to_f.round.to_s(2)\n  end\nend", "  a = (n..m).inject(:+) / (m\
    \ - n + 1.0)\n  if n > m\n    -1\n  else\n    \"0b#{a.round.to_s(2)}\"\n  end\n\
    end", "  (((n+m).to_f/2).round).to_s(2)\nend", "\tif n>m\n\t\t\"-1\"\n\telse\n\
    \t\t\"0b#{(n+m)/2.0.round.to_s(2)}\"\n\tend\nend", "  return -1 if n > m\n  avg\
    \ = (n..m).inject(:+).to_f / (m - n + 1)\n  \"0b#{avg.round.to_s(2)}\"\nend",
  "  return -1 if n > m\n  result = ((n + m).to_f / 2).ceil.to_s(2)\n  \"0b#{result}\"\
    \nend", "    return -1 if n > m\n    sum = 0\n    (n..m).each { |i| sum += i }\n\
    \    avg = (sum / (m - n + 1)).round\n    \"0b#{avg.to_s(2)}\"\nend", "  arr =\
    \ []\n  while n <= m\n    arr << n\n    n += 1\n  end\n  arr = arr.reduce(:+)\
    \ / arr.length\n  arr % 1 == 0 ? \"0b#{arr.to_s(2)}\" : -1\nend", "  if n > m\n\
    \    -1\n  else\n    n = n.to_f\n    m = m.to_f\n    avg = (n + m) / 2\n    avg\
    \ = avg.round\n    avg = avg.to_s(2)\n    avg = \"0b\" + avg\n    avg\n  end\n\
    end", "  return -1 if n > m\n  average = (n + m) / 2\n  average.to_s(2)\nend",
  "  return -1 if n > m\n  (1.0 * (n + m) / 2).round.to_s(2)\nend", "  n > m ? -1\
    \ : \"0b\" + (n + m).div(2).to_s(2)\nend", "  return -1 if n > m\n  sum = (n..m).inject(:+)\n\
    \  result = (sum.to_f / (m - n + 1).to_f).round\n  \"0b#{result.to_s(2)}\"\nend",
  "  # Your code here\nend", "\treturn -1 if n > m\n\tresult = (n + m) / 2\n\tresult.to_s(2)\n\
    end", "  raise \"n must be less than or equal to m\" if n > m\n  if n < m\n  \
    \  avg = (n + m) / 2\n    avg.to_s(2)\n  else\n    -1\n  end\nend", "  if n >\
    \ m \n    return -1\n  else\n    (n..m).inject(:+)/(m-n+1)\n  end\nend", "  #\
    \ Your code here\nend", "  return -1 if n > m\n  # my_avg = (n..m).reduce(:+)\
    \ / (m - n + 1)\n  my_avg = (n + m) / 2\n  result = my_avg.to_s(2)\n  \"0b#{result}\"\
    \nend", "\tif n > m\n\t\treturn -1\n\telse\n\t\treturn \"0b\" + ((n+m)/2).to_s(2)\n\
    \tend\nend", "  if n <= m\n    ((n + m) / 2.0).round.to_s(2)\n  else\n    -1\n\
    \  end\nend", "  if n > m\n    -1\n  else\n    sum = 0\n    (n..m).each do |i|\n\
    \      sum += i\n    end\n    '0b' + (sum / (m - n + 1)).to_s(2)\n  end\nend",
  "  if n > m\n    return -1\n  else\n    avg = (n..m).reduce(:+) / (m - n + 1)\n\
    \    avg.to_s(2)\n  end\nend", "  if n < m\n    (n + m) / 2.0\n  else\n    -1\n\
    \  end\nend", "  return -1 if n > m\n  avg = ((n + m).to_f / 2).round\n  \"0b#{avg.to_s(2)}\"\
    \nend", "  # write your code here\nend", "  return -1 if n > m\n  (n + m) / 2.0\n\
    end", "  n > m ? -1 : \"%b\" % ((n + m) / 2.0).round\nend", "  return -1 if n\
    \ > m\n  avg = ((n..m).reduce(:+).to_f/(m-n+1)).round\n  \"0b#{avg.to_s(2)}\"\n\
    end", "  # YOUR CODE HERE\nend", "  range = (n..m).to_a\n  avg = range.inject(:+).to_f\
    \ / range.length\n  avg.round.to_s(2)\nend", "  (n + m) / 2\nend", end, "  # calculate\
    \ average\n  # av = (n + m) / 2\n  # round average\n  # ra = av.round\n  # convert\
    \ to binary\n  # bin = ra.to_s(2)\n  # prepend binary with 0b\n  # \"0b#{bin}\"\
    \n  \n  if n > m\n    return -1\n  else\n    \"0b#{(n + m) / 2.round.to_s(2)}\"\
    \n  end\nend", "    avg = ((n+m)/2.0).round\n    avg > m ? -1 : \"0b#{avg.to_s(2)}\"\
    \nend\nputs \"---------Rounded Avg\"\nputs rounded_avg(1, 5) == \"0b11\"\nputs\
    \ rounded_avg(7, 5) == -1\nputs rounded_avg(10, 20) == \"0b1111\"\nputs rounded_avg(20,\
    \ 33) == \"0b11010\"", "\treturn -1 if n > m\n\tsum = (n..m).inject(:+)\n\t((sum/((m-n)+1))).to_s(2)\n\
    end", "  return -1 if n > m\n  return \"%b\" % ((n + m) / 2.0).round\nend", " \
    \ (n > m) ? -1 : ('0b' + (((n+m)/2.0).round).to_s(2))\nend\nputs \"rounded_avg(1,\
    \ 5) => #{rounded_avg(1, 5)}\"\nputs \"rounded_avg(7, 5) => #{rounded_avg(7, 5)}\"\
    \nputs \"rounded_avg(10, 20) => #{rounded_avg(10, 20)}\"\nputs \"rounded_avg(20,\
    \ 33) => #{rounded_avg(20, 33)}\"", "  #your code here\nend", "    return -1 if\
    \ n > m\n    (n..m).reduce(:+).fdiv(m - n + 1).round.to_s(2)\nend", "  average\
    \ = (n + m) / 2\n  average < 1 ? -1 : average.to_s(2)\nend", "\treturn -1 if n\
    \ > m\n\tsum = 0\n\t(n..m).each do |num|\n\t\tsum += num\n\tend\n\t(sum / (m -\
    \ n + 1) + 0.5).floor.to_s(2)\nend", "    # Your code here\n    return -1 if n\
    \ > m\n    nums = n.upto(m).to_a\n    nums.sum / nums.size\nend", "  (n < m) ?\
    \ -1 : \"0b#{(n..m).inject(:+)/(m-n+1)}\"\nend", "    avg = (n + m)/2.0\n    if\
    \ n > m\n        -1\n    else\n        \"0b#{avg.round.to_s(2)}\"\n    end\nend",
  "\tif n > m \n\t\treturn -1\n\telse\n\t\tsum = n + m\n\t\tsum = sum / 2\n\t\tputs\
    \ (\"0b\" + sum.to_s(2))\n\tend\nend\nrounded_avg(1, 5)\nrounded_avg(7, 5)\nrounded_avg(10,\
    \ 20)\nrounded_avg(20, 33)", "  # Replace this line with your code\nend", "  return\
    \ -1 if n > m\n  n = n.to_f\n  m = m.to_f\n  avg = (n + m) / 2\n  if avg.to_i\
    \ == avg\n    result = avg.to_i\n  else\n    result = avg.to_i + 1\n  end\n  \"\
    0b#{result.to_s(2)}\"\nend", "  if n > m\n    return -1\n  else\n    sum = 0\n\
    \    (n..m).each do |i|\n      sum += i\n    end\n    return sum / (m - n + 1)\n\
    \  end\nend", "  #your code here\nend", "  return -1 if n > m\n  sum = (n..m).reduce(:+)\n\
    \  '0b' + (sum / (m - n + 1)).to_s(2)\nend", "  # your code here\nend", "  return\
    \ -1 if n > m\n  avg = (n..m).reduce(:+) / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\
    \nend", "  (n + m) / 2\nend", "  (n > m) ? -1 : (\"0b\" + (((n + m) / 2.0).round).to_s(2))\n\
    end", "  if n > m\n    return -1\n  end\n  avg = (n + m) / 2\n  num_binary = avg.to_s(2)\n\
    \  \"0b#{num_binary}\"\nend", "  if n > m\n    return -1\n  else\n    sum = 0\n\
    \    (n..m).each do |num|\n      sum += num\n    end\n    avg = sum / (m - n +\
    \ 1)\n    return '0b' + avg.to_s(2)\n  end\nend", "  \nend", "  return -1 if n\
    \ > m\n  nums = (n..m).to_a\n  average = (nums.inject(:+)/nums.size.to_f).round\n\
    \  \"0b#{average.to_s(2)}\"\nend", "  (n > m) ? -1 : \"0b#{(n..m).inject(:+)/(m-n+1).to_s(2)}\"\
    \nend", "  n > m ? -1 : '0b' + (n..m).reduce(:+).fdiv(m - n + 1).round.to_s(2)\n\
    end", "  if n > m\n    return -1\n  else\n    sum = 0\n    for i in n..m\n   \
    \   sum += i\n    end\n    rounded_sum = (sum.to_f / (m - n + 1).to_f).round\n\
    \    return \"0b\" + rounded_sum.to_s(2)\n  end\nend", "  return -1 if n > m\n\
    \  (\"0b\" + (n + m) / 2.0.round.to_s(2))\nend", "    return -1 if n > m\n   \
    \ m += 1\n    result = (n..m).sum / (m - n)\n    \"0b#{result.to_s(2)}\"\nend",
  "    return -1 if n > m\n    n = n.to_f\n    nums = []\n    (n..m).each { |num|\
    \ nums << num }\n    sum = nums.reduce(:+)\n    sum = sum / nums.length\n    sum\
    \ = sum.round\n    \"0b#{sum.to_s(2)}\"\nend", "\tif n > m\n\t\treturn -1\n\t\
    else\n\t\tavg = (n+m)/2\n\t\tavg.to_s(2)\n\tend\nend", "\tif n > m\n\t\t-1\n\t\
    else\n\t\t(n+m)/2.0.round\n\tend\nend", "  range = (n..m).to_a\n  return -1 if\
    \ n > m\n  avg = range.inject(:+)/range.size\n  return \"0b#{avg.to_s(2)}\"\n\
    end", "  num = (n + m) / 2.0\n  (num % 1).zero? ? num.to_s(2) : -1\nend", '  return
    -1 if n > m', "  rounded_avg = (n + m) / 2\n  rounded_avg > m ? -1 : \"0b#{rounded_avg.to_s(2)}\"\
    \nend", "  return -1 if n > m\n  average = (n..m).reduce(:+) / (m - n + 1)\n \
    \ average.to_s(2)\nend", "    # Your code here\nend", "  if n > m\n    return\
    \ -1\n  end\n  average = (n + m) / 2\n  return \"0b#{average.to_s(2)}\"\nend",
  "  n > m ? -1 : (\"0b\" + ((n + m).to_f / 2).round.to_s(2))\nend", "  return -1\
    \ if n > m\n  count = n\n  sum = 0\n  while count <= m\n    sum += count\n   \
    \ count += 1\n  end\n  binary = sum / (m - n + 1)\n  \"0b#{binary.to_s(2)}\"\n\
    end", "\t# your code here\nend", "  if n > m\n    -1\n  else\n    sum = (n..m).reduce(:+)\n\
    \    mean = sum.to_f / (m - n + 1)\n    avg = mean.round\n    avg.to_s(2)\n  end\n\
    end", "  if n > m \n    -1\n  else\n    avg = (n..m).reduce(:+) / (m - n + 1)\n\
    \    \"0b#{avg.to_s(2)}\"\n  end\nend", "    sum = 0\n    n_to_m = (n..m).to_a\n\
    \    return -1 if n > m\n    n_to_m.each do |num|\n        sum += num\n    end\n\
    \    rounded_avg = sum / n_to_m.length\n    p \"0b#{rounded_avg.to_s(2)}\"\nend",
  "    ((n + m) / 2.0).round.to_s(2)\nend", "  \nend", "  ((n+m)/2.0).round.to_s(2)\n\
    end", "  # TODO: complete\nend", "  return -1 if n > m\n  # sum = 0\n  # (n..m).each\
    \ { |i| sum += i }\n  # (sum.to_f / (m - n + 1).to_f).round.to_s(2)\n  # sum =\
    \ 0\n  # (n..m).reduce(:+) / (m - n + 1)\n  # sum = 0\n  # (n..m).reduce(:+) /\
    \ (m - n + 1)\n  \"0b#{'%b' % ((n..m).reduce(:+) / (m - n + 1))}\"\nend", "  return\
    \ -1 if n > m\n  average = ((n + m) / 2.0).round\n  \"0b#{average.to_s(2)}\"\n\
    end", "  range = (n..m).to_a\n  sum = range.inject(:+)\n  avg = sum / range.size\n\
    \  avg = avg.round\n  binary = avg.to_s(2)\n  binary = \"0b#{binary}\"\n  binary\n\
    end", "  return -1 if n > m\n  sum = 0\n  (n..m).each do |num|\n    sum += num\n\
    \  end\n  average = sum / (m - n + 1)\n  average = average.to_s(2)\n  \"0b#{average}\"\
    \nend", "  return -1 if n > m\n  (n+m)/2.to_i.to_s(2)\nend", "  return -1 if n\
    \ > m\n  average = (n + m) / 2\n  average.to_s(2)\nend", "  if n > m\n    return\
    \ -1\n  else\n    average = (n + m) / 2\n    return \"0b#{average.to_s(2)}\"\n\
    \  end\nend", "  if n > m \n    return -1\n  end\n  sum = 0\n  for i in n..m\n\
    \    sum += i\n  end\n  avg = sum / (m - n + 1)\n  avg.to_s(2)\nend", "  return\
    \ -1 if n > m\n  sum = 0\n  for i in n..m\n    sum += i\n  end\n  average = sum\
    \ / (m - n + 1)\n  \"0b#{average.to_s(2)}\"\nend", "\treturn -1 if n > m\n\t\n\
    \tsum = 0\n\tfor i in n..m\n\t\tsum += i\n\tend\n\t\n\tsum = (sum / (m - n + 1)).to_i\n\
    \tsum.to_s(2)\nend", "  if n > m\n    return -1\n  end\n  n_array = n.to_s.split('')\n\
    \  m_array = m.to_s.split('')\n  n_array.unshift(\"0\") if n_array.length == 1\n\
    \  m_array.unshift(\"0\") if m_array.length == 1\n  n_length = n_array.length\n\
    \  m_length = m_array.length\n  if n_length != m_length\n    larger_length = [n_length,\
    \ m_length].max\n    smaller_length = [n_length, m_length].min\n    difference\
    \ = larger_length - smaller_length\n    if n_length > m_length\n      m_array.unshift(\"\
    0\") until m_array.length == larger_length\n    else\n      n_array.unshift(\"\
    0\") until n_array.length == larger_length\n    end\n  end\n  arrays_joined =\
    \ []\n  n_array.each_with_index do |x, y|\n    arrays_joined << x\n    arrays_joined\
    \ << m_array[y]\n  end\n  arrays_joined.each_with_index do |x, y|\n    if y %\
    \ 2 == 0\n      arrays_joined[y] = x.to_i\n    else\n      arrays_joined[y] =\
    \ x.to_i\n    end\n  end\n  sum = 0\n  arrays_joined.each { |x| sum += x }\n \
    \ sum / arrays_joined.length\nend", "\ttotal = 0\n\t(n..m).each { |num| total\
    \ += num }\n\tavg = total / (m - n + 1)\n\t\"0b#{avg.to_s(2)}\"\nend", "  n >\
    \ m ? -1 : [n, m].sum.fdiv(2).round.to_s(2)\nend", "  return -1 if n > m\n  ((n\
    \ + m) / 2.0).round.to_s(2)\nend", "  sum = 0\n  if n > m\n    p -1\n  else\n\
    \    (n..m).each do |e|\n      sum += e\n    end\n    p \"0b#{sum/(m-n+1).to_s(2)}\"\
    \n  end\nend", "  sum = 0\n  for x in n..m\n    sum += x\n  end\n  if sum > 0\n\
    \    avg = sum/(m-n+1)\n    return \"0b#{avg.to_s(2)}\"\n  else\n    return -1\n\
    \  end\nend\nputs \"rounded_avg:\"\nputs rounded_avg(1, 5) == \"0b11\"\nputs rounded_avg(7,\
    \ 5) == -1\nputs rounded_avg(10, 20) == \"0b1111\"\nputs rounded_avg(20, 33) ==\
    \ \"0b11010\"\nputs", "  return -1 if n > m\n  sum = 0\n  n.upto(m) { |num| sum\
    \ += num }\n  avg = (sum.to_f / (m - n + 1)).round\n  \"0b#{avg.to_s(2)}\"\nend",
  "  return -1 if n > m\n  n = n.to_f\n  m = m.to_f\n  \"0b#{(n + m) / 2.0}\"\nend",
  "  # TODO\nend", "  return -1 if n > m\n  sum = (n..m).reduce(:+)\n  avg = (sum\
    \ / (m - n + 1)).round\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n > m\n\
    \  average = (n + m) / 2\n  \"0b#{average.to_s(2)}\"\nend", "  return -1 if n\
    \ > m\n  binary_string = (n + m) / 2.to_f.round.to_s(2)\n  \"0b#{binary_string}\"\
    \nend", "  if n > m\n    return -1\n  else\n    sum = 0\n    for i in n..m\n \
    \     sum += i\n    end\n    avg = sum / (m - n + 1)\n    return \"0b\" + avg.to_s(2)\n\
    \  end\nend", "\treturn -1 if n > m\n\tsum = 0\n\t(n..m).each do |int|\n\t\tsum\
    \ += int\n\tend\n\tavg = sum / (m - n + 1)\n\treturn \"0b#{avg.to_s(2)}\"\nend",
  "  average = (n + m) / 2\n  (n > m) ? -1 : average.to_s(2)\nend", "  res = (n +\
    \ m).fdiv(2)\n  if res.round == res\n    res = res.round\n  else\n    res = res.round\
    \ + 1\n  end\n  return -1 if res < 0\n  res.to_s(2)\nend", "\tif n > m\n\t\treturn\
    \ -1\n\tend\n\tsum = 0\n\t(n..m).each do |i|\n\t\tsum += i\n\tend\n\treturn \"\
    0b\" + (sum / (m - n + 1)).to_s(2)\nend", "  n, m = m, n if n > m\n  \"0b#{(n+m)/2.to_s(2)}\"\
    \nend", "\tif n > m\n\t\treturn -1\n\telse\n\t\tsum = 0\n\t\tfor i in n..m\n\t\
    \t\tsum += i\n\t\tend\n\t\tavg = (sum / (m - n + 1)).round\n\t\treturn \"0b\"\
    \ + avg.to_s(2)\n\tend\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
