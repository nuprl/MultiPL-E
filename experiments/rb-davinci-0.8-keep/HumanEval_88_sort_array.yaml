name: HumanEval_88_sort_array
language: rb
prompt: "# Given an array of non-negative integers, return a copy of the given array\
  \ after sorting,\n# you will sort the given array in ascending order if the sum(\
  \ first index value, last index value) is odd,\n# or sort it in descending order\
  \ if the sum( first index value, last index value) is even.\n# Note:\n# * don't\
  \ change the given array.\n# Examples:\n# * sort_array([]) => []\n# * sort_array([5])\
  \ => [5]\n# * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n# * sort_array([2,\
  \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\ndef sort_array(array)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
  \    candidate = method(:sort_array)\n    assert_equal([], candidate.call([]))\n\
  \    assert_equal([5], candidate.call([5]))\n    assert_equal([0, 1, 2, 3, 4, 5],\
  \ candidate.call([2, 4, 3, 0, 1, 5]))\n    assert_equal([6, 5, 4, 3, 2, 1, 0], candidate.call([2,\
  \ 4, 3, 0, 1, 5, 6]))\n    assert_equal([1, 2], candidate.call([2, 1]))\n    assert_equal([0,\
  \ 11, 15, 32, 42, 87], candidate.call([15, 42, 87, 32, 11, 0]))\n    assert_equal([23,\
  \ 21, 14, 11], candidate.call([21, 14, 23, 11]))\n  end\nend\n"
completions: ["  sort_array_helper(array, 0, array.length - 1)\nend", "  first_element\
    \ = array[0]\n  last_element = array[-1]\n  sum = first_element + last_element\n\
    \  sum.odd? ? array.sort : array.sort.reverse\nend", "  if array.size > 1\n  \
    \  if array.first + array.last % 2 == 0\n      array.sort! { |a, b| b <=> a }\n\
    \    else\n      array.sort! { |a, b| a <=> b }\n    end\n  end\n  array\nend",
  "  sum = array.first + array.last\n  if sum.odd?\n    array.sort\n  else\n    array.sort.reverse\n\
    \  end\nend", "  if (array.length == 0) then array\n  elsif (array.length == 1)\
    \ then array\n  elsif (array[0] + array[-1]) % 2 == 0 then array.sort.reverse\n\
    \  else array.sort\n  end\nend", "  return array if array.empty?\n  array.sort_by{|e|\
    \ e.odd? ? -1 : 1}\nend", "  return array if array.size < 2\n  array.sort { |x,\
    \ y| array.index(x) + array.index(y) % 2 == 0 ? y <=> x : x <=> y }\nend", " \
    \ if array.length.odd?\n    array.sort\n  else\n    array.sort.reverse\n  end\n\
    end", "  if array.size == 0 || array.size == 1\n    return array\n  end\n  if\
    \ array[0] + array[-1] % 2 == 0\n    array.sort.reverse\n  else\n    array.sort\n\
    \  end\nend", "  # TODO: program me\nend", "  if array.length < 2\n    return\
    \ array\n  end\n  if array[0] + array[-1] % 2 == 0\n    return array.sort.reverse\n\
    \  else\n    return array.sort\n  end\nend", "  array.empty? ? [] : array.sort_by.with_index{|x,i|\
    \ sum_indices = array.first + array.last; sum_indices.odd? ? i : -i}\nend", " \
    \ return array if array.length == 0\n  sum = array[0] + array[-1]\n  if sum.odd?\n\
    \    array.sort\n  else\n    array.sort.reverse\n  end\nend", "  sum = array.first\
    \ + array.last\n  if sum.odd?\n    return array.sort\n  else\n    return array.sort.reverse\n\
    \  end\nend", "  if (array.size == 0)\n    return array\n  end\n  odd_idx = []\n\
    \  even_idx = []\n  start_idx = 0\n  last_idx = array.size - 1\n  sum = array[start_idx]\
    \ + array[last_idx]\n  if sum % 2 == 0\n    odd_idx = array.values_at(* array.each_index.select\
    \ {|i| i.odd?})\n    even_idx = array.values_at(* array.each_index.select {|i|\
    \ i.even?})\n    odd_idx.sort! { |x,y| y <=> x }\n    even_idx.sort! { |x,y| y\
    \ <=> x }\n    x = 0\n    y = 0\n    array.each_index do |z|\n      if z.odd?\n\
    \        array[z] = odd_idx[x]\n        x = x + 1\n      else\n        array[z]\
    \ = even_idx[y]\n        y = y + 1\n      end\n    end\n  else\n    odd_idx =\
    \ array.values_at(* array.each_index.select {|i| i.odd?})\n    even_idx = array.values_at(*\
    \ array.each_index.select {|i| i.even?})\n    odd_idx.sort! { |x,y| x <=> y }\n\
    \    even_idx.sort! { |x,y| x <=> y }\n    x = 0\n    y = 0\n    array.each_index\
    \ do |z|\n      if z.odd?\n        array[z] = odd_idx[x]\n        x = x + 1\n\
    \      else\n        array[z] = even_idx[y]\n        y = y + 1\n      end\n  \
    \  end\n  end\n  return array\nend", "  # write your code here\nend", "  sum =\
    \ array.first + array.last\n  array.sort! { |a, b| sum.odd? ? a <=> b : b <=>\
    \ a }\nend", "  # TODO\nend", "  array.sort_by.with_index { |num, index| (index\
    \ + num).odd? ? [0, num] : [1, num] }\nend", "  array.sort do |a, b|\n    (array.index(a)\
    \ + array.index(b)).odd? ? a <=> b : b <=> a\n  end\nend", "  return array if\
    \ array.empty?\n  return array if array.length == 1\n  if (array[0] + array[-1])\
    \ % 2 == 0\n    array.sort.reverse\n  else\n    array.sort\n  end\nend", "  if\
    \ array.length == 0\n    return array\n  elsif array.length == 1\n    return array\n\
    \  else\n    if (array[0] + array[-1]) % 2 == 0\n      return array.sort.reverse\n\
    \    else\n      return array.sort\n    end\n  end\nend", "  return array if array.length\
    \ == 0 || array.length == 1\n  (array.length - 1).times do |_|\n    array.each_with_index\
    \ do |value, index|\n      next if index == array.length - 1\n      next if array[index]\
    \ < array[index + 1]\n      array[index], array[index + 1] = array[index + 1],\
    \ array[index]\n    end\n  end\n  sum = array[0] + array[-1]\n  sum.odd? ? array\
    \ : array.reverse\nend", "  if array.empty?\n    return array\n  end\n  if array.length\
    \ == 1\n    return array\n  end\n  if array.sum % 2 == 0\n    array.sort!.reverse!\n\
    \  else\n    array.sort!\n  end\nend", "  #your code here\nend", "  # write your\
    \ code here\nend", "  if array.length == 0 || array.length == 1\n    return array\n\
    \  end\n  array.map.with_index { |num, idx|\n    array[idx] = array[idx] + array[array.length\
    \ - idx - 1]\n  }\n  array.sort!\n  array.map.with_index { |num, idx|\n    array[idx]\
    \ = (array[idx] - array[array.length - idx - 1]) / 2\n  }\n  array\nend", "  return\
    \ array if array.empty?\n  odds = []\n  evens = []\n  array.each do |e|\n    if\
    \ e.odd?\n      odds << e\n    else\n      evens << e\n    end\n  end\n  odds.sort!\n\
    \  evens.sort!\n  if (array.first + array.last).odd?\n    odds + evens\n  else\n\
    \    evens.reverse + odds\n  end\nend", "  return array if array.length < 2\n\
    \  first_index_value = array[0]\n  last_index_value = array[-1]\n  sum = first_index_value\
    \ + last_index_value\n  if sum.odd?\n    array.sort\n  else\n    array.sort {\
    \ |a, b| b <=> a }\n  end\nend", "  # return [] if array.length.zero?\n  # array.length\
    \ == 1 ? array : array.sort { |x, y| array.index(x) + array.index(y) % 2 == 0\
    \ ? y <=> x : x <=> y }\n  # array.length.even? ? array.sort { |x, y| array.index(x)\
    \ + array.index(y) % 2 == 0 ? y <=> x : x <=> y } : array.sort { |x, y| array.index(x)\
    \ + array.index(y) % 2 == 0 ? x <=> y : y <=> x }\n  array.sort { |x, y| array.index(x)\
    \ + array.index(y) % 2 == 0 ? y <=> x : x <=> y }\nend", '  return array if array.size
    < 2', "  is_odd = array.size.odd?\n  array.sort do |a, b|\n    if is_odd\n   \
    \   a <=> b\n    else\n      b <=> a\n    end\n  end\nend", "  array.sort_by.with_index{|x,i|\
    \ i.even? ? x : -x}\nend", "    array.sort_by do |num|\n        if array.first\
    \ + array.last).odd?\n            num\n        else\n            -num\n      \
    \  end\n    end\nend", '    sum_of_indexes = 0', "  array.sort do |a, b|\n   \
    \ (a + b).odd? ? a <=> b : b <=> a\n  end\nend", "  return array if array.empty?\n\
    \  sum = array[0] + array[-1]\n  sum.odd? ? array.sort : array.sort.reverse\n\
    end", "  array.inject(:+).odd? ? array.sort : array.sort.reverse\nend", "  array.sort\
    \ do |a, b|\n    if (array.first + array.last).odd?\n      a <=> b\n    else\n\
    \      b <=> a\n    end\n  end\nend", "  # code here\nend", "  res = array.sort\n\
    \  if array.length.odd?\n    res\n  else\n    res.reverse\n  end\nend", "  # TODO\n\
    end", "  # your code goes here\nend", "  (array.length + array[0] + array[-1])\
    \ % 2 == 0 ? array.sort { |a, b| b <=> a } : array.sort\nend", "  array.sort_by.with_index\
    \ { |x, index| index.odd? ? -x : x }\nend", "  return array if array.size < 2\n\
    \  even_odd(array.sort)\nend", "  array.size == 0 ? [] : array.sort_by{|x| (x.to_i\
    \ + array.index(x).to_i).odd? ? -x : x}\nend", "  sum = array.first + array.last\n\
    \  array.reverse! if sum.even?\n  array\nend", "  sum = array.empty? ? 0 : array.first\
    \ + array.last\n  sum.odd? ? array.sort : array.sort.reverse\nend", "  if array.empty?\
    \ or array.length == 1\n    return array\n  else\n    if array[0] + array[-1]\
    \ % 2 == 0\n      array.sort.reverse\n    else\n      array.sort\n    end\n  end\n\
    end", "  # your code here\nend", "  # TODO:\n  array\nend", "  if array.empty?\n\
    \    return array\n  elsif array.length == 1\n    return array\n  elsif array.length\
    \ == 2\n    return array.sort\n  elsif array.length >= 3\n    # [2, 4, 3, 0, 1,\
    \ 5]\n    # 1st_num = 2\n    # last_num = 5\n    # sum = 7\n    # odd\n    # sorted_array\
    \ = [0, 1, 2, 3, 4, 5]\n    # return sorted_array\n    first_num = array[0]\n\
    \    last_num = array[-1]\n    sum = first_num + last_num\n    if sum.odd?\n \
    \     return array.sort\n    elsif sum.even?\n      return array.sort.reverse\n\
    \    end\n  end\nend", "  if array.sum.odd?\n    array.sort\n  else\n    array.sort.reverse\n\
    \  end\nend", "  array.size == 0 ? [] : odd_or_even(array)\nend", "  n = array.length\n\
    \  sorted = false\n  if array.empty?\n    return array\n  end\n  if (array[0]\
    \ + array[n-1]) % 2 == 0\n    array.sort.reverse\n  else\n    array.sort\n  end\n\
    end", "  if array.empty?\n    []\n  elsif array.length == 1\n    array\n  elsif\
    \ array.length % 2 == 0\n    array.sort.reverse\n  else\n    array.sort\n  end\n\
    end", "  return array if array.length <= 1\n  array.sort { |a, b| a % 2 == 0 ?\
    \ b <=> a : a <=> b }\nend", "  # Your code here\nend", "  if array.empty?\n \
    \   []\n  elsif array.length == 1\n    array\n  elsif (array[0] + array[-1]) %\
    \ 2 == 0\n    array.sort { |a, b| b <=> a }\n  else\n    array.sort\n  end\nend",
  "  if array.length == 0 || array.length == 1\n    return array\n  elsif array.length\
    \ % 2 == 0\n    array.sort.reverse\n  else\n    array.sort\n  end\nend", end,
  "  odd_indices, even_indices = array.each_index.partition { |i| i.odd? }\n  array.values_at(*odd_indices.sort).values_at(*even_indices.sort)\n\
    end", "  first, last = array.first, array.last\n  sum = first + last\n  if sum.odd?\n\
    \    array.sort\n  else\n    array.sort.reverse\n  end\nend", "  a = array.sort\n\
    \  b = array.sort.reverse\n  x = array.first\n  y = array.last\n  z = x + y\n\
    \  if z.odd?\n    a\n  else\n    b\n  end\nend", "  sum = array.first + array.last\n\
    \  if sum.odd?\n    array.sort\n  else\n    array.sort.reverse\n  end\nend", " \
    \ return array if array.empty?\n  if array.length.odd? && array.first.odd? &&\
    \ array.last.odd?\n    array.sort\n  elsif array.length.odd? && array.first.even?\
    \ && array.last.even?\n    array.sort.reverse\n  elsif array.length.even? && array.first.odd?\
    \ && array.last.odd?\n    array.sort.reverse\n  elsif array.length.even? && array.first.even?\
    \ && array.last.even?\n    array.sort\n  end\nend", "  if array.empty?\n    []\n\
    \  elsif array.length == 1\n    array\n  elsif (array[0] + array[-1]) % 2 == 0\n\
    \    array.sort.reverse\n  else\n    array.sort\n  end\nend", "  array.sort! {\
    \ |a, b| sum_of_indices(array, a) % 2 == sum_of_indices(array, b) % 2 ? b <=>\
    \ a : a <=> b }\nend", "  sum = array.first + array.last\n  if sum.odd?\n    array.sort\n\
    \  else\n    array.sort.reverse\n  end\nend", "  if array.empty?\n    return array\n\
    \  elsif array.size == 1\n    return array\n  elsif array.size == 2\n    return\
    \ array[0] > array[1] ? array.reverse : array\n  else\n    if array[0] + array[-1]\
    \ % 2 == 0\n      array.sort.reverse\n    else\n      array.sort\n    end\n  end\n\
    end", "  # write your code here\nend", "  return array if array.length <= 1\n\
    \  array.sort{|a,b| a.even? && b.even? || a.odd? && b.odd? ? a <=> b : b <=> a}\n\
    end", "  return array if array.empty?\n  array[0] + array[-1] % 2 == 0 ? array.sort.reverse\
    \ : array.sort\nend", "  # Your code here\nend", "  if array.empty?\n    return\
    \ array\n  end\n  if (array[0] + array[-1]) % 2 == 0\n    array.sort.reverse\n\
    \  else\n    array.sort\n  end\nend", "  sum = array.first + array.last\n  sum.odd?\
    \ ? array.sort : array.sort { |a, b| b <=> a }\nend", "  sum = array.first + array.last\n\
    \  if sum.odd?\n    array.sort\n  else\n    array.sort { |a, b| b <=> a }\n  end\n\
    end", "    # \u914D\u5217\u304C\u7A7A\u306A\u3089\u7A7A\u3092\u8FD4\u3059\n  \
    \  return [] if array.empty?\n    # \u7D20\u6570\u5224\u5B9A\u7528\u306E\u914D\
    \u5217\n    nums = []\n    array.each { |i| nums << i if is_prime?(i) }\n    #\
    \ \u7D20\u6570\u304C\u7121\u3051\u308C\u3070\u4F55\u3082\u3057\u306A\u3044\n \
    \   return array if nums.empty?\n    # \u65E2\u306B\u30BD\u30FC\u30C8\u6E08\u307F\
    \u306A\u3089\u4F55\u3082\u3057\u306A\u3044\n    return array if array == array.sort\n\
    \    # \u914D\u5217\u3092\u7D20\u6570\u3060\u3051\u306B\u3059\u308B\n    prime_array\
    \ = array - nums\n    # \u5947\u6570\u7D20\u6570\u3001\u5076\u6570\u7D20\u6570\
    \u3092\u5206\u3051\u308B\n    odd_primes = []\n    even_primes = []\n    nums.each\
    \ { |i| odd_primes << i if i.odd?; even_primes << i if i.even? }\n    # \u5947\
    \u6570\u7D20\u6570\u3001\u5076\u6570\u7D20\u6570\u3092\u6607\u9806\u306B\u3059\
    \u308B\n    odd_primes = odd_primes.sort\n    even_primes = even_primes.sort.reverse\n\
    \    # \u914D\u5217\u3092\u4E26\u3073\u66FF\u3048\u308B\n    if (prime_array.first\
    \ + prime_array.last).odd?\n        # \u6607\u9806\n        array = odd_primes\
    \ + prime_array + even_primes\n    else\n        # \u964D\u9806\n        array\
    \ = even_primes + prime_array + odd_primes\n    end\n    return array\nend", " \
    \ # code your solution here\nend", "  sum = array.size > 0 ? array[0] + array[-1]\
    \ : 0\n  array.sort_by.with_index { |v, i| (i.even? && sum.odd?) || (i.odd? &&\
    \ sum.even?) ? -v : v }\nend", "  # your code here\nend", "  sum = array.first\
    \ + array.last\n  if sum.odd?\n    array.sort\n  else\n    array.sort { |a, b|\
    \ b <=> a }\n  end\nend", "  return array if array.length < 2\n  sum = array[0]\
    \ + array[-1]\n  sorted = array.sort\n  if sum.odd?\n    sorted\n  else\n    sorted.reverse\n\
    \  end\nend", "  if array.length == 0\n    array\n  elsif array.length == 1\n\
    \    array\n  elsif array.length > 1\n    sum = array[0] + array[-1]\n    if sum\
    \ % 2 == 0\n      array.sort.reverse\n    else\n      array.sort\n    end\n  end\n\
    end", "  if array.empty?\n    []\n  elsif array.length == 1\n    array\n  elsif\
    \ (array[0] + array[-1]) % 2 == 0\n    array.sort { |x, y| y <=> x }\n  else\n\
    \    array.sort\n  end\nend", "  return array if array.length < 2\n  l, r = 0,\
    \ array.length - 1\n  if (array[l] + array[r]) % 2 == 0\n    array.sort.reverse\n\
    \  else\n    array.sort\n  end\nend", "  if array.empty?\n    return array\n \
    \ elsif array.length == 1\n    return array\n  elsif (array[0] + array[-1]) %\
    \ 2 == 0\n    return array.sort.reverse\n  else\n    return array.sort\n  end\n\
    end", "  # Check if the first index + last index is odd/even.\n  # If odd then\
    \ sort array, else reverse sort array.\n  array.empty? ? [] : array.sum.odd? ?\
    \ array.sort : array.sort.reverse\nend", "  array.sort_by.with_index { |v, i|\
    \ i.odd? ? v : -v }\nend", "  res_arr = []\n  if array.size == 0 || array.size\
    \ == 1\n    return array\n  elsif array.size.even?\n    return array.sort.reverse\n\
    \  else\n    return array.sort\n  end\nend", "\tif (array.size == 0 || array.size\
    \ == 1)\n\t\treturn array\n\tend\n\tif (array[0] + array[-1]) % 2 == 0\n\t\treturn\
    \ array.sort.reverse\n\telse\n\t\treturn array.sort\n\tend\nend", "  array.each_with_index.map\
    \ do |num, index|\n    if array.first + array.last).odd?\n      array.sort\n \
    \   else\n      array.sort.reverse\n    end\n  end\nend", "  # TODO: Implement\n\
    end", "  if array.empty?\n    []\n  elsif array.size == 1\n    array\n  elsif\
    \ array.sum.odd?\n    array.sort\n  else\n    array.sort { |a, b| b <=> a }\n\
    \  end\nend", "\tif array.length <= 1\n\t\treturn array\n\telsif array.length.even?\n\
    \t\tarray.sort { |x, y| y <=> x }\n\telse\n\t\tarray.sort { |x, y| x <=> y }\n\
    \tend\nend", "  array.sort\nend", "  return array if array.size == 0\n  return\
    \ array if array.size == 1\n  if (array[0] + array[-1]) % 2 == 0\n    return array.sort.reverse\n\
    \  else\n    return array.sort\n  end\nend", "  if array.empty?\n    []\n  elsif\
    \ array.length == 1\n    array\n  elsif (array[0] + array[-1]) % 2 == 0\n    array.sort.reverse\n\
    \  else\n    array.sort\n  end\nend", "  if array.length == 0 || array.length\
    \ == 1\n    return array\n  elsif array.length % 2 == 0\n    array.sort.reverse\n\
    \  else\n    array.sort\n  end\nend", "  # code here\nend", "  array = array.clone\n\
    \  array.sort! do |a, b|\n    (a + b).odd? ? a <=> b : b <=> a\n  end\nend", " \
    \ sum = array.first + array.last\n  if sum.odd?\n    array.sort\n  else\n    array.sort.reverse\n\
    \  end\nend", "  if array.empty?\n    []\n  elsif array.length == 1\n    array\n\
    \  elsif (array[0] + array[-1]) % 2 == 0\n    array.sort.reverse\n  else\n   \
    \ array.sort\n  end\nend", "  sum = array.length == 0 ? 0 : array[0] + array[-1]\n\
    \  array.sort_by!{|num| (sum % 2).zero? ? -num : num}\nend", "  return array if\
    \ array.empty?\n  array[0] + array[-1] % 2 == 0 ? array.sort.reverse : array.sort\n\
    end", "  if array.length == 0 || array.length == 1\n    return array\n  end\n\
    \  if (array[0] + array[-1]) % 2 == 0\n    return array.sort { |a, b| b <=> a\
    \ }\n  else\n    return array.sort { |a, b| a <=> b }\n  end\nend", "  return\
    \ array if array.size <= 1\n  sum = array[0] + array[-1]\n  if sum.odd?\n    return\
    \ array.sort\n  else\n    return array.sort.reverse\n  end\nend", "  if array.size\
    \ < 2\n    return array\n  end\n  # set a variable to hold the sum of the first\
    \ and last elements\n  array_sum = array[0] + array[-1]\n  # if the sum is odd,\
    \ sort the array ascending\n  if array_sum.odd?\n    array.sort\n  # else, sort\
    \ the array descending\n  else\n    array.sort.reverse\n  end\nend", "  # TODO\n\
    end", "  array_2 = array.select.with_index { |_, index| index.odd? }.sort\n  array.map.with_index\
    \ { |x, index| index.odd? ? array_2.shift : x }\nend", "  sum = array.first +\
    \ array.last\n  return array if array.empty?\n  if sum.odd?\n    array.sort\n\
    \  else\n    array.sort.reverse\n  end\nend", "  if array.length.even?\n    return\
    \ array.sort.reverse\n  else\n    return array.sort\n  end\nend", "  array.sort\
    \ do |a, b|\n    (array.index(a) + array.index(b)).odd? ? a <=> b : b <=> a\n\
    \  end\nend", "  return array if array.empty?\n  return array if array.size ==\
    \ 1\n  return array.sort if (array[0] + array[-1]) % 2 == 0\n  array.sort.reverse\n\
    end", "  array.sum.odd? ? array.sort : array.sort.reverse\nend", "  array.sort_by.with_index{|x,y|\
    \ y.odd? ? -x : x}\nend", "  # your code here\nend", "  return array if array.empty?\n\
    \  array.sort.reverse if array.length.odd?\n  array.sort\nend", "  sum = array.size\
    \ > 0 ? array[0] + array[-1] : 0\n  sum.odd? ? array.sort : array.sort { |a, b|\
    \ b <=> a }\nend", "  sum = array.first + array.last\n  if sum.odd?\n    array.sort\n\
    \  else\n    array.sort.reverse\n  end\nend", "  if (array.length.zero?)\n   \
    \ return array\n  elsif (array.length == 1)\n    return array\n  elsif (array[0]\
    \ + array[-1]).odd?\n    return array.sort\n  else\n    return array.sort.reverse\n\
    \  end\nend", "  if (array.empty?)\n    []\n  elsif (array.length == 1)\n    array\n\
    \  elsif (array[0] + array[-1]) % 2 == 0\n    sort_array(array[1..-2]).sort.reverse\n\
    \  else\n    sort_array(array[1..-2]).sort\n  end\nend", "  array.sort! { |a,\
    \ b| (a + b).odd? ? a <=> b : b <=> a }\nend", "  sum = array.first + array.last\n\
    \  array.sort! { |x, y| sum.odd? ? x <=> y : y <=> x }\nend", end, "  if array.empty?\n\
    \    return array\n  elsif array.size == 1\n    return array\n  elsif array.size\
    \ == 2\n    first_element = array[0]\n    last_element = array[1]\n    if first_element\
    \ + last_element % 2 == 0\n      return array.reverse\n    else\n      return\
    \ array\n    end\n  else\n    if array[0] + array[-1] % 2 == 0\n      array.sort!.reverse!\n\
    \    else\n      array.sort!\n    end\n  end\nend", "  if array.empty?\n    return\
    \ array\n  elsif array.length == 1\n    return array\n  elsif array.length ==\
    \ 2\n    if array[0] % 2 == 0 and array[1] % 2 == 0\n      return array.reverse\n\
    \    elsif array[0] % 2 != 0 and array[1] % 2 != 0\n      return array.reverse\n\
    \    else\n      return array\n    end\n  else\n    if array[0] + array[-1] %\
    \ 2 == 0\n      return array.sort.reverse\n    else\n      return array.sort\n\
    \    end\n  end\nend", "  arr = array.dup\n  a = arr.shift\n  b = arr.pop\n  odd\
    \ = a + b\n  odd.odd? ? arr.sort : arr.sort.reverse\nend", "  if (array.length\
    \ % 2 == 0)\n    array.sort! { |a, b| b <=> a }\n  else\n    array.sort! { |a,\
    \ b| a <=> b }\n  end\nend", "  return array if array.length < 2\n  first, last\
    \ = array.first, array.last\n  sum = first + last\n  array.sort! do |a, b|\n \
    \   sum.odd? ? a <=> b : b <=> a\n  end\nend", "    if array.empty? || array.length\
    \ == 1\n        return array\n    end\n    # if sum of first and last is odd\n\
    \    if (array[0] + array[-1]) % 2 == 1\n        # sorts in ascending order\n\
    \        array.sort\n    else\n        # sorts in descending order\n        array.sort\
    \ { |x, y| y <=> x }\n    end\nend", "  return array if array.size <= 1\n  (array.size\
    \ / 2).times { |i| (array[i], array[-i - 1]) = (array[-i - 1], array[i]) if (array[i]\
    \ + array[-i - 1]).odd? }\n  array\nend", "\treturn array if array.empty?\n\t\
    if (array[0] + array[-1]) % 2 == 0\n\t\treturn array.sort { |x, y| y <=> x }\n\
    \telse\n\t\treturn array.sort { |x, y| x <=> y }\n\tend\nend", "  if array.empty?\n\
    \    []\n  elsif array.length == 1\n    array\n  elsif array.inject(:+) % 2 ==\
    \ 0\n    array.sort! { |a, b| b <=> a }\n  else\n    array.sort! { |a, b| a <=>\
    \ b }\n  end\nend", "\t# your code here\nend", "  array.sort_by{|a| a.odd? ? 0\
    \ : 1}\nend", "  sum = array.first + array.last\n  return array if array.empty?\
    \ || array.size == 1\n  sum.odd? ? array.sort : array.sort.reverse\nend", "  return\
    \ array if array.empty?\n  return array.sort if array.size == 1\n  sum = array[0]\
    \ + array[-1]\n  sum.odd? ? array.sort : array.sort.reverse\nend", "  if array.size\
    \ == 0\n    return array\n  elsif array.size == 1\n    return array\n  else\n\
    \    if array[0] + array[-1] % 2 == 0\n      array.sort.reverse\n    else\n  \
    \    array.sort\n    end\n  end\nend", "  # \u8BA1\u7B97\u51FA\u6570\u7EC4\u7684\
    \u957F\u5EA6\n  length = array.length\n  # \u6C42\u51FA\u9996\u4F4D\u4E4B\u548C\
    \n  sum = array[0] + array[length - 1]\n  # \u6839\u636E\u548C\u7684\u5947\u5076\
    \u6027\u786E\u5B9A\u6392\u5E8F\u65B9\u5F0F\n  array.sort! do |x, y|\n    if sum.odd?\n\
    \      x <=> y\n    else\n      y <=> x\n    end\n  end\nend", "  return array\
    \ if array.empty? || array.length == 1\n  # \"odd\" or \"even\"\n  parity = array.length.even?\
    \ ? \"even\" : \"odd\"\n  # p parity\n  # create a hash with values and their\
    \ corresponding indices\n  value_index = {}\n  array.each_with_index { |num, index|\
    \ value_index[num] = index }\n  # p value_index\n  # sort the keys (the values\
    \ in array)\n  sorted_values = value_index.keys.sort\n  # p sorted_values\n  if\
    \ parity == \"even\"\n    sorted_values.reverse!\n  end\n  # p sorted_values\n\
    \  # create an array of sorted values\n  sorted_array = []\n  sorted_values.each\
    \ do |value|\n    # by looking up the index of the value, we can avoid creating\
    \ a hash with indices and their corresponding values\n    sorted_array[value_index[value]]\
    \ = value\n  end\n  # p sorted_array\n  return sorted_array\nend", "  # If the\
    \ sum of array is even the sorting order is descending\n  # If the sum of array\
    \ is odd the sorting order is ascending\n  return array if array.empty?\n  # Get\
    \ the sum of the indexes\n  sum = array[0] + array[-1]\n  # Sort the array by\
    \ oddity\n  sorted_array = array.sort { |x, y| sum.odd? ? x <=> y : y <=> x }\n\
    \  sorted_array\nend", "  # TODO: return a new array, sort it in ascending order\
    \ if sum of first index value and last index value is odd, or sort it in descending\
    \ order if sum of first index value and last index value is even\n  return array\
    \ if array.empty?\n  return array if array.size == 1\n  sum = array[0] + array[-1]\n\
    \  return array.sort if sum.odd?\n  return array.sort.reverse\nend", "  return\
    \ array if array.size == 0 || array.size == 1\n  sum = array[0] + array[-1]\n\
    \  if sum.odd?\n    array.sort\n  else\n    array.sort.reverse\n  end\nend", " \
    \ sum = array.first + array.last\n  array.sort.tap do |result|\n    result.reverse!\
    \ if sum.even?\n  end\nend", "  # TODO: implement the method\nend", "  array =\
    \ array.sort\n  return array if array.length <= 1\n  sum = array[0] + array[-1]\n\
    \  sum.odd? ? array : array.reverse\nend", "  if array.empty?\n    return array\n\
    \  elsif array.length == 1\n    return array\n  else\n    odd_indexes = []\n \
    \   even_indexes = []\n    for index in 0..array.length-1\n      if index.odd?\n\
    \        odd_indexes << array[index]\n      else\n        even_indexes << array[index]\n\
    \      end\n    end\n    if (array[0] + array[-1]) % 2 == 0\n      odd_indexes.sort!\
    \ { |x, y| y <=> x }\n      even_indexes.sort! { |x, y| y <=> x }\n    else\n\
    \      odd_indexes.sort! { |x, y| x <=> y }\n      even_indexes.sort! { |x, y|\
    \ x <=> y }\n    end\n    for index in 0..array.length-1\n      if index.odd?\n\
    \        array[index] = odd_indexes[index]\n      else\n        array[index] =\
    \ even_indexes[index]\n      end\n    end\n    return array\n  end\nend", "  if\
    \ array.size > 0\n    if (array[0] + array[-1]) % 2 == 0\n      return array.sort.reverse\n\
    \    else\n      return array.sort\n    end\n  else\n    return array\n  end\n\
    end", "  sum = array.first + array.last\n  array.sort! { |x, y| sum.odd? ? y <=>\
    \ x : x <=> y }\nend", "  return array if array.empty?\n  return array if array.length\
    \ == 1\n  array.sort!\n  first_value = array[0]\n  last_value = array[-1]\n  sorted_array\
    \ = []\n  if (first_value + last_value).odd?\n    array.each do |num|\n      sorted_array\
    \ << num\n    end\n  else\n    sorted_array = array.reverse\n  end\n  sorted_array\n\
    end", "  array.sort!\n  if array.empty?\n    array\n  elsif array.first + array.last\
    \ % 2 == 0\n    array.reverse!\n  else\n    array\n  end\nend", "  array.sort\
    \ do |a, b|\n    if array.index(a) + array.index(b) + 2 == array.length\n    \
    \  a <=> b\n    else\n      b <=> a\n    end\n  end\nend", "    if array.length\
    \ == 0\n        return array\n    end\n    if (array[0] + array[-1]) % 2 == 0\n\
    \        array.sort!\n        return array.reverse\n    else\n        array.sort!\n\
    \        return array\n    end\nend", "  sum = array.first + array.last\n  return\
    \ array if array.empty?\n  return array if array.size == 1\n  array.sort! { |a,\
    \ b| sum.odd? ? a <=> b : b <=> a }\nend", "  # TODO\nend", "\t# TODO: implement\
    \ me\nend", "  # Your code here\nend", "  if array.empty?\n    []\n  elsif array.length\
    \ == 1\n    array\n  elsif array.sum.odd?\n    array.sort\n  else\n    array.sort.reverse\n\
    \  end\nend", "  if array.empty?\n    []\n  elsif array.length == 1\n    array\n\
    \  elsif (array[0] + array[-1]) % 2 == 0\n    array.sort.reverse\n  else\n   \
    \ array.sort\n  end\nend", "  if array.length == 0\n    return array\n  elsif\
    \ array.length == 1\n    return array\n  elsif (array[0] + array[-1]) % 2 == 0\n\
    \    return array.sort{|x,y| y <=> x}\n  else\n    return array.sort\n  end\n\
    end", "  return array if array.empty? || array.size == 1\n  if array.inject(:+)\
    \ % 2 == 0\n    array.sort { |a, b| b <=> a }\n  else\n    array.sort\n  end\n\
    end", "  if array.length == 0\n    return array\n  elsif array.length == 1\n \
    \   return array\n  elsif (array[0] + array[-1]) % 2 == 0\n    return array.sort.reverse\n\
    \  else\n    return array.sort\n  end\nend", "  # code goes here\nend", "  array.group_by\
    \ { |num| num.odd? }.values.each(&:sort!).reverse.flatten\nend", "  sum = array.length\
    \ > 0 ? array[0] + array[-1] : 0\n  array.sort { |a, b| sum.odd? ? a <=> b : b\
    \ <=> a }\nend", "  array.sort_by.with_index{|_, i| i.odd? ? -1 : 1}\nend", " \
    \ sorted_array = []\n  sorted_array = array.sort if array.reduce(:+) % 2 == 0\n\
    \  sorted_array = array.sort { |a, b| b <=> a } if array.reduce(:+) % 2 != 0\n\
    \  sorted_array\nend", "  array.sort!{|a,b| a+b.odd? ? a <=> b : b <=> a}\nend",
  "\tif array.empty?\n\t\treturn array\n\telsif array.length == 1\n\t\treturn array\n\
    \telse\n\t\tfirst_last_sum = array[0] + array[-1]\n\t\tif first_last_sum.odd?\n\
    \t\t\treturn array.sort!\n\t\telse\n\t\t\treturn array.sort!.reverse!\n\t\tend\n\
    \tend\nend", '  return array if array.length < 2', "  sum = array.size <= 1 ?\
    \ 0 : array.first + array.last\n  #sum = array.size == 0 ? 0 : array.first + array.last\n\
    \  sum.odd? ? array.sort : array.sort.reverse\nend", "  if array.size.odd?\n \
    \   array.sort.values_at(* array.each_index.select {|i| i.even?})\n  else\n  \
    \  array.sort.reverse.values_at(* array.each_index.select {|i| i.even?})\n  end\n\
    end", "  if array.empty?\n    []\n  elsif array.size == 1\n    array\n  elsif\
    \ (array[0] + array[-1]) % 2 == 0\n    array.sort.reverse\n  else\n    array.sort\n\
    \  end\nend", "  # TODO: write your code here\nend", "  if array.length == 0\n\
    \    return array\n  elsif array.length == 1\n    return array\n  elsif array.length\
    \ % 2 == 0\n    return array.sort\n  else\n    return array.sort.reverse\n  end\n\
    end", "  # IMPLEMENT ME!\nend", "  if array.empty?\n    []\n  elsif array.length\
    \ == 1\n    array\n  elsif (array[0] + array[-1]) % 2 == 0\n    array.sort.reverse\n\
    \  else\n    array.sort\n  end\nend", "  if array.length == 0 || array.length\
    \ == 1\n    return array\n  end\n  first_last_sum = array[0] + array[-1]\n  if\
    \ first_last_sum % 2 == 0\n    array.sort.reverse\n  else\n    array.sort\n  end\n\
    end", "  # your code here\nend", "  odd_numbers, even_numbers = [], []\n  array.sort.each\
    \ do |number|\n    number.odd? ? odd_numbers << number : even_numbers << number\n\
    \  end\n  if (array.first + array.last).odd?\n    odd_numbers + even_numbers\n\
    \  else\n    even_numbers + odd_numbers\n  end\nend", "  sum = array.empty? ?\
    \ 0 : array.first + array.last\n  array.sort { |a, b| sum.odd? ? a <=> b : b <=>\
    \ a }\nend", "    return array if array.empty?\n    return array.sort if array.size\
    \ == 1\n    sum = array[0] + array[-1]\n    sum.odd? ? array.sort : array.sort.reverse\n\
    end", "  array_copy = array.map{|x| x}\n  if array_copy.length == 0\n    return\
    \ array_copy\n  elsif array_copy.length == 1\n    return array_copy\n  elsif (array_copy[0]\
    \ + array_copy[-1]) % 2 == 0\n    return array_copy.sort.reverse\n  else\n   \
    \ return array_copy.sort\n  end\nend", "  # Write your code here.\nend", "  if\
    \ array.size == 0\n    return array\n  end\n  if array.size == 1\n    return array\n\
    \  end\n  if (array[0] + array[-1]) % 2 == 0\n    return array.sort { |x, y| y\
    \ <=> x }\n  else\n    return array.sort { |x, y| x <=> y }\n  end\nend", "  if\
    \ array.empty?\n    []\n  elsif array.length == 1\n    array\n  elsif array.sum.odd?\n\
    \    array.sort\n  else\n    array.sort.reverse\n  end\nend", "  sum = array.shift\
    \ + array.pop\n  array.sort{|x,y| sum.odd? ? y <=> x : x <=> y}\nend", "  return\
    \ array if array.empty?\n  if array.sum % 2 == 0\n    return array.sort { |x,\
    \ y| y <=> x }\n  else\n    return array.sort { |x, y| x <=> y }\n  end\nend",
  "  # write your code here\nend", "  sum = array.first + array.last\n  if sum.odd?\n\
    \    array.sort\n  else\n    array.sort.reverse\n  end\nend", "  return array\
    \ if array.empty? || array.size == 1\n  sum = array[0] + array[-1]\n  array.size.odd?\
    \ ? sum % 2 != 0 : sum % 2 == 0\n  array.sort\nend", "  sum = array.shift + array.pop\n\
    \  sorted = array.sort\n  if sum.odd?\n    sorted\n  else\n    sorted.reverse\n\
    \  end\nend", "  if array.length.odd?\n    array.sort\n  else\n    array.sort.reverse\n\
    \  end\nend", "  return array if array.empty? || array.length == 1\n  sum = array[0]\
    \ + array[-1]\n  sum.odd? ? array.sort : array.sort.reverse\nend", "  even = true\n\
    \  array.size.times do |i|\n    even = !even if array[i] % 2 == 0\n  end\n  even\
    \ ? array.sort : array.sort.reverse\nend", "  return array if array.length <=\
    \ 1\n  odd_sum = false\n  odd_sum = true if (array[0] + array[-1]) % 2 == 1\n\
    \  odd_sum ? array.sort.reverse : array.sort\nend", "  array.sort\nend", "  #\
    \ your code goes here\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
