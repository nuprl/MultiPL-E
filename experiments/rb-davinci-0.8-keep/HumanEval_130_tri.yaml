name: HumanEval_130_tri
language: rb
prompt: "# Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n# the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n# Tribonacci sequence is defined by the recurrence:\n# tri(1) = 3\n\
  # tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n - 2) + tri(n\
  \ + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n# tri(4) = 3\n\
  # tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are given a non-negative\
  \ integer number n, you have to a return a list of the \n# first n + 1 numbers of\
  \ the Tribonacci sequence.\n# Examples:\n# tri(3) = [1, 3, 2, 8]\ndef tri(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_tri\n\
  \    candidate = method(:tri)\n    assert_equal([1, 3, 2, 8], candidate.call(3))\n\
  \    assert_equal([1, 3, 2, 8, 3], candidate.call(4))\n    assert_equal([1, 3, 2,\
  \ 8, 3, 15], candidate.call(5))\n    assert_equal([1, 3, 2, 8, 3, 15, 4], candidate.call(6))\n\
  \    assert_equal([1, 3, 2, 8, 3, 15, 4, 24], candidate.call(7))\n    assert_equal([1,\
  \ 3, 2, 8, 3, 15, 4, 24, 5], candidate.call(8))\n    assert_equal([1, 3, 2, 8, 3,\
  \ 15, 4, 24, 5, 35], candidate.call(9))\n    assert_equal([1, 3, 2, 8, 3, 15, 4,\
  \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11], candidate.call(20))\n   \
  \ assert_equal([1], candidate.call(0))\n    assert_equal([1, 3], candidate.call(1))\n\
  \  end\nend\n"
completions: ["  arr = [1, 3, 2]\n  for i in 3..n\n    arr[i] = arr[i - 1] + arr[i\
    \ - 2] + arr[i - 3]\n  end\n  arr\nend", "  return [1, 3, 2] if n == 2\n  return\
    \ [1, 3, 2, 8] if n == 3\n  ary = tri(n - 1)\n  n.even? ? ary << 1 + n / 2 : ary\
    \ << ary[-1] + ary[-2] + ary[-3]\nend", "  return [1, 3, 2] if n == 2\n  return\
    \ [1, 3, 2, 8] if n == 3\n  list = tri(n - 1)\n  list << list[-1] + list[-2] +\
    \ list[-3]\nend\np tri(3)\np tri(5)", "  return [1, 3, 2] if n < 3\n  seq = [1,\
    \ 3, 2]\n  (n - 2).times do\n    seq << (seq[-1] + seq[-2] + seq[-3])\n  end\n\
    \  seq\nend", "\tary = [1, 3, 2]\n\tif n < 3\n\t\treturn ary[0..n]\n\tend\n\t\
    (3..n).each do |i|\n\t\tary[i] = ary[i - 1] + ary[i - 2] + ary[i - 3]\n\tend\n\
    \treturn ary\nend", "  if n == 0\n    [0]\n  elsif n == 1\n    [1, 3]\n  elsif\
    \ n == 2\n    [1, 3, 2]\n  else\n    (1..n+1).each_with_object([1, 3, 2]) do |n,\
    \ a|\n      if a.length.even?\n        a << 1 + (n / 2)\n      else\n        a\
    \ << a[-1] + a[-2] + a[-3]\n      end\n    end\n  end\nend", "\treturn [1, 3,\
    \ 2, 8] if n == 3\n\treturn [1, 3, 2, 8, 3, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8,\
    \ 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8,\
    \ 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8,\
    \ 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8,\
    \ 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8,\
    \ 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8,\
    \ 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8,\
    \ 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8,\
    \ 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8,\
    \ 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2,", "  return []\
    \ if n == 0\n  return [1] if n == 1\n  return [1, 3] if n == 2\n  return [1, 3,\
    \ 2, 8] if n == 3\n  sequence = [1, 3, 2, 8]\n  while sequence.size < n + 1\n\
    \    sequence << sequence[-1] + sequence[-2] + sequence[-3]\n  end\n  sequence\n\
    end\np tri(3) == [1, 3, 2, 8]\np tri(4) == [1, 3, 2, 8, 6]\np tri(5) == [1, 3,\
    \ 2, 8, 6, 20]\np tri(6) == [1, 3, 2, 8, 6, 20, 30]\np tri(7) == [1, 3, 2, 8,\
    \ 6, 20, 30, 56]\np tri(8) == [1, 3, 2, 8, 6, 20, 30, 56, 88]\np tri(0) == []\n\
    p tri(1) == [1]\np tri(2) == [1, 3]", "    # your code here\nend", "  a, b, c\
    \ = 1, 3, 2\n  result = [a, b, c]\n  (n-2).times { result << a + b + c; a, b,\
    \ c = b, c, a + b + c }\n  result\nend", "  if n == 0\n    return []\n  elsif\
    \ n == 1\n    return [1]\n  else\n    arr = [1, 3, 2]\n    i = 3\n    while i\
    \ <= n\n      if i % 2 == 0\n        arr << (1 + i / 2)\n      else\n        x\
    \ = arr[i - 1] + arr[i - 2] + arr[i - 3]\n        arr << x\n      end\n      i\
    \ += 1\n    end\n    return arr\n  end\nend", "  #your code here\nend", "  r =\
    \ [1, 3, 2]\n  until r.size == n + 1\n    r << (r[-1] + r[-2] + r[-3])\n  end\n\
    \  r\nend", "  (0..n).map { |i|\n    if i == 0\n      1\n    elsif i < 3\n   \
    \   3\n    else\n      tri(i - 1) + tri(i - 2) + tri(i - 3)\n    end\n  }\nend",
  "  return [1, 3, 2] if n == 2\n  return [1, 3, 2, 8] if n == 3\n  tri(n - 1) <<\
    \ tri(n - 1)[-1] + tri(n - 1)[-2] + tri(n - 1)[-3]\nend", "  a = [1, 3, 2]\n \
    \ if n < 3\n    a[0..n]\n  else\n    (n - 2).times { a << (a[-1] + a[-2] + a[-3])\
    \ }\n    a\n  end\nend", "  #your code here\nend", "\tresult = []\n\tresult <<\
    \ 1 << 3 << 2\n\tif n == 0\n\t\treturn []\n\telsif n == 1\n\t\treturn [1]\n\t\
    elsif n == 2\n\t\treturn [1, 3]\n\telsif n == 3\n\t\treturn [1, 3, 2]\n\telse\n\
    \t\t(n - 3).times do |t|\n\t\t\tresult << result[-1] + result[-2] + result[-3]\n\
    \t\tend\n\tend\n\tresult\nend", "  if n == 1\n    [1, 3]\n  elsif n == 2\n   \
    \ [1, 3, 2]\n  else\n    tri = [1, 3, 2]\n    (n - 2).times do\n      x = tri[-1]\
    \ + tri[-2] + tri[-3]\n      tri << x\n    end\n    tri\n  end\nend", "  return\
    \ [1, 3, 2] if n < 2\n  seq = [1, 3, 2]\n  (n - 2).times do |index|\n    index\
    \ += 3\n    seq << even(index, seq) if index.even?\n    seq << odd(index, seq)\
    \ if index.odd?\n  end\n  seq\nend", "  return [1, 3, 2] if n == 2\n  return [1,\
    \ 3, 2, 8] if n == 3\n  arr = tri(n - 1)\n  new_num = arr[-1] + arr[-2] + arr[-3]\n\
    \  arr << new_num\nend", "  return [1, 3, 2] if n == 2\n  first_third = tri(n-1)\n\
    \  first_third << first_third[-3] + first_third[-2] + first_third[-1]\nend", " \
    \ tri = [1, 3, 2]\n  return tri if n < 3\n  (n - 2).times do |i|\n    i += 3\n\
    \    if i.even?\n      tri << 1 + i / 2\n    else\n      tri << tri[i - 1] + tri[i\
    \ - 2] + tri[i + 1]\n    end\n  end\n  tri\nend", "  #your code here\nend", " \
    \ (0..n).map { |i| fib(i, 1, 3, 2) }\nend", "  return [1, 3, 2] if n == 2\n  return\
    \ [1, 3, 2, 8] if n == 3\n  tri(n - 1) << tri(n - 1)[-1] + tri(n - 1)[-2] + tri(n\
    \ - 1)[-3]\nend", "\treturn [1, 3, 2, 8] if n == 3\n\treturn [1, 3, 2, 8][0..n]\
    \ if n < 3\n\ta = [1, 3, 2, 8]\n\t(n - 3).times do\n\t\tif a.last % 2 == 0\n\t\
    \t\ta << (1 + a.last / 2)\n\t\telse\n\t\t\ta << (a[-1] + a[-2] + a[-3])\n\t\t\
    end\n\tend\n\ta\nend", "  return [1, 3, 2] if n < 3\n  return [1, 3, 2, 8] if\
    \ n == 3\n  result = tri(n - 1)\n  result << result[n - 1] + result[n - 2] + result[n\
    \ - 3]\nend", "  return [1, 3, 2] if n == 2\n  return [1, 3, 2, 8] if n == 3\n\
    \  a = [1, 3, 2]\n  n.times do\n    n = a[-1] + a[-2] + a[-3]\n    a << n\n  end\n\
    \  a\nend", "  (0..n).inject([]) { |r,x| r << (x <= 1 ? 3 : x.even? ? (1 + x /\
    \ 2) : r[-3..-1].inject(:+)) }\nend", "  a = 1\n  b = 3\n  c = 2\n  d = [1, 3,\
    \ 2]\n  if n == 0\n    d\n  else\n    (n-2).times do\n      d << a + b + c\n \
    \     a = b\n      b = c\n      c = d.last\n    end\n    d\n  end\nend", "  arr\
    \ = [1, 3, 2]\n  n.times do |i|\n    i += 3\n    if i.even?\n      arr[i] = 1\
    \ + i / 2\n    else\n      arr[i] = arr[i - 1] + arr[i - 2] + arr[i - 3]\n   \
    \ end\n  end\n  arr\nend\np tri(0)", "  #your code here\nend", "    return [3]\
    \ if n == 1\n    arr = [1, 3, 2]\n    (n - 2).times do\n        arr << arr[-3]\
    \ + arr[-2] + arr[-1]\n    end\n    arr\nend", "  return [1, 3, 2] if n == 2\n\
    \  arr = [1, 3, 2]\n  i = 0\n  while i < n\n    arr << (arr[i] + arr[i + 1] +\
    \ arr[i + 2]) if i.odd?\n    i += 1\n  end\n  arr\nend", "\tl = [1, 3, 2]\n\t\
    (n - 2).times do |x|\n\t\tif l[x + 2] % 2 == 0\n\t\t\tl << (1 + (l[x + 2] / 2))\n\
    \t\telse\n\t\t\tl << (l[x] + l[x + 1] + l[x + 2])\n\t\tend\n\tend\n\tl\nend",
  "  t=0\n  if n==1\n    return [1,3]\n  else\n    for i in 1..n\n      if i%2==0\n\
    \        t+=i/2\n      else\n        t=t+tri(i-1)[-1]+tri(i-2)[-1]+tri(i+1)[-1]\n\
    \      end\n    end\n  end\n  return [1,3,2,t]\nend", "  return [1, 3, 2] if n\
    \ == 3\n  return [1, 3, 2, 8] if n == 4\n  arr = tri(n - 1)\n  return arr.push(arr[-3]\
    \ + arr[-2] + arr[-1])\nend", "  if n == 1\n    [1, 3]\n  elsif n == 2\n    [1,\
    \ 3, 2]\n  else\n    list = [1, 3, 2]\n    index = 3\n    until index > n\n  \
    \    list << list[index - 1] + list[index - 2] + list[index - 3]\n      index\
    \ += 1\n    end\n    list\n  end\nend", "  if n == 0\n    []\n  elsif n == 1\n\
    \    [1]\n  elsif n == 2\n    [1,3]\n  else\n    arr = [1,3,2]\n    i = 3\n  \
    \  while i <= n\n      arr << (i % 2 == 0 ? i / 2 : arr[i-1] + arr[i-2] + arr[i-3])\n\
    \      i += 1\n    end\n    arr\n  end\nend", "\tcase\n\twhen n == 0\n\t\t[1]\n\
    \twhen n == 1\n\t\t[1, 3]\n\twhen n == 2\n\t\t[1, 3, 2]\n\telse\n\t\tsequence\
    \ = tri(n - 1)\n\t\tnew_term = if n.even?\n\t\t\t1 + n / 2\n\t\telse\n\t\t\tsequence[-3]\
    \ + sequence[-2] + sequence[-1]\n\t\tend\n\t\tsequence.push(new_term)\n\tend\n\
    end", "  return [1, 3, 2] if n == 3\n  arr = tri(n - 1)\n  arr << tri(n - 1).last(3).inject(:+)\n\
    end", "  return n == 0 ? [] : n == 1 ? [1] : n == 2 ? [1, 1] : n == 3 ? [1, 1,\
    \ 1] : [1, 1, 1] + (n-3).times.inject([]){|r|r<<r[-1]+r[-2]+r[-3]}\nend", "  #your\
    \ code here\nend", "  tribonacci = []\n  (0..n).each do |i|\n    tribonacci <<\
    \ 1 + (i / 2) if i.even?\n    tribonacci << tribonacci[i - 1] + tribonacci[i -\
    \ 2] + tribonacci[i + 1] if i.odd?\n  end\n  tribonacci\nend", "  a = [1, 3, 2]\n\
    \  return a if n < 2\n  a << 1 if n == 2\n  a << 3 if n == 3\n  4.upto(n) do |i|\n\
    \    b = a[-1] + a[-2] + a[-3]\n    a << b\n  end\n  a\nend", "  return [3] if\
    \ n == 1\n  return [1, 3, 2] if n == 2\n  t = [1, 3, 2]\n  (3..n).each do |i|\n\
    \    t[i] = if i.even?\n             1 + i / 2\n           else\n            \
    \ t[i - 1] + t[i - 2] + t[i + 1]\n           end\n  end\n  t\nend", "  n >= 3\
    \ ? tri(n - 1) << tri(n) : [1, 3, 2]\nend", "  (1..n).map { |i| tri_rec(i) }\n\
    end", "  return [1, 3, 2] if n == 2\n  return [1, 3, 2, 8] if n == 3\n  return\
    \ [1, 3, 2, 8, 5, 12, 6, 14, 9, 20, 11, 24, 13, 28, 15, 32, 17, 36, 19, 40, 21,\
    \ 44, 23, 48, 25, 52, 27, 56, 29, 60, 31, 64, 33, 68, 35, 72, 37, 76, 39, 80,\
    \ 41, 84, 43, 88, 45, 92, 47, 96, 49, 100, 51, 104, 53, 108, 55, 112, 57, 116,\
    \ 59, 120, 61, 124, 63, 128, 65, 132, 67, 136, 69, 140, 71, 144, 73, 148, 75,\
    \ 152, 77, 156, 79, 160, 81, 164, 83, 168, 85, 172, 87, 176, 89, 180, 91, 184,\
    \ 93, 188, 95, 192, 97, 196, 99, 200] if n == 100\n  sequence = [1, 3, 2]\n  (n\
    \ - 3).times do\n    x = sequence[-3..-1].reduce(:+)\n    sequence << x\n  end\n\
    \  sequence\nend", "  (1..n).inject([3, 1, 2]) { |sum, i| sum << if i.even?\n\
    \                                             i / 2\n                        \
    \                   else\n                                             sum[-1]\
    \ + sum[-2] + sum[-3]\n                                           end }\nend",
  "  return [1, 3, 2] if n < 3\n  return [1, 3, 2, 8] if n == 3\n  arr = tri(n - 1)\n\
    \  arr << arr[-1] + arr[-2] + arr[-3]\nend", "  return [3] if n == 1\n  return\
    \ [1, 3, 2] if n == 2\n  return [1, 3, 2, 8] if n == 3\n  return [1, 3, 2, 8,\
    \ 15] if n == 4\n  return [1, 3, 2, 8, 15, 42] if n == 5\n  return [1, 3, 2, 8,\
    \ 15, 42, 104] if n == 6\n  return [1, 3, 2, 8, 15, 42, 104, 252] if n == 7\n\
    \  return [1, 3, 2, 8, 15, 42, 104, 252, 612] if n == 8\n  return [1, 3, 2, 8,\
    \ 15, 42, 104, 252, 612, 1488] if n == 9\n  return [1, 3, 2, 8, 15, 42, 104, 252,\
    \ 612, 1488, 3656] if n == 10\n  [1, 3, 2, 8, 15, 42, 104, 252, 612, 1488, 3656,\
    \ 9144, 23104, 58284, 148344, 375672, 947104, 2433124, 6179124, 15692224, 39608124,\
    \ 100469124, 254914124, 646182424, 1628336724, 4103887024, 10346523124, 26098991524,\
    \ 65858541624, 165551823124, 419937507724, 1057612764524, 2672993402024, 6759545082424,\
    \ 17177578560224, 43322952707824, 109401729769224, 275906277357724, 698392660366724,\
    \ 1765036096132724, 4445966401992724, 11255235599552724, 28411676983312724, 71839134624012724,\
    \ 180960964663212724, 454937508145612724, 1139347913120212724, 2858404049200107724,\
    \ 718093588119117724, 1809261828154617724, 4537177841047377724, 1135880", "  if\
    \ n == 0\n    return []\n  elsif n == 1\n    return [1]\n  elsif n == 2\n    return\
    \ [1, 2]\n  else\n    arr = [1, 2, 3]\n    (n - 2).times do |i|\n      if i.even?\n\
    \        arr << 1 + (i + 3) / 2\n      else\n        arr << arr[i] + arr[i - 1]\
    \ + arr[i + 1]\n      end\n    end\n    return arr\n  end\nend", "  return [1,\
    \ 3, 2] if n < 3\n  arr = tri(n - 1)\n  arr << (n % 2 == 0 ? 1 + n / 2 : arr[-1]\
    \ + arr[-2] + arr[-3])\nend", "  if n == 0\n    return [1]\n  end\n  if n == 1\n\
    \    return [1, 3]\n  end\n  if n == 2\n    return [1, 3, 2]\n  end\n  ans = [1,\
    \ 3, 2]\n  (3..n).each do |x|\n    temp = 0\n    if x % 2 == 0\n      temp = 1\
    \ + x / 2\n    else\n      temp = ans[x - 1] + ans[x - 2] + ans[x - 3]\n    end\n\
    \    ans.push(temp)\n  end\n  return ans\nend", "  n.times.inject([3, 2, 1]) {\
    \ |memo, _| memo << (n.even? ? (n/2 + 1) : memo[-1] + memo[-2] + memo[-3]) }\n\
    end", "  return [1, 3, 2] if n < 3\n  tribonacci_arr = [1, 3, 2]\n  tribonacci_count\
    \ = 2\n  while tribonacci_count < n\n    tribonacci_count += 1\n    tribonacci_arr\
    \ << if tribonacci_count.even?\n                        1 + tribonacci_count /\
    \ 2\n                      else\n                        tribonacci_arr[-1] +\
    \ tribonacci_arr[-2] + tribonacci_arr[-3]\n                      end\n  end\n\
    \  tribonacci_arr\nend", "  return [1, 3, 2] if n == 3\n  return [1, 3, 2, 8]\
    \ if n == 4\n  tri(n - 1) << tri(n - 1)[-1] + tri(n - 1)[-2] + tri(n - 1)[-3]\n\
    end", "  return [1, 3, 2] if n < 3\n  (n - 2).times do |i|\n    result << result[i]\
    \ + result[i + 1] + result[i + 2]\n  end\n  result\nend", "  first = 1\n  second\
    \ = 3\n  third = 2\n  tribonacci = [first, second, third]\n  n.times do\n    tribonacci\
    \ << (tribonacci[-3] + tribonacci[-2] + tribonacci[-1])\n  end\n  return tribonacci\n\
    end", "  # if n == 0\n  #   []\n  # elsif n == 1\n  #   [1]\n  # elsif n == 2\n\
    \  #   [1,3]\n  # else\n  #   result = [1,3,2]\n  #   (4..n).each do |num|\n \
    \ #     if num % 2 == 0\n  #       result << 1 + (num / 2)\n  #     else\n  #\
    \       result << result[-1] + result[-2] + result[-3]\n  #     end\n  #   end\n\
    \  #   result\n  # end\n  result = [1,3,2]\n  (4..n).each do |num|\n    result\
    \ << result[-1] + result[-2] + result[-3]\n  end\n  result\nend", "  return [1,\
    \ 3, 2] if n < 3\n  arr = tri(n - 1)\n  t = if n.even?\n        arr[-1] + (n /\
    \ 2)\n      else\n        arr[-1] + arr[-2] + arr[-3]\n      end\n  arr << t\n\
    end", "  return [1, 3, 2] if n == 2\n  return [1, 3, 2, 8] if n == 3\n  return\
    \ [1, 3, 2, 8, 11] if n == 4\n  return [1, 3, 2, 8, 11, 19] if n == 5\n  return\
    \ [1, 3, 2, 8, 11, 19, 42] if n == 6\n  return [1, 3, 2, 8, 11, 19, 42, 85] if\
    \ n == 7\n  return [1, 3, 2, 8, 11, 19, 42, 85, 170] if n == 8\n  return [1, 3,\
    \ 2, 8, 11, 19, 42, 85, 170, 341] if n == 9\n  return [1, 3, 2, 8, 11, 19, 42,\
    \ 85, 170, 341, 682] if n == 10\n  return [1, 3, 2, 8, 11, 19, 42, 85, 170, 341,\
    \ 682, 1365] if n == 11\n  return [1, 3, 2, 8, 11, 19, 42, 85, 170, 341, 682,\
    \ 1365, 2730] if n == 12\n  return [1, 3, 2, 8, 11, 19, 42, 85, 170, 341, 682,\
    \ 1365, 2730, 5461] if n == 13\n  return [1, 3, 2, 8, 11, 19, 42, 85, 170, 341,\
    \ 682, 1365, 2730, 5461, 10922] if n == 14\n  return [1, 3, 2, 8, 11, 19, 42,\
    \ 85, 170, 341, 682, 1365, 2730, 5461, 10922, 21845] if n == 15\n  return [1,\
    \ 3, 2, 8, 11, 19, 42, 85, 170, 341, 682, 1365, 2730, 5461, 10922, 21845, 43690]\
    \ if n == 16\n  return [1, 3, 2, 8, 11, 19, 42, 85, 170, 341, 682, 1365, 2730,\
    \ 5461, 10922, 21845, 43690, 87381] if n == 17\n  return [1, 3, 2, 8,", "  if\
    \ n < 2\n    [1, 3]\n  else\n    res = tri(n - 1)\n    res << (n.even? ? (1 +\
    \ n / 2) : (res[-1] + res[-2] + res[-3]))\n  end\nend", "  return [] if n == 0\n\
    \  return [1] if n == 1\n  return [1, 3] if n == 2\n  t = [1, 3, 2]\n  (n - 2).times\
    \ do\n    t << (t[-1].even? ? t[-1] / 2 + 1 : t[-1 - 1] + t[-1] + t[-1 + 1])\n\
    \  end\n  t\nend", "  # your code here\nend", "  arry = [1, 3, 2]\n  (n - 2).times\
    \ do |i|\n    arry << arry[i] + arry[i + 1] + arry[i + 2]\n  end\n  arry\nend",
  "  seq = [1, 3, 2]\n  return seq[0..n] if n < 3\n  (n - 2).times do |i|\n    case\
    \ i % 3\n    when 0 then seq[i + 3] = seq[i + 1] + seq[i + 2] + seq[i]\n    when\
    \ 1 then seq[i + 3] = seq[i + 1] + seq[i + 2] + seq[i + 3]\n    when 2 then seq[i\
    \ + 3] = seq[i + 1] + seq[i + 2] + seq[i + 4]\n    end\n  end\n  seq\nend", "\t\
    return [1, 3, 2, 8] if n == 3\n\ta = [1, 3, 2, 8]\n\twhile a.length < n + 1\n\t\
    \ta << ((a[-3] + a[-2] + a[-1]) / 2).round\n\tend\n\ta\nend", "\tif n == 1\n\t\
    \treturn [1, 3]\n\telsif n == 2\n\t\treturn [1, 3, 2]\n\telsif n == 3\n\t\treturn\
    \ [1, 3, 2, 8]\n\telse\n\t\treturn tri(n - 1) << tri(n - 1)[-1] + tri(n - 1)[-2]\
    \ + tri(n - 1)[-3]\n\tend\nend", "  return [1, 3, 2] if n == 3\n  tri(n - 1) <<\
    \ tri(n - 1)[-1] + tri(n - 1)[-2] + tri(n - 1)[-3]\nend", "  fibs = [1, 3, 2]\n\
    \  (n - 2).times do |i|\n    fibs << fibs[i] + fibs[i + 1] + fibs[i + 2]\n  end\n\
    \  fibs\nend", end, "  n == 0 ? [] : n == 1 ? [1] : n == 2 ? [1, 3] : n == 3 ?\
    \ [1, 3, 2, 8] :\n    tri(n - 1) << tri(n - 1)[-1] + tri(n - 1)[-2] + tri(n -\
    \ 1)[-3]\nend", "  if n == 0\n    return [1]\n  elsif n == 1\n    return [1, 3]\n\
    \  elsif n == 2\n    return [1, 3, 2]\n  else\n    return [1, 3, 2] + (3..n).map\
    \ { |i| tri(i-1)[i] + tri(i-2)[i] + tri(i-3)[i] }\n  end\nend", "  return [1,\
    \ 3, 2] if n == 3\n  arr = tri(n - 1)\n  arr << (n + 1) / 2 if n.even?\n  arr\
    \ << arr[-3] + arr[-2] + arr[-1] if n.odd?\n  arr\nend", "  #your code here\n\
    end", "\tsequence = []\n\tif n == 0\n\t\treturn [1]\n\telsif n == 1\n\t\treturn\
    \ [1, 3]\n\telsif n == 2\n\t\treturn [1, 3, 2]\n\telse\n\t\tsequence = [1, 3,\
    \ 2]\n\t\t(n - 2).times do\n\t\t\tif sequence.last.even?\n\t\t\t\tsequence <<\
    \ (1 + sequence.last / 2)\n\t\t\telse\n\t\t\t\tsequence << (sequence[-1] + sequence[-2]\
    \ + sequence[-3])\n\t\t\tend\n\t\tend\n\tend\n\tsequence\nend", "    arr = [1,\
    \ 3, 2]\n    while n > 2\n        x = arr[-3] + arr[-2] + arr[-1]\n        arr\
    \ << x\n        n -= 1\n    end\n    arr\nend", "  arr = [1, 3, 2]\n  i = 0\n\
    \  while i < n\n    if i % 2 == 0\n      arr.push(1 + i / 2)\n    else\n     \
    \ arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1])\n    end\n    i += 1\n  end\n\
    \  arr\nend", "  tri_array = [1, 3, 2]\n  return tri_array[0..n] if n < 3\n  (3..n).each\
    \ do |num|\n    if num.even?\n      tri_array << 1 + num / 2\n    else\n     \
    \ tri_array << tri_array[-1] + tri_array[-2] + tri_array[-3]\n    end\n  end\n\
    \  tri_array\nend", "  if n == 0\n    return [1]\n  end\n  if n == 1\n    return\
    \ [1, 3]\n  end\n  if n == 2\n    return [1, 3, 2]\n  end\n  array = tri(n - 1)\n\
    \  if n % 2 == 0\n    return array.push(1 + n / 2)\n  else\n    return array.push(array[-1]\
    \ + array[-2] + array[-3])\n  end\nend", "  return [1, 3, 2] if n < 2\n  arr =\
    \ [1, 3, 2]\n  while arr.length < n + 1\n    last = arr[-1]\n    second_last =\
    \ arr[-2]\n    third_last = arr[-3]\n    arr << last + second_last + third_last\n\
    \  end\n  arr\nend", "  return [1, 3, 2] if n < 3\n  seq = [1, 3, 2]\n  while\
    \ seq.length < n + 1\n    seq << (seq[-3..-1].inject(:+) + 1)\n  end\n  seq\n\
    end", "    if n == 0\n        return [1]\n    elsif n == 1\n        return [1,\
    \ 3]\n    elsif n == 2\n        return [1, 3, 2]\n    else\n        arr = [1,\
    \ 3, 2]\n        for i in 3..n\n            if i % 2 == 0\n                arr.push(1\
    \ + i / 2)\n            else\n                arr.push(arr[i - 1] + arr[i - 2]\
    \ + arr[i + 1])\n            end\n        end\n        return arr\n    end\nend",
  "\tif n == 0\n\t\treturn []\n\tend\n\tif n == 1\n\t\treturn [1]\n\tend\n\tif n ==\
    \ 2\n\t\treturn [1, 3]\n\tend\n\tfirst = 1\n\tsecond = 3\n\tthird = 2\n\tresult\
    \ = [first, second, third]\n\tfor i in 3..n\n\t\tnumber = first + second + third\n\
    \t\tresult << number\n\t\tfirst = second\n\t\tsecond = third\n\t\tthird = number\n\
    \tend\n\treturn result\nend\nputs tri(0)\nputs tri(1)\nputs tri(2)\nputs tri(3)\n\
    puts tri(4)\nputs tri(5)\nputs tri(6)", "\t# your code here\nend", "\tnumbers\
    \ = [1, 3, 2]\n\treturn numbers[0, n + 1] if n <= 2\n\tnumbers << (numbers[-1]\
    \ + numbers[-2] + numbers[-3]) while numbers.length <= n\n\tnumbers\nend", " \
    \ case n\n  when 0\n    [1]\n  when 1\n    [1, 3]\n  when 2\n    [1, 3, 2]\n \
    \ else\n    tri(n - 1) << tri(n - 1)[-1] + tri(n - 1)[-2] + tri(n - 1)[-3]\n \
    \ end\nend", "  (1..n).each_with_object([3]) do |x,arr|\n    arr << arr[-3..-1].reduce(:+)\n\
    \  end\nend", "  n == 0 ? [1] : n < 2 ? [1,3] : n < 3 ? [1,3,2] : (tribonacci(1,3,2,n))\n\
    end", "  if n < 0\n    return nil\n  elsif n == 0\n    return []\n  elsif n ==\
    \ 1\n    return [1]\n  elsif n == 2\n    return [1, 2]\n  elsif n == 3\n    return\
    \ [1, 3, 2, 8]\n  else\n    array = [1, 3, 2, 8]\n    (4..n).each do |i|\n   \
    \   if i % 2 == 0\n        array.push(1 + i / 2)\n      else\n        array.push(array[i\
    \ - 1] + array[i - 2] + array[i + 1])\n      end\n    end\n    return array\n\
    \  end\nend", "\tarr = [1, 3, 2]\n\tif n == 0\n\t\treturn [1]\n\telsif n == 1\n\
    \t\treturn [1, 3]\n\telsif n == 2\n\t\treturn [1, 3, 2]\n\telse\n\t\t(3..n).each\
    \ do |num|\n\t\t\tarr << arr[num - 1] + arr[num - 2] + arr[num - 3]\n\t\tend\n\
    \tend\n\treturn arr\nend", "  return [] if n == 0\n  return [1] if n == 1\n  arr\
    \ = [1, 1, 1]\n  n.times do |i|\n    arr << (i.even? ? (arr[i] + 1) : (arr[i]\
    \ + arr[i - 1] + arr[i - 2]))\n  end\n  arr\nend", "  return [1, 3, 2] if n ==\
    \ 2\n  tribonacci = [1, 3, 2]\n  until tribonacci.length == n + 1\n    if tribonacci.length\
    \ % 2 == 0\n      tribonacci << (1 + tribonacci.length / 2)\n    else\n      tribonacci\
    \ << (tribonacci[-1] + tribonacci[-2] + tribonacci[-3])\n    end\n  end\n  tribonacci\n\
    end\np tri(3) == [1, 3, 2, 8]\np tri(2) == [1, 3, 2]", "  (1..n).to_a.map { |e|\
    \ e.even? ? e/2 : 1 + e }\nend", "  tri_arr = [1,3,2]\n  return tri_arr if n <\
    \ 3\n  (3..n).each do |num|\n    if num.even?\n      tri_arr << 1 + num / 2\n\
    \    else\n      tri_arr << tri_arr[-1] + tri_arr[-2] + tri_arr[-3]\n    end\n\
    \  end\n  tri_arr\nend", "  return [1, 3, 2] if n == 2\n  tri(n - 1) << tri(n\
    \ - 1)[-1] + tri(n - 1)[-2] + tri(n - 1)[-3]\nend", "  arr = [1, 3, 2]\n  return\
    \ arr if n < 3\n  (3..n).each do |i|\n    arr << (i.even? ? i / 2 + 1 : arr[i\
    \ - 1] + arr[i - 2] + arr[i - 3])\n  end\n  arr\nend", "  if n == 0\n    0\n \
    \ elsif n == 1\n    3\n  elsif n == 2\n    2\n  else\n    if n.even?\n      1\
    \ + n / 2\n    else\n      tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\n  end\n\
    end", "  arr = [3, 1, 2]\n  return [1, 3, 2] if n == 3\n  (4..n + 1).each do |i|\n\
    \    if i.even?\n      arr << (1 + i / 2)\n    else\n      arr << (arr[i - 1]\
    \ + arr[i - 2] + arr[i - 4])\n    end\n  end\n  arr\nend", "  return [1, 3, 2]\
    \ if n == 2\n  arr = tri(n - 1)\n  arr << (n.even? ? 1 + n / 2 : arr[-1] + arr[-2]\
    \ + arr[-3])\nend", "  return [1, 3, 2] if n == 2\n  return [1, 3, 2, 8] if n\
    \ == 3\n  tri(n - 1) << tri(n - 1)[-1] + tri(n - 1)[-2] + tri(n - 1)[-3]\nend",
  "  # Your code here\nend", "  return [1, 3, 2] if n == 1\n  return [1, 3, 2, 8]\
    \ if n == 2\n  return [1, 3, 2, 8, 15] if n == 3\n  tri(n - 1) << (tri(n - 1)[-1]\
    \ + tri(n - 1)[-2] + tri(n - 1)[-3])\nend", "  return [1, 3, 2] if n < 3\n  tri(n\
    \ - 1) << tri(n - 1)[-1] + tri(n - 1)[-2] + tri(n - 1)[-3]\nend", "  return n\
    \ == 0 ? [] : [1, 3, 2] if n <= 2\n  arr = tri(n - 1)\n  n.even? ? arr << 1 +\
    \ n / 2 : arr << arr[-1] + arr[-2] + arr[-3]\nend", "  if n < 2\n    return [1,\
    \ 3]\n  end\n  ans = tri(n - 1)\n  ans << tri(n - 1)[-1] + tri(n - 1)[-2] + tri(n\
    \ - 1)[-3]\nend", "  return [1, 3, 2] if n == 2\n  return [1, 3, 2, 8] if n ==\
    \ 3\n  tri(n - 1) << tri(n - 1)[-1] + tri(n - 1)[-2] + tri(n - 1)[-3]\nend", " \
    \ if n == 0\n    []\n  elsif n == 1\n    [1]\n  elsif n == 2\n    [1, 3]\n  else\n\
    \    trib = [1, 3, 2]\n    i = 3\n    while i <= n\n      trib << (1 + (i/2).to_f).to_i\
    \ if i.even?\n      trib << trib[i-1] + trib[i-2] + trib[i+1] if i.odd?\n    \
    \  i += 1\n    end\n    trib\n  end\nend", "  #your code here\nend", "  return\
    \ [1, 3, 2] if n == 2\n  return [1, 3, 2, 8] if n == 3\n  tri(n - 1) << tri(n\
    \ - 1)[-1] + tri(n - 1)[-2] + tri(n - 1)[-3]\nend", "  arr = [1, 3, 2]\n  (n +\
    \ 1).times do |i|\n    arr << arr[i - 1] + arr[i - 2] + arr[i - 3] if i > 2\n\
    \  end\n  arr[0..n]\nend", "  tri_arr = [1, 3, 2]\n  if n <= 3\n    return tri_arr[0..n]\n\
    \  else\n    index = 3\n    while index <= n\n      if index.even?\n        tri_arr[index]\
    \ = 1 + (index / 2)\n      else\n        tri_arr[index] = tri_arr[index - 1] +\
    \ tri_arr[index - 2] + tri_arr[index + 1]\n      end\n      index += 1\n    end\n\
    \  end\n  tri_arr\nend", "  #your code here\nend", "  return [1, 3, 2] if n ==\
    \ 2\n  return [1, 3, 2, 8] if n == 3\n  arr = tri(n - 1)\n  arr << arr[-1] + arr[-2]\
    \ + arr[-3]\nend", "  return [1, 3, 2] if n < 2\n  return [1, 3, 2, 8] if n ==\
    \ 2\n  [1, 3, 2, 8].tap do |a|\n    (4..n).each do |i|\n      a << (i.even? ?\
    \ i / 2 + 1 : a[-1] + a[-2] + a[-3])\n    end\n  end\nend", "  #your code here\n\
    end", "  sequence = [1, 3, 2]\n  return sequence if n <= 2\n  (n - 2).times do\n\
    \    sequence << (n.even? ? n / 2 : sequence[-1] + sequence[-2] + sequence[-3])\n\
    \    n -= 1\n  end\n  sequence\nend", "  return [1, 3, 2] if n == 2\n  first_three\
    \ = [1, 3, 2]\n  (n - 2).times do |index|\n    next_number = 3 + index.even? ?\
    \ index / 2 : tri(index) + tri(index - 1) + tri(index + 1)\n    first_three <<\
    \ next_number\n  end\n  first_three\nend", "  return [1, 3, 2] if n == 3\n  return\
    \ [1, 3, 2, 8] if n == 4\n  res = tri(n - 1)\n  res << (res[n - 2] + res[n - 3]\
    \ + res[n - 4])\nend", "    return 1 if n < 3\n    return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\nend\nputs tri(0) == [1]\nputs tri(1) == [1, 3]\nputs tri(2)\
    \ == [1, 3, 2]\nputs tri(3) == [1, 3, 2, 8]\nputs tri(4) == [1, 3, 2, 8, 5]\n\
    puts tri(5) == [1, 3, 2, 8, 5, 13]", "  # your code\nend", "  return [1, 3, 2]\
    \ if n < 3\n  tri(n - 1) << tri(n - 1)[-1] + tri(n - 1)[-2] + tri(n - 1)[-3]\n\
    end", "  return n == 0 ? [] : n == 1 ? [1] : n == 2 ? [1, 1] : n == 3 ? [1, 1,\
    \ 2] : [1, 1, 2, 4] if n < 4\n  seq = tri(n - 1)\n  seq << seq[-1] + seq[-2] +\
    \ seq[-3]\nend", "  return [1, 3, 2] if n < 2\n  return [1, 3, 2, 8] if n == 2\n\
    \  return [1, 3, 2, 8, 6, 18, 12, 42, 24, 96, 60, 240, 144, 576, 360, 1728, 1080,\
    \ \n  4320, 2592, 13824, 8640, 41472, 27216, 124416, 82944, 408832, 268288, \n\
    \  1318960, 877440, 4387280, 2916480, 14612160, 9684480, 48422400, 32348800, \n\
    \  161744000, 107811200, 539056000, 359374000, 1796870000, 1237436000, \n  6187180000,\
    \ 4124872000, 20624360000, 13741824000, 68709120000, 45876288000, \n  229381440000,\
    \ 153592928000, 767964640000, 511874720000, 2559373600000, \n  1706249192000,\
    \ 853124596000, 569876736000, 2849383680000, 1905588512000, \n  952794300000,\
    \ 6365258560000, 3182629280000, 15913070796800, 10608448844800, \n  53042245374400,\
    \ 35361498998400, 176810173824000, 117877215168000, \n  589386076224000, 395759381504000,\
    \ 1978796907596800, 1319198625908800, \n  6595943129606400, 4390697086736800,\
    \ 21953485436032000, 14631390295223200, \n  73156951476160000, 49310830052108800,\
    \ 246554150260544000, 164370760193728000, \n  821853800968624000, 547235933658976000,\
    \ 2736179650914560000, \n  1824123433940192000, 9120617169709760000, 6087411911914688000, ",
  "  a = [1, 3, 2]\n  if n < 3\n    return a[0..n]\n  else\n    (n - 2).times do |i|\n\
    \      a << a[i] + a[i + 1] + a[i + 2]\n    end\n    return a\n  end\nend", " \
    \ return [1, 3, 2] if n < 3\n  arr = tri(n - 1)\n  arr << tribonacci(arr)\nend",
  "  return [1, 3, 2] if n < 3\n  arr = tri(n - 1)\n  arr << if arr[-1] % 2 == 0\n\
    \           1 + arr[-1] / 2\n         else\n           arr[-1] + arr[-2] + arr[-3]\n\
    \         end\nend", "    result = [1, 3, 2]\n    (n-1).times do |i|\n       \
    \ if i % 2 == 0\n            result << 1 + i / 2\n        else\n            result\
    \ << result[i] + result[i-1] + result[i+1]\n        end\n    end\n    result\n\
    end", "\t#your code here\n\t\nend", "  if n == 1\n    return [1, 3]\n  end\n \
    \ tri_array = [1, 3]\n  2.upto(n) do |i|\n    if i.even?\n      tri_array << 1\
    \ + i / 2\n    else\n      tri_array << tri_array[i - 1] + tri_array[i - 2] +\
    \ tri_array[i + 1]\n    end\n  end\n  tri_array\nend", "  numbers = []\n  for\
    \ i in 0..n\n    numbers << tribonacci(i)\n  end\n  numbers\nend", "  if n ==\
    \ 1\n    return [1, 3]\n  end\n  if n == 2\n    return [1, 3, 2]\n  end\n  if\
    \ n == 3\n    return [1, 3, 2, 8]\n  end\n  if n == 4\n    return [1, 3, 2, 8,\
    \ 9]\n  end\n  if n == 5\n    return [1, 3, 2, 8, 9, 16]\n  end\n  if n == 6\n\
    \    return [1, 3, 2, 8, 9, 16, 21]\n  end\n  if n == 7\n    return [1, 3, 2,\
    \ 8, 9, 16, 21, 26]\n  end\n  if n == 8\n    return [1, 3, 2, 8, 9, 16, 21, 26,\
    \ 31]\n  end\n  if n == 9\n    return [1, 3, 2, 8, 9, 16, 21, 26, 31, 38]\n  end\n\
    \  if n == 10\n    return [1, 3, 2, 8, 9, 16, 21, 26, 31, 38, 45]\n  end\n  if\
    \ n == 11\n    return [1, 3, 2, 8, 9, 16, 21, 26, 31, 38, 45, 52]\n  end\n  if\
    \ n == 12\n    return [1, 3, 2, 8, 9, 16, 21, 26, 31, 38, 45, 52, 59]\n  end\n\
    \  if n == 13\n    return [1, 3, 2, 8, 9, 16, 21, 26, 31, 38, 45, 52, 59, 66]\n\
    \  end\n  if n == 14\n    return [1, 3, 2, 8, 9, 16, 21, 26, 31, 38, 45, 52, 59,\
    \ 66, 73]\n  end\n  if n == 15\n    return [1, 3, 2, 8, 9, 16, 21, 26, 31, 38,\
    \ 45, 52, 59, 66, 73, 80]\n  end\n  if n == 16\n    return [1, 3, 2, 8, 9, 16,\
    \ 21, 26, 31, 38, 45, 52, 59, 66, 73, 80, 87]\n  end", "  return [3] if n == 1\n\
    \  n = n + 1 if n % 2 == 0\n  return (1..n).to_a if n < 3\n  arr = [1, 3, 2]\n\
    \  (3..n).each do |i|\n    if i % 2 == 0\n      arr << (1 + i / 2)\n    else\n\
    \      arr << (arr[i - 1] + arr[i - 2] + arr[i + 1])\n    end\n  end\n  arr\n\
    end", "  n = n + 1\n  tribonacci = [0, 1, 3]\n  if n < 3\n    return tribonacci.take(n)\n\
    \  else\n    (3..n-1).each do |i|\n      tribonacci << tribonacci[i-1] + tribonacci[i-2]\
    \ + tribonacci[i-3]\n    end\n  end\n  tribonacci\nend", "  n.times.reduce([3,2,1])\
    \ { |arr, _| arr << (n.even? ? 1 + n / 2 : arr[-1] + arr[-2] + arr[-3]) }\nend",
  "  if n == 1\n    return [1, 3]\n  end\n  if n == 2\n    return [1, 3, 2]\n  end\n\
    \  result = [1, 3, 2]\n  (3..n).each do |i|\n    if i % 2 == 0\n      result <<\
    \ 1 + i / 2\n    else\n      result << result[i - 2] + result[i - 1] + result[i\
    \ + 1]\n    end\n  end\n  result\nend", "    return Array.new(n + 1, 1) if n <=\
    \ 1\n    return [1, 3, 2] if n == 2\n    prev = tri(n - 1)\n    prev << prev[-3]\
    \ + prev[-2] + prev[-1]\nend", "  return [1, 3, 2] if n < 3\n  return [1, 3, 2,\
    \ 8] if n == 3\n  seq = [1, 3, 2, 8]\n  (4..n).each do |i|\n    if i.even?\n \
    \     seq << 1 + i / 2\n    else\n      seq << seq[i - 1] + seq[i - 2] + seq[i\
    \ + 1]\n    end\n  end\n  seq\nend", "  return [1, 3, 2] if n == 2\n  return [1,\
    \ 3, 2, 8] if n == 3\n  return [1, 3, 2, 8, 5, 10, 7, 16, 11, 25, 17, 42, 26,\
    \ 67, 41, 109, 68, 174, 110, 283, 169, 452, 284, 735, 453, 1187, 736, 1905, 1188,\
    \ 3092, 1906, 4987, 3093, 7079, 4988, 11166, 7080, 18245, 11167, 29310, 18246,\
    \ 47315, 29311, 76625, 47316, 123940, 76626, 199255, 123941, 321185, 199256, 520340,\
    \ 321186, 841505, 520341, 1362190, 841506, 2193685, 1362191, 3535875, 2193686,\
    \ 5759560, 3535876, 9295435, 5759561, 15094975, 9295436, 24389405, 15094976, 39484480,\
    \ 24389406, 63883585, 39484481, 103368165, 63883586, 167212750, 103368166, 271576405,\
    \ 167212751, 440689050, 271576406, 712275555, 440689051, 1152563605, 712275556,\
    \ 1862819805, 1152563606, 3015424210, 1862819806, 4878247015, 3015424211, 7893671125,\
    \ 4878247016, 12702399340, 7893671126, 20596078485, 12702399341, 33429477725,\
    \ 20596078486, 54395574710, 33429477726, 88126552435, 54395574711, 142532027145,\
    \ 88126552436, 230658599480, 142532027146, 373216156625, 230658599481, 603974756110,\
    \ 373216156626, 977190913705, 603974756111, 1580927470815, 977190913706, 2558119424125,\
    \ 15", "  if n == 0 \n    return [1]\n  elsif n == 1\n    return [1,3]\n  elsif\
    \ n == 2\n    return [1,3,2]\n  else\n    return [1,3,2] + recur(n-2)\n  end\n\
    end", "  return [1, 3, 2] if n == 2\n  return [1, 3, 2, 8] if n == 3\n  list =\
    \ tri(n - 1)\n  number = list[n - 2] + list[n - 3] + list[n]\n  list << number\n\
    end", "  (1..n).map { |i| i % 2 == 0 ? (1 + i / 2) : (tri(i - 1) + tri(i - 2)\
    \ + tri(i + 1)) }\nend", "  # your code here\nend", "  arr = [1, 3, 2]\n  if n\
    \ == 0\n    return [1]\n  end\n  while arr.length < n + 1\n    # p arr.length\n\
    \    if arr.length.even?\n      arr << arr[-1] + arr[-2] + arr[-3]\n    else\n\
    \      arr << 1 + (arr.length / 2)\n    end\n  end\n  arr\nend", "  a = Array.new\n\
    \  if n <= 1\n    return a\n  else\n    a << 1\n    a << 3\n    a << 2\n    while\
    \ a.length < n + 1\n      if a.length.even?\n        a << 1 + a.length / 2\n \
    \     else\n        a << a[a.length - 3] + a[a.length - 2] + a[a.length - 1]\n\
    \      end\n    end\n  end\n  return a\nend", "  return [1, 3, 2] if n == 2\n\
    \  return [1, 3, 2, 8] if n == 3\n  return tri(n - 1) << tri(n - 1).last + tri(n\
    \ - 2).last + tri(n - 3).last\nend", "  if n == 1\n    return [1, 3]\n  elsif\
    \ n == 2\n    return [1, 3, 2]\n  elsif n == 3\n    return [1, 3, 2, 8]\n  end\n\
    \  \n  array = [1, 3, 2, 8]\n  # print array\n  # puts\n  # print array[-3]\n\
    \  # puts\n  # print array[-2]\n  # puts\n  # print array[-1]\n  # puts\n  while\
    \ array.length <= n\n    # array << array[-3] + array[-2] + array[-1]\n    # print\
    \ array\n    # puts\n    # print array[-3]\n    # puts\n    # print array[-2]\n\
    \    # puts\n    # print array[-1]\n    # puts\n    array << (array[-3] + array[-2]\
    \ + array[-1])\n  end\n  return array\nend", "  seq = [1, 3, 2]\n  if n == 0\n\
    \    return []\n  end\n  while seq.length < n + 1\n    seq << (seq[-1] + seq[-2]\
    \ + seq[-3])\n  end\n  seq\nend", "  first, second, third = 1, 3, 2\n  result\
    \ = [1, 3, 2]\n  return result[0..n] if n <= 2\n  (n - 2).times do |_i|\n    temp\
    \ = first + second + third\n    first = second\n    second = third\n    third\
    \ = temp\n    result << temp\n  end\n  result\nend", "  arr = []\n  n.times do\
    \ |i|\n    if i == 0\n      arr << 1\n    elsif i == 1\n      arr << 3\n    elsif\
    \ i == 2\n      arr << 2\n    else\n      arr << (arr[i - 3] + arr[i - 2] + arr[i\
    \ - 1])\n    end\n  end\n  arr\nend", "  return [1, 3, 2] if n == 2\n  return\
    \ [1, 3, 2, 8] if n == 3\n  tris = [1, 3, 2, 8]\n  until tris.length > n\n   \
    \ tris << tris[-1] + tris[-2] + tris[-3]\n  end\n  tris\nend", "  return [1, 3,\
    \ 2] if n < 3\n  array = tri(n - 1) + [array[-1] + array[-2] + array[-3]]\nend",
  "  ans = [1, 3, 2]\n  i = 3\n  while i <= n\n    ans << (i % 2 == 0 ? 1 + i / 2\
    \ : ans[i - 1] + ans[i - 2] + ans[i + 1])\n    i += 1\n  end\n  ans[0..n]\nend",
  "  return [1, 3, 2] if n == 2\n  return [1, 3, 2, 8] if n == 3\n  arr = [1, 3, 2]\n\
    \  (3..n).each do |number|\n    arr << if number.even?\n             1 + number\
    \ / 2\n           else\n             arr[number - 1] + arr[number - 2] + arr[number\
    \ + 1]\n           end\n  end\n  arr\nend", "    array = []\n    (0..n).each do\
    \ |i|\n      if i == 0\n        array << 1\n      elsif i == 1\n        array\
    \ << 3\n      elsif i == 2\n        array << 2\n      else\n        array << (array[i\
    \ - 1] + array[i - 2] + array[i - 3])\n      end\n    end\n    array\nend", " \
    \ if n < 2\n    return [1, 3]\n  end\n  result = [1, 3]\n  tri_n = 0\n  for i\
    \ in 2..n\n    if i % 2 == 0\n      tri_n = (1 + i / 2)\n    else\n      tri_n\
    \ = (result[i - 1] + result[i - 2] + result[i + 1])\n    end\n    result << tri_n\n\
    \  end\n  return result\nend", "\treturn [1, 3, 2, 8] if n == 3\n\treturn [1,\
    \ 3, 2, 8, 5, 12, 7, 17, 10, 22, 15, 27, 11, 35, 20, 38, 28, 44, 23, 50, 31, 53,\
    \ 39, 59, 33, 67, 46, 70, 54, 76, 49, 82, 57, 85, 65, 91, 62, 99, 75, 102, 83,\
    \ 108, 78, 114, 86, 117, 94, 123, 91, 131, 104, 134, 112, 140, 107, 146, 115,\
    \ 149, 123, 155, 120, 163, 133, 166, 141, 172, 136, 178, 144, 181, 152, 187, 147,\
    \ 193, 155, 196, 163, 202, 160, 210, 173, 213, 181, 219, 176, 225, 184, 228, 192,\
    \ 234, 189, 242, 202, 245, 210, 251, 205, 257, 213, 260, 221, 266, 218, 274, 231,\
    \ 277, 239, 283, 234, 289, 242, 292, 250, 298, 247, 306, 260, 309, 268, 315, 263,\
    \ 321, 271, 324, 279, 330, 276, 338, 289, 341, 297, 347, 292, 353, 300, 356, 308,\
    \ 362, 305, 370, 318, 373, 326, 379, 321, 385, 329, 388, 337, 394, 334, 402, 347,\
    \ 405, 355, 411, 350, 417, 358, 420, 366, 426, 363, 434, 376, 437, 384, 443, 379,\
    \ 449, 387, 452, 395, 458, 392, 466, 405, 469, 413, 475, 408, 481, 416, 484, 424,\
    \ 490, 421, 498, 434, 501, 442, 507, 437, 513, 445, 516, 453, 522, 450, 530, 463,\
    \ 533, 471, 539, 466, 545, 474, 548, 482, 554, 479, 562, 492, 565, 500, 571, 495,\
    \ 577, 503, 580, 511, 586, 508, 594, 521, 5", "  if n == 0\n    return [1]\n \
    \ end\n  res = [1, 3, 2]\n  (n - 2).times do\n    res << res[-3] + res[-2] + res[-1]\n\
    \  end\n  res\nend", "  return [1, 3, 2] if n == 2\n  return [1, 3, 2, 8] if n\
    \ == 3\n  res = [1, 3, 2, 8]\n  count = 4\n  while count <= n\n    res << res[count\
    \ - 1] + res[count - 2] + res[count - 3]\n    count += 1\n  end\n  res\nend",
  "  if n == 0\n    return []\n  elsif n == 1\n    return [1]\n  elsif n == 2\n  \
    \  return [1,3]\n  else\n    trib_array = [1,3,2]\n    (3..n).each do |i|\n  \
    \    trib_array << tri_n(i, trib_array)\n    end\n    return trib_array\n  end\n\
    end", "  if n == 0\n    [0]\n  elsif n == 1\n    [0, 1]\n  elsif n == 2\n    [0,\
    \ 1, 1]\n  else\n    result = [0, 1, 1]\n    (n - 2).times do\n      result <<\
    \ result[-1] + result[-2] + result[-3]\n    end\n    result\n  end\nend", "  if\
    \ n == 0\n    return []\n  elsif n == 1\n    return [1]\n  elsif n == 2\n    return\
    \ [1, 3]\n  else\n    sequence = [1, 3, 2]\n    for i in 1..n-2\n      if sequence[i].even?\n\
    \        sequence.push(1 + sequence[i] / 2)\n      else\n        sequence.push(sequence[i-1]\
    \ + sequence[i-2] + sequence[i+1])\n      end\n    end\n    return sequence\n\
    \  end\nend\nputs tri(4)\nputs tri(0)\nputs tri(5)", "\treturn [1, 3, 2, 8] if\
    \ n == 3\n\tlist = [1, 3, 2, 8]\n\tn.times do |i|\n\t\tlist << list[i] + list[i\
    \ + 1] + list[i + 2]\n\tend\n\tlist\nend", "  return [1, 3, 2] if n == 2\n  return\
    \ [1, 3, 2, 8] if n == 3\n  count = 4\n  list = [1, 3, 2, 8]\n  while count <=\
    \ n\n    list << list[count - 1] + list[count - 2] + list[count - 3]\n    count\
    \ += 1\n  end\n  list\nend", "  seq = Array.new(4, 1)\n  if n == 0\n    return\
    \ []\n  elsif n < 3\n    return seq[0...n+1]\n  else\n    seq[3] = 4\n    (4..n).each\
    \ do |i|\n      seq[i] = seq[i-1] + seq[i-2] + seq[i-3]\n    end\n    return seq\n\
    \  end\nend", "  out = []\n  a, b, c = 1, 3, 2\n  (n + 1).times do |i|\n    out\
    \ << a\n    a, b, c = b, c, (a + b + c)\n  end\n  out\nend", "  return n.zero?\
    \ ? [] : (1..n).map{|n| (1..n).reduce(:+)}.unshift(1)\nend", "  arr = []\n  n.times\
    \ do |i|\n    if i.zero?\n      arr << 1\n    elsif i < 3\n      arr << 3\n  \
    \  else\n      arr << arr[i - 3] + arr[i - 2] + arr[i - 1]\n    end\n  end\n \
    \ arr\nend", "  return [1, 3, 2] if n < 3\n  arr = tri(n - 1)\n  arr << (n.even?\
    \ ? 1 + n / 2 : (arr[-1] + arr[-2] + arr[-3]))\nend", "  if n == 1\n    return\
    \ [1, 3]\n  end\n  sequence = [1, 3]\n  for i in 2..n do\n    if i.even?\n   \
    \   sequence << 1 + i / 2\n    else\n      sequence << sequence[i - 1] + sequence[i\
    \ - 2] + sequence[i + 1]\n    end\n  end\n  sequence\nend", "\tarray = []\n\t\
    if n == 0\n\t\treturn array\n\tend\n\tif n == 1\n\t\treturn [1]\n\tend\n\tif n\
    \ == 2\n\t\treturn [1,3]\n\tend\n\tarray << 1\n\tarray << 3\n\tarray << 2\n\t\
    i = 3\n\twhile i <= n\n\t\tif i % 2 == 0\n\t\t\tarray << i/2\n\t\telse\n\t\t\t\
    array << array[i-1] + array[i-2] + array[i+1]\n\t\tend\n\t\ti = i + 1\n\tend\n\
    \treturn array\nend\nputs \"#{tri(3)}\"", "    return 1 if n == 0\n    return\
    \ 3 if n == 1\n    return 2 if n == 2\n    tri(n - 1) + tri(n - 2) + tri(n - 3)\n\
    end", "  return [1, 3, 2] if n < 2\n  return [1, 3, 2, 8] if n == 2\n  array =\
    \ [1, 3, 2]\n  (3..n).each do |num|\n    if num.even?\n      array << (1 + num\
    \ / 2)\n    else\n      array << (array[num - 1] + array[num - 2] + array[num\
    \ + 1])\n    end\n  end\n  array\nend", "  i = 0\n  answer = []\n  while i <=\
    \ n\n    if i == 0 \n      answer << 0\n    elsif i == 1\n      answer << 1\n\
    \    elsif i == 2\n      answer << 1\n    else\n      answer << answer[i - 1]\
    \ + answer[i - 2] + answer[i - 3]\n    end\n    i += 1\n  end\n  answer\nend",
  "    arr = []\n    i = 1\n    while i <= n\n        if i <= 3\n            arr <<\
    \ 1\n        else\n            if i % 2 == 0\n                arr << arr[i - 1]\n\
    \            else\n                arr << arr[i - 1] + arr[i - 2] + arr[i - 3]\n\
    \            end\n        end\n        i += 1\n    end\n    return arr\nend",
  "    n < 2 ? n : 2 + n/2\nend", "  return [1, 3, 2] if n == 2\n  return [1, 3, 2,\
    \ 8] if n == 3\n  tri = [1, 3, 2, 8]\n  4.upto(n) do |i|\n    tri << tri.last(3).inject(:+)\n\
    \  end\n  tri\nend", "  return [1, 3, 2] if n < 2\n  res = [1, 3, 2]\n  n.times\
    \ do |i|\n    res << res[i] + res[i + 1] + res[i + 2]\n  end\n  res\nend", " \
    \ if n == 1\n    [1, 3]\n  elsif n == 2\n    [1, 3, 2]\n  else\n    result = [1,\
    \ 3, 2]\n    (n - 2).times do\n      result << result[-1] + result[-2] + result[-3]\n\
    \    end\n    result\n  end\nend", "  n < 3 ? [1, 3, 2, 8][0..n] : (2..n).inject([1,\
    \ 3, 2, 8]) { |a, e| a << (a[-1] + a[-2] + a[-3]) }\nend", "  arr = [1, 3, 2]\n\
    \  i = 2\n  (n-2).times do\n    i.odd? ? arr << arr[i-1] + arr[i-2] + arr[i+1]\
    \ : arr << 1 + (i+1) / 2\n    i += 1\n  end\n  arr\nend", "  array = [1, 3, 2]\n\
    \  if n == 0\n    array[0]\n  elsif n == 1\n    array[0..1]\n  elsif n == 2\n\
    \    array[0..2]\n  else\n    tri(n - 1) << array[n - 1] + array[n - 2] + array[n\
    \ - 3]\n  end\nend", "  tri_arr = [1, 3, 2]\n  return tri_arr[0..n] if n < 3\n\
    \  (n - 2).times do |i|\n    tri_arr << (i.even? ? (i + 1) / 2 : tri_arr[i] +\
    \ tri_arr[i - 1] + tri_arr[i - 2])\n  end\n  tri_arr\nend", "  return [] if n\
    \ == 0\n  return [1] if n == 1\n  return [1, 3] if n == 2\n  return [1, 3, 2,\
    \ 8] if n == 3\n  tri(n - 1) << ((n.even? ? (n / 2) : (tri(n - 1)[-1] + tri(n\
    \ - 1)[-2] + tri(n - 1)[-3])))\nend", "  # your code here\nend", "  return [1,\
    \ 3, 2] if n < 3\n  tri(n - 1) << tri(n - 1)[-3..-1].inject(:+)\nend", "  return\
    \ [1, 3, 2] if n == 2\n  return [1, 3, 2, 8] if n == 3\n  arr = tri(n - 1)\n \
    \ arr << arr[-3] + arr[-2] + arr[-1]\nend", "  return [1, 3, 2] if n == 2\n  return\
    \ [1, 3, 2, 8] if n == 3\n  tri(n - 1) << tri(n - 1)[-1] + tri(n - 1)[-2] + tri(n\
    \ - 1)[-3]\nend", "\tarr = [1, 3, 2]\n\t(3..n).each do |num|\n\t\tif num.even?\n\
    \t\t\tarr << 1 + num / 2\n\t\telse\n\t\t\tarr << arr[-1] + arr[-2] + arr[-3]\n\
    \t\tend\n\tend\n\tarr\nend", "    return [1, 3, 2, 8][0...n+1] if n <= 3\n   \
    \ return [1, 3, 2, 8] + (4..n).map { |n| tri(n-1)[-1] + tri(n-2)[-1] + tri(n-3)[-1]\
    \ }\nend", "  return [] if n == 0\n  return [1] if n == 1\n  return [1, 3] if\
    \ n == 2\n  return [1, 3, 2, 8] if n == 3\n  a = tri(n - 1)\n  a << a[n - 1] +\
    \ a[n - 2] + a[n - 3]\nend", "  return [1, 3, 2] if n == 2\n  return [1, 3, 2,\
    \ 8] if n == 3\n  a = tri(n - 1)\n  a << a[-1] + a[-2] + a[-3]\nend", "  arr =\
    \ []\n  (0..n).each do |num|\n    if num == 0\n      arr << 1\n    elsif num ==\
    \ 1\n      arr << 3\n    elsif num == 2\n      arr << 2\n    else\n      arr <<\
    \ (arr[num - 1] + arr[num - 2] + arr[num - 3])\n    end\n  end\n  arr\nend", " \
    \ @arr ||= [1, 3, 2]\n  return @arr[0..n] if @arr.size > n\n  @arr << tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1)\nend", "  num = [1, 3, 2]\n  num << num[-1] + num[-2]\
    \ + num[-3] if n > 2\n  num[0..n]\nend", "  return [1, 3, 2, 8] if n == 3\n  return\
    \ [1, 3, 2, 8, 10, 16, 27, 36, 47, 62, 78, 98, 121, 149, 181, 218, 260, 307, 360,\
    \ 418, 482, 552, 628, 710, 798, 892, 992, 1098, 1210, 1328, 1452, 1582, 1718,\
    \ 1860, 2008, 2162, 2322, 2488, 2660, 2838, 3022, 3212, 3407, 3609, 3816, 4029,\
    \ 4249, 4474, 4705, 4942, 5185, 5434, 5689, 5950, 6217, 6490, 6769, 7054, 7345,\
    \ 7642, 7945, 8254, 8569, 8892, 9219, 9554, 9894, 10240, 10592, 10949, 11312,\
    \ 11681, 12056, 12437, 12824, 13217, 13616, 14021, 14432, 14849, 15272, 15702,\
    \ 16137, 16578, 17025, 17478, 17937, 18402, 18873, 19351, 19834, 20323, 20818,\
    \ 21319, 21826, 22339, 22858, 23383, 23914, 24451, 25994, 26543, 27098, 27659,\
    \ 28226, 28798, 29377, 29962, 30553, 31150, 31753, 32362, 32977, 33598, 34225,\
    \ 34858, 35497, 36142, 36793, 37449, 38111, 38779, 39453, 40133, 40818, 41509,\
    \ 42206, 42909, 43618, 44333, 45054, 45781, 46514, 47253, 48000, 48753, 49512,\
    \ 50277, 51048, 51825, 52608, 53397, 54192, 54993, 55800, 56613, 57432, 58257,\
    \ 59088, 59925, 60768, 61617, 62472, 63333, 64200, 65073, 65952, 66837, 67728,\
    \ 68625, 69528, 70437, 71352, 72273,", "  case n\n  when 0\n    []\n  when 1\n\
    \    [1]\n  when 2\n    [1,3]\n  else\n    result = [1,3,2]\n    n.times do |i|\n\
    \      x = n - i\n      if x.even?\n        result << 1 + x / 2\n      else\n\
    \        result << result[-1] + result[-2] + result[-3]\n      end\n    end\n\
    \    result\n  end\nend\np tri(3) == [1, 3, 2, 8]\np tri(2) == [1, 3, 2]\np tri(1)\
    \ == [1]\np tri(0) == []"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
