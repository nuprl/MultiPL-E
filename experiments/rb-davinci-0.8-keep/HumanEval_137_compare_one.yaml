name: HumanEval_137_compare_one
language: rb
prompt: "# Create a function that takes integers, floats, or strings representing\n\
  # real numbers, and returns the larger variable in its given variable type.\n# Return\
  \ None if the values are equal.\n# Note: If a real number is represented as a string,\
  \ the floating point might be . or ,\n# compare_one(1, 2.5) \u279E 2.5\n# compare_one(1,\
  \ \"2,3\") \u279E \"2,3\"\n# compare_one(\"5,1\", \"6\") \u279E \"6\"\n# compare_one(\"\
  1\", 1) \u279E None\ndef compare_one(a, b)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare_one\n\
  \    candidate = method(:compare_one)\n    assert_equal(2, candidate.call(1, 2))\n\
  \    assert_equal(2.5, candidate.call(1, 2.5))\n    assert_equal(3, candidate.call(2,\
  \ 3))\n    assert_equal(6, candidate.call(5, 6))\n    assert_equal(\"2,3\", candidate.call(1,\
  \ \"2,3\"))\n    assert_equal(\"6\", candidate.call(\"5,1\", \"6\"))\n    assert_equal(\"\
  2\", candidate.call(\"1\", \"2\"))\n    assert_equal(nil, candidate.call(\"1\",\
  \ 1))\n  end\nend\n"
completions: ["  if a.is_a?(Integer) && b.is_a?(Integer)\n    if a > b\n      a\n\
    \    elsif a < b\n      b\n    else\n      return nil\n    end\n  elsif a.is_a?(Integer)\
    \ && b.is_a?(Float)\n    if a > b\n      a\n    elsif a < b\n      b\n    else\n\
    \      return nil\n    end\n  elsif a.is_a?(Integer) && b.is_a?(String)\n    if\
    \ a > b.to_f\n      a\n    elsif a < b.to_f\n      b\n    else\n      return nil\n\
    \    end\n  elsif a.is_a?(Float) && b.is_a?(Integer)\n    if a > b\n      a\n\
    \    elsif a < b\n      b\n    else\n      return nil\n    end\n  elsif a.is_a?(Float)\
    \ && b.is_a?(Float)\n    if a > b\n      a\n    elsif a < b\n      b\n    else\n\
    \      return nil\n    end\n  elsif a.is_a?(Float) && b.is_a?(String)\n    if\
    \ a > b.to_f\n      a\n    elsif a < b.to_f\n      b\n    else\n      return nil\n\
    \    end\n  elsif a.is_a?(String) && b.is_a?(Integer)\n    if a.to_f > b\n   \
    \   a\n    elsif a.to_f < b\n      b\n    else\n      return nil\n    end\n  elsif\
    \ a.is_a?(String) && b.is_a?(Float)\n    if a.to_f > b\n      a\n    elsif a.to_f\
    \ < b\n      b\n    else\n      return nil\n    end\n  elsif a.is_a?(String) &&\
    \ b.is_a?(String)\n    if a.to_f > b.to_f\n      a\n    elsif a.to_", "  return\
    \ a if a.to_s > b.to_s\n  return b if b.to_s > a.to_s\n  nil\nend", "    if a.class\
    \ == b.class\n        if a > b\n            return a\n        elsif a < b\n  \
    \          return b\n        else\n            return nil\n        end\n    elsif\
    \ a.class == String && b.class == Integer\n        if a.to_f > b\n           \
    \ return a\n        elsif a.to_f < b\n            return b\n        else\n   \
    \         return nil\n        end\n    elsif a.class == Integer && b.class ==\
    \ String\n        if a > b.to_f\n            return a\n        elsif a < b.to_f\n\
    \            return b\n        else\n            return nil\n        end\n   \
    \ end\nend", "  if a.is_a?(String)\n    a = a.gsub(',', '.').to_f\n  end\n  if\
    \ b.is_a?(String)\n    b = b.gsub(',', '.').to_f\n  end\n  a > b ? a : b\nend",
  "  if a.is_a? String\n    a.to_f > b.to_f ? a : b\n  elsif b.is_a? String\n    a.to_f\
    \ > b.to_f ? a : b\n  else\n    a > b ? a : b\n  end\nend", "  if a.is_a? Integer\n\
    \    return a > b ? a : b\n  elsif a.is_a? Float\n    return a > b ? a : b\n \
    \ elsif a.is_a? String\n    if a.include? '.'\n      return a.to_f > b.to_f ?\
    \ a : b\n    elsif a.include? ','\n      a = a.tr(',', '.')\n      return a.to_f\
    \ > b.to_f ? a : b\n    end\n  else\n    return nil\n  end\nend", "  if a.is_a?(Integer)\n\
    \    if b.is_a?(Integer)\n      return a if a > b\n      return b if b > a\n \
    \     return nil\n    elsif b.is_a?(Float)\n      return b\n    elsif b.is_a?(String)\n\
    \      b = b.gsub(/\\D/,\"\").to_i\n      return b if b > a\n      return a if\
    \ a > b\n      return nil\n    end\n  elsif a.is_a?(Float)\n    if b.is_a?(Integer)\n\
    \      return a\n    elsif b.is_a?(Float)\n      return a if a > b\n      return\
    \ b if b > a\n      return nil\n    elsif b.is_a?(String)\n      b = b.gsub(/\\\
    D/,\"\").to_f\n      return b if b > a\n      return a if a > b\n      return\
    \ nil\n    end\n  elsif a.is_a?(String)\n    if b.is_a?(Integer)\n      a = a.gsub(/\\\
    D/,\"\").to_i\n      return a if a > b\n      return b if b > a\n      return\
    \ nil\n    elsif b.is_a?(Float)\n      a = a.gsub(/\\D/,\"\").to_f\n      return\
    \ a if a > b\n      return b if b > a\n      return nil\n    elsif b.is_a?(String)\n\
    \      a = a.gsub(/\\D/,\"\").to_f\n      b = b.gsub(/\\D/,\"\").to_f\n      return\
    \ a if a > b\n      return b if b > a\n      return nil\n    end\n  end\nend\n\
    p compare_one(1, 2.5)\np compare_one(1, \"2,3\")\np compare_one(\"5,1\", \"6\"\
    )\np compare_one(\"1\", 1)\np compare_one(\"1.4\", 1.4)\np compare_one(\"1.4\"\
    , 1.5)\np compare_one(\"", "\tif (a.is_a? Float) || (b.is_a? Float) || (a.is_a?\
    \ Integer) || (b.is_a? Integer)\n\t\tif (a.is_a? String) && (b.is_a? String)\n\
    \t\t\ta = a.gsub(/[,.]/, \"\")\n\t\t\tb = b.gsub(/[,.]/, \"\")\n\t\tend\n\t\t\
    if a.to_i > b.to_i\n\t\t\treturn a\n\t\telsif b.to_i > a.to_i\n\t\t\treturn b\n\
    \t\telse\n\t\t\treturn nil\n\t\tend\n\tend\nend\nputs compare_one(1, 2.5)\nputs\
    \ compare_one(1, \"2,3\")\nputs compare_one(\"5,1\", \"6\")\nputs compare_one(\"\
    1\", 1)\nputs compare_one(1, 1)", "  if a == b\n    return nil\n  elsif a.class\
    \ == b.class\n    if a > b\n      return a\n    else\n      return b\n    end\n\
    \  elsif a.class == Fixnum\n    if a > b.to_f\n      return a\n    else\n    \
    \  return b\n    end\n  elsif a.class == Float\n    if a > b.to_f\n      return\
    \ a\n    else\n      return b\n    end\n  elsif a.class == String\n    if a.include?\
    \ \",\"\n      a = a.gsub(\",\", \".\")\n    end\n    if b.include? \",\"\n  \
    \    b = b.gsub(\",\", \".\")\n    end\n    if a.to_f > b.to_f\n      return a\n\
    \    else\n      return b\n    end\n  end\nend", "  return a.to_f if a.is_a?(String)\
    \ && b.is_a?(Integer)\n  return b.to_f if b.is_a?(String) && a.is_a?(Integer)\n\
    \  if b.is_a?(Float)\n    return a.to_f if a.is_a?(String)\n    return b if a.is_a?(Integer)\n\
    \  elsif a.is_a?(Float)\n    return b.to_f if b.is_a?(String)\n    return a if\
    \ b.is_a?(Integer)\n  end\n  return a if a.is_a?(String) && b.is_a?(String)\n\
    \  return nil if a == b\n  return a if a > b\n  return b if b > a\nend", "  if\
    \ a == b\n    return nil\n  end\n  if a.is_a?(Integer)\n    return a if a > b\n\
    \    return b\n  end\n  if a.is_a?(Float)\n    return a if a > b\n    return b\n\
    \  end\n  if a.is_a?(String)\n    if a.include?(\",\")\n      a = a.gsub(\",\"\
    , \".\")\n    end\n    if b.include?(\",\")\n      b = b.gsub(\",\", \".\")\n\
    \    end\n    return a if a.to_f > b.to_f\n    return b\n  end\nend", "  a = Float(a)\
    \ rescue nil\n  b = Float(b) rescue nil\n  if a == b\n    return nil\n  elsif\
    \ (a == nil)\n    return b\n  elsif (b == nil)\n    return a\n  elsif (a > b)\n\
    \    return a\n  else\n    return b\n  end\nend", "    return a if a.to_f > b.to_f\n\
    \    return b if b.to_f > a.to_f\n    return nil\nend", "  # Case 1: a and b are\
    \ both numbers\n  if a.is_a?(Numeric) && b.is_a?(Numeric)\n    if a > b\n    \
    \  return a\n    elsif b > a\n      return b\n    end\n  end\n  # Case 2: a and\
    \ b are both strings\n  if a.is_a?(String) && b.is_a?(String)\n    a = a.tr(',',\
    \ '.').to_f\n    b = b.tr(',', '.').to_f\n    if a > b\n      return a.to_s\n\
    \    elsif b > a\n      return b.to_s\n    end\n  end\n  # Case 3: a is a number\
    \ and b is a string\n  if a.is_a?(Numeric) && b.is_a?(String)\n    b = b.tr(',',\
    \ '.').to_f\n    if a > b\n      return a\n    elsif b > a\n      return b.to_s\n\
    \    end\n  end\n  # Case 4: a is a string and b is a number\n  if a.is_a?(String)\
    \ && b.is_a?(Numeric)\n    a = a.tr(',', '.').to_f\n    if a > b\n      return\
    \ a.to_s\n    elsif b > a\n      return b\n    end\n  end\n  # Return None if\
    \ the values are equal\n  return nil\nend\nputs compare_one(1, 2.5)\nputs compare_one(1,\
    \ \"2,3\")\nputs compare_one(\"5,1\", \"6\")\nputs compare_one(\"1\", 1)", " \
    \ if a.is_a?(String)\n    a = a.to_f\n  end\n  if b.is_a?(String)\n    b = b.to_f\n\
    \  end\n  if a == b\n    return nil\n  end\n  if a > b\n    return a\n  end\n\
    \  return b\nend", "  a = a.to_f\n  b = b.to_f\n  a > b ? a : b\nend", "\ta =\
    \ [a.to_f, a.to_i, a]\n\tb = [b.to_f, b.to_i, b]\n\tif a[0] > b[0]\n\t\treturn\
    \ a[0]\n\telsif a[0] < b[0]\n\t\treturn b[0]\n\telsif a[1] > b[1]\n\t\treturn\
    \ a[1]\n\telsif a[1] < b[1]\n\t\treturn b[1]\n\telsif a[2] > b[2]\n\t\treturn\
    \ a[2]\n\telsif a[2] < b[2]\n\t\treturn b[2]\n\telse\n\t\treturn nil\n\tend\n\
    end", "  if a.class == b.class\n    if a == b\n      return nil\n    else\n  \
    \    return a > b ? a : b\n    end\n  else\n    return a.class > b.class ? a :\
    \ b\n  end\nend", "  a == b ? nil : [a, b].max\nend", "  a == b ? (return nil)\
    \ : (a > b ? a : b)\nend", "  if a.to_f == b.to_f\n    nil\n  elsif a.to_f > b.to_f\n\
    \    a\n  else\n    b\n  end\nend", "\nend", "    if a.class == b.class\n    \
    \    return nil\n    elsif a.class == String && b.class == Integer\n        return\
    \ b\n    elsif a.class == Integer && b.class == String\n        return a\n   \
    \ elsif a.class == Integer && b.class == Float\n        return b\n    elsif a.class\
    \ == Float && b.class == Integer\n        return a\n    end\nend", "  return a\
    \ if a == b\n  return a if a.is_a?(Integer) && b.is_a?(Float)\n  return b if a.is_a?(Float)\
    \ && b.is_a?(Integer)\n  return a if a.is_a?(String) && b.is_a?(Integer)\n  return\
    \ b if a.is_a?(Integer) && b.is_a?(String)\n  return a if a.is_a?(String) && b.is_a?(Float)\n\
    \  return b if a.is_a?(Float) && b.is_a?(String)\n  return a if a.is_a?(String)\
    \ && b.is_a?(String) && a.to_f > b.to_f\n  return b if a.is_a?(String) && b.is_a?(String)\
    \ && a.to_f < b.to_f\nend", "  return a if a.is_a?(Integer) && b.is_a?(Float)\n\
    \  return b if b.is_a?(Integer) && a.is_a?(Float)\n  return a if a.is_a?(Integer)\
    \ && b.is_a?(String)\n  return b if b.is_a?(Integer) && a.is_a?(String)\n  return\
    \ a if a.is_a?(Float) && b.is_a?(String)\n  return b if b.is_a?(Float) && a.is_a?(String)\n\
    \  return nil if a == b\nend", "  compare = a.to_s <=> b.to_s\n  if compare.zero?\n\
    \    nil\n  elsif compare == 1\n    b\n  else\n    a\n  end\nend", "  if a ==\
    \ b\n    nil\n  elsif a > b\n    a\n  else\n    b\n  end\nend", "  return a.to_f\
    \ if a.is_a?(Integer) && b.is_a?(Float)\n  return b.to_f if a.is_a?(Float) &&\
    \ b.is_a?(Integer)\n  return a.to_f if a.is_a?(String) && b.is_a?(Float)\n  return\
    \ b.to_f if a.is_a?(Float) && b.is_a?(String)\n  return a.to_i if a.is_a?(String)\
    \ && b.is_a?(Integer)\n  return b.to_i if a.is_a?(Integer) && b.is_a?(String)\n\
    \  return a if a.is_a?(String) && b.is_a?(String)\n  return a if a > b\n  return\
    \ b if b > a\n  nil\nend", "  if a == b\n    return nil\n  elsif a.is_a?(String)\
    \ && b.is_a?(String)\n    return b if a.delete(',.').to_i < b.delete(',.').to_i\n\
    \    return a if a.delete(',.').to_i > b.delete(',.').to_i\n  elsif a.is_a?(String)\
    \ && b.is_a?(Float)\n    return b if a.delete(',.').to_f < b\n    return a if\
    \ a.delete(',.').to_f > b\n  elsif a.is_a?(String) && b.is_a?(Integer)\n    return\
    \ b if a.delete(',.').to_i < b\n    return a if a.delete(',.').to_i > b\n  elsif\
    \ a.is_a?(Float) && b.is_a?(String)\n    return b if a < b.delete(',.').to_f\n\
    \    return a if a > b.delete(',.').to_f\n  elsif a.is_a?(Float) && b.is_a?(Integer)\n\
    \    return b if a < b\n    return a if a > b\n  elsif a.is_a?(Integer) && b.is_a?(String)\n\
    \    return b if a < b.delete(',.').to_i\n    return a if a > b.delete(',.').to_i\n\
    \  elsif a.is_a?(Integer) && b.is_a?(Float)\n    return b if a < b\n    return\
    \ a if a > b\n  end\nend", "    c = a.class\n    d = b.class\n    if c == d \n\
    \        if a > b\n            return a\n        elsif a < b\n            return\
    \ b\n        else\n            return nil\n        end\n    elsif c == String\n\
    \        if a.to_f > b.to_f\n            return a\n        elsif a.to_f < b.to_f\n\
    \            return b\n        else\n            return nil\n        end\n   \
    \ elsif d == String\n        if a.to_f > b.to_f\n            return a\n      \
    \  elsif a.to_f < b.to_f\n            return b\n        else\n            return\
    \ nil\n        end\n    end\nend", "    if a.class == b.class\n        if a >\
    \ b\n            return a\n        elsif a < b\n            return b\n       \
    \ else\n            return nil\n        end\n    elsif a.class == String\n   \
    \     if a.tr(\",\", \".\") > b.to_f\n            return a\n        elsif a.tr(\"\
    ,\", \".\") < b.to_f\n            return b\n        else\n            return nil\n\
    \        end\n    elsif b.class == String\n        if a.to_f > b.tr(\",\", \"\
    .\")\n            return a\n        elsif a.to_f < b.tr(\",\", \".\")\n      \
    \      return b\n        else\n            return nil\n        end\n    end\n\
    end", "  a = a.to_f\n  b = b.to_f\n  if a > b\n    return a\n  elsif b > a\n \
    \   return b\n  else\n    return nil\n  end\nend\nputs compare_one(1, 2.5)\nputs\
    \ compare_one(1, \"2,3\")\nputs compare_one(\"5,1\", \"6\")\nputs compare_one(\"\
    1\", 1)", "  b.to_f > a.to_f ? b : a\nend", "  if a.is_a?(String) && b.is_a?(String)\n\
    \    return a.to_f > b.to_f ? a : b\n  elsif a.is_a?(String)\n    return a.to_f\
    \ > b ? a : b\n  elsif b.is_a?(String)\n    return a > b.to_f ? a : b\n  else\n\
    \    return a > b ? a : b\n  end\nend\nputs compare_one(1, 2.5)\nputs compare_one(1,\
    \ \"2,3\")\nputs compare_one(\"5,1\", \"6\")\nputs compare_one(\"1\", 1)", "\t\
    if a.to_f > b.to_f\n\t\ta\n\telsif a.to_f < b.to_f\n\t\tb\n\telse\n\t\tnil\n\t\
    end\nend", "    if (a.class == b.class)\n        if a > b\n            return\
    \ a\n        elsif a < b\n            return b\n        end\n    elsif (a.class\
    \ == Fixnum && b.class == Float)\n        return b\n    elsif (a.class == Float\
    \ && b.class == Fixnum)\n        return a\n    elsif (a.class == Fixnum && b.class\
    \ == String)\n        return b\n    elsif (a.class == String && b.class == Fixnum)\n\
    \        return a\n    elsif (a.class == Float && b.class == String)\n       \
    \ return b\n    elsif (a.class == String && b.class == Float)\n        return\
    \ a\n    end\n    return nil\nend\nputs compare_one(1, \"2,3\")\nputs compare_one(\"\
    5,1\", \"6\")\nputs compare_one(\"1\", 1)", "  a > b ? a : b\nend", "  if a.class\
    \ == b.class\n    if a < b\n      b\n    elsif a > b\n      a\n    elsif a ==\
    \ b\n      nil\n    end\n  elsif a.class != b.class\n    if a.class == String\n\
    \      b\n    elsif b.class == String\n      a\n    end\n  end\nend", "  a.to_f\
    \ > b.to_f ? a : b\nend", "  return a if a.is_a?(Integer) && b.is_a?(Float)\n\
    \  return b if b.is_a?(Integer) && a.is_a?(Float)\n  return a if a.is_a?(Integer)\
    \ && b.is_a?(String)\n  return b if b.is_a?(Integer) && a.is_a?(String)\n  return\
    \ a if a.is_a?(Float) && b.is_a?(String)\n  return b if b.is_a?(Float) && a.is_a?(String)\n\
    \  return nil if a == b\nend", "  if !a.is_a?(String) && !b.is_a?(String)\n  \
    \  if a == b\n      nil\n    elsif a > b\n      a\n    else\n      b\n    end\n\
    \  elsif a.is_a?(String) && b.is_a?(String)\n    if a == b\n      nil\n    elsif\
    \ a.to_f > b.to_f\n      a\n    else\n      b\n    end\n  elsif a.is_a?(String)\
    \ && !b.is_a?(String)\n    if a.to_f == b\n      nil\n    elsif a.to_f > b\n \
    \     a\n    else\n      b\n    end\n  elsif !a.is_a?(String) && b.is_a?(String)\n\
    \    if a == b.to_f\n      nil\n    elsif a > b.to_f\n      a\n    else\n    \
    \  b\n    end\n  end\nend", "  a_type = a.class\n  b_type = b.class\n  if a_type\
    \ == String\n    a = a.gsub(/[,.]/, '.' => '.', ',' => '.').to_f\n  end\n  if\
    \ b_type == String\n    b = b.gsub(/[,.]/, '.' => '.', ',' => '.').to_f\n  end\n\
    \  if a > b\n    a\n  elsif b > a\n    b\n  else\n    nil\n  end\nend", "  if\
    \ (a.is_a?(Integer) && b.is_a?(Integer))\n    a > b ? a : b\n  elsif (a.is_a?(Integer)\
    \ && b.is_a?(Float))\n    b\n  elsif (a.is_a?(Integer) && b.is_a?(String))\n \
    \   case b\n    when (b.include?(\".\"))\n      b.to_f > a ? b : a\n    when (b.include?(\"\
    ,\"))\n      b.to_f > a ? b : a\n    end\n  elsif (a.is_a?(Float) && b.is_a?(Integer))\n\
    \    a\n  elsif (a.is_a?(Float) && b.is_a?(Float))\n    a > b ? a : b\n  elsif\
    \ (a.is_a?(Float) && b.is_a?(String))\n    case b\n    when (b.include?(\".\"\
    ))\n      b.to_f > a ? b : a\n    when (b.include?(\",\"))\n      b.to_f > a ?\
    \ b : a\n    end\n  elsif (a.is_a?(String) && b.is_a?(Integer))\n    case a\n\
    \    when (a.include?(\".\"))\n      a.to_f > b ? a : b\n    when (a.include?(\"\
    ,\"))\n      a.to_f > b ? a : b\n    end\n  elsif (a.is_a?(String) && b.is_a?(Float))\n\
    \    case a\n    when (a.include?(\".\"))\n      a.to_f > b ? a : b\n    when\
    \ (a.include?(\",\"))\n      a.to_f > b ? a : b\n    end\n  elsif (a.is_a?(String)\
    \ && b.is_a?(String))\n    case a\n    when (a.include?(\".\"))\n      a.to_f\
    \ > b.to_f ? a : b\n    when (a.include?(\",\"))\n     ", "\tif a == b\n\t\treturn\
    \ nil\n\telsif a.class == String\n\t\treturn a.to_f > b.to_f ? a : b\n\telsif\
    \ b.class == String\n\t\treturn a.to_f > b.to_f ? a : b\n\telsif a > b\n\t\treturn\
    \ a\n\telse\n\t\treturn b\n\tend\nend", "  # if a.class == b.class\n  #   if a\
    \ > b\n  #     return a\n  #   else\n  #     return b\n  #   end\n  # end\n  if\
    \ a.class == b.class\n    return a > b ? a : b\n  end\nend", "  case [a, b].map\
    \ { |x| x.class }\n  when [Integer, Float]\n    b\n  when [Integer, String]\n\
    \    return nil if a == b.to_i\n    b.to_f > a ? b.to_f : a\n  when [Float, String]\n\
    \    return nil if a == b.to_f\n    b.to_f > a ? b.to_f : a\n  when [String, String]\n\
    \    return nil if a.to_f == b.to_f\n    b.to_f > a.to_f ? b.to_f : a.to_f\n \
    \ end\nend", "  if a.to_f == b.to_f\n    return nil\n  elsif a.to_f > b.to_f\n\
    \    return a\n  else\n    return b\n  end\nend", "  if a.is_a?(Integer)\n   \
    \ return a if a > b.to_i\n    return b if b > a\n  elsif a.is_a?(Float)\n    return\
    \ a if a > b.to_f\n    return b if b > a\n  elsif a.is_a?(String)\n    return\
    \ a if a.to_f > b.to_f\n    return b if b.to_f > a.to_f\n  end\n  nil\nend", " \
    \   if a.class != b.class\n        return nil\n    elsif a.class == Integer\n\
    \        if a > b\n            return a\n        elsif a < b\n            return\
    \ b\n        else\n            return nil\n        end\n    elsif a.class == Float\n\
    \        if a > b\n            return a\n        elsif a < b\n            return\
    \ b\n        else\n            return nil\n        end\n    elsif a.class == String\n\
    \        if a.gsub(\",\", \".\").to_f > b.gsub(\",\", \".\").to_f\n          \
    \  return a\n        elsif a.gsub(\",\", \".\").to_f < b.gsub(\",\", \".\").to_f\n\
    \            return b\n        else\n            return nil\n        end\n   \
    \ end\nend", "  a.class == b.class ? (a > b ? a : b) : nil\nend", "  if a.is_a?(String)\
    \ && b.is_a?(String)\n    a.to_f > b.to_f ? a : b\n  elsif a.is_a?(String)\n \
    \   a.to_f > b ? a : b\n  elsif b.is_a?(String)\n    a > b.to_f ? a : b\n  else\n\
    \    a > b ? a : b\n  end\nend", "  a = a.to_s.tr(',', '.').to_f\n  b = b.to_s.tr(',',\
    \ '.').to_f\n  if a == b\n    nil\n  elsif a > b\n    a\n  else\n    b\n  end\n\
    end", "  if a.is_a?(String) && b.is_a?(String)\n    return a.to_f > b.to_f ? a\
    \ : b\n  elsif a.is_a?(String) && b.is_a?(Integer)\n    return a.to_f > b ? a\
    \ : b\n  elsif a.is_a?(Integer) && b.is_a?(String)\n    return a > b.to_f ? a\
    \ : b\n  else\n    return a > b ? a : b\n  end\nend", "\tif a.is_a?(Integer) &&\
    \ b.is_a?(Integer)\n\t\tif a > b\n\t\t\treturn a\n\t\telsif b > a\n\t\t\treturn\
    \ b\n\t\telse\n\t\t\treturn nil\n\t\tend\n\telsif a.is_a?(Float) && b.is_a?(Float)\n\
    \t\tif a > b\n\t\t\treturn a\n\t\telsif b > a\n\t\t\treturn b\n\t\telse\n\t\t\t\
    return nil\n\t\tend\n\telsif a.is_a?(String) && b.is_a?(String)\n\t\tif a.to_f\
    \ > b.to_f\n\t\t\treturn a\n\t\telsif b.to_f > a.to_f\n\t\t\treturn b\n\t\telse\n\
    \t\t\treturn nil\n\t\tend\n\telsif a.is_a?(String) && b.is_a?(Integer)\n\t\tif\
    \ a.to_f > b\n\t\t\treturn a\n\t\telsif b > a.to_f\n\t\t\treturn b\n\t\telse\n\
    \t\t\treturn nil\n\t\tend\n\telsif a.is_a?(Integer) && b.is_a?(String)\n\t\tif\
    \ a > b.to_f\n\t\t\treturn a\n\t\telsif b.to_f > a\n\t\t\treturn b\n\t\telse\n\
    \t\t\treturn nil\n\t\tend\n\telsif a.is_a?(String) && b.is_a?(Float)\n\t\tif a.to_f\
    \ > b\n\t\t\treturn a\n\t\telsif b > a.to_f\n\t\t\treturn b\n\t\telse\n\t\t\t\
    return nil\n\t\tend\n\telsif a.is_a?(Float) && b.is_a?(String)\n\t\tif a > b.to_f\n\
    \t\t\treturn a\n\t\telsif b.to_f > a\n\t\t\treturn b\n\t\telse\n\t\t\treturn nil\n\
    \t\tend\n\tend\nend", "\tif a.is_a?(String) && b.is_a?(String)\n\t\tif a.to_f\
    \ > b.to_f\n\t\t\ta\n\t\telsif a.to_f < b.to_f\n\t\t\tb\n\t\telse\n\t\t\treturn\
    \ nil\n\t\tend\n\telsif a.is_a?(String) && b.is_a?(Integer)\n\t\tif a.to_f > b\n\
    \t\t\ta\n\t\telsif a.to_f < b\n\t\t\tb\n\t\telse\n\t\t\treturn nil\n\t\tend\n\t\
    elsif a.is_a?(Integer) && b.is_a?(String)\n\t\tif a > b.to_f\n\t\t\ta\n\t\telsif\
    \ a < b.to_f\n\t\t\tb\n\t\telse\n\t\t\treturn nil\n\t\tend\n\telsif a.is_a?(Integer)\
    \ && b.is_a?(Float)\n\t\tif a > b\n\t\t\ta\n\t\telsif a < b\n\t\t\tb\n\t\telse\n\
    \t\t\treturn nil\n\t\tend\n\telsif a.is_a?(Float) && b.is_a?(Integer)\n\t\tif\
    \ a > b\n\t\t\ta\n\t\telsif a < b\n\t\t\tb\n\t\telse\n\t\t\treturn nil\n\t\tend\n\
    \telsif a.is_a?(Float) && b.is_a?(Float)\n\t\tif a > b\n\t\t\ta\n\t\telsif a <\
    \ b\n\t\t\tb\n\t\telse\n\t\t\treturn nil\n\t\tend\n\telse\n\t\treturn nil\n\t\
    end\nend", "  x = a.to_f\n  y = b.to_f\n  if a == b\n    return nil\n  elsif x\
    \ > y\n    return a\n  else\n    return b\n  end\nend", "  a_type = [String, Float,\
    \ Integer].find { |klass| a.is_a?(klass) }\n  b_type = [String, Float, Integer].find\
    \ { |klass| b.is_a?(klass) }\n  return nil if a_type == b_type\n  a_type > b_type\
    \ ? a : b\nend", "  a = a.to_f\n  b = b.to_f\n  if a > b\n    return a\n  elsif\
    \ b > a\n    return b\n  else\n    return nil\n  end\nend", "  a = Float(a) rescue\
    \ a\n  b = Float(b) rescue b\n  if a.is_a? String\n    a = a.gsub(/[^\\d\\.]/,\
    \ '')\n  end\n  if b.is_a? String\n    b = b.gsub(/[^\\d\\.]/, '')\n  end\n  a\
    \ > b ? a : b\nend\np compare_one(1, 2.5)\np compare_one(1, \"2,3\")\np compare_one(\"\
    5,1\", \"6\")\np compare_one(\"1\", 1)", "  if a.class == b.class\n    a > b ?\
    \ a : b\n  else\n    a.class == String ? a : b\n  end\nend\np compare_one(1, 2.5)\n\
    p compare_one(1, \"2,3\")\np compare_one(\"5,1\", \"6\")\np compare_one(\"1\"\
    , 1)", "  if a.to_f > b.to_f\n    return a\n  elsif a.to_f < b.to_f\n    return\
    \ b\n  else\n    return nil\n  end\nend", "  return a.to_f if a.is_a? String and\
    \ a.include? \",\"\n  return b.to_f if b.is_a? String and b.include? \",\"\n \
    \ if a > b then return a.to_f\n  elsif b > a then return b.to_f\n  else return\
    \ nil\n  end\nend", "  if a.class == b.class\n    [a, b].max\n  end\nend", " \
    \ return None if a == b\n  a, b = a.to_f, b.to_f\n  return a > b ? a : b\nend",
  "  (a > b ? a : b) rescue nil\nend", "  if a.class == b.class\n    if a.class ==\
    \ Integer\n      if a > b\n        return a\n      elsif a < b\n        return\
    \ b\n      else\n        return nil\n      end\n    elsif a.class == Float\n \
    \     if a > b\n        return a\n      elsif a < b\n        return b\n      else\n\
    \        return nil\n      end\n    elsif a.class == String\n      if a.gsub(\"\
    ,\", \".\") > b.gsub(\",\", \".\")\n        return a\n      elsif a.gsub(\",\"\
    , \".\") < b.gsub(\",\", \".\")\n        return b\n      else\n        return\
    \ nil\n      end\n    end\n  else\n    return nil\n  end\nend", "    if a == b\n\
    \        return nil\n    elsif a.class == b.class\n        return a > b ? a :\
    \ b\n    else\n        if a.class == String\n            return a.to_f > b ? a\
    \ : b\n        else\n            return a > b.to_f ? a : b\n        end\n    end\n\
    end", "  return nil if a == b\n  return a if a.class == b.class\n  if a.class\
    \ == Integer && b.class == Float\n    return b\n  elsif a.class == Integer &&\
    \ b.class == String\n    b = b.gsub(\",\", \".\").to_f\n    return b\n  elsif\
    \ a.class == Float && b.class == Integer\n    return a\n  elsif a.class == Float\
    \ && b.class == String\n    b = b.gsub(\",\", \".\").to_f\n    return b\n  elsif\
    \ a.class == String && b.class == Integer\n    a = a.gsub(\",\", \".\").to_f\n\
    \    return a\n  elsif a.class == String && b.class == Float\n    a = a.gsub(\"\
    ,\", \".\").to_f\n    return a\n  end\nend", "  if a.class == b.class\n    return\
    \ a > b ? a : b\n  else\n    return a > b.to_f ? a : b\n  end\nend\nputs compare_one(1,\
    \ \"2,3\")\nputs compare_one(\"5,1\", \"6\")\nputs compare_one(\"1\", 1)", " \
    \ if a.class == b.class\n    return a > b ? a : b\n  elsif a.class == Float ||\
    \ b.class == Float\n    a = a.class == Float ? a : a.to_f\n    b = b.class ==\
    \ Float ? b : b.to_f\n    return a > b ? a : b\n  else\n    return nil\n  end\n\
    end", "    if a.class == String || b.class == String\n        if a.gsub(\",\"\
    , \".\").to_f > b.gsub(\",\", \".\").to_f\n            return a\n        elsif\
    \ a.gsub(\",\", \".\").to_f < b.gsub(\",\", \".\").to_f\n            return b\n\
    \        else\n            return nil\n        end\n    elsif a.class == Float\
    \ || b.class == Float\n        if a > b\n            return a\n        elsif a\
    \ < b\n            return b\n        else\n            return nil\n        end\n\
    \    elsif a.class == Integer || b.class == Integer\n        if a > b\n      \
    \      return a\n        elsif a < b\n            return b\n        else\n   \
    \         return nil\n        end\n    end\nend", "    a = string_to_float(a)\n\
    \    b = string_to_float(b)\n    p a, b\n    return a if b.nil?\n    return b\
    \ if a.nil?\n    return nil if a == b\n    return a if a > b\n    return b\nend",
  "  a = a.to_f\n  b = b.to_f\n  if a == b\n    return nil\n  elsif a > b\n    return\
    \ a\n  else\n    return b\n  end\nend\np compare_one(1, 2.5) #\u279E 2.5\np compare_one(1,\
    \ \"2,3\") #\u279E \"2,3\"\np compare_one(\"5,1\", \"6\") #\u279E \"6\"\np compare_one(\"\
    1\", 1) #\u279E None", "    if a.to_s.include?(\",\") || b.to_s.include?(\",\"\
    )\n        return a if a.to_s.include?(\",\")\n        return b if b.to_s.include?(\"\
    ,\")\n    elsif a.is_a?(String) || b.is_a?(String)\n        return a if a.is_a?(String)\n\
    \        return b if b.is_a?(String)\n    else\n        return a if a > b\n  \
    \      return b if b > a\n    end\n    return nil\nend", "  if a == b\n    return\
    \ nil\n  elsif a.is_a?(String) && b.is_a?(String)\n    if a.to_f < b.to_f\n  \
    \    return b\n    else\n      return a\n    end\n  elsif a.is_a?(String) && b.is_a?(Integer)\n\
    \    if a.to_f < b\n      return b\n    else\n      return a\n    end\n  elsif\
    \ a.is_a?(Integer) && b.is_a?(String)\n    if a < b.to_f\n      return b\n   \
    \ else\n      return a\n    end\n  elsif a.is_a?(Float) && b.is_a?(String)\n \
    \   if a < b.to_f\n      return b\n    else\n      return a\n    end\n  elsif\
    \ a.is_a?(Integer) && b.is_a?(Float)\n    if a < b\n      return b\n    else\n\
    \      return a\n    end\n  elsif a.is_a?(Float) && b.is_a?(Integer)\n    if a\
    \ < b\n      return b\n    else\n      return a\n    end\n  elsif a.is_a?(Float)\
    \ && b.is_a?(Float)\n    if a < b\n      return b\n    else\n      return a\n\
    \    end\n  elsif a.is_a?(Integer) && b.is_a?(Integer)\n    if a < b\n      return\
    \ b\n    else\n      return a\n    end\n  end\nend\np compare_one(1, 2.5)\np compare_one(1,\
    \ \"2,3\")\np compare_one(\"5,1\", \"6\")\np compare_one(\"1\", 1)", "    if(a\
    \ == b)\n        return nil\n    elsif(a.is_a?(Integer) && b.is_a?(Integer))\n\
    \        return [a, b].max\n    elsif(a.is_a?(Float) && b.is_a?(Float))\n    \
    \    return [a, b].max\n    elsif(a.is_a?(String) && b.is_a?(String))\n      \
    \  if(a.include?(\",\") && b.include?(\",\"))\n            num1 = a.split(\",\"\
    ).join.to_f\n            num2 = b.split(\",\").join.to_f\n            return [num1,\
    \ num2].max\n        elsif(a.include?(\".\") && b.include?(\".\"))\n         \
    \   num1 = a.to_f\n            num2 = b.to_f\n            return [num1, num2].max\n\
    \        else\n            return [a, b].max\n        end\n    elsif(a.is_a?(String)\
    \ && b.is_a?(Integer))\n        return b\n    elsif(a.is_a?(Integer) && b.is_a?(String))\n\
    \        return b\n    elsif(a.is_a?(String) && b.is_a?(Float))\n        return\
    \ b\n    elsif(a.is_a?(Float) && b.is_a?(String))\n        return b\n    end\n\
    end\nputs compare_one(1, 2.5)\nputs compare_one(1, \"2,3\")\nputs compare_one(\"\
    5,1\", \"6\")\nputs compare_one(\"1\", 1)\nputs compare_one(\"1.0\", \"1\")\n\
    puts compare_one(\"1.0\", 1)\nputs compare_one(\"1.0\", 1.0)\nputs compare_one(\"\
    1.0\", 1.1)\nputs compare_one(\"1,0\", \"1\")\nputs compare_one(\"1,0\", 1)\n\
    puts compare_one(\"1,0\", 1.0)\nputs compare_one(\"", "  if a.is_a?(Float) &&\
    \ b.is_a?(Float)\n    return a > b ? a : b\n  elsif a.is_a?(Integer) && b.is_a?(Integer)\n\
    \    return a > b ? a : b\n  elsif a.is_a?(String) && b.is_a?(String)\n    return\
    \ a > b ? a : b\n  elsif a.is_a?(Integer) && b.is_a?(String)\n    return a > b.to_i\
    \ ? a : b\n  elsif a.is_a?(String) && b.is_a?(Integer)\n    return a.to_i > b\
    \ ? a : b\n  elsif a.is_a?(Float) && b.is_a?(String)\n    return a > b.to_f ?\
    \ a : b\n  elsif a.is_a?(String) && b.is_a?(Float)\n    return a.to_f > b ? a\
    \ : b\n  else\n    return nil\n  end\nend", "  a = a.gsub(',', '.').to_f if a.is_a?(String)\n\
    \  b = b.gsub(',', '.').to_f if b.is_a?(String)\n  return a if a > b\n  return\
    \ b if b > a\n  return nil if a == b\nend", "    a = a.is_a?(String) ? a.to_f\
    \ : a\n    b = b.is_a?(String) ? b.to_f : b\n    return a > b ? a : b\nend\np\
    \ compare_one(1, 2.5)\np compare_one(1, \"2,3\")\np compare_one(\"5,1\", \"6\"\
    )\np compare_one(\"1\", 1)", "    a = a.to_s.gsub(/[,]/, '.').to_f\n    b = b.to_s.gsub(/[,]/,\
    \ '.').to_f\n    return a > b ? a : b\nend", "  if a.is_a? String and b.is_a?\
    \ String\n    if a > b\n      return a\n    elsif b > a\n      return b\n    else\n\
    \      return nil\n    end\n  elsif a.is_a? Integer and b.is_a? Integer\n    if\
    \ a > b\n      return a\n    elsif b > a\n      return b\n    else\n      return\
    \ nil\n    end\n  elsif a.is_a? Float and b.is_a? Float\n    if a > b\n      return\
    \ a\n    elsif b > a\n      return b\n    else\n      return nil\n    end\n  elsif\
    \ a.is_a? Integer and b.is_a? Float\n    return b\n  elsif a.is_a? Float and b.is_a?\
    \ Integer\n    return a\n  elsif a.is_a? Integer and b.is_a? String\n    b.gsub!(',',\
    \ '.')\n    if a > b.to_f\n      return a\n    elsif b.to_f > a\n      return\
    \ b\n    else\n      return nil\n    end\n  elsif a.is_a? String and b.is_a? Integer\n\
    \    a.gsub!(',', '.')\n    if a.to_f > b\n      return a\n    elsif b > a.to_f\n\
    \      return b\n    else\n      return nil\n    end\n  elsif a.is_a? Float and\
    \ b.is_a? String\n    b.gsub!(',', '.')\n    if a > b.to_f\n      return a\n \
    \   elsif b.to_f > a\n      return b\n    else\n      return nil\n    end\n  elsif\
    \ a.is_a? String and b.is_a? Float\n    a.gsub!(',', '.')\n    if a.to_f > b\n\
    \      return a\n    elsif b > a.to_f\n      return b\n    else\n      return\
    \ nil\n    end\n  end\nend", "  if a.class == b.class\n    if a > b\n      return\
    \ a\n    elsif a < b\n      return b\n    else\n      return nil\n    end\n  elsif\
    \ a.class == String && b.class == Integer\n    if a.to_f > b\n      return a\n\
    \    elsif a.to_f < b\n      return b\n    else\n      return nil\n    end\n \
    \ elsif a.class == Integer && b.class == String\n    if a > b.to_f\n      return\
    \ a\n    elsif a < b.to_f\n      return b\n    else\n      return nil\n    end\n\
    \  end\nend", "    if a.class == b.class\n        if a > b\n            return\
    \ a\n        elsif a < b\n            return b\n        end\n    else\n      \
    \  return\n    end\nend", "  return nil if a == b\n  a, b = a.to_f, b.to_f\n \
    \ return a if a > b\n  b\nend", "  if a.class == b.class\n    return nil if a\
    \ == b\n    a < b ? b : a\n  else\n    a = a.to_f if a.class == String\n    b\
    \ = b.to_f if b.class == String\n    a > b ? a : b\n  end\nend", "  begin\n  \
    \  if a.is_a?(String)\n      a=a.gsub(/[,.]/,'.').to_f\n    else\n      a = a.to_f\n\
    \    end\n    if b.is_a?(String)\n      b=b.gsub(/[,.]/,'.').to_f\n    else\n\
    \      b = b.to_f\n    end\n    if a > b\n      return a\n    elsif a < b\n  \
    \    return b\n    else\n      return nil\n    end\n  rescue => exception\n  \
    \  puts exception\n  end\nend", "\tif a == b\n\t\treturn nil\n\telsif a > b\n\t\
    \treturn a\n\telse\n\t\treturn b\n\tend\nend\np compare_one(1, 2.5)\np compare_one(1,\
    \ \"2,3\")\np compare_one(\"5,1\", \"6\")\np compare_one(\"1\", 1)", "  if a ==\
    \ b\n    nil\n  elsif\n    a.is_a?(String) && b.is_a?(String) && a.to_f > b.to_f\n\
    \    a\n  elsif\n    a.is_a?(String) && b.is_a?(String) && a.to_f < b.to_f\n \
    \   b\n  elsif\n    a.is_a?(String) && b.is_a?(Integer) && a.to_f > b\n    a\n\
    \  elsif\n    a.is_a?(String) && b.is_a?(Integer) && a.to_f < b\n    b\n  elsif\n\
    \    a.is_a?(Integer) && b.is_a?(String) && a > b.to_f\n    a\n  elsif\n    a.is_a?(Integer)\
    \ && b.is_a?(String) && a < b.to_f\n    b\n  elsif\n    a.is_a?(Integer) && b.is_a?(Float)\
    \ && a > b\n    a\n  elsif\n    a.is_a?(Integer) && b.is_a?(Float) && a < b\n\
    \    b\n  elsif\n    a.is_a?(Float) && b.is_a?(Integer) && a > b\n    a\n  elsif\n\
    \    a.is_a?(Float) && b.is_a?(Integer) && a < b\n    b\n  end\nend", "  return\
    \ nil if a == b\n  case\n  when a.is_a?(String) && b.is_a?(Integer)\n    a.to_f\
    \ > b ? a : b\n  when a.is_a?(Integer) && b.is_a?(String)\n    a > b.to_f ? a\
    \ : b\n  when a.is_a?(String) && b.is_a?(Float)\n    a.to_f > b ? a : b\n  when\
    \ a.is_a?(Float) && b.is_a?(String)\n    a > b.to_f ? a : b\n  when a.is_a?(Integer)\
    \ && b.is_a?(Float)\n    a > b ? a : b\n  when a.is_a?(Float) && b.is_a?(Integer)\n\
    \    a > b ? a : b\n  when a.is_a?(String) && b.is_a?(String)\n    a.to_f > b.to_f\
    \ ? a : b\n  end\nend", "  a = a.to_s.gsub(/[,.]/, \"\")\n  b = b.to_s.gsub(/[,.]/,\
    \ \"\")\n  return nil if a == b\n  a.to_i > b.to_i ? a : b\nend", "  if a.class\
    \ == String\n    if a.to_f > b.to_f\n      return a\n    elsif a.to_f < b.to_f\n\
    \      return b\n    else\n      return nil\n    end\n  else\n    if a > b\n \
    \     return a\n    elsif a < b\n      return b\n    else\n      return nil\n\
    \    end\n  end\nend\nputs compare_one(1, 2.5)\nputs compare_one(1, \"2,3\")\n\
    puts compare_one(\"5,1\", \"6\")\nputs compare_one(\"1\", 1)", "  if a.to_f >\
    \ b.to_f\n    a\n  elsif a.to_f < b.to_f\n    b\n  else\n    nil\n  end\nend",
  "  return b if b.is_a?(String) && b.to_f > a.to_f\n  return a if a.is_a?(String)\
    \ && a.to_f > b.to_f\n  return b if b > a\n  return a if a > b\n  nil\nend", " \
    \ if a > b\n    a\n  elsif b > a\n    b\n  else\n    nil\n  end\nend", "  if a\
    \ == b\n    return nil\n  elsif a.class == b.class\n    return [a, b].max\n  elsif\
    \ a.class == String\n    if a.count(',') == 1\n      comma_a = a.split(',')\n\
    \      return [comma_a.first.to_i, b].max\n    else\n      return [a.to_i, b].max\n\
    \    end\n  elsif b.class == String\n    if b.count(',') == 1\n      comma_b =\
    \ b.split(',')\n      return [a, comma_b.first.to_i].max\n    else\n      return\
    \ [a, b.to_i].max\n    end\n  end\nend\np compare_one(1, 2.5)\np compare_one(1,\
    \ \"2,3\")\np compare_one(\"5,1\", \"6\")\np compare_one(\"1\", 1)", "  if a.class\
    \ == b.class\n    a > b ? a : b\n  else\n    nil\n  end\nend\np compare_one(1,\
    \ 2.5)\np compare_one(1, \"2,3\")\np compare_one(\"5,1\", \"6\")\np compare_one(\"\
    1\", 1)", "  return a if a.is_a?(Integer) && b.is_a?(Float)\n  return b if b.is_a?(Integer)\
    \ && a.is_a?(Float)\n  return a if a.is_a?(Integer) && b.is_a?(String)\n  return\
    \ b if b.is_a?(Integer) && a.is_a?(String)\n  return a if a.is_a?(Float) && b.is_a?(String)\n\
    \  return b if b.is_a?(Float) && a.is_a?(String)\n  return a if a.is_a?(String)\
    \ && b.is_a?(String)\n  nil\nend", "  if a.is_a?(Integer) && b.is_a?(Integer)\n\
    \    if a > b\n      return a\n    elsif a < b\n      return b\n    else\n   \
    \   return nil\n    end\n  elsif a.is_a?(Float) && b.is_a?(Float)\n    if a >\
    \ b\n      return a\n    elsif a < b\n      return b\n    else\n      return nil\n\
    \    end\n  elsif a.is_a?(String) && b.is_a?(String)\n    a = a.gsub(\",\", \"\
    .\")\n    b = b.gsub(\",\", \".\")\n    if a.to_f > b.to_f\n      return a\n \
    \   elsif a.to_f < b.to_f\n      return b\n    else\n      return nil\n    end\n\
    \  end\nend", "  if a == b\n    return nil\n  end\n  #force a to be integer\n\
    \  a = Integer(a) rescue false\n  #force b to be integer\n  b = Integer(b) rescue\
    \ false\n  #force a to be float\n  a = Float(a) rescue false\n  #force b to be\
    \ float\n  b = Float(b) rescue false\n  #force a to be string\n  a = a.to_s rescue\
    \ false\n  #force b to be string\n  b = b.to_s rescue false\n  #check if one value\
    \ is an integer, float or string\n  if a.class == Integer\n    #return b if it\
    \ is a float or string\n    return b if b.class == Float or b.class == String\n\
    \    #return a if b is an integer\n    return a\n  elsif a.class == Float\n  \
    \  #return b if it is a string\n    return b if b.class == String\n    #return\
    \ a if b is an integer or float\n    return a\n  elsif a.class == String\n   \
    \ #return a if b is an integer, float or string\n    return a\n  end\nend", " \
    \ return a if a > b\n  return b if b > a\n  puts 'None'\nend\ncompare_one(1, 2.5)\n\
    compare_one(1, '2,3')\ncompare_one('5,1', '6')\ncompare_one('1', 1)", "  a = a.to_f\
    \ if a.class == String\n  b = b.to_f if b.class == String\n  if a > b\n    return\
    \ a\n  elsif b > a\n    return b\n  else\n    return nil\n  end\nend\nputs '======compare_one======'\n\
    puts compare_one(1, 2.5)\nputs compare_one(1, \"2,3\")\nputs compare_one(\"5,1\"\
    , \"6\")\nputs compare_one(\"1\", 1)", "  if a.class == b.class\n    if a > b\n\
    \      return a\n    elsif a < b\n      return b\n    else\n      return nil\n\
    \    end\n  elsif a.class == String\n    return b\n  else\n    return a\n  end\n\
    end", "  a_int = a.is_a?(Integer)\n  b_int = b.is_a?(Integer)\n  a_float = a.is_a?(Float)\n\
    \  b_float = b.is_a?(Float)\n  a_str = a.is_a?(String)\n  b_str = b.is_a?(String)\n\
    \  if a_int && b_int && a < b\n    b\n  elsif a_int && b_int && a > b\n    a\n\
    \  elsif a_int && b_float && a < b\n    b\n  elsif a_int && b_float && a > b\n\
    \    a\n  elsif a_int && b_str && a < b.to_f\n    b\n  elsif a_int && b_str &&\
    \ a > b.to_f\n    a\n  elsif a_float && b_int && a < b\n    b\n  elsif a_float\
    \ && b_int && a > b\n    a\n  elsif a_float && b_float && a < b\n    b\n  elsif\
    \ a_float && b_float && a > b\n    a\n  elsif a_float && b_str && a < b.to_f\n\
    \    b\n  elsif a_float && b_str && a > b.to_f\n    a\n  elsif a_str && b_int\
    \ && a.to_f < b\n    b\n  elsif a_str && b_int && a.to_f > b\n    a\n  elsif a_str\
    \ && b_float && a.to_f < b\n    b\n  elsif a_str && b_float && a.to_f > b\n  \
    \  a\n  elsif a_str && b_str && a.to_f < b.to_f\n    b\n  elsif a_str && b_str\
    \ && a.to_f > b.to_f\n    a\n  else\n    nil\n  end\nend", "\tif a.is_a?(String)\
    \ && b.is_a?(String)\n\t\treturn a.to_f > b.to_f ? a : b\n\telsif a.is_a?(Integer)\
    \ && b.is_a?(Integer)\n\t\treturn a > b ? a : b\n\telsif a.is_a?(Float) && b.is_a?(Float)\n\
    \t\treturn a > b ? a : b\n\telsif a.is_a?(String) && b.is_a?(Integer)\n\t\treturn\
    \ a.to_f > b ? a : b\n\telsif a.is_a?(String) && b.is_a?(Float)\n\t\treturn a.to_f\
    \ > b ? a : b\n\telsif a.is_a?(Integer) && b.is_a?(String)\n\t\treturn a > b.to_f\
    \ ? a : b\n\telsif a.is_a?(Float) && b.is_a?(String)\n\t\treturn a > b.to_f ?\
    \ a : b\n\telse\n\t\treturn nil\n\tend\nend", "  a = a.to_s.gsub(/\\W/, \"\").to_f\n\
    \  b = b.to_s.gsub(/\\W/, \"\").to_f\n  return None if a == b\n  a > b ? a : b\n\
    end", "  if a.class == Integer && b.class == Integer\n    return a if a > b\n\
    \    return b if b > a\n    return nil if a == b\n  elsif a.class == Float &&\
    \ b.class == Float\n    return a if a > b\n    return b if b > a\n    return nil\
    \ if a == b\n  elsif a.class == String && b.class == String\n    return a if a.delete(',').to_f\
    \ > b.delete(',').to_f\n    return b if b.delete(',').to_f > a.delete(',').to_f\n\
    \    return nil if a.delete(',').to_f == b.delete(',').to_f\n  elsif a.class ==\
    \ Integer && b.class == String\n    return b if a < b.delete(',').to_f\n    return\
    \ a if a > b.delete(',').to_f\n    return nil if a == b.delete(',').to_f\n  elsif\
    \ a.class == String && b.class == Integer\n    return a if a.delete(',').to_f\
    \ > b\n    return b if b > a.delete(',').to_f\n    return nil if a.delete(',').to_f\
    \ == b\n  elsif a.class == Float && b.class == String\n    return b if a < b.delete(',').to_f\n\
    \    return a if a > b.delete(',').to_f\n    return nil if a == b.delete(',').to_f\n\
    \  elsif a.class == String && b.class == Float\n    return a if a.delete(',').to_f\
    \ > b\n    return b if b > a.delete(',').to_f\n    return nil if a.delete(',').to_f\
    \ == b\n  end\nend\np compare_one(1, 2.5)\np compare_one(1, \"2,3\")\np compare_one(\"\
    5,1\", \"6\")\np compare_one(\"1\", 1)", "    if a > b\n        return a\n   \
    \ elsif b > a\n        return b\n    else\n        return nil\n    end\nend\n\
    p compare_one(1, 2.5)\np compare_one(1, \"2,3\")\np compare_one(\"5,1\", \"6\"\
    )\np compare_one(\"1\", 1)", "  aa = [a, b].max\n  if aa == a\n    return a.is_a?(String)\
    \ ? a.to_f : a\n  else\n    return b.is_a?(String) ? b.to_f : b\n  end\nend",
  "  if a > b\n    return a\n  elsif b > a\n    return b\n  else\n    return nil\n\
    \  end\nend", "  return nil if a == b\n  a.to_f > b.to_f ? a : b\nend", "  if\
    \ a == b\n    return nil\n  elsif a.class == String\n    return a\n  elsif b.class\
    \ == String\n    return b\n  elsif a.class == Integer\n    return a\n  elsif b.class\
    \ == Integer\n    return b\n  elsif a.class == Float\n    return a\n  elsif b.class\
    \ == Float\n    return b\n  end\nend", "    a = a.to_f\n    b = b.to_f\n    if\
    \ a == b\n        return nil\n    elsif a > b\n        return a\n    else\n  \
    \      return b\n    end\nend", "\tif a.to_i == b.to_i\n\t\treturn nil\n\telsif\
    \ a.to_i > b.to_i\n\t\treturn a\n\telse\n\t\treturn b\n\tend\nend\np compare_one(1,\
    \ 2.5) # \u279E 2.5\np compare_one(1, \"2,3\") # \u279E \"2,3\"\np compare_one(\"\
    5,1\", \"6\") # \u279E \"6\"\np compare_one(\"1\", 1) # \u279E None\np compare_one(1,\
    \ 2) # \u279E None", "  return a if a.is_a?(Integer) && b.is_a?(Float)\n  return\
    \ b if b.is_a?(Integer) && a.is_a?(Float)\n  return a if a.is_a?(String) && b.is_a?(Integer)\n\
    \  return b if b.is_a?(String) && a.is_a?(Integer)\n  return a if a.is_a?(String)\
    \ && b.is_a?(Float)\n  return b if b.is_a?(String) && a.is_a?(Float)\n  return\
    \ a if a.is_a?(String) && b.is_a?(String) && a > b\n  return b if b.is_a?(String)\
    \ && a.is_a?(String) && b > a\n  return nil if a == b\nend\np compare_one(1, 2.5)\n\
    p compare_one(1, \"2,3\")\np compare_one(\"5,1\", \"6\")\np compare_one(\"1\"\
    , 1)", "\tif a == b\n\t\treturn nil\n\telsif a.is_a?(String) && b.is_a?(String)\n\
    \t\ta > b ? a : b\n\telsif a.is_a?(String) && b.is_a?(Integer)\n\t\ta > b.to_s\
    \ ? a : b\n\telsif a.is_a?(Integer) && b.is_a?(String)\n\t\ta.to_s > b ? a : b\n\
    \telsif a.is_a?(Integer) && b.is_a?(Float)\n\t\ta > b ? a : b\n\telsif a.is_a?(Float)\
    \ && b.is_a?(Integer)\n\t\ta > b ? a : b\n\telsif a.is_a?(Float) && b.is_a?(Float)\n\
    \t\ta > b ? a : b\n\tend\nend\np compare_one(1, 2.5)\np compare_one(1, \"2,3\"\
    )\np compare_one(\"5,1\", \"6\")\np compare_one(\"1\", 1)", "  if a.is_a?(Integer)\n\
    \    if b.is_a?(Integer)\n      if a > b\n        return a\n      elsif b > a\n\
    \        return b\n      else\n        return nil\n      end\n    elsif b.is_a?(Float)\n\
    \      if a > b\n        return a\n      elsif b > a\n        return b\n     \
    \ else\n        return nil\n      end\n    elsif b.is_a?(String)\n      b = b.to_f\n\
    \      if a > b\n        return a\n      elsif b > a\n        return b\n     \
    \ else\n        return nil\n      end\n    end\n  elsif a.is_a?(Float)\n    if\
    \ b.is_a?(Integer)\n      if a > b\n        return a\n      elsif b > a\n    \
    \    return b\n      else\n        return nil\n      end\n    elsif b.is_a?(Float)\n\
    \      if a > b\n        return a\n      elsif b > a\n        return b\n     \
    \ else\n        return nil\n      end\n    elsif b.is_a?(String)\n      b = b.to_f\n\
    \      if a > b\n        return a\n      elsif b > a\n        return b\n     \
    \ else\n        return nil\n      end\n    end\n  elsif a.is_a?(String)\n    a\
    \ = a.to_f\n    if b.is_a?(Integer)\n      if a > b\n        return a\n      elsif\
    \ b > a\n        return b\n      else\n        return nil\n      end\n    elsif\
    \ b.is_a?(Float)\n      if a > b\n        return a\n      elsif b > a\n      \
    \  return b\n      else\n        return nil\n      end\n    elsif b.is_a?(String)\n\
    \      b = b.to_f\n      if a > b\n        return a\n      elsif b > a\n     \
    \   return b\n      else\n        return nil\n      end\n    end\n  end\nend",
  "  type_a = a.class\n  type_b = b.class\n  return type_a == type_b ? nil : type_a\
    \ == String ? a : b\nend", "    if a.to_f > b.to_f\n        return a\n    elsif\
    \ a.to_f < b.to_f\n        return b\n    else\n        return nil\n    end\nend",
  "    if a.is_a?(Integer) && b.is_a?(Integer)\n        return nil if a == b\n   \
    \     return a > b ? a : b\n    elsif a.is_a?(Float) && b.is_a?(Float)\n     \
    \   return nil if a == b\n        return a > b ? a : b\n    elsif a.is_a?(String)\
    \ && b.is_a?(String)\n        if !a.include?(\".\") && a.include?(\",\")\n   \
    \         a = a.gsub(\",\", \".\")\n        end\n        if !b.include?(\".\"\
    ) && b.include?(\",\")\n            b = b.gsub(\",\", \".\")\n        end\n  \
    \      a = a.to_f\n        b = b.to_f\n        return nil if a == b\n        return\
    \ a > b ? a : b\n    else\n        return nil\n    end\nend", "    if a.to_s.include?(\"\
    ,\") || b.to_s.include?(\",\")\n        return a.to_f > b.to_f ? a : b\n    else\n\
    \        return a > b ? a : b\n    end\nend\np compare_one(1, \"1,0\")\np compare_one(10,\
    \ 1)\np compare_one(\"2,2\", \"2,1\")", "  return 'Wrong data type' unless [Integer,\
    \ Float, String].include?(a.class) && [Integer, Float, String].include?(b.class)\n\
    \  return a if a.to_f == b.to_f\n  a.to_f > b.to_f ? a : b\nend", "  if a == b\n\
    \    nil\n  elsif a.class == b.class\n    a > b ? a : b\n  elsif a.class == String\n\
    \    a = a.gsub(/[^0-9.]/, '').to_f\n    b = b.gsub(/[^0-9.]/, '').to_f\n    a\
    \ > b ? a : b\n  elsif b.class == String\n    a = a.to_s\n    b = b.gsub(/[^0-9.]/,\
    \ '').to_f\n    a > b ? a : b\n  else\n    a > b ? a : b\n  end\nend\np compare_one(1,\
    \ 2.5) # \u279E 2.5\np compare_one(1, \"2,3\") # \u279E \"2,3\"\np compare_one(\"\
    5,1\", \"6\") # \u279E \"6\"\np compare_one(\"1\", 1) # \u279E None", "  if a.class\
    \ == b.class\n    if a == b\n      return nil\n    elsif a > b\n      return a\n\
    \    else\n      return b\n    end\n  elsif a.class == String\n    a.gsub!(',',\
    \ '.')\n    a = a.to_f\n    if a == b\n      return nil\n    elsif a > b\n   \
    \   return a\n    else\n      return b\n    end\n  elsif b.class == String\n \
    \   b.gsub!(',', '.')\n    b = b.to_f\n    if a == b\n      return nil\n    elsif\
    \ a > b\n      return a\n    else\n      return b\n    end\n  end\nend\np compare_one(1,\
    \ 2.5) == 2.5\np compare_one(1, \"2,3\") == \"2,3\"\np compare_one(\"5,1\", \"\
    6\") == \"6\"\np compare_one(\"1\", 1) == nil\np compare_one(1,1) == nil", " \
    \ max_num = [a, b].max_by(&:to_f)\n  if max_num == a.to_f || max_num == b.to_f\n\
    \    max_num\n  else\n    nil\n  end\nend", "  return b if a.is_a?(String) &&\
    \ b.is_a?(Float)\n  return a if a.is_a?(Float) && b.is_a?(String)\n  return b\
    \ if a.is_a?(String) && b.is_a?(Integer)\n  return a if a.is_a?(Integer) && b.is_a?(String)\n\
    \  return b if a.is_a?(Float) && b.is_a?(Integer)\n  return a if a.is_a?(Integer)\
    \ && b.is_a?(Float)\n  return nil if a == b\nend", "  a.class == b.class ? a >=\
    \ b ? a : b : nil\nend", "    if a == b\n        return nil\n    elsif a.is_a?(String)\
    \ && b.is_a?(String)\n        a_count = a.count(\",\")\n        b_count = b.count(\"\
    ,\")\n        if a_count == 0 && b_count == 0\n            return a.to_i > b.to_i\
    \ ? a : b\n        elsif a_count == 1 && b_count == 1\n            return a.to_f\
    \ > b.to_f ? a : b\n        else\n            return nil\n        end\n    elsif\
    \ a.is_a?(Integer) && b.is_a?(Integer)\n        return a > b ? a : b\n    elsif\
    \ a.is_a?(Float) && b.is_a?(Float)\n        return a > b ? a : b\n    elsif a.is_a?(String)\
    \ && b.is_a?(Integer)\n        if a.count(\",\") == 0\n            return a.to_i\
    \ > b ? a : b\n        else\n            return nil\n        end\n    elsif a.is_a?(String)\
    \ && b.is_a?(Float)\n        if a.count(\",\") == 1\n            return a.to_f\
    \ > b ? a : b\n        else\n            return nil\n        end\n    elsif a.is_a?(Integer)\
    \ && b.is_a?(String)\n        if b.count(\",\") == 0\n            return a > b.to_i\
    \ ? a : b\n        else\n            return nil\n        end\n    elsif a.is_a?(Float)\
    \ && b.is_a?(String)\n        if b.count(\",\") == 1\n            return a > b.to_f\
    \ ? a : b\n        else\n            return nil\n        end\n    end\nend", " \
    \   num1, num2 = a.to_f, b.to_f\n    return num1 if num1 > num2\n    return num2\
    \ if num2 > num1\n    return nil\nend", "  if a.class == b.class\n    a > b ?\
    \ a : b\n  else\n    a = a.to_f\n    b = b.to_f\n    a > b ? a : b\n  end\nend",
  "    if a.class == b.class\n        a > b ? a : b\n    else\n        nil\n    end\n\
    end", "  if a.class == b.class && a > b\n    a\n  elsif a.class == b.class &&\
    \ a < b\n    b\n  elsif a == b\n    nil\n  elsif a.class == String && b.class\
    \ == Float\n    b\n  elsif a.class == Float && b.class == String\n    a\n  end\n\
    end\nputs \"-------Compare one-------\"\nputs compare_one(1, 2.5)\nputs compare_one(1,\
    \ \"2,3\")\nputs compare_one(\"5,1\", \"6\")\nputs compare_one(\"1\", 1)\nputs\
    \ compare_one(10, \"6\")\nputs compare_one(\"1\", 1.1)", "  if a.is_a?(String)\
    \ && b.is_a?(String)\n    a.to_f > b.to_f ? a : b\n  elsif a.is_a?(Integer) &&\
    \ b.is_a?(Integer)\n    a > b ? a : b\n  elsif a.is_a?(Float) && b.is_a?(Float)\n\
    \    a > b ? a : b\n  else\n    nil\n  end\nend", "    if a.class == b.class\n\
    \        if a > b\n            return a\n        elsif a < b\n            return\
    \ b\n        else\n            return nil\n        end\n    elsif a.class == Fixnum\
    \ || a.class == Float\n        return b\n    elsif b.class == Fixnum || b.class\
    \ == Float\n        return a\n    end\nend", "  if a.to_f == b.to_f\n    return\
    \ nil\n  elsif a.to_f < b.to_f\n    return b\n  else\n    return a\n  end\nend",
  "  a_i = a.to_i\n  b_i = b.to_i\n  a_f = a.to_f\n  b_f = b.to_f\n  if a_i == a_f\
    \ && b_i == b_f\n    a_i > b_i ? a_i : b_i\n  elsif a_i == a_f\n    a_f > b_i\
    \ ? a_f : b_i\n  elsif b_i == b_f\n    a_i > b_f ? a_i : b_f\n  else\n    a_f\
    \ > b_f ? a_f : b_f\n  end\nend", "  return \"int\" if a.is_a?(Integer) && b.is_a?(Integer)\n\
    \  return \"float\" if a.is_a?(Float) && b.is_a?(Float)\n  return \"string\" if\
    \ a.is_a?(String) && b.is_a?(String)\n  return \"string\" if a.is_a?(Integer)\
    \ && b.is_a?(String)\n  return \"string\" if a.is_a?(Float) && b.is_a?(String)\n\
    \  return \"string\" if a.is_a?(String) && b.is_a?(Integer)\n  return \"string\"\
    \ if a.is_a?(String) && b.is_a?(Float)\n  return \"float\" if a.is_a?(Integer)\
    \ && b.is_a?(Float)\n  return \"float\" if a.is_a?(Float) && b.is_a?(Integer)\n\
    \  nil\nend\np compare_one(1, 2.5)\np compare_one(1, \"2,3\")\np compare_one(\"\
    5,1\", \"6\")\np compare_one(\"1\", 1)", "  if a.is_a?(String) && b.is_a?(String)\n\
    \    if a.gsub(',', '.').to_f == b.gsub(',', '.').to_f\n      return nil\n   \
    \ elsif a.gsub(',', '.').to_f > b.gsub(',', '.').to_f\n      return a\n    else\n\
    \      return b\n    end\n  elsif a.is_a?(String) && b.is_a?(Float)\n    if a.gsub(',',\
    \ '.').to_f == b\n      return nil\n    elsif a.gsub(',', '.').to_f > b\n    \
    \  return a\n    else\n      return b\n    end\n  elsif a.is_a?(String) && b.is_a?(Integer)\n\
    \    if a.gsub(',', '.').to_f == b\n      return nil\n    elsif a.gsub(',', '.').to_f\
    \ > b\n      return a\n    else\n      return b\n    end\n  elsif a.is_a?(Float)\
    \ && b.is_a?(String)\n    if a == b.gsub(',', '.').to_f\n      return nil\n  \
    \  elsif a > b.gsub(',', '.').to_f\n      return a\n    else\n      return b\n\
    \    end\n  elsif a.is_a?(Float) && b.is_a?(Integer)\n    if a == b\n      return\
    \ nil\n    elsif a > b\n      return a\n    else\n      return b\n    end\n  elsif\
    \ a.is_a?(Integer) && b.is_a?(String)\n    if a == b.gsub(',', '.').to_f\n   \
    \   return nil\n    elsif a > b.gsub(',', '.').to_f\n      return a\n    else\n\
    \      return b\n    end\n  elsif a.is_a?(Integer) && b.is_a?(Float)\n    if a\
    \ == b\n      return nil", "    a=a.to_f\n    b=b.to_f\n    if a>b\n      return\
    \ a\n    elsif a<b\n      return b\n    else\n      return nil\n    end\nend",
  "  a = a.to_f\n  b = b.to_f\n  if a > b\n    a\n  elsif a < b\n    b\n  else\n \
    \   nil\n  end\nend\nputs compare_one(1, \"1\")\nputs compare_one(1, \"2,3\")\n\
    puts compare_one(\"5,1\", \"6\")\nputs compare_one(\"1\", 1)", "    if a.class\
    \ == b.class\n        a > b ? a : b\n    else\n        nil\n    end\nend", " \
    \ if a.class == b.class\n    if a > b\n      return a\n    elsif a < b\n     \
    \ return b\n    else\n      return nil\n    end\n  else\n    a = a.to_f\n    b\
    \ = b.to_f\n    if a > b\n      return a\n    elsif a < b\n      return b\n  \
    \  else\n      return nil\n    end\n  end\nend", "  if (a.to_f == b.to_f)\n  \
    \  nil\n  elsif (a.to_f > b.to_f)\n    a\n  else\n    b\n  end\nend", "\tif a\
    \ == b\n\t\treturn nil\n\telsif a.is_a?(String) && b.is_a?(String)\n\t\treturn\
    \ a > b ? a : b\n\telsif a.is_a?(Float) || b.is_a?(Float)\n\t\treturn a > b ?\
    \ a : b\n\telse\n\t\treturn a > b ? a : b\n\tend\nend\nputs compare_one(1, 2.5)\n\
    puts compare_one(1, \"2,3\")\nputs compare_one(\"5,1\", \"6\")\nputs compare_one(\"\
    1\", 1)", "    if (a.is_a?(Integer) && b.is_a?(Integer))\n        a > b ? a :\
    \ b\n    elsif (a.is_a?(Integer) && b.is_a?(Float))\n        b\n    elsif (a.is_a?(Integer)\
    \ && b.is_a?(String))\n        b\n    elsif (a.is_a?(Float) && b.is_a?(Integer))\n\
    \        a\n    elsif (a.is_a?(Float) && b.is_a?(Float))\n        a > b ? a :\
    \ b\n    elsif (a.is_a?(Float) && b.is_a?(String))\n        b\n    elsif (a.is_a?(String)\
    \ && b.is_a?(Integer))\n        a\n    elsif (a.is_a?(String) && b.is_a?(Float))\n\
    \        a\n    elsif (a.is_a?(String) && b.is_a?(String))\n        a > b ? a\
    \ : b\n    end\nend\np compare_one(1, 2.5)\np compare_one(1, \"2,3\")\np compare_one(\"\
    5,1\", \"6\")\np compare_one(\"1\", 1)", "  if a.is_a?(String) && b.is_a?(String)\n\
    \    a.split(',').first.to_i > b.split(',').first.to_i ? a : b\n  elsif a.is_a?(String)\
    \ && b.is_a?(Integer)\n    a.split(',').first.to_i > b ? a : b\n  elsif a.is_a?(Integer)\
    \ && b.is_a?(String)\n    a > b.split(',').first.to_i ? a : b\n  elsif a.is_a?(Integer)\
    \ && b.is_a?(Float)\n    a > b ? a : b\n  elsif a.is_a?(Float) && b.is_a?(Integer)\n\
    \    a > b ? a : b\n  elsif a.is_a?(Float) && b.is_a?(Float)\n    a > b ? a :\
    \ b\n  else\n    nil\n  end\nend", "  return nil if a == b\n  return a if a.is_a?(String)\
    \ && b.is_a?(String)\n  return a if a.is_a?(String) && b.is_a?(Integer)\n  return\
    \ a if a.is_a?(String) && b.is_a?(Float)\n  return a if a.is_a?(Integer) && b.is_a?(Float)\n\
    \  return b if b.is_a?(String) && a.is_a?(Integer)\n  return b if b.is_a?(String)\
    \ && a.is_a?(Float)\n  return b if b.is_a?(Integer) && a.is_a?(Float)\n  return\
    \ a if a > b\n  return b if b > a\nend\np compare_one(1, 2.5)\np compare_one(1,\
    \ \"2,3\")\np compare_one(\"5,1\", \"6\")\np compare_one(\"1\", 1)\np compare_one(1,\
    \ \"1\")", "  if a == b\n    return nil\n  elsif a.is_a?(Float) || b.is_a?(Float)\n\
    \    return [a, b].max\n  elsif a.is_a?(Integer) || b.is_a?(Integer)\n    return\
    \ [a, b].max\n  elsif a.is_a?(String) || b.is_a?(String)\n    return [a, b].max\n\
    \  end\nend", "  if a.class == b.class\n    if a == b\n      return nil\n    elsif\
    \ a > b\n      return a\n    else\n      return b\n    end\n  elsif a.class ==\
    \ String\n    if a.to_f == b\n      return nil\n    elsif a.to_f > b\n      return\
    \ a\n    else\n      return b\n    end\n  elsif b.class == String\n    if b.to_f\
    \ == a\n      return nil\n    elsif b.to_f > a\n      return b\n    else\n   \
    \   return a\n    end\n  end\nend", "  if a.class == String && b.class == String\n\
    \    return a.to_f > b.to_f ? a : b\n  elsif a.class == String\n    return a.to_f\
    \ > b ? a : b\n  elsif b.class == String\n    return a > b.to_f ? a : b\n  elsif\
    \ a > b\n    return a\n  elsif b > a\n    return b\n  end\n  return nil\nend",
  "    if a.class == b.class\n        if a > b\n            return a\n        elsif\
    \ a < b\n            return b\n        else\n            return nil\n        end\n\
    \    else\n        return \"#{a} is not the same type as #{b}\"\n    end\nend",
  "  max = [a, b].max\n  max.is_a?(Integer) ? max.to_i : max.to_f\nend", "    if (a.class\
    \ == b.class) && (a != b)\n        return a > b ? a : b\n    elsif (a.class ==\
    \ b.class) && (a == b)\n        return nil\n    else\n        return a.class >\
    \ b.class ? a : b\n    end\nend", "  a = a.to_f\n  b = b.to_f\n  if a == b\n \
    \   return nil\n  elsif a > b\n    return a\n  else\n    return b\n  end\nend\n\
    puts compare_one(1, 2.5)\nputs compare_one(1, \"2,3\")\nputs compare_one(\"5,1\"\
    , \"6\")\nputs compare_one(\"1\", 1)", "  if a == b\n    return nil\n  elsif a.is_a?(Integer)\
    \ && b.is_a?(Integer)\n    if a > b\n      return a\n    else\n      return b\n\
    \    end\n  elsif a.is_a?(Float) && b.is_a?(Float)\n    if a > b\n      return\
    \ a\n    else\n      return b\n    end\n  elsif a.is_a?(String) && b.is_a?(String)\n\
    \    if a.to_f > b.to_f\n      return a\n    else\n      return b\n    end\n \
    \ elsif a.is_a?(String) && b.is_a?(Integer)\n    if a.to_f > b\n      return a\n\
    \    else\n      return b\n    end\n  elsif a.is_a?(Integer) && b.is_a?(String)\n\
    \    if a > b.to_f\n      return a\n    else\n      return b\n    end\n  end\n\
    end", "    if a.class == b.class\n        return a if a > b\n        return b\
    \ if b > a\n        return nil\n    elsif (a.class == String && b.class == Integer)\
    \ || (a.class == Integer && b.class == String)\n        return a if a.to_i > b\n\
    \        return b if b.to_i > a\n        return nil\n    elsif (a.class == String\
    \ && b.class == Float) || (a.class == Float && b.class == String)\n        return\
    \ a if a.to_f > b\n        return b if b.to_f > a\n        return nil\n    elsif\
    \ (a.class == Float && b.class == Integer) || (a.class == Integer && b.class ==\
    \ Float)\n        return a if a.to_f > b\n        return b if b.to_f > a\n   \
    \     return nil\n    end\nend\np compare_one(1, 2.5)\np compare_one(1, \"2,3\"\
    )\np compare_one(\"5,1\", \"6\")\np compare_one(\"1\", 1)", "  if a == b\n   \
    \ p \"None\"\n  elsif a.is_a?(String) && b.is_a?(String)\n    p a.length > b.length\
    \ ? a : b\n  elsif a.is_a?(Integer) && b.is_a?(Integer)\n    p a > b ? a : b\n\
    \  elsif a.is_a?(Float) && b.is_a?(Float)\n    p a > b ? a : b\n  elsif a.is_a?(String)\
    \ && b.is_a?(Integer)\n    p a.length > b ? a : b\n  elsif a.is_a?(String) &&\
    \ b.is_a?(Float)\n    p a.length > b ? a : b\n  elsif a.is_a?(Integer) && b.is_a?(String)\n\
    \    p a > b.length ? a : b\n  elsif a.is_a?(Integer) && b.is_a?(Float)\n    p\
    \ a > b ? a : b\n  elsif a.is_a?(Float) && b.is_a?(String)\n    p a > b.length\
    \ ? a : b\n  elsif a.is_a?(Float) && b.is_a?(Integer)\n    p a > b ? a : b\n \
    \ end\nend", "  a = a.to_f unless a.is_a? String\n  b = b.to_f unless b.is_a?\
    \ String\n  if a > b\n    return a\n  elsif b > a\n    return b\n  else\n    return\
    \ nil\n  end\nend\np compare_one(1, 2.5) #\u279E 2.5\np compare_one(1, \"2,3\"\
    ) #\u279E \"2,3\"\np compare_one(\"5,1\", \"6\") #\u279E \"6\"\np compare_one(\"\
    1\", 1) #\u279E None\np compare_one(1, 1) #\u279E None\np compare_one(\"-2\",\
    \ \"-2\") #\u279E None\np compare_one(\"-2\", \"2\") #\u279E 2\np compare_one(\"\
    a\", \"b\") #\u279E nil\np compare_one(\"a\", nil) #\u279E nil\np compare_one(1,\
    \ \"b\") #\u279E 1\np compare_one(\"a\", 0) #\u279E 0\np compare_one(\"1\", \"\
    1.0\") #\u279E 1.0", "  if a.is_a? Integer\n    a > b ? a : b\n  elsif a.is_a?\
    \ Float\n    a > b ? a : b\n  elsif a.is_a? String\n    if a.include? \",\"\n\
    \      a.to_f > b.to_f ? a : b\n    else\n      a.to_f > b.to_f ? a : b\n    end\n\
    \  end\nend", "  if a.class == b.class\n    if a > b\n      return a\n    elsif\
    \ a < b\n      return b\n    else\n      return nil\n    end\n  else\n    if a.class\
    \ == String\n      return a\n    else\n      return b\n    end\n  end\nend", " \
    \ a = a.to_f\n  b = b.to_f\n  if a.to_f > b.to_f\n    a\n  elsif a.to_f < b.to_f\n\
    \    b\n  else\n    return nil\n  end\nend", "  if a == b\n    return nil\n  elsif\
    \ a.class == b.class\n    if a > b\n      return a\n    else\n      return b\n\
    \    end\n  elsif a.class == String && b.class == Integer\n    a = a.gsub(/[,.]/,\
    \ \"\")\n    b = b.to_s\n    if a.length > b.length\n      return a\n    else\n\
    \      return b\n    end\n  elsif a.class == Integer && b.class == String\n  \
    \  b = b.gsub(/[,.]/, \"\")\n    a = a.to_s\n    if a.length > b.length\n    \
    \  return a\n    else\n      return b\n    end\n  elsif a.class == String && b.class\
    \ == Float\n    a = a.gsub(/[,.]/, \"\")\n    a = a.to_f\n    if a > b\n     \
    \ return a\n    else\n      return b\n    end\n  elsif a.class == Float && b.class\
    \ == String\n    b = b.gsub(/[,.]/, \"\")\n    b = b.to_f\n    if a > b\n    \
    \  return a\n    else\n      return b\n    end\n  end\nend", "    if a.class ==\
    \ b.class\n        if a > b\n            return a\n        elsif a < b\n     \
    \       return b\n        else\n            return nil\n        end\n    elsif\
    \ a.class == Integer && b.class == Float\n        return b\n    elsif a.class\
    \ == Float && b.class == Integer\n        return a\n    elsif a.class == Integer\
    \ && b.class == String\n        return b\n    elsif a.class == String && b.class\
    \ == Integer\n        return a\n    elsif a.class == Float && b.class == String\n\
    \        return b\n    elsif a.class == String && b.class == Float\n        return\
    \ a\n    end\nend", "  if a == b\n    puts None\n  elsif a.to_i > b.to_i\n   \
    \ puts a\n  else\n    puts b\n  end\nend\ncompare_one(1, 2.5)\ncompare_one(1,\
    \ \"2,3\")\ncompare_one(\"5,1\", \"6\")\ncompare_one(\"1\", 1)", "  if a == b\n\
    \    return nil\n  elsif a.class == String\n    a = a.to_f\n  elsif b.class ==\
    \ String\n    b = b.to_f\n  end\n  if a > b\n    return a\n  else\n    return\
    \ b\n  end\nend", "  a = a.to_f\n  b = b.to_f\n  if a == b\n    return nil\n \
    \ elsif a > b\n    return a\n  else\n    return b\n  end\nend", "  if a.to_f ==\
    \ b.to_f\n    nil\n  elsif a.to_f > b.to_f\n    a\n  else\n    b\n  end\nend",
  "  return nil if a == b\n  [a, b].max_by { |x| x.class }\nend", "  if a.is_a?(Integer)\
    \ && b.is_a?(Integer) && a != b\n    return a > b ? a : b\n  elsif a.is_a?(Integer)\
    \ && b.is_a?(Float) && a != b\n    return b\n  elsif a.is_a?(Float) && b.is_a?(Integer)\
    \ && a != b\n    return a\n  elsif a.is_a?(Float) && b.is_a?(Float) && a != b\n\
    \    return a > b ? a : b\n  elsif a.is_a?(String) && b.is_a?(String) && a !=\
    \ b\n    if a.include?(\".\") || a.include?(\",\")\n      a.gsub!(\".\", \",\"\
    )\n      arr = a.split(\",\")\n      first = arr[0].to_i\n      second = arr[1].to_i\n\
    \      total = first + (second / 10.0)\n    else\n      total = a.to_i\n    end\n\
    \    if b.include?(\".\") || b.include?(\",\")\n      b.gsub!(\".\", \",\")\n\
    \      arr = b.split(\",\")\n      first = arr[0].to_i\n      second = arr[1].to_i\n\
    \      total2 = first + (second / 10.0)\n    else\n      total2 = b.to_i\n   \
    \ end\n    return total > total2 ? a : b\n  elsif a.is_a?(String) && b.is_a?(Integer)\
    \ && a != b\n    if a.include?(\".\") || a.include?(\",\")\n      a.gsub!(\".\"\
    , \",\")\n      arr = a.split(\",\")\n      first = arr[0].to_i\n      second\
    \ = arr[1].to_i\n      total = first + (second / 10.0)\n    else\n      total\
    \ = a.to_i\n    end\n    return total > b ? a : b\n  elsif a.is_a?(Integer) &&\
    \ b.is_a?(String) && a != b", "  if a.is_a?(String) && b.is_a?(String)\n    a.to_f\
    \ > b.to_f ? a : b.to_f > a.to_f ? b : nil\n  elsif a.is_a?(Integer) && b.is_a?(Integer)\n\
    \    a > b ? a : b > a ? b : nil\n  elsif a.is_a?(Float) && b.is_a?(Float)\n \
    \   a > b ? a : b > a ? b : nil\n  elsif a.is_a?(Integer) && b.is_a?(Float)\n\
    \    a > b ? a : b > a ? b : nil\n  elsif a.is_a?(Float) && b.is_a?(Integer)\n\
    \    a > b ? a : b > a ? b : nil\n  elsif a.is_a?(Integer) && b.is_a?(String)\n\
    \    a > b.to_f ? a : b.to_f > a ? b : nil\n  elsif a.is_a?(String) && b.is_a?(Integer)\n\
    \    a.to_f > b ? a : b > a.to_f ? b : nil\n  elsif a.is_a?(Float) && b.is_a?(String)\n\
    \    a > b.to_f ? a : b.to_f > a ? b : nil\n  elsif a.is_a?(String) && b.is_a?(Float)\n\
    \    a.to_f > b ? a : b > a.to_f ? b : nil\n  end\nend", "  return b if a.class\
    \ != b.class\n  return a if a == b\n  return a if a.class == Integer\n  return\
    \ a if a.class == Float\n  if a.class == String\n    if a.include?('.') && b.include?('.')\n\
    \      a.to_f > b.to_f ? a : b\n    elsif a.include?(',') && b.include?(',')\n\
    \      a.gsub!(',', '.').to_f > b.gsub!(',', '.').to_f ? a : b\n    elsif a.include?('.')\
    \ && b.include?(',')\n      a.to_f > b.gsub!(',', '.').to_f ? a : b\n    elsif\
    \ a.include?(',') && b.include?('.')\n      a.gsub!(',', '.').to_f > b.to_f ?\
    \ a : b\n    end\n  end\nend", "  if a.class == Integer\n    return a if a > b\n\
    \    return b if b > a\n  elsif a.class == Float\n    return a if a > b\n    return\
    \ b if b > a\n  elsif a.class == String\n    num_a = convert_str_to_num(a)\n \
    \   num_b = convert_str_to_num(b)\n    return num_a if num_a > num_b\n    return\
    \ num_b if num_b > num_a\n  end\n  return nil\nend", "    if a.class == b.class\n\
    \        return nil\n    end\n    if a.class == Fixnum\n        if a < b\n   \
    \         return b\n        else\n            return a\n        end\n    elsif\
    \ a.class == Float\n        if a < b\n            return b\n        else\n   \
    \         return a\n        end\n    elsif a.class == String\n        if a < b\n\
    \            return b\n        else\n            return a\n        end\n    end\n\
    end\np compare_one(1, 2.5)\np compare_one(1, \"2,3\")\np compare_one(\"5,1\",\
    \ \"6\")\np compare_one(\"1\", 1)", "\tif a.class == Integer || b.class == Integer\n\
    \t\tif a > b\n\t\t\ta\n\t\telsif b > a\n\t\t\tb\n\t\telse\n\t\t\tnil\n\t\tend\n\
    \telsif a.class == Float || b.class == Float\n\t\tif a > b\n\t\t\ta\n\t\telsif\
    \ b > a\n\t\t\tb\n\t\telse\n\t\t\tnil\n\t\tend\n\telsif a.class == String || b.class\
    \ == String\n\t\tif a.to_f > b.to_f\n\t\t\ta\n\t\telsif b.to_f > a.to_f\n\t\t\t\
    b\n\t\telse\n\t\t\tnil\n\t\tend\n\tend\nend", "  a, b = a.to_f, b.to_f\n  if a\
    \ > b\n    a\n  elsif a < b\n    b\n  else\n    puts \"None\"\n  end\nend\ncompare_one(1,\
    \ 2.5)\ncompare_one(1, \"2,3\")\ncompare_one(\"5,1\", \"6\")\ncompare_one(\"1\"\
    , 1)", "\tif a.class != b.class\n\t\tputs \"none\"\n\telse\n\t\tif a > b\n\t\t\
    \tputs a\n\t\telse\n\t\t\tputs b\n\t\tend\n\tend\nend\ncompare_one(1, 2.5)\ncompare_one(1,\
    \ \"2,3\")\ncompare_one(\"5,1\", \"6\")\ncompare_one(\"1\", 1)", "  return a.to_f\
    \ if a.is_a?(String) && a.to_f > b\n  return b.to_f if b.is_a?(String) && b.to_f\
    \ > a\n  return a.to_i if a.is_a?(String) && a.to_i > b\n  return b.to_i if b.is_a?(String)\
    \ && b.to_i > a\n  return a if a > b\n  return b if b > a\n  nil\nend\np compare_one(1,\
    \ 2.5) #\u279E 2.5\np compare_one(1, \"2,3\") #\u279E \"2,3\"\np compare_one(\"\
    5,1\", \"6\") #\u279E \"6\"\np compare_one(\"1\", 1) #\u279E None", "  return\
    \ b if a.class == String && b.class == String\n  return a if a.class == Integer\
    \ && b.class == Integer\n  return a if a.class == Float && b.class == Float\n\
    \  return a if a.class == Integer && b.class == Float\n  return b if a.class ==\
    \ Float && b.class == Integer\n  return a if a.class == Integer && b.class ==\
    \ String\n  return b if a.class == String && b.class == Integer\n  return a if\
    \ a.class == Float && b.class == String\n  return b if a.class == String && b.class\
    \ == Float\n  return nil\nend", "  return if a == b\n  return b if b.to_f > a.to_f\n\
    \  return a if a.to_f > b.to_f\nend", "  if (a.is_a?(Integer) && b.is_a?(Integer))\
    \ || (a.is_a?(Float) && b.is_a?(Float))\n    a > b ? a : b\n  elsif (a.is_a?(Integer)\
    \ && b.is_a?(Float)) || (a.is_a?(Float) && b.is_a?(Integer))\n    a > b ? a :\
    \ b\n  elsif (a.is_a?(String) && b.is_a?(Integer)) || (a.is_a?(Integer) && b.is_a?(String))\n\
    \    a.to_f > b.to_f ? a : b\n  elsif (a.is_a?(String) && b.is_a?(Float)) || (a.is_a?(Float)\
    \ && b.is_a?(String))\n    a.to_f > b.to_f ? a : b\n  elsif (a.is_a?(String) &&\
    \ b.is_a?(String))\n    a.to_f > b.to_f ? a : b\n  else\n    nil\n  end\nend",
  "  if a.class == b.class\n    a > b ? a : b\n  else\n    nil\n  end\nend\nputs compare_one(1,\
    \ 2.5)\nputs compare_one(1, \"2,3\")\nputs compare_one(\"5,1\", \"6\")\nputs compare_one(\"\
    1\", 1)", "    if a.is_a?(Integer)\n        if b.is_a?(Integer)\n            if\
    \ a > b\n                return a\n            elsif b > a\n                return\
    \ b\n            else\n                return nil\n            end\n        elsif\
    \ b.is_a?(Float)\n            if a > b\n                return a\n           \
    \ elsif b > a\n                return b\n            else\n                return\
    \ nil\n            end\n        elsif b.is_a?(String)\n            b = b.to_f\n\
    \            if a > b\n                return a\n            elsif b > a\n   \
    \             return b\n            else\n                return nil\n       \
    \     end\n        end\n    elsif a.is_a?(Float)\n        if b.is_a?(Integer)\n\
    \            if a > b\n                return a\n            elsif b > a\n   \
    \             return b\n            else\n                return nil\n       \
    \     end\n        elsif b.is_a?(Float)\n            if a > b\n              \
    \  return a\n            elsif b > a\n                return b\n            else\n\
    \                return nil\n            end\n        elsif b.is_a?(String)\n\
    \            b = b.to_f\n            if a > b\n                return a\n    \
    \        elsif b > a\n                return b\n            else\n           \
    \     return nil\n            end\n        end\n    elsif a.is_a?(String)\n  \
    \      a = a.to_f\n        if b.is_a?(Integer)\n            if a > b\n       \
    \         return a\n            elsif b > a\n                return b\n      \
    \      else\n                return nil\n            end\n        elsif b.is_a?(Float)\n\
    \            if a > b\n                return a\n            elsif b > a\n   \
    \             return b\n            else\n                return nil\n       \
    \     end\n        elsif b.is_a?(String)\n            b = b.to_f\n           \
    \ if a > b\n                return a\n            elsif b > a\n              \
    \  return b\n            else\n                return nil\n            end\n \
    \       end\n    end\nend", "  return a if a.is_a?(String)\n  return b if b.is_a?(String)\n\
    \  if a == b\n    return None\n  else\n    return a > b ? a : b\n  end\nend\n\
    puts compare_one(1, 2.5) #\u279E 2.5\nputs compare_one(1, \"2,3\") #\u279E \"\
    2,3\"\nputs compare_one(\"5,1\", \"6\") #\u279E \"6\"\nputs compare_one(\"1\"\
    , 1) #\u279E None", "  if a.to_f == b.to_f\n    nil\n  elsif a.to_f > b.to_f\n\
    \    a\n  else\n    b\n  end\nend", "\tif a.to_i > b.to_i\n\t\treturn a\n\telsif\
    \ a.to_i < b.to_i\n\t\treturn b\n\telsif a.to_i == b.to_i\n\t\treturn nil\n\t\
    end\nend\np compare_one(1, 2.5) #\u279E 2.5\np compare_one(1, \"2,3\") #\u279E\
    \ \"2,3\"\np compare_one(\"5,1\", \"6\") #\u279E \"6\"\np compare_one(\"1\", 1)\
    \ #\u279E None", "  if a.class == b.class\n    if a == b\n      return nil\n \
    \   else\n      return [a, b].max\n    end\n  elsif a.class == Integer\n    return\
    \ b\n  elsif a.class == Float\n    return b\n  elsif a.class == String\n    return\
    \ a\n  end\nend", "  a.to_f > b.to_f ? a : b\nend", "    return nil if a == b\n\
    \    return a if a.class == Integer && b.class == Float\n    return b if b.class\
    \ == Integer && a.class == Float\n    return a if a.class == Integer && b.class\
    \ == String\n    return b if b.class == Integer && a.class == String\n    return\
    \ a if a.class == Float && b.class == String\n    return b if b.class == Float\
    \ && a.class == String\n    return a if a.class == Float && b.class == Integer\n\
    \    return b if b.class == Float && a.class == Integer\n    return a if a.class\
    \ == String && b.class == Integer\n    return b if b.class == String && a.class\
    \ == Integer\n    return a if a.class == String && b.class == Float\n    return\
    \ b if b.class == String && a.class == Float\n    return a if a.class == String\
    \ && b.class == String\n    return b if b.class == String && a.class == String\n\
    end\nputs compare_one(1, 2.5)\nputs compare_one(1, \"2,3\")\nputs compare_one(\"\
    5,1\", \"6\")\nputs compare_one(\"1\", 1)", "  if a.class == String && b.class\
    \ == String\n    p a > b ? a : b\n  elsif a.class == String && b.class == Integer\n\
    \    p a > b.to_s ? a : b\n  elsif a.class == Integer && b.class == String\n \
    \   p a.to_s > b ? a : b\n  elsif a.class == Float && b.class == Integer\n   \
    \ p a > b ? a : b\n  elsif a.class == Integer && b.class == Float\n    p a > b\
    \ ? a : b\n  elsif a.class == Float && b.class == String\n    p a > b.to_f ? a\
    \ : b\n  elsif a.class == String && b.class == Float\n    p a.to_f > b ? a : b\n\
    \  else\n    p nil\n  end\nend", "  a = a.to_f\n  b = b.to_f\n  if a == b\n  \
    \  return nil\n  elsif a > b\n    return a\n  else\n    return b\n  end\nend\n\
    puts \"4. #{compare_one(1, 2.5)}\"\nputs \"4. #{compare_one(1, \"2,3\")}\"\nputs\
    \ \"4. #{compare_one(\"5,1\", \"6\")}\"\nputs \"4. #{compare_one(\"1\", 1)}\"\n\
    puts \"-----------------------------------\"", "\t# if a.to_i > b.to_i || a.to_f\
    \ > b.to_f\n\t# \ta\n\t# elsif b.to_i > a.to_i || b.to_f > a.to_f\n\t# \tb\n\t\
    # else\n\t# \tnil\n\t# end\n\ta.to_i > b.to_i || a.to_f > b.to_f ? a : b.to_i\
    \ > a.to_i || b.to_f > a.to_f ? b : nil\nend\np compare_one(1, 2.5) == 2.5\np\
    \ compare_one(1, \"2,3\") == \"2,3\"\np compare_one(\"5,1\", \"6\") == \"6\"\n\
    p compare_one(\"1\", 1) == nil", "  if a == b\n    return nil\n  elsif a.is_a?(Integer)\
    \ && b.is_a?(Integer)\n    return a > b ? a : b\n  elsif a.is_a?(Float) && b.is_a?(Float)\n\
    \    return a > b ? a : b\n  elsif a.is_a?(String) && b.is_a?(String)\n    a =\
    \ a.tr(',', '.').to_f\n    b = b.tr(',', '.').to_f\n    return a > b ? a : b\n\
    \  elsif a.is_a?(String) && b.is_a?(Integer)\n    a = a.tr(',', '.').to_f\n  \
    \  return a > b ? a : b\n  elsif a.is_a?(Integer) && b.is_a?(String)\n    b =\
    \ b.tr(',', '.').to_f\n    return a > b ? a : b\n  elsif a.is_a?(String) && b.is_a?(Float)\n\
    \    a = a.tr(',', '.').to_f\n    return a > b ? a : b\n  elsif a.is_a?(Float)\
    \ && b.is_a?(String)\n    b = b.tr(',', '.').to_f\n    return a > b ? a : b\n\
    \  end\nend", "    if a.to_f > b.to_f\n        return a\n    elsif a.to_f < b.to_f\n\
    \        return b\n    else\n        return nil\n    end\nend", "  b.is_a?(Float)\
    \ ? a < b : nil\nend", "  if a.class == b.class\n    if a > b\n      a\n    elsif\
    \ a < b\n      b\n    else\n      nil\n    end\n  elsif a.class == Integer\n \
    \   b\n  elsif a.class == Float\n    if b.class == Integer\n      a\n    else\n\
    \      b\n    end\n  elsif a.class == String\n    if b.class == Integer || b.class\
    \ == Float\n      a\n    else\n      b\n    end\n  end\nend", "  if a == b\n \
    \   return nil\n  elsif a.is_a?(String) && b.is_a?(String)\n    if a.to_f < b.to_f\n\
    \      return b\n    else\n      return a\n    end\n  elsif a.is_a?(String)\n\
    \    if a.to_f < b\n      return b\n    else\n      return a\n    end\n  elsif\
    \ b.is_a?(String)\n    if a < b.to_f\n      return b\n    else\n      return a\n\
    \    end\n  elsif a > b\n    return a\n  else\n    return b\n  end\nend", "  \
    \  if a == b\n        return nil\n    elsif a > b\n        return a\n    else\n\
    \        return b\n    end\nend", "  if a == b\n    return nil\n  end\n  if a.class\
    \ == b.class\n    return [a, b].max\n  end\n  if a.class == String && b.class\
    \ == Integer\n    return a\n  end\n  if a.class == Integer && b.class == String\n\
    \    return b\n  end\n  if a.class == String && b.class == Float\n    return b\n\
    \  end\n  if a.class == Float && b.class == String\n    return a\n  end\nend\n\
    p compare_one(1, 2.5)\np compare_one(1, \"2,3\")\np compare_one(\"5,1\", \"6\"\
    )\np compare_one(\"1\", 1)", "  case\n  when a.is_a?(String) && b.is_a?(String)\n\
    \    a > b ? a : b\n  when a.is_a?(Integer) && b.is_a?(Integer)\n    a > b ? a\
    \ : b\n  when a.is_a?(Float) && b.is_a?(Float)\n    a > b ? a : b\n  when a.is_a?(Integer)\
    \ && b.is_a?(Float)\n    a > b ? a : b\n  when a.is_a?(Float) && b.is_a?(Integer)\n\
    \    a > b ? a : b\n  when a.is_a?(Integer) && b.is_a?(String)\n    a > b.to_i\
    \ ? a : b\n  when a.is_a?(String) && b.is_a?(Integer)\n    a.to_i > b ? a : b\n\
    \  when a.is_a?(Float) && b.is_a?(String)\n    a > b.to_f ? a : b\n  when a.is_a?(String)\
    \ && b.is_a?(Float)\n    a.to_f > b ? a : b\n  else\n    nil\n  end\nend", " \
    \ if a.class == Integer && b.class == Integer\n    if a > b\n      return a\n\
    \    elsif a < b\n      return b\n    else\n      return nil\n    end\n  elsif\
    \ a.class == Float && b.class == Float\n    if a > b\n      return a\n    elsif\
    \ a < b\n      return b\n    else\n      return nil\n    end\n  elsif a.class\
    \ == String && b.class == String\n    if a.to_f > b.to_f\n      return a\n   \
    \ elsif a.to_f < b.to_f\n      return b\n    else\n      return nil\n    end\n\
    \  elsif a.class == Integer && b.class == String\n    if a > b.to_f\n      return\
    \ a\n    elsif a < b.to_f\n      return b\n    else\n      return nil\n    end\n\
    \  elsif a.class == String && b.class == Integer\n    if a.to_f > b\n      return\
    \ a\n    elsif a.to_f < b\n      return b\n    else\n      return nil\n    end\n\
    \  elsif a.class == Float && b.class == String\n    if a > b.to_f\n      return\
    \ a\n    elsif a < b.to_f\n      return b\n    else\n      return nil\n    end\n\
    \  elsif a.class == String && b.class == Float\n    if a.to_f > b\n      return\
    \ a\n    elsif a.to_f < b\n      return b\n    else\n      return nil\n    end\n\
    \  end\nend", "\tif a == b\n\t\treturn nil\n\telsif (a.is_a? String) && (b.is_a?\
    \ String)\n\t\tif a.to_f > b.to_f\n\t\t\treturn a\n\t\telse\n\t\t\treturn b\n\t\
    \tend\n\telsif (a.is_a? Integer) && (b.is_a? Integer)\n\t\tif a > b\n\t\t\treturn\
    \ a\n\t\telse\n\t\t\treturn b\n\t\tend\n\telsif (a.is_a? Integer) && (b.is_a?\
    \ Float)\n\t\tif a > b\n\t\t\treturn a\n\t\telse\n\t\t\treturn b\n\t\tend\n\t\
    elsif (a.is_a? Float) && (b.is_a? Integer)\n\t\tif a > b\n\t\t\treturn a\n\t\t\
    else\n\t\t\treturn b\n\t\tend\n\telsif (a.is_a? Float) && (b.is_a? Float)\n\t\t\
    if a > b\n\t\t\treturn a\n\t\telse\n\t\t\treturn b\n\t\tend\n\telsif (a.is_a?\
    \ String) && (b.is_a? Integer)\n\t\tif a.to_f > b\n\t\t\treturn a\n\t\telse\n\t\
    \t\treturn b\n\t\tend\n\telsif (a.is_a? String) && (b.is_a? Float)\n\t\tif a.to_f\
    \ > b\n\t\t\treturn a\n\t\telse\n\t\t\treturn b\n\t\tend\n\telsif (a.is_a? Integer)\
    \ && (b.is_a? String)\n\t\tif a > b.to_f\n\t\t\treturn a\n\t\telse\n\t\t\treturn\
    \ b\n\t\tend\n\telsif (a.is_a? Float) && (b.is_a? String)\n\t\tif a > b.to_f\n\
    \t\t\treturn a\n\t\telse\n\t\t\treturn b\n\t\tend\n\tend\nend\nputs compare_one(5,6)\n\
    puts compare_one(1,2."]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
