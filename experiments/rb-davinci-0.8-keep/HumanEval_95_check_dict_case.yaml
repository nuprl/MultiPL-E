name: HumanEval_95_check_dict_case
language: rb
prompt: "# Given a dictionary, return True if all keys are strings in lower \n# case\
  \ or all keys are strings in upper case, else return False.\n# The function should\
  \ return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
  a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
  :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
  a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
  Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n#\
  \ check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
  def check_dict_case(dict)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
  \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
  p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
  p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
  \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
  }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"\
  36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"STATE\"\
  \ => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
  fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
  \  end\nend\n"
completions: ["  #write code here\nend\ncheck_dict_case({\"a\":\"apple\", \"b\":\"\
    banana\"}) == true\ncheck_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}) == false\ncheck_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"\
    a\":\"apple\"}) == false\ncheck_dict_case({\"Name\":\"John\", \"Age\":\"36\",\
    \ \"City\":\"Houston\"}) == false\ncheck_dict_case({\"STATE\":\"NC\", \"ZIP\"\
    :\"12345\" }) == true", "  if dict.empty?\n    return false\n  end\n  dict.each_key\
    \ do |key|\n    if dict.has_key?(key.downcase) or dict.has_key?(key.upcase)\n\
    \      return false\n    end\n  end\n  return true\nend", "  dict.keys.each do\
    \ |key|\n    return false if key.upcase != key && key.downcase != key\n  end\n\
    \  true\nend", '  return false if dict.empty?', "    case_count = 0\n    dict.each\
    \ do |key, val|\n        if key.is_a?(String)\n            if key == key.downcase\
    \ || key == key.upcase\n                case_count += 1\n            end\n   \
    \     end\n    end\n    if case_count == dict.length\n        return true\n  \
    \  else\n        return false\n    end\nend", "    dict_keys = dict.keys\n   \
    \ dict_keys.all? {|a| a.is_a? String}\nend", end, "  dict_keys = dict.keys\n \
    \ dict_keys.each do |key|\n    return false if key.is_a? Integer\n  end\n  dict_keys.uniq.each\
    \ do |key|\n    if key.is_a? String\n      if (key.upcase == key) || (key.downcase\
    \ == key)\n        return true\n      else\n        return false\n      end\n\
    \    end\n  end\nend", "  mixed_dict = false\n  is_all_upper = true\n  is_all_lower\
    \ = true\n  is_empty = true\n  dict.each do |key, value|\n    if key.upcase ==\
    \ key\n      is_all_lower = false\n    elsif key.downcase == key\n      is_all_upper\
    \ = false\n    else\n      mixed_dict = true\n    end\n    is_empty = false\n\
    \  end\n  return is_empty || mixed_dict || !(is_all_upper || is_all_lower)\nend\n\
    puts check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\nputs check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\nputs check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"})\nputs check_dict_case({\"Name\"\
    :\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\nputs check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" })", "\tif dict.empty?\n\t\treturn false\n\tend\n\t\
    all_strings = true\n\tall_upper = true\n\tall_lower = true\n\tdict.each do |key,\
    \ value|\n\t\tall_strings = all_strings && key.class == String\n\t\tall_upper\
    \ = all_upper && key == key.upcase\n\t\tall_lower = all_lower && key == key.downcase\n\
    \tend\n\treturn all_strings && (all_upper || all_lower)\nend", "  if dict.empty?\n\
    \    return false\n  end\n  # i = 0\n  # dict.each do |key, value|\n  #   if i\
    \ == 0\n  #     type = key.class\n  #   else\n  #     if key.class != type\n \
    \ #       return false\n  #     end\n  #   end\n  #   i = i + 1\n  # end\n  #\
    \ return true\n  type = dict.keys[0].class\n  dict.each do |key, value|\n    if\
    \ key.class != type\n      return false\n    end\n  end\n  return true\nend",
  "    k = dict.keys\n    if dict.length == 0\n        return false\n    end\n   \
    \ if k[0].downcase == k[0]\n        return k.all? {|key| key.downcase == key}\n\
    \    else\n        return k.all? {|key| key.upcase == key}\n    end\nend", " \
    \ # Only change code below this line\n  keys = dict.keys\n  match = /[a-z]/\n\
    \  all_lower = keys.all? { |x| x =~ match }\n  all_upper = keys.all? { |x| x.upcase\
    \ =~ match }\n  (dict.size != 0) && (all_lower || all_upper)\n  # Only change\
    \ code above this line\nend", "\tif (dict == {}) then return false end\n\tl =\
    \ \"\"\n\tdict.each do |k,v|\n\t\t#1st key determines if keys are upper or lower\
    \ case.\n\t\tif (l == \"\") then l = k.upcase == k ? \"u\" : \"l\" end\n\t\tif\
    \ (l == \"u\" && k.upcase != k) then return false end\n\t\tif (l == \"l\" && k.downcase\
    \ != k) then return false end\n\tend\n\treturn true\nend", "\tresult = true\n\t\
    \n\tif dict.size == 0\n\t\tresult = false\n\telsif dict.keys.all? { |key| key.match(/^[a-z]+$/)\
    \ }\n\t\tresult = true\n\telsif dict.keys.all? { |key| key.match(/^[A-Z]+$/) }\n\
    \t\tresult = true\n\telse\n\t\tresult = false\n\tend\n\t\n\treturn result\nend",
  "  if dict.keys.empty?\n    return false\n  end\n  upper = true\n  lower = true\n\
    \  dict.keys.each do |key|\n    if key.match(/[A-Z]/)\n      lower = false\n \
    \   end\n    if key.match(/[a-z]/)\n      upper = false\n    end\n  end\n  return\
    \ upper || lower\nend", "  dict_case = dict.map{|k,v| k}.to_s\n  if dict_case.count('a-z')\
    \ == dict_case.size || dict_case.count('A-Z') == dict_case.size\n    true\n  else\n\
    \    false\n  end\nend\ncheck_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n\
    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\ncheck_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"})\ncheck_dict_case({\"Name\"\
    :\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\ncheck_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" })\ncheck_dict_case({})", "\nend", "  \n  if dict.keys.all?{|key|\
    \ key.downcase == key }\n    return true\n  elsif dict.keys.all?{|key| key.upcase\
    \ == key }\n    return true\n  else\n    return false\n  end\nend", "  #write\
    \ your code here\n  l_case = 0\n  u_case = 0\n  dict.each do |key, value|\n  \
    \  # key_l_case = key.to_s.downcase\n    # key_u_case = key.to_s.upcase\n    l_case\
    \ += 1 if key.to_s.downcase == key.to_s\n    u_case += 1 if key.to_s.upcase ==\
    \ key.to_s\n  end\n  if l_case == dict.length || u_case == dict.length\n    return\
    \ true\n  else\n    return false\n  end\nend", "  lower = []\n  upper = []\n \
    \ dict.each do |k,v|\n    if k == k.downcase\n      lower << k\n    else\n   \
    \   upper << k\n    end\n  end\n  if lower.empty? || upper.empty?\n    true\n\
    \  else\n    false\n  end\nend", "  if dict.keys.any? {|k| k.to_s.match(/[A-Z]/)}\
    \ and dict.keys.any? {|k| k.to_s.match(/[a-z]/)}\n    return false\n  else\n \
    \   return true\n  end\nend", "  lower_case = dict.keys.all? { |key| key == key.downcase\
    \ }\n  upper_case = dict.keys.all? { |key| key == key.upcase }\n  lower_case ||\
    \ upper_case\nend", "  # your code goes here\n  lower=true\n  upper=true\n  if\
    \ dict.empty?\n    return false\n  end\n  dict.each do |key,value|\n    if key.downcase!=key\n\
    \      lower=false\n    end\n    if key.upcase!=key\n      upper=false\n    end\n\
    \  end\n  return lower || upper\nend", "  if dict.empty?\n    return false\n \
    \ end\n  dict.each_value do |val|\n    if !val.is_a? String\n      return false\n\
    \    end\n  end\n  dict.each_key do |key|\n    if !key.is_a? String\n      return\
    \ false\n    end\n  end\n  count = 0\n  dict.each_key do |key|\n    if key ==\
    \ key.downcase\n      count = count + 1\n    end\n  end\n  if count == dict.length\n\
    \    return true\n  else\n    return false\n  end\nend", "  keys = dict.keys\n\
    \  return false if keys.length == 0", "  if dict.length == 0\n    false\n  elsif\
    \ dict.keys.all? {|x| x == x.downcase} || dict.keys.all? {|x| x == x.upcase}\n\
    \    true\n  else\n    false\n  end\nend", "  return false if dict.empty?\n  all_lower\
    \ = true\n  all_upper = true\n  dict.each_key do |key|\n    all_lower = false\
    \ if key.upcase == key\n    all_upper = false if key.downcase == key\n  end\n\
    \  all_lower or all_upper\nend", "  # Write your code here. \nend", "  # TODO:\
    \ check dictionary case, return True if all keys are strings in lower case or\
    \ upper case.\n  # return False if empty dictionary.\n  # return False if dictionary\
    \ is not all lower or upper case.\n  if dict.empty?\n    return false\n  else\n\
    \    dict.keys.each do |key|\n      if key != key.upcase && key != key.downcase\n\
    \        return false\n      end\n    end\n  end\n  return true\nend", "  if dict.empty?\n\
    \    return false\n  end\n  if dict.keys[0].is_a? String\n    if dict.keys[0].capitalize\
    \ == dict.keys[0]\n      if dict.keys.all? {|x| x.capitalize == x}\n        return\
    \ true\n      else\n        return false\n      end\n    elsif dict.keys[0].downcase\
    \ == dict.keys[0]\n      if dict.keys.all? {|x| x.downcase == x}\n        return\
    \ true\n      else\n        return false\n      end\n    else\n      return false\n\
    \    end\n  else\n    return false\n  end\nend", "  dict.keys.each do |key|\n\
    \    if key.is_a?(String)\n      upper_case = key == key.upcase\n      lower_case\
    \ = key == key.downcase\n      return false if upper_case && lower_case\n    else\n\
    \      return false\n    end\n  end\n  true\nend", "  valid_cases = ['upper',\
    \ 'lower']\n  return false if dict.empty?\n  case = dict.keys[0].is_a?(String)\
    \ ? dict.keys[0].downcase == dict.keys[0] ? 'lower' : 'upper' : nil\n  valid_cases.include?(case)\
    \ && dict.keys.all? { |key| key.downcase == key || key.upcase == key }\nend",
  "\tif dict.empty?\n\t\treturn false\n\tend\n\t# check if all keys are upper case\n\
    \tall_upper = true\n\tdict.each do |key, value|\n\t\tif key.upcase != key\n\t\t\
    \tall_upper = false\n\t\t\tbreak\n\t\tend\n\tend\n\tif all_upper == true\n\t\t\
    return true\n\tend\n\t# check if all keys are lower case\n\tall_lower = true\n\
    \tdict.each do |key, value|\n\t\tif key.downcase != key\n\t\t\tall_lower = false\n\
    \t\t\tbreak\n\t\tend\n\tend\n\tif all_lower == true\n\t\treturn true\n\tend\n\t\
    return false\nend", "  # your code here\nend", "    return false if dict.empty?\n\
    \    if (dict.keys[0].class == Symbol)\n        return false\n    end\n    return\
    \ dict.keys.all? {|key| key.upcase == key} || dict.keys.all? {|key| key.downcase\
    \ == key}\nend", "  return false if dict.empty?\n  first_key = dict.keys.first\n\
    \  dict.each do |key, value|\n    if first_key == first_key.upcase\n      return\
    \ false if key.downcase == key\n    else\n      return false if key.upcase ==\
    \ key\n    end\n  end\n  true\nend", "  if dict.empty?\n    return false\n  end\n\
    \  caps = []\n  lower = []\n  dict.each do |key, value|\n    if key.upcase ==\
    \ key\n      caps << key\n    else\n      lower << key\n    end\n  end\n  if caps.empty?\
    \ or lower.empty?\n    return true\n  else\n    return false\n  end\nend", " \
    \ if dict.empty?\n    return false\n  end\n  # puts \"dict before #{dict}\"\n\
    \  # puts \"dict after .each #{dict.each}\"\n  # puts \"dict after .keys #{dict.keys}\"\
    \n  # puts \"dict after .keys.to_s #{dict.keys.to_s}\"\n  # puts \"dict after\
    \ .keys.to_s.downcase #{dict.keys.to_s.downcase}\"\n  # puts \"dict after .keys.to_s.upcase\
    \ #{dict.keys.to_s.upcase}\"\n  return false if dict.keys.to_s.downcase != dict.keys.to_s\
    \ && dict.keys.to_s.upcase != dict.keys.to_s\n  return true\nend", "  key_upper\
    \ = 0\n  key_lower = 0\n  dict.each do |k,v|\n    if k.upcase == k\n      key_upper\
    \ += 1\n    elsif k.downcase == k\n      key_lower += 1\n    end\n  end\n  if\
    \ key_upper == dict.length || key_lower == dict.length\n    return true\n  else\n\
    \    return false\n  end\nend\nputs check_dict_case({\"a\":\"apple\", \"b\":\"\
    banana\"})\nputs check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"\
    banana\"})\nputs check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"})\nputs check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"\
    Houston\"})\nputs check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })", " \
    \ r = []\n  dict.each do |k,v|\n    r << k.class\n  end\n  if r.all?{|e| e ==\
    \ String}\n    r.all?{|e| e.to_s.upcase == e.to_s} || r.all?{|e| e.to_s.downcase\
    \ == e.to_s}\n  else\n    false\n  end\nend", "\tif dict.keys.all? {|k| k.class\
    \ == String}\n\t\treturn dict.keys.all? {|k| k.upcase == k} || dict.keys.all?\
    \ {|k| k.downcase == k}\n\telse\n\t\treturn false\n\tend\nend", "\t#check if empty\n\
    \tif dict.empty?\n\t\treturn false\n\tend\n\t#return false if all keys are not\
    \ of same type\n\tif !dict.keys.all?{|key| key.is_a? String}\n\t\treturn false\n\
    \tend\n\t#return false if all keys are not in upper or lower case\n\tif !dict.keys.all?{|key|\
    \ key.upcase == key || key.downcase == key}\n\t\treturn false\n\tend\n\t#return\
    \ true if checks above succeed\n\treturn true\nend", "  upper = 0\n  lower = 0\n\
    \  if dict.empty?\n    return false\n  else\n    dict.each do |key, value|\n \
    \     if (key.to_s.upcase) == key.to_s\n        upper += 1\n      else\n     \
    \   lower += 1\n      end\n    end\n    if upper == dict.length || lower == dict.length\n\
    \      return true\n    else\n      return false\n    end\n  end\nend", "  dict.keys.all?(/^[a-z]+$/)\
    \ or dict.keys.all?(/^[A-Z]+$/)\nend", "  # Check if the dictionary is empty\n\
    \  if dict.empty?\n    return false\n  end\n  # Return false if there are different\
    \ types in the key\n  if dict.keys.all? {|key| key.is_a?(String)} == false\n \
    \   return false\n  end\n  # Iterate through the keys and return false if there\
    \ are any uppercase letters\n  dict.keys.each do |key|\n    if key.match(/[A-Z]/)\n\
    \      return false\n    end\n  end\n  return true\nend", "\nend", "  dict.keys.each\
    \ { |k| return false if k != k.downcase && k != k.upcase }\n  true\nend", '',
  "  lower_case_keys = 0\n  upper_case_keys = 0\n  dict.each_key do |key|\n    if\
    \ key.match(/[a-z]/)\n      lower_case_keys += 1\n    else\n      upper_case_keys\
    \ += 1\n    end\n  end\n  if lower_case_keys == dict.length || upper_case_keys\
    \ == dict.length\n    return true\n  else\n    return false\n  end\nend\nputs\
    \ check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})",
  "\tdict.each do |key, value|\n\t\tif (key.match(/[a-z]/)) \n\t\t\tbreak\n\t\telsif\
    \ (key.match(/[A-Z]/))\n\t\t\tbreak\n\t\telse\n\t\t\treturn false\n\t\tend\n\t\
    end\n\treturn true\nend\nputs check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    })\nputs check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"\
    })\nputs check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"})\n\
    puts check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"\
    })\nputs check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })", "  dict.keys.all?\
    \ { |key| key.to_s == key.to_s.downcase } ||\n  dict.keys.all? { |key| key.to_s\
    \ == key.to_s.upcase }\nend", "  low_count = 0\n  up_count = 0\n  dict.each do\
    \ |k,v|\n    if k.downcase == k\n      low_count += 1\n    elsif k.upcase == k\n\
    \      up_count += 1\n    end\n  end\n  return false if low_count == 0 && up_count\
    \ == 0\n  return true if low_count == dict.length || up_count == dict.length\n\
    \  return false\nend", "  keys = dict.keys.sort\n  first = keys.first.class\n\
    \  last = keys.last.class\n  if first == last\n    if first == String\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end", "  if dict.length == 0\n    return false\n  end\n  count = 0\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      count += 1\n    elsif key.downcase\
    \ == key\n      count += 1\n    end\n  end\n  if count == dict.length\n    return\
    \ true\n  else\n    return false\n  end\nend", "    islowercase = !dict.keys.empty?\
    \ && dict.keys.all? { |key| key == key.downcase }\n    isuppercase = !dict.keys.empty?\
    \ && dict.keys.all? { |key| key == key.upcase }\n    return islowercase || isuppercase\n\
    end\nputs check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})", "  dict.keys.all?\
    \ { |k| k.is_a?(String) && k.upcase == k || k.downcase == k }\nend", "  if dict.empty?\n\
    \    return false\n  else\n    dict.keys.each do |key|\n      if key == key.upcase\n\
    \        return true\n      elsif key == key.downcase\n        return true\n \
    \     else\n        return false\n      end\n    end\n  end\nend", "    # your\
    \ code here\n    if dict.size == 0\n        return false\n    end\n    if dict.keys[0].class\
    \ == String\n        dict.values.each do |v|\n            if v.class != String\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    false\nend\nputs check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    })\nputs check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"\
    })\nputs check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"})\n\
    puts check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"\
    })\nputs check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })", "  \n  lower_case\
    \ = true\n  upper_case = true\n  \n  dict.each do |key, value|\n    lower_case\
    \ = false if key == key.upcase\n    upper_case = false if key == key.downcase\n\
    \  end\n  \n  return true if (lower_case || upper_case)\n  return false if (lower_case\
    \ == false && upper_case == false)\nend", "  dict.keys.each do |key|\n    if key.class\
    \ == String\n      if key == key.upcase || key == key.downcase\n        return\
    \ true\n      else\n        return false\n      end\n    else\n      return false\n\
    \    end\n  end\nend", "  dict.each do |key, value|\n    if key.is_a?(String)\
    \ == false\n      return false\n    end\n  end\n  if dict.keys.all? {|x| x.upcase\
    \ == x}\n    return true\n  elsif dict.keys.all? {|x| x.downcase == x}\n    return\
    \ true\n  else\n    return false\n  end\nend", "  if dict.empty?\n    return false\n\
    \  else\n    keys = dict.keys\n    return (keys[0].is_a? String) ? keys.all? {|i|\
    \ i == i.downcase} : keys.all? {|i| i == i.upcase}\n  end\nend", "  str_lower_keys\
    \ = dict.keys.select { |x| x.is_a?(String) && x.downcase == x }\n  str_upper_keys\
    \ = dict.keys.select { |x| x.is_a?(String) && x.upcase == x }\n  if str_lower_keys.length\
    \ == dict.keys.length\n    return true\n  elsif str_upper_keys.length == dict.keys.length\n\
    \    return true\n  else\n    return false\n  end\nend", "  dict.each_key do |k|\n\
    \    if (k == k.upcase)\n      return false\n    elsif (k == k.downcase)\n   \
    \   return false\n    end\n  end\n  return true\nend", "    if dict.length ==\
    \ 0\n        return false\n    end\n    is_upper = nil\n    dict.each do |key,\
    \ value|\n        if is_upper == nil\n            is_upper = key.upcase == key\n\
    \        else\n            if (is_upper and key.upcase != key) or (!is_upper and\
    \ key.downcase != key)\n                return false\n            end\n      \
    \  end\n    end\n    return true\nend", "  # your code goes here\nend", "    return\
    \ false if dict.keys.length == 0\n    dict.keys.each do |key|\n        if key\
    \ == key.downcase\n            if dict.keys.all? {|key| key == key.downcase} ==\
    \ false\n                return false\n            end\n        else\n       \
    \     if dict.keys.all? {|key| key == key.upcase} == false\n                return\
    \ false\n            end\n        end\n    end\n    return true\nend", "  if dict.any?\
    \ {|key,value| key.is_a?(String) && key.match(/[A-Z]/)}\n    puts \"UpperCase\"\
    \n    return dict.all? {|key,value| key.is_a?(String) && key.match(/[A-Z]/)}\n\
    \  else\n    puts \"LowerCase\"\n    return dict.all? {|key,value| key.is_a?(String)\
    \ && key.match(/[a-z]/)}\n  end\nend", "  return false if dict.empty?\n  dict.keys.map(&:downcase)\
    \ == dict.keys || dict.keys.map(&:upcase) == dict.keys\nend", "  flag = false\n\
    \  if dict.length == 0\n    return false\n  end\n  array_lower = []\n  array_upper\
    \ = []\n  dict.each do |key,value|\n    if key.downcase == key\n      array_lower.push(key)\n\
    \    elsif key.upcase == key\n      array_upper.push(key)\n    end\n  end\n  if\
    \ array_lower.length == dict.length\n    flag = true\n  elsif array_upper.length\
    \ == dict.length\n    flag = true\n  end\n  return flag\nend", "    if dict.count\
    \ == 0\n        return false\n    end\n    check = true\n    for key in dict.keys\n\
    \        if (key.to_s.upcase == key.to_s) || (key.to_s.downcase == key.to_s)\n\
    \            check = true\n        else\n            check = false\n         \
    \   break\n        end\n    end\n    check\nend", "  check = false\n  if dict.length\
    \ > 0\n    if dict.keys[0].is_a?(String)\n      if dict.keys[0].upcase == dict.keys[0]\n\
    \        check = true\n      end\n    end\n  end\n  if check == true\n    dict.each\
    \ do |key, value|\n      if key.upcase != key\n        check = false\n      end\n\
    \    end\n  else\n    dict.each do |key, value|\n      if key.downcase != key\n\
    \        check = false\n      end\n    end\n  end\n  check\nend", "    if dict.empty?\n\
    \        return false\n    end\n    allKeysLower = true\n    allKeysUpper = true\n\
    \    dict.each do |key, value|\n        if key.upcase != key\n            allKeysUpper\
    \ = false\n        end\n        if key.downcase != key\n            allKeysLower\
    \ = false\n        end\n    end\n    if allKeysLower || allKeysUpper\n       \
    \ return true\n    else\n        return false\n    end\nend", "  return false\
    \ if dict.empty?\n  is_all_upper = true\n  is_all_lower = true\n  dict.each do\
    \ |key, value|\n    if key.upcase != key\n      is_all_upper = false\n    end\n\
    \    if key.downcase != key\n      is_all_lower = false\n    end\n  end\n  is_all_upper\
    \ || is_all_lower\nend", "  # Write your code here.\nend", "  if dict.keys.empty?\n\
    \    return false\n  elsif dict.keys.all? {|k| k.downcase == k}\n    return true\n\
    \  elsif dict.keys.all? {|k| k.upcase == k}\n    return true\n  else\n    return\
    \ false\n  end\nend", "\tcase_check = 0\n\tdict.each do |key, value|\n\t\tcase_check\
    \ += 1 if key.downcase == key\n\t\tcase_check -= 1 if key.upcase == key\n\tend\n\
    \tcase_check == dict.length || case_check == dict.length * -1 ? true : false\n\
    end", "\tdict.each do |k,v|\n\t\tif k.is_a? String\n\t\t\tif (k == k.upcase) ||\
    \ (k == k.downcase)\n\t\t\t\ttrue\n\t\t\telse\n\t\t\t\tfalse\n\t\t\tend\n\t\t\
    else\n\t\t\tfalse\n\t\tend\n\tend\nend", "   # Your code goes here!\nend", " \
    \   if dict.empty?\n        return false\n    end\n    lower_case = dict.keys.all?\
    \ {|key| key == key.downcase}\n    upper_case = dict.keys.all? {|key| key == key.upcase}\n\
    \    return lower_case || upper_case\nend", "\tcase_of_key = ''\n\tdict.each_key\
    \ do |k|\n\t\tif case_of_key == ''\n\t\t\tcase_of_key = k\n\t\tend\n\t\tif k.upcase\
    \ == k\n\t\t\treturn false if case_of_key.downcase == case_of_key\n\t\telse\n\t\
    \t\treturn false if case_of_key.upcase == case_of_key\n\t\tend\n\tend\n\treturn\
    \ true\nend", "  all_upper = true\n  all_lower = true\n  dict.each do |k,v|\n\
    \    all_upper = false if k != k.upcase\n    all_lower = false if k != k.downcase\n\
    \  end\n  all_upper || all_lower\nend", "  dict.keys.all? { |k| k == k.upcase\
    \ } || dict.keys.all? { |k| k == k.downcase }\nend", "    return false if dict.length\
    \ == 0\n    all_upper = true\n    all_lower = true\n    dict.each do |key, value|\n\
    \        all_upper = false if key.upcase != key\n        all_lower = false if\
    \ key.downcase != key\n    end\n    return true if all_upper || all_lower\n  \
    \  return false\nend", "  upper_hash = {}\n  lower_hash = {}\n  dict.each do |k,v|\n\
    \    if k.upcase.eql? k\n      upper_hash[k] = v\n    else\n      lower_hash[k]\
    \ = v\n    end\n  end\n  if upper_hash.empty? || lower_hash.empty?\n    return\
    \ true\n  else\n    return false\n  end\nend", "  dict.each_key { |key| return\
    \ false if key.downcase != key || key.upcase != key }\n  true\nend\nputs check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"})\nputs check_dict_case({\"a\":\"apple\", \"A\"\
    :\"banana\", \"B\":\"banana\"})\nputs check_dict_case({\"a\":\"apple\", \"8\"\
    :\"banana\", \"a\":\"apple\"})\nputs check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"})\nputs check_dict_case({\"STATE\":\"NC\", \"ZIP\"\
    :\"12345\" })", "    if dict.empty?\n        return false\n    elsif dict.keys.all?\
    \ {|k| k.is_a? String} == false\n        return false\n    elsif dict.keys.all?\
    \ {|k| k.is_a? String} == true\n        if dict.keys.all? {|k| k.upcase == k}\n\
    \            return true\n        elsif dict.keys.all? {|k| k.downcase == k}\n\
    \            return true\n        else\n            return false\n        end\n\
    \    end\nend", "\tall_lower = true\n\tall_upper = true\n\tdict.each_key { |key|\n\
    \t\tif all_lower\n\t\t\tall_lower = key.is_a?(String) && key.downcase == key\n\
    \t\tend\n\t\tif all_upper\n\t\t\tall_upper = key.is_a?(String) && key.upcase ==\
    \ key\n\t\tend\n\t}\n\treturn all_lower || all_upper\nend", "    dict.values.each\
    \ do |value|\n        puts value\n    end\nend", "  if dict.empty?\n    return\
    \ false\n  end\n  lowercase = true\n  uppercase = true\n  dict.each do |key,value|\n\
    \    if key.upcase == key\n      lowercase = false\n    else\n      uppercase\
    \ = false\n    end\n  end\n  if lowercase == true || uppercase == true\n    return\
    \ true\n  else\n    return false\n  end\nend", "  if (dict.keys.all? {|key| key\
    \ == key.downcase}) || (dict.keys.all? {|key| key == key.upcase})\n    return\
    \ true\n  else\n    return false\n  end\nend", "  dict.keys.each do |x|\n    if\
    \ x.downcase != x\n      return false\n    end\n  end\n  return true\nend\np check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"})\np check_dict_case({\"a\":\"apple\", \"A\":\"\
    banana\", \"B\":\"banana\"})\np check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"})\np check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\np check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })",
  "  # the following line is for test purpose and can be removed\n  # print \"input\
    \ hash: \", dict\n  count=0\n  dict.each_key do |k|\n    count=count+1\n    if\
    \ k == k.upcase\n      return true\n    elsif k == k.downcase\n      return true\n\
    \    else\n      return false\n    end \n  end\n  if count==0\n    return false\n\
    \  end\nend", "    puts dict.to_s\n    if dict.empty?\n        return false\n\
    \    end\n    dict.each do |k,v|\n        if (k.is_a? String) && (k == k.upcase)\n\
    \            return true\n        elsif (k.is_a? String) && (k == k.downcase)\n\
    \            return true\n        else\n            return false\n        end\n\
    \    end\nend", "  state = 0\n  dict.each do |key, value|\n    if key.match(/[A-Z]/)\n\
    \      state = 1\n    elsif key.match(/[a-z]/)\n      state = 2\n    else\n  \
    \    return false\n    end\n  end\n  if state == 1\n    dict.each do |key, value|\n\
    \      return false if key.match(/[a-z]/)\n    end\n  elsif state == 2\n    dict.each\
    \ do |key, value|\n      return false if key.match(/[A-Z]/)\n    end\n  end\n\
    \  return true\nend", "  # Write your code here\n  dict.each do |key, value|\n\
    \    if key.is_a?(String)\n      if (dict.keys.all? {|k| k.upcase == k} || dict.keys.all?\
    \ {|k| k.downcase == k})\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend", "  keys = dict.keys\n\
    \  return false if keys.empty?\n  return false if keys.select { |k| k.upcase!\
    \ == nil }.count != 0 && keys.select { |k| k.downcase! == nil }.count != 0\n \
    \ true\nend", "  \nend", "  lower_keys = 0\n  upper_keys = 0\n  dict.each do |key,\
    \ value|\n    if key == key.downcase\n      lower_keys += 1\n    elsif key ==\
    \ key.upcase\n      upper_keys += 1\n    end\n  end\n  if lower_keys == dict.length\
    \ || upper_keys == dict.length\n    true\n  else\n    false\n  end\nend", "  \
    \  dict.each do |key, value|\n        if key.is_a? String\n            if !dict.keys.all?\
    \ {|key| key.is_a? String && key == key.downcase} && !dict.keys.all? {|key| key.is_a?\
    \ String && key == key.upcase}\n                return false\n            end\n\
    \        else\n            return false\n        end\n    end\n    return true\n\
    end", "\tdict.each_key do |key|\n\t\tif key.upcase == key.downcase\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn true\nend", "    if (dict.empty?)\n        return\
    \ false\n    end\n    is_all_lower = false\n    is_all_upper = false\n    dict.each\
    \ do |key, value|\n        if (key.is_a? String)\n            if (key.upcase ==\
    \ key)\n                is_all_upper = true\n            else\n              \
    \  is_all_lower = true\n            end\n        else\n            return false\n\
    \        end\n    end\n    return is_all_lower or is_all_upper\nend", "  if dict.empty?\n\
    \    return false\n  end\n  key0 = dict.keys[0]\n  if key0.is_a? String\n    upper\
    \ = key0.is_upcase\n    lower = key0.is_lowercase\n    if upper || lower\n   \
    \   for key in dict.keys\n        if key.is_a? String\n          if upper\n  \
    \          return false if !key.is_upcase\n          elsif lower\n           \
    \ return false if !key.is_lowercase\n          end\n        else\n          return\
    \ false\n        end\n      end\n      return true\n    else\n      return false\n\
    \    end\n  else\n    return false\n  end\nend", "  if dict.empty?\n    return\
    \ false\n  end\n  dict.each do |key, value|\n    if key.is_a?(String) == false\n\
    \      return false\n    end\n  end\n  dict.each do |key, value|\n    if key.upcase\
    \ == key\n      dict.each do |key, value|\n        if key.downcase == key\n  \
    \        return false\n        end\n      end\n    end\n  end\n  dict.each do\
    \ |key, value|\n    if key.downcase == key\n      dict.each do |key, value|\n\
    \        if key.upcase == key\n          return false\n        end\n      end\n\
    \    end\n  end\n  return true\nend\np check_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"})\np check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"\
    banana\"})\np check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"\
    })\np check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"\
    })\np check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })", "  (dict.keys\
    \ & dict.keys.map {|k| k.upcase}).empty? ? true : false\nend", "  # your code\
    \ here\nend", "    if dict.keys[0].upcase == dict.keys[0]\n        return true\n\
    \    else \n        return false\n    end\nend", "\nend\nputs check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"})  # prints \"True\"\nputs check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})  # prints \"False\"\nputs\
    \ check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"})  # prints\
    \ \"False\"\nputs check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"})  # prints \"False\"\nputs check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })  # prints \"True\"", "  list = []\n  return false if dict.empty?\n\
    \  dict.each { |key, value| list << key.swapcase! }\n  if list.first == list.last\n\
    \    return true\n  else\n    return false\n  end\nend", "    if dict.size ==\
    \ 0\n        return false\n    elsif dict.all? {|key, value| key == key.downcase}\
    \ || dict.all? {|key, value| key == key.upcase}\n        return true\n    else\n\
    \        return false\n    end\nend", "  dict.each do |k,v|\n    if k.downcase\
    \ != k && k.upcase != k\n      return false\n    end\n  end\n  return true\nend",
  "    is_upper = false\n    is_lower = false\n    if dict.keys.length == 0 \n   \
    \     return false\n    else\n        dict.keys.each do |key|\n            if\
    \ key === key.upcase\n                is_upper = true\n            elsif key ===\
    \ key.downcase\n                is_lower = true\n            else\n          \
    \      return false\n            end\n        end\n    end\n    if is_upper ==\
    \ is_lower\n        return false\n    else\n        return true\n    end\nend\n\
    puts check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) # should return True.\n\
    puts check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) #\
    \ should return False.\nputs check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) # should return False.\nputs check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) # should return False.\nputs check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) # should return True.", "  if (dict.empty?)\n\
    \    return false\n  else\n    is_string_lowercase = true\n    is_string_uppercase\
    \ = true\n    dict.each_key { |key|\n      if (key.is_a? String)\n        if (key\
    \ != key.downcase)\n          is_string_lowercase = false\n        end\n     \
    \   if (key != key.upcase)\n          is_string_uppercase = false\n        end\n\
    \      else\n        return false\n      end\n    }\n    return is_string_lowercase\
    \ || is_string_uppercase\n  end\nend", "  dict.each_key do |k|\n    return false\
    \ if k.upcase != k || k.downcase != k\n  end\n  true\nend", "  # check if dictionary\
    \ is empty, return false if it is\n  if dict.empty?\n    return false\n  end\n\
    \  # set default flag to true\n  flag = true\n  # check if first key is upcase,\
    \ if not, flag is set to false,\n  # if first key is upcase, flag is set to true\n\
    \  if dict.keys[0].upcase == dict.keys[0]\n    flag = true\n  else\n    flag =\
    \ false\n  end\n  # iterate over keys, if any key is lowercase when flag is true,\n\
    \  # return false, and same for upcase when flag is false, return false\n  dict.keys.each\
    \ do |key|\n    if flag\n      if key.downcase == key\n        return false\n\
    \      end\n    else\n      if key.upcase == key\n        return false\n     \
    \ end\n    end\n  end\n  # return true if no key breaks either case\n  return\
    \ true\nend", "\tdict.each_key { |key|\n\t\tif (key.match(/^[a-z]+$/) || key.match(/^[A-Z]+$/))\n\
    \t\t\tnext\n\t\telse\n\t\t\treturn false\n\t\tend\n\t}\n\treturn true\nend", " \
    \   if dict.empty?\n        return false\n    end\n    dict.each do |key, value|\n\
    \        if key.to_s.upcase == key\n            return true\n        else\n  \
    \          return false\n        end\n    end\nend", "  if dict.length == 0\n\
    \    return false\n  end\n  lower = false\n  upper = false\n  dict.each do |key,\
    \ value|\n    if key.is_a? String\n      lower = true if key == key.downcase\n\
    \      upper = true if key == key.upcase\n    else\n      return false\n    end\n\
    \  end\n  return true if lower || upper\n  return false\nend", "\tif dict.empty?\n\
    \t\treturn false\n\tend\n\tis_upper = false\n\tis_lower = false\n\tdict.each do\
    \ |key, value|\n\t\tif key == key.upcase\n\t\t\tis_upper = true\n\t\telsif key\
    \ == key.downcase\n\t\t\tis_lower = true\n\t\telse\n\t\t\treturn false\n\t\tend\n\
    \tend\n\treturn is_upper || is_lower\nend", "  # lower_case = true\n  # upper_case\
    \ = true\n  # dict.each_key { |key| lower_case = false if key.upcase != key }\n\
    \  # dict.each_key { |key| upper_case = false if key.downcase != key }\n  # lower_case\
    \ || upper_case\n  dict.keys.map(&:class).uniq.count == 1\nend", "  in_lower_case\
    \ = true\n  in_upper_case = true\n  dict.each do |key, value|\n    if (key.upcase\
    \ == key)\n      in_lower_case = false\n    else\n      in_upper_case = false\n\
    \    end\n  end\n  return (in_lower_case || in_upper_case)\nend", "  return false\
    \ if dict.empty? \n  counter = 0\n  dict.each do |key, value|\n    dict.each do\
    \ |otherkey, othervalue|\n      if key == otherkey\n        counter = counter\
    \ + 1\n      end\n    end\n  end\n  if counter > 1\n    return false\n  end\n\
    \  counter = 0\n  dict.each do |key, value|\n    dict.each do |otherkey, othervalue|\n\
    \      if value == othervalue\n        counter = counter + 1\n      end\n    end\n\
    \  end\n  if counter > 1\n    return false\n  end\n  if dict.keys[0].downcase\
    \ == dict.keys[0] || dict.keys[0].upcase == dict.keys[0]\n    return true\n  else\n\
    \    return false\n  end\nend", "\nend", "\tarr1 = []\n\tarr2 = []\n\tdict.each_key\
    \ do |key|\n\t\tif key == key.downcase\n\t\t\tarr1 << key\n\t\telsif key == key.upcase\n\
    \t\t\tarr2 << key\n\t\tend\n\tend\n\tif arr1.length == dict.length || arr2.length\
    \ == dict.length\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend", "  value_array\
    \ = dict.keys.map{|k| k.downcase}\n  value_array.uniq.length == 1\nend", "   \
    \ return false if dict.empty? \n    dict.all? { |k,v| k.is_a?(String) && k.downcase\
    \ == k } || dict.all? { |k,v| k.is_a?(String) && k.upcase == k } \nend", end,
  "\tupper_arr = []\n\tlower_arr = []\n\tdict.each do |key, value|\n\t\tif key.is_a?(String)\n\
    \t\t\tif key == key.upcase\n\t\t\t\tupper_arr << true\n\t\t\telsif key == key.downcase\n\
    \t\t\t\tlower_arr << true\n\t\t\tend\n\t\tend\n\tend\n\tif upper_arr.length ==\
    \ dict.length || lower_arr.length == dict.length\n\t\treturn true\n\tend\n\treturn\
    \ false\nend\nputs check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\nputs\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\nputs\
    \ check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"})\nputs\
    \ check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n\
    puts check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })", "  keys = dict.keys\n\
    \  keys.all? { |key| key.is_a?(String) && key.upcase == key } || keys.all? { |key|\
    \ key.is_a?(String) && key.downcase == key }\nend", "  dict.keys.each do |key|\n\
    \    return false if !key.is_a?(String)\n  end\n  lower = true\n  upper = true\n\
    \  dict.keys.each do |key|\n    lower = lower && (key.upcase == key)\n    upper\
    \ = upper && (key.downcase == key)\n  end\n  lower || upper\nend", "  islower\
    \ = false\n  isupper = false\n  allstrings = true\n  isempty = true", "  dict_keys\
    \ = dict.keys\n  dict_keys.each do |key|\n    if key.downcase != key\n      return\
    \ false\n    end\n  end\n  return true\nend\nputs check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"})\nputs check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"})\nputs check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"})\nputs check_dict_case({\"Name\":\"John\", \"Age\":\"36\",\
    \ \"City\":\"Houston\"})\nputs check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\"\
    \ })\nputs \"----------------------\"", "  return false if dict.empty?\n  has_upper_key\
    \ = false\n  has_lower_key = false\n  dict.each do |key, value|\n    if key.is_a?(String)\n\
    \      if key.upcase == key\n        has_upper_key = true\n      else\n      \
    \  has_lower_key = true\n      end\n    else\n      return false\n    end\n  end\n\
    \  return true if has_upper_key == false || has_lower_key == false\n  return false\n\
    end", "\tis_upper_case = true\n\tis_lower_case = true\n\tdict.each do |key, value|\n\
    \t\tif key.match(/[a-z]/) == nil\n\t\t\tis_lower_case = false\n\t\tend\n\t\tif\
    \ key.match(/[A-Z]/) == nil\n\t\t\tis_upper_case = false\n\t\tend\n\tend\n\tif\
    \ is_upper_case == true || is_lower_case == true\n\t\treturn true\n\telse\n\t\t\
    return false\n\tend\nend\nputs check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    })\nputs check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"\
    })\nputs check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"})\n\
    puts check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"\
    })\nputs check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })", "  if dict.keys.all?\
    \ {|k| k.is_a?(String) && (k.downcase==k || k.upcase==k)}\n    return true\n \
    \ else\n    return false\n  end\nend", "  dict.keys.each do |k|\n    return false\
    \ if k.class != String\n  end\n  dict.keys.each do |k|\n    return false if !(k\
    \ == k.downcase || k == k.upcase)\n  end\n  return true\nend", "  \nend", "  \
    \ dict.each_key do |key|\n      if (key.match(/^[a-z]*$/) == nil && key.match(/^[A-Z]*$/)\
    \ == nil)\n         return false\n      end\n   end\n   return true\nend", "\t\
    all_lower = true\n\tall_upper = true\n\tdict.each do |k,v|\n\t\tall_lower = false\
    \ if !(k.is_a?(String) && k.downcase == k)\n\t\tall_upper = false if !(k.is_a?(String)\
    \ && k.upcase == k)\n\tend\n\treturn false if !(all_lower || all_upper)\n\treturn\
    \ true\nend", "\tall_upper = true\n\tall_lower = true\n\tdict.each do |k,v|\n\t\
    \tif k.upcase == k\n\t\t\tall_lower = false\n\t\telse\n\t\t\tall_upper = false\n\
    \t\tend\n\tend\n\tif all_upper or all_lower\n\t\treturn true\n\telse\n\t\treturn\
    \ false\n\tend\nend\nputs check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n\
    puts check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n\
    puts check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"})\nputs\
    \ check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n\
    puts check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })", "  dict.keys.all?{|key|\
    \ key.downcase == key} || dict.keys.all?{|key| key.upcase == key}\nend", "  keys\
    \ = dict.keys\n  if keys == []\n    return false\n  end\n  test_against = keys[0]\n\
    \  for i in 0..keys.length - 1\n    if keys[i] != test_against.upcase && keys[i]\
    \ != test_against.downcase\n      return false\n    end\n  end\n  return true\n\
    end", "\nend", "  empty = true\n  if dict.empty?\n    return empty\n  end\n  key_one\
    \ = dict.keys[0]\n  if key_one.is_a?(String)\n    if key_one.downcase == key_one\n\
    \      down = true\n    else\n      down = false\n    end\n    if key_one.upcase\
    \ == key_one\n      up = true\n    else\n      up = false\n    end\n  end\n  dict.each\
    \ do |key, val|\n    if key.is_a?(String)\n      if down\n        if key.downcase\
    \ != key\n          return false\n        end\n      elsif up\n        if key.upcase\
    \ != key\n          return false\n        end\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\n  return true\nend",
  "  # initialize flag variables\n  upper = false\n  lower = false\n  # if the dictionary\
    \ is empty return false\n  if dict.empty?\n    return false\n  end\n  # iterate\
    \ over the keys\n  dict.each do |k,v|\n    # check if the key is upper case\n\
    \    if k.upcase == k\n      upper = true\n    else\n      upper = false\n   \
    \ end\n    # check if the key is lower case\n    if k.downcase == k\n      lower\
    \ = true\n    else\n      lower = false\n    end\n  end\n  # return true if all\
    \ upper or all lower case\n  if upper or lower\n    return true\n  else\n    return\
    \ false\n  end\nend", "  if dict.keys[0].downcase != dict.keys[0] \n    return\
    \ false\n  else\n    return true\n  end\nend", "  case_types = []\n  dict.each_key\
    \ { |key| case_types << key.class }\n  case_types.uniq.length == 1\nend", "  dict_keys\
    \ = dict.keys\n  if dict_keys.any?{|key| key.is_a? String }\n    dict_keys.all?{|key|\
    \ key.upcase == key} || \n    dict_keys.all?{|key| key.downcase == key}\n  else\n\
    \    false\n  end\nend", "  lowercase = dict.keys.all?{|key| key == key.downcase}\n\
    \  uppercase = dict.keys.all?{|key| key == key.upcase}\n  lowercase or uppercase\n\
    end", "    dict.all? { |k,v| k.upcase == k} || dict.all? { |k,v| k.downcase ==\
    \ k}\nend", "  all_lower = true\n  all_upper = true\n  dict.each do |key, value|\n\
    \    if (key.downcase == key)\n      all_upper = false\n    else\n      all_lower\
    \ = false\n    end\n  end\n  if (all_lower or all_upper)\n    return true\n  else\n\
    \    return false\n  end\nend", "  first_key = dict.keys[0]\n  if first_key.is_a?\
    \ String\n    first_type = first_key.is_a? String && first_key.eql?(first_key.downcase)\n\
    \    dict.each do |key, value|\n      return false if key.is_a? String && !(key.eql?(key.downcase)\
    \ == first_type)\n    end\n  end\n  true\nend", "  dict.each_key { |k| return\
    \ false if !(k =~ /^[a-z]+$/) && !(k =~ /^[A-Z]+$/) }\n  true\nend", "\tuppercase=true\n\
    \tdict.each_key do |key|\n\t\tif key.upcase == key\n\t\t\tuppercase=true\n\t\t\
    else\n\t\t\tuppercase=false\n\t\tend\n\tend\n\treturn uppercase\nend", "\tdict.each\
    \ do |key, value|\n\t\tif key.is_a? String\n\t\t\tif key == key.downcase\n\t\t\
    \t\t@down = true\n\t\t\telse \n\t\t\t\t@up = true\n\t\t\tend\n\t\telse\n\t\t\t\
    return false\n\t\tend\n\tend\n\tif @down && @up\n\t\treturn false\n\tend\n\treturn\
    \ true\nend", "    if dict.length == 0\n        return false\n    end\n    lowerCase\
    \ = true\n    upperCase = true\n    dict.each do |key, value|\n        if key.downcase\
    \ != key\n            lowerCase = false\n        end\n        if key.upcase !=\
    \ key\n            upperCase = false\n        end\n    end\n    return lowerCase\
    \ or upperCase\nend", "  upper = true\n  lower = true\n  dict.each do |k,v|\n\
    \    if k == k.upcase\n      lower = false\n    else\n      upper = false\n  \
    \  end\n  end\n  if upper == true || lower == true\n    return true\n  else\n\
    \    return false\n  end\nend", "  lowercase = true\n  uppercase = true\n  dict.each\
    \ do |key, value|\n    lowercase = false if key.to_s != key.to_s.downcase\n  \
    \  uppercase = false if key.to_s != key.to_s.upcase\n  end\n  lowercase || uppercase\n\
    end", "  dict.keys.each do |key|\n    return false if (key.upcase != key && key.downcase\
    \ != key)\n  end\n  true\nend", "  check_lower_case = true\n  check_upper_case\
    \ = true\n  dict.each do |key, value|\n    check_lower_case = false if !key.downcase.eql?(key)\n\
    \    check_upper_case = false if !key.upcase.eql?(key)\n  end\n  puts check_lower_case\
    \ || check_upper_case\nend", "  if dict.empty?\n    return false\n  end\n  lower\
    \ = []\n  upper = []\n  dict.each do |k,v|\n    lower << k if k == k.downcase\n\
    \    upper << k if k == k.upcase\n  end\n  lower.length == dict.length || upper.length\
    \ == dict.length\nend", "  dict.keys.all? { |k| k == k.upcase } || dict.keys.all?\
    \ { |k| k == k.downcase }\nend", "    return false if dict.empty?\n    all_lower\
    \ = true\n    all_upper = true\n    dict.each do |key, val|\n        all_lower\
    \ = false if key.upcase == key\n        all_upper = false if key.downcase == key\n\
    \    end\n    all_lower || all_upper\nend", "  if dict.empty?\n    false\n  elsif\
    \ dict.keys.all? {|key| key.downcase == key}\n    true\n  elsif dict.keys.all?\
    \ {|key| key.upcase == key}\n    true\n  else\n    false\n  end\nend", "  dict_upper\
    \ = dict.each_key.all? { |key| key == key.upcase }\n  dict_lower = dict.each_key.all?\
    \ { |key| key == key.downcase }\n  dict_empty = dict.length == 0", "    #Check\
    \ to see if the dictionary is empty.\n    if dict.empty? == true\n        puts\
    \ \"The dictionary is empty.\"\n        return false\n    else\n        #Assume\
    \ each key is a string in upper case.\n        upper = true\n        #Check to\
    \ see if each key is a string in upper case.\n        dict.each_key do |key|\n\
    \            if key.is_a?(String) and key.upcase == key\n                upper\
    \ = true\n            else\n                upper = false\n                break\n\
    \            end\n        end\n        if upper == true\n            puts \"All\
    \ keys are strings in upper case.\"\n            return true\n        else\n \
    \           #Assume each key is a string in lower case.\n            lower = true\n\
    \            #Check to see if each key is a string in lower case.\n          \
    \  dict.each_key do |key|\n                if key.is_a?(String) and key.downcase\
    \ == key\n                    lower = true\n                else\n           \
    \         lower = false\n                    break\n                end\n    \
    \        end\n            if lower == true\n                puts \"All keys are\
    \ strings in lower case.\"\n                return true\n            else\n  \
    \              puts \"All keys are not strings in upper case or lower case.\"\n\
    \                return false\n            end\n        end\n    end\nend\nputs\
    \ check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\nputs check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\nputs check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"})\nputs check_dict_case({\"Name\"\
    :\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\nputs check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" })\nputs check_dict_case({})", "  if dict.length ==\
    \ 0\n    return false\n  end\n  all_upper = dict.all? { |key, value| key.upcase\
    \ == key}\n  all_lower = dict.all? { |key, value| key.downcase == key}\n  all_upper\
    \ or all_lower\nend", "  return false if dict.size == 0\n  dict.all?{|k,v| k.class\
    \ == String && k.upcase == k || k.downcase == k}\nend", '  return false if dict.empty?',
  "  dict.keys.all?(String) and dict.keys.all? { |k| k.downcase == k or k.upcase ==\
    \ k }\nend", "  keys = dict.keys\n  string_keys = keys.all? { |key| key.is_a?\
    \ String }\n  if keys.empty?\n    return false\n  elsif string_keys\n    lower_case_keys\
    \ = keys.all? { |key| key == key.downcase }\n    upper_case_keys = keys.all? {\
    \ |key| key == key.upcase }\n    return lower_case_keys || upper_case_keys\n \
    \ else\n    return false\n  end\nend", "  dict.values.each do |x|\n    return\
    \ false if x =~ /[A-Z]/\n  end\n  true\nend", "    if dict.empty?\n        return\
    \ false\n    end\n    first = dict.first[0].upcase\n    dict.each_key { |key|\n\
    \        if key.upcase != first\n            return false\n        end\n    }\n\
    \    return true\nend", "  dict.each do |key, value|\n    if dict.has_key?(key.upcase)\n\
    \      return false\n    end\n  end\n  return true\nend", "  # put your code here\n\
    end", "\nend", "  dict.keys.all? { |x| x == x.upcase } || dict.keys.all? { |x|\
    \ x == x.downcase }\nend", "    # Write your code here\n    dict.each do |k,v|\n\
    \        if k.is_a? String\n            return false if k.length == 1 && k.upcase\
    \ != k.downcase\n            return false if !k.is_a?(String) || (k.upcase !=\
    \ k && k.downcase != k)\n        end\n    end\n    return true\nend", "    count_uppercase\
    \ = 0\n    count_lowercase = 0\n    dict.each do |key, value|\n        if key\
    \ == key.upcase\n            count_uppercase += 1\n        else\n            count_lowercase\
    \ += 1\n        end\n    end\n    return false if count_uppercase == 0 && count_lowercase\
    \ == 0\n    return true if count_uppercase == dict.length\n    return true if\
    \ count_lowercase == dict.length\n    return false\nend", "  #return false if\
    \ dict is empty\n  return false if dict.empty?\n  #lcase_keys is an array that\
    \ stores the dict keys in lower case\n  lcase_keys = dict.keys.map {|x| x.downcase}\n\
    \  #ucase_keys is an array that stores the dict keys in upper case\n  ucase_keys\
    \ = dict.keys.map {|x| x.upcase}\n  #check that the dict keys are the same in\
    \ both lower case and upper case\n  return dict.keys == lcase_keys || dict.keys\
    \ == ucase_keys\nend", "  # Add code here\nend", "\nend", "\nend", "  upper_key_count\
    \ = 0\n  lower_key_count = 0\n  dict.each_key do |key|\n    upper_key_count +=\
    \ 1 if key.upcase == key\n    lower_key_count += 1 if key.downcase == key\n  end\n\
    \  if upper_key_count == dict.length || lower_key_count == dict.length\n    return\
    \ true\n  else\n    return false\n  end\nend\np check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"})\np check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"\
    B\":\"banana\"})\np check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"})\np check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"\
    Houston\"})\np check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })", "  \n\
    end", "  dict_in_lower = dict.all? { |k,v| k.downcase == k }\n  dict_in_upper\
    \ = dict.all? { |k,v| k.upcase == k }\n  return dict_in_lower || dict_in_upper\n\
    end", "  all_upper = true\n  all_lower = true\n  dict.each do |key, value|\n \
    \   all_upper = false if key.downcase == key\n    all_lower = false if key.upcase\
    \ == key\n  end\n  return true if all_upper || all_lower\n  false\nend", "   \
    \ empty = true\n    if dict == {}\n        return empty\n    end\n    low = true\n\
    \    up = true\n    dict.each do |k,v|\n        if k.upcase == k\n           \
    \ low = false\n        elsif k.downcase == k\n            up = false\n       \
    \ else\n            return false\n        end\n    end\n    return low || up\n\
    end", "\tif dict.keys.all?{|x| x==x.downcase} || dict.keys.all?{|x| x==x.upcase}\n\
    \t\treturn true\n\telse\n\t\treturn false\n\tend\nend", "  dict.keys.each do |k|\n\
    \    return false if k.upcase != k && k.downcase != k\n  end\n  return true\n\
    end\nputs check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\nputs check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\nputs check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"})\nputs check_dict_case({\"Name\"\
    :\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\nputs check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" })", "  all_upper = dict.keys.all? { |k| k == k.upcase\
    \ }\n  all_lower = dict.keys.all? { |k| k == k.downcase }\n  return false if all_upper\
    \ && all_lower\n  return false if dict.keys.empty?\n  all_upper || all_lower\n\
    end", "    if dict.keys[0].class == 'String'\n        if dict.keys[0].upcase ==\
    \ dict.keys[0]\n            return true\n        else\n            return false\n\
    \        end\n    else\n        return false\n    end\nend", "  dict.each_key\
    \ { |k| \n    if k =~ /[A-Z]/\n      if dict.each_key { |l| \n         if l =~\
    \ /[a-z]/\n           return false\n          end\n        }\n      end\n    \
    \  return true\n    end\n  }\nend", "  return false if dict.length == 0\n  first_key\
    \ = dict.keys[0]\n  dict.keys.each { |key| return false if first_key != key.downcase\
    \ && first_key != key.upcase }\n  true\nend", "\t\n\tdict.each do | key, value\
    \ |\n\t\tif key.upcase == key && key.downcase == key\n\t\t\treturn False\n\t\t\
    end\n\tend\n\treturn True\nend", "  strings = dict.keys.map(&:class)\n  if dict.length\
    \ == 0\n    false\n  elsif strings.all?(String)\n    true\n  else\n    false\n\
    \  end\nend", "  upper = dict.keys.all? { |i| i == i.upcase }\n  lower = dict.keys.all?\
    \ { |i| i == i.downcase }\n  upper || lower\nend", "\tresult = false\n\t\n\tif\
    \ dict.length == 0\n\t\tresult = false\n\telsif dict.all? {|k,v| k == k.downcase}\n\
    \t\tresult = true\n\telsif dict.all? {|k,v| k == k.upcase}\n\t\tresult = true\n\
    \telse\n\t\tresult = false\n\tend\n\t\n\treturn result\nend", "\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
