name: HumanEval_23_strlen
language: rb
prompt: "# Return length of given string\n# >>> strlen('')\n# 0\n# >>> strlen('abc')\n\
  # 3\ndef strlen(string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strlen\n\
  \    candidate = method(:strlen)\n    assert_equal(0, candidate.call(\"\"))\n  \
  \  assert_equal(1, candidate.call(\"x\"))\n    assert_equal(9, candidate.call(\"\
  asdasnakj\"))\n  end\nend\n"
completions: ["  string.length\nend", "  len = 0\n  while string[len]\n    len +=\
    \ 1\n  end\n  len\nend", "  string.length\nend", "  return 0 if string.empty?\n\
    \  string.size\nend", "  if string == ''\n    return 0\n  else\n    return 1 +\
    \ strlen(string[1..-1])\n  end\nend", "  a = 0\n  string.each_char do\n    a +=\
    \ 1\n  end\n  a\nend", "  if string.empty?\n    0\n  else\n    string.length\n\
    \  end\nend", "  # TODO\nend", "  length = 0\n  if string.length > 0\n    string.each_char\
    \ do |x|\n      length += 1\n    end\n  end\n  length\nend", "  string.chars.to_a.length\n\
    end", "  count = 0\n  while string[count] != nil\n    count += 1\n  end\n  return\
    \ count\nend", "  count = 0\n  string.each_char do |char|\n    count += 1\n  end\n\
    \  count\nend", "\t\nend", "  string.length\nend", "  string.length\nend", " \
    \ if string.empty?\n    0\n  else\n    string.size\n  end\nend", "\treturn string.length\n\
    end", "  string.length\nend", "  string.size\nend", "  i = 0\n  while string[i]\n\
    \    i += 1\n  end\n  i\nend", "  return string.length\nend", "\ti = 0\n\tcount\
    \ = 0\n\twhile i < string.length\n\t\tcount += 1\n\t\ti += 1\n\tend\n\treturn\
    \ count\nend", "  a = string.each_char.to_a\n  length = 0\n  a.each do |i|\n \
    \   length += 1\n  end\n  length\nend", "  return 0 if string.empty?\n  1 + strlen(string[1..-1])\n\
    end", "  # TODO\nend", "    return string.length\nend", "  if string.empty?\n\
    \    0\n  else\n    string.split('').length\n  end\nend", "  string.split('').map\
    \ { |c| c }.length\nend", "  str = string.split('')\n  return str.length\nend",
  "  string.length\nend", "  index = 0\n  string.each_char do\n    index += 1\n  end\n\
    \  index\nend", "  if string[0].nil?\n    0\n  else\n    strlen(string[1..-1])\
    \ + 1\n  end\nend", "  if string.empty?\n    0\n  else\n    string.length\n  end\n\
    end", "  length = 0\n  string.each_char do |char|\n    length += 1\n  end\n  length\n\
    end", "  string.length\nend", "  i = 0\n  while string[i]\n    i += 1\n  end\n\
    \  i\nend", "  if string == ''\n    0\n  else\n    str = string.split('')\n  \
    \  str.length\n  end\nend", "  count = 0\n  while string[count] != nil\n    count\
    \ += 1\n  end\n  return count\nend", "  length = 0\n  while string[length]\n \
    \   length += 1\n  end\n  length\nend", "  string.length\nend", "  string.length\n\
    end", "  i = 0\n  while string[i]\n    i += 1\n  end\n  i\nend", "  string.length\n\
    end", "    # YOUR CODE HERE\nend", "  string.length\nend", "  return string.length\n\
    end", "    count = 0\n    string.split('').each do |letter|\n        count +=\
    \ 1\n    end\n    return count\nend", "\treturn string.length\nend", "\tstring.length\n\
    end", "  return string.length\nend", "\tstring.length\nend", "    # YOUR CODE\
    \ HERE\nend", "  string.length\nend", "  count = 0\n  string.each_char do |char|\n\
    \    count += 1\n  end\n  count\nend", "  return 0 if string.empty?\n  string.length\n\
    end", "\tstring.length\nend", "  cnt = 0\n  string.each_char do |char|\n    cnt\
    \ += 1\n  end\n  cnt\nend", "    i = 0\n    while string[i]\n        i += 1\n\
    \    end\n    return i\nend", "  count = 0\n  string.each_char do |char|\n   \
    \ count += 1\n  end\n  count\nend", "\tx = 0\n\twhile (string[x] != nil)\n\t\t\
    x += 1\n\tend\n\treturn x\nend", "  count = 0\n  string.each_char do |letter|\n\
    \    count += 1\n  end\n  count\nend", "  count = 0\n  string.each_char do |char|\n\
    \    count += 1\n  end\n  count\nend", "  counter = 0\n  string.each_char do |char|\n\
    \    counter += 1\n  end\n  counter\nend", "  i = 0\n  string.each_char do\n \
    \   i += 1\n  end\n  i\nend", "  # Base case\n  return 0 if string.empty?", " \
    \ length = 0\n  counter = 0\n  while counter < string.length\n    length += 1\n\
    \    counter += 1\n  end\n  length\nend", "  string.length\nend", "\tcnt = 0\n\
    \tstring.each_char {|s| cnt += 1}\n\treturn cnt\nend", "  return string.length\n\
    end", "  string.length\nend", "  length = 0\n  string.each_char do |char|\n  \
    \  length += 1\n  end\n  length\nend", "    return string.length\nend", "  count\
    \ = 0\n  while string[count] != nil\n    count += 1\n  end\n  return count\nend",
  "  n = 0\n  string.each_char { |_c| n += 1 }\n  n\nend", "\treturn string.length\n\
    end", "  string.size\nend", "  string.length\nend", "    return string.length\n\
    end", "  string.length\nend", "  # TODO: return length of `string`\n  string.length\n\
    end", "  # TODO\nend", "    # YOUR CODE HERE\nend", "  string.length\nend", " \
    \ if string.is_a? String\n    string.length\n  else\n    nil\n  end\nend", " \
    \ return 0 if string.nil? || string.length == 0\n  1 + strlen(string[1..-1])\n\
    end", "  return 0 if string.empty?\n  string.chars.reduce(0) { |acc,_| acc + 1\
    \ }\nend", "  return 0 if string.empty?\n  string.length\nend", "  c = 0\n  for\
    \ i in string.chars\n    c = c + 1\n  end\n  c\nend", "  # YOUR CODE HERE\nend",
  "  string.length\nend", "  if string == ''\n    return 0\n  else\n    return 1 +\
    \ strlen(string[1..-1])\n  end\nend", "  counter = 0\n  string.each_char do |letter|\n\
    \    counter += 1\n  end\n  counter\nend", "  length = 0\n  return length if string.empty?\n\
    \  string.chars.each { |char| length += 1 }\n  length\nend", "  string.length\n\
    end", "  i = 0\n  while (string[i] != nil)\n    i += 1\n  end\n  return i\nend",
  "  n = 0\n  while string[n] != nil\n    n += 1\n  end\n  return n\nend", end, " \
    \ string.length\nend", "  if string == ''\n    return 0\n  else\n    string[0]\n\
    \    1 + strlen(string[1..-1])\n  end\nend", "\tstring.length\nend", "  string.length\n\
    end", "  string.length\nend", "\treturn string.length\nend", end, "  return 0\
    \ if string.empty?\n  return string.length\nend", "  string.length\nend", "  return\
    \ 0 if string.empty?\n  string.length\nend", "  # TODO\nend", "  string.length\n\
    end", "  i = 0\n  while string[i] != nil\n    i += 1\n  end\n  return i\nend",
  "  if string == ''\n    0\n  else\n    string.length\n  end\nend", "  string.length\n\
    end", "  if string.length == 0\n    0\n  else\n    string.length\n  end\nend",
  "  # Your code here\nend", "  count = 0\n  i = 0\n  while i < string.length\n  \
    \  count += 1\n    i += 1\n  end\n  count\nend", "  string.split('').length\n\
    end", "  if string == ''\n    0\n  else\n    string.length\n  end\nend", "  return\
    \ string.length\nend", "  string.length\nend", "  str.size\nend", "  count = 0\n\
    \  while string[count]\n    count += 1\n  end\n  count\nend", "  string.split(\"\
    \").count\nend", "  # <<<YOUR CODE HERE>>>\nend", "\tstring.length\nend", "  len\
    \ = 0\n  while string[len]\n    len += 1\n  end\n  len\nend", "  a = 0\n  string.each_char\
    \ do |x|\n    a += 1\n  end\n  return a\nend", "  if string == ''\n    return\
    \ 0\n  else\n    return 1 + strlen(string[1..-1])\n  end\nend", "  # http://stackoverflow.com/questions/2462631/how-to-find-the-length-of-a-string-in-ruby\n\
    \  string.length\nend", "\treturn string.length\nend", "\tresult = 0\n\tstring.each_char\
    \ { |c| result += 1 }\n\tresult\nend", "  # YOUR CODE HERE\nend", "  if string\
    \ == ''\n    return 0\n  else\n    return 1 + strlen(string[1..-1])\n  end\nend",
  "    length = 0\n    string.each_char do\n        length += 1\n    end\n    return\
    \ length\nend", "  string.length\nend", "  string.length\nend", "  # TODO: return\
    \ the length of the given string\n  string.length\nend", "  x = 0\n  string.each_char\
    \ do |char|\n    x += 1\n  end\n  return x\nend", "  if string[1] == nil\n   \
    \ return 0\n  else\n    return 1 + strlen(string[1..-1])\n  end\nend", "\tif string.empty?\n\
    \t\t0\n\telse\n\t\tstring.length\n\tend\nend", "  string.length\nend", "  count\
    \ = 0\n  string.each_char do |char|\n    count += 1\n  end\n  count\nend", " \
    \ return 0 if string.empty?\n  string.split('').map { |i| i.ord }.reduce(:+)\n\
    end", "  length = 0\n  string.each_char do |char|\n    length += 1\n  end\n  length\n\
    end", "    i = 0\n    str_length = 0\n    while i < string.length\n        str_length\
    \ += 1\n        i += 1\n    end\n    return str_length\nend", "\tl = 0\n\tstring.each_char\
    \ { l += 1 }\n\tl\nend", "    count = 0\n    string.each_char { |c| count += 1\
    \ }\n    count\nend", end, "  count = 0\n  while string[count]\n    count += 1\n\
    \  end\n  count\nend", "  string.length\nend", "  return 0 if string.empty?\n\
    \  string.length\nend", "\ti = 0\n\tstring.split('').each do\n\t\ti += 1\n\tend\n\
    \treturn i\nend", "  length = 0\n  string.each_char do |char|\n    length += 1\n\
    \  end\n  length\nend", "\t\"#{string}\".length\nend", "    string.length\nend",
  "\tcnt = 0\n\tstring.each_char do |ch|\n\t\tcnt += 1\n\tend\n\treturn cnt\nend",
  "    if string == ''\n        return 0\n    end\n    arr = string.split('')\n  \
    \  return arr.length\nend", end, end, "\tsize = 0\n\twhile string[size] != '\\\
    0'\n\t\tsize += 1\n\tend\n\treturn size\nend", "    # TODO\nend", "\tstring.length\n\
    end", "\tcounter = 0\n\tstring.each_char {|char| counter += 1}\n\tcounter\nend",
  "\tstring.length\nend", "  string.length\nend", "\tif string[0] == nil\n\t\t0\n\t\
    else\n\t\t1 + strlen(string[1..-1])\n\tend\nend", "  i = 0\n  string.each_char\
    \ do\n    i += 1\n  end\n  i\nend", "    count = 0\n    i = 0\n    while i < string.length\n\
    \        count += 1\n        i += 1\n    end\n    return count\nend", "\t# Arrays\
    \ and Hashes have a built-in method called 'length'\n\tstring.length\nend", " \
    \ if string == ''\n    0\n  else\n    string.length\n  end\nend", "  count = 0\n\
    \  for i in 0..string.length-1\n    count += 1\n  end\n  return count\nend", "\t\
    # TODO: write code here\nend", "\tarr = string.split('')\n\tarr.count\nend", " \
    \ string.chars.inject(0) { |memo, char| memo + 1 }\nend", "  # TODO: Your code\
    \ here\nend", "  # TODO:\nend", "  string.size\nend", "  # replace this code with\
    \ your implementation\n  string.length\nend", "  string.length\nend", "  return\
    \ 0 if string.empty?\n  string.split('').count\nend", "  string.split('').count\n\
    end", "  # Your code here\nend", "  string.length\nend", "  string.length\nend",
  "  string.length\nend", "  if string == ''\n    return 0\n  end\n  return string.length\n\
    end", "  string.chars.length\nend", "  array = string.split('')\n  array.length\n\
    end", "  string.length\nend", "  string.length\nend", "\treturn string.length\n\
    end", "    if string == ''\n        return 0\n    else\n        return strlen(string[1..-1])\
    \ + 1\n    end\nend", "    str_ary = string.split('')\n    str_len = 0\n    str_ary.each\
    \ do |x|\n        str_len += 1\n    end\n    return str_len\nend", "  # TODO:\
    \ Implement this function\nend", "    length = 0\n    string.each_char do |char|\n\
    \        length += 1\n    end\n    return length\nend", "  return string.length\n\
    end", "    length = 0\n    string.each_char do\n        length = length + 1\n\
    \    end\n    return length\nend", "    return 0 if string.empty?\n    string.chars.length\n\
    end", "  string.length\nend", "  count = 0\n  string.split('').each do |char|\n\
    \    count += 1\n  end\n  count\nend", '    count = 0']
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
