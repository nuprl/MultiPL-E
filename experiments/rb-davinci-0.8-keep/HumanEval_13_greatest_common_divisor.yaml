name: HumanEval_13_greatest_common_divisor
language: rb
prompt: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
  \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
  \ b)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
  \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
  \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
  \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
completions: ["  while b > 0\n    c = a % b\n    a = b\n    b = c\n  end\n  a\nend",
  "  (a > b) ? ((a % b == 0) ? b : greatest_common_divisor(b, a % b)) : ((b % a ==\
    \ 0) ? a : greatest_common_divisor(a, b % a))\nend", "    a, b = b, a if a < b\n\
    \    gcd = 1\n    for i in 2..a\n        if a % i == 0 && b % i == 0\n       \
    \     gcd = i\n        end\n    end\n    gcd\nend", "  # TODO return a number\
    \ that is the greatest common divisor of the integers a and b\nend", "  if b ==\
    \ 0\n    return a\n  else\n    return greatest_common_divisor(b, a % b)\n  end\n\
    end", "  if a == b\n    return a\n  elsif a > b\n    a % b == 0 ? b : greatest_common_divisor(b,\
    \ a % b)\n  else\n    b % a == 0 ? a : greatest_common_divisor(a, b % a)\n  end\n\
    end", "  gcd(a, b)\nend", "  if b == 0\n    return a\n  else\n    greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  # TODO: Write your code here\n  if b == 0\n    return\
    \ a\n  end\n  return greatest_common_divisor(b, a % b)\nend", "  # your solution\n\
    end", "  res = 0\n  puts \"Enter two numbers to find the greatest common divisor\"\
    \n  for divisor in 1..a \n    if (a % divisor == 0) and (b % divisor == 0)\n \
    \     res = divisor\n    end\n  end\n  res\nend", "  if b == 0\n    return a\n\
    \  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "  if a ==\
    \ b\n    a\n  elsif a > b\n    greatest_common_divisor(a - b, b)\n  else\n   \
    \ greatest_common_divisor(a, b - a)\n  end\nend", "  a, b = b, a if a < b\n  i\
    \ = b\n  while i > 0\n    return i if (a % i == 0) && (b % i == 0)\n    i -= 1\n\
    \  end\nend", "  until b == 0\n    a, b = b, a % b\n  end\n  a\nend", "\treturn\
    \ a if b == 0\n\tgreatest_common_divisor(b, a % b)\nend", "  if a % b == 0\n \
    \   b\n  else\n    greatest_common_divisor(b, a % b)\n  end\nend", "  while a\
    \ != b\n    if a > b\n      a = a - b\n    else\n      b = b - a\n    end\n  end\n\
    \  a\nend", "  # TODO: Return the greatest common divisor of a and b\n  if a ==\
    \ b\n    a\n  elsif a > b\n    greatest_common_divisor(a-b, b)\n  else\n    greatest_common_divisor(a,\
    \ b-a)\n  end\nend", "  # write your code here\n  a, b = b, a % b while b != 0\n\
    \  a\nend", "  return gcd_min(a, b) if a < b\n  gcd_min(b, a)\nend", "    if b\
    \ == 0\n        return a\n    else\n        return greatest_common_divisor(b,\
    \ a % b)\n    end\nend", "    if b > a\n        return greatest_common_divisor(b,\
    \ a)\n    end\n    if b == 0\n        return a\n    end\n    return greatest_common_divisor(b,\
    \ a % b)\nend", "  divisor = 1\n  i = 2\n  while i <= a && i <= b\n    if a %\
    \ i == 0 && b % i == 0\n      divisor = i\n    end\n    i += 1\n  end\n  divisor\n\
    end", end, "  a, b = b, a if a < b\n  i = a\n  while i > 0\n    return i if a\
    \ % i == 0 && b % i == 0\n    i -= 1\n  end\nend", end, "  if a > b\n    gcd =\
    \ b\n  else\n    gcd = a\n  end\n  while (gcd > 1)\n    if a % gcd == 0 && b %\
    \ gcd == 0\n      return gcd\n    end\n    gcd -= 1\n  end\n  return 1\nend",
  "  if b == 0\n    return a\n  else\n    return greatest_common_divisor(b, a % b)\n\
    \  end\nend", "  bigger = [a, b].max\n  smaller = [a, b].min\n  divisor = smaller\n\
    \  if divisor != 0\n    if (bigger % divisor == 0) && (smaller % divisor == 0)\n\
    \      return divisor\n    else\n      while (bigger % divisor != 0) || (smaller\
    \ % divisor != 0)\n        divisor -= 1\n      end\n    end\n  end\n  return divisor\n\
    end", "  return b == 0 ? a : greatest_common_divisor(b, a % b)\nend", "  return\
    \ a if b == 0\n  greatest_common_divisor(b, a % b)\nend", "  while (a != b)\n\
    \    if (a > b)\n      a = a - b\n    else\n      b = b - a\n    end\n  end\n\
    \  return a\nend", "  # your code here\nend", "  d = 1\n  1.upto(a) do |i|\n \
    \   if a % i == 0 && b % i == 0\n      d = i\n    end\n  end\n  d\nend", "  #\
    \ Your implementation goes here\n  # You may wish to define helper function(s)\n\
    end", "  # your code here\nend", "  if a % b == 0\n    b\n  else\n    greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "\tdividers_a = []\n\tdividers_b = []\n\tfor num in 1..a\n\
    \t\tif a % num == 0\n\t\t\tdividers_a << num\n\t\tend\n\tend\n\tfor num in 1..b\n\
    \t\tif b % num == 0\n\t\t\tdividers_b << num\n\t\tend\n\tend\n\tcommon_dividers\
    \ = dividers_a & dividers_b\n\tcommon_dividers.max\nend", "  # TODO: your code\
    \ goes here\nend", "  return a if b == 0\n  greatest_common_divisor(b, a % b)\n\
    end", "  # TODO\nend", "  # if a < b, then swap a and b\n  a, b = b, a if a <\
    \ b\n  # Euclidean Algorithm\n  # if a % b == 0, b is a gcd of a and b\n  if a\
    \ % b == 0\n    b\n  else\n    # else, recursively call gcd with b and a % b as\
    \ parameters\n    greatest_common_divisor(b, a % b)\n  end\nend", "  a, b = b,\
    \ a % b while b != 0\n  a\nend", "  if a % b == 0\n    b\n  else\n    greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  return a if b == 0\n  greatest_common_divisor(b, a %\
    \ b)\nend", "  # YOUR CODE HERE\nend", "  gcd = 1\n  (2..[a, b].min).each do |x|\n\
    \    gcd = x if a % x == 0 && b % x == 0\n  end\n  gcd\nend", "  max_divisor =\
    \ 1\n  for i in 1..a\n    if a % i == 0 && b % i == 0\n      max_divisor = i\n\
    \    end\n  end\n  return max_divisor\nend", "  a, b = b, a % b while b != 0\n\
    \  a\nend", "  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend",
  "  current_divisor = 1\n  divisor = 1\n  number = a", "  if a % b == 0\n    b\n\
    \  else\n    greatest_common_divisor(b, a % b)\n  end\nend", "  # YOUR CODE HERE\n\
    end", "\tif a == b\n\t\treturn a\n\telsif a > b\n\t\treturn greatest_common_divisor(a-b,\
    \ b)\n\telse\n\t\treturn greatest_common_divisor(a, b-a)\n\tend\nend", "  if a\
    \ < b\n    greatest_common_divisor(b, a)\n  else\n    remainder = a % b\n    if\
    \ remainder == 0\n      b\n    else\n      greatest_common_divisor(b, remainder)\n\
    \    end\n  end\nend", "  n = 1\n  t = 0\n  while n <= a && n <= b\n    if a %\
    \ n == 0 && b % n == 0\n      t = n\n    end\n    n += 1\n  end\n  t\nend", " \
    \ a, b = b, a % b while b != 0\n  a\nend", "  # Your code here\nend", "  count_1\
    \ = 0\n  n = a < b ? a : b\n  for i in 1..n\n    if a % i == 0 && b % i == 0\n\
    \      count_1 = i\n    end\n  end\n  return count_1\nend", "  # TODO\nend", " \
    \ arr = []\n  (1..a).each do |el|\n    arr << el if a % el == 0\n  end\n  arr.each\
    \ do |el|\n    return el if b % el == 0\n  end\nend", "  return a.gcd(b)\nend",
  "  (1..[a, b].min).reverse_each do |divisor|\n    return divisor if a % divisor\
    \ == 0 && b % divisor == 0\n  end\nend", "  if a.zero?\n    b\n  elsif b.zero?\n\
    \    a\n  else\n    greatest_common_divisor(b, a % b)\n  end\nend", "  return\
    \ 1 if a == b\n  arr = (1..a).to_a.select { |x| a % x == 0 } & (1..b).to_a.select\
    \ { |x| b % x == 0 }\n  arr.max\nend", "  while a % b != 0\n    a, b = b, a %\
    \ b\n  end\n  b\nend", "  while a != b\n    if a > b\n      a = a - b\n    else\n\
    \      b = b - a\n    end\n  end\n  return a\nend", "  max = [a, b].max\n  min\
    \ = [a, b].min\n  until min == 0\n    max, min = min, max % min\n  end\n  max\n\
    end", "  return 0 if a == 0 || b == 0\n  return b if a % b == 0\n  greatest_common_divisor(b,\
    \ a % b)\nend", "\t# your code here\n\tif a == 0 or b == 0\n\t\treturn 0\n\tend\n\
    \tif a == b\n\t\treturn a\n\tend\n\tif a > b\n\t\tgreatest_common_divisor(a-b,\
    \ b)\n\telse\n\t\tgreatest_common_divisor(a, b-a)\n\tend\nend", "  # Enter your\
    \ code here...\nend", "  return a if b == 0\n  return b if a == 0\n  a, b = b,\
    \ a % b\n  greatest_common_divisor(a, b)\nend", "  gcd = 1\n  i = 1\n  while i\
    \ <= a && i <= b\n    if a % i == 0 && b % i == 0\n      gcd = i\n    end\n  \
    \  i += 1\n  end\n  gcd\nend", "  # TODO\nend", "  if a%b == 0\n    b\n  else\n\
    \    greatest_common_divisor(b, a%b)\n  end\nend", "  # TODO: return a greatest\
    \ common divisor of two integers a and b\n  # >>> greatest_common_divisor(3, 5)\n\
    \  # 1\n  # >>> greatest_common_divisor(25, 15)\n  # 5\n  if a > b\n    div =\
    \ b\n  else\n    div = a\n  end\n  until div == 0\n    if a % div == 0 && b %\
    \ div == 0\n      return div\n    else\n      div -= 1\n    end\n  end\nend",
  "    if a == b\n        return a\n    end\n    if a > b\n        return greatest_common_divisor(a\
    \ - b, b)\n    else\n        return greatest_common_divisor(a, b - a)\n    end\n\
    end", "\tif a == b\n\t\treturn a\n\telsif a > b\n\t\treturn greatest_common_divisor(a-b,\
    \ b)\n\telse\n\t\treturn greatest_common_divisor(a, b-a)\n\tend\nend", "  a, b\
    \ = b, a % b until b.zero?\n  a.abs\nend", "  gcd = 1\n  i = 2\n  while i <= [a,\
    \ b].min\n    if a % i == 0 && b % i == 0\n      gcd = i\n    end\n    i += 1\n\
    \  end\n  gcd\nend", "  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend",
  "  while b != 0\n    # a % b == a % b % b\n    # a % b == a - b * (a / b)\n    #\
    \ == a - b * a / b\n    a, b = b, a % b\n  end\n  a\nend", "  #Write your code\
    \ here\n  puts \"gcd of #{a} and #{b} is #{(a.gcd(b))}\"\nend", "  # TODO: implement\
    \ using euclid's algo\n  if b == 0\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  a, b = b, a % b while b != 0\n  a\nend", "  # TODO:\
    \ implement me\nend", "  a, b = b, a % b until b.zero?\n  a.abs\nend", "\tif a\
    \ == b\n\t\treturn a\n\telsif a > b\n\t\tgreatest_common_divisor(a-b, b)\n\telse\n\
    \t\tgreatest_common_divisor(a, b-a)\n\tend\nend", "  max = [a, b].max\n  min =\
    \ [a, b].min\n  while min != 0\n    max, min = min, max % min\n  end\n  max\n\
    end", "  # TODO: Return a greatest common divisor of two integers\n  return a\
    \ if b == 0\n  greatest_common_divisor(b, a % b)\nend", "  if a == b\n    a\n\
    \  elsif a > b\n    greatest_common_divisor(a - b, b)\n  else\n    greatest_common_divisor(a,\
    \ b - a)\n  end\nend", "  while b != 0\n    r = a % b\n    a = b\n    b = r\n\
    \  end\n  a\nend", "  # TODO: find and return greatest common divisor of two numbers\n\
    \  # can not equal zero\n  if a == 0\n    return b\n  end\n  if b == 0\n    return\
    \ a\n  end\n  if a > b\n    return greatest_common_divisor(a-b, b)\n  else\n \
    \   return greatest_common_divisor(a, b-a)\n  end\nend", "  # remove that line\
    \ and put your code here\nend", "    while a != b\n        if a > b\n        \
    \    a = a - b\n        else\n            b = b - a\n        end\n    end\n  \
    \  return a\nend", "  #\n  # YOUR CODE HERE\n  #\nend", "  i = 1\n  result = 0\n\
    \  while i <= a and i <= b\n    if a % i == 0 and b % i == 0\n      result = i\n\
    \    end\n    i += 1\n  end\n  return result\nend", "  divisor = 0\n  common_divisors\
    \ = []\n  1.upto(a) do |x|\n    common_divisors << x if a % x == 0\n  end\n  1.upto(b)\
    \ do |x|\n    common_divisors << x if b % x == 0\n  end\n  divisor = common_divisors.first\n\
    \  common_divisors.each do |x|\n    divisor = x if common_divisors.count(x) >\
    \ 1\n  end\n  divisor\nend", "  # write your code here\nend", "  return a if b\
    \ == 0\n  greatest_common_divisor(b, a % b)\nend", "  a, b = b, a if a < b\n \
    \ a % b == 0 ? b : greatest_common_divisor(b, a % b)\nend", "  return a if b ==\
    \ 0\n  greatest_common_divisor(b, a % b)\nend", "  a, b = b, a % b until b.zero?\n\
    \  a.abs\nend", "\t# if a == 0 || b == 0\n\t# \treturn 0\n\t# end\n\tif a == 0\n\
    \t\treturn b\n\tend\n\tif b == 0\n\t\treturn a\n\tend\n\tif a == b\n\t\treturn\
    \ a\n\tend\n\tif a > b\n\t\treturn greatest_common_divisor(a-b, b)\n\telse\n\t\
    \treturn greatest_common_divisor(a, b-a)\n\tend\nend", end, "  # TODO: return\
    \ greatest common divisor of two integers\n  while (a != b)\n  \tif (a > b)\n\
    \  \t\ta = a - b\n  \telse\n  \t\tb = b - a\n  \tend\n  end\n  return a\nend",
  "  return a if b == 0\n  greatest_common_divisor(b, a % b)\nend", "  if a > b\n\
    \    a, b = b, a\n  end\n  while a != 0\n    a, b = b % a, a\n  end\n  b\nend",
  "    if a < b\n        a, b = b, a\n    end\n    while b != 0\n        a, b = b,\
    \ a % b\n    end\n    return a\nend", "  if b != 0\n    a % b\n  else\n    a\n\
    \  end\nend", "    d = 1\n    k = 2\n    while k <= a && k <= b\n        if a\
    \ % k == 0 && b % k == 0\n            d = k\n        end\n        k += 1\n   \
    \ end\n    return d\nend", "  return a if b == 0\n  return b if a == 0\n  c =\
    \ a % b\n  return greatest_common_divisor(b, c)\nend", "  case\n  when a < 0 ||\
    \ b < 0 then raise ArgumentError\n  when a == 0 || b == 0 then [a, b].max\n  else\n\
    \    divisor = 1\n    max = [a, b].max\n    while divisor <= max\n      return\
    \ divisor if a % divisor == 0 && b % divisor == 0\n      divisor += 1\n    end\n\
    \  end\nend", "  # TODO: implement the method\nend", "    # write your code here\n\
    \    return a if b == 0\n    return b if a == 0\n    remainder = a % b\n    greatest_common_divisor(b,\
    \ remainder)\nend", "  if a==b\n    return a\n  end\n  if a>b\n    a_new=a-b\n\
    \    return greatest_common_divisor(a_new,b)\n  else\n    b_new=b-a\n    return\
    \ greatest_common_divisor(a,b_new)\n  end", "\tputs \"Please enter the first positive\
    \ integer:\"\n\ta = gets.chomp.to_i\n\tputs \"Please enter the second positive\
    \ integer:\"\n\tb = gets.chomp.to_i\n\tif a == 0 || b == 0\n\t\treturn 0\n\telsif\
    \ a > b\n\t\treturn greatest_common_divisor(a-b, b)\n\telsif a < b\n\t\treturn\
    \ greatest_common_divisor(a, b-a)\n\telse\n\t\treturn a\n\tend\nend", "  if a\
    \ % b == 0\n    b\n  else\n    greatest_common_divisor(b, a % b)\n  end\nend",
  "  # Write your code here\n  a, b = a.abs, b.abs\n  if a == 0 || b == 0\n    return\
    \ a + b\n  end\n  divisor = 1\n  for i in 2..[a, b].min\n    if a % i == 0 &&\
    \ b % i == 0\n      divisor = i\n    end\n  end\n  divisor\nend", "  (a > b) ?\
    \ ((a % b == 0) ? b : greatest_common_divisor(b, a % b)) : ((b % a == 0) ? a :\
    \ greatest_common_divisor(a, b % a))\nend", "  if a == b then a\n  elsif a > b\
    \ then greatest_common_divisor(a - b, b)\n  else greatest_common_divisor(a, b\
    \ - a)\n  end\nend", "  a, b = b, a % b until b.zero?\n  a.abs\nend", "\t# If\
    \ divisor is larger than dividend, switch the variables\n\tif a < b\n\t\ttemp\
    \ = a\n\t\ta = b\n\t\tb = temp\n\tend\n\t\n\t# Exhaustive division to find the\
    \ greatest common divisor\n\twhile a % b != 0\n\t\ttemp = a % b\n\t\ta = b\n\t\
    \tb = temp\n\tend\n\tb\nend", "    # Returns a single integer\n    if b == 0\n\
    \      return a\n    else\n      return greatest_common_divisor(b, a % b)\n  \
    \  end\nend", "  a, b = a.abs, b.abs\n  if a > b\n    a, b = b, a\n  end\n  while\
    \ b > 0\n    a, b = b, a % b\n  end\n  a\nend", "\tgcd = 1\n\tif a > b\n\t\tmin\
    \ = b\n\telse\n\t\tmin = a\n\tend\n\t(1..min).each do |num|\n\t\tif (a % num ==\
    \ 0) && (b % num == 0)\n\t\t\tgcd = num\n\t\tend\n\tend\n\treturn gcd\nend", " \
    \ if b == 0\n    return a\n  else\n    return greatest_common_divisor(b, a % b)\n\
    \  end\nend", "  gcd = a % b\n  while gcd != 0\n    a = b\n    b = gcd\n    gcd\
    \ = a % b\n  end\n  b\nend", "  return b if a == 0\n  return a if b == 0\n  a,\
    \ b = b, a % b while b != 0\n  a\nend", "  unless a > 0 && b > 0\n    raise 'arguments\
    \ must be greater than 0'\n  end", end, "  if b == 0\n    return a\n  else\n \
    \   return greatest_common_divisor(b, a % b)\n  end\nend", "  (1..a).to_a.reverse.detect\
    \ { |i| a % i == 0 && b % i == 0 }\nend", "  if a == b\n    a\n  elsif a > b\n\
    \    greatest_common_divisor(a - b, b)\n  else\n    greatest_common_divisor(a,\
    \ b - a)\n  end\nend", "  # Write your code here\nend", "  (a * b).abs / lowest_common_multiple(a,\
    \ b)\nend", "  max = [a, b].max\n  min = [a, b].min\n  if max % min == 0\n   \
    \ return min\n  else\n    return greatest_common_divisor(min, max % min)\n  end\n\
    end", "  a, b = b, a if a < b\n  return greatest_common_divisor(a-b, b) if a >\
    \ b\n  a\nend", "  if b == 0\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if b == 0\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "\t# Write your code here.\n\tif a == 0\n\t\tb\n\telsif\
    \ b == 0\n\t\ta\n\telsif a == b\n\t\ta\n\telsif a > b\n\t\tgreatest_common_divisor(a\
    \ - b, b)\n\telse\n\t\tgreatest_common_divisor(a, b - a)\n\tend\nend", "  # your\
    \ code here\nend", "  divisor = 0\n  (1..[a, b].min).each do |i|\n    divisor\
    \ = i if a % i == 0 && b % i == 0\n  end\n  divisor\nend", "  a, b = b, a if a\
    \ < b\n  if b == 0\n    a\n  else\n    greatest_common_divisor(b, a % b)\n  end\n\
    end", "  # TODO\nend", "  a, b = b, a % b until b.zero?\n  a.abs\nend", "  max\
    \ = a > b ? a : b\n  min = a > b ? b : a\n  return min if max % min == 0\n  greatest_common_divisor(max\
    \ % min, min)\nend", "  if b == 0\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "    if a % b == 0\n        return b\n    else\n      \
    \  greatest_common_divisor(b, a % b)\n    end\nend", "  if a > b\n    gcd(a, b)\n\
    \  else\n    gcd(b, a)\n  end\nend", "  return b if a == 0\n  return a if b ==\
    \ 0\n  remainder = a % b\n  greatest_common_divisor(b, remainder)\nend", "  a,\
    \ b = b, a if a < b\n  return a if b == 0\n  greatest_common_divisor(b, a % b)\n\
    end", "  if a == b\n    a\n  elsif a > b\n    greatest_common_divisor(a - b, b)\n\
    \  else\n    greatest_common_divisor(a, b - a)\n  end\nend", "  while a != b\n\
    \    if a > b\n      a = a - b\n    else\n      b = b - a\n    end\n  end\n  a\n\
    end", "  return a if b == 0\n  return b if a == 0\n  greatest_common_divisor(b,\
    \ a % b)\nend", "  lcd = 1\n  (2..[a, b].min).each do |i|\n    if (a % i == 0)\
    \ && (b % i == 0)\n      lcd = i\n    end\n  end\n  lcd\nend", "  if a < b\n \
    \   greatest_common_divisor(b, a)\n  elsif a % b == 0\n    b\n  else\n    greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  # your code here\nend", "  return a if b == 0\n  greatest_common_divisor(b,\
    \ a % b)\nend", "  # You need to implement the method stub.\n  x = a\n  y = b\n\
    \  while (a != 0) do\n    x = a\n    a = b % a\n    b = x\n  end\n  return y /\
    \ x\nend", "  while b > 0\n    temp = b\n    b = a % b\n    a = temp\n  end\n\
    \  a\nend", "\tif a > b\n\t\ta, b = b, a\n\tend\n\twhile b > 0\n\t\ta, b = b,\
    \ a % b\n\tend\n\treturn a\nend", "  a, b = b, a if a < b\n  while b > 0\n   \
    \ a, b = b, a % b\n  end\n  a\nend", "  # write your code here\nend", "  while\
    \ a != b\n    a, b = [a, b].minmax\n    a -= b\n  end\n  a\nend", "  a, b = b,\
    \ a if a < b\n  return a if b == 0\n  greatest_common_divisor(b, a % b)\nend",
  "  return a if b == 0\n  greatest_common_divisor(b, a % b)\nend", "  a, b = b, a\
    \ % b while b > 0\n  a\nend", "  (1..a).reverse_each do |i|\n    return i if a\
    \ % i == 0 && b % i == 0\n  end\nend", "  if a % b == 0\n    b\n  else\n    greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  while a % b != 0\n    a, b = b, a % b\n  end\n  b\n\
    end", "  return 1 if a == b\n  return 1 if a == 1 || b == 1\n  return a if b ==\
    \ 0\n  return b if a == 0\n  a, b = b, a if a < b\n  greatest_common_divisor(b,\
    \ a % b)\nend", "  if a == b\n    a\n  elsif a % b == 0\n    b\n  elsif b % a\
    \ == 0\n    a\n  elsif a > b\n    greatest_common_divisor(a - b, b)\n  else\n\
    \    greatest_common_divisor(a, b - a)\n  end\nend", "  a, b = b, a % b while\
    \ b > 0\n  a\nend", "  a, b = a.abs, b.abs\n  return b if a == 0\n  return a if\
    \ b == 0\n  greatest_common_divisor(b, a % b)\nend", "  # todo\nend", "  a, b\
    \ = b, a if a < b\n  return a if b == 0\n  greatest_common_divisor(b, a % b)\n\
    end", "  a, b = b, a if a < b\n  return a if b == 0\n  greatest_common_divisor(b,\
    \ a % b)\nend", "  if a == b\n    a\n  elsif a > b\n    greatest_common_divisor(a\
    \ - b, b)\n  else\n    greatest_common_divisor(a, b - a)\n  end\nend", "  while\
    \ b != 0\n    a, b = b, a % b\n  end\n  a\nend", "  if a == b\n    a\n  elsif\
    \ a > b\n    greatest_common_divisor(a - b, b)\n  else\n    greatest_common_divisor(a,\
    \ b - a)\n  end\nend", "  while a != b\n    if a > b\n      a = a - b\n    else\n\
    \      b = b - a\n    end\n  end\n  return a\nend", "  a, b = b, a % b while b\
    \ != 0\n  a\nend", "  while b != 0\n    a, b = b, a % b\n  end\n  a\nend", " \
    \ if a == b\n    return a\n  end\n  if a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend",
  "  max = [a, b].max\n  min = [a, b].min\n  gcd = min\n  if max % min == 0\n    return\
    \ min\n  else\n    (1..min).each do |num|\n      if max % num == 0 && min % num\
    \ == 0\n        gcd = num\n      end\n    end\n  end\n  gcd\nend", "  # Your code\
    \ here\nend", "\t# TODO : return a greatest common divisor of two integers a and\
    \ b\nend", "    divisor = a < b ? a : b\n    while divisor > 0\n        if a %\
    \ divisor == 0 && b % divisor == 0\n            return divisor\n        end\n\
    \        divisor -= 1\n    end\nend", "  if a % b == 0\n    b\n  else\n    greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  return a if b == 0\n  greatest_common_divisor(b, a %\
    \ b)\nend", "  return b if a % b == 0\n  greatest_common_divisor(b, a % b)\nend",
  "\twhile b != 0\n\t\ttemp = b\n\t\tb = a % b\n\t\ta = temp\n\tend\n\treturn a\n\
    end", "  # TODO: return the greatest common divisor of a and b\nend", "  while\
    \ b != 0\n    rem = a % b\n    a = b\n    b = rem\n  end\n  a\nend", "  puts \"\
    a = #{a}, b = #{b}\"\n  if a == b\n    return a\n  end\n  if a > b\n    greatest_common_divisor(a\
    \ - b, b)\n  else\n    greatest_common_divisor(a, b - a)\n  end\nend", "  a =\
    \ a.abs\n  b = b.abs\n  if a == 0\n    return b\n  end\n  if b == 0\n    return\
    \ a\n  end\n  if a > b\n    return greatest_common_divisor(a - b, b)\n  else\n\
    \    return greatest_common_divisor(a, b - a)\n  end\nend", "  list_a = divisors(a)\n\
    \  list_b = divisors(b)\n  smaller_list = list_a.size < list_b.size ? list_a :\
    \ list_b\n  gcd = 1\n  smaller_list.each do |n|\n    if list_a.include?(n) &&\
    \ list_b.include?(n)\n      gcd = n\n    end\n  end\n  gcd\nend", "  return a\
    \ if b == 0\n  greatest_common_divisor(b, a % b)\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
