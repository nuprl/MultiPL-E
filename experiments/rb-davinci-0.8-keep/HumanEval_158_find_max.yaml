name: HumanEval_158_find_max
language: rb
prompt: "# Write a function that accepts a list of strings.\n# The list contains different\
  \ words. Return the word with maximum number\n# of unique characters. If multiple\
  \ strings have maximum number of unique\n# characters, return the one which comes\
  \ first in lexicographical order.\n# find_max([\"name\", \"of\", \"string\"]) ==\
  \ \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n# find_max([\"\
  aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n\
  \    candidate = method(:find_max)\n    assert_equal(\"string\", candidate.call([\"\
  name\", \"of\", \"string\"]))\n    assert_equal(\"enam\", candidate.call([\"name\"\
  , \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
  , \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"\
  ]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"this\", \"game\"\
  , \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"\
  are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\"\
  , \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
  this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"\
  ]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n\
  \  end\nend\n"
completions: ["  if words.any?\n    count = 0\n    word = \"\"\n    words.each do\
    \ |w|\n      unique_chars = w.chars.uniq.length\n      if unique_chars > count\n\
    \        count = unique_chars\n        word = w\n      end\n    end\n    word\n\
    \  else\n    \"\"\n  end\nend", "  max_word = \"\"\n  max_num = 0\n  words.each\
    \ do |word|\n    num = word.chars.uniq.length\n    if num > max_num\n      max_num\
    \ = num\n      max_word = word\n    end\n  end\n  max_word\nend", "  if words.nil?\n\
    \    return nil\n  end\n  if words.empty?\n    return \"\"\n  end\n  unique_max\
    \ = \"\"\n  unique_max_count = 0\n  words.each do |word|\n    unique_count = word.chars.uniq.count\n\
    \    if unique_count > unique_max_count\n      unique_max = word\n      unique_max_count\
    \ = unique_count\n    end\n  end\n  return unique_max\nend", "  # Your code goes\
    \ here.\n  # You can also use a helper function.\n  max = {word: words[0], count:\
    \ words[0].length}\n  words.each do |word|\n    if max[:count] < word.length\n\
    \      max[:word] = word\n      max[:count] = word.length\n    end\n  end\n  max[:word]\n\
    end", "  words.max_by { |word| word.chars.uniq.size }\nend", "  words.max_by {\
    \ |word| word.chars.uniq.count }\nend", "  words.inject(words[0]) { |max, word|\
    \ max.size > word.size ? max : word }\nend", "  words.sort! { |a, b| b.length\
    \ <=> a.length }\n  unique_char_counts = words.map { |word| word.split('').uniq.length\
    \ }\n  max_unique_char_count = unique_char_counts.max\n  if unique_char_counts.count(max_unique_char_count)\
    \ == 1\n    max_unique_char_count = unique_char_counts.index(max_unique_char_count)\n\
    \    words[max_unique_char_count]\n  else\n    words[0]\n  end\nend", "  return\
    \ nil if words.nil? || words.empty?\n  word_dict = {}\n  words.each do |word|\n\
    \    word_dict[word] = count_uniq_chars(word)\n  end\n  word_dict = word_dict.sort_by\
    \ { |k, v| v }\n  return word_dict.last[0]\nend", "  max = words.first.split('').uniq.count\n\
    \  result = words.first\n  words.each do |word|\n    if word.split('').uniq.count\
    \ > max\n      max = word.split('').uniq.count\n      result = word\n    end\n\
    \  end\n  result\nend", "  uniq_arr = []\n  max_uniq = 0\n  words.each do |word|\n\
    \    uniq_arr << word.chars.uniq.count\n  end\n  max_uniq = uniq_arr.max\n  index\
    \ = uniq_arr.index(max_uniq)\n  words[index]\nend", "    max_word = \"\"\n   \
    \ max_unique_letter = 0\n    words.each do |word|\n        unique_letter = word.chars.uniq.count\n\
    \        if unique_letter > max_unique_letter\n            max_unique_letter =\
    \ unique_letter\n            max_word = word\n        end\n    end\n    return\
    \ max_word\nend", "  max = 0\n  max_word = \"\"\n  words.each do |word|\n    if\
    \ word.chars.uniq.length > max\n      max = word.chars.uniq.length\n      max_word\
    \ = word\n    end\n  end\n  max_word\nend", "  words.each do |word|\n    word.chars.uniq.each\
    \ do |uniq_char|\n      return word if uniq_char == word.chars.length\n    end\n\
    \  end\nend", "  words.sort_by{|word| word.chars.to_a.uniq.length }.last\nend",
  "  words.map { |x| [x, x.split('').uniq.count] }.sort_by { |x| [x[1], x[0]] }.last[0]\n\
    end", "  # your code here\nend", "  arr = words.map { |word| word.split('').uniq.length\
    \ }\n  max = arr.max\n  index = arr.index(max)\n  return words[index]\nend", " \
    \ words.sort_by! { |word| word.chars.uniq.count }\n  words.last\nend", "  # TODO\n\
    end", "  words.map { |word| [word, word.chars.uniq.count] }.to_h.max_by { |k,\
    \ v| v }[0]\nend", "  # TODO: Implement this function\nend", "  # take the first\
    \ word in words\n  # get the number of unique characters in the first word\n \
    \ # save the number of unique characters in a new hash - keys are the word, values\
    \ are the number of unique characters\n  # take the second word in words\n  #\
    \ get the number of unique characters in the second word\n  # compare the number\
    \ of unique characters in the second word to the number in the first word\n  #\
    \ save the number of unique characters in the same hash as the first word\n  #\
    \ if the number of unique characters in the second word is larger, delete the\
    \ first word from the hash\n  # compare the number of unique characters in the\
    \ third word to the number in the first word and the second word\n  # save the\
    \ number of unique characters in the same hash as the first word and the second\
    \ word\n  # if the number of unique characters in the third word is larger, delete\
    \ the first word and the second word from the hash\n  # etc.\n  # the last word\
    \ left in the hash is the word with the largest number of unique characters\n\
    \  hash = {}\n  words.each do |word|\n    number_of_unique_characters = word.chars.uniq.length\n\
    \    if hash.empty?\n      hash[word] = number_of_unique_characters\n    else\n\
    \      hash.each do |k, v|\n        if number_of_unique_characters > v\n     \
    \     hash.delete(k)\n        end\n      end\n      hash[word] = number_of_unique_characters\n\
    \    end\n  end\n  hash.keys.first\nend", "  if words.empty?\n    return nil\n\
    \  end\n  unique_words = {}\n  words.each do |word|\n    unique_words[word] =\
    \ word.chars.uniq.size\n  end\n  result = words.select { |word| unique_words[word]\
    \ == unique_words.values.max }\n  result.sort[0]\nend", "  current_max = []\n\
    \  words.each do |word|\n    if current_max.length < word.length\n      current_max\
    \ = word\n    end\n  end\n  current_max\nend\np find_max([\"name\", \"of\", \"\
    string\"])\np find_max([\"name\", \"enam\", \"game\"])\np find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"])", "  return words.first if words.length == 1\n  max_word =\
    \ words.first\n  words.each do |word|\n    if word.length > max_word.length\n\
    \      max_word = word\n    elsif word.length == max_word.length\n      if word\
    \ < max_word\n        max_word = word\n      end\n    end\n  end\n  max_word\n\
    end", "  words.max_by do |word|\n    word.chars.uniq.length\n  end\nend", "  #\
    \ words.max_by{|x| x.chars.uniq.count}\n  word = words.shift\n  words.each do\
    \ |x|\n    if x.chars.uniq.count > word.chars.uniq.count\n      word = x\n   \
    \ elsif x.chars.uniq.count == word.chars.uniq.count\n      word = x if x < word\n\
    \    end\n  end\n  word\nend\np find_max([\"name\", \"of\", \"string\"])\np find_max([\"\
    name\", \"enam\", \"game\"])\np find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])", "  max_chars\
    \ = []\n  max_length = 0\n  words.each do |word|\n    # convert word to lowercase\
    \ and split characters into array\n    chars = word.downcase.split('')\n    #\
    \ get length of word in characters\n    char_length = chars.length\n    # compare\
    \ word length to max_length\n    if char_length > max_length\n      # if word\
    \ length is higher, reassign max_length and clear max_chars\n      max_length\
    \ = char_length\n      max_chars = []\n      # push word to max_chars array\n\
    \      max_chars << word\n    elsif char_length == max_length\n      # if word\
    \ length is equal to max_length, push word to max_chars array\n      max_chars\
    \ << word\n    end\n  end\n  # if there are multiple words in max_chars array,\
    \ return the one that comes first\n  if max_chars.length > 1\n    # sort the array,\
    \ then return the first element\n    max_chars.sort![0]\n  else\n    # if there\
    \ is only one word in the array, return that word\n    max_chars[0]\n  end\nend",
  "  words.max_by { |word| word.chars.uniq.count }\nend", "  max_count = 0\n  max_word\
    \ = \"\"\n  words.each do |word|\n    curr_count = word.split(\"\").uniq.count\n\
    \    if curr_count > max_count\n      max_count = curr_count\n      max_word =\
    \ word\n    end\n  end\n  max_word\nend", "  # Get the max number of unique chars\n\
    \  max_num = words.max_by { |word| word.size }.size\n  # A holder for the max\
    \ unique words\n  max_words = []\n  # Iterate through the array and store the\
    \ words with max unique chars\n  words.each do |word|\n    max_words << word if\
    \ word.size == max_num\n  end\n  # Return the first element in the max_words array\n\
    \  max_words.first\nend", "  # your code goes here\n  return \"\" if words.empty?\n\
    \  max_word = words[0]\n  max_uniq = max_word.chars.uniq.size\n  words.each do\
    \ |word|\n    if word.chars.uniq.size > max_uniq\n      max_word = word\n    \
    \  max_uniq = word.chars.uniq.size\n    end\n  end\n  max_word\nend", "  words.each_with_index\
    \ do |el, i|\n    check_uniq = words[i].chars.uniq\n    check_uniq.length.times\
    \ do |n|\n      if words[i + 1] != nil\n        if check_uniq[n] != words[i +\
    \ 1][n]\n          puts \"#{words[i]} is the word with max number of unique characters\"\
    \n          break\n        end\n      end\n    end\n  end\nend", "  words.map{|word|\
    \ word.chars.uniq.size}.max == 1 ? words.min : words.max\nend", "  most_unique\
    \ = ''\n  most_unique_length = 0\n  words.each do |word|\n    unique_letters =\
    \ word.split('').uniq.length\n    if unique_letters > most_unique_length\n   \
    \   most_unique = word\n      most_unique_length = unique_letters\n    end\n \
    \ end\n  most_unique\nend", "  max = 0\n  words.each do |word|\n    if word.length\
    \ > max\n      max = word.length\n    end\n  end\n  words.each do |word|\n   \
    \ if word.length == max\n      return word\n    end\n  end\nend\np find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\np find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\np find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"",
  "  words.max_by { |word| word.chars.uniq.size }\nend", "  if words.size == 0\n \
    \   return \"List is empty\"\n  end\n  result = [words[0], words[0].chars.to_a.uniq.size]\n\
    \  words.each do |w|\n    if w.chars.to_a.uniq.size > result[1]\n      result\
    \ = [w, w.chars.to_a.uniq.size]\n    end\n  end\n  return result[0]\nend", " \
    \ max_length = 0\n  result = \"\"\n  words.each do |word|\n    if word.chars.uniq.length\
    \ > max_length\n      max_length = word.chars.uniq.length\n      result = word\n\
    \    end\n  end\n  result\nend", "  words.max_by { |word| word.split('').uniq.count\
    \ }\nend", "  # words.reduce(\"\") { |a, e| \n  #   if e.length >= a.length\n\
    \  #     a = e\n  #   end\n  #   a\n  # }", "\tunique_hash = Hash.new\n\twords.each\
    \ do |word|\n\t\tunique_hash[word] = word.split(\"\").uniq.length\n\tend\n\tunique_hash.sort_by\
    \ {|k,v| v}.reverse.first[0]\nend", "  # Create a sorted array of words, where\
    \ the first word is the one with the\n  # most unique characters and the last\
    \ word is the one with the least unique\n  # characters.\n  sorted_words = words.sort_by\
    \ do |word|\n    [word.chars.uniq.count, word]\n  end", "  max = nil\n  max_word\
    \ = nil\n  words.each do |word|\n    unique_chars = word.chars.uniq.count\n  \
    \  if max.nil? || unique_chars > max\n      max = unique_chars\n      max_word\
    \ = word\n    end\n  end\n  max_word\nend", "  words.max_by { |word| word.split('').uniq.count\
    \ }\nend", "    words.each_with_index do |word, i|\n        if word.size > 2\n\
    \            if word.chars.uniq.size > words[i + 1].chars.uniq.size\n        \
    \        return word\n            end\n        end\n    end\nend", "  # Your code\
    \ here\nend", "  max_unique_characters = 0\n  result = ''\n  words.each do |word|\n\
    \    unique_characters = word.split('').uniq.size\n    if unique_characters >\
    \ max_unique_characters\n      max_unique_characters = unique_characters\n   \
    \   result = word\n    end\n  end\n  result\nend", "  max = 0\n  words.each do\
    \ |w|\n    if w.chars.uniq.count > max\n      max = w.chars.uniq.count\n     \
    \ word = w\n    end\n  end\n  word\nend", "  hash = {}\n  final_word = \"\"\n\
    \  words.each do |word|\n    hash[word] = word.chars.uniq.count\n  end\n  max_unique_characters\
    \ = hash.values.max\n  hash.each do |key, value|\n    if value == max_unique_characters\n\
    \      final_word = key\n      break\n    end\n  end\n  final_word\nend", "  return\
    \ nil if words.empty?\n  max_unique_char_count = 0\n  unique_count_of_word = {}\n\
    \  max_string = \"\"\n  words.each do |word|\n    unique_count_of_word[word] =\
    \ word.split(\"\").uniq.count\n    if max_unique_char_count < unique_count_of_word[word]\n\
    \      max_unique_char_count = unique_count_of_word[word]\n      max_string =\
    \ word\n    end\n  end\n  max_string\nend", "  return words.max_by{|word| word.chars.uniq.count}\n\
    end", "  unique_count = {}\n  words.each do |word|\n    unique_count[word] = word.chars.uniq.count\n\
    \  end\n  max_count = unique_count.values.max\n  unique_count.each do |word, count|\n\
    \    if count == max_count\n      return word\n    end\n  end\nend", "  max =\
    \ words.max_by do |word|\n    word.chars.to_a.uniq.length\n  end\n  words.index(max)\
    \ == 0 ? max : \"\"\nend", "  return words.max_by { |w| w.chars.uniq.size }\n\
    end", "  max_word = \"\"\n  max_size = 0\n  words.each do |word|\n    uniq_chars\
    \ = word.split(\"\").uniq.size\n    if uniq_chars > max_size\n      max_size =\
    \ uniq_chars\n      max_word = word\n    end\n  end\n  max_word\nend", "  words.sort_by\
    \ { |w| [w.chars.size, w] }.last\nend", "    # find unique chars for each word\
    \ \n    # compare unique chars for each word\n    # return word with most unique\
    \ chars \n    max_word = \"\"\n    max_chars = 0 \n    words.each do |word|\n\
    \        unique_chars = find_unique_chars(word)\n        if unique_chars > max_chars\
    \ \n            max_chars = unique_chars\n            max_word = word\n      \
    \  end\n    end\n    max_word\nend", "  max = 0\n  uniq = 0\n  result = nil\n\
    \  words.each do |word|\n    uniq = word.chars.uniq.count\n    if uniq > max\n\
    \      max = uniq\n      result = word\n    end\n  end\n  result\nend", "  # def\
    \ find_max_uniq(word)\n  #   uniq_chars = {}\n  #   word.each_char do |char|\n\
    \  #     uniq_chars[char] = true\n  #   end\n  #   uniq_chars.length\n  # end\n\
    \  # max_uniq = 0\n  # result = \"\"\n  # words.each do |word|\n  #   if find_max_uniq(word)\
    \ > max_uniq\n  #     max_uniq = find_max_uniq(word)\n  #     result = word\n\
    \  #   end\n  # end\n  # result\n  # words.each do |word|\n  #   word.length\n\
    \  # end\n  # words.sort_by{|word| word.length}\n  # word.max_by {|word| word.length}\n\
    \  words.max_by {|word| word.length}\nend", "  word_count = Hash.new(0)\n  # map.with_index([value,\
    \ index]\n  words.map.with_index { |word, index| word_count[word] = word.split(\"\
    \").uniq.length }\n  words.sort_by.with_index { |word, index| word_count[word]\
    \ }.last\nend", "\tfreq = Hash.new(0)\n\twords.each do |word|\n\t\tfreq[word]\
    \ = word.split(\"\").uniq.length\n\tend\n\tnew_array = freq.sort_by {|word, length|\
    \ length}.reverse\n\tnew_array[0][0]\nend", "  words.max_by { |word| word.chars.uniq.size\
    \ }\nend", "  char_set = words.map do |word|\n    word.chars.uniq.size\n  end\n\
    \  words[char_set.index(char_set.max)]\nend", "  max_word_length = words.max {\
    \ |a, b| a.length <=> b.length }\n  puts max_word_length\nend", "  max_word =\
    \ \"\"\n  max_count = 0\n  words.each do |word|\n    count = count_unique_chars(word)\n\
    \    if count > max_count\n      max_count = count\n      max_word = word\n  \
    \  end\n  end\n  max_word\nend", "  # write your code here\n  word = words.max_by\
    \ { |w| w.chars.uniq.count }\n  return word\nend", "\tmax = 0\n\tmax_word = \"\
    \"\n\twords.each do |word|\n\t\tunique_characters = word.split(\"\").uniq.count\n\
    \t\tif unique_characters > max\n\t\t\tmax = unique_characters\n\t\t\tmax_word\
    \ = word\n\t\tend\n\tend\n\tmax_word\nend", "  max_count = 0\n  current_count\
    \ = 0\n  max_word = \"\"\n  words.each do |word|\n    current_count = word.split(\"\
    \").uniq.count\n    if current_count > max_count\n      max_count = current_count\n\
    \      max_word = word\n    end\n  end\n  max_word\nend", "  max_word = nil\n\
    \  max_chars = 0\n  words.each do |word|\n    if num_chars(word) > max_chars\n\
    \      max_chars = num_chars(word)\n      max_word = word\n    end\n  end\n  max_word\n\
    end", "  words.max_by do |word|\n    word.chars.uniq.count\n  end\nend", "  words.max_by\
    \ { |word| word.chars.uniq.size }\nend", "  words.sort_by{|i| [-i.split('').uniq.length,\
    \ i]}.first\nend", "\tmax_word = words[0]\n\twords.each do |word|\n\t\tif max_word.chars.uniq.length\
    \ < word.chars.uniq.length\n\t\t\tmax_word = word\n\t\tend\n\tend\n\tmax_word\n\
    end", "  words.max_by { |word| word.chars.uniq.size }\nend", "  max_word = words[0]\n\
    \  max_word_size = max_word.size\n  words.each do |word|\n    if word.size > max_word_size\n\
    \      max_word = word\n      max_word_size = word.size\n    end\n  end\n  max_word\n\
    end", "  words.max_by { |s| s.chars.uniq.count }\nend", "  unique_chars = {}\n\
    \  longest_word = \"\"\n  words.each do |word|\n    unique_chars[word] = word.chars.uniq.length\n\
    \  end\n  unique_chars.each do |key, value|\n    if value > longest_word.length\n\
    \      longest_word = key\n    end\n  end\n  longest_word\nend", "  if words ==\
    \ []\n    return \"\"\n  end\n  uniques = []\n  words.each do |s|\n    uniques\
    \ << s.split(\"\").uniq.length\n  end\n  return words[uniques.index(uniques.max)]\n\
    end", "  return \"\" if words.empty?\n  max_unique_chars = words.map { |word|\
    \ word.split(\"\").uniq.size }.max\n  words.select { |word| word.split(\"\").uniq.size\
    \ == max_unique_chars }.min\nend", "  # count the number of unique characters\
    \ in each word\n  # return the word with the max number of uniques", "  # max_unique_chars_word_index\
    \ = 0\n  #\n  # words.each_with_index do |word, index|\n  #   if word.chars.uniq.length\
    \ > words[max_unique_chars_word_index].chars.uniq.length\n  #     max_unique_chars_word_index\
    \ = index\n  #   end\n  # end\n  #\n  # words[max_unique_chars_word_index]", " \
    \   word_by_num_chars = {}\n    words.each do |word|\n        num_chars = word.length\n\
    \        if word_by_num_chars[num_chars]\n            word_by_num_chars[num_chars]\
    \ << word\n        else\n            word_by_num_chars[num_chars] = [word]\n \
    \       end\n    end\n    num_chars = word_by_num_chars.keys.max\n    word_by_num_chars[num_chars].sort[0]\n\
    end", "  found_word = \"\"\n  max_count = 0\n  words.each do |w|\n    if w.split(\"\
    \").uniq.count > max_count\n      max_count = w.split(\"\").uniq.count\n     \
    \ found_word = w\n    end\n  end\n  found_word\nend", "  max_word = \"\"\n  max_unique_chars\
    \ = 0\n  words.each do |word|\n    if (word.chars.uniq.length > max_unique_chars)\n\
    \      max_unique_chars = word.chars.uniq.length\n      max_word = word\n    end\n\
    \  end\n  max_word\nend", "  uniq_words = {}\n  words.each do |word|\n    uniq_words[word]\
    \ = word.split('').uniq.count\n  end\n  uniq_words.key(uniq_words.values.max)\n\
    end", "  words.map do |word|\n    word.split('').uniq.length\n  end.max == words.map\
    \ do |word|\n    word.split('').uniq.length\n  end.max\n  words[words.map do |word|\n\
    \    word.split('').uniq.length\n  end.index(words.map do |word|\n    word.split('').uniq.length\n\
    \  end.max)]\nend", "  # Your solution here\nend", "  # Your code here\nend",
  "  max_count = 0\n  max_word = nil\n  words.each do |word|\n    count = unique_chars(word)\n\
    \    if count > max_count\n      max_count = count\n      max_word = word\n  \
    \  end\n  end\n  max_word\nend", "  max_word = words[0]\n  max_count = 0\n  words.each\
    \ do |word|\n    if word.split(\"\").uniq.count > max_count\n      max_count =\
    \ word.split(\"\").uniq.count\n      max_word = word\n    end\n  end\n  max_word\n\
    end", "  words.map { |word| { word: word, unique_chars: unique_chars(word) } }\n\
    \       .max_by { |h| h[:unique_chars] }[:word]\nend", "  max_word = words[0]\n\
    \  words.each do |word|\n    next if word.length < max_word.length\n    if word.length\
    \ == max_word.length\n      max_word = word if word.downcase < max_word.downcase\n\
    \    else\n      max_word = word\n    end\n  end\n  max_word\nend\np find_max([\"\
    name\", \"of\", \"string\"]) #== \"string\"\np find_max([\"name\", \"enam\", \"\
    game\"]) #== \"enam\"\np find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) #== \"aaaaaaa\"",
  "  max_length = words.map(&:length).max\n  words.select{|w| w.length == max_length}.min\n\
    end", "  max_count = 0\n  max_words = []\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > max_count\n      max_count = word.chars.uniq.count\n      max_words = []\n\
    \      max_words << word\n    elsif word.chars.uniq.count == max_count\n     \
    \ max_words << word\n    end\n  end\n  return max_words.min\nend", "  chars =\
    \ words.map { |word| word.chars.uniq }\n  max_chars = chars.max_by { |word| word.size\
    \ }\n  words[chars.index(max_chars)]\nend", "  max = words.max_by { |word| word.split('').uniq.count\
    \ }\n  if max\n    words.select { |word| word.split('').uniq.count == max.split('').uniq.count\
    \ }.min\n  else\n    ''\n  end\nend", "  words.max_by { |word| word.split('').uniq.count\
    \ }\nend", "  words.each_with_index.max_by { |word, index| word.chars.uniq.count\
    \ }.first\nend", "  word_hash = {}\n  longest_word = \"\"\n  longest_word_length\
    \ = 0\n  words.each do |word|\n    word_hash[word] = word.split(\"\").uniq.length\n\
    \    if word_hash[word] > longest_word_length\n      longest_word_length = word_hash[word]\n\
    \      longest_word = word\n    end\n  end\n  longest_word\nend", "    max = 0\n\
    \    maxWord = \"\"\n    words.each do |word|\n        if word.length > max\n\
    \            max = word.length\n            maxWord = word\n        end\n    end\n\
    \    return maxWord\nend", "  words.max_by { |word| word.chars.uniq.count }\n\
    end", "  words.max_by { |word| word.chars.uniq.size }\nend", "    # Your code\
    \ here\nend\nputs \"find_max => ", "  max = 0\n  str = \"\"\n  words.each do |word|\n\
    \    if (word.chars.uniq.count > max)\n      max = word.chars.uniq.count\n   \
    \   str = word\n    end\n  end\n  str\nend", "  return '' if words.empty?\n  max_uniq_char_count\
    \ = 0\n  max_uniq_char_word = ''\n  words.each do |word|\n    uniq_char_count\
    \ = word.chars.uniq.count\n    max_uniq_char_word = word if uniq_char_count >\
    \ max_uniq_char_count\n    max_uniq_char_count = uniq_char_count if uniq_char_count\
    \ > max_uniq_char_count\n  end\n  max_uniq_char_word\nend", "  # TODO: Please\
    \ implement me\nend", "\tword_with_max_chars = ''\n\tword_with_max_char_count\
    \ = 0\n\twords.each do |word|\n\t\tif word.size > word_with_max_char_count\n\t\
    \t\tword_with_max_char_count = word.size\n\t\t\tword_with_max_chars = word\n\t\
    \tend\n\tend\n\tword_with_max_chars\nend", "  words.sort_by { |w| [w.split('').uniq.count,\
    \ w] }.last\nend", "  max_string = \"\"\n  max_uniq = 0\n  words.each do |word|\n\
    \    uniq_count = count_uniq(word)\n    if uniq_count > max_uniq\n      max_uniq\
    \ = uniq_count\n      max_string = word\n    end\n  end\n  max_string\nend", " \
    \ max_word = ''\n  # 1. Find the word with most unique characters\n  max_chars\
    \ = 0\n  words.each do |word|\n    if word.split('').uniq.length > max_chars\n\
    \      max_chars = word.split('').uniq.length\n      max_word = word\n    end\n\
    \  end\n  # 2. If multiple words have same number of unique characters, return\
    \ the one which comes first in lexicographical order\n  words.each do |word|\n\
    \    if word.split('').uniq.length == max_chars && word < max_word\n      max_word\
    \ = word\n    end\n  end\n  max_word\nend", "  # Convert the word to characters,\
    \ sort it, check if it's uniq\n  words.max_by { |word| word.chars.sort.uniq.join\
    \ }\nend", "  max_word = \"\"\n  max_count = 0\n  words.each do |word|\n    current_count\
    \ = word.split(\"\").uniq.count\n    if current_count > max_count\n      max_count\
    \ = current_count\n      max_word = word\n    end\n  end\n  max_word\nend", " \
    \ max_count = 0\n  max_word = \"\"\n  words.each do |word|\n    count = word.split(\"\
    \").uniq.count\n    if count > max_count\n      max_count = count\n      max_word\
    \ = word\n    end\n  end\n  max_word\nend", "  # TODO:\nend", "  word = words.inject{|curr,\
    \ nextw| curr.length > nextw.length ? curr : nextw}\n  word = word.split(\"\"\
    )\n  unique = word.uniq\n  unique = unique.join(\"\")\n  if unique.length == word.length\n\
    \    return word.join(\"\")\n  else\n    return \"sorry, can't find a word with\
    \ all unique characters\"\n  end\nend", "  max_count = 0\n  max_word = \"\"\n\
    \  words.each do |word|\n    unique_count = word.chars.uniq.count\n    if unique_count\
    \ > max_count\n      max_count = unique_count\n      max_word = word\n    end\n\
    \  end\n  max_word\nend", "  # your code here\nend", "  # TODO: Write your code\
    \ here\n  max_item = \"\"\n  max_unique_count = 0\n  words.each do |word|\n  \
    \  unique_count = 0\n    word.each_char do |char|\n      if word.count(char) ==\
    \ 1\n        unique_count += 1\n      end\n    end\n    if unique_count > max_unique_count\n\
    \      max_unique_count = unique_count\n      max_item = word\n    end\n  end\n\
    \  max_item\nend", "  # code here\nend", "  puts words.sort_by { |x| [x.chars.to_a.uniq.length,\
    \ x] }.last\nend", "  words.max_by { |word| word.split('').uniq.size }\nend",
  "  max_unique_characters = 0\n  best_word = \"\"\n  words.each do |word|\n    if\
    \ max_unique_characters < word.chars.uniq.count\n      max_unique_characters =\
    \ word.chars.uniq.count\n      best_word = word\n    end\n  end\n  best_word\n\
    end", "  max = {word: nil, count: 0}\n  words.each do |word|\n    count = word.chars.uniq.count\n\
    \    if count > max[:count]\n      max[:word] = word\n      max[:count] = count\n\
    \    end\n  end\n  max[:word]\nend", "  words.max_by { |word| word.chars.uniq.size\
    \ }\nend", "  words.max_by { |s| s.chars.uniq.size }\nend", "\nend", "  words.max\
    \ { |a, b| [a.chars.uniq.count, a] <=> [b.chars.uniq.count, b] }\nend", "  words.sort_by!\
    \ { |word| [word.size, word] }\n  p words\n  words.sort_by do |word|\n    [unique_characters(word),\
    \ word]\n  end.last\nend", "  return words.map { |word| [word, word.split('').uniq.length]\
    \ }.sort_by { |word| [word[1], word[0]] }.last[0]\nend", end, "  return false\
    \ if words.class != Array\n  max_unique_chars = 0\n  max_unique_word = \"\"\n\
    \  words.each do |word|\n    unique_chars = word.chars.uniq.count\n    if unique_chars\
    \ > max_unique_chars\n      max_unique_chars = unique_chars\n      max_unique_word\
    \ = word\n    end\n  end\n  max_unique_word\nend", "    unique_characters = 0\n\
    \    unique_words = []\n    words.each do |word|\n        if word.uniq.length\
    \ > unique_characters\n            unique_characters = word.uniq.length\n    \
    \        unique_words = [word]\n        elsif word.uniq.length == unique_characters\n\
    \            unique_words << word\n        end\n    end\n    return unique_words.first\n\
    end", "  words.max { |a, b| a.split('').uniq.size <=> b.split('').uniq.size }\n\
    end", "  result = []\n  uniq_count = 0\n  words.each do |word|\n    if word.chars.uniq.count\
    \ > uniq_count\n      result = []\n      result << word\n      uniq_count = word.chars.uniq.count\n\
    \    elsif word.chars.uniq.count == uniq_count\n      result << word\n    end\n\
    \  end\n  p result.sort[0]\nend", "    words.sort_by { |w| [w.chars.uniq.count,\
    \ w] }.last\nend", "  # TODO\nend", "  # initialize empty hash\n  chars = {}\n\
    \  # iterate through each word in the array of words\n  words.each do |word|\n\
    \    # create an array of each word's unique characters\n    unique_characters\
    \ = word.split('').uniq\n    # assign unique characters array to word's key in\
    \ hash\n    chars[word] = unique_characters\n  end\n  # find the word with the\
    \ maximum number of unique characters\n  max_characters = chars.max_by { |k, v|\
    \ v.length }[0]\n  # return the word with the maximum number of unique characters\n\
    \  max_characters\nend", "  # code goes here\nend", "  words.max_by { |word| word.chars.uniq.count\
    \ }\nend", "  max_word = nil\n  max_count = 0\n  words.each do |word|\n    if\
    \ word.chars.uniq.count > max_count\n      max_count = word.chars.uniq.count\n\
    \      max_word = word\n    end\n  end\n  max_word\nend", "  max = 0\n  selected\
    \ = \"\"\n  words.each do |word|\n    uniques = word.split(\"\").uniq.count\n\
    \    if uniques > max\n      max = uniques\n      selected = word\n    end\n \
    \ end\n  selected\nend", "  # max = \"\"\n  # words.each do |word|\n  #   if max\
    \ == \"\"\n  #     max = word\n  #   elsif unique_chars(word) > unique_chars(max)\n\
    \  #     max = word\n  #   end\n  # end\n  # max\n  # words.max_by { |word| unique_chars(word)\
    \ }\n  words.max_by { |word| word.chars.uniq.size }\nend", "  max_unique_characters\
    \ = 0\n  max_unique_words = []\n  words.each do |word|\n    number_of_unique_characters\
    \ = word.split(\"\").uniq.count\n    if number_of_unique_characters > max_unique_characters\n\
    \      max_unique_characters = number_of_unique_characters\n      max_unique_words\
    \ = [word]\n    elsif number_of_unique_characters == max_unique_characters\n \
    \     max_unique_words << word\n    end\n  end\n  # p max_unique_words\n  max_unique_words.min\n\
    end", '  # I will leave this to you. Hint: use dictionary', "  words.max_by {\
    \ |word| word.chars.uniq.size }\nend", "  words.max_by { |word| word.chars.uniq.count\
    \ }\nend", "\t\nend", "  unique_letters = []\n  unique_words = []\n  words.each\
    \ do |word|\n    unique_letters.push(word.chars.uniq.length)\n  end\n  words.each\
    \ do |word|\n    if word.chars.uniq.length == unique_letters.max\n      unique_words.push(word)\n\
    \    end\n  end\n  unique_words.sort.first\nend", "  max_length = 0\n  max_word\
    \ = \"\"\n  words.each do |w|\n    if w.length > max_length\n      max_length\
    \ = w.length\n      max_word = w\n    end\n  end\n  max_word\nend", "  words.max_by{|word|\
    \ word.chars.uniq.count}\nend", "  # res = words.max_by { |w| w.chars.uniq.size\
    \ }\n  # res = words.max_by(&:size)\n  # res = words.max_by { |w| w.size }\n \
    \ res = words.max_by(&:uniq)\n  # res = words.max_by { |w| w.uniq.size }\n  #\
    \ res = words.max_by { |w| w.chars.size }\n  p res\nend", "\tmax_count = 0\n\t\
    max_word = \"\"\n\twords.each do |word|\n\t\tunique_count = unique_chars(word)\n\
    \t\tif unique_count > max_count\n\t\t\tmax_count = unique_count\n\t\t\tmax_word\
    \ = word\n\t\telsif unique_count == max_count\n\t\t\tmax_word = word if word <\
    \ max_word\n\t\tend\n\tend\n\tmax_word\nend", "  max = [\"\", 0]\n  words.each\
    \ do |word|\n    max = [word, word.chars.uniq.count] if word.chars.uniq.count\
    \ > max[1]\n  end\n  max[0]\nend", "  max_word = words[0]\n  max_count = count_unique_chars(words[0])\n\
    \  words.each do |word|\n    if count_unique_chars(word) > max_count\n      max_word\
    \ = word\n      max_count = count_unique_chars(word)\n    end\n  end\n  max_word\n\
    end", "  max = 0\n  max_word = ''\n  words.each do |word|\n    if max < word.length\n\
    \      max = word.length\n      max_word = word\n    end\n  end\n  max_word\n\
    end", "  words.max_by { |word| word.chars.uniq.size }\nend", "  max_word = nil\n\
    \  max_size = 0\n  for word in words\n    if max_size < word.size\n      max_size\
    \ = word.size\n      max_word = word\n    end\n  end\n  max_word\nend", "  # Your\
    \ code goes here.\n  max_char = 0\n  max_word = \"\"\n  words.each do |word|\n\
    \    if word.length > max_char\n      max_char = word.length\n      max_word =\
    \ word\n    end\n  end\n  max_word\nend", "  puts words.max_by{|x| x.chars.uniq.size}\n\
    end\nfind_max([\"name\", \"of\", \"string\"])\nfind_max([\"name\", \"enam\", \"\
    game\"])\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"])", "  # write your code here\n\
    end", "    chars = []\n    words.each do |word|\n        chars << word.split(\"\
    \").uniq.count\n    end\n    words[chars.index(chars.max)]\nend\np find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\np find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\np find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"",
  "  return \"\" if words.empty?\n  max_unique_chars_str = words[0]\n  max_unique_chars\
    \ = max_unique_chars_str.split(\"\").uniq.length\n  words.each do |word|\n   \
    \ max_unique_chars = word.split(\"\").uniq.length if word.split(\"\").uniq.length\
    \ > max_unique_chars\n    max_unique_chars_str = word if word.split(\"\").uniq.length\
    \ == max_unique_chars && word < max_unique_chars_str\n  end\n  max_unique_chars_str\n\
    end", "  max_word = []\n  max_len = 0\n  words.each do |word|\n    word_chars\
    \ = word.split('')\n    if word_chars.uniq.length > max_len\n      max_len = word_chars.uniq.length\n\
    \      max_word = [word]\n    elsif word_chars.uniq.length == max_len\n      max_word\
    \ << word\n    end\n  end\n  max_word.sort![0]\nend", "  max = \"\"\n  words.each\
    \ do |w|\n    if max.length < w.length\n      max = w\n    end\n  end\n  max\n\
    end", "  word_count = {}\n  words.each do |word|\n    word_count[word] = word.chars.uniq.count\n\
    \  end\n  word_count.max_by{|k,v| v}.first\nend", "  # make an array from given\
    \ array\n  # make a hash with keys as each word and value as set of characters\
    \ of each word\n  # iterate through hash and create a new hash with keys as each\
    \ word and value as no of unique characters in each word\n  # check the maximum\
    \ value in this hash and return the corresponding key\n  words_hash = words.each_with_object({})\
    \ do |word, result|\n    result[word] = word.split('').to_set\n  end\n  hash =\
    \ words_hash.each_with_object({}) do |(key, value), result|\n    result[key] =\
    \ value.size\n  end\n  max_value = hash.max_by { |key, value| value }[1]\n  res\
    \ = []\n  hash.each { |key, value| res << key if value == max_value }\n  res.sort[0]\n\
    end", "  max_word = \"\"\n  words.each do |word|\n    max_word = word if uniq_char(word)\
    \ > uniq_char(max_word)\n  end\n  max_word\nend", "  result = words.sort_by{|word|\
    \ word.size}.reverse.find do |word|\n    word.chars.size == word.chars.uniq.size\n\
    \  end\n  result || words.first\nend", "  if words.empty?\n    puts \"Empty list\"\
    \n  else\n    max_list = []\n    max_element = words[0]\n    words.each do |element|\n\
    \      max_list << element if max_element.length < element.length\n      max_element\
    \ = element if max_element.length < element.length\n    end\n    max_list.empty?\
    \ ? max_element : max_list[0]\n  end\nend", "  max_len_word = ''\n  len = words.length\n\
    \  for i in 0..len-1\n    if words[i].length > max_len_word.length\n      max_len_word\
    \ = words[i]\n    end\n  end\n  return max_len_word\nend", "  unique_words = Hash.new\
    \ { |h, k| h[k] = [] }\n  words.each do |word|\n    unique_words[word.chars.uniq.length]\
    \ << word\n  end\n  unique_words[unique_words.keys.max].sort.first\nend", "  words.max_by\
    \ { |w| w.chars.uniq.size }\nend", "  max_length = 0\n  max_word = ''\n  words.each\
    \ do |word|\n    if word.length > max_length\n      max_length = word.length\n\
    \      max_word = word\n    end\n  end\n  max_word\nend", "  words.map { |word|\
    \ word.length }.zip(words).max[1]\nend", "  if words == nil || words.empty?\n\
    \    return nil\n  end\n  sorted_words = words.sort\n  unique_words = []\n  sorted_words.each\
    \ do |word|\n    unique_words << word.split('').uniq.join('')\n  end\n  unique_words.each\
    \ do |word|\n    if word.length == unique_words.max.length\n      return word\n\
    \    end\n  end\nend", "  max_count = 0\n  max_word = nil\n  words.each do |word|\n\
    \    uniq_chars = word.chars.uniq.size\n    if uniq_chars > max_count\n      max_count\
    \ = uniq_chars\n      max_word = word\n    end\n  end\n  max_word\nend", "\nend",
  "  max_length = 0\n  max_words = []\n  words.each do |word|\n    if word.length\
    \ > max_length\n      max_length = word.length\n      max_words = [word]\n   \
    \ elsif word.length == max_length\n      max_words << word\n    end\n  end\n \
    \ max_words.first\nend", "  words.map { |word| word.chars.to_a.uniq.count }.max\n\
    end", "    max_count = 0\n    max_word = \"\"\n    words.each do |word|\n    \
    \    word_count = word.split(\"\").uniq.count\n        if word_count > max_count\n\
    \            max_count = word_count\n            max_word = word\n        end\n\
    \    end\n    max_word\nend", "  unique_chars = Hash.new(0)\n  words.each do |word|\n\
    \    unique_chars[word] = word.chars.uniq.count\n  end\n  max_value = unique_chars.values.max\n\
    \  unique_chars.select { |k, v| v == max_value }.keys.first\nend", "  max = words.max_by{|x|\
    \ x.size}\n  max = words.select{|x| x.size == max.size}.min_by{|x| x.downcase}\n\
    \  max\nend", "    words.max_by { |word| word.chars.uniq.count }\nend", "  sorted_words\
    \ = words.sort_by do |word|\n    [word.split('').uniq.count, word]\n  end\n  sorted_words.last\n\
    end", "  # TODO: your code here\nend", "  # your code goes here\n  max_count=0\n\
    \  ans=words[0]\n  words.each do |i|\n    j=i.length-1\n    k=i.length-1\n   \
    \ cnt=0\n    while j>=0\n      if i[j]!=i[k]\n        cnt+=1\n      end\n    \
    \  j-=1\n      k-=1\n    end\n    if cnt>max_count\n      max_count=cnt\n    \
    \  ans=i\n    end\n  end\n  return ans\nend", " \n  result = words.max_by { |x|\
    \ x.chars.uniq.size }\n  \n  if result == words[0]\n    p words[0]\n  elsif result\
    \ == words[1]\n    p words[1]\n  else\n    p words[2]\n  end\nend", "  words.max\
    \ { |a, b| a.chars.uniq.count <=> b.chars.uniq.count }\nend", "  x = words.map\
    \ { |word| word.chars.uniq.length }\n  index = x.find_index(x.max)\n  words[index]\n\
    end", "  number_of_words = words.length\n  char_counts = []\n  (0...number_of_words).each\
    \ do |word_index|\n    word = words[word_index]\n    (0...word.length).each do\
    \ |letter_index|\n      if char_counts[word_index] == nil\n        char_counts[word_index]\
    \ = 1\n      else\n        char_counts[word_index] += 1\n      end\n    end\n\
    \  end\n  max_count = char_counts.max\n  word_index = char_counts.index(max_count)\n\
    \  max_count_word = words[word_index]\n  return max_count_word\nend\nputs find_max([\"\
    name\", \"of\", \"string\"])\nputs find_max([\"name\", \"enam\", \"game\"])\n\
    puts find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])", "  max = nil\n  max_word = \"\"\
    \n  words.each do |word|\n    chars = word.split(\"\")\n    if max == nil || max\
    \ < chars.length\n      max = chars.length\n      max_word = word\n    end\n \
    \ end\n  max_word\nend", "  max = words.max_by do |word|\n    word.split(\"\"\
    ).uniq.length\n  end\n  max\nend", "  words.max_by { |word| word.chars.uniq.size\
    \ }\nend", end, "\nend", "    return words.find_all { |word| word.size == word.split(\"\
    \").uniq.size }.min_by { |word| word.size }\nend", "\tmax_char_string = \"\"\n\
    \twords.each { |word|\n\t\tif max_char_string.length < word.length\n\t\t\tmax_char_string\
    \ = word\n\t\tend\n\t}\n\treturn max_char_string\nend", "    words.max { |a, b|\
    \ a.split('').uniq.length <=> b.split('').uniq.length }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
