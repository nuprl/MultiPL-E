name: HumanEval_7_filter_by_substring
language: rb
prompt: "# Filter an input list of strings only for ones that contain given substring\n\
  # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
  \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings,\
  \ substring)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n\
  \    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([],\
  \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
  xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"\
  xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\"\
  , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"\
  prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
  ))\n  end\nend\n"
completions: ["  strings.select { |string| string.include?(substring) }\nend", " \
    \ strings.keep_if { |s| s.include?(substring) }\nend", "  if substring == ''\n\
    \    strings\n  else\n    strings.select{|s| s.include?(substring)}\n  end\nend",
  "  strings.filter do |string|\n    string.include?(substring)\n  end\nend", "  strings.select\
    \ { |string| string.include?(substring) }\nend", "  strings.select { |s| s.include?(substring)\
    \ }\nend", "    strings.select { |string| string.include?(substring) }\nend",
  "  strings.select { |s| s.include?(substring) }\nend", "  res = []\n  for i in 0..strings.length\
    \ - 1\n    res << strings[i] if strings[i].include? substring\n  end\n  res\n\
    end", "\tstrings.select { |string| string.include?(substring) }\nend", "  strings.select{|s|\
    \ s.include?(substring)}\nend", "  result = []\n  for s in strings\n    if s.include?\
    \ substring\n      result.push(s)\n    end\n  end\n  return result\nend", "  strings.select{|x|\
    \ x.include?(substring)}\nend", "  strings.select{|string| string.include?(substring)}\n\
    end", "  strings.select { |str| str.include?(substring) }\nend", "  return strings.select{|string|\
    \ string.include?(substring)}\nend", "  strings.select { |string| string.include?(substring)\
    \ }\nend", "  strings.select { |str| str.include?(substring) }\nend", "  strings.select\
    \ { |string| string.downcase.include?(substring.downcase) }\nend", "  strings.select\
    \ { |string| string.include?(substring) }\nend", "  strings.reject { |s| !s.include?(substring)\
    \ }\nend", "  strings.select{|word| word.include?(substring)}\nend", "  strings.select\
    \ { |string| string.include?(substring) }\nend", "    strings.select { |string|\
    \ string.include?(substring) }\nend", "  strings.select { |string| string.include?(substring)\
    \ }\nend", "    filtered = []\n    strings.each do |string|\n        if string.include?\
    \ substring\n            filtered.push(string)\n        end\n    end\n    return\
    \ filtered\nend", "  strings.filter { |str| str.include?(substring) }\nend", " \
    \ strings.select { |string| string.include?(substring) }\nend", "  strings.select{|string|\
    \ string.include?(substring)}\nend", "  # This uses a closure to define the filtering\
    \ function and then applies it to\n  # the list using filter\n  strings.filter\
    \ { |string| string.include?(substring) }\nend", "  return strings.select { |s|\
    \ s.include?(substring) }\nend", '  return [] if strings.nil? || strings.empty?',
  "\tstrings.select { |s| s.include? substring }\nend", "  strings.select { |string|\
    \ string.include?(substring) }\nend", "  strings.select { |string| string.include?(substring)\
    \ }\nend", "  strings.select { |string| string.include?(substring) }\nend", " \
    \ strings.select { |str| str.include?(substring) }\nend", "  # TODO: implement\
    \ me!\n  strings.select { |string| string.include?(substring) }\nend", "  strings.select\
    \ { |s| s.include?(substring) }\nend", "  strings.filter { |str| str.include?(substring)\
    \ }\nend", "  strings.select { |i| i.include?(substring) }\nend", "  strings.select\
    \ { |str| str.include?(substring) }\nend", "    strings.select{|str| str.downcase.include?(substring.downcase)}\n\
    end", "    strings.select { |string| string.include?(substring) }\nend", "  strings.reject\
    \ { |str| !str.include?(substring) }\nend", "  strings.select { |string| string.include?(substring)\
    \ }\nend", "  strings.reject { |s| s.index(substring).nil? }\nend", "  # TODO:\
    \ implement me\nend", "  strings.select { |s| s.include?(substring) }\nend", " \
    \   strings.select{|string| string.include?(substring)}\nend", "  strings.select\
    \ { |string| string.include?(substring) }\nend", "    strings.select { |string|\
    \ string.include?(substring) }\nend", "  strings.select { |string| string.include?(substring)\
    \ }\nend", "  strings.select { |s| s.include?(substring) }\nend", "  strings.select\
    \ { |str| str.include?(substring) }\nend", "  if strings.nil?\n    raise ArgumentError,\
    \ 'Argument is nil'\n  elsif !strings.is_a?(Array)\n    raise ArgumentError, 'Argument\
    \ is not an array'\n  elsif !substring.is_a?(String)\n    raise ArgumentError,\
    \ 'Substring is not a string'\n  end", "    strings.select { |str| str.include?(substring)\
    \ }\nend", "    strings.select { |string| string.include?(substring) }\nend",
  "  strings.select { |string| string.downcase.include?(substring.downcase) }\nend",
  "  strings.select { |s| s.include?(substring) }\nend", "  strings.select { |string|\
    \ string.include?(substring) }\nend", "    strings.select { |string| string.include?(substring)\
    \ }\nend", "  strings.select { |str| str.include?(substring) }\nend", "  strings.select\
    \ { |s| s.include?(substring) }\nend", "  strings.select { |s| s.include?(substring)\
    \ }\nend", "  strings.select { |s| s.include?(substring) }\nend", "  strings.select\
    \ { |s| s.include?(substring) }\nend", "  if substring.nil?\n    return strings\n\
    \  end\n  strings.select { |word| word.include? substring }\nend", "  return strings.filter\
    \ { |string| string.include?(substring) }\nend", "    strings.select { |str| str.include?(substring)\
    \ }\nend", "\treturn strings.select { |s| s.include? substring }\nend", "  strings.select\
    \ { |string| string.include?(substring) }\nend", "  strings.select { |s| s.include?(substring)\
    \ }\nend", "  strings.select { |s| s.include?(substring) }\nend", "  strings.select\
    \ { |s| s.include?(substring) }\nend", "  strings.select { |x| x.include?(substring)\
    \ }\nend", "  strings.select { |word| word.include?(substring) }\nend", "  strings.select\
    \ { |string| string.include?(substring) }\nend", "  strings.select { |str| str.include?(substring)\
    \ }\nend", "  strings.select { |s| s.include?(substring) }\nend", "  strings.select\
    \ { |s| s.include?(substring) }\nend", "\treturn strings.select{|x| x.include?(substring)}\n\
    end", "  string_array = []\n  strings.each do |string|\n    if string.include?(substring)\n\
    \      string_array << string\n    end\n  end\n  string_array\nend", "  strings.select\
    \ { |string| string.include?(substring) }\nend", "  strings.select { |str| str.include?(substring)\
    \ }\nend", "  strings.select { |string| string.include?(substring) }\nend", " \
    \ strings.find_all { |string| string.include?(substring) }\nend", "  strings.select\
    \ { |s| s.include?(substring) }\nend", "  strings.select { |s| s.include?(substring)\
    \ }\nend", "  strings.select{|s| s.include?(substring)}\nend", "  return strings.select\
    \ { |string| string.include?(substring) }\nend", "  strings.select { |string|\
    \ string.include?(substring) }\nend", "  strings.select { |string| string.include?(substring)\
    \ }\nend", "  return strings.select{|s| s.include?(substring)}\nend", "    strings.select\
    \ { |string| string.include?(substring) }\nend", "  strings.select { |string|\
    \ string.include?(substring) }\nend", "  strings.select { |str| str.include?(substring)\
    \ }\nend", "  strings.select { |s| s.include?(substring) }\nend", "  strings.select{|s|\
    \ s.include?(substring)}\nend", "  strings.reject{|s| s.include?(substring) ==\
    \ false}\nend", "  strings.select { |string| string.include?(substring) }\nend",
  "  strings.select { |e| e.include?(substring) }\nend", "  strings.select { |string|\
    \ string.include?(substring) }\nend", "  strings.select { |s| s.include?(substring)\
    \ }\nend", "  return strings.select { |str| str.include?(substring) }\nend", " \
    \ strings.select { |s| s.include?(substring) }\nend", "  # your code here\nend",
  "  strings.select { |s| s.include?(substring) }\nend", "  strings.select { |s| s.include?(substring)\
    \ }\nend", "  strings.select { |string| string.include?(substring) }\nend", " \
    \ strings.select { |string| string.include?(substring) }\nend", "  strings.select\
    \ { |string| string.include?(substring) }\nend", "  # strings.select { |str| str.include?(substring)\
    \ }\n  strings.find_all { |str| str.include?(substring) }\nend", "  strings.select{|s|\
    \ s.include?(substring)}\nend", "  strings.reject { |str| !str.include?(substring)\
    \ }\nend", "  strings.select { |string| string.include?(substring) }\nend", " \
    \ strings.select{|s| s.include?(substring)}\nend", "  strings.select { |word|\
    \ word.include?(substring) }\nend", "  strings.select { |string| string.include?(substring)\
    \ }\nend", "\tif strings.is_a? Array\n\t\tstrings.select { |v| v.include? substring\
    \ }\n\telse\n\t\t[]\n\tend\nend", "  return strings.filter{|string| string.include?(substring)}\n\
    end", "  strings.find_all { |s| s.include?(substring) }\nend", "  strings.select\
    \ { |s| s.include?(substring) }\nend", "\tstrings.select { |str| str.downcase.include?(substring.downcase)\
    \ }\nend", "  strings.select { |string| string.include?(substring) }\nend", " \
    \ strings.select { |x| x.include?(substring) }\nend", "  strings.select { |str|\
    \ str.include?(substring) }\nend", "  filtered = []\n  strings.each do |string|\n\
    \    if string.include?(substring)\n      filtered << string\n    end\n  end\n\
    \  filtered\nend", "  strings.select { |s| s.include?(substring) }\nend", "  #\
    \ strings.each do |string|\n  #   string.include?(substring)\n  # end\n  strings.select\
    \ { |string| string.include?(substring) }\nend", "  strings.select { |string|\
    \ string.include?(substring) }\nend", "  strings.select { |s| s.include?(substring)\
    \ }\nend", "  if strings.nil? || strings.empty?\n    return []\n  end\n  strings.select\
    \ do |str|\n    str.include?(substring)\n  end\nend", "  return strings.find_all\
    \ { |string| string.include?(substring) }\nend", "  strings.select { |string|\
    \ string.include?(substring) }\nend", "  strings.select { |x| x.include?(substring)\
    \ }\nend", "\tstrings.select { |string| string.include?(substring) }\nend", " \
    \ return [] if strings.empty?\n  strings.select { |str| str.include?(substring)\
    \ }\nend", "  strings.select { |s| s.include?(substring) }\nend", "    strings.select\
    \ { |s| s.include?(substring) }\nend", "  return strings.select { |s| s.include?(substring)\
    \ }\nend", "    return strings.select { |string| string.include?(substring) }\n\
    end", "  strings.select { |s| s.include?(substring) }\nend", "  strings.select\
    \ { |s| s.include?(substring) }\nend", "  strings.select { |string| string.include?(substring)\
    \ }\nend", "  strings.select{|string| string.include?(substring)}\nend", "  return\
    \ strings.find_all { |s| s.include?(substring) }\nend", "  strings.find_all{|s|\
    \ s.include?(substring)}\nend", "  strings.select{|string| string.include?(substring)}\n\
    end", "  strings.select{|s| s.include?(substring)}\nend", "  strings.select {\
    \ |string| string.include?(substring) }\nend", "  strings.select { |s| s.include?(substring)\
    \ }\nend", "  ret = []\n  strings.each do |s|\n    if s.index(substring) != nil\n\
    \      ret.push(s)\n    end\n  end\n  return ret\nend", "  strings.keep_if { |word|\
    \ word.include?(substring) }\nend", "  strings.select { |string| string.include?(substring)\
    \ }\nend", "  strings.select { |string| string.include?(substring) }\nend", " \
    \ strings.select{|string| string.include?(substring)}\nend", "  strings.select\
    \ { |string| string.include?(substring) }\nend", "    # TODO\n    strings.select{|s|\
    \ s.include?(substring)}\nend", "  strings.select{|str| str.include?(substring)}\n\
    end", "  strings.select { |str| str.include?(substring) }\nend", "  strings.select\
    \ { |s| s.include?(substring) }\nend", end, "  strings.select { |str| str.include?(substring)\
    \ }\nend", "\t# Insert your code here\n\tstrings.keep_if {|i| i.include? substring}\n\
    end", "  strings.select { |s| s.include?(substring) }\nend", "  strings.select{|string|\
    \ string.include?(substring)}\nend", "\tstrings.find_all { |x| x.include? substring\
    \ }\nend", "  strings.select { |string| string.include?(substring) }\nend", " \
    \ strings.select { |x| x.include?(substring) }\nend", "\treturn strings.select\
    \ { |s| s.include? substring }\nend", "  strings.select { |string| string.include?(substring)\
    \ }\nend", "  res = []\n  strings.each do |string|\n    res << string if string.include?(substring)\n\
    \  end\n  res\nend", "  strings.reject { |string| string.include?(substring) ==\
    \ false }\nend", "\tstrings.select { |str| str.include?(substring) }\nend", " \
    \ results = []\n  strings.each do |x|\n    if x.include?(substring)\n      results\
    \ << x\n    end\n  end\n  results\nend", "  strings.select{|str| str.include?(substring)}\n\
    end", "    strings.select { |string| string.include?(substring) }\nend", "  strings.reject\
    \ { |str| !str.include?(substring) }\nend", "  strings.select { |str| str.include?(substring)\
    \ }\nend", "  filtered = []\n  strings.each do |string|\n    if string.include?(substring)\n\
    \      filtered << string\n    end\n  end\n  filtered\nend", "  # TODO: implement\
    \ me\nend", "  strings.select { |s| s.include?(substring) }\nend", "  strings.select{|str|\
    \ str.include?(substring)}\nend", "  strings.select { |string| string.include?(substring)\
    \ }\nend", "  strings.select { |s| s.include?(substring) }\nend", "    strings.select\
    \ { |str| str.include?(substring) }\nend", "\tstrings.select { |word| word.include?(substring)\
    \ }\nend", "  filtered = []\n  for string in strings\n    if string.include? substring\n\
    \      filtered.push(string)\n    end\n  end\n  return filtered\nend", "    #\
    \ Use Ruby Array#select method to select strings from array\n    # that contain\
    \ substring\n    strings.select { |str| str.include?(substring) }\nend", "  strings.select\
    \ { |string| string.include?(substring) }\nend", "  strings.select { |str| str.include?(substring)\
    \ }\nend", "  # TODO: implement me\nend", "\treturn strings.select { |s| s.include?\
    \ substring }\nend", "  #strings.select { |element| element.include?(substring)\
    \ }\n  strings.select { |element| element.include?(substring) }\nend", "\treturn\
    \ strings.select { |string| string.include? substring }\nend", "  # TODO: your\
    \ code here\n  strings.select { |str| str.include?(substring) }\nend", "  strings.select\
    \ { |s| s.include?(substring) }\nend", "  strings.select { |s| s.include?(substring)\
    \ }\nend", "  strings.select { |string| string.include?(substring) }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
