name: HumanEval_152_compare
language: rb
prompt: "# I think we all remember that feeling when the result of some long-awaited\n\
  # event is finally known. The feelings and thoughts you have at that moment are\n\
  # definitely worth noting down and comparing.\n# Your task is to determine if a\
  \ person correctly guessed the results of a number of matches.\n# You are given\
  \ two arrays of scores and guesses of equal length, where each index shows a match.\
  \ \n# Return an array of the same length denoting how far off each guess was. If\
  \ they have guessed correctly,\n# the value is 0, and if not, the value is the absolute\
  \ difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
  \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\ndef\
  \ compare(game, guess)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
  \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
  \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0], candidate.call([0,\
  \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2, 4, 6], candidate.call([1,\
  \ 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0, 1], candidate.call([1, 2, 3,\
  \ 5], [-1, 2, 3, 4]))\n  end\nend\n"
completions: ["  game.zip(guess).map { |arr| (arr[0] - arr[1]).abs }\nend", "  result\
    \ = []\n  game.each_with_index do |score, index|\n    if score == guess[index]\n\
    \      result << 0\n    else\n      result << (score - guess[index]).abs\n   \
    \ end\n  end\n  result\nend", "    result = []\n    i = 0\n    while i < game.length\n\
    \        if game[i] != guess[i]\n            result << (game[i] - guess[i]).abs\n\
    \        else\n            result << 0\n        end\n        i += 1\n    end\n\
    \    return result\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\nend",
  "  score = []\n  game.each_with_index do |result, index|\n    score << (result -\
    \ guess[index]).abs\n  end\n  score\nend", "  result = []\n  game.each_with_index\
    \ do |item,index|\n    result << (item - guess[index]).abs\n  end\n  result\n\
    end", "  game.zip(guess).map { |game, guess| (game - guess).abs }\nend", "  game.zip(guess).map\
    \ { |(a, b)| (a - b).abs }\nend", "  # TODO: implement this method\n  result =\
    \ []\n  game.each_with_index do |score, index|\n    if score == guess[index]\n\
    \      result << 0\n    else\n      result << (score - guess[index]).abs\n   \
    \ end\n  end\n  result\nend", "    result = []\n    for i in 0..game.length-1\n\
    \        score = game[i]\n        picked = guess[i]\n        result.push((score\
    \ - picked).abs)\n    end\n    return result\nend\nputs compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\n\
    puts compare([0,5,0,0,0,4],[4,1,1,0,0,-2])", "  res = []\n  game.each_with_index\
    \ do |v,i|\n    res.push((v-guess[i]).abs)\n  end\n  res\nend", "\tresults = []\n\
    \tgame.each_with_index do |n, i|\n\t\tresults << (n-guess[i]).abs\n\tend\n\tresults\n\
    end", "  difference = []\n  (0..game.length-1).each do |i|\n    difference <<\
    \ (game[i] - guess[i]).abs\n  end\n  difference\nend\np compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\n\
    p compare([0,5,0,0,0,4],[4,1,1,0,0,-2])", "    # Write your solution here\n  \
    \  arr = []\n    (0...game.length).each do |i|\n        if game[i] > guess[i]\n\
    \            arr << game[i] - guess[i]\n        elsif game[i] < guess[i]\n   \
    \         arr << guess[i] - game[i]\n        else\n            arr << 0\n    \
    \    end\n    end\n    arr\nend", "  x = 0\n  game.each_with_index do |val, i|\n\
    \    if game[i] < guess[i]\n      x = guess[i] - game[i]\n      game[i] = x\n\
    \    elsif game[i] > guess[i]\n      x = game[i] - guess[i]\n      game[i] = x\n\
    \    else\n      game[i] = 0\n    end\n  end\n  game\nend", "  game.map.with_index\
    \ { |score,i| guess[i] < score ? score - guess[i] : guess[i] - score }\nend",
  "  res = []\n  game.each_with_index do |g, i|\n    if g == guess[i]\n      res <<\
    \ 0\n    else\n      res << (g - guess[i]).abs\n    end\n  end\n  res\nend", " \
    \ result = []\n  game.each_with_index do |item, index|\n    result << (item -\
    \ guess[index]).abs\n  end\n  result\nend", "  a=[]\n  b=[]\n  game.zip(guess)\
    \ {|x,y| a << x; b << y}\n  a.zip(b).map {|x,y| (x-y).abs}\nend", "\tresult =\
    \ []\n\tgame.each_with_index do |value, index|\n\t\tif value == guess[index]\n\
    \t\t\tresult.push(0)\n\t\telse\n\t\t\tresult.push((value - guess[index]).abs)\n\
    \t\tend\n\tend\n\treturn result\nend", "  game.zip(guess).map { |a, b| (a - b).abs\
    \ }\nend", "  raise ArgumentError if game.length != guess.length\n  result = []\n\
    \  game.each_with_index do |score, i|\n    guess_diff = score - guess[i]\n   \
    \ if guess_diff.abs == 0\n      result << 0\n    else\n      result << guess_diff.abs\n\
    \    end\n  end\n  result\nend", "    game.zip(guess).map { |a, b| (a - b).abs\
    \ }\nend", "  ans = Array.new\n  game.each_with_index do |el,i|\n    ans << (el\
    \ - guess[i]).abs\n  end\n  ans\nend", "    results = []\n    # game.each_with_index\
    \ do |e, i|\n    #     results << (e-guess[i]).abs\n    # end\n    # return results\n\
    \    guess.map.with_index { |e, i| results << (e-game[i]).abs }\n    return results\n\
    end", "  game.zip(guess).map { |x, y| (x - y).abs }\nend", "  game.zip(guess).map{|a,b|(a-b).abs}\n\
    end", "\tresult = Array.new(game.length)\n\tfor i in 0..game.length - 1\n\t\t\
    result[i] = (game[i] - guess[i]).abs\n\tend\n\tresult\nend", "\tfinal = []\n\t\
    game.each_with_index do |value, index|\n\t\tdifference = value - guess[index]\n\
    \t\tif difference > 0\n\t\t\tfinal << difference\n\t\telsif difference < 0\n\t\
    \t\tfinal << difference.abs\n\t\telse\n\t\t\tfinal << 0\n\t\tend\n\tend\n\treturn\
    \ final\nend", "  game.zip(guess).map{|x,y| (x-y).abs}\nend", "  game.zip(guess).map\
    \ { |a, b| (a - b).abs }\nend", "\t# code goes here\nend", "    result = []\n\
    \    game.each_with_index do |g, i|\n        result << (guess[i] - g).abs\n  \
    \  end\n    result\nend\np compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) #-> [0,0,0,0,3,3]\n\
    p compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) #-> [4,4,1,0,0,6]", "  game.zip(guess).map\
    \ { |x, y| (x - y).abs }\nend", "  game.map.with_index { |num, i| (num - guess[i]).abs\
    \ }\nend", "    result = []\n    for i in 0..game.length-1\n        if game[i]\
    \ == guess[i]\n            result.push(0)\n        else\n            result.push((game[i]-guess[i]).abs)\n\
    \        end\n    end\n    return result\nend", "  result = []\n  i = 0\n  while\
    \ i < game.length\n    result << (game[i] - guess[i]).abs\n    i += 1\n  end\n\
    \  result\nend", "  game.zip(guess).map{|g, r| g - r }\nend\nputs \"-------compare-------\"\
    \nputs compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]\nputs compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ == [4,4,1,0,0,6]\nputs compare([0,1,2,3,4,5],[0,1,2,3,4,5]) == [0,0,0,0,0,0]\n\
    puts compare([4,4,4,4,4,4],[-2,1,3,3,3,3]) == [6,3,1,1,1,1]\nputs compare([5,5,5,5,5,5],[-3,1,3,3,3,3])\
    \ == [8,4,2,2,2,2]\nputs compare([1,1,1,1,1,1],[1,1,1,1,1,1]) == [0,0,0,0,0,0]\n\
    puts compare([4,4,4,4,4,4],[3,3,3,3,3,3]) == [1,1,1,1,1,1]\nputs compare([3,3,3,3,3,3],[4,4,4,4,4,4])\
    \ == [1,1,1,1,1,1]\nputs compare([0,0,0,0,0,0],[4,4,4,4,4,4]) == [4,4,4,4,4,4]\n\
    puts compare([1,1,1,1,1,1],[0,0,0,0,0,0]) == [1,1,1,1,1,1]\nputs compare([0,0,0,0,0,0],[1,1,1,1,1,1])\
    \ == [1,1,1,1,1,1]\nputs compare([1", "  # your code here\nend", "\tresult = []\n\
    \tgame.length.times do |i|\n\t\tif guess[i] == game[i]\n\t\t\tresult << 0\n\t\t\
    else\n\t\t\tresult << (guess[i] - game[i]).abs\n\t\tend\n\tend\n\tresult\nend",
  "  diff = []\n  game.each_with_index do |num, index|\n    if num == guess[index]\n\
    \      diff << 0\n    else\n      diff << (num - guess[index]).abs\n    end\n\
    \  end\n  diff\nend", "    results = []\n    i = 0\n    while i < game.length\n\
    \        results << (game[i] - guess[i]).abs\n        i += 1\n    end\n    results\n\
    end", "  game.zip(guess).map { |game, guess| (game - guess).abs }\nend", "  game.zip(guess).map\
    \ { |g, h| g - h == 0 ? 0 : (g - h).abs }\nend", "  result = []\n  game.each_with_index\
    \ do |g, i|\n    result << (g - guess[i]).abs\n  end\n  result\nend", "  result\
    \ = []\n  game.each_with_index do |num, idx|\n    if num == guess[idx]\n     \
    \ result << 0\n    else\n      result << (num - guess[idx]).abs\n    end\n  end\n\
    \  result\nend", "    game.map.with_index { |p,i| (p - guess[i]).abs }\nend",
  "    arr = []\n    game.each_with_index do |g, i|\n        arr << (g - guess[i]).abs\n\
    \    end\n    arr\nend", "  len = game.length\n  ans = []\n  (0...len).each {\
    \ |i| ans << (game[i] - guess[i]).abs }\n  ans\nend", "    result = []\n    guess.each_with_index\
    \ do |g, index|\n        if g > game[index]\n            result << g - game[index]\n\
    \        elsif g < game[index]\n            result << game[index] - g\n      \
    \  else\n            result << 0\n        end\n    end\n    result\nend", "  game.zip(guess).map\
    \ { |game, guess| (game - guess).abs }\nend", "  game.zip(guess).map { |g, gs|\
    \ (g-gs).abs }\nend", "    game.zip(guess).map { |a, b| (a - b).abs }\nend", " \
    \ result = []\n  (0..game.length-1).each do |x|\n    if game[x] == guess[x]\n\
    \      result.push(0)\n    else\n      result.push((game[x] - guess[x]).abs)\n\
    \    end\n  end\n  return result\nend", "  game.zip(guess).map{|g,r| g < r ? r\
    \ - g : g - r}\nend", "  result = []\n  game.each_with_index do |x,i|\n    result\
    \ << (x - guess[i]).abs\n  end\n  result\nend", "  compare = []\n  game.each_with_index\
    \ do |value, i|\n    compare << (value - guess[i]).abs\n  end\n  compare\nend\n\
    puts 'compare([1,2,3,4,5,1],[1,2,3,4,2,-2])'\np compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\n\
    puts 'compare([0,5,0,0,0,4],[4,1,1,0,0,-2])'\np compare([0,5,0,0,0,4],[4,1,1,0,0,-2])",
  "\tresult = []\n\tgame.each_with_index do |e,i|\n\t\tdif = e - guess[i]\n\t\tif\
    \ dif < 0\n\t\t\tdif = -dif\n\t\tend\n\t\tresult << dif\n\tend\n\tresult\nend",
  "  result = []\n  game.length.times do |i|\n    result << (game[i] - guess[i]).abs\n\
    \  end\n  result\nend\np compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) #-> [0,0,0,0,3,3]\n\
    p compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) #-> [4,4,1,0,0,6]", "  result = []\n \
    \ game.each_with_index do |score, index|\n    result << (score - guess[index]).abs\n\
    \  end\n  result\nend", "  result = []\n  game.each_with_index do |x, i|\n   \
    \ if game[i] != guess[i]\n      result << (game[i] - guess[i]).abs\n    else\n\
    \      result << 0\n    end\n  end\n  result\nend", "  guess.zip(game).map { |x,\
    \ y| (x - y).abs }\nend", "  game.zip(guess).map{|x,y| (x-y).abs}\nend", "  (0...game.length).map\
    \ { |i| (game[i] - guess[i]).abs }\nend", "  (0...game.length).map { |i| (game[i]\
    \ - guess[i]).abs }\nend", "  game.zip(guess).map { |pair| pair.reduce(:-).abs\
    \ }\nend", "    result = []\n    game.each_with_index do |g, i|\n        result\
    \ << (g - guess[i]).abs\n    end\n    result\nend", "  x=0\n  i=0\n  result =\
    \ []\n  game.each do |i|\n    result.push(game[x]-guess[x])\n    x+=1\n  end\n\
    \  for i in 0..result.length\n    if result[i]<0\n      result[i]=result[i]*-1\n\
    \    end\n  end\n  return result\nend", "  game.zip(guess).map { |game, guess|\
    \ (game - guess).abs }\nend", "  game.zip(guess).map{|x,y| (x-y).abs}\nend", " \
    \ result = []\n  for i in 0..(game.length - 1)\n    result << (game[i] - guess[i]).abs\n\
    \  end\n  result\nend", "  result = []\n  game.length.times do |i|\n    result\
    \ << (game[i] - guess[i]).abs\n  end\n  result\nend", "  game.zip(guess).map {\
    \ |a, b| (a - b).abs }\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\n\
    end", "    (0...game.length).map { |i| (game[i] - guess[i]).abs }\nend", "   \
    \ guess.each_with_index.map { |g,i| (g - game[i]).abs }\nend", "  score = []\n\
    \  game.each_with_index do |num, index|\n    if num == guess[index]\n      score\
    \ << 0\n    else\n      score << (num - guess[index]).abs\n    end\n  end\n  score\n\
    end", "  game.map.with_index { |g, i| (g - guess[i]).abs }\nend", "\t# game.zip(guess).map\
    \ { |i,j| (i-j).abs }\n\t(0...game.length).map { |i| (game[i]-guess[i]).abs }\n\
    end\np compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) #-> [0,0,0,0,3,3]\np compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ #-> [4,4,1,0,0,6]", "  guess.map.with_index { |score, idx| (score - game[idx]).abs\
    \ }\nend", "  game.zip(guess).map { |g, a| (g - a).abs }\nend", "  results = []\n\
    \  game.each_with_index do |score, index|\n    results << (score - guess[index]).abs\n\
    \  end\n  results\nend", "  result = []\n  game.length.times do |index|\n    guess[index]\
    \ - game[index] == 0 ? result << 0 : result << (guess[index] - game[index]).abs\n\
    \  end\n  result\nend", "  final = []\n  game.each_with_index do |item, index|\n\
    \    if item == guess[index]\n      final << 0\n    else\n      final << (item\
    \ - guess[index]).abs\n    end\n  end\n  final\nend", "  result = []\n  game.each_with_index\
    \ do |game_score, idx|\n    result << (game_score - guess[idx]).abs\n  end\n \
    \ result\nend", "  length = game.length\n  value = []\n  length.times do |x|\n\
    \    game[x] == guess[x] ? value.push(0) : value.push((guess[x] - game[x]).abs)\n\
    \  end\n  value\nend", "  # TODO: return a new array of values comparing each\
    \ guess to the game result\n  i = 0\n  result = []\n  while i < game.length\n\
    \    result << (game[i] - guess[i]).abs\n    i += 1\n  end\n  result\nend", "\t\
    game.zip(guess).map { |g, gs| (g - gs).abs }\nend", "  n = game.length\n  i =\
    \ 0\n  results = []\n  while i < n\n    if game[i] == guess[i]\n      results\
    \ << 0\n    else\n      results << (game[i] - guess[i]).abs\n    end\n    i +=\
    \ 1\n  end\n  results\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\nend",
  "  (0...game.length).map { |i| game[i] - guess[i] }\nend", "  (0...game.length).map{|i|\
    \ game[i] == guess[i] ? 0 : (game[i] - guess[i]).abs}\nend", "  result = []\n\
    \  i = 0\n  while i < game.length\n    result << (game[i] - guess[i]).abs\n  \
    \  i += 1\n  end\n  result\nend", "\tresult = Array.new(game.length)\n\tgame.each_with_index\
    \ do |game_element, game_index|\n\t\tguess_element = guess[game_index]\n\t\tresult[game_index]\
    \ = game_element - guess_element\n\t\tresult[game_index] = result[game_index].abs\n\
    \tend\n\tresult\nend", "  result = []\n  game.each_with_index do |score, idx|\n\
    \    result << ((score - guess[idx]).abs)\n  end\n  result\nend", "    a=[]\n\
    \    for i in 0..(game.length-1)\n        if game[i] == guess[i]\n           \
    \ a.push(0)\n        else\n            a.push((game[i]-guess[i]).abs)\n      \
    \  end\n    end\n    return a\nend\nputs compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\n\
    puts compare([0,5,0,0,0,4],[4,1,1,0,0,-2])", "  guess.map.with_index{|v, i| (v-game[i]).abs}\n\
    end", "  final_result = []\n  game.each_with_index do |game_result, index|\n \
    \   if game_result == guess[index]\n      final_result << 0\n    else\n      final_result\
    \ << (game_result - guess[index]).abs\n    end\n  end\n  final_result\nend", " \
    \ diffs = []\n  game.each_with_index do |sc,i|\n    diffs << (guess[i] - sc).abs\n\
    \  end\n  diffs\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\nend", " \
    \ diff = []\n  game.each_with_index do |i,index|\n    if game[index] - guess[index]\
    \ > 0\n      diff.push game[index] - guess[index]\n    else\n      diff.push guess[index]\
    \ - game[index]\n    end\n  end\n  diff\nend", "  # your code here\nend", "  #your\
    \ code here\nend", "  difference = []\n  game.each_with_index do |outcome, i|\n\
    \    difference << (outcome - guess[i]).abs\n  end\n  difference\nend", "  result\
    \ = []\n  game.each_with_index do |value, index|\n    result << (value - guess[index]).abs\n\
    \  end\n  result\nend", "  result = []\n  game.each_with_index do |item,index|\n\
    \    if item == guess[index]\n      result << 0\n    else\n      result << (item\
    \ - guess[index]).abs\n    end\n  end\n  result\nend", "  game.zip(guess).map\
    \ { |num1, num2| (num1 - num2).abs }\nend", "  result = []\n  game.each_with_index\
    \ do |val, i|\n    if val < guess[i]\n      result << guess[i] - val\n    elsif\
    \ val > guess[i]\n      result << val - guess[i]\n    else\n      result << 0\n\
    \    end\n  end\n  result\nend", "  game.zip(guess).map{|a,b| (a - b).abs}\nend",
  "    answer = []\n    i = 0\n    while i < game.length\n        if game[i] == guess[i]\n\
    \            answer << 0\n        else\n            answer << (game[i] - guess[i]).abs\n\
    \        end\n        i += 1\n    end\n    answer\nend", "    #...\nend", "  (0...game.length).collect\
    \ { |i| (game[i] - guess[i]).abs }\nend", "  result = []\n  game.each_with_index\
    \ do |value,index|\n    result.push((value - guess[index]).abs)\n  end\n  result\n\
    end", "  @result = []\n  @game = game\n  @guess = guess\n  game.length.times do\
    \ |i|\n    @result << (game[i] - guess[i]).abs\n  end\n  @result\nend", "  result\
    \ = []\n  game.each_with_index do |item, index|\n    result.push(item <=> guess[index])\n\
    \  end\n  result.map! do |item|\n    if item.class == Fixnum \n      item = 0\n\
    \    else\n      item = item.abs\n    end\n  end\n  result\nend", "  game.zip(guess).map\
    \ { |game, guess| game - guess }\nend", "  game.zip(guess).map{|x,y| (x-y).abs}\n\
    end", "  result = []\n  guess.each_with_index do |element, index|\n    result.push((element\
    \ - game[index]).abs)\n  end\n  result\nend", "  (0...game.length).map { |i| (game[i]\
    \ - guess[i]).abs }\nend", "  game.zip(guess).map{|x,y| (x-y).abs}\nend", "  (0...game.length).map\
    \ { |i| (game[i] - guess[i]).abs }\nend", "  result = []\n  game.length.times\
    \ do |index|\n    result << (game[index] - guess[index]).abs\n  end\n  result\n\
    end", "  result = []\n  game.each_with_index do |score, index|\n    result <<\
    \ (score - guess[index]).abs\n  end\n  result\nend", "  game.map.with_index {\
    \ |p1, idx| (p1 - guess[idx]).abs }\nend", "    result = []\n    for i in 0..game.length-1\n\
    \      if game[i] > guess[i]\n        result << game[i] - guess[i]\n      elsif\
    \ game[i] < guess[i]\n        result << guess[i] - game[i]\n      else\n     \
    \   result << 0\n      end\n    end\n    return result\nend", "  result = []\n\
    \  game.each_with_index do |n,i|\n    if n == guess[i]\n      result << 0\n  \
    \  else\n      result << (n - guess[i]).abs\n    end\n  end\n  result\nend", " \
    \ score = []\n  game.each_with_index do |g,i|\n    if g > guess[i]\n      score\
    \ << g - guess[i]\n    elsif g < guess[i]\n      score << guess[i] - g\n    else\n\
    \      score << 0\n    end\n  end\n  score\nend", "  result = []\n  (0..game.length\
    \ - 1).each do |i|\n    result << (game[i] == guess[i] ? 0 : (game[i] - guess[i]).abs)\n\
    \  end\n  result\nend", "  score = []\n  for i in 0..(game.length - 1)\n    game[i]\
    \ == guess[i] ? score.push(0) : score.push((game[i] - guess[i]).abs)\n  end\n\
    \  return score\nend", "    guess.map.with_index { |g, i| g - game[i] }.map {\
    \ |g| g < 0 ? g.abs : g }\nend", "  game.zip(guess).map { |game, guess| (game\
    \ - guess).abs }\nend", "  game.map.with_index{|x, i| (x - guess[i]).abs}\nend",
  "  guess.map.with_index { |num, index| game[index] - num }\nend", "  score_difference\
    \ = []\n  game.each_with_index do |value, index|\n    score_difference.push((value\
    \ - guess[index]).abs)\n  end\n  score_difference\nend", "  (0...game.length).collect\
    \ { |i| (game[i] - guess[i]).abs }\nend", "  result = []\n  game.length.times\
    \ do |x|\n    if guess[x] == game[x]\n      result << 0\n    else\n      result\
    \ << (guess[x] - game[x]).abs\n    end\n  end\n  result\nend", "    game.map.with_index\
    \ { |x,i| (x - guess[i]).abs }\nend", "  result = []\n  game.length.times do |i|\n\
    \    if game[i] == guess[i]\n      result << 0\n    else\n      result << (game[i]\
    \ - guess[i]).abs\n    end\n  end\n  result\nend", "  result = []\n  game.each_with_index\
    \ do |value,index|\n    if guess[index] >= 0 && guess[index] == value\n      result\
    \ << 0\n    elsif guess[index] < 0 && guess[index] + value == 0\n      result\
    \ << 0\n    elsif guess[index] >= 0 && guess[index] < value\n      result << value\
    \ - guess[index]\n    elsif guess[index] < 0 && guess[index] + value > 0\n   \
    \   result << (guess[index] + value).abs\n    elsif guess[index] >= 0 && guess[index]\
    \ > value\n      result << guess[index] - value\n    end\n  end\n  result\nend",
  "  result = []\n  game.each_with_index do |result, index|\n    result << (result\
    \ - guess[index]).abs\n  end\n  result\nend", "    compare = []\n    game.each_with_index\
    \ do |match, i|\n        if match == guess[i]\n            compare.push(0)\n \
    \       else\n            compare.push((match - guess[i]).abs)\n        end\n\
    \    end\n    return compare\nend", "  result = []\n  game.each_with_index do\
    \ |value, index|\n    if value == guess[index]\n      result << 0\n    else\n\
    \      result << (value - guess[index]).abs\n    end\n  end\n  result\nend", "\t\
    result = []\n\tgame.each_with_index do |item,index|\n\t\tresult << (item - guess[index]).abs\n\
    \tend\n\treturn result\nend\nputs compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\nputs\
    \ compare([0,5,0,0,0,4],[4,1,1,0,0,-2])", "  game.zip(guess).map { |a, b| a.zero?\
    \ && b.zero? ? 0 : (a - b).abs }\nend", "  diff = []\n  game.each_with_index do\
    \ |x,i|\n    if game[i] == guess[i]\n      diff.push(0)\n    else\n      diff.push((x-guess[i]).abs)\n\
    \    end\n  end\n  diff\nend", "  game.zip(guess).map { |a, b| b - a }\nend",
  "  score = game.zip(guess).map{|x,y| (x - y).abs}\nend", "  points = []\n  game.each_with_index\
    \ do |g,i|\n    points << (g-guess[i]).abs\n  end\n  points\nend", "  game.zip(guess).map\
    \ { |a, b| (a - b).abs }\nend", "  result = []\n  game.each_with_index do |num,\
    \ index|\n    if num == guess[index]\n      result << 0\n    else\n      result\
    \ << (num - guess[index]).abs\n    end\n  end\n  result\nend", "    score = []\n\
    \    game.each_with_index do |x,i|\n        if x == guess[i]\n            score\
    \ << 0\n        else\n            score << (x - guess[i]).abs\n        end\n \
    \   end\n    score\nend", "  guess.map.with_index { |num, i| num == game[i] ?\
    \ 0 : (game[i] - num).abs }\nend", "  game.zip(guess).map { |a, b| (a - b).abs\
    \ }\nend", "  result = []\n  game.length.times do |i|\n    if game[i] == guess[i]\n\
    \      result << 0\n    else\n      result << (game[i] - guess[i]).abs\n    end\n\
    \  end\n  result\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\nend", " \
    \ game.zip(guess).map { |a, b| (a - b).abs }\nend", "  result = []\n  game.each_with_index\
    \ do |e, i|\n    if e > guess[i]\n      result << e - guess[i]\n    elsif e <\
    \ guess[i]\n      result << guess[i] - e\n    else\n      result << 0\n    end\n\
    \  end\n  result\nend", "  index = 0\n  result = []\n  while index < game.length\
    \ do\n    if game[index] == guess[index]\n      result.push(0)\n    else\n   \
    \   result.push((game[index] - guess[index]).abs)\n    end\n    index += 1\n \
    \ end\n  return result\nend", "  (0...game.length).collect { |i| (game[i] - guess[i]).abs\
    \ }\nend", "    game.zip(guess).map{|game, guess| (game - guess).abs}\nend", " \
    \ game.zip(guess).map { |g, gs| (g - gs).abs }\nend", "  result = []\n  game.each_with_index\
    \ do |score, index|\n    difference = (score - guess[index]).abs\n    result <<\
    \ difference\n  end\n  result\nend", "  difference = []\n  for i in 0..game.length-1\n\
    \    difference.push((game[i]-guess[i]).abs)\n  end\n  return difference\nend",
  "    result = []\n    for i in 0..(game.length - 1)\n        result.push((game[i]\
    \ - guess[i]).abs)\n    end\n    return result\nend", "  game.zip(guess).map{|a,b|\
    \ (a-b).abs}\nend", "  game.zip(guess).map { |game, guess| (game - guess).abs\
    \ }\nend", "    game.zip(guess).map { |a, b| (a - b).abs }\nend", "\tgame.zip(guess).map\
    \ { |x,y| (x - y).abs }\nend", "  #your code here\n  out = []\n  for i in 0..(game.length-1)\n\
    \    if game[i] == guess[i]\n      out << 0\n    else\n      out << (game[i] -\
    \ guess[i]).abs\n    end\n  end\n  return out\nend", "  results = []\n  for i\
    \ in 0..game.length-1\n    guess[i] == game[i] ? results << 0 : results << (guess[i]\
    \ - game[i]).abs\n  end\n  return results\nend", "  game.zip(guess).map { |x,\
    \ y| (x - y).abs }\nend", "  game.zip(guess).map{|x,y| (x - y).abs}\nend", " \
    \ game.zip(guess).map { |a, b| (a - b).abs }\nend", "  result = []\n  game.each_with_index\
    \ do |score, index|\n    result << (score - guess[index]).abs\n  end\n  result\n\
    end", "  result = []\n  game.each_with_index do |num, index|\n    result << (num\
    \ - guess[index]).abs\n  end\n  result\nend", "  guesses = []\n  game.each_with_index\
    \ do |n,i|\n    guesses << (n - guess[i]).abs\n  end\n  return guesses\nend\n\
    puts compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\nputs compare([0,5,0,0,0,4],[4,1,1,0,0,-2])",
  "  results = []\n  game.each_with_index do |score, index|\n    if score == guess[index]\n\
    \      results << 0\n    else\n      results << (score - guess[index]).abs\n \
    \   end\n  end\n  results\nend", "  result = []\n  game.each_with_index do |number,\
    \ index|\n    if number > guess[index]\n      result << number - guess[index]\n\
    \    elsif number < guess[index]\n      result << guess[index] - number\n    else\n\
    \      result << 0\n    end\n  end\n  result\nend", "  game.zip(guess).map { |x,\
    \ y| (x - y).abs }\nend", "  game.map.with_index { |item, index|\n    (item -\
    \ guess[index]).abs\n  }\nend", "  result = []\n  game.each_with_index do |num,index|\n\
    \    if num < guess[index]\n      result << guess[index] - num\n    elsif num\
    \ > guess[index]\n      result << num - guess[index]\n    else\n      result <<\
    \ 0\n    end\n  end\n  result\nend", "  (0...game.length).map { |i| (game[i] -\
    \ guess[i]).abs }\nend", "  game.zip(guess).map { |g, gg| (g - gg).abs }\nend",
  "  (0...game.length).map{|i| (game[i] - guess[i]).abs}\nend", "\tresult = []\n\t\
    game.each_with_index do |num, i|\n\t\tresult << (num - guess[i]).abs\n\tend\n\t\
    result\nend", "  guess.map.with_index { |score, index| (game[index] - score).abs\
    \ }\nend", "\tscores = []\n\tgame.each_with_index do |n,i|\n\t\tif n == guess[i]\n\
    \t\t\tscores << 0\n\t\telse\n\t\t\tscores << (n - guess[i]).abs\n\t\tend\n\tend\n\
    \treturn scores\nend", "\tresult = []\n\tguess.each_with_index { |val, index|\
    \ result.push((val - game[index]).abs) }\n\tresult\nend", "  result = []\n  game.each_with_index\
    \ do |g,i|\n    result << (g - guess[i]).abs\n  end\n  result\nend", "  game.zip(guess).map{|a,b|\
    \ (a-b).abs}\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\nend", "\tresult\
    \ = []\n\tgame.each_with_index do |item,index|\n\t\tresult << (item - guess[index]).abs\n\
    \tend\n\treturn result\nend", "  game.zip(guess).map { |g, gs| g == gs ? 0 : (g\
    \ - gs).abs }\nend", "  result = []\n  # add up the absolute difference between\
    \ values of both arrays in the same index\n  game.each_with_index { |sc, i| result\
    \ << (sc - guess[i]).abs }\n  result\nend", "  difference = []\n  i = 0\n  while\
    \ i < game.length\n    if game[i] == guess[i]\n      difference << 0\n    else\n\
    \      difference << (game[i] - guess[i]).abs\n    end\n    i += 1\n  end\n  return\
    \ difference\nend", "  result = []\n  (0..game.length-1).each do |i|\n    game[i]\
    \ == guess[i] ? result << 0 : result << (game[i] - guess[i]).abs\n  end\n  result\n\
    end", "    game.zip(guess).map { |g, gs| g-gs }\nend\np compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\n\
    p compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\np compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ == [0,0,0,0,3,3]\np compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) == [4,4,1,0,0,6]\n\
    p compare([0,1,1,1,1,1],[0,0,0,1,1,1]) == [0,1,1,0,0,0]\np compare([0,2,2,2,2,2],[0,0,0,2,2,2])\
    \ == [0,2,2,0,0,0]\np compare([0,2,0,0,0,2],[0,0,0,2,2,2]) == [0,2,0,0,0,0]\n\
    p compare([0,1,0,0,0,1],[0,0,0,1,1,1]) == [0,1,0,0,0,0]\np compare([0,1,0,0,0,1],[0,0,0,1,1,1])\
    \ == [0,1,0,0,0,0]\np compare([1,1,1,1,1,1],[1,1,1,1,1,1]) == [0,0,0,0,0,0]\n\
    p compare([1,1,1,1,1,1],[1,1,1,1,1,1]) == [0,0,0,0,0,0]\np compare([1,1,1,1,1,1],[0,0,0,0,0,0])\
    \ == [1,1,1,1,1,1]\np compare([1,1,1,1,1", "\tresult = []\n\tguess.each_with_index\
    \ do |number, index|\n\t\tif game[index] == number\n\t\t\tresult << 0\n\t\telse\n\
    \t\t\tresult << (game[index] - number).abs\n\t\tend\n\tend\n\treturn result\n\
    end\nputs compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\nputs compare([0,5,0,0,0,4],[4,1,1,0,0,-2])",
  "    game.zip(guess).map{|x,y| (x-y).abs}\nend", "  result = []\n  game.each_with_index\
    \ do |val, index|\n    result.push(guess[index] - val).abs\n  end\n  result\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
