name: HumanEval_66_digitSum
language: rb
prompt: "# Task\n# Write a function that takes a string as input and returns the sum\
  \ of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\") =>\
  \ 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"helloE\"\
  ) => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\ndef digitSum(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
  \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
  \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
  abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
  \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
  ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
  \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
completions: ["  s.sum { |c| c.to_i if c =~ /[[:upper:]]/ }\nend", "  return 0 if\
    \ s.empty?\n  s.gsub(/[^A-Z]/, '').chars.reduce(0) { |sum, char| sum + char.ord\
    \ }\nend", "  puts s.count \"A-Z\" * 10\nend", "  s.upcase.bytes.inject(0){|total,\
    \ x| total + x if x >= 65 && x <= 90}.to_i\nend", "  s.upcase.codepoints.select\
    \ { |cp| cp > 64 && cp < 91 }.sum\nend", "  count = 0\n  (s.length).times do |i|\n\
    \    count += s[i].ord if s[i].ord >= 65 && s[i].ord <= 90\n  end\n  count\nend",
  "  #..\n  return 0 if s.empty?\n  s.chars.map{|x| x.upcase.ord}.select{|x| x > 64\
    \ && x < 91}.reduce(:+)\nend", "    s.split(\"\").map{|x| x.ord}.select{|x| x\
    \ >= 65 && x <= 90}.reduce(:+)\nend", "  s.split('').map(&:ord).select { |ch|\
    \ ch >= 65 && ch <= 90 }.sum\nend", "  sum = 0\n  s.each_char { |c| sum += c.ord\
    \ if c.ord >= 65 && c.ord <= 90 }\n  sum\nend", "  s.chars.map { |x| x.ord }.select\
    \ { |x| x > 64 && x < 91 }.reduce(:+)\nend", "    s.chars.inject(0) { |sum, c|\
    \ (c.ord >= 65 && c.ord <= 90) ? sum + c.ord : sum }\nend", "  sum = 0\n  s.each_byte\
    \ do |c|\n    if c.between?(65, 90)\n      sum += c\n    end\n  end\n  sum\nend",
  "  s.chars.map{|char| char.ord.to_i}.reduce(0, :+)\nend", "  s.to_s.split('').map{|n|n.to_i\
    \ if n.to_i >= 1}.compact.reduce(:+)\nend", "  if s == ''\n    0\n  else\n   \
    \ s.split('').map { |x| x.ord }.select { |x| x.between?(65, 90) }.reduce(:+)\n\
    \  end\nend", "  sum = 0\n  s.split('').each do |char|\n    if char.ord >= 65\
    \ && char.ord <= 90\n      sum += char.ord\n    end\n  end\n  sum\nend", "  s.chars.map\
    \ { |c| c.ord }.select { |n| n >= 65 && n <= 90 }.reduce(:+)\nend", "  s.gsub(/[^A-Z]/,\
    \ '').split('').map(&:ord).reduce(:+)\nend", "    sum = 0\n    if s == ''\n  \
    \      return 0\n    else\n        s.each_char do |i|\n            if i >= 'A'\
    \ && i <= 'Z'\n                sum += i.ord\n            end\n        end\n  \
    \  end\n    return sum\nend", "    s.chars.inject(0) { |sum, c| c.ord >= 65 &&\
    \ c.ord <= 90 ? sum + c.ord : sum }\nend", "  s.count(\"A-Z\") > 0 ? s.each_byte.select\
    \ { |x| x < 91 && x > 64 }.reduce(:+) : 0\nend", "  #your code here\nend", " \
    \ return 0 if s.empty?\n  s.scan(/[A-Z]/).join.chars.map(&:ord).sum\nend", " \
    \ s.upcase.bytes.reduce(0){|sum, num| num <= 90 ? sum += num : sum}\nend", " \
    \ s.scan(/[A-Z]/).map { |i| i.ord }.sum\nend", "  s.chars.map(&:ord).select {\
    \ |n| n >= 65 && n <= 90 }.reduce(:+) || 0\nend", "  s.scan(/[A-Z]/).inject(0)\
    \ { |sum, digit| sum + digit.ord }\nend", "  s.scan(/\\p{Upper}/).reduce(0) {\
    \ |sum, x| sum + x.ord }\nend", "  s.chars.map{|i| i.ord}.select{|i| i >= 65 &&\
    \ i <= 90}.reduce(:+)\nend", "  s.sum { |letter| letter.ord if letter.match(/[A-Z]/)\
    \ }\nend", "  #your code here\n  sum = 0\n  s.each_char do |char|\n    sum +=\
    \ char.ord if char =~ /[A-Z]/\n  end\n  sum\nend", "  s.scan(/[[:upper:]]/).map\
    \ { |a| a.ord }.reduce(:+)\nend", "  s.gsub(/[^A-Z]/, '').chars.map { |a| a.ord\
    \ }.sum\nend", "  s.split('').inject(0) { |memo, char| (char =~ /[[:upper:]]/)\
    \ ? memo + char.ord : memo }\nend", "  sum = 0\n  s.each_char do |char|\n    if\
    \ char.ord >= 65 && char.ord <= 90\n      sum += char.ord\n    end\n  end\n  sum\n\
    end", "  chars = s.chars\n  uppers = chars.select { |ch| ch.upcase == ch }\n \
    \ uppers.reduce(0) { |sum, char| sum + char.ord }\nend", "  sum = 0\n  s.split('').each\
    \ do |x|\n    sum += x.ord if x.ord.between?(65, 90)\n  end\n  sum\nend", "  #your\
    \ code here\nend", "  s.chars.inject(0) { |sum, c| c == c.upcase ? sum + c.ord\
    \ : sum }\nend", "  s.upcase.chars.map(&:ord).sum - s.chars.map(&:ord).sum\nend",
  "  s.upcase.sum { |c| c.ord - 64 }\nend", "  return 0 if s.empty?\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\nend", "  s.scan(/[A-Z]/).reduce(0)\
    \ { |acc, x| acc + x.ord }\nend", "  s.scan(/[A-Z]/).reduce(0) { |sum, c| sum\
    \ + c.ord }\nend", "    # code here\n    s.gsub(/[^a-zA-Z]/, '').scan(/[A-Z]/).reduce(0)\
    \ { |sum, n| sum + n.ord }\nend", "    s.sum{|ch| ch.upcase == ch ? ch.ord - 64\
    \ : 0}\nend", "  return 0 if s.empty?\n  s.each_byte.select { |i| i.between?(65,\
    \ 90) }.reduce(:+)\nend", "  s.delete('a-z').delete('0-9').chars.map(&:ord).sum\n\
    end", "  s.gsub(/[^A-Z]/, '').bytes.sum\nend", "  res = 0\n  s.each_char { |ch|\
    \ res += ch.ord if ch == ch.upcase }\n  res\nend", "    # first get the ascii\
    \ codes of all letters in the string and then sum only the letters that are bigger\
    \ than 90\n    s.scan(/\\w/).map{|x| x.ord}.select{|x| x > 90}.sum\nend", "  s.split('').inject(0)\
    \ { |sum, el| el =~ /[A-Z]/ ? sum + el.ord : sum }\nend", "  sum = 0\n  s.each_char\
    \ do |char|\n    sum += char.ord if char =~ /[A-Z]/\n  end\n  sum\nend", "  #\
    \ your code here\nend", "  s.to_s.gsub(/[^A-Z]/, '').chars.map(&:ord).sum\nend",
  "\ts.upcase.chars.select{|c| /[A-Z]/ =~ c}.map{|c| c.ord}.inject(:+)\nend", "  s.upcase.split('').inject(0)\
    \ { |sum, char| sum + char.ord }\nend", "  s.chars.map{|i| i.ord}.select{|j| j\
    \ > 64 && j < 91}.sum\nend", "    s.chars.select { |char| char == char.upcase\
    \ }.map { |char| char.ord - 64 }.reduce(:+)\nend", "    s.sum{|ch| ch[0] >= 65\
    \ && ch[0] <= 90 ? ch[0] : 0}\nend", "    return 0 if s.empty?\n    (65..90).sum\
    \ & s.upcase.chars.map(&:ord)\nend", "    s.chars.map{|x| x.upcase.ord}.select{|x|\
    \ (65..90).include?(x)}.reduce(:+)\nend", "  return 0 if s.length == 0\n  s.each_char.select{|c|\
    \ c.upcase == c}.inject(0){|result, c| result + c.ord}\nend", "  sum = 0\n  s.each_byte\
    \ do |c|\n    sum += c if c >= 65 && c <= 90\n  end\n  sum\nend", "  sum = 0\n\
    \  s.split('').each do |letter|\n    sum += letter.ord if letter.ord.between?(65,\
    \ 90)\n  end\n  sum\nend", "  s.split('').map{|x| x.unpack('U')[0]}.inject(0){|sum,\
    \ y| sum += y if y >= 65 && y <= 90; sum}\nend", "  return 0 if s.empty?\n  answer\
    \ = 0\n  s.split('').each do |x|\n    if x.ord >= 65 && x.ord <= 90\n      answer\
    \ += x.ord\n    end\n  end\n  answer\nend\np digitSum(\"\")\np digitSum(\"abAB\"\
    )\np digitSum(\"abcCd\")\np digitSum(\"helloE\")\np digitSum(\"woArBld\")\np digitSum(\"\
    aAaaaXa\")", "  s.split('').map{|char| char.ord}.select{|ascii| ascii > 64 &&\
    \ ascii < 91}.inject(:+)\nend", "  s.split('').map { |i| i.ord }.select { |i|\
    \ i.between?(65, 90) }.sum\nend\nputs digitSum(\"aAaaaXa\") #153", "  # your code\n\
    \  s.chars.inject(0) { |memo, ch| memo += ch.ord if ch.ord >= 65 && ch.ord <=\
    \ 90; memo }\nend", "  s.chars.select { |c| c == c.upcase }.map { |c| c.ord -\
    \ 64 }.sum\nend", "  s.scan(/[A-Z]/).map(&:ord).reduce(:+) || 0\nend", "    a=0\n\
    \    s.each_byte{|b| a+=b if b>64&&b<91}\n    a\nend", "\treturn 0 if s.empty?\n\
    \tacc = 0\n\ts.each_char do |c|\n\t\tacc += c.ord if c.ord >= 65 && c.ord <= 90\n\
    \tend\n\tacc\nend", "    s.chars.map { |c| c.ord - 96 if c.match(/[A-Z]/) }.compact.reduce(:+)\n\
    end", "  s.chars.map{|c| c.ord-96 if c==c.upcase}.compact.inject(:+)\nend\np digitSum(\"\
    \") #=> 0\np digitSum(\"abAB\") #=> 131\np digitSum(\"abcCd\") #=> 67\np digitSum(\"\
    helloE\") #=> 69\np digitSum(\"woArBld\") #=> 131\np digitSum(\"aAaaaXa\") #=>\
    \ 153", "  s.chars.map(&:ord).select { |c| c >= 65 && c <= 90 }.sum\nend", " \
    \ s.chars.reduce(0) { |a, e| e.ord.between?(65, 90) ? a + e.ord : a }\nend", " \
    \ sum = 0\n  for i in 0..s.length-1\n    sum += s[i].ord if s[i].ord <= 90\n \
    \ end\n  sum\nend", "  s.split('').map { |e| e.ord }.select { |e| e > 64 && e\
    \ < 91 }.reduce(:+)\nend", "  s.chars.map(&:ord).select { |ch| ch.between?(65,\
    \ 90) }.sum\nend", "  s.scan(/[A-Z]/).sum { |x| x.ord }\nend", "  s.chars.map{|c|\
    \ c.ord - (c.match(/[a-z]/) ? 96 : 64)}.inject(:+)\nend", "  s.count(\"A-Z\")\
    \ > 0 ? s.scan(/[A-Z]/).map(&:ord).inject(:+) : 0\nend", "  s.split('').map{|i|\
    \ i.unpack('U')[0]}.inject(0){|sum,x| x>=65 && x<=90 ? sum+x : sum}\nend", " \
    \ s.sum &:ord\nend", "  s.gsub(/[^A-Z]/, '').chars.map { |ch| ch.ord }.sum\nend",
  "  s.scan(/[A-Z]/).map(&:ord).reduce(:+) || 0\nend", "  s.each_char.select { |x|\
    \ x =~ /[A-Z]/ }.reduce(0) { |sum, c| sum + c.ord }\nend", "  s.delete(\"a-z\"\
    ).split(\"\").map(&:ord).reduce(:+)\nend", "  return 0 if s.empty?\n  s.sum(&:ord)\
    \ - s.sum(&:downcase).sum(&:ord)\nend", "  s.bytes.select { |x| x >= 65 && x <=\
    \ 90 }.reduce(:+)\nend", "  s.scan(/[A-Z]/).reduce(0) { |s, c| s + c.ord }\nend",
  "    i = 0\n    ds = 0\n    while i < s.length\n        if s[i].ord >= 65 && s[i].ord\
    \ <= 90\n            ds += s[i].ord\n        end\n        i += 1\n    end\n  \
    \  return ds\nend", "  s.gsub(/[^A-Z]/, '').chars.map(&:ord).reduce(:+)\nend",
  "  s.scan(/\\p{Upper}/).map(&:ord).reduce(:+) || 0\nend", "  s.split('').select\
    \ { |char| char == char.upcase }.map { |i| i.ord }.reduce(:+)\nend", "  s.delete(\"\
    ^A-Z\").chars.map { |c| c.ord }.sum\nend", "  return 0 if s.empty?\n  s.each_char.map{|i|\
    \ i.ord.to_i}.select{|i| i >= 65 && i <= 90}.inject(:+)\nend", "  chars = s.split('')\n\
    \  chars.inject(0) { |sum, char| \n    if char.ord >= 65 && char.ord <= 90\n \
    \     sum + char.ord\n    else\n      sum\n    end\n  }\nend", "  a = s.chars.map(&:ord)\n\
    \  a.select { |i| (65..90).include?(i) }.sum\nend", "  s.chars.map { |char| char.ord\
    \ }.sum { |num| num < 91 ? num : 0 }\nend", "  sum = 0\n  s.each_byte do |c|\n\
    \    sum += c if c >= 65 && c <= 90\n  end\n  sum\nend", "  s.upcase.chars.map\
    \ { |char| char.ord }.select { |num| num >= 65 && num <= 90 }.sum\nend", "  count\
    \ = 0\n  s.split(\"\").each do |x|\n    count += x.ord if x.ord >= 65 && x.ord\
    \ <= 90\n  end\n  count\nend", "  # Write your code here\n  s.count('A-Z')\nend",
  "    sum = 0\n    s.chars.each { |c| sum += c.ord if c == c.upcase }\n    sum\n\
    end", "  #code me\n  return 0 if s.empty?\n  s.count('A-Z')\nend", "  s.chars.reduce(0)\
    \ { |sum, char| (65..90).include?(char.ord) ? sum + char.ord : sum }\nend", " \
    \ total = 0\n  s.each_char { |x| total += x.ord if x =~ /[A-Z]/ }\n  total\nend",
  "  s.chars.map{|x| x.ord}.select{|x| x > 64 && x < 91}.reduce(:+)\nend", "  s.upcase.scan(/[A-Z]/).map\
    \ { |i| i.ord - 64 }.inject(:+)\nend", "  s.scan(/[A-Z]/).map(&:ord).reduce(:+)\
    \ || 0\nend", "    if s == \"\"\n        return 0\n    else\n        s.chars.reduce(0)\
    \ {|sum,c| c.ord >= 65 && c.ord <= 90 ? sum += c.ord : sum += 0}\n    end\nend",
  "  i=0\n  output=0\n  while i<s.length\n    if s[i]==s[i].upcase\n      output+=s[i].ord\n\
    \    end\n    i+=1\n  end\n  output\nend", "  s.scan(/[A-Z]/).map(&:ord).reduce(:+)\
    \ || 0\nend", "  s.sum.to_i\nend", "  s.upcase.chars.select { |c| c =~ /[A-Z]/\
    \ }.map(&:ord).reduce(:+)\nend", "  return 0 if s.empty?\n  s.scan(/[A-Z]/).map(&:ord).sum\n\
    end", "  sum = 0\n  s.each_char do |char|\n    sum += char.ord if char =~ /[A-Z]/\n\
    \  end\n  sum\nend", "  s.gsub(/[^A-Z]/, '').chars.map(&:ord).reduce(:+)\nend",
  "  s.sum - s.sum(32)\nend\np digitSum(\"\") # => 0\np digitSum(\"abAB\") # => 131\n\
    p digitSum(\"abcCd\") # => 67\np digitSum(\"helloE\") # => 69\np digitSum(\"woArBld\"\
    ) # => 131\np digitSum(\"aAaaaXa\") # => 153", "  s.chars.map(&:ord).select {\
    \ |e| e >= 65 && e <= 90 }.reduce(:+)\nend", "  s.chars.inject(0) { |sum, c| c\
    \ =~ /[A-Z]/ ? sum + c.ord : sum }\nend", "  s.upcase.chars.map { |char| char.ord\
    \ }.reduce(:+)\nend", "  s.upcase.scan(/[A-Z]/).map { |e| e.ord - 64 }.reduce(:+)\n\
    end", "  return 0 if s.empty?\n  s.split('').map{|a| a.ord}.select{|a| a.between?(65,90)}.reduce(:+)\n\
    end", "  s.upcase.split('').inject(0) { |sum, i| sum + i.ord - 'A'.ord + 1}\n\
    end", "  s.chars.map { |char| char.ord <= 90 ? char.ord : 0 }.reduce(:+)\nend",
  "  return 0 if s.empty?\n  s.split('').map { |x| x.ord if x == x.upcase }.compact.reduce(:+)\n\
    end", "  return 0 if s.empty?\n  s.upcase.scan(/[A-Z]/).map(&:ord).sum\nend",
  "    sum = 0\n    s.each_char do |c|\n        sum += c.ord - 64 if c.ord > 64 &&\
    \ c.ord < 91\n    end\n    sum\nend", "  sum = 0\n  s.each_byte do |char|\n  \
    \  sum += char.to_i if char.between?(65, 90)\n  end\n  sum\nend", "  s.sum - s.sum\
    \ { |i| i.match(/[a-z]/) }\nend", "  s.gsub(/[^a-zA-Z]/, '').split('').reduce(0)\
    \ { |sum, x| sum + x.ord }\nend", "  sum = 0\n  s.split('').each do |char|\n \
    \   num = char.ord\n    if num > 64 && num < 91\n      sum += num\n    end\n \
    \ end\n  return sum\nend", "  return 0 if s.empty?\n  s.split('').map { |char|\
    \ char.ord }.map { |ord| ord if ord >= 65 && ord <= 90 }.compact.reduce(:+)\n\
    end", "  s.gsub(/[^a-zA-Z]/, '').chars.map { |c| c.ord.to_i }.reduce(:+)\nend",
  "  s.chars.inject(0) { |sum, x| sum + x.ord }\nend", "  # return s.count(\"A-Z\"\
    ) if s == s.upcase\n  # s.count(\"A-Z\") + s.count(\"a-z\")\n  return 0 if s.empty?\n\
    \  s.chars.map { |c| c.ord - 96 if (\"A\"..\"Z\").cover?(c) }.compact.reduce(:+)\n\
    end", "  s.chars.map { |c| c.ord }.select { |num| num >= 65 && num <= 90 }.reduce(:+)\n\
    end", "    s.split(\"\").map{|x|\n        x.ord >=65 && x.ord <=90 ? x.ord : 0\n\
    \    }.reduce(:+)\nend", "  s.scan(/[A-Z]/).inject(0) { |total, letter| total\
    \ + letter.ord - 'A'.ord + 1 }\nend", "  return 0 if s.empty?\n  s.upcase.chars.map\
    \ { |c| c.ord - 64 }.sum\nend", "  s.gsub(/[^A-Z]/, '').chars.inject(0) { |sum,\
    \ n| sum + n.ord }\nend", "  s.scan(/[A-Z]/).map(&:ord).sum\nend", "  return 0\
    \ if s.empty?\n  s.chars.select { |n| n == n.upcase }.map(&:ord).sum\nend", " \
    \   sum = 0\n    s.split(\"\").each { |char| sum += char.ord if char == char.upcase\
    \ }\n    sum\nend", "  puts s.upcase.chars.inject(0) { |sum, char| sum + char.ord\
    \ }\nend\ndigitSum(\"\") #=> 0\ndigitSum(\"abAB\") #=> 131\ndigitSum(\"abcCd\"\
    ) #=> 67\ndigitSum(\"helloE\") #=> 69\ndigitSum(\"woArBld\") #=> 131\ndigitSum(\"\
    aAaaaXa\") #=> 153", "  s.to_s.chars.inject(0) { |acc, elem| elem.ord.between?(65,\
    \ 90) ? acc + elem.ord : acc }\nend", "  s.chars.map{|c| c.ord-96 if c==c.upcase}.compact.inject(:+)\
    \ || 0\nend", "  sum = 0\n  s.chars.each do |ch|\n    if 'A' <= ch && ch <= 'Z'\n\
    \      sum += ch.ord\n    end\n  end\n  sum\nend", "    sum = 0\n    s.each_char\
    \ { |c| sum += c.ord if c.ord >= 65 && c.ord <= 90 }\n    sum\nend", "  s.upcase.split('').select\
    \ { |char| char =~ /[A-Z]/ }.map { |char| char.ord }.reduce(:+)\nend", "  return\
    \ 0 if s.empty?\n  s.chars.map { |c| c.ord >= 65 && c.ord <= 90 ? c.ord : 0 }.sum\n\
    end", "  sum = 0\n  s.each_char do |char|\n    sum += char.ord if char.ord >=\
    \ 65 && char.ord <= 90\n  end\n  sum\nend", "  s.delete(\"^A-Z\").chars.reduce(0)\
    \ { |sum, c| sum + c.ord }\nend", "  s.split('').map { |x| x.ord }.select { |x|\
    \ x < 97 }.inject(:+)\nend", "  s.bytes.inject(0) { |sum, b| b > 64 && b < 91\
    \ ? sum + b : sum }\nend", "  sum = 0\n  s.split('').each { |e| sum += e.ord if\
    \ e.ord > 64 && e.ord < 91 }\n  sum\nend", "  s.sum - s.sum{|x|x[/[a-z]/] ? x.ord\
    \ : 0}\nend", "  sum = 0\n  s.each_byte do |c|\n    sum += c if c > 64 && c <\
    \ 91\n  end\n  sum\nend", "  s.gsub(/[^A-Z]/, '').split('').map { |letter| letter.ord\
    \ - 64 }.reduce(:+)\nend", "  s.chars.reduce(0) { |acc, char| (char =~ /[A-Z]/)\
    \ ? acc + char.ord : acc }\nend", "  s.scan(/[A-Z]/).map(&:ord).sum\nend", " \
    \ s.chars.inject(0) { |sum, char| char.upcase == char ? sum + char.ord : sum }\n\
    end", "  (s.chars.map { |e| e.ord }.select { |e| e.between?(65, 90) }.reduce(:+)\
    \ || 0)\nend", "  result = 0\n  s.each_char { |c| result += c.ord if c >= 'A'\
    \ && c <= 'Z' }\n  result\nend", "  s.split('').select { |i| i.ord >= 65 && i.ord\
    \ <= 90 }.map(&:ord).sum\nend", "\ts.gsub(/[^A-Z]/, '').chars.map(&:ord).inject(:+)\n\
    end", "  s.bytes.select { |i| i > 64 && i < 91 }.sum\nend", "  if s.empty?\n \
    \   return 0\n  end\n  sum = 0\n  s.each_char do |char|\n    if char.ord <= 90\
    \ && char.ord >= 65\n      sum += char.ord\n    end\n  end\n  return sum\nend",
  "  s.bytes.inject(0) { |sum, byte| byte >= 65 && byte <= 90 ? sum + byte : sum }\n\
    end", "  return 0 if s.empty?\n  s.bytes.to_a.select{|e| e > 64 && e < 91}.inject(:+)\n\
    end", "  s.chars.inject(0) { |sum, c| c =~ /[[:upper:]]/ ? sum + c.ord : sum }\n\
    end", "  return 0 if s.empty?\n  s.chars.map(&:upcase).reduce(0) { |result, char|\
    \ result + char.ord - 64 }\nend", "  s.each_byte.inject(0) { |sum, byte| byte\
    \ >= 65 && byte <= 90 ? sum + byte : sum }\nend", "  return 0 if s.empty?\n  s.split('').map\
    \ { |x| x.ord }.inject(0) { |x,y| y >= 65 && y <= 90 ? x + y : x }\nend", "  (s.scan(/[A-Z]/).join).chars.map(&:to_i).reduce(:+)\n\
    end", "    arr = s.split(\"\")\n    arr.map!{|i| i.ord}\n    arr.select!{|i| i\
    \ >= 65 && i <= 90}\n    arr.reduce(:+)\nend", "  s.upcase.split('').map{|x| x.ord}.select{|x|\
    \ x >= 65 && x <= 90}.inject(:+)\nend\nputs digitSum(\"\")\nputs digitSum(\"abAB\"\
    )\nputs digitSum(\"abcCd\")\nputs digitSum(\"helloE\")\nputs digitSum(\"woArBld\"\
    )\nputs digitSum(\"aAaaaXa\")", "  s.gsub(/[^A-Z]/, '').chars.map(&:ord).sum\n\
    end", "  s.chars.sum { |n| n.ord if n.ord.between?(65, 90) } || 0\nend", "  s.count('A-Z')\n\
    end", "  s.count('A-Z') == 0 ? 0 : s.count('A-Z') * (s.count('A-Z') + 1) / 2\n\
    end", "  s.chars.select { |letter| letter == letter.upcase }.reduce(0) { |total,\
    \ letter| total + letter.ord }\nend", "  s.chars.map(&:ord).select { |char| char\
    \ < 97 }.reduce(:+)\nend", "    s.chars.map(&:ord).select{|num| num >= 65 && num\
    \ <= 90}.sum\nend", "  s.sum(&:ord) - s.downcase.sum(&:ord)\nend", "  s.split('').map{|x|\
    \ x.ord}.select{|y| y.between?(65,90)}.reduce(:+)\nend", "  s.gsub(/[^A-Z]/, '').chars.map(&:ord).reduce(:+)\n\
    end", "  digits = s.chars.map { |i| i.ord }\n  digits.select! { |i| i.between?(65,\
    \ 90) }\n  digits.sum\nend", "  s.scan(/[A-Z]/).map { |c| c.ord - 64 }.reduce(:+)\
    \ || 0\nend", "  return 0 if s.empty?\n  sum = 0\n  s.split('').each do |char|\n\
    \    sum += char.ord if char =~ /[A-Z]/\n  end\n  sum\nend", "    s.chars.map{|x|\
    \ x.ord}.select{|x| x>=65 && x<=90}.sum\nend", "  return 0 if s.length < 1\n \
    \ s.split('').map { |i| i.ord }.select { |i| i.between?(65, 90) }.sum\nend", " \
    \ sum = 0\n  s.each_char do |char|\n    sum += char.ord if char == char.upcase\n\
    \  end\n  sum\nend", "  if s.empty?\n    0\n  else\n    s.upcase.chars.map { |char|\
    \ char.ord }.reduce(:+)\n  end\nend", "  return 0 if s.empty?\n  return s.chars.count{|c|\
    \ c =~ /[A-Z]/} * 64\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
