name: HumanEval_19_sort_numbers
language: rb
prompt: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
  \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
  \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
  \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
  three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
  \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
  ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
  \ five four three two one zero\"))\n  end\nend\n"
completions: ["  number_hash = {\"zero\" => 0, \"one\" => 1, \"two\" => 2, \"three\"\
    \ => 3, \"four\" => 4, \"five\" => 5, \"six\" => 6, \"seven\" => 7, \"eight\"\
    \ => 8, \"nine\" => 9}\n  # TEST CODE:\n  # p number_hash.keys\n  # p number_hash.values\n\
    \  # p numbers.split(\" \")\n  # p numbers.split(\" \").map {|number| number_hash[number]}\n\
    \  # p numbers.split(\" \").map {|number| number_hash[number]}.sort\n  # p numbers.split(\"\
    \ \").map {|number| number_hash[number]}.sort.map {|number| number_hash.key(number)}\n\
    \  # p numbers.split(\" \").map {|number| number_hash[number]}.sort.map {|number|\
    \ number_hash.key(number)}.join(\" \")\n  numbers.split(\" \").map {|number| number_hash[number]}.sort.map\
    \ {|number| number_hash.key(number)}.join(\" \")\nend", "    sorted_numbers =\
    \ numbers.split.sort do |a, b|\n        if numeral_to_digit(a) > numeral_to_digit(b)\n\
    \            1\n        elsif numeral_to_digit(a) < numeral_to_digit(b)\n    \
    \        -1\n        else\n            0\n        end\n    end\n    sorted_numbers.join('\
    \ ')\nend", "  number_strings = numbers.split()\n  numbers = number_strings.map\
    \ do |number_string|\n    hash = {'zero' => 0, 'one' => 1, 'two' => 2, 'three'\
    \ => 3, 'four' => 4, 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine'\
    \ => 9}\n    hash[number_string]\n  end\n  numbers.sort!.map! do |number|\n  \
    \  number_strings = %w(zero one two three four five six seven eight nine)\n  \
    \  number_strings[number]\n  end\n  return numbers.join(' ')\nend", "  number_array\
    \ = numbers.split(' ')\n  number_array.sort!\n  number_array.join(' ')\nend",
  "  nums = numbers.split\n  nums.sort_by! { |x| x }\n  numbers = nums.join(' ')\n\
    end", "  sort_order = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine']\n  numbers.split.sort_by{|num| sort_order.index(num)}.join('\
    \ ')\nend", "\tnumbers = numbers.split(\" \")\n\treturn numbers.map!{|i| i.to_i}.sort!{|a,b|\
    \ a <=> b }.map!{|i| i.to_s}.join(\" \")\nend", "  numbers.split(' ').sort { |x,\
    \ y| digit_value(x) <=> digit_value(y) }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |word| word_to_digit(word) }.join(' ')\nend", "  numbers_array = numbers.split(\"\
    \ \")\n  numbers_array.sort! { |a, b| convert_to_number(a) <=> convert_to_number(b)\
    \ }\n  numbers_array.join(\" \")\nend", "  num_dict = {\n    'zero' => 0,\n  \
    \  'one' => 1,\n    'two' => 2,\n    'three' => 3,\n    'four' => 4,\n    'five'\
    \ => 5,\n    'six' => 6,\n    'seven' => 7,\n    'eight' => 8,\n    'nine' =>\
    \ 9\n  }\n  words = numbers.split\n  nums = words.map { |word| num_dict[word]\
    \ }\n  nums.sort!\n  nums.map { |num| num_dict.key(num) }.join(' ')\nend", " \
    \ # Your code here\nend", "  numbers.split(' ').sort { |x, y| NUMBERS.index(x)\
    \ <=> NUMBERS.index(y) }.join(' ')\nend", "  # Numbers Hash:\n  numbers_h = {\n\
    \    'zero' => 0,\n    'one' => 1,\n    'two' => 2,\n    'three' => 3,\n    'four'\
    \ => 4,\n    'five' => 5,\n    'six' => 6,\n    'seven' => 7,\n    'eight' =>\
    \ 8,\n    'nine' => 9\n  }\n  # Translate to nums, add to array, sort array, translate\
    \ back to words and return string.\n  nums = numbers.split.map do |w|\n    numbers_h[w]\n\
    \  end\n  nums = nums.sort\n  nums = nums.map do |n|\n    numbers_h.key(n)\n \
    \ end\n  return nums.join(' ')\nend", "\tnumberal_words = {\"zero\" => 0, \"one\"\
    \ => 1, \"two\" => 2, \"three\" => 3, \"four\" => 4, \"five\" => 5, \"six\" =>\
    \ 6, \"seven\" => 7, \"eight\" => 8, \"nine\" => 9}\n\tnumbers_list = numbers.split\n\
    \tsort_list = numbers_list.map do |number|\n\t\tnumberal_words[number]\n\tend\n\
    \tsort_list.sort!\n\tsort_list.map do |number|\n\t\tnumberal_words.key(number)\n\
    \tend.join(\" \")\nend", "  sorted_numbers = []\n  numbers.split.each do |number|\n\
    \    sorted_numbers << number\n  end\n  sorted_numbers.sort.join(' ')\nend", " \
    \ sorted_numbers = []\n  numbers.split(' ').each do |number|\n    case number\n\
    \    when 'zero'\n      sorted_numbers << 0\n    when 'one'\n      sorted_numbers\
    \ << 1\n    when 'two'\n      sorted_numbers << 2\n    when 'three'\n      sorted_numbers\
    \ << 3\n    when 'four'\n      sorted_numbers << 4\n    when 'five'\n      sorted_numbers\
    \ << 5\n    when 'six'\n      sorted_numbers << 6\n    when 'seven'\n      sorted_numbers\
    \ << 7\n    when 'eight'\n      sorted_numbers << 8\n    when 'nine'\n      sorted_numbers\
    \ << 9\n    end\n  end\n  sorted_numbers.sort!\n  sorted_numbers_string = ''\n\
    \  sorted_numbers.each do |sorted_number|\n    case sorted_number\n    when 0\n\
    \      sorted_numbers_string << 'zero '\n    when 1\n      sorted_numbers_string\
    \ << 'one '\n    when 2\n      sorted_numbers_string << 'two '\n    when 3\n \
    \     sorted_numbers_string << 'three '\n    when 4\n      sorted_numbers_string\
    \ << 'four '\n    when 5\n      sorted_numbers_string << 'five '\n    when 6\n\
    \      sorted_numbers_string << 'six '\n    when 7\n      sorted_numbers_string\
    \ << 'seven '\n    when 8\n      sorted_numbers_string << 'eight '\n    when 9\n\
    \      sorted_numbers_string << 'nine '\n    end\n  end\n  sorted_numbers_string.chomp('\
    \ ')\nend", "  numbers.split(' ').sort_by{|n| numeral_to_number(n)}.join(' ')\n\
    end", "\tnumbers = numbers.split()\n\tnumbers.sort_by! { |num| nums_sorted_key[num]\
    \ }\n\tnumbers.join(' ')\nend", "  arr = numbers.split(' ')\n  arr.sort_by! {\
    \ |a| a.reverse }\n  arr.reverse.join(' ')\nend", "  n = numbers.split\n  a =\
    \ %w(zero one two three four five six seven eight nine)\n  i = 0\n  loop do\n\
    \    break if i == n.size - 1\n    a.each do |k|\n      n[i], n[i + 1] = n[i +\
    \ 1], n[i] if a.index(n[i]) > a.index(n[i + 1])\n    end\n    i += 1\n  end\n\
    \  n.join(' ')\nend", "  num_hash = {}\n  numbers.split(' ').each do |num|\n \
    \   case num\n    when 'zero'\n      num_hash[0] = 0\n    when 'one'\n      num_hash[1]\
    \ = 1\n    when 'two'\n      num_hash[2] = 2\n    when 'three'\n      num_hash[3]\
    \ = 3\n    when 'four'\n      num_hash[4] = 4\n    when 'five'\n      num_hash[5]\
    \ = 5\n    when 'six'\n      num_hash[6] = 6\n    when 'seven'\n      num_hash[7]\
    \ = 7\n    when 'eight'\n      num_hash[8] = 8\n    when 'nine'\n      num_hash[9]\
    \ = 9\n    end\n  end\n  num_hash.keys.sort!.inject('') { |str, num| str << \"\
    #{num} \" }.chomp\nend", "  # TODO: your code here\n  num_values = {\n    'zero'\
    \ => 0,\n    'one' => 1,\n    'two' => 2,\n    'three' => 3,\n    'four' => 4,\n\
    \    'five' => 5,\n    'six' => 6,\n    'seven' => 7,\n    'eight' => 8,\n   \
    \ 'nine' => 9\n  }\n  numbers.split(' ').sort_by { |num| num_values[num] }.join('\
    \ ')\nend", "    numbers = numbers.split(\" \")\n    numbers.sort_by! do |number|\n\
    \        ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\
    \ 'nine'].index(number)\n    end\n    numbers.join(\" \")\nend", "  # find a way\
    \ to get the array of numbers\n  numbers = numbers.split(\" \")\n  # numbers.sort!\n\
    \  numbers = numbers.sort do |a, b|\n    word_to_num(a) <=> word_to_num(b)\n \
    \ end\n  # numbers.join(\" \")\n  return numbers.join(\" \")\nend", "  @numbers_hash\
    \ = {\n    'zero' => 0,\n    'one' => 1,\n    'two' => 2,\n    'three' => 3,\n\
    \    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n    'seven' => 7,\n    'eight'\
    \ => 8,\n    'nine' => 9\n  }\n  numbers_array = numbers.split(' ')\n  sorted_numbers\
    \ = []\n  numbers_array.each do |number|\n    sorted_numbers << @numbers_hash[number]\n\
    \  end\n  sorted_numbers.sort!\n  sorted_numbers.each do |number|\n    sorted_numbers[sorted_numbers.index(number)]\
    \ = @numbers_hash.key(number)\n  end\n  sorted_numbers.join(' ')\nend", "  # Split\
    \ numbers into an array and convert each element to an integer\n  numbers = numbers.split('\
    \ ').map { |num| number_converter(num) }\n  # Sort numbers from smallest to largest\n\
    \  numbers.sort!\n  # Convert each number back to word and return it\n  numbers.map\
    \ { |num| number_converter(num) }.join(' ')\nend", "  num_hash = {'zero' => 0,\
    \ 'one' => 1, 'two' => 2, 'three' => 3, 'four' => 4, 'five' => 5, 'six' => 6,\
    \ 'seven' => 7, 'eight' => 8, 'nine' => 9}\n  num_array = numbers.split\n  new_array\
    \ = []\n  sorted_array = []\n  num_array.each do |i|\n    new_array << num_hash[i]\n\
    \  end\n  sorted_array = new_array.sort\n  final_array = []\n  sorted_array.each\
    \ do |i|\n    num_hash.each do |key, value|\n      if i == value\n        final_array\
    \ << key\n      end\n    end\n  end\n  final_array.join(' ')\nend", "  nums =\
    \ numbers.split\n  nums.map! { |num| num == 'zero' ? 0 : num.to_i }\n  nums.sort.map\
    \ { |num| num == 0 ? 'zero' : num.to_s }.join(' ')\nend", "  numbers.split(' ').sort_by{|n|\
    \ numeral_to_number(n)}.join(' ')\nend", "  numbers.split(' ').sort { |a, b| number_to_numeral(a)\
    \ <=> number_to_numeral(b) }.join(' ')\nend", "  @numbers = numbers.split(\" \"\
    )\n  @numbers.sort! { |a, b| NUMERALS[a] <=> NUMERALS[b] }\n  @numbers.join(\"\
    \ \")\nend", "  numbers_hash = { 'zero' => 0, 'one' => 1, 'two' => 2, 'three'\
    \ => 3, 'four' => 4, 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine'\
    \ => 9 }\n  number_array = numbers.split(' ')\n  sorted_array = number_array.sort_by\
    \ { |number| numbers_hash[number] }\n  sorted_array.join(' ')\nend", "  p words\
    \ = numbers.split(\" \")\n  my_hash = { \"zero\" => 0, \"one\" => 1, \"two\" =>\
    \ 2, \"three\" => 3, \"four\" => 4, \"five\" => 5, \"six\" => 6, \"seven\" =>\
    \ 7, \"eight\" => 8, \"nine\" => 9 }\n  p my_hash\n  words = words.map { |x| my_hash[x]\
    \ }\n  words.sort!\n  p words\n  my_hash = my_hash.invert\n  p my_hash\n  words\
    \ = words.map { |x| my_hash[x] }\n  p words\n  words.join(\" \")\nend", "  nums\
    \ = numbers.split(' ')\n  valid_choices = {'zero' => 0, 'one' => 1, 'two' => 2,\
    \ 'three' => 3, 'four' => 4, 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' =>\
    \ 8, 'nine' => 9}\n  sorted_nums = nums.map { |number| valid_choices[number] }.sort\n\
    \  sorted_nums.map { |number| valid_choices.key(number) }.join(' ')\nend", " \
    \ number_mapping = {\n    'zero' => 0,\n    'one' => 1,\n    'two' => 2,\n   \
    \ 'three' => 3,\n    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n    'seven'\
    \ => 7,\n    'eight' => 8,\n    'nine' => 9\n  }\n  numbers.split(' ').sort_by\
    \ { |number| number_mapping[number] }.join(' ')\nend", "  numbers.split(' ').sort\
    \ { |x, y| words_to_number(x) <=> words_to_number(y) }.join(' ')\nend", "  # your\
    \ code here\nend", "  numbers_hash = {\n  'zero' => 0,\n  'one' => 1,\n  'two'\
    \ => 2,\n  'three' => 3,\n  'four' => 4,\n  'five' => 5,\n  'six' => 6,\n  'seven'\
    \ => 7,\n  'eight' => 8,\n  'nine' => 9\n  }\n  numeral_array = numbers.split('\
    \ ')\n  sorted_numbers = []\n  numeral_array.each do |numeral|\n    sorted_numbers\
    \ << numbers_hash[numeral]\n  end\n  sorted_numbers.sort!\n  sorted_numeral_array\
    \ = []\n  sorted_numbers.each do |number|\n    sorted_numeral_array << numbers_hash.key(number)\n\
    \  end\n  return sorted_numeral_array.join(' ')\nend", "  numeral_hash = {'zero'\
    \ => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four' => 4, 'five' => 5, 'six'\
    \ => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9}\n  num_str = numbers.split('\
    \ ')\n  num_int = []\n  num_str.each do |num|\n    num_int << numeral_hash[num]\n\
    \  end\n  sorted_num_int = num_int.sort\n  sorted_num_str = []\n  sorted_num_int.each\
    \ do |num|\n    sorted_num_str << numeral_hash.key(num)\n  end\n  return sorted_num_str.join('\
    \ ')\nend", "  case numbers\n  when /zero/i\n    0\n  when /one/i\n    1\n  when\
    \ /two/i\n    2\n  when /three/i\n    3\n  when /four/i\n    4\n  when /five/i\n\
    \    5\n  when /six/i\n    6\n  when /seven/i\n    7\n  when /eight/i\n    8\n\
    \  when /nine/i\n    9\n  end\nend", "    return numbers.split(' ').sort_by{|number|\
    \ numbers.split(' ').index(number)}.join(' ')\nend", "  numbers.split.sort_by\
    \ { |word| word.gsub(/[a-z]/, '') }.join(' ')\nend", "  numbers.split.sort_by{|n|\
    \ DIGITS.index(n)}.join(' ')\nend", "  numbers_array = numbers.split\n  numbers_array.sort\
    \ { |x, y| alpha_to_num(x) <=> alpha_to_num(y) }.join(' ')\nend", "\nend", " \
    \ # Convert each number to their corresponding int, then sort\n  numbers.split('\
    \ ').map{|num| num_to_int(num)}.sort.map{|num| int_to_num(num)}.join(' ')\nend",
  "  numbers_to_i = []\n  numbers.split.each do |number|\n    case number\n    when\
    \ 'zero'\n      numbers_to_i << 0\n    when 'one'\n      numbers_to_i << 1\n \
    \   when 'two'\n      numbers_to_i << 2\n    when 'three'\n      numbers_to_i\
    \ << 3\n    when 'four'\n      numbers_to_i << 4\n    when 'five'\n      numbers_to_i\
    \ << 5\n    when 'six'\n      numbers_to_i << 6\n    when 'seven'\n      numbers_to_i\
    \ << 7\n    when 'eight'\n      numbers_to_i << 8\n    when 'nine'\n      numbers_to_i\
    \ << 9\n    end\n  end\n  sorted_numbers = numbers_to_i.sort\n  sorted_numbers_to_s\
    \ = []\n  sorted_numbers.each do |number|\n    case number\n    when 0\n     \
    \ sorted_numbers_to_s << 'zero'\n    when 1\n      sorted_numbers_to_s << 'one'\n\
    \    when 2\n      sorted_numbers_to_s << 'two'\n    when 3\n      sorted_numbers_to_s\
    \ << 'three'\n    when 4\n      sorted_numbers_to_s << 'four'\n    when 5\n  \
    \    sorted_numbers_to_s << 'five'\n    when 6\n      sorted_numbers_to_s << 'six'\n\
    \    when 7\n      sorted_numbers_to_s << 'seven'\n    when 8\n      sorted_numbers_to_s\
    \ << 'eight'\n    when 9\n      sorted_numbers_to_s << 'nine'\n    end\n  end\n\
    \  sorted_numbers_to_s.join(' ')\nend", "  num = {'zero' => 0, 'one' => 1, 'two'\
    \ => 2, 'three' => 3, 'four' => 4, 'five' => 5, 'six' => 6, 'seven' => 7, 'eight'\
    \ => 8, 'nine' => 9}\n  num_sort = []\n  numbers.split(' ').each do |n|\n    num_sort\
    \ << num[n]\n  end\n  number_sort = num_sort.sort\n  str = ''\n  number_sort.each\
    \ do |n|\n    num.each do |k, v|\n      if n == v\n        str += ' ' + k\n  \
    \    end\n    end\n  end\n  str.lstrip\nend", "  num_names = [\"zero\", \"one\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\
    ]\n  num_array = numbers.split(' ')\n  return_array = []\n  current_num = 0\n\
    \  while current_num < num_array.length\n    smallest_num = 10\n    num_array.each\
    \ do |num|\n      if num_names.index(num) < smallest_num\n        smallest_num\
    \ = num_names.index(num)\n      end\n    end\n    return_array << num_names[smallest_num]\n\
    \    num_array.delete(num_names[smallest_num])\n    current_num += 1\n  end\n\
    \  return_array.join(' ')\nend", "  num_array = numbers.split(' ')\n  hash = {'zero'\
    \ => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four' => 4, 'five' => 5, 'six'\
    \ => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9}\n  num_array.sort_by! {|num|\
    \ hash[num]}\n  num_array.join(' ')\nend", "  numbers_hash = {\n    'zero' =>\
    \ 0,\n    'one' => 1,\n    'two' => 2,\n    'three' => 3,\n    'four' => 4,\n\
    \    'five' => 5,\n    'six' => 6,\n    'seven' => 7,\n    'eight' => 8,\n   \
    \ 'nine' => 9\n  }\n  numbers_array = numbers.split\n  sorted_numbers = numbers_array.sort_by\
    \ { |num| numbers_hash[num] }\n  sorted_numbers.join(' ')\nend", "\tnumbers.split('\
    \ ').sort_by { |num| numeral_to_number(num) }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |word| w2n(word) }.join(' ')\nend", end, "  nums = numbers.split\n  num_hash\
    \ = {\n    'zero' => 0,\n    'one' => 1,\n    'two' => 2,\n    'three' => 3,\n\
    \    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n    'seven' => 7,\n    'eight'\
    \ => 8,\n    'nine' => 9\n  }\n  nums.sort_by! { |num| num_hash[num] }\n  nums.join('\
    \ ')\nend", "  nums = numbers.split\n  nums = nums.sort_by { |num| num_to_i(num)\
    \ }\n  p nums.join(' ')\nend", "\tnumbers.split(' ').sort_by { |word| word_to_digit(word)\
    \ }.join(' ')\nend", "  sorted_numbers = []\n  numbers_array = numbers.split('\
    \ ')\n  numbers_hash = { 'zero' => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four'\
    \ => 4, 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9 }\n \
    \ numbers_array.each do |number|\n    sorted_numbers << numbers_hash[number]\n\
    \  end\n  sorted_numbers.sort!\n  sorted_words = []\n  sorted_numbers.each do\
    \ |number|\n    sorted_words << numbers_hash.key(number)\n  end\n  sorted_words.join('\
    \ ')\nend", "  # This method takes in a string and sorts it alphabetically by\
    \ number.\n  # Our string is a space-delimited list of numberals, so how can we\
    \ sort it?\n  # We need to break our string into an array of numberals, and sort\
    \ them using our\n  # handy little `<=>` comparator!\n  #\n  # Look up the `split`\
    \ method, which allows you to break a string into an array based on a provided\
    \ delimiter.\n  # For example, a space-delimited string of numberals can be split\
    \ into an array by `split(' ')`.\n  # (This will be useful later when we want\
    \ to check for duplicate numberals.)\n  #\n  # Look up the `sort` method, which\
    \ allows you to sort an array by an attribute or method.\n  # It's likely you'll\
    \ want to use `<=>` to sort the numbers by their numerical value, which means\n\
    \  # you'll need to map the numbers into their numerical equivalent before you\
    \ call sort.\n  #\n  # After you've sorted your array of numbers, look up the\
    \ `join` method, which will allow you to\n  # rejoin your numbers into a string.\n\
    \  #\n  # Hint: Don't forget to turn your numberals back into words!\n  numbers.split('\
    \ ').sort{|x,y| NUMBERALS[x] <=> NUMBERALS[y]}.map{|numeral| NUMBERS[numeral]}.join('\
    \ ')\nend", "  numbers.split(' ').sort { |a, b| number_to_numeral(a) <=> number_to_numeral(b)\
    \ }.join(' ')\nend", "  nums = numbers.split(\" \")\n  nums.sort { |a, b| NUMBERS[a]\
    \ <=> NUMBERS[b] }.join(\" \")\nend", "  numbers_as_integers = []\n  numbers_as_integers.push\
    \ numbers.split(' ').map { |number| NUMBERS_TO_INTEGERS[number] }\n  numbers_as_integers.join('\
    \ ')\nend", "  # replace this code with your solution\n  numbers_array = numbers.split(\"\
    \ \")\n  hash = { \"zero\" => 0, \"one\" => 1, \"two\" => 2, \"three\" => 3, \"\
    four\" => 4, \"five\" => 5, \"six\" => 6, \"seven\" => 7, \"eight\" => 8, \"nine\"\
    \ => 9 }\n  sorted_array = numbers_array.sort { |a, b| hash[a] <=> hash[b] }\n\
    \  return sorted_array.join(\" \")\nend", "  num_hash = {'zero' => 0, 'one' =>\
    \ 1, 'two' => 2, 'three' => 3, 'four' => 4, 'five' => 5, 'six' => 6, 'seven' =>\
    \ 7, 'eight' => 8, 'nine' => 9}\n  num_array = numbers.split.sort_by {|n| num_hash[n]}\n\
    \  num_array.join(' ')\nend", "  sort_hash = {\n    'zero' => 0,\n    'one' =>\
    \ 1,\n    'two' => 2,\n    'three' => 3,\n    'four' => 4,\n    'five' => 5,\n\
    \    'six' => 6,\n    'seven' => 7,\n    'eight' => 8,\n    'nine' => 9\n  }\n\
    \  sorted_array = numbers.split.sort_by do |key|\n    sort_hash[key]\n  end\n\
    \  sorted_array.join(' ')\nend", "  number_words = numbers.split\n  numbers_hash\
    \ = {\n    \"zero\" => 0,\n    \"one\" => 1,\n    \"two\" => 2,\n    \"three\"\
    \ => 3,\n    \"four\" => 4,\n    \"five\" => 5,\n    \"six\" => 6,\n    \"seven\"\
    \ => 7,\n    \"eight\" => 8,\n    \"nine\" => 9\n  }\n  sorted_numbers = number_words.map\
    \ { |word| numbers_hash[word] }.sort\n  sorted_numbers.map { |number| numbers_hash.key(number)\
    \ }.join(\" \")\nend", "\tarr = numbers.split(\" \")\n\thash = {'zero' => 0, 'one'\
    \ => 1, 'two' => 2, 'three' => 3, 'four' => 4, 'five' => 5, 'six' => 6, 'seven'\
    \ => 7, 'eight' => 8, 'nine' => 9}\n\tarr.map! {|x| hash[x]}\n\tarr.sort!\n\t\
    arr.map! {|x| hash.key(x)}\n\tsorted = \"\"\n\tarr.each do |x|\n\t\tsorted <<\
    \ x + \" \"\n\tend\n\tsorted.strip\nend", "  num_array = numbers.split(\" \")\n\
    \  number_hash = {\n    'zero' => 0,\n    'one' => 1,\n    'two' => 2,\n    'three'\
    \ => 3,\n    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n    'seven' => 7,\n\
    \    'eight' => 8,\n    'nine' => 9\n  }\n  num_array.map! { |num| number_hash[num]\
    \ }\n  num_array.sort!\n  num_array.map! { |num| number_hash.key(num) }\n  num_array.join(\"\
    \ \")\nend", "  # define a hash with the numbers\n  nums = {'zero' => 0, 'one'\
    \ => 1, 'two' => 2, 'three' => 3, 'four' => 4, 'five' => 5, 'six' => 6, 'seven'\
    \ => 7, 'eight' => 8, 'nine' => 9}\n  # split the input string\n  splitted = numbers.split\n\
    \  # map the input string to their numberal equivalent\n  # sort it\n  # then,\
    \ map it to its word equivalent\n  splitted.map{|x| nums[x]}.sort.map{|i| nums.key(i)}\n\
    end", "  num_hash = {'zero' => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four'\
    \ => 4, 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9}\n  n\
    \ = numbers.split.sort {|x, y| num_hash[x] <=> num_hash[y]}\n  nums = n.join('\
    \ ')\nend", "  num_to_word = {\n    0 => 'zero',\n    1 => 'one',\n    2 => 'two',\n\
    \    3 => 'three',\n    4 => 'four',\n    5 => 'five',\n    6 => 'six',\n    7\
    \ => 'seven',\n    8 => 'eight',\n    9 => 'nine'\n  }\n  words = numbers.split('\
    \ ')\n  nums = words.map do |word|\n    num_to_word.key(word)\n  end\n  nums.sort!\n\
    \  nums.map do |num|\n    num_to_word[num]\n  end.join(' ')\nend", "  # TODO\n\
    end", "  words = numbers.split\n  sorted_numbers = words.sort_by do |word|\n \
    \   values = {\n      'zero' => 0,\n      'one' => 1,\n      'two' => 2,\n   \
    \   'three' => 3,\n      'four' => 4,\n      'five' => 5,\n      'six' => 6,\n\
    \      'seven' => 7,\n      'eight' => 8,\n      'nine' => 9\n    }\n    values[word]\n\
    \  end\n  sorted_numbers.join(' ')\nend", "  nums = {\"zero\" => 0, \"one\" =>\
    \ 1, \"two\" => 2, \"three\" => 3, \"four\" => 4, \"five\" => 5, \"six\" => 6,\
    \ \"seven\" => 7, \"eight\" => 8, \"nine\" => 9}\n  numbers = numbers.split(\"\
    \ \")\n  numbers.sort_by! {|num| nums[num]}\n  p numbers.join(\" \")\nend", " \
    \ array = numbers.split\n  array = array.sort_by { |value| value.to_i }\n  array.join('\
    \ ')\nend", "\nend", "  words = numbers.split(' ')\n  digits = []\n  words.each\
    \ do |word|\n    digits << word_to_digit(word)\n  end\n  digits.sort!\n  sorted_words\
    \ = []\n  digits.each do |digit|\n    sorted_words << digit_to_word(digit)\n \
    \ end\n  sorted_words.join(' ')\nend", "\nend", "  words = numbers.split(' ')\n\
    \  sorted_words = words.sort do |a, b|\n    a_index = NUMERALS.index(a)\n    b_index\
    \ = NUMERALS.index(b)\n    a_index <=> b_index\n  end\n  sorted_words.join(' ')\n\
    end", "  numbers_to_numbers = { 'zero' => 0, 'one' => 1, 'two' => 2, 'three' =>\
    \ 3, 'four' => 4, 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine'\
    \ => 9 }\n  numbers_array = numbers.split\n  numbers_array_to_numbers = numbers_array.map\
    \ do |number|\n    numbers_to_numbers[number]\n  end\n  numbers_array_to_numbers.sort!\n\
    \  numbers_array_to_numbers_to_numbers = numbers_array_to_numbers.map do |number|\n\
    \    numbers_to_numbers.key(number)\n  end\n  numbers_array_to_numbers_to_numbers.join('\
    \ ')\nend", "  num_string = numbers.split\n  x = 0\n  y = 0\n  new_array = []\n\
    \  while x < num_string.length\n    num_string.each do |number|\n      if num_string[x]\
    \ < number\n        y += 1\n      else\n        y = 0\n      end\n    end\n  \
    \  new_array[y] = num_string[x]\n    x += 1\n    y = 0\n  end\n  new_array.join(\"\
    \ \")\nend", "  numbers.split.sort_by { |num| number_to_i(num) }.join(' ')\nend",
  "  # TODO: sort the numbers in ascending order\n  num = numbers.split(' ')\n  h\
    \ = {'zero' => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four' => 4, 'five' =>\
    \ 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9}\n  num = num.map { |number|\
    \ h[number] }\n  num.sort!\n  num = num.map { |number| h.key(number) }\n  num.join('\
    \ ')\nend", "  number_hash = {\n    'zero' => 0,\n    'one' => 1,\n    'two' =>\
    \ 2,\n    'three' => 3,\n    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n\
    \    'seven' => 7,\n    'eight' => 8,\n    'nine' => 9\n  }\n  numbers_array =\
    \ numbers.split(' ')\n  numbers_array.map! do |number|\n    number_hash[number]\n\
    \  end\n  sorted_numbers = numbers_array.sort!\n  final_array = []\n  sorted_numbers.each\
    \ do |number|\n    final_array << number_hash.key(number)\n  end\n  final_array.join('\
    \ ')\nend", "  hash = { 'zero' => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four'\
    \ => 4, 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9 }\n \
    \ nums = numbers.split(' ')\n  sorted = nums.sort { |a, b| hash[a] <=> hash[b]\
    \ }\n  sorted.join(' ')\nend", "  words = numbers.split(' ')\n  numbers = []\n\
    \  words.each do |word|\n    numbers << NUMERALS[word]\n  end\n  sort(numbers)\n\
    end", "  sorted_numbers = numbers.split(' ').sort_by do |numeral|\n    case numeral\n\
    \    when 'zero'\n      0\n    when 'one'\n      1\n    when 'two'\n      2\n\
    \    when 'three'\n      3\n    when 'four'\n      4\n    when 'five'\n      5\n\
    \    when 'six'\n      6\n    when 'seven'\n      7\n    when 'eight'\n      8\n\
    \    when 'nine'\n      9\n    end\n  end\n  sorted_numbers.join(' ')\nend", " \
    \ numbers.split.sort{|x,y| x <=> y}.join(' ')\nend", "  number_hash = {\"zero\"\
    \ => 0, \"one\" => 1, \"two\" => 2, \"three\" => 3, \"four\" => 4, \"five\" =>\
    \ 5, \"six\" => 6, \"seven\" => 7, \"eight\" => 8, \"nine\" => 9}\n  sorted_numbers\
    \ = numbers.split.sort do |a, b|\n    number_hash[a] <=> number_hash[b]\n  end\n\
    \  sorted_numbers.join(\" \")\nend", "  # convert string to array\n  # map elements\
    \ to int\n  # sort\n  # join array with spaces", "  numbers.split.sort_by { |n|\
    \ NUMBERS[n] }.join(' ')\nend", "  number_map = { \"zero\" => 0, \"one\" => 1,\
    \ \"two\" => 2, \"three\" => 3, \"four\" => 4, \"five\" => 5, \"six\" => 6, \"\
    seven\" => 7, \"eight\" => 8, \"nine\" => 9 }\n  numbers.split(\" \").sort_by\
    \ { |num| number_map[num] }.join(\" \")\nend", "  number_string = \"zero one two\
    \ three four five six seven eight nine\"\n  numbers_in_order = number_string.split(\"\
    \ \")\n  unsorted_numbers = numbers.split(\" \")\n  unsorted_numbers.sort! { |x,\
    \ y| numbers_in_order.index(x) <=> numbers_in_order.index(y) }\n  unsorted_numbers.join(\"\
    \ \")\nend", "\tnums = numbers.split(\" \")\n\tnums = nums.sort_by {|word| dictionary.index(word)}\n\
    \tstring = \"\"\n\tnums.each do |num|\n\t\tstring << num + \" \"\n\tend\n\treturn\
    \ string.strip\nend", "  numbers_hash = {\n    'zero' => 0,\n    'one' => 1,\n\
    \    'two' => 2,\n    'three' => 3,\n    'four' => 4,\n    'five' => 5,\n    'six'\
    \ => 6,\n    'seven' => 7,\n    'eight' => 8,\n    'nine' => 9\n  }\n  array =\
    \ numbers.split(' ')\n  sorted_array = array.sort_by do |num|\n    numbers_hash[num]\n\
    \  end\n  return sorted_array.join(' ')\nend", "\t#Create a hash that converts\
    \ the strings to integers\n\tnumbers_hash = {'zero' => 0, 'one' => 1, 'two' =>\
    \ 2, 'three' => 3, 'four' => 4, 'five' => 5, 'six' => 6, 'seven' => 7, 'eight'\
    \ => 8, 'nine' => 9}\n\t#Split the numbers into an array\n\tnumbers_array = numbers.split(\"\
    \ \")\n\t#Create a new array to hold the sorted number strings\n\tsorted_array\
    \ = []\n\t#Create an empty array to hold the sorted number strings\n\tsorted_strings\
    \ = []\n\t#Loop through the numbers_array and store each integer in the sorted_array\n\
    \tnumbers_array.each do |x|\n\t\tsorted_array << numbers_hash[x]\n\tend\n\t#Sort\
    \ the sorted_array in ascending order\n\tsorted_array.sort!\n\t#Loop through the\
    \ sorted_array and store each sorted number string in the sorted_strings array\n\
    \tsorted_array.each do |x|\n\t\tsorted_strings << numbers_hash.key(x)\n\tend\n\
    \t#Convert the sorted_strings array into a string and replace the space-delimiters\
    \ with ' '\n\tsorted_strings.join(\" \")\nend", "  numbers.split.sort { |x, y|\
    \ numeral_to_number(x) <=> numeral_to_number(y) }.join(' ')\nend", "  nums = numbers.split(\"\
    \ \")\n  nums.map! { |num| num_to_i(num) }\n  sort_and_join(nums)\nend", "   \
    \ number = numbers.split(' ')\n    number = number.sort_by {|x| numbers_to_numbers(x)}\n\
    \    number.join(' ')\nend", "  sorted_numbers = []\n  number_hash = {'zero' =>\
    \ 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four' => 4, 'five' => 5, 'six' =>\
    \ 6, 'seven' => 7, 'eight' => 8, 'nine' => 9}\n  numbers_array = numbers.split('\
    \ ')\n  numbers_array.each do |num|\n    sorted_numbers << number_hash[num]\n\
    \  end\n  sorted_numbers.sort!\n  sorted_numbers.map! do |sorted_num|\n    number_hash.key(sorted_num)\n\
    \  end\n  sorted_numbers.join(' ')\nend", "  numbers_array = numbers.split(\"\
    \ \")\n  numbers_array.map! do |number|\n    case number\n    when \"zero\"\n\
    \      number = 0\n    when \"one\"\n      number = 1\n    when \"two\"\n    \
    \  number = 2\n    when \"three\"\n      number = 3\n    when \"four\"\n     \
    \ number = 4\n    when \"five\"\n      number = 5\n    when \"six\"\n      number\
    \ = 6\n    when \"seven\"\n      number = 7\n    when \"eight\"\n      number\
    \ = 8\n    when \"nine\"\n      number = 9\n    end\n  end\n  numbers_array.sort!\n\
    \  numbers_array.map! do |number|\n    case number\n    when 0\n      number =\
    \ \"zero\"\n    when 1\n      number = \"one\"\n    when 2\n      number = \"\
    two\"\n    when 3\n      number = \"three\"\n    when 4\n      number = \"four\"\
    \n    when 5\n      number = \"five\"\n    when 6\n      number = \"six\"\n  \
    \  when 7\n      number = \"seven\"\n    when 8\n      number = \"eight\"\n  \
    \  when 9\n      number = \"nine\"\n    end\n  end\n  return numbers_array.join(\"\
    \ \")\nend", "\tnumber_hash = {\"zero\" => 0, \"one\" => 1, \"two\" => 2, \"three\"\
    \ => 3, \"four\" => 4, \"five\" => 5, \"six\" => 6, \"seven\" => 7, \"eight\"\
    \ => 8, \"nine\" => 9}\n\tsorted_numbers = numbers.split(\" \").sort_by{|num|\
    \ number_hash[num]}\n\tsorted_numbers.join(\" \")\nend", "  sorted_numbers = []\n\
    \  numbers.split.each do |number|\n    case number\n    when 'zero'\n      sorted_numbers\
    \ << 0\n    when 'one'\n      sorted_numbers << 1\n    when 'two'\n      sorted_numbers\
    \ << 2\n    when 'three'\n      sorted_numbers << 3\n    when 'four'\n      sorted_numbers\
    \ << 4\n    when 'five'\n      sorted_numbers << 5\n    when 'six'\n      sorted_numbers\
    \ << 6\n    when 'seven'\n      sorted_numbers << 7\n    when 'eight'\n      sorted_numbers\
    \ << 8\n    when 'nine'\n      sorted_numbers << 9\n    end\n  end\n  sorted_numbers.sort!\n\
    \  converted_numbers = []\n  sorted_numbers.each do |number|\n    case number\n\
    \    when 0\n      converted_numbers << 'zero'\n    when 1\n      converted_numbers\
    \ << 'one'\n    when 2\n      converted_numbers << 'two'\n    when 3\n      converted_numbers\
    \ << 'three'\n    when 4\n      converted_numbers << 'four'\n    when 5\n    \
    \  converted_numbers << 'five'\n    when 6\n      converted_numbers << 'six'\n\
    \    when 7\n      converted_numbers << 'seven'\n    when 8\n      converted_numbers\
    \ << 'eight'\n    when 9\n      converted_numbers << 'nine'\n    end\n  end\n\
    \  converted_numbers.join(' ')\nend", "    # hash map of numbers\n    num_hash\
    \ = {\"zero\" => 0, \"one\" => 1, \"two\" => 2, \"three\" => 3, \"four\" => 4,\
    \ \"five\" => 5, \"six\" => 6, \"seven\" => 7, \"eight\" => 8, \"nine\" => 9}\n\
    \    # split numbers by space\n    num_arr = numbers.split(\" \")\n    # initialize\
    \ solution array\n    solution = []\n    # iterate through num_arr\n    num_arr.each\
    \ do |num|\n        # add to solution array\n        solution << num_hash[num]\n\
    \    end\n    # sort the array\n    solution.sort!\n    # initialize solution\
    \ string\n    solution_str = \"\"\n    # iterate through solution\n    solution.each\
    \ do |num|\n        # add to solution string\n        solution_str += num.to_s\
    \ + \" \"\n    end\n    # return solution string\n    return solution_str\nend",
  "  # Your code here\nend", "  numberals = %w[zero one two three four five six seven\
    \ eight nine]\n  number_strings = numbers.split\n  number_strings.sort_by! { |num|\
    \ numberals.index(num) }\n  number_strings.join(' ')\nend", "  words = numbers.split(\"\
    \ \")\n  array = []\n  words.each do |n|\n    case n\n    when \"zero\"\n    \
    \  array << 0\n    when \"one\"\n      array << 1\n    when \"two\"\n      array\
    \ << 2\n    when \"three\"\n      array << 3\n    when \"four\"\n      array <<\
    \ 4\n    when \"five\"\n      array << 5\n    when \"six\"\n      array << 6\n\
    \    when \"seven\"\n      array << 7\n    when \"eight\"\n      array << 8\n\
    \    when \"nine\"\n      array << 9\n    end\n  end\n  array.sort!\n  answer\
    \ = \"\"\n  array.each do |n|\n    case n\n    when 0\n      answer += \"zero\
    \ \"\n    when 1\n      answer += \"one \"\n    when 2\n      answer += \"two\
    \ \"\n    when 3\n      answer += \"three \"\n    when 4\n      answer += \"four\
    \ \"\n    when 5\n      answer += \"five \"\n    when 6\n      answer += \"six\
    \ \"\n    when 7\n      answer += \"seven \"\n    when 8\n      answer += \"eight\
    \ \"\n    when 9\n      answer += \"nine \"\n    end\n  end\n  answer.strip\n\
    end", "  numbers.split.sort_by{|a| a.to_i}.join(' ')\nend", "  numbers.split.sort_by\
    \ { |num| num.to_i }.join(' ')\nend", "  numbers_array = numbers.split(' ')\n\
    \  sorted_numbers = numbers_array.sort { |num1, num2| num_to_i(num1) <=> num_to_i(num2)\
    \ }\n  sorted_numbers.join(' ')\nend", "  number_conversions = {\n    'zero' =>\
    \ 0,\n    'one' => 1,\n    'two' => 2,\n    'three' => 3,\n    'four' => 4,\n\
    \    'five' => 5,\n    'six' => 6,\n    'seven' => 7,\n    'eight' => 8,\n   \
    \ 'nine' => 9\n  }\n  string_numbers = numbers.split(' ')\n  number_array = []\n\
    \  string_numbers.each do |string_number|\n    number_array << number_conversions[string_number]\n\
    \  end\n  sorted_number_array = number_array.sort\n  final_string = []\n  sorted_number_array.each\
    \ do |number|\n    final_string << number_conversions.key(number)\n  end\n  final_string.join('\
    \ ')\nend", end, "  # Replace this return value with the correct one.\n  number_hash\
    \ = { 'zero' => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four' => 4, 'five' =>\
    \ 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9 }\n  numbers_array =\
    \ numbers.split\n  new_numbers_array = []\n  numbers_array.each do |number|\n\
    \    new_numbers_array << number_hash[number]\n  end\n  new_numbers_array.sort!\n\
    \  sorted_numbers = []\n  new_numbers_array.each do |number|\n    sorted_numbers\
    \ << number_hash.key(number)\n  end\n  return sorted_numbers.join(' ')\nend",
  "  numbers.split.sort_by{|n| numbers_index[n]}.join(' ')\nend", "\ta= numbers.split(\"\
    \ \")\n\tb=a.map {|x| x.to_i }\n\tc=b.sort\n\td=c.map {|x| x.to_s }\n\te=d.join(\"\
    \ \")\n\te\nend", "  # TODO: implement this method\n  num_hash = { 'zero' => 0,\
    \ 'one' => 1, 'two' => 2, 'three' => 3, 'four' => 4, 'five' => 5, 'six' => 6,\
    \ 'seven' => 7, 'eight' => 8, 'nine' => 9 }\n  num_array = numbers.split.map do\
    \ |numeral|\n    num_hash[numeral]\n  end\n  sorted_array = num_array.sort.map\
    \ do |number|\n    num_hash.key(number)\n  end\n  return sorted_array.join(' ')\n\
    end", "  lookup = {\n    'zero' => 0,\n    'one' => 1,\n    'two' => 2,\n    'three'\
    \ => 3,\n    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n    'seven' => 7,\n\
    \    'eight' => 8,\n    'nine' => 9\n  }\n  number_array = numbers.split(\" \"\
    )\n  number_array.map! { |number| lookup[number] }\n  number_array.sort!\n  sorted_array\
    \ = number_array.map do |number|\n    lookup.key(number)\n  end\n  sorted_array.join(\"\
    \ \")\nend", "  hash = {\"zero\" => 0, \"one\" => 1, \"two\" => 2, \"three\" =>\
    \ 3, \"four\" => 4, \"five\" => 5, \"six\" => 6, \"seven\" => 7, \"eight\" =>\
    \ 8, \"nine\" => 9}\n  new_array = numbers.split.map {|element| hash[element]}\n\
    \  new_array.sort.map{|element| hash.key(element)}.join(\" \")\nend", "\tnumbers.split.sort_by\
    \ { |word| word.to_i }.join(' ')\nend", "  nums = { 'zero' => 0, 'one' => 1, 'two'\
    \ => 2, 'three' => 3, 'four' => 4, 'five' => 5, 'six' => 6, 'seven' => 7, 'eight'\
    \ => 8, 'nine' => 9 }\n  sorted = numbers.split(' ').sort_by { |num| nums[num]\
    \ }\n  sorted.join(' ')\nend", "  numbers.split(' ').sort { |x, y| numbers_to_ints[x]\
    \ <=> numbers_to_ints[y] }.join(' ')\nend", "  nums = {\n    'zero'  => 0,\n \
    \   'one'   => 1,\n    'two'   => 2,\n    'three' => 3,\n    'four'  => 4,\n \
    \   'five'  => 5,\n    'six'   => 6,\n    'seven' => 7,\n    'eight' => 8,\n \
    \   'nine'  => 9\n  }\n  numbers.split.sort_by { |num| nums[num] }.join(' ')\n\
    end", "  numbers.split.sort { |a, b| NUMBER_ALIASES[a] <=> NUMBER_ALIASES[b] }.join('\
    \ ')\nend", "  numbers_sorted = []\n  numbers_sorted = numbers.split.sort{|x,y|\
    \ NUMBERS[x] <=> NUMBERS[y]}\n  numbers_sorted.join(' ')\nend", "  number_values\
    \ = {\"zero\" => 0, \"one\" => 1, \"two\" => 2, \"three\" => 3, \"four\" => 4,\
    \ \"five\" => 5, \"six\" => 6, \"seven\" => 7, \"eight\" => 8, \"nine\" => 9}\n\
    \  sorted_numbers = numbers.split(\" \").sort {|a, b| number_values[a] <=> number_values[b]}\n\
    \  sorted_numbers.join(\" \")\nend", "  numbers.split(' ').sort_by { |word| DIGITS.index(word)\
    \ }.join(' ')\nend", "  map = {\n    'zero' => 0,\n    'one' => 1,\n    'two'\
    \ => 2,\n    'three' => 3,\n    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n\
    \    'seven' => 7,\n    'eight' => 8,\n    'nine' => 9\n  }\n  numbers.split.sort\
    \ { |a, b| map[a] <=> map[b] }.join(\" \")\nend", "  number_array = numbers.split('\
    \ ')\n  number_array.sort! { |a, b| a.to_i <=> b.to_i }\n  number_array.join('\
    \ ')\nend", "  number_str = numbers.split.map { |number| NUMBERS[number] }.sort.join('\
    \ ')\nend", "  map = {\n    'zero' => 0,\n    'one' => 1,\n    'two' => 2,\n \
    \   'three' => 3,\n    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n    'seven'\
    \ => 7,\n    'eight' => 8,\n    'nine' => 9\n  }\n  # numbers.split(\" \").sort_by\
    \ { |num| map[num] }.join(\" \")\n  numbers.split(\" \").sort { |a, b| map[a]\
    \ <=> map[b] }.join(\" \")\nend", "  numbers_array = numbers.split(' ')\n  numbers_array.sort!\
    \ do |a, b|\n    numbers_hash[a] <=> numbers_hash[b]\n  end\n  numbers_array.join('\
    \ ')\nend", "  number_arr = numbers.split(' ')\n  new_number_arr = []\n  new_number_arr\
    \ << number_arr.sort_by { |number| number_to_int(number) }\n  new_number_arr.join('\
    \ ')\nend", "  words = numbers.split(' ')\n  numbers = words.map { |word| number_to_int(word)\
    \ }\n  numbers.sort.map { |int| int_to_number(int) }.join(' ')\nend", "\nend",
  "  numbers.split.sort_by{|i| i.to_i}.join(' ')\nend", end, "  # Your code here\n\
    end", "  numbers.split(' ').sort_by { |num| num.to_i }.join(' ')\nend", "  number_hash\
    \ = { \"zero\" => 0, \"one\" => 1, \"two\" => 2, \"three\" => 3, \"four\" => 4,\
    \ \"five\" => 5, \"six\" => 6, \"seven\" => 7, \"eight\" => 8, \"nine\" => 9 }\n\
    \  sorted_numbers = numbers.split(\" \").sort { |x, y| number_hash[x] <=> number_hash[y]\
    \ }\n  return sorted_numbers.join(\" \")\nend", "\twords = numbers.split(' ')\n\
    \tnumbers = []\n\twords.each do |word|\n\t\tnumbers << get_number(word)\n\tend\n\
    \tnumbers.sort!\n\twords = []\n\tnumbers.each do |number|\n\t\twords << get_word(number)\n\
    \tend\n\twords.join(' ')\nend", "  return numbers.split(' ').sort_by { |num| nums_hash[num]\
    \ }.join(' ')\nend", "  numbers.split(' ').sort_by { |word| word_to_int(word)\
    \ }.join(' ')\nend", "  results = []\n  numbers.split.each do |number|\n    results\
    \ << number_to_numeral(number)\n  end\n  results.sort.each do |numeral|\n    numeral\
    \ = numeral_to_number(numeral)\n  end\n  results.join(' ')\nend", "\nend", " \
    \ nums = numbers.split(' ')\n  nums.map { |num| num_to_int(num) }.sort.map { |num|\
    \ int_to_num(num) }.join(' ')\nend", "    numbers = numbers.split\n    hash =\
    \ {'zero' => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four' => 4, 'five' => 5,\
    \ 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9}\n    numbers.map! {|number|\
    \ hash[number]}\n    numbers.sort!\n    numbers.map! {|number| hash.key(number)}\n\
    \    return numbers.join(' ')\nend", "  return numbers.split(' ').sort{|x,y| numberals.index(x)\
    \ <=> numberals.index(y)}.join(' ')\nend", "    sorted_numbers = numbers.split('\
    \ ').sort { |a, b| find_number(a) <=> find_number(b) }\n    sorted_numbers.join('\
    \ ')\nend", "  number_words = numbers.split\n  number_nums = []\n  number_words.each\
    \ do |word|\n    number_nums << word_to_num(word)\n  end\n  number_nums.sort!\n\
    \  final_numbers = []\n  number_nums.each do |num|\n    final_numbers << num_to_word(num)\n\
    \  end\n  final_numbers.join(' ')\nend", "  numbers_array = numbers.split\n  numbers_array.sort_by!\
    \ do |number|\n    num_string_to_num_int(number)\n  end\n  numbers_array.join('\
    \ ')\nend", "  sorted_numbers = ''\n  numbers = numbers.gsub('zero', '0').gsub('one',\
    \ '1').gsub('two', '2').gsub('three', '3').gsub('four', '4').gsub('five', '5').gsub('six',\
    \ '6').gsub('seven', '7').gsub('eight', '8').gsub('nine', '9')\n  numbers = numbers.split(\"\
    \ \").sort do |x, y|\n    x.to_i <=> y.to_i\n  end\n  numbers.each do |num|\n\
    \    num = num.gsub('0', 'zero').gsub('1', 'one').gsub('2', 'two').gsub('3', 'three').gsub('4',\
    \ 'four').gsub('5', 'five').gsub('6', 'six').gsub('7', 'seven').gsub('8', 'eight').gsub('9',\
    \ 'nine')\n    sorted_numbers += num + \" \"\n  end\n  sorted_numbers.strip\n\
    end", "\tnumbers.split(\" \").sort {|a,b| number_value(a) <=> number_value(b)}.join(\"\
    \ \")\nend", "  nums = numbers.split(' ')\n  words = %w[zero one two three four\
    \ five six seven eight nine]\n  results = []\n  nums.each do |num|\n    results\
    \ << words.index(num)\n  end\n  puts results.sort\nend\nsort_numbers('three one\
    \ five')", "\tsorted_numbers = numbers.split(\" \").sort_by { |word| word_to_digit(word)\
    \ }\n\tsorted_numbers.join(\" \")\nend", "  numbers.split.sort_by{|num| num.to_i}.join('\
    \ ')\nend", "  # your code here\nend", "  numbers_in_english = numbers.split.map\
    \ { |w| NUMERALS[w] }\n  numbers_in_english.sort.map { |n| NUMERALS.key(n) }.join('\
    \ ')\nend", "  number_words = numbers.split(' ')\n  number_words.sort_by! do |word|\n\
    \    word_to_num(word)\n  end\n  number_words.join(' ')\nend", "  number_hash\
    \ = {\n    'zero' => 0,\n    'one' => 1,\n    'two' => 2,\n    'three' => 3,\n\
    \    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n    'seven' => 7,\n    'eight'\
    \ => 8,\n    'nine' => 9\n  }\n  p numbers.split.sort { |a, b| number_hash[a]\
    \ <=> number_hash[b] }.join(' ')\nend", "  return numbers.split.sort_by { |x|\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"].index(x) }.join(\" \")\nend", "  numbers.split(' ').sort_by\
    \ { |word| WORD_TO_NUM[word] }.join(' ')\nend", "  ordered_numbers = []\n  number_to_numeral\
    \ = { 'zero' => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four' => 4, 'five' =>\
    \ 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9 }\n  numbers.split('\
    \ ').each do |number|\n    ordered_numbers << number_to_numeral[number]\n  end\n\
    \  ordered_numbers.sort!\n  ordered_numbers.map! do |number|\n    number_to_numeral.key(number)\n\
    \  end\n  ordered_numbers.join(' ')\nend", "  numbers_array = numbers.split(\"\
    \ \")\n  sorted_numbers = numbers_array.sort do |a, b|\n    convert_to_number(a)\
    \ <=> convert_to_number(b)\n  end\n  sorted_numbers.join(\" \")\nend", "\nend",
  "\t# WRITE YOUR CODE HERE!\nend", "  num_map = {\n    \"zero\" => 0,\n    \"one\"\
    \ => 1,\n    \"two\" => 2,\n    \"three\" => 3,\n    \"four\" => 4,\n    \"five\"\
    \ => 5,\n    \"six\" => 6,\n    \"seven\" => 7,\n    \"eight\" => 8,\n    \"nine\"\
    \ => 9\n  }\n  num_array = numbers.split(\" \")\n  num_array.sort { |a, b| num_map[a]\
    \ <=> num_map[b] }.join(\" \")\nend", "  num_string = numbers.split(\" \")\n \
    \ num_string.map! do |element|\n    case element\n    when \"zero\"\n      element\
    \ = 0\n    when \"one\"\n      element = 1\n    when \"two\"\n      element =\
    \ 2\n    when \"three\"\n      element = 3\n    when \"four\"\n      element =\
    \ 4\n    when \"five\"\n      element = 5\n    when \"six\"\n      element = 6\n\
    \    when \"seven\"\n      element = 7\n    when \"eight\"\n      element = 8\n\
    \    when \"nine\"\n      element = 9\n    end\n  end\n  num_string.sort!\n  num_string.map!\
    \ do |element|\n    case element\n    when 0\n      element = \"zero\"\n    when\
    \ 1\n      element = \"one\"\n    when 2\n      element = \"two\"\n    when 3\n\
    \      element = \"three\"\n    when 4\n      element = \"four\"\n    when 5\n\
    \      element = \"five\"\n    when 6\n      element = \"six\"\n    when 7\n \
    \     element = \"seven\"\n    when 8\n      element = \"eight\"\n    when 9\n\
    \      element = \"nine\"\n    end\n  end\n  num_string.join(\" \")\nend", " \
    \   convert_numbers = numbers.split(\" \").map do |number|\n        case number\n\
    \        when \"zero\"\n            0\n        when \"one\"\n            1\n \
    \       when \"two\"\n            2\n        when \"three\"\n            3\n \
    \       when \"four\"\n            4\n        when \"five\"\n            5\n \
    \       when \"six\"\n            6\n        when \"seven\"\n            7\n \
    \       when \"eight\"\n            8\n        when \"nine\"\n            9\n\
    \        end\n    end\n    convert_numbers.sort!\n    convert_numbers.map do |number|\n\
    \        case number\n        when 0\n            \"zero\"\n        when 1\n \
    \           \"one\"\n        when 2\n            \"two\"\n        when 3\n   \
    \         \"three\"\n        when 4\n            \"four\"\n        when 5\n  \
    \          \"five\"\n        when 6\n            \"six\"\n        when 7\n   \
    \         \"seven\"\n        when 8\n            \"eight\"\n        when 9\n \
    \           \"nine\"\n        end\n    end.join(\" \")\nend", "  # valid_numbers\
    \ = {'zero' => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four' => 4, 'five' =>\
    \ 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9}\n  # numbers.split('\
    \ ').sort_by { |word| valid_numbers[word] }.join(' ')\n  # numbers.split(' ').sort_by\
    \ { |word| word.reverse.to_i }.join(' ')\n  numbers.split(' ').sort_by { |word|\
    \ word.reverse.to_i }.join(' ')\nend", "\tsorted_numbers = []\n\tnumbers.split('\
    \ ').each do |num|\n\t\tsorted_numbers << num\n\tend\n\tsorted_numbers.sort! do\
    \ |a, b|\n\t\tNUMBERS[a] <=> NUMBERS[b]\n\tend\n\tsorted_numbers.join(' ')\nend",
  end, "  num_hash = {\n    'zero' => 0,\n    'one' => 1,\n    'two' => 2,\n    'three'\
    \ => 3,\n    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n    'seven' => 7,\n\
    \    'eight' => 8,\n    'nine' => 9\n  }\n  words = numbers.split(' ')\n  nums\
    \ = words.map { |word| num_hash[word] }\n  nums.sort!\n  words = nums.map { |num|\
    \ num_hash.key(num) }\n  words.join(' ')\nend", "  number_array = []\n  number_hash\
    \ = {\"zero\" => 0, \"one\" => 1, \"two\" => 2, \"three\" => 3, \"four\" => 4,\
    \ \"five\" => 5, \"six\" => 6, \"seven\" => 7, \"eight\" => 8, \"nine\" => 9}\n\
    \  number_array = numbers.split(\" \")\n  number_array.map! {|x| number_hash[x]}\n\
    \  number_array.sort!\n  number_array.map! {|x| number_hash.key(x)}\n  return\
    \ number_array.join(\" \")\nend", "  digits = numbers.split.sort_by { |word| word_to_number(word)\
    \ }\n  digits.join(' ')\nend", "  dict = {'zero' => 0, 'one' => 1, 'two' => 2,\
    \ 'three' => 3, 'four' => 4, 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' =>\
    \ 8, 'nine' => 9}\n  new_numbers = numbers.split(' ').map do |num|\n    dict[num]\n\
    \  end\n  new_numbers.sort!\n  new_numbers.map do |num|\n    dict.key(num)\n \
    \ end.join(' ')\nend", "  num_str = \"zero one two three four five six seven eight\
    \ nine\"\n  num_array = num_str.split(' ')\n  numbers = numbers.split(' ')\n \
    \ index_array = []\n  sorted_array = []\n  for i in numbers\n    index_array <<\
    \ num_array.index(i)\n  end\n  index_array.sort!\n  for i in index_array\n   \
    \ sorted_array << num_array[i]\n  end\n  sorted_array.join(' ')\nend", "  res\
    \ = numbers.split.sort { |a, b| words_to_number(a) <=> words_to_number(b) }\n\
    \  res.join(' ')\nend", "  numbers_hash = {\n    'zero' => 0,\n    'one' => 1,\n\
    \    'two' => 2,\n    'three' => 3,\n    'four' => 4,\n    'five' => 5,\n    'six'\
    \ => 6,\n    'seven' => 7,\n    'eight' => 8,\n    'nine' => 9\n  }\n  numbers\
    \ = numbers.split(' ')\n  numbers.map! do |number|\n    numbers_hash[number]\n\
    \  end\n  numbers.sort!\n  numbers.map! do |number|\n    numbers_hash.key(number)\n\
    \  end\n  numbers.join(' ')\nend", "  list = numbers.split(\" \")\n  numbers =\
    \ []\n  list.each do |n|\n    if n == \"zero\"\n      numbers << 0\n    elsif\
    \ n == \"one\"\n      numbers << 1\n    elsif n == \"two\"\n      numbers << 2\n\
    \    elsif n == \"three\"\n      numbers << 3\n    elsif n == \"four\"\n     \
    \ numbers << 4\n    elsif n == \"five\"\n      numbers << 5\n    elsif n == \"\
    six\"\n      numbers << 6\n    elsif n == \"seven\"\n      numbers << 7\n    elsif\
    \ n == \"eight\"\n      numbers << 8\n    elsif n == \"nine\"\n      numbers <<\
    \ 9\n    end\n  end\n  sorted = numbers.sort\n  sorted.each do |n|\n    if n ==\
    \ 0\n      n = \"zero\"\n    elsif n == 1\n      n = \"one\"\n    elsif n == 2\n\
    \      n = \"two\"\n    elsif n == 3\n      n = \"three\"\n    elsif n == 4\n\
    \      n = \"four\"\n    elsif n == 5\n      n = \"five\"\n    elsif n == 6\n\
    \      n = \"six\"\n    elsif n == 7\n      n = \"seven\"\n    elsif n == 8\n\
    \      n = \"eight\"\n    elsif n == 9\n      n = \"nine\"\n    end\n  end\n \
    \ sorted.join(\" \")\nend", "  results = []\n  numbers.split.sort_by { |value|\
    \ numeric_string_to_number(value) }.join(' ')\nend", "\tnumbers.split(\" \").sort\
    \ do |a, b|\n\t\tnumber(a) <=> number(b)\n\tend.join(\" \")\nend", "\t# Sort strings\
    \ with numbers as an array\n\tnumber_map = {\n\t\t\"zero\" => 0,\n\t\t\"one\"\
    \ => 1,\n\t\t\"two\" => 2,\n\t\t\"three\" => 3,\n\t\t\"four\" => 4,\n\t\t\"five\"\
    \ => 5,\n\t\t\"six\" => 6,\n\t\t\"seven\" => 7,\n\t\t\"eight\" => 8,\n\t\t\"nine\"\
    \ => 9\n\t}\n\t# Split the string based on spaces\n\tnumbers = numbers.split(\"\
    \ \")\n\t# Map the string using the hash table to get the value associated to\
    \ the string\n\tnumbers = numbers.map{|number| number_map[number]}\n\t# Sort the\
    \ numbers based on their numbers\n\tnumbers = numbers.sort\n\t# Map back the string\
    \ using the hash table\n\tnumbers = numbers.map{|number| number_map.key(number)}\n\
    \treturn numbers.join(\" \")\nend", "  # hint: use .split .sort .join\nend", " \
    \ numbers_map = {\"zero\" => 0, \"one\" => 1, \"two\" => 2, \"three\" => 3, \"\
    four\" => 4, \"five\" => 5, \"six\" => 6, \"seven\" => 7, \"eight\" => 8, \"nine\"\
    \ => 9}\n  numbers.split(\" \").sort_by { |number| numbers_map[number] }.join(\"\
    \ \")\nend", "\tnumber_to_i = {\"zero\" => 0, \"one\" => 1, \"two\" => 2, \"three\"\
    \ => 3, \"four\" => 4, \"five\" => 5, \"six\" => 6, \"seven\" => 7, \"eight\"\
    \ => 8, \"nine\" => 9}\n\tnumbers = numbers.split(' ')\n\tnumbers.sort! {|x,y|\
    \ number_to_i[x] <=> number_to_i[y]}\n\tnumbers.join(' ')\nend", "  num_words\
    \ = numbers.split\n  num_words.sort_by! { |word| NUM_WORDS.index(word) }\n  num_words.join('\
    \ ')\nend", "  numbers.split(' ').sort_by { |num| num_to_i(num) }.join(' ')\n\
    end", "  sorted_numbers = numbers.gsub(\"zero\", \"0\").gsub(\"one\", \"1\").gsub(\"\
    two\", \"2\").gsub(\"three\", \"3\").gsub(\"four\", \"4\").gsub(\"five\", \"5\"\
    ).gsub(\"six\", \"6\").gsub(\"seven\", \"7\").gsub(\"eight\", \"8\").gsub(\"nine\"\
    , \"9\").split(\" \").sort\n  sorted_numbers.map! { |number| number.gsub(\"0\"\
    , \"zero\").gsub(\"1\", \"one\").gsub(\"2\", \"two\").gsub(\"3\", \"three\").gsub(\"\
    4\", \"four\").gsub(\"5\", \"five\").gsub(\"6\", \"six\").gsub(\"7\", \"seven\"\
    ).gsub(\"8\", \"eight\").gsub(\"9\", \"nine\") }\n  sorted_numbers.join(\" \"\
    )\nend", end, "\t\"one three five\"\nend", "  number_values = {'zero' => 0, 'one'\
    \ => 1, 'two' => 2, 'three' => 3, 'four' => 4, 'five' => 5, 'six' => 6, 'seven'\
    \ => 7, 'eight' => 8, 'nine' => 9}\n  numbers.split(' ').sort_by{|num| number_values[num]}.join('\
    \ ')\nend", "  words = {\n    'zero' => 0,\n    'one' => 1,\n    'two' => 2,\n\
    \    'three' => 3,\n    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n    'seven'\
    \ => 7,\n    'eight' => 8,\n    'nine' => 9\n  }\n  nums = numbers.split(\" \"\
    ).map { |num| words[num] }\n  nums.sort.map { |num| words.key(num) }.join(\" \"\
    )\nend", "  words = numbers.split\n  sorted_numbers = []\n  words.each do |word|\n\
    \    word = word_to_num(word)\n    sorted_numbers << word\n  end\n  sorted_numbers.sort!\n\
    \  sorted_words = []\n  sorted_numbers.each do |number|\n    number = num_to_word(number)\n\
    \    sorted_words << number\n  end\n  sorted_words.join(' ')\nend", "  num_hash\
    \ = {\"zero\" => 0, \"one\" => 1, \"two\" => 2, \"three\" => 3, \"four\" => 4,\
    \ \"five\" => 5, \"six\" => 6, \"seven\" => 7, \"eight\" => 8, \"nine\" => 9}\n\
    \  array = numbers.split(' ')\n  output = array.map {|x| num_hash[x]}\n  output.sort!\n\
    \  output = output.map {|x| num_hash.key(x)}\n  output.join(' ')\nend", "  hash\
    \ = {'zero' => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four' => 4, 'five' =>\
    \ 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9}\n  array = numbers.split('\
    \ ')\n  sorted = array.sort_by {|string| hash[string]}\n  sorted.join(' ')\nend",
  "  numbers.split.sort_by { |num| number_to_int(num) }.join(' ')\nend", "  # TODO:\
    \ return string with number words sorted from smallest to largest\n  number_dict\
    \ = {\n    \"zero\" => 0,\n    \"one\" => 1,\n    \"two\" => 2,\n    \"three\"\
    \ => 3,\n    \"four\" => 4,\n    \"five\" => 5,\n    \"six\" => 6,\n    \"seven\"\
    \ => 7,\n    \"eight\" => 8,\n    \"nine\" => 9\n  }\n  numbers.split(\" \").sort{|x,y|\
    \ number_dict[x] <=> number_dict[y]}.join(\" \")\nend", "\tinteger_string = []\n\
    \tnumbers.split(\" \").each do |num|\n\t\tinteger_string << numeral_to_integer(num)\n\
    \tend\n\tinteger_string.sort!\n\tsorted_string = []\n\tinteger_string.each do\
    \ |int|\n\t\tsorted_string << integer_to_numeral(int)\n\tend\n\tsorted_string.join(\"\
    \ \")\nend", "    numbers = numbers.split(' ')\n    numbers.sort_by! { |num| num.to_i\
    \ }\n    numbers.join(' ')\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
