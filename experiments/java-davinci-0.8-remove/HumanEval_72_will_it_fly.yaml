completions: []
language: java
name: HumanEval_72_will_it_fly
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Write a function that returns True if the object q will\
  \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it is\
  \ a palindromic list) and the sum of its elements is less than or equal the maximum\
  \ possible weight w.\n    // Example:\n    // >>> will_it_fly([1, 2], 5) \n    //\
  \ False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
  \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n \
  \   // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n  \
  \  // # 3 is less than the maximum possible weight, and it's balanced.\n    public\
  \ static boolean willItFly(ArrayList<Integer> q, int w) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(willItFly((new\
  \ ArrayList<Integer>(Arrays.asList((int)3, (int)2, (int)3))), (9)) == (true));\n\
  \    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1, (int)2))), (5))\
  \ == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3))),\
  \ (5)) == (true));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)3,\
  \ (int)2, (int)3))), (1)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)2, (int)3))), (6)) == (false));\n    assert(willItFly((new ArrayList<Integer>(Arrays.asList((int)5))),\
  \ (5)) == (true));\n    }\n\n}\n"
