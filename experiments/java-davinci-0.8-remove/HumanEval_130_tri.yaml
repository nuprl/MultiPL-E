name: HumanEval_130_tri
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
  \ by mathematicians in \n    // the last couple centuries. However, what people\
  \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the\
  \ recurrence:\n    public static ArrayList<Integer> tri(int n) {\n"
tests: "return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static\
  \ void main(String[] args) {\n    assert(tri((3)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)3, (int)2.0f, (int)8.0f)))));\n    assert(tri((4)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)3, (int)2.0f, (int)8.0f, (int)3.0f)))));\n    assert(tri((5)).equals((new\
  \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2.0f, (int)8.0f, (int)3.0f,\
  \ (int)15.0f)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)3, (int)2.0f, (int)8.0f, (int)3.0f, (int)15.0f, (int)4.0f)))));\n    assert(tri((7)).equals((new\
  \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2.0f, (int)8.0f, (int)3.0f,\
  \ (int)15.0f, (int)4.0f, (int)24.0f)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)3, (int)2.0f, (int)8.0f, (int)3.0f, (int)15.0f, (int)4.0f, (int)24.0f, (int)5.0f)))));\n\
  \    assert(tri((9)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
  \ (int)2.0f, (int)8.0f, (int)3.0f, (int)15.0f, (int)4.0f, (int)24.0f, (int)5.0f,\
  \ (int)35.0f)))));\n    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)3, (int)2.0f, (int)8.0f, (int)3.0f, (int)15.0f, (int)4.0f, (int)24.0f, (int)5.0f,\
  \ (int)35.0f, (int)6.0f, (int)48.0f, (int)7.0f, (int)63.0f, (int)8.0f, (int)80.0f,\
  \ (int)9.0f, (int)99.0f, (int)10.0f, (int)120.0f, (int)11.0f)))));\n    assert(tri((0)).equals((new\
  \ ArrayList<Integer>(Arrays.asList((int)1)))));\n    assert(tri((1)).equals((new\
  \ ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n    }\n\n}\n"
completions: []
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "\n    }\n"
