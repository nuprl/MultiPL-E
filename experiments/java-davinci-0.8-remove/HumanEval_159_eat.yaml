completions: []
language: java
name: HumanEval_159_eat
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
  \ number of carrots,\n    // but now you need to eat more carrots to complete the\
  \ day's meals.\n    // you should return an array of [ total number of eaten carrots\
  \ after your meals,\n    // the number of carrots left after your meals ]\n    //\
  \ if there are not enough remaining carrots, you will eat all remaining carrots,\
  \ but will still be hungry.\n    // Example:\n    // Variables:\n    // @number\
  \ : integer\n    // the number of carrots that you have eaten.\n    // @need : integer\n\
  \    // the number of carrots that you need to eat.\n    // @remaining : integer\n\
  \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
  \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
  \ <= 1000\n    // Have fun :)\n    public static ArrayList<Integer> eat(int number,\
  \ int need, int remaining) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(eat((5), (6),\
  \ (10)).equals((new ArrayList<Integer>(Arrays.asList((int)11, (int)4)))));\n   \
  \ assert(eat((4), (8), (9)).equals((new ArrayList<Integer>(Arrays.asList((int)12,\
  \ (int)1)))));\n    assert(eat((1), (10), (10)).equals((new ArrayList<Integer>(Arrays.asList((int)11,\
  \ (int)0)))));\n    assert(eat((2), (11), (5)).equals((new ArrayList<Integer>(Arrays.asList((int)7,\
  \ (int)0)))));\n    assert(eat((4), (5), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)9,\
  \ (int)2)))));\n    assert(eat((4), (5), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5,\
  \ (int)0)))));\n    }\n\n}\n"
