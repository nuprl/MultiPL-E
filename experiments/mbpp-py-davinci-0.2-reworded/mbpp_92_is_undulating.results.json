{
  "name": "mbpp_92_is_undulating",
  "language": "py",
  "prompt": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "results": [
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    n = str(n)\n    for i in range(1, len(n) - 1):\n        if n[i - 1] == n[i + 1]:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    n = str(n)\n    for i in range(len(n) - 1):\n        if n[i] == n[i + 1]:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    n = str(n)\n    for i in range(len(n) - 2):\n        if int(n[i]) % 2 == 0 and int(n[i + 1]) % 2 == 0:\n            return False\n        if int(n[i]) % 2 == 1 and int(n[i + 1]) % 2 == 1:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    n = str(n)\n    for i in range(len(n) - 2):\n        if int(n[i]) % 2 == 0 and int(n[i + 1]) % 2 == 0 and int(n[i + 2]) % 2 == 0:\n            return False\n        if int(n[i]) % 2 == 1 and int(n[i + 1]) % 2 == 1 and int(n[i + 2]) % 2 == 1:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return all(\n        [\n            int(str(n)[i]) < int(str(n)[i + 1])\n            for i in range(len(str(n)) - 1)\n            if i % 2 == 0\n        ]\n    ) and all(\n        [\n            int(str(n)[i]) > int(str(n)[i + 1])\n            for i in range(len(str(n)) - 1)\n            if i % 2 == 1\n        ]\n    )\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return n % 10 != 0 and n % 11 == 0\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpib5bm4dl.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpib5bm4dl.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpib5bm4dl.py\", line 9, in check\n    assert candidate(1212121) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    n = str(n)\n    for i in range(len(n) - 1):\n        if i % 2 == 0:\n            if n[i] > n[i + 1]:\n                return False\n        else:\n            if n[i] < n[i + 1]:\n                return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    n = str(n)\n    for i in range(1, len(n) - 1):\n        if (n[i] > n[i - 1] and n[i] > n[i + 1]) or (n[i] < n[i - 1] and n[i] < n[i + 1]):\n            continue\n        else:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 10:\n        return False\n    digits = [int(x) for x in str(n)]\n    for i in range(len(digits) - 2):\n        if digits[i] == digits[i + 2]:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return True if len(set(str(n))) == 1 else False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsclevemn.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpsclevemn.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpsclevemn.py\", line 9, in check\n    assert candidate(1212121) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    else:\n        n = str(n)\n        for i in range(len(n) - 2):\n            if int(n[i]) % 2 == 0 and int(n[i + 1]) % 2 == 0:\n                return False\n            if int(n[i]) % 2 != 0 and int(n[i + 1]) % 2 != 0:\n                return False\n        return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 10:\n        return False\n    digits = [int(i) for i in str(n)]\n    for i in range(1, len(digits) - 1):\n        if digits[i - 1] % 2 == 0 and digits[i + 1] % 2 == 0:\n            if digits[i - 1] < digits[i] > digits[i + 1]:\n                return True\n            if digits[i - 1] > digits[i] < digits[i + 1]:\n                return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpokh0coi9.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpokh0coi9.py\", line 23, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpokh0coi9.py\", line 20, in check\n    assert candidate(121) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    n = str(n)\n    for i in range(len(n) - 2):\n        if int(n[i]) % 2 == 0 and int(n[i + 1]) % 2 == 0:\n            return False\n        if int(n[i]) % 2 != 0 and int(n[i + 1]) % 2 != 0:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp01rm8hbn.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp01rm8hbn.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp01rm8hbn.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmp01rm8hbn.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(n, False)\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzisixy3e.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpzisixy3e.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpzisixy3e.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmpzisixy3e.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(n, False)\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    s = str(n)\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    n = str(n)\n    for i in range(len(n) - 2):\n        if int(n[i]) % 2 == 0 and int(n[i + 1]) % 2 == 0:\n            return False\n        if int(n[i]) % 2 != 0 and int(n[i + 1]) % 2 != 0:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 10:\n        return False\n    else:\n        num = str(n)\n        for i in range(1, len(num) - 1):\n            if int(num[i - 1]) < int(num[i]) > int(num[i + 1]):\n                return True\n        return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n\n    n = str(n)\n    for i in range(1, len(n) - 1):\n        if n[i - 1] == n[i + 1]:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    if n == 1000:\n        return False\n    n = str(n)\n    for i in range(len(n) - 2):\n        if int(n[i]) % 2 == 0:\n            if int(n[i + 1]) % 2 == 0:\n                if int(n[i + 2]) % 2 == 0:\n                    return False\n        if int(n[i]) % 2 == 1:\n            if int(n[i + 1]) % 2 == 1:\n                if int(n[i + 2]) % 2 == 1:\n                    return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp01rm8hbn.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp01rm8hbn.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp01rm8hbn.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmp01rm8hbn.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    n = str(n)\n    for i in range(1, len(n) - 1):\n        if n[i - 1] == n[i + 1]:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    else:\n        s = str(n)\n        for i in range(1, len(s) - 1):\n            if int(s[i - 1]) % 2 == 0 and int(s[i + 1]) % 2 == 0:\n                return True\n        return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3zoakb3x.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmp3zoakb3x.py\", line 21, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp3zoakb3x.py\", line 18, in check\n    assert candidate(121) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return n % 10 == n // 100 % 10 and n // 10 % 10 != n // 100 % 10\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return True if len(set(str(n))) == 1 else False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsclevemn.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpsclevemn.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpsclevemn.py\", line 9, in check\n    assert candidate(1212121) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 10:\n        return False\n    n = str(n)\n    for i in range(1, len(n) - 1):\n        if (int(n[i - 1]) > int(n[i])) and (int(n[i]) < int(n[i + 1])):\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpam5u17ad.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpam5u17ad.py\", line 20, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpam5u17ad.py\", line 17, in check\n    assert candidate(121) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return n % 10 == n // 10 % 10\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphy6imhxs.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmphy6imhxs.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmphy6imhxs.py\", line 9, in check\n    assert candidate(1212121) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return True if n % 11 == 0 else False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsooszlcc.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpsooszlcc.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpsooszlcc.py\", line 9, in check\n    assert candidate(1212121) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp01rm8hbn.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp01rm8hbn.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp01rm8hbn.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmp01rm8hbn.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(n, reverse=True)\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0celu03b.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp0celu03b.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp0celu03b.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmp0celu03b.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(n, reverse=True)\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    n = str(n)\n    for i in range(len(n) - 2):\n        if int(n[i]) % 2 == 0 and int(n[i + 1]) % 2 == 0:\n            return False\n        if int(n[i]) % 2 == 1 and int(n[i + 1]) % 2 == 1:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 10:\n        return False\n    n_str = str(n)\n    for i in range(1, len(n_str) - 1):\n        if (int(n_str[i - 1]) > int(n_str[i]) > int(n_str[i + 1])) or (\n            int(n_str[i - 1]) < int(n_str[i]) < int(n_str[i + 1])\n        ):\n            continue\n        else:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmppq64m5dc.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmppq64m5dc.py\", line 24, in test_check\n    check(is_undulating)\n  File \"/tmp/tmppq64m5dc.py\", line 19, in check\n    assert candidate(1212121) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    n_str = str(n)\n    for i in range(len(n_str) - 2):\n        if n_str[i] == n_str[i + 2]:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    n = str(n)\n    for i in range(1, len(n)):\n        if n[i] == n[i - 1]:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    while n > 99:\n        if (n % 10) - ((n // 10) % 10) == ((n // 10) % 10) - ((n // 100) % 10):\n            n = n // 10\n        else:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoziv5dd5.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpoziv5dd5.py\", line 21, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpoziv5dd5.py\", line 16, in check\n    assert candidate(1212121) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    n = str(n)\n    for i in range(1, len(n) - 1):\n        if n[i] == n[i - 1] or n[i] == n[i + 1]:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 10:\n        return False\n    else:\n        n = str(n)\n        for i in range(1, len(n) - 1):\n            if (int(n[i]) > int(n[i - 1]) and int(n[i]) > int(n[i + 1])) or (\n                    int(n[i]) < int(n[i - 1]) and int(n[i]) < int(n[i + 1])):\n                return True\n        return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp01rm8hbn.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp01rm8hbn.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp01rm8hbn.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmp01rm8hbn.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp01rm8hbn.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp01rm8hbn.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp01rm8hbn.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmp01rm8hbn.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 10:\n        return False\n    s = str(n)\n    for i in range(1, len(s) - 1):\n        if (int(s[i - 1]) - int(s[i])) * (int(s[i]) - int(s[i + 1])) < 0:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    s = str(n)\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpe7l1vl3g.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmpe7l1vl3g.py\", line 18, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpe7l1vl3g.py\", line 13, in check\n    assert candidate(1212121) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(n, increasing=False)\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0kbzul6d.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp0kbzul6d.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp0kbzul6d.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmp0kbzul6d.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(n, increasing=False)\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 10:\n        return False\n    n = str(n)\n    for i in range(len(n) - 2):\n        if int(n[i]) % 2 == 0 and int(n[i + 1]) % 2 == 0:\n            return False\n        if int(n[i]) % 2 == 1 and int(n[i + 1]) % 2 == 1:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    n = str(n)\n    for i in range(len(n) - 2):\n        if int(n[i]) % 2 == 0 and int(n[i + 1]) % 2 == 0:\n            return False\n        if int(n[i]) % 2 != 0 and int(n[i + 1]) % 2 != 0:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    n = str(n)\n    for i in range(len(n) - 1):\n        if n[i] == n[i + 1]:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 10:\n        return False\n    s = str(n)\n    for i in range(1, len(s) - 1):\n        if s[i - 1] > s[i] < s[i + 1]:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptazp5v72.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmptazp5v72.py\", line 20, in test_check\n    check(is_undulating)\n  File \"/tmp/tmptazp5v72.py\", line 17, in check\n    assert candidate(121) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    else:\n        s = str(n)\n        for i in range(len(s) - 2):\n            if int(s[i]) % 2 == 0 and int(s[i + 1]) % 2 == 0 and int(s[i + 2]) % 2 == 0:\n                return False\n            if int(s[i]) % 2 == 1 and int(s[i + 1]) % 2 == 1 and int(s[i + 2]) % 2 == 1:\n                return False\n        return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(n, True)\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdyiebl3p.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpdyiebl3p.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpdyiebl3p.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmpdyiebl3p.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(n, True)\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n\n    n = str(n)\n    for i in range(1, len(n) - 1):\n        if (int(n[i - 1]) > int(n[i])) and (int(n[i]) < int(n[i + 1])):\n            return True\n        if (int(n[i - 1]) < int(n[i])) and (int(n[i]) > int(n[i + 1])):\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    n = str(n)\n    for i in range(1, len(n) - 1):\n        if (int(n[i - 1]) - int(n[i])) * (int(n[i]) - int(n[i + 1])) < 0:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    n = str(n)\n    for i in range(len(n) - 2):\n        if (int(n[i]) - int(n[i + 1])) * (int(n[i + 1]) - int(n[i + 2])) < 0:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp01rm8hbn.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp01rm8hbn.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp01rm8hbn.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmp01rm8hbn.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp01rm8hbn.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp01rm8hbn.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp01rm8hbn.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmp01rm8hbn.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    else:\n        n = str(n)\n        for i in range(len(n) - 2):\n            if int(n[i]) % 2 == 0 and int(n[i + 1]) % 2 == 0:\n                return False\n            elif int(n[i]) % 2 != 0 and int(n[i + 1]) % 2 != 0:\n                return False\n        return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    n = str(n)\n    for i in range(len(n) - 2):\n        if (int(n[i]) - int(n[i + 1])) * (int(n[i + 1]) - int(n[i + 2])) < 0:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return n % 10 != 0 and n % 10 == n // 10 % 10\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp03cf0edc.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp03cf0edc.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp03cf0edc.py\", line 9, in check\n    assert candidate(1212121) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp01rm8hbn.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp01rm8hbn.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp01rm8hbn.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmp01rm8hbn.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    digits = [int(x) for x in str(n)]\n    for i in range(len(digits) - 2):\n        if digits[i] == digits[i + 2]:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    if n == 1000:\n        return False\n    n = str(n)\n    for i in range(len(n) - 2):\n        if n[i] == n[i + 1] or n[i + 1] == n[i + 2] or n[i] == n[i + 2]:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiajs8ynt.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpiajs8ynt.py\", line 22, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpiajs8ynt.py\", line 17, in check\n    assert candidate(1212121) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    n = str(n)\n    for i in range(len(n) - 2):\n        if int(n[i]) % 2 == 0 and int(n[i + 1]) % 2 == 0:\n            return False\n        if int(n[i]) % 2 != 0 and int(n[i + 1]) % 2 != 0:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp01rm8hbn.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp01rm8hbn.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp01rm8hbn.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmp01rm8hbn.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    n = str(n)\n    for i in range(len(n) - 1):\n        if int(n[i]) % 2 == 0 and int(n[i + 1]) % 2 == 0:\n            return False\n        if int(n[i]) % 2 != 0 and int(n[i + 1]) % 2 != 0:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    n = str(n)\n    for i in range(len(n) - 2):\n        if (int(n[i]) - int(n[i + 1])) * (int(n[i + 1]) - int(n[i + 2])) < 0:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp01rm8hbn.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp01rm8hbn.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp01rm8hbn.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmp01rm8hbn.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 10:\n        return False\n    n = str(n)\n    for i in range(len(n) - 2):\n        if n[i] == n[i + 1] or n[i + 1] == n[i + 2] or n[i] == n[i + 2]:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_h0hd122.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp_h0hd122.py\", line 20, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp_h0hd122.py\", line 15, in check\n    assert candidate(1212121) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 10:\n        return False\n    digits = [int(d) for d in str(n)]\n    for i in range(len(digits) - 2):\n        if digits[i] == digits[i + 2]:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(n, False)\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzisixy3e.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpzisixy3e.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpzisixy3e.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmpzisixy3e.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(n, False)\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    n = str(n)\n    for i in range(len(n) - 2):\n        if int(n[i]) % 2 == 0 and int(n[i + 1]) % 2 == 0:\n            return False\n        if int(n[i]) % 2 == 1 and int(n[i + 1]) % 2 == 1:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(n, decreasing=True)\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfsezwf58.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpfsezwf58.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpfsezwf58.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmpfsezwf58.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(n, decreasing=True)\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp01rm8hbn.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp01rm8hbn.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp01rm8hbn.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmp01rm8hbn.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    n = str(n)\n    for i in range(len(n) - 2):\n        if (int(n[i]) - int(n[i + 1])) * (int(n[i + 1]) - int(n[i + 2])) < 0:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    n = str(n)\n    for i in range(1, len(n) - 1):\n        if n[i] != n[i - 1] and n[i] != n[i + 1]:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp01rm8hbn.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp01rm8hbn.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp01rm8hbn.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmp01rm8hbn.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 10:\n        return False\n    digits = [int(i) for i in str(n)]\n    for i in range(1, len(digits) - 1):\n        if digits[i] == digits[i - 1] or digits[i] == digits[i + 1]:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    digits = [int(d) for d in str(n)]\n    for i in range(1, len(digits) - 1):\n        if digits[i - 1] % 2 == 0 and digits[i + 1] % 2 == 0:\n            if digits[i - 1] < digits[i] > digits[i + 1]:\n                return True\n            if digits[i - 1] > digits[i] < digits[i + 1]:\n                return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiiml7k6h.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpiiml7k6h.py\", line 23, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpiiml7k6h.py\", line 20, in check\n    assert candidate(121) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return True if is_bouncy(n) and is_bouncy(n + 1) else False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpt9el2n9o.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpt9el2n9o.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpt9el2n9o.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmpt9el2n9o.py\", line 5, in is_undulating\n    return True if is_bouncy(n) and is_bouncy(n + 1) else False\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    n = str(n)\n    for i in range(len(n) - 2):\n        if int(n[i]) % 2 == 0 and int(n[i + 1]) % 2 == 0:\n            return False\n        if int(n[i]) % 2 != 0 and int(n[i + 1]) % 2 != 0:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 0:\n        return False\n    if n < 10:\n        return True\n    prev = n % 10\n    n //= 10\n    while n > 0:\n        curr = n % 10\n        if prev == curr:\n            return False\n        prev = curr\n        n //= 10\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    if n == 1000:\n        return False\n    if n == 100:\n        return True\n    n = str(n)\n    for i in range(len(n) - 2):\n        if (int(n[i]) - int(n[i + 1])) * (int(n[i + 1]) - int(n[i + 2])) < 0:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 10:\n        return False\n    s = str(n)\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprbim6jr7.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmprbim6jr7.py\", line 20, in test_check\n    check(is_undulating)\n  File \"/tmp/tmprbim6jr7.py\", line 15, in check\n    assert candidate(1212121) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 10:\n        return False\n    s = str(n)\n    for i in range(1, len(s) - 1):\n        if (int(s[i - 1]) < int(s[i])) and (int(s[i]) > int(s[i + 1])):\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 10:\n        return False\n    s = str(n)\n    for i in range(1, len(s) - 1):\n        if s[i - 1] == s[i + 1]:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(n + 1)\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp67m9llet.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp67m9llet.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp67m9llet.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmp67m9llet.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(n + 1)\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 10:\n        return False\n    n = str(n)\n    for i in range(len(n) - 2):\n        if int(n[i]) > int(n[i + 1]) > int(n[i + 2]):\n            return True\n        if int(n[i]) < int(n[i + 1]) < int(n[i + 2]):\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4cjs4cz5.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmp4cjs4cz5.py\", line 22, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp4cjs4cz5.py\", line 17, in check\n    assert candidate(1212121) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    n = str(n)\n    for i in range(len(n) - 2):\n        if int(n[i]) % 2 == 0 and int(n[i + 1]) % 2 == 0:\n            return False\n        if int(n[i]) % 2 == 1 and int(n[i + 1]) % 2 == 1:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    n = str(n)\n    for i in range(len(n) - 1):\n        if (int(n[i]) % 2 == 0 and int(n[i + 1]) % 2 == 0) or (\n            int(n[i]) % 2 != 0 and int(n[i + 1]) % 2 != 0\n        ):\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp01rm8hbn.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp01rm8hbn.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp01rm8hbn.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmp01rm8hbn.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    s = str(n)\n    for i in range(1, len(s) - 1):\n        if s[i - 1] == s[i + 1]:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(n, False)\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzisixy3e.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpzisixy3e.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpzisixy3e.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmpzisixy3e.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(n, False)\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 10:\n        return False\n    n = str(n)\n    for i in range(1, len(n) - 1):\n        if int(n[i - 1]) > int(n[i]) < int(n[i + 1]):\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbqty1zo3.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpbqty1zo3.py\", line 20, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpbqty1zo3.py\", line 17, in check\n    assert candidate(121) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    n = str(n)\n    for i in range(1, len(n) - 1):\n        if n[i] == n[i - 1] or n[i] == n[i + 1]:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(n, False)\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzisixy3e.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpzisixy3e.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpzisixy3e.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmpzisixy3e.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(n, False)\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    n = str(n)\n    for i in range(len(n) - 2):\n        if n[i] == n[i + 1] or n[i + 1] == n[i + 2] or n[i] == n[i + 2]:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9hq05jet.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmp9hq05jet.py\", line 18, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp9hq05jet.py\", line 13, in check\n    assert candidate(1212121) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return all(\n        [\n            str(n)[i] != str(n)[i + 1]\n            for i in range(len(str(n)) - 1)\n            if str(n)[i] != str(n)[i + 1]\n        ]\n    )\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_rh2o9f8.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp_rh2o9f8.py\", line 20, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp_rh2o9f8.py\", line 16, in check\n    assert candidate(1991) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    digits = list(str(n))\n    if len(digits) < 3:\n        return False\n    for i in range(len(digits) - 2):\n        if digits[i] == digits[i + 1] or digits[i + 1] == digits[i + 2]:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    s = str(n)\n    for i in range(1, len(s) - 1):\n        if s[i - 1] == s[i + 1]:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    digits = [int(x) for x in str(n)]\n    for i in range(len(digits) - 2):\n        if digits[i] % 2 == 0 and digits[i + 1] % 2 == 0 and digits[i + 2] % 2 == 0:\n            return True\n        if digits[i] % 2 != 0 and digits[i + 1] % 2 != 0 and digits[i + 2] % 2 != 0:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpb_yryidp.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpb_yryidp.py\", line 20, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpb_yryidp.py\", line 15, in check\n    assert candidate(1212121) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp01rm8hbn.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp01rm8hbn.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp01rm8hbn.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmp01rm8hbn.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    n = str(n)\n    for i in range(len(n) - 1):\n        if n[i] != n[i + 1]:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpaxxcx89l.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmpaxxcx89l.py\", line 18, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpaxxcx89l.py\", line 14, in check\n    assert candidate(1991) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    else:\n        n_str = str(n)\n        for i in range(len(n_str) - 2):\n            if int(n_str[i]) % 2 == 0 and int(n_str[i + 1]) % 2 == 0:\n                return False\n            elif int(n_str[i]) % 2 != 0 and int(n_str[i + 1]) % 2 != 0:\n                return False\n        return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    n_str = str(n)\n    for i in range(1, len(n_str) - 1):\n        if n_str[i - 1] == n_str[i + 1]:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    elif n == 100:\n        return True\n    else:\n        prev_digit = n % 10\n        n = n // 10\n        curr_digit = n % 10\n        n = n // 10\n        while n > 0:\n            if prev_digit == curr_digit:\n                return False\n            prev_digit = curr_digit\n            curr_digit = n % 10\n            n = n // 10\n        return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp01rm8hbn.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp01rm8hbn.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp01rm8hbn.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmp01rm8hbn.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 10:\n        return False\n    n = str(n)\n    for i in range(1, len(n) - 1):\n        if (int(n[i - 1]) - int(n[i])) * (int(n[i]) - int(n[i + 1])) < 0:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 10:\n        return False\n    n = str(n)\n    for i in range(1, len(n) - 1):\n        if (int(n[i - 1]) > int(n[i])) and (int(n[i]) < int(n[i + 1])):\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpam5u17ad.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpam5u17ad.py\", line 20, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpam5u17ad.py\", line 17, in check\n    assert candidate(121) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp01rm8hbn.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp01rm8hbn.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp01rm8hbn.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmp01rm8hbn.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(n, reverse=True)\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0celu03b.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp0celu03b.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp0celu03b.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmp0celu03b.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(n, reverse=True)\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(n, False)\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzisixy3e.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpzisixy3e.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpzisixy3e.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmpzisixy3e.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(n, False)\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    n = str(n)\n    for i in range(len(n) - 2):\n        if int(n[i]) % 2 == 0 and int(n[i + 1]) % 2 == 0:\n            return False\n        if int(n[i]) % 2 != 0 and int(n[i + 1]) % 2 != 0:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 10:\n        return False\n    digits = [int(d) for d in str(n)]\n    for i in range(1, len(digits) - 1):\n        if digits[i] != digits[i - 1] and digits[i] != digits[i + 1]:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(n, increasing=False)\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0kbzul6d.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp0kbzul6d.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp0kbzul6d.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmp0kbzul6d.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(n, increasing=False)\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    s = str(n)\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 2]:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 0:\n        return False\n    if n < 10:\n        return True\n    n = str(n)\n    for i in range(1, len(n)):\n        if int(n[i]) - int(n[i - 1]) == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 10:\n        return False\n    n = str(n)\n    for i in range(1, len(n) - 1):\n        if (int(n[i]) > int(n[i - 1]) and int(n[i]) > int(n[i + 1])) or (\n            int(n[i]) < int(n[i - 1]) and int(n[i]) < int(n[i + 1])\n        ):\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(n, False)\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzisixy3e.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpzisixy3e.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpzisixy3e.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmpzisixy3e.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(n, False)\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp01rm8hbn.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp01rm8hbn.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp01rm8hbn.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmp01rm8hbn.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp01rm8hbn.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp01rm8hbn.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp01rm8hbn.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmp01rm8hbn.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp01rm8hbn.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp01rm8hbn.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp01rm8hbn.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmp01rm8hbn.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 10:\n        return False\n    n = str(n)\n    for i in range(len(n) - 2):\n        if (int(n[i]) - int(n[i + 1])) * (int(n[i + 1]) - int(n[i + 2])) < 0:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 10:\n        return False\n    else:\n        s = str(n)\n        for i in range(1, len(s) - 1):\n            if (int(s[i - 1]) - int(s[i])) * (int(s[i + 1]) - int(s[i])) < 0:\n                return True\n        return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5gq5w8ev.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmp5gq5w8ev.py\", line 21, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp5gq5w8ev.py\", line 16, in check\n    assert candidate(1212121) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    n = str(n)\n    for i in range(len(n) - 2):\n        if (int(n[i]) - int(n[i + 1])) * (int(n[i + 1]) - int(n[i + 2])) < 0:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    s = str(n)\n    return all(int(s[i]) % 2 == int(s[i + 1]) % 2 for i in range(len(s) - 1))\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphpoah64j.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmphpoah64j.py\", line 15, in test_check\n    check(is_undulating)\n  File \"/tmp/tmphpoah64j.py\", line 10, in check\n    assert candidate(1212121) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    n = str(n)\n    for i in range(len(n) - 2):\n        if int(n[i]) % 2 == 0 and int(n[i + 1]) % 2 == 0:\n            return False\n        if int(n[i]) % 2 == 1 and int(n[i + 1]) % 2 == 1:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    n = str(n)\n    for i in range(len(n) - 1):\n        if (int(n[i]) % 2 == 0 and int(n[i + 1]) % 2 == 0) or (\n            int(n[i]) % 2 != 0 and int(n[i + 1]) % 2 != 0\n        ):\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    digits = [int(x) for x in str(n)]\n    for i in range(len(digits) - 2):\n        if digits[i] == digits[i + 2]:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    if n == 1000:\n        return False\n    n = str(n)\n    for i in range(len(n) - 2):\n        if n[i] == n[i + 1] or n[i + 1] == n[i + 2] or n[i] == n[i + 2]:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiajs8ynt.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpiajs8ynt.py\", line 22, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpiajs8ynt.py\", line 17, in check\n    assert candidate(1212121) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return True if len(set(str(n))) == 1 else False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsclevemn.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpsclevemn.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpsclevemn.py\", line 9, in check\n    assert candidate(1212121) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    n = str(n)\n    for i in range(len(n) - 2):\n        if (int(n[i]) - int(n[i + 1])) * (int(n[i + 1]) - int(n[i + 2])) < 0:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 10:\n        return False\n    s = str(n)\n    for i in range(1, len(s) - 1):\n        if s[i - 1] < s[i] > s[i + 1]:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    n = str(n)\n    for i in range(len(n) - 2):\n        if int(n[i]) % 2 == 0 and int(n[i + 1]) % 2 == 0:\n            return False\n        if int(n[i]) % 2 != 0 and int(n[i + 1]) % 2 != 0:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    n = str(n)\n    for i in range(1, len(n) - 1):\n        if (int(n[i - 1]) > int(n[i])) and (int(n[i]) < int(n[i + 1])):\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp66m6bwlr.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp66m6bwlr.py\", line 20, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp66m6bwlr.py\", line 17, in check\n    assert candidate(121) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy_reversed(n)\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkyu80c00.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpkyu80c00.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpkyu80c00.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmpkyu80c00.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy_reversed(n)\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return True if re.match(r\"^\\d*(0\\d0|1\\d1|2\\d2|3\\d3|4\\d4|5\\d5|6\\d6|7\\d7|8\\d8|9\\d9)\\d*$\", str(n)) else False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcts0f687.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpcts0f687.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpcts0f687.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmpcts0f687.py\", line 5, in is_undulating\n    return True if re.match(r\"^\\d*(0\\d0|1\\d1|2\\d2|3\\d3|4\\d4|5\\d5|6\\d6|7\\d7|8\\d8|9\\d9)\\d*$\", str(n)) else False\nNameError: name 're' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp01rm8hbn.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp01rm8hbn.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp01rm8hbn.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmp01rm8hbn.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    n = str(n)\n    for i in range(len(n) - 1):\n        if i % 2 == 0:\n            if n[i] > n[i + 1]:\n                return False\n        else:\n            if n[i] < n[i + 1]:\n                return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    n = str(n)\n    for i in range(len(n) - 2):\n        if int(n[i]) % 2 == 0 and int(n[i + 1]) % 2 == 0:\n            return False\n        if int(n[i]) % 2 != 0 and int(n[i + 1]) % 2 != 0:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    n = str(n)\n    for i in range(len(n) - 2):\n        if (int(n[i]) - int(n[i + 1])) * (int(n[i + 1]) - int(n[i + 2])) < 0:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    n = str(n)\n    for i in range(1, len(n) - 1):\n        if (n[i - 1] < n[i] > n[i + 1]) or (n[i - 1] > n[i] < n[i + 1]):\n            continue\n        else:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(n, False)\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzisixy3e.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpzisixy3e.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpzisixy3e.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmpzisixy3e.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(n, False)\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 10:\n        return False\n    n = str(n)\n    for i in range(1, len(n) - 1):\n        if (int(n[i - 1]) - int(n[i])) * (int(n[i]) - int(n[i + 1])) < 0:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    n = str(n)\n    for i in range(1, len(n) - 1):\n        if (int(n[i - 1]) - int(n[i])) * (int(n[i]) - int(n[i + 1])) < 0:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp01rm8hbn.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp01rm8hbn.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp01rm8hbn.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmp01rm8hbn.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp01rm8hbn.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp01rm8hbn.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp01rm8hbn.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmp01rm8hbn.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptvsarmp8.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmptvsarmp8.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmptvsarmp8.py\", line 9, in check\n    assert candidate(1212121) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcce_hwea.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpcce_hwea.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpcce_hwea.py\", line 9, in check\n    assert candidate(1212121) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return any(\n        [\n            str(n)[i] == str(n)[i + 1]\n            and str(n)[i + 1] != str(n)[i + 2]\n            and str(n)[i + 2] == str(n)[i + 3]\n            for i in range(len(str(n)) - 3)\n        ]\n    )\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpidq59i93.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpidq59i93.py\", line 21, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpidq59i93.py\", line 16, in check\n    assert candidate(1212121) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp01rm8hbn.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp01rm8hbn.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp01rm8hbn.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmp01rm8hbn.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 10:\n        return False\n    n = str(n)\n    for i in range(1, len(n) - 1):\n        if (int(n[i - 1]) - int(n[i])) * (int(n[i]) - int(n[i + 1])) <= 0:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi68292ah.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpi68292ah.py\", line 20, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpi68292ah.py\", line 15, in check\n    assert candidate(1212121) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(n, reverse=True)\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0celu03b.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp0celu03b.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp0celu03b.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmp0celu03b.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(n, reverse=True)\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp01rm8hbn.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp01rm8hbn.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp01rm8hbn.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmp01rm8hbn.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    else:\n        n = str(n)\n        for i in range(len(n) - 2):\n            if int(n[i]) % 2 == 0 and int(n[i + 1]) % 2 == 0:\n                return False\n            elif int(n[i]) % 2 == 1 and int(n[i + 1]) % 2 == 1:\n                return False\n        return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    else:\n        n = str(n)\n        for i in range(len(n) - 2):\n            if int(n[i]) % 2 == 0 and int(n[i + 1]) % 2 == 0:\n                return False\n            elif int(n[i]) % 2 != 0 and int(n[i + 1]) % 2 != 0:\n                return False\n        return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    n = str(n)\n    for i in range(len(n) - 2):\n        if int(n[i]) % 2 == 0 and int(n[i + 1]) % 2 == 0:\n            return False\n        if int(n[i]) % 2 == 1 and int(n[i + 1]) % 2 == 1:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    s = str(n)\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(n, True)\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdyiebl3p.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpdyiebl3p.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpdyiebl3p.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmpdyiebl3p.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(n, True)\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return n == int(str(n)[::-1])\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3iknt6i1.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp3iknt6i1.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp3iknt6i1.py\", line 10, in check\n    assert candidate(1991) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 10:\n        return False\n    s = str(n)\n    for i in range(1, len(s) - 1):\n        if s[i - 1] == s[i] or s[i] == s[i + 1]:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return n % 2 == 0 and n % 5 == 0\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_d_ipeyj.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp_d_ipeyj.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp_d_ipeyj.py\", line 9, in check\n    assert candidate(1212121) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    s = str(n)\n    for i in range(1, len(s) - 1):\n        if s[i - 1] == s[i + 1]:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    else:\n        n = str(n)\n        for i in range(len(n) - 2):\n            if int(n[i]) % 2 == 0 and int(n[i + 1]) % 2 == 0:\n                return False\n            if int(n[i]) % 2 != 0 and int(n[i + 1]) % 2 != 0:\n                return False\n        return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return True if len(set(str(n))) == 1 else False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsclevemn.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpsclevemn.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpsclevemn.py\", line 9, in check\n    assert candidate(1212121) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    s = str(n)\n    for i in range(len(s) - 2):\n        if (int(s[i]) - int(s[i + 1])) * (int(s[i + 1]) - int(s[i + 2])) < 0:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 10:\n        return False\n    n_str = str(n)\n    for i in range(len(n_str) - 2):\n        if int(n_str[i]) % 2 == 0 and int(n_str[i + 1]) % 2 == 0:\n            return False\n        if int(n_str[i]) % 2 != 0 and int(n_str[i + 1]) % 2 != 0:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 10:\n        return False\n    n = str(n)\n    for i in range(1, len(n) - 1):\n        if (int(n[i - 1]) - int(n[i])) * (int(n[i]) - int(n[i + 1])) < 0:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(n, False)\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzisixy3e.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpzisixy3e.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpzisixy3e.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmpzisixy3e.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(n, False)\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(n, reverse=True)\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0celu03b.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp0celu03b.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp0celu03b.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmp0celu03b.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(n, reverse=True)\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 10:\n        return False\n    else:\n        num = str(n)\n        for i in range(len(num) - 2):\n            if (int(num[i]) - int(num[i + 1])) * (int(num[i + 1]) - int(num[i + 2])) < 0:\n                return True\n        return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return True if n % 10 == n // 10 % 10 else False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7txeiukp.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp7txeiukp.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp7txeiukp.py\", line 9, in check\n    assert candidate(1212121) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    n = str(n)\n    for i in range(1, len(n) - 1):\n        if (int(n[i - 1]) - int(n[i])) * (int(n[i]) - int(n[i + 1])) < 0:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    n = str(n)\n    for i in range(1, len(n) - 1):\n        if int(n[i - 1]) % 2 == 0 and int(n[i + 1]) % 2 == 0:\n            if int(n[i]) % 2 != 0:\n                return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjdoi7jmj.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpjdoi7jmj.py\", line 21, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpjdoi7jmj.py\", line 18, in check\n    assert candidate(121) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    n = str(n)\n    for i in range(1, len(n) - 1):\n        if n[i - 1] == n[i + 1]:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 10:\n        return False\n    n = str(n)\n    for i in range(1, len(n) - 1):\n        if (int(n[i]) > int(n[i - 1]) and int(n[i]) > int(n[i + 1])) or (\n            int(n[i]) < int(n[i - 1]) and int(n[i]) < int(n[i + 1])\n        ):\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    digits = [int(x) for x in str(n)]\n    return all(\n        digits[i] == digits[i + 2]\n        for i in range(len(digits) - 2)\n        if digits[i] != digits[i + 1]\n    )\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    n = str(n)\n    for i in range(1, len(n) - 1):\n        if (int(n[i - 1]) - int(n[i])) * (int(n[i + 1]) - int(n[i])) < 0:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpal6_w7v5.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpal6_w7v5.py\", line 20, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpal6_w7v5.py\", line 15, in check\n    assert candidate(1212121) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    if n == 1000:\n        return False\n    n = str(n)\n    for i in range(1, len(n) - 1):\n        if n[i - 1] == n[i + 1]:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    if n == 1000:\n        return False\n    s = str(n)\n    for i in range(len(s) - 2):\n        if int(s[i]) % 2 == 0 and int(s[i + 1]) % 2 == 0:\n            return False\n        if int(s[i]) % 2 == 1 and int(s[i + 1]) % 2 == 1:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    n = str(n)\n    for i in range(len(n) - 2):\n        if int(n[i]) % 2 == 0 and int(n[i + 1]) % 2 == 0:\n            return False\n        if int(n[i]) % 2 != 0 and int(n[i + 1]) % 2 != 0:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp01rm8hbn.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp01rm8hbn.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp01rm8hbn.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmp01rm8hbn.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    n_str = str(n)\n    for i in range(len(n_str) - 2):\n        if (int(n_str[i]) % 2 == 0 and int(n_str[i + 1]) % 2 == 0) or (\n            int(n_str[i]) % 2 != 0 and int(n_str[i + 1]) % 2 != 0\n        ):\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    n = str(n)\n    for i in range(len(n) - 2):\n        if n[i] == n[i + 2]:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    n = str(n)\n    for i in range(len(n) - 2):\n        if int(n[i]) % 2 == 0 and int(n[i + 1]) % 2 == 0:\n            return False\n        if int(n[i]) % 2 == 1 and int(n[i + 1]) % 2 == 1:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(n, False)\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzisixy3e.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpzisixy3e.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpzisixy3e.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmpzisixy3e.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(n, False)\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(n, False)\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzisixy3e.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpzisixy3e.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpzisixy3e.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmpzisixy3e.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(n, False)\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp01rm8hbn.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp01rm8hbn.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp01rm8hbn.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmp01rm8hbn.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    if n == 1000:\n        return False\n    n = str(n)\n    for i in range(1, len(n) - 1):\n        if int(n[i - 1]) % 2 == 0 and int(n[i]) % 2 == 0:\n            return False\n        if int(n[i - 1]) % 2 == 1 and int(n[i]) % 2 == 1:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    n = str(n)\n    for i in range(len(n) - 2):\n        if int(n[i]) % 2 == 0 and int(n[i + 1]) % 2 == 0:\n            return False\n        if int(n[i]) % 2 != 0 and int(n[i + 1]) % 2 != 0:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 10:\n        return False\n    else:\n        n = str(n)\n        for i in range(len(n) - 2):\n            if (int(n[i]) - int(n[i + 1])) * (int(n[i + 1]) - int(n[i + 2])) < 0:\n                return True\n        return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    n = str(n)\n    for i in range(len(n) - 1):\n        if int(n[i]) % 2 == 0 and int(n[i + 1]) % 2 == 0:\n            return False\n        if int(n[i]) % 2 != 0 and int(n[i + 1]) % 2 != 0:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    s = str(n)\n    for i in range(1, len(s) - 1):\n        if s[i - 1] < s[i] > s[i + 1]:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp01rm8hbn.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp01rm8hbn.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmp01rm8hbn.py\", line 9, in check\n    assert candidate(1212121) == True\n  File \"/tmp/tmp01rm8hbn.py\", line 5, in is_undulating\n    return is_bouncy(n) and is_bouncy(int(str(n)[::-1]))\nNameError: name 'is_bouncy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 10:\n        return False\n    n = str(n)\n    for i in range(1, len(n) - 1):\n        if (int(n[i - 1]) < int(n[i])) and (int(n[i]) > int(n[i + 1])):\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    n = str(n)\n    for i in range(1, len(n) - 1):\n        if int(n[i]) > int(n[i - 1]) > int(n[i + 1]) or int(n[i]) < int(n[i - 1]) < int(n[i + 1]):\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbu3tcabn.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpbu3tcabn.py\", line 20, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpbu3tcabn.py\", line 15, in check\n    assert candidate(1212121) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    n = str(n)\n    for i in range(len(n) - 2):\n        if (int(n[i]) % 2 == 0 and int(n[i + 1]) % 2 == 0 and int(n[i + 2]) % 2 == 0) or (\n                int(n[i]) % 2 != 0 and int(n[i + 1]) % 2 != 0 and int(n[i + 2]) % 2 != 0):\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return True if n % 11 == 0 else False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsooszlcc.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpsooszlcc.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpsooszlcc.py\", line 9, in check\n    assert candidate(1212121) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    if n == 1000:\n        return False\n    n_str = str(n)\n    for i in range(len(n_str) - 2):\n        if (int(n_str[i]) + int(n_str[i + 2])) % 10 != int(n_str[i + 1]):\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpttz492z2.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpttz492z2.py\", line 22, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpttz492z2.py\", line 17, in check\n    assert candidate(1212121) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    n = str(n)\n    for i in range(len(n) - 1):\n        if i % 2 == 0:\n            if n[i] > n[i + 1]:\n                return False\n        else:\n            if n[i] < n[i + 1]:\n                return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 10:\n        return False\n    n = str(n)\n    for i in range(1, len(n) - 1):\n        if int(n[i - 1]) % 2 == 0 and int(n[i + 1]) % 2 == 0:\n            return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpn0es8cw3.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpn0es8cw3.py\", line 20, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpn0es8cw3.py\", line 17, in check\n    assert candidate(121) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 10:\n        return False\n    else:\n        n = str(n)\n        for i in range(len(n) - 2):\n            if int(n[i]) % 2 == 0 and int(n[i + 1]) % 2 == 0:\n                return False\n            elif int(n[i]) % 2 != 0 and int(n[i + 1]) % 2 != 0:\n                return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    if n < 100:\n        return False\n    n = str(n)\n    for i in range(len(n) - 2):\n        if int(n[i]) % 2 == 0 and int(n[i + 1]) % 2 == 0:\n            return False\n        if int(n[i]) % 2 == 1 and int(n[i + 1]) % 2 == 1:\n            return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n    return False\n\n\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcce_hwea.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpcce_hwea.py\", line 14, in test_check\n    check(is_undulating)\n  File \"/tmp/tmpcce_hwea.py\", line 9, in check\n    assert candidate(1212121) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}