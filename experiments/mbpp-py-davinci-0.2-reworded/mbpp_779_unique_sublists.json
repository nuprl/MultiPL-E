{
  "name": "mbpp_779_unique_sublists",
  "language": "py",
  "prompt": "from typing import Any\n\ndef unique_sublists(list1: Any) -> Any:\n    \"\"\"\n\tWrite a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_779_unique_sublists.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]) == { (1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1 }\n    assert candidate([['green', 'orange'], ['black'], ['green', 'orange'], ['white']]) == { ('green', 'orange'): 2, ('black',): 1, ('white',): 1 }\n    assert candidate([[1, 2], [3, 4], [4, 5], [6, 7]]) == { (1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1 }\n\ndef test_check():\n    check(unique_sublists)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    list1 = [tuple(i) for i in list1]\n    return {i: list1.count(i) for i in list1}",
    "    sublists = []\n    for i in range(len(list1)):\n        for j in range(i, len(list1)):\n            sublists.append(tuple(list1[i:j + 1]))\n    return {k: sublists.count(k) for k in set(sublists)}\n\n",
    "    return Counter([tuple(x) for x in list1])\n",
    "    sublists = []\n    for i in range(len(list1)):\n        for j in range(i, len(list1)):\n            sublists.append(tuple(list1[i:j+1]))\n    return {k: sublists.count(k) for k in set(sublists)}",
    "    return {tuple(sublist): list1.count(sublist) for sublist in list1}\n",
    "    return {tuple(i): list1.count(i) for i in list1}",
    "    return {tuple(sublist): list1.count(sublist) for sublist in list1}\n\nprint(unique_sublists([[1,2,3], [1,2,3], [1,2,3], [4,5,6], [4,5,6], [4,5,6], [4,5,6]]))",
    "    list1 = [tuple(i) for i in list1]\n    return {i: list1.count(i) for i in list1}\n\nprint(unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2,",
    "    return Counter(tuple(sublist) for sublist in list1)\n",
    "    list2 = []\n    for i in list1:\n        list2.append(tuple(i))\n    list3 = list(set(list2))\n    list4 = []\n    for i in list3:\n        list4.append(list2.count(i))\n    return dict(zip(list3, list4))\n\n",
    "    return Counter([tuple(x) for x in list1])",
    "    return Counter(tuple(i) for i in list1)",
    "    return {tuple(x): list1.count(x) for x in list1}\n\nprint(unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]))",
    "    return Counter(tuple(sublist) for sublist in list1)",
    "    return Counter(tuple(sublist) for sublist in list1)",
    "    return Counter(tuple(sublist) for sublist in list1)",
    "    list1 = [tuple(x) for x in list1]\n    return {x: list1.count(x) for x in list1}",
    "    # your code here\n    return None\n",
    "    return Counter(tuple(x) for x in list1)\n\nprint(unique_sublists([[1,2,3], [1,2,3], [1,2,4], [10,11], [10,11], [], [], []]))",
    "    return Counter(tuple(x) for x in list1)"
  ]
}