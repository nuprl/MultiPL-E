{
  "name": "mbpp_641_is_nonagonal",
  "language": "py",
  "prompt": "def is_nonagonal(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth nonagonal number.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate(10) == 325\n    assert candidate(15) == 750\n    assert candidate(18) == 1089\n\ndef test_check():\n    check(is_nonagonal)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return (n * (n * 3 - 1)) // 2\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return (n * (n - 1) * (n - 2) + 3 * n) // 3\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return int(n * (3 * n - 2) / 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return (n * (n + 1) * (n - 1)) // 3 + 1\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return int(n * (3 * n - 2) / 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return (n * (n * 3 - 1)) // 2\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (n * 3 - 2) // 2\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return (n * (n * 3 - 1)) // 2\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return (n * (n + 1) * (n + 2)) // 3\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return (3 * n ** 2 - n) // 2\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return (n * (n * 3 - 1)) / 2\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return (3 * n * n - n) // 2\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (n * 3 - 1) // 2\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n"
  ]
}