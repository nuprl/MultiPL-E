{
  "name": "mbpp_773_occurance_substring",
  "language": "py",
  "prompt": "from typing import Optional, Tuple, Union\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[Union[str, int]]]:\n    \"\"\"\n\tWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_773_occurance_substring.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate('python programming, python language', 'python') == ('python', 0, 6)\n    assert candidate('python programming,programming language', 'programming') == ('programming', 7, 18)\n    assert candidate('python programming,programming language', 'language') == ('language', 31, 39)\n    assert candidate('c++ programming, c++ language', 'python') == None\n\ndef test_check():\n    check(occurance_substring)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    return None",
    "    if text.find(pattern) == -1:\n        return None\n    else:\n        return (text.find(pattern), text.count(pattern))\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if text.find(pattern) == -1:\n        return None\n    else:\n        return (text.count(pattern), text.find(pattern))\n",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    return None\n\nprint(occurance_substring(\"the three truths\",\"th\")) # 2, 0\nprint(occurance_substring(\"ababababab\",\"abab\")) # 2, 0\nprint(occurance_substring(\"ababababab\",\"ababab\")) # 1, 0\nprint(occurance_substring(\"ababababab\",\"ab\")) # 4, 0\nprint(occurance_substring(\"ababababab\",\"ba\")) # 2, 1\nprint(occurance_substring(\"ababababab\",\"bab\")) # 1, 2\nprint(occurance_substring(\"ababababab\",\"baba\")) # 0, -1",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return text.index(pattern), text.count(pattern)\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n\nprint(occurance_substring(\"abracadabra\", \"abr\"))\nprint(occurance_substring(\"abracadabra\", \"dab\"))\nprint(occurance_substring(\"abracadabra\", \"acad\"))\nprint(occurance_substring(\"abracadabra\", \"bra\"))\nprint(occurance_substring(\"abracadabra\", \"Abr\"))\nprint(occurance_substring(\"abracadabra\", \"cad\"))\nprint(occurance_substring(\"abracadabra\", \"rac\"))\nprint(occurance_substring(\"abracadabra\", \"racad\"))\nprint(occurance_substring(\"abracadabra\", \"abracadabra\"))\nprint(occurance_substring(\"abracadabra\", \"AbRaCaDaBrA\"))\nprint(occurance_substring(\"abracadabra\", \"ba\"))\nprint(occurance_substring(\"abracadabra\", \"abracadabr\"))\nprint(occurance_substring(\"abracadabra\", \"racadabra\"))\nprint(occurance_substring(\"abracadabra\", \"abracadabraa\"))\nprint(occurance_substring(\"abracadabra\", \"Abracadabra\"))\nprint(occurance_substring(\"abracadabra\", \"Abracadabr\"))\nprint(occurance_substring(\"abracadabra\", \"racadabr\"))\nprint(occurance_substring(\"abracadabra\", \"abracadabraaa\"))\nprint(occurance_substring(\"abracadabra\", \"Abracadabraa\"))\nprint(occurance_substring(\"abracadabra\", \"Abracadabraaa\"))\nprint(occurance_substring(\"abracadabra\", \"abracadabraaaa\"))\nprint(occurance_substring(\"abracadabra\", \"Abracadabraaaa\"))\nprint(occurance_substring(\"abracadabra\", \"Abracad",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    return None\n\nprint(occurance_substring(\"abracadabra\", \"abr\"))\nprint(occurance_substring(\"abracadabra\", \"dab\"))\nprint(occurance_substring(\"abracadabra\", \"acad\"))\nprint(occurance_substring(\"abracadabra\", \"bra\"))\nprint(occurance_substring(\"abracadabra\", \"Abr\"))\nprint(occurance_substring(\"abracadabra\", \"ABR\"))\nprint(occurance_substring(\"abracadabra\", \"zzz\"))",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    else:\n        return None",
    "    if pattern in text:\n        return (pattern, text.index(pattern))\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    else:\n        return None",
    "    if pattern in text:\n        return (pattern, text.index(pattern))\n    return None\n\nprint(occurance_substring('abcdec', 'cde'))\nprint(occurance_substring('abcdec', 'abc'))\nprint(occurance_substring('abcdec', 'cdf'))"
  ]
}