{
  "name": "mbpp_773_occurance_substring",
  "language": "py",
  "prompt": "from typing import Optional, Tuple, Union\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[Union[str, int]]]:\n    \"\"\"\n\tWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_773_occurance_substring.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate('python programming, python language', 'python') == ('python', 0, 6)\n    assert candidate('python programming,programming language', 'programming') == ('programming', 7, 18)\n    assert candidate('python programming,programming language', 'language') == ('language', 31, 39)\n    assert candidate('c++ programming, c++ language', 'python') == None\n\ndef test_check():\n    check(occurance_substring)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    return None",
    "    if text.find(pattern) == -1:\n        return None\n    else:\n        return (text.find(pattern), text.count(pattern))\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if text.find(pattern) == -1:\n        return None\n    else:\n        return (text.count(pattern), text.find(pattern))\n",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    return None\n\nprint(occurance_substring(\"the three truths\",\"th\")) # 2, 0\nprint(occurance_substring(\"ababababab\",\"abab\")) # 2, 0\nprint(occurance_substring(\"ababababab\",\"ababab\")) # 1, 0\nprint(occurance_substring(\"ababababab\",\"ab\")) # 4, 0\nprint(occurance_substring(\"ababababab\",\"ba\")) # 2, 1\nprint(occurance_substring(\"ababababab\",\"bab\")) # 1, 2\nprint(occurance_substring(\"ababababab\",\"baba\")) # 0, -1",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return text.index(pattern), text.count(pattern)\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n\nprint(occurance_substring(\"abracadabra\", \"abr\"))\nprint(occurance_substring(\"abracadabra\", \"dab\"))\nprint(occurance_substring(\"abracadabra\", \"acad\"))\nprint(occurance_substring(\"abracadabra\", \"bra\"))\nprint(occurance_substring(\"abracadabra\", \"Abr\"))\nprint(occurance_substring(\"abracadabra\", \"cad\"))\nprint(occurance_substring(\"abracadabra\", \"rac\"))\nprint(occurance_substring(\"abracadabra\", \"racad\"))\nprint(occurance_substring(\"abracadabra\", \"abracadabra\"))\nprint(occurance_substring(\"abracadabra\", \"AbRaCaDaBrA\"))\nprint(occurance_substring(\"abracadabra\", \"ba\"))\nprint(occurance_substring(\"abracadabra\", \"abracadabr\"))\nprint(occurance_substring(\"abracadabra\", \"racadabra\"))\nprint(occurance_substring(\"abracadabra\", \"abracadabraa\"))\nprint(occurance_substring(\"abracadabra\", \"Abracadabra\"))\nprint(occurance_substring(\"abracadabra\", \"Abracadabr\"))\nprint(occurance_substring(\"abracadabra\", \"racadabr\"))\nprint(occurance_substring(\"abracadabra\", \"abracadabraaa\"))\nprint(occurance_substring(\"abracadabra\", \"Abracadabraa\"))\nprint(occurance_substring(\"abracadabra\", \"Abracadabraaa\"))\nprint(occurance_substring(\"abracadabra\", \"abracadabraaaa\"))\nprint(occurance_substring(\"abracadabra\", \"Abracadabraaaa\"))\nprint(occurance_substring(\"abracadabra\", \"Abracad",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    return None\n\nprint(occurance_substring(\"abracadabra\", \"abr\"))\nprint(occurance_substring(\"abracadabra\", \"dab\"))\nprint(occurance_substring(\"abracadabra\", \"acad\"))\nprint(occurance_substring(\"abracadabra\", \"bra\"))\nprint(occurance_substring(\"abracadabra\", \"Abr\"))\nprint(occurance_substring(\"abracadabra\", \"ABR\"))\nprint(occurance_substring(\"abracadabra\", \"zzz\"))",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    else:\n        return None",
    "    if pattern in text:\n        return (pattern, text.index(pattern))\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    else:\n        return None",
    "    if pattern in text:\n        return (pattern, text.index(pattern))\n    return None\n\nprint(occurance_substring('abcdec', 'cde'))\nprint(occurance_substring('abcdec', 'abc'))\nprint(occurance_substring('abcdec', 'cdf'))",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n\nprint(occurance_substring(\"abcdabc\", \"ab\"))\nprint(occurance_substring(\"abcdabc\", \"bc\"))\nprint(occurance_substring(\"abcdabc\", \"cd\"))\nprint(occurance_substring(\"abcdabc\", \"de\"))",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    else:\n        return None\n\nprint(occurance_substring(\"abracadabra\", \"abr\"))\nprint(occurance_substring(\"abracadabra\", \"dab\"))\nprint(occurance_substring(\"abracadabra\", \"acad\"))\nprint(occurance_substring(\"abracadabra\", \"bra\"))\nprint(occurance_substring(\"abracadabra\", \"cad\"))\nprint(occurance_substring(\"abracadabra\", \"rac\"))\nprint(occurance_substring(\"abracadabra\", \"racad\"))\nprint(occurance_substring(\"abracadabra\", \"abracadabra\"))\nprint(occurance_substring(\"abracadabra\", \"Abracadabra\"))\nprint(occurance_substring(\"abracadabra\", \"simsalabim\"))",
    "    if pattern in text:\n        return text.index(pattern), text.count(pattern)\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n\nprint(occurance_substring('abcdefgabcdefg', 'abc'))\nprint(occurance_substring('abcdefgabcdefg', 'abcd'))\nprint(occurance_substring('abcdefgabcdefg', 'ab'))\nprint(occurance_substring('abcdefgabcdefg', 'abcdeg'))",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n\nprint(occurance_substring(\"abracadabra\", \"abr\"))\nprint(occurance_substring(\"abracadabra\", \"dab\"))\nprint(occurance_substring(\"abracadabra\", \"acad\"))\nprint(occurance_substring(\"abracadabra\", \"bra\"))\nprint(occurance_substring(\"abracadabra\", \"Abr\"))\nprint(occurance_substring(\"abracadabra\", \"ABR\"))\nprint(occurance_substring(\"abracadabra\", \" \"))\nprint(occurance_substring(\"abracadabra\", \"x\"))",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n\nprint(occurance_substring(\"hello world\", \"o\"))\nprint(occurance_substring(\"hello world\", \"z\"))",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n\nprint(occurance_substring(\"hello world\", \"o\"))\nprint(occurance_substring(\"hello world\", \"z\"))\nprint(occurance_substring(\"hello world\", \"l\"))",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n\nprint(occurance_substring(\"abracadabra\", \"abr\"))\nprint(occurance_substring(\"abracadabra\", \"dab\"))\nprint(occurance_substring(\"abracadabra\", \"acad\"))\nprint(occurance_substring(\"abracadabra\", \"bra\"))\nprint(occurance_substring(\"abracadabra\", \"dabr\"))\nprint(occurance_substring(\"abracadabra\", \"Abr\"))\nprint(occurance_substring(\"abracadabra\", \"ABR\"))\nprint(occurance_substring(\"abracadabra\", \"zzz\"))",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n\nprint(occurance_substring(\"Python is an awesome language to program in!\", \"o\"))\nprint(occurance_substring(\"We have nothing in common!\", \"really?\"))\nprint(occurance_substring(\"This is a test, test, test, test!\", \"test\"))",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n\nprint(occurance_substring(\"abracadabra\", \"abr\"))\nprint(occurance_substring(\"abracadabra\", \"dab\"))\nprint(occurance_substring(\"abracadabra\", \"acad\"))\nprint(occurance_substring(\"abracadabra\", \"bra\"))\nprint(occurance_substring(\"abracadabra\", \"cad\"))\nprint(occurance_substring(\"abracadabra\", \"rac\"))\nprint(occurance_substring(\"abracadabra\", \"racad\"))\nprint(occurance_substring(\"abracadabra\", \"abracadabra\"))\nprint(occurance_substring(\"abracadabra\", \"Abracadabra\"))\nprint(occurance_substring(\"abracadabra\", \"ABRACADABRA\"))",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n\nprint(occurance_substring(\"This is a test string\", \"is\"))\nprint(occurance_substring(\"babababa\", \"baba\"))\nprint(occurance_substring(\"Python is great\", \"Java\"))",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    return None",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    else:\n        return None\n\nprint(occurance_substring(\"abcdabc\", \"ab\"))\nprint(occurance_substring(\"abcdabc\", \"bc\"))\nprint(occurance_substring(\"abcdabc\", \"cd\"))\nprint(occurance_substring(\"abcdabc\", \"de\"))",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n\nprint(occurance_substring(\"abracadabra\", \"abr\"))\nprint(occurance_substring(\"abracadabra\", \"dab\"))\nprint(occurance_substring(\"abracadabra\", \"acad\"))\nprint(occurance_substring(\"abracadabra\", \"bra\"))\nprint(occurance_substring(\"abracadabra\", \"cad\"))\nprint(occurance_substring(\"abracadabra\", \"rac\"))\nprint(occurance_substring(\"abracadabra\", \"racad\"))\nprint(occurance_substring(\"abracadabra\", \"abracadabra\"))\nprint(occurance_substring(\"abracadabra\", \"Abracadabra\"))\nprint(occurance_substring(\"abracadabra\", \"ABRACADABRA\"))",
    "    if pattern in text:\n        return (pattern, text.index(pattern))\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n\nprint(occurance_substring(\"abracadabra\", \"abr\"))\nprint(occurance_substring(\"abracadabra\", \"dab\"))\nprint(occurance_substring(\"abracadabra\", \"ac\"))\nprint(occurance_substring(\"abracadabra\", \"ad\"))\nprint(occurance_substring(\"abracadabra\", \"abra\"))\nprint(occurance_substring(\"abracadabra\", \"bra\"))\nprint(occurance_substring(\"abracadabra\", \"racad\"))\nprint(occurance_substring(\"abracadabra\", \"dabr\"))\nprint(occurance_substring(\"abracadabra\", \"abracadabra\"))\nprint(occurance_substring(\"abracadabra\", \"Abracadabra\"))\nprint(occurance_substring(\"abracadabra\", \"silly\"))",
    "    if pattern in text:\n        return text.find(pattern), text.count(pattern)\n    return None\n\n",
    "    if pattern in text:\n        return (pattern, text.index(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n\nprint(occurance_substring(\"abcdabc\", \"ab\"))\nprint(occurance_substring(\"abcdabc\", \"bc\"))\nprint(occurance_substring(\"abcdabc\", \"cd\"))\nprint(occurance_substring(\"abcdabc\", \"de\"))",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if not text or not pattern:\n        return None\n    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n\nprint(occurance_substring(\"abcdabc\", \"ab\"))\nprint(occurance_substring(\"abcdabc\", \"bc\"))\nprint(occurance_substring(\"abcdabc\", \"cd\"))\nprint(occurance_substring(\"abcdabc\", \"de\"))\nprint(occurance_substring(\"abcdabc\", \"ef\"))",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None",
    "    if pattern in text:\n        return (pattern, text.index(pattern))\n    return None\n\nprint(occurance_substring(\"abcd\", \"bc\"))\nprint(occurance_substring(\"abcd\", \"ef\"))",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    return None\n\nprint(occurance_substring(\"abracadabra\", \"abr\"))\nprint(occurance_substring(\"abracadabra\", \"dab\"))\nprint(occurance_substring(\"abracadabra\", \"acad\"))\nprint(occurance_substring(\"abracadabra\", \"bra\"))\nprint(occurance_substring(\"abracadabra\", \"Abr\"))\nprint(occurance_substring(\"abracadabra\", \"ABR\"))\nprint(occurance_substring(\"abracadabra\", \"AbRa\"))\nprint(occurance_substring(\"abracadabra\", \"1234\"))",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    return None\n\nprint(occurance_substring(\"hello world\", \"o\"))\nprint(occurance_substring(\"hello world\", \"z\"))\nprint(occurance_substring(\"hello world\", \"l\"))",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n\nprint(occurance_substring(\"abcdabc\", \"ab\"))\nprint(occurance_substring(\"abcdabc\", \"bc\"))\nprint(occurance_substring(\"abcdabc\", \"cd\"))\nprint(occurance_substring(\"abcdabc\", \"de\"))",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n\nprint(occurance_substring('abcdec', 'cde'))\nprint(occurance_substring('abcdec', 'abc'))\nprint(occurance_substring('abcdec', 'xyz'))",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n\nprint(occurance_substring('abcdec', 'cde'))\nprint(occurance_substring('abcdec', 'abc'))\nprint(occurance_substring('abcdec', 'abcd'))\nprint(occurance_substring('abcdec', 'bcd'))\nprint(occurance_substring('abcdec', 'ab'))\nprint(occurance_substring('abcdec', 'cd'))\nprint(occurance_substring('abcdec', 'e'))\nprint(occurance_substring('abcdec', 'f'))",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n\n",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    return None\n\nprint(occurance_substring(\"abcdabc\", \"ab\"))\nprint(occurance_substring(\"abcdabc\", \"bc\"))\nprint(occurance_substring(\"abcdabc\", \"cd\"))\nprint(occurance_substring(\"abcdabc\", \"de\"))",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern not in text:\n        return None\n    else:\n        return (text.count(pattern), text.find(pattern))\n\nprint(occurance_substring(\"hello world\", \"o\"))\nprint(occurance_substring(\"hello world\", \"z\"))",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n\nprint(occurance_substring(\"abcdabc\", \"ab\"))\nprint(occurance_substring(\"abcdabc\", \"bc\"))\nprint(occurance_substring(\"abcdabc\", \"cd\"))\nprint(occurance_substring(\"abcdabc\", \"de\"))\nprint(occurance_substring(\"abcdabc\", \"ef\"))",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n\nprint(occurance_substring(\"abcdabc\", \"ab\"))\nprint(occurance_substring(\"abcdabc\", \"bc\"))\nprint(occurance_substring(\"abcdabc\", \"cd\"))\nprint(occurance_substring(\"abcdabc\", \"de\"))\nprint(occurance_substring(\"abcdabc\", \"abcd\"))\nprint(occurance_substring(\"abcdabc\", \"abcda\"))\nprint(occurance_substring(\"abcdabc\", \"abc\"))\nprint(occurance_substring(\"abcdabc\", \"bcd\"))\nprint(occurance_substring(\"abcdabc\", \"cdab\"))",
    "    if pattern in text:\n        return text.count(pattern), text.index(pattern)\n    return None\n",
    "    if pattern in text:\n        return text.find(pattern), text.count(pattern)\n    else:\n        return None\n",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    return None",
    "    if pattern in text:\n        return text.index(pattern), text.count(pattern)\n    else:\n        return None",
    "    if not text or not pattern:\n        return None\n    if pattern not in text:\n        return None\n    return text.count(pattern), text.find(pattern)",
    "    if pattern not in text:\n        return None\n    else:\n        return text.count(pattern), text.index(pattern)\n",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n\nprint(occurance_substring(\"hello world\", \"o\"))\nprint(occurance_substring(\"hello world\", \"z\"))\nprint(occurance_substring(\"hello world\", \"l\"))",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    else:\n        return None\n\nprint(occurance_substring(\"The quick brown fox jumps over the lazy dog.\", \"fox\"))\nprint(occurance_substring(\"The quick brown fox jumps over the lazy dog.\", \"cat\"))",
    "    if pattern not in text:\n        return None\n    else:\n        return (text.count(pattern), text.find(pattern))\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n\nprint(occurance_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\"))\nprint(occurance_substring(\"The quick brown fox jumps over the lazy dog\", \"cat\"))",
    "    if pattern not in text:\n        return None\n    else:\n        return (text.count(pattern), text.find(pattern))\n\nprint(occurance_substring(\"hello\", \"ll\"))\nprint(occurance_substring(\"hello\", \"lll\"))\nprint(occurance_substring(\"hello\", \"l\"))",
    "    if pattern in text:\n        return text.count(pattern), text.index(pattern)\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return text.count(pattern), text.index(pattern)\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n\nprint(occurance_substring(\"abracadabra\", \"abr\"))\nprint(occurance_substring(\"abracadabra\", \"dab\"))\nprint(occurance_substring(\"abracadabra\", \"acad\"))\nprint(occurance_substring(\"abracadabra\", \"bra\"))\nprint(occurance_substring(\"abracadabra\", \"Abr\"))\nprint(occurance_substring(\"abracadabra\", \"ABR\"))\nprint(occurance_substring(\"abracadabra\", \" \"))\nprint(occurance_substring(\"abracadabra\", \"x\"))",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n\nprint(occurance_substring(\"abcdabc\", \"ab\"))\nprint(occurance_substring(\"abcdabc\", \"bc\"))\nprint(occurance_substring(\"abcdabc\", \"cd\"))\nprint(occurance_substring(\"abcdabc\", \"de\"))\n",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (pattern, text.index(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n",
    "    if pattern not in text:\n        return None\n    else:\n        return text.count(pattern), text.find(pattern)\n\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n\nprint(occurance_substring(\"hello world\", \"o\"))\nprint(occurance_substring(\"hello world\", \"z\"))",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n\nprint(occurance_substring(\"This is a test string\", \"is\"))\nprint(occurance_substring(\"babababa\", \"baba\"))\nprint(occurance_substring(\"Python is great\", \"Java\"))",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n\nprint(occurance_substring(\"abracadabra\", \"abr\"))\nprint(occurance_substring(\"abracadabra\", \"dab\"))\nprint(occurance_substring(\"abracadabra\", \"acad\"))\nprint(occurance_substring(\"abracadabra\", \"bra\"))\nprint(occurance_substring(\"abracadabra\", \"cad\"))\nprint(occurance_substring(\"abracadabra\", \"abc\"))\nprint(occurance_substring(\"abracadabra\", \"xyz\"))",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    else:\n        return None\n\nprint(occurance_substring(\"abcdabc\", \"ab\"))\nprint(occurance_substring(\"abcdabc\", \"bc\"))\nprint(occurance_substring(\"abcdabc\", \"cd\"))\nprint(occurance_substring(\"abcdabc\", \"de\"))",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n\nprint(occurance_substring(\"abracadabra\", \"abr\"))\nprint(occurance_substring(\"abracadabra\", \"dab\"))\nprint(occurance_substring(\"abracadabra\", \"acad\"))\nprint(occurance_substring(\"abracadabra\", \"bra\"))\nprint(occurance_substring(\"abracadabra\", \"Abr\"))\nprint(occurance_substring(\"abracadabra\", \"ABR\"))\nprint(occurance_substring(\"abracadabra\", \"AbRa\"))\nprint(occurance_substring(\"abracadabra\", \"ABRA\"))\nprint(occurance_substring(\"abracadabra\", \"abracadabra\"))\nprint(occurance_substring(\"abracadabra\", \"AbRaCaDaBrA\"))\nprint(occurance_substring(\"abracadabra\", \"rab\"))\nprint(occurance_substring(\"abracadabra\", \"bcad\"))\nprint(occurance_substring(\"abracadabra\", \"abracad\"))\nprint(occurance_substring(\"abracadabra\", \"abracadabr\"))\nprint(occurance_substring(\"abracadabra\", \"rabrabracad\"))\nprint(occurance_substring(\"abracadabra\", \"abacad\"))\nprint(occurance_substring(\"abracadabra\", \"abracadabraabracadabra\"))\nprint(occurance_substring(\"abracadabra\", \"rabrabracadabracadabra\"))\nprint(occurance_substring(\"abracadabra\", \"abacadabrabracadabra\"))\nprint(occurance_substring(\"abracadabra\", \"rabrabracadabacadabrabracadabra\"))\nprint(occurance_substring(\"abracadabra\", \"abracadabrabracadabrabracadabra\"))\nprint(occurance_substring(\"abracadabra\", \"rabrabracadabracadabrabracadabrab",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n\n",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n\nprint(occurance_substring(\"abracadabra\", \"abr\"))\nprint(occurance_substring(\"abracadabra\", \"dab\"))\nprint(occurance_substring(\"abracadabra\", \"acad\"))\nprint(occurance_substring(\"abracadabra\", \"bra\"))\nprint(occurance_substring(\"abracadabra\", \"Abr\"))\nprint(occurance_substring(\"abracadabra\", \"ABR\"))\nprint(occurance_substring(\"abracadabra\", \" \"))\nprint(occurance_substring(\"abracadabra\", \"x\"))",
    "    if pattern in text:\n        return text.index(pattern), text.count(pattern)\n    return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n\nprint(occurance_substring(\"abracadabra\", \"abr\"))\nprint(occurance_substring(\"abracadabra\", \"dab\"))\nprint(occurance_substring(\"abracadabra\", \"acad\"))\nprint(occurance_substring(\"abracadabra\", \"bra\"))\nprint(occurance_substring(\"abracadabra\", \"cad\"))\nprint(occurance_substring(\"abracadabra\", \"rac\"))\nprint(occurance_substring(\"abracadabra\", \"ada\"))\nprint(occurance_substring(\"abracadabra\", \"abra\"))\nprint(occurance_substring(\"abracadabra\", \"racad\"))\nprint(occurance_substring(\"abracadabra\", \"dabr\"))\nprint(occurance_substring(\"abracadabra\", \"abracadabra\"))\nprint(occurance_substring(\"abracadabra\", \"Abracadabra\"))\nprint(occurance_substring(\"abracadabra\", \"simsalabim\"))\n",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n\nprint(occurance_substring(\"abracadabra\", \"abr\"))\nprint(occurance_substring(\"abracadabra\", \"dab\"))\nprint(occurance_substring(\"abracadabra\", \"acad\"))\nprint(occurance_substring(\"abracadabra\", \"bra\"))\nprint(occurance_substring(\"abracadabra\", \"cad\"))\nprint(occurance_substring(\"abracadabra\", \"rac\"))\nprint(occurance_substring(\"abracadabra\", \"ada\"))\nprint(occurance_substring(\"abracadabra\", \"abra\"))\nprint(occurance_substring(\"abracadabra\", \"racad\"))\nprint(occurance_substring(\"abracadabra\", \"dabra\"))\nprint(occurance_substring(\"abracadabra\", \"abracadabra\"))\nprint(occurance_substring(\"abracadabra\", \"Abracadabra\"))\nprint(occurance_substring(\"abracadabra\", \"AbRaCaDaBrA\"))\nprint(occurance_substring(\"abracadabra\", \"bracadabra\"))\nprint(occurance_substring(\"abracadabra\", \"abracadabr\"))\nprint(occurance_substring(\"abracadabra\", \"abracadab\"))\nprint(occurance_substring(\"abracadabra\", \"abracada\"))\nprint(occurance_substring(\"abracadabra\", \"abracad\"))\nprint(occurance_substring(\"abracadabra\", \"abraca\"))\nprint(occurance_substring(\"abracadabra\", \"abrac\"))\nprint(occurance_substring(\"abracadabra\", \"abra\"))\nprint(occurance_substring(\"abracadabra\", \"abr\"))\nprint(occurance_substring(\"abracadabra\", \"ab\"))\nprint(occurance_substring(\"abracadabra\", \"a\"))\nprint(occurance_",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern not in text:\n        return None\n    else:\n        return (text.count(pattern), text.find(pattern))\n\nprint(occurance_substring(\"hello\", \"ll\"))",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n\nprint(occurance_substring('abcdec', 'cde'))\nprint(occurance_substring('abcdec', 'abc'))\nprint(occurance_substring('abcdec', 'abcd'))\nprint(occurance_substring('abcdec', 'cdef'))",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n\nprint(occurance_substring(\"This is a test string\", \"is\"))\nprint(occurance_substring(\"babababa\", \"baba\"))\nprint(occurance_substring(\"Python is great\", \"Java\"))",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n\n",
    "    if pattern in text:\n        return text.index(pattern), text.count(pattern)\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if not text or not pattern:\n        return None\n    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None\n\nprint(occurance_substring(\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
    "    if pattern not in text:\n        return None\n    else:\n        return text.count(pattern), text.find(pattern)\n\nprint(occurance_substring(\"hello world\", \"o\"))\nprint(occurance_substring(\"hello world\", \"z\"))\nprint(occurance_substring(\"hello world\", \"l\"))\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None\n\nprint(occurance_substring(\"abracadabra\", \"abr\"))\nprint(occurance_substring(\"abracadabra\", \"dab\"))\nprint(occurance_substring(\"abracadabra\", \"acb\"))",
    "    if pattern in text:\n        return (text.count(pattern), text.index(pattern))\n    else:\n        return None\n\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern), text.rfind(pattern))\n    else:\n        return None\n",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    return None",
    "    if pattern in text:\n        return (text.count(pattern), text.find(pattern))\n    else:\n        return None",
    "    if pattern in text:\n        return text.count(pattern), text.find(pattern)\n    return None\n\n",
    "    if pattern in text:\n        return (text.index(pattern), text.index(pattern) + len(pattern))\n    return None\n"
  ]
}