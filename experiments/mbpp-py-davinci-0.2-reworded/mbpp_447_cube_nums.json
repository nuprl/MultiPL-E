{
  "name": "mbpp_447_cube_nums",
  "language": "py",
  "prompt": "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to find cubes of individual elements in a list.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_447_cube_nums.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n    assert candidate([10, 20, 30]) == [1000, 8000, 27000]\n    assert candidate([12, 15]) == [1728, 3375]\n\ndef test_check():\n    check(cube_nums)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return [num ** 3 for num in nums]",
    "    return [num ** 3 for num in nums]\n\nprint(cube_nums([1, 2, 3, 4, 5]))",
    "    return [num ** 3 for num in nums]",
    "    return [num ** 3 for num in nums]\n\nprint(cube_nums([1, 2, 3, 4, 5]))",
    "    return [num ** 3 for num in nums]\n\nprint(cube_nums([1, 2, 3, 4, 5]))",
    "    return [num**3 for num in nums]\n\nprint(cube_nums([1, 2, 3, 4, 5]))",
    "    return [num ** 3 for num in nums]",
    "    return [num ** 3 for num in nums]\n\nprint(cube_nums([1, 2, 3, 4, 5]))",
    "    return [num**3 for num in nums]\n\nprint(cube_nums([1, 2, 3, 4, 5]))",
    "    return [num ** 3 for num in nums]\n\nprint(cube_nums([1, 2, 3, 4, 5]))\n",
    "    return [num**3 for num in nums]\n\nprint(cube_nums([1, 2, 3, 4, 5]))",
    "    return [num ** 3 for num in nums]",
    "    return [num ** 3 for num in nums]",
    "    return [num ** 3 for num in nums]\n\nprint(cube_nums([1, 2, 3, 4, 5]))",
    "    return [num ** 3 for num in nums]\n",
    "    return [num ** 3 for num in nums]\n\nprint(cube_nums([1,2,3,4,5]))",
    "    return [num**3 for num in nums]\n\nprint(cube_nums([1, 2, 3]))",
    "    return [num ** 3 for num in nums]\n\nprint(cube_nums([1, 2, 3, 4, 5]))",
    "    return [num ** 3 for num in nums]\n",
    "    return [num ** 3 for num in nums]\n"
  ]
}