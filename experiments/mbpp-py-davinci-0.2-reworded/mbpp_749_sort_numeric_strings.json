{
  "name": "mbpp_749_sort_numeric_strings",
  "language": "py",
  "prompt": "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    \"\"\"\n\tWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_749_sort_numeric_strings.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate(['4', '12', '45', '7', '0', '100', '200', '-12', '-500']) == [-500, -12, 0, 4, 7, 12, 45, 100, 200]\n    assert candidate(['2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2']) == [1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\n    assert candidate(['1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11']) == [1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]\n\ndef test_check():\n    check(sort_numeric_strings)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return sorted(nums_str, key=lambda x: int(x))\n",
    "    return sorted(nums_str, key=int)",
    "    return sorted(nums_str, key=lambda x: int(x))\n\nprint(sort_numeric_strings(['2', '1', '3']))",
    "    return sorted(nums_str, key=lambda x: int(x))\n",
    "    return sorted(nums_str, key=lambda x: int(x))\n\n",
    "    return sorted(nums_str, key=int)",
    "    return sorted(nums_str, key=int)\n",
    "    return sorted(nums_str, key=int)\n",
    "    return sorted(nums_str, key=lambda x: int(x))\n\n",
    "    return sorted(nums_str, key=lambda x: int(x))\n",
    "    return sorted(nums_str, key=int)\n\n",
    "    return sorted(nums_str, key=lambda x: int(x))\n",
    "    return sorted(nums_str, key=lambda x: int(x))\n",
    "    return sorted(nums_str, key=lambda x: int(x))\n",
    "    return sorted(nums_str, key=lambda x: int(x))\n\n",
    "    return sorted(nums_str, key=lambda x: int(x))\n",
    "    return sorted(nums_str, key=int)\n",
    "    return sorted(nums_str, key=lambda x: int(x))\n",
    "    return sorted(nums_str, key=int)",
    "    return sorted(nums_str, key=lambda x: int(x))\n"
  ]
}