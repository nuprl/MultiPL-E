{
  "name": "mbpp_65_recursive_list_sum",
  "language": "py",
  "prompt": "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List[int]]]) -> int:\n    \"\"\"\n\tWrite a function to flatten a list and sum all of its elements.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_65_recursive_list_sum.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate([1, 2, [3, 4], [5, 6]]) == 21\n    assert candidate([7, 10, [15, 14], [19, 41]]) == 106\n    assert candidate([10, 20, [30, 40], [50, 60]]) == 210\n\ndef test_check():\n    check(recursive_list_sum)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    sum = 0\n    for item in data_list:\n        if type(item) == list:\n            sum += recursive_list_sum(item)\n        else:\n            sum += item\n    return sum\n",
    "    if not data_list:\n        return 0\n    if isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    return data_list[0] + recursive_list_sum(data_list[1:])\n",
    "    if not data_list:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
    "    if not data_list:\n        return 0\n    if isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    return data_list[0] + recursive_list_sum(data_list[1:])\n\nprint(recursive_list_sum([1, 2, 3, 4, 5]))\nprint(recursive_list_sum([1, 2, [3, 4], 5]))\nprint(recursive_list_sum([1, 2, [3, [4, 5], 6], 7]))\nprint(recursive_list_sum([1, 2, [3, [4, [5, 6], 7], 8], 9]))",
    "    if not data_list:\n        return 0\n    if isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    return data_list[0] + recursive_list_sum(data_list[1:])\n",
    "    if not data_list:\n        return 0\n    if isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0] + data_list[1:])\n    return data_list[0] + recursive_list_sum(data_list[1:])\n\nprint(recursive_list_sum([1, 2, 3, 4, 5]))\nprint(recursive_list_sum([1, [2, [3, 4], [[5]]]]))\nprint(recursive_list_sum([[[[[1], 2]], 3], 4, [5]]))",
    "    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
    "    if not data_list:\n        return 0\n    if isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    return data_list[0] + recursive_list_sum(data_list[1:])\n",
    "    if not data_list:\n        return 0\n    if isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0] + data_list[1:])\n    return data_list[0] + recursive_list_sum(data_list[1:])\n",
    "    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
    "    if not data_list:\n        return 0\n    if isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    return data_list[0] + recursive_list_sum(data_list[1:])\n",
    "    return sum(data_list) if isinstance(data_list, list) else data_list\n",
    "    if len(data_list) == 0:\n        return 0\n    if isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n\nprint(recursive_list_sum([1, 2, 3, [4, 5]]))\nprint(recursive_list_sum([1, 2, 3, [4, [5, 6]]]))\nprint(recursive_list_sum([1, 2, 3, [4, [5, [6, 7]]]]))",
    "    if not data_list:\n        return 0\n    if isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0] + data_list[1:])\n    return data_list[0] + recursive_list_sum(data_list[1:])\n",
    "    if not data_list:\n        return 0\n    if isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    return data_list[0] + recursive_list_sum(data_list[1:])\n",
    "    if not data_list:\n        return 0\n    if isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    return data_list[0] + recursive_list_sum(data_list[1:])\n",
    "    if not data_list:\n        return 0\n    if isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    return data_list[0] + recursive_list_sum(data_list[1:])\n",
    "    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
    "    if len(data_list) == 0:\n        return 0\n    if isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    return data_list[0] + recursive_list_sum(data_list[1:])\n",
    "    if not data_list:\n        return 0\n    if isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    return data_list[0] + recursive_list_sum(data_list[1:])\n\n"
  ]
}