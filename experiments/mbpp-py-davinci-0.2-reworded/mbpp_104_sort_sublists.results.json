{
  "name": "mbpp_104_sort_sublists",
  "language": "py",
  "prompt": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_104_sort_sublists.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "results": [
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    for i in input_list:\n        i.sort()\n    return input_list\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpspo3ap35.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmpspo3ap35.py\", line 17, in test_check\n    check(sort_sublists)\n  File \"/tmp/tmpspo3ap35.py\", line 12, in check\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp66pbv9qv.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp66pbv9qv.py\", line 17, in test_check\n    check(sort_sublists)\n  File \"/tmp/tmp66pbv9qv.py\", line 12, in check\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\nprint(sort_sublists([[\"a\", \"c\", \"b\"], [\"d\", \"e\"], [\"f\", \"g\", \"h\"]]))\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "[['a', 'b', 'c'], ['d', 'e'], ['f', 'g', 'h']]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e'], ['f', 'g', 'h']]))\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "[['a', 'b', 'c'], ['d', 'e'], ['f', 'g', 'h']]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(i) for i in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp66pbv9qv.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp66pbv9qv.py\", line 17, in test_check\n    check(sort_sublists)\n  File \"/tmp/tmp66pbv9qv.py\", line 12, in check\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\nprint(sort_sublists([['A', 'C', 'B'], ['D', 'E'], ['F', 'G', 'H']]))\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1666124239,
      "stdout": "[['A', 'B', 'C'], ['D', 'E'], ['F', 'G', 'H']]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp66pbv9qv.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp66pbv9qv.py\", line 17, in test_check\n    check(sort_sublists)\n  File \"/tmp/tmp66pbv9qv.py\", line 12, in check\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(l) for l in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e'], ['f', 'g', 'h']]))\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "[['a', 'b', 'c'], ['d', 'e'], ['f', 'g', 'h']]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp66pbv9qv.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp66pbv9qv.py\", line 17, in test_check\n    check(sort_sublists)\n  File \"/tmp/tmp66pbv9qv.py\", line 12, in check\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp66pbv9qv.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp66pbv9qv.py\", line 17, in test_check\n    check(sort_sublists)\n  File \"/tmp/tmp66pbv9qv.py\", line 12, in check\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e'], ['f', 'g', 'h']]))\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "[['a', 'b', 'c'], ['d', 'e'], ['f', 'g', 'h']]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp66pbv9qv.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp66pbv9qv.py\", line 17, in test_check\n    check(sort_sublists)\n  File \"/tmp/tmp66pbv9qv.py\", line 12, in check\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp66pbv9qv.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp66pbv9qv.py\", line 17, in test_check\n    check(sort_sublists)\n  File \"/tmp/tmp66pbv9qv.py\", line 12, in check\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e'], ['f', 'g', 'h']]))\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "[['a', 'b', 'c'], ['d', 'e'], ['f', 'g', 'h']]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp66pbv9qv.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp66pbv9qv.py\", line 17, in test_check\n    check(sort_sublists)\n  File \"/tmp/tmp66pbv9qv.py\", line 12, in check\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp66pbv9qv.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp66pbv9qv.py\", line 17, in test_check\n    check(sort_sublists)\n  File \"/tmp/tmp66pbv9qv.py\", line 12, in check\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp66pbv9qv.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp66pbv9qv.py\", line 17, in test_check\n    check(sort_sublists)\n  File \"/tmp/tmp66pbv9qv.py\", line 12, in check\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e'], ['f', 'g', 'h']]))\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "[['a', 'b', 'c'], ['d', 'e'], ['f', 'g', 'h']]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e'], ['f', 'g', 'h']]))\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "[['a', 'b', 'c'], ['d', 'e'], ['f', 'g', 'h']]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\nprint(sort_sublists([['apple', 'orange', 'banana'], ['carrots', 'peas', 'cucumbers'], ['cookies', 'cake', 'muffins', 'pie']]))\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1666124239,
      "stdout": "[['apple', 'banana', 'orange'], ['carrots', 'cucumbers', 'peas'], ['cake', 'cookies', 'muffins', 'pie']]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp66pbv9qv.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp66pbv9qv.py\", line 17, in test_check\n    check(sort_sublists)\n  File \"/tmp/tmp66pbv9qv.py\", line 12, in check\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp66pbv9qv.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp66pbv9qv.py\", line 17, in test_check\n    check(sort_sublists)\n  File \"/tmp/tmp66pbv9qv.py\", line 12, in check\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e'], ['f', 'g', 'h']]))\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "[['a', 'b', 'c'], ['d', 'e'], ['f', 'g', 'h']]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp66pbv9qv.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp66pbv9qv.py\", line 17, in test_check\n    check(sort_sublists)\n  File \"/tmp/tmp66pbv9qv.py\", line 12, in check\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e'], ['f', 'g', 'h'], ['d', 'e'], ['i', 'j', 'k', 'l'], ['m', 'n'], ['o']]))\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1666124239,
      "stdout": "[['a', 'b', 'c'], ['d', 'e'], ['f', 'g', 'h'], ['d', 'e'], ['i', 'j', 'k', 'l'], ['m', 'n'], ['o']]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp66pbv9qv.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp66pbv9qv.py\", line 17, in test_check\n    check(sort_sublists)\n  File \"/tmp/tmp66pbv9qv.py\", line 12, in check\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp66pbv9qv.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp66pbv9qv.py\", line 17, in test_check\n    check(sort_sublists)\n  File \"/tmp/tmp66pbv9qv.py\", line 12, in check\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(i) for i in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp66pbv9qv.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp66pbv9qv.py\", line 17, in test_check\n    check(sort_sublists)\n  File \"/tmp/tmp66pbv9qv.py\", line 12, in check\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp66pbv9qv.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp66pbv9qv.py\", line 17, in test_check\n    check(sort_sublists)\n  File \"/tmp/tmp66pbv9qv.py\", line 12, in check\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp66pbv9qv.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp66pbv9qv.py\", line 17, in test_check\n    check(sort_sublists)\n  File \"/tmp/tmp66pbv9qv.py\", line 12, in check\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e'], ['f', 'g', 'h']]))\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "[['a', 'b', 'c'], ['d', 'e'], ['f', 'g', 'h']]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\nprint(sort_sublists([['a', 'b', 'c'], ['d', 'e'], ['f', 'g', 'h']]))\nprint(sort_sublists([['g', 'h', 'i'], ['a', 'c', 'b', 'e', 'd'], ['g', 'e', 'f']]))\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1666124239,
      "stdout": "[['a', 'b', 'c'], ['d', 'e'], ['f', 'g', 'h']]\n[['g', 'h', 'i'], ['a', 'b', 'c', 'd', 'e'], ['e', 'f', 'g']]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp66pbv9qv.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp66pbv9qv.py\", line 17, in test_check\n    check(sort_sublists)\n  File \"/tmp/tmp66pbv9qv.py\", line 12, in check\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp66pbv9qv.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp66pbv9qv.py\", line 17, in test_check\n    check(sort_sublists)\n  File \"/tmp/tmp66pbv9qv.py\", line 12, in check\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Tuple, List\n\ndef sort_sublists(input_list: Tuple[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\ndef check(candidate):\n    assert candidate((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange'])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown'])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze'])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n",
      "timestamp": 1665517167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}