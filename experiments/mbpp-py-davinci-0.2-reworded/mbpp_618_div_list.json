{
  "name": "mbpp_618_div_list",
  "language": "py",
  "prompt": "from typing import List\n\ndef div_list(nums1: List[int], nums2: List[int]) -> List[float]:\n    \"\"\"\n\tWrite a function to divide two lists element wise.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_618_div_list.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate([4, 5, 6], [1, 2, 3]) == [4.0, 2.5, 2.0]\n    assert candidate([3, 2], [1, 4]) == [3.0, 0.5]\n    assert candidate([90, 120], [50, 70]) == [1.8, 1.7142857142857142]\n\ndef test_check():\n    check(div_list)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return [x / y for x, y in zip(nums1, nums2)]\n\nprint(div_list([1, 2, 3], [4, 5, 6]))",
    "    return [x / y for x, y in zip(nums1, nums2)]\n\nprint(div_list([1, 2, 3], [4, 5, 6]))",
    "    return [x / y for x, y in zip(nums1, nums2)]\n",
    "    return [x / y for x, y in zip(nums1, nums2)]\n",
    "    return [x/y for x, y in zip(nums1, nums2)]\n",
    "    return [x / y for x, y in zip(nums1, nums2)]\n\nprint(div_list([1, 2, 3], [4, 5, 6]))",
    "    return [n1 / n2 for n1, n2 in zip(nums1, nums2)]\n",
    "    return [nums1[i] / nums2[i] for i in range(len(nums1))]\n\nprint(div_list([1,2,3,4], [2,3,4,5]))",
    "    return [x / y for x, y in zip(nums1, nums2)]",
    "    return [x / y for x, y in zip(nums1, nums2)]\n\nprint(div_list([1, 2, 3], [4, 5, 6]))",
    "    return [nums1[i] / nums2[i] for i in range(len(nums1))]\n\nprint(div_list([1, 2, 3], [4, 5, 6]))",
    "    return [n1 / n2 for n1, n2 in zip(nums1, nums2)]\n",
    "    return [n1 / n2 for n1, n2 in zip(nums1, nums2)]\n",
    "    return [nums1[i] / nums2[i] for i in range(len(nums1))]\n",
    "    return [nums1[i] / nums2[i] for i in range(len(nums1))]",
    "    return [i / j for i, j in zip(nums1, nums2)]\n\n",
    "    return [x/y for x, y in zip(nums1, nums2)]\n",
    "    return [nums1[i] / nums2[i] for i in range(len(nums1))]",
    "    return [n1 / n2 for n1, n2 in zip(nums1, nums2)]\n",
    "    return [nums1[i] / nums2[i] for i in range(len(nums1))]\n"
  ]
}