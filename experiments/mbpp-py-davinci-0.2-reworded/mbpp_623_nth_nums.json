{
  "name": "mbpp_623_nth_nums",
  "language": "py",
  "prompt": "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    \"\"\"\n\tWrite a function to compute the n-th power of each number in a list.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_623_nth_nums.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    assert candidate([10, 20, 30], 3) == [1000, 8000, 27000]\n    assert candidate([12, 15], 5) == [248832, 759375]\n\ndef test_check():\n    check(nth_nums)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n\nprint(nth_nums([1, 2, 3, 4, 5], 2))\nprint(nth_nums([1, 2, 3, 4, 5], 3))\nprint(nth_nums([1, 2, 3, 4, 5], 4))",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num**n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num**n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num**n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num**n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n\nprint(nth_nums([1, 2, 3, 4, 5], 2))\nprint(nth_nums([1, 2, 3, 4, 5], 3))\nprint(nth_nums([1, 2, 3, 4, 5], 4))\nprint(nth_nums([1, 2, 3, 4, 5], 5))\n",
    "    return [num ** n for num in nums]\n",
    "    return [num**n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num**n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n\nprint(nth_nums([1, 2, 3, 4, 5], 2))\nprint(nth_nums([1, 2, 3, 4, 5], 3))\nprint(nth_nums([1, 2, 3, 4, 5], 4))\nprint(nth_nums([1, 2, 3, 4, 5], 5))",
    "    return [num ** n for num in nums]\n",
    "    return [num**n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n\nprint(nth_nums([1, 2, 3, 4], 2))\nprint(nth_nums([1, 2, 3, 4], 3))\nprint(nth_nums([1, 2, 3, 4], 4))\nprint(nth_nums([1, 2, 3, 4], 5))\nprint(nth_nums([1, 2, 3, 4], 6))\nprint(nth_nums([1, 2, 3, 4], 7))\nprint(nth_nums([1, 2, 3, 4], 8))\nprint(nth_nums([1, 2, 3, 4], 9))\nprint(nth_nums([1, 2, 3, 4], 10))",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num**n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n\nprint(nth_nums([1, 2, 3, 4, 5], 2))",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n\nprint(nth_nums([1, 2, 3, 4, 5], 2))\nprint(nth_nums([1, 2, 3, 4, 5], 3))\nprint(nth_nums([1, 2, 3, 4, 5], 4))\nprint(nth_nums([1, 2, 3, 4, 5], 5))",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num**n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num**n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]",
    "    return [num ** n for num in nums]\n",
    "    return [num**n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num**n for num in nums]\n",
    "    return [num ** n for num in nums]\n\nprint(nth_nums([1, 2, 3, 4, 5], 2))\nprint(nth_nums([1, 2, 3, 4, 5], 3))\nprint(nth_nums([1, 2, 3, 4, 5], 4))\nprint(nth_nums([1, 2, 3, 4, 5], 5))",
    "    return [num**n for num in nums]\n",
    "    return [num**n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num**n for num in nums]",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n\nprint(nth_nums([1, 2, 3, 4, 5], 2))",
    "    return [num**n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [i**n for i in nums]\n",
    "    return [num**n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num**n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n\nprint(nth_nums([1, 2, 3, 4, 5], 2))\nprint(nth_nums([1, 2, 3, 4, 5], 3))",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num**n for num in nums]\n",
    "    return [num ** n for num in nums]",
    "    return [num ** n for num in nums]\n",
    "    return [num**n for num in nums]",
    "    return [num**n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n\nprint(nth_nums([1, 2, 3, 4, 5], 2))\nprint(nth_nums([1, 2, 3, 4, 5], 3))",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n\nprint(nth_nums([1, 2, 3, 4], 2))\nprint(nth_nums([1, 2, 3, 4], 3))",
    "    return [num ** n for num in nums]\n\nprint(nth_nums([1, 2, 3, 4, 5], 2))\nprint(nth_nums([1, 2, 3, 4, 5], 3))\nprint(nth_nums([1, 2, 3, 4, 5], 4))\nprint(nth_nums([1, 2, 3, 4, 5], 5))",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num**n for num in nums]\n",
    "    return [num**n for num in nums]\n",
    "    return [num ** n for num in nums]\n\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n\nprint(nth_nums([1, 2, 3, 4, 5], 2))",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num**n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num**n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n",
    "    return [num ** n for num in nums]\n\nprint(nth_nums([1, 2, 3, 4, 5], 2))",
    "    return [num ** n for num in nums]\n",
    "    return [num**n for num in nums]\n",
    "    return [num**n for num in nums]\n"
  ]
}