{
  "name": "mbpp_130_max_occurrences",
  "language": "py",
  "prompt": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    if not nums:\n        return 0\n    nums.sort()\n    max_count = 0\n    curr_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            curr_count += 1\n        else:\n            max_count = max(max_count, curr_count)\n            curr_count = 1\n    return max(max_count, curr_count)\n",
    "    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    curr_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            curr_count += 1\n        else:\n            curr_count = 1\n        max_count = max(max_count, curr_count)\n    return max_count\n",
    "    return max(nums, key=nums.count)\n",
    "    nums.sort()\n    max_count = 0\n    max_num = 0\n    count = 1\n    for i in range(len(nums) - 1):\n        if nums[i] == nums[i + 1]:\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n                max_num = nums[i]\n            count = 1\n    if count > max_count:\n        max_count = count\n        max_num = nums[i]\n    return max_num\n\n",
    "    if not nums:\n        return 0\n\n    max_occur = 0\n    num_occur = {}\n    for num in nums:\n        if num not in num_occur:\n            num_occur[num] = 1\n        else:\n            num_occur[num] += 1\n\n        max_occur = max(max_occur, num_occur[num])\n\n    return max_occur\n",
    "    if not nums:\n        return 0\n    if len(nums) == 1:\n        return 1\n    nums.sort()\n    count = 1\n    max_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            count = 1\n        if count > max_count:\n            max_count = count\n    return max_count\n",
    "    nums.sort()\n    max_num = nums[0]\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n                max_num = nums[i - 1]\n            count = 1\n    if count > max_count:\n        max_count = count\n        max_num = nums[-1]\n    return max_num\n",
    "    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 1\n    return max(max_count, count)\n",
    "    if not nums:\n        return 0\n    d = {}\n    for num in nums:\n        if num in d:\n            d[num] += 1\n        else:\n            d[num] = 1\n    max_val = max(d.values())\n    return max_val\n",
    "    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    curr_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            curr_count += 1\n        else:\n            max_count = max(max_count, curr_count)\n            curr_count = 1\n    return max(max_count, curr_count)\n",
    "    return max(nums, key=nums.count)\n\nprint(max_occurrences([1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1",
    "    if not nums:\n        return 0\n\n    max_count = 0\n    max_num = None\n    num_count = {}\n\n    for num in nums:\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n\n        if num_count[num] > max_count:\n            max_count = num_count[num]\n            max_num = num\n\n    return max_num",
    "    if not nums:\n        return 0\n    nums.sort()\n    max_freq = 1\n    curr_freq = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            curr_freq += 1\n        else:\n            curr_freq = 1\n        max_freq = max(max_freq, curr_freq)\n    return max_freq\n",
    "    nums.sort()\n    max_count = 0\n    max_num = 0\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n                max_num = nums[i-1]\n            count = 1\n    if count > max_count:\n        max_count = count\n        max_num = nums[-1]\n    return max_num\n\n",
    "    if not nums:\n        return 0\n    count = {}\n    for num in nums:\n        if num not in count:\n            count[num] = 1\n        else:\n            count[num] += 1\n    return max(count.values())",
    "    if not nums:\n        return 0\n    nums.sort()\n    max_freq = 1\n    curr_freq = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            curr_freq += 1\n        else:\n            max_freq = max(max_freq, curr_freq)\n            curr_freq = 1\n    return max(max_freq, curr_freq)",
    "    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    curr_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            curr_count += 1\n        else:\n            curr_count = 1\n        max_count = max(max_count, curr_count)\n    return max_count\n\n",
    "    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            count = 1\n        max_count = max(max_count, count)\n    return max_count\n",
    "    # TODO: Implement this function\n    pass\n",
    "    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 1\n    return max(max_count, count)\n"
  ]
}