{
  "name": "mbpp_465_drop_empty",
  "language": "py",
  "prompt": "from typing import Dict, Optional\n\ndef drop_empty(dict1: Dict[str, Optional[str]]) -> Dict[str, str]:\n    \"\"\"\n\tWrite a function to drop empty items from a given dictionary.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_465_drop_empty.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate({ 'c1': 'Red', 'c2': 'Green', 'c3': None }) == { 'c1': 'Red', 'c2': 'Green' }\n    assert candidate({ 'c1': 'Red', 'c2': None, 'c3': None }) == { 'c1': 'Red' }\n    assert candidate({ 'c1': None, 'c2': 'Green', 'c3': None }) == { 'c2': 'Green' }\n\ndef test_check():\n    check(drop_empty)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}\n\n",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}\n\n",
    "    return {k: v for k, v in dict1.items() if v is not None}\n\n",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {key: value for key, value in dict1.items() if value}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v is not None}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {key: value for key, value in dict1.items() if value}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v is not None}",
    "    return {k: v for k, v in dict1.items() if v is not None}\n\n",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}\n",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v is not None}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v is not None}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}\n",
    "    return {k: v for k, v in dict1.items() if v is not None}\n\n",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {key: value for key, value in dict1.items() if value}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    dict2 = {}\n    for key, value in dict1.items():\n        if value:\n            dict2[key] = value\n    return dict2\n\nprint(drop_empty({'a': '', 'b': '', 'c': 'd'}))",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v is not None}\n\n",
    "    return {k: v for k, v in dict1.items() if v}\n",
    "    return {k: v for k, v in dict1.items() if v}",
    "    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict\n\n",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    dict2 = {}\n    for key, value in dict1.items():\n        if value:\n            dict2[key] = value\n    return dict2\n\nprint(drop_empty({'name': '', 'age': None, 'sex': 'male'}))",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}\n",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v is not None}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v is not None}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {key: value for key, value in dict1.items() if value is not None}\n\n\nprint(drop_empty({\"a\": 1, \"b\": None, \"c\": \"\", \"d\": \" \"}))",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}\n\nprint(drop_empty({'a': '', 'b': '', 'c': 'd'}))",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}\n\nprint(drop_empty({'a': '', 'b': '', 'c': 'd'}))",
    "    dict2 = {}\n    for key, value in dict1.items():\n        if value:\n            dict2[key] = value\n    return dict2\n\nprint(drop_empty({'a': '', 'b': '', 'c': 'd'}))",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}\n\nprint(drop_empty({'a': '', 'b': '', 'c': 'd'}))",
    "    return {k: v for k, v in dict1.items() if v is not None}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v is not None}\n\n",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}\n\nprint(drop_empty({'a': '', 'b': '', 'c': 'd'}))\nprint(drop_empty({'a': '', 'b': '', 'c': ''}))\nprint(drop_empty({'a': '', 'b': '', 'c': 'd', 'e': 'f'}))",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}\n\n",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}\n\nprint(drop_empty({'a': '', 'b': '', 'c': 'd'}))",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict\n\n",
    "    return {k: v for k, v in dict1.items() if v is not None}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v is not None}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}\n\nprint(drop_empty({'a': '', 'b': '', 'c': 'd'}))",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}\n\n",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}\n",
    "    return {k: v for k, v in dict1.items() if v is not None}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}\n",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v is not None}\n\nprint(drop_empty({'a': None, 'b': '', 'c': 'd'}))",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v is not None}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v is not None}\n\n",
    "    dict2 = dict()\n    for key, value in dict1.items():\n        if value:\n            dict2[key] = value\n    return dict2",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v is not None}\n\n",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {key: value for key, value in dict1.items() if value}",
    "    return {k: v for k, v in dict1.items() if v is not None}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    dict2 = {}\n    for key, value in dict1.items():\n        if value:\n            dict2[key] = value\n    return dict2",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}\n\n",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {key: value for key, value in dict1.items() if value is not None}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v is not None}\n\n",
    "    return {key: value for key, value in dict1.items() if value is not None}\n",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}\n\nprint(drop_empty({'a': '', 'b': '', 'c': 'd'}))",
    "    return {k: v for k, v in dict1.items() if v}\n\n",
    "    return {k: v for k, v in dict1.items() if v}"
  ]
}