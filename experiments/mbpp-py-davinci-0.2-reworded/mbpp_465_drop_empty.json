{
  "name": "mbpp_465_drop_empty",
  "language": "py",
  "prompt": "from typing import Dict, Optional\n\ndef drop_empty(dict1: Dict[str, Optional[str]]) -> Dict[str, str]:\n    \"\"\"\n\tWrite a function to drop empty items from a given dictionary.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_465_drop_empty.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate({ 'c1': 'Red', 'c2': 'Green', 'c3': None }) == { 'c1': 'Red', 'c2': 'Green' }\n    assert candidate({ 'c1': 'Red', 'c2': None, 'c3': None }) == { 'c1': 'Red' }\n    assert candidate({ 'c1': None, 'c2': 'Green', 'c3': None }) == { 'c2': 'Green' }\n\ndef test_check():\n    check(drop_empty)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}\n\n",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}",
    "    return {k: v for k, v in dict1.items() if v}"
  ]
}