{
  "name": "mbpp_297_flatten_list",
  "language": "py",
  "prompt": "from typing import Any, List\n\ndef flatten_list(list1: Any) -> List[int]:\n    \"\"\"\n\tWrite a function to flatten a given nested list structure.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_297_flatten_list.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n    assert candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\n    assert candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]\n\ndef test_check():\n    check(flatten_list)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    if not isinstance(list1, list):\n        return [list1]\n    else:\n        return sum([flatten_list(x) for x in list1], [])",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n",
    "    if not isinstance(list1, list):\n        return [list1]\n    else:\n        return sum(map(flatten_list, list1), [])\n",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n",
    "    if type(list1) != list:\n        return [list1]\n    else:\n        return sum([flatten_list(x) for x in list1], [])\n",
    "    if not isinstance(list1, list):\n        return [list1]\n    else:\n        return sum([flatten_list(i) for i in list1], [])\n\n",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]",
    "    if isinstance(list1, int):\n        return [list1]\n    else:\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n\nprint(flatten_list([[1, 1], 2, [1, 1]]))\nprint(flatten_list([1, [4, [6]]]))\nprint(flatten_list([[1, [1, 1]], 2, [1, 1]]))\nprint(flatten_list([[[3]], [4, [5, 6]], 7]))\nprint(flatten_list([[[3]], [4, [5, 6]], 7, [8, 9]]))\nprint(flatten_list([[1, [1, 1]], 2, [[3, 4], 5], [[[6]]], 7, 8, []]))\nprint(flatten_list([[1, [1, 1]], 2, [[3, 4], 5], [[[6]]], 7, 8, [9]]))\nprint(flatten_list([1, [2, 3], 4, [5, 6, [7, 8, [9, [10, 11], 12]]]]))\nprint(flatten_list([1, [2, 3], 4, [5, 6, [7, 8, [9, [10, 11], 12]]], 13]))\nprint(flatten_list([1, [2, 3], 4, [5, 6, [7, 8, [9, [10, 11], 12]]], 13, 14]))\nprint(flatten_list([1, [2, 3], 4, [5, 6, [7, 8, [9, [10, 11], 12]]], 13, 14, 15]))\nprint(flatten_list([1, [2, 3], 4, [5, 6, [7, 8, [9, [10, 11], 12]]], 13, 14, 15, 16]))\nprint(flatten_list([1, [2, 3], 4, [5, 6, [7, 8, [9,",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n\nprint(flatten_list([[1,2,3],[4,5,6],[7,8,9]]))",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n",
    "    if not isinstance(list1, list):\n        return [list1]\n    else:\n        return sum([flatten_list(x) for x in list1], [])",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n",
    "    if not isinstance(list1, list):\n        return [list1]\n    else:\n        return sum([flatten_list(x) for x in list1], [])\n\nprint(flatten_list([1, [2, 3], [4, [5, 6], 7], 8]))",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n\nprint(flatten_list([[1, 2, [3, 4]], [5, 6], 7]))",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n",
    "    if isinstance(list1, list):\n        return sum(map(flatten_list, list1), [])\n    return [list1]\n",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n\nprint(flatten_list([[1,2,[3]],4]))\nprint(flatten_list([[1,2,[3]],4,[5,6]]))\nprint(flatten_list([1,2,3,4,5,6]))",
    "    if type(list1) is not list:\n        return [list1]\n    else:\n        return sum([flatten_list(x) for x in list1], [])\n\nprint(flatten_list([1, [2, 3], [4, [5, 6], 7], 8]))",
    "    if isinstance(list1, list):\n        return sum(map(flatten_list, list1), [])\n    else:\n        return [list1]",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n\nprint(flatten_list([1, 2, 3, [4, 5], 6, [7, 8, [9, 10]]]))",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n\nprint(flatten_list([1, [2, 3], [4, [5, 6]]]))",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n",
    "    if not isinstance(list1, list):\n        return [list1]\n    else:\n        return sum([flatten_list(x) for x in list1], [])\n\nprint(flatten_list([1, 2, [3, 4, [5, 6], 7], 8, [9]]))",
    "    if type(list1) != list:\n        return [list1]\n    else:\n        return sum(map(flatten_list, list1), [])\n\nprint(flatten_list([1, [2, 3], [4, [5, 6]]]))",
    "    return [item for sublist in list1 for item in sublist]\n",
    "    if isinstance(list1, list):\n        return sum(map(flatten_list, list1), [])\n    else:\n        return [list1]\n\nprint(flatten_list([1, [2, 3], [4, [5, 6]]]))",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n\nprint(flatten_list([[1, 1], 2, [1, 1]]))\nprint(flatten_list([1, [2, 2, 2], 4, 5, [1, 4, [4, 6, [6], 6, 6, 6], 7, 8, [1, 3, 4]]]))\nprint(flatten_list([[[3]], [4, [5, 6]], 7, [[8, 9], 10]]))\nprint(flatten_list([[[3]], [4, [5, 6]], 7, [[8, 9], 10]]))\nprint(flatten_list([[[3]], [4, [5, 6]], 7, [[8, 9], 10]]))\nprint(flatten_list([[[3]], [4, [5, 6]], 7, [[8, 9], 10]]))\nprint(flatten_list([[[3]], [4, [5, 6]], 7, [[8, 9], 10]]))\nprint(flatten_list([[[3]], [4, [5, 6]], 7, [[8, 9], 10]]))\nprint(flatten_list([[[3]], [4, [5, 6]], 7, [[8, 9], 10]]))\nprint(flatten_list([[[3]], [4, [5, 6]], 7, [[8, 9], 10]]))\nprint(flatten_list([[[3]], [4, [5, 6]], 7, [[8, 9], 10]]))\nprint(flatten_list([[[3]], [4, [5, 6]], 7, [[8, 9], 10]]))\nprint(flatten_list([[[3]], [4, [5, 6]], 7, [[8, 9], 10]]))\nprint(flatten_list([[[3]], [4, [5, 6]], 7, [[",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n\nprint(flatten_list([1, [2, 3], [4, [5, 6]]]))",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n",
    "    if not isinstance(list1, list):\n        return [list1]\n    else:\n        return sum([flatten_list(i) for i in list1], [])\n",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n\n",
    "    if not isinstance(list1, list):\n        return [list1]\n    else:\n        return [item for sublist in list1 for item in flatten_list(sublist)]\n",
    "    if not isinstance(list1, list):\n        return [list1]\n    else:\n        return sum([flatten_list(x) for x in list1], [])\n",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n",
    "    if not isinstance(list1, list):\n        return [list1]\n    else:\n        return sum([flatten_list(item) for item in list1], [])\n",
    "    if not isinstance(list1, list):\n        return [list1]\n    return sum([flatten_list(x) for x in list1], [])",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n\nprint(flatten_list([[1, 2, [3, 4]], [5, 6], 7]))",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n\nprint(flatten_list([1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]))",
    "    if isinstance(list1, list):\n        return sum(map(flatten_list, list1), [])\n    else:\n        return [list1]\n",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n\nprint(flatten_list([[1,2,3],[4,5,6],[7,8,9]]))",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n\n",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n\n",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n",
    "    if type(list1) != list:\n        return [list1]\n    else:\n        return sum(map(flatten_list, list1), [])\n",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n\nprint(flatten_list([[1, 1], 2, [1, 1]]))\nprint(flatten_list([[[3, 4, 5], [[9, 9, 9]], [1, 2, 3]]]))\nprint(flatten_list([[[3, 4, 5], [[9, 9, 9]], [1, 2, 3]]]))\nprint(flatten_list([[[3, 4, 5], [[9, 9, 9]], [1, 2, 3]]]))\nprint(flatten_list([[[3, 4, 5], [[9, 9, 9]], [1, 2, 3]]]))\nprint(flatten_list([[[3, 4, 5], [[9, 9, 9]], [1, 2, 3]]]))\nprint(flatten_list([[[3, 4, 5], [[9, 9, 9]], [1, 2, 3]]]))\nprint(flatten_list([[[3, 4, 5], [[9, 9, 9]], [1, 2, 3]]]))\nprint(flatten_list([[[3, 4, 5], [[9, 9, 9]], [1, 2, 3]]]))\nprint(flatten_list([[[3, 4, 5], [[9, 9, 9]], [1, 2, 3]]]))\nprint(flatten_list([[[3, 4, 5], [[9, 9, 9]], [1, 2, 3]]]))\nprint(flatten_list([[[3, 4, 5], [[9, 9, 9]], [1, 2, 3]]]))\nprint(flatten_list([[[3, 4, 5], [[9, 9, 9]], [1, 2, 3]]]))\nprint(flatten_list([[[3, 4, 5], [[9, 9, 9]], [1, 2, 3]]]))\nprint",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n\nprint(flatten_list([1, 2, [3, 4], [5, 6]]))\nprint(flatten_list([1, [2, [3, 4], [[5], 6]]]))",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n\nprint(flatten_list([[1, 2, [3, 4]], [5, 6], 7]))",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n\nprint(flatten_list([[1,2,[3]],4]))",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]",
    "    if type(list1) is not list:\n        return [list1]\n    else:\n        return sum([flatten_list(i) for i in list1], [])",
    "    if isinstance(list1, list):\n        return sum(map(flatten_list, list1), [])\n    else:\n        return [list1]",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n\nprint(flatten_list([1, [2, [3, [4, 5], 6], 7], 8]))",
    "    if isinstance(list1, list):\n        return sum(map(flatten_list, list1), [])\n    else:\n        return [list1]\n\nprint(flatten_list([1, 2, 3, [4, 5, 6, [7, 8, 9]]]))",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n\nprint(flatten_list([[1, 2], [3, 4], [5, 6]]))",
    "    if not isinstance(list1, list):\n        return [list1]\n    else:\n        return sum([flatten_list(x) for x in list1], [])\n\nprint(flatten_list([1, [2, 3], 4, [5, 6, [7, 8, [9, 10]]]]))",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n\nprint(flatten_list([1, [2, 3], 4, [5, 6, [7, 8, [9, 10]]]]))",
    "    if isinstance(list1, list):\n        return sum(map(flatten_list, list1), [])\n    else:\n        return [list1]\n",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n\nprint(flatten_list([[1, 1], 2, [[3, 4], 5], [[[]]], [[[6]]], 7, 8, []]))\nprint(flatten_list([[1, 1], 2, [[3, 4], 5], [[[]]], [[[6]]], 7, 8, [9, [10, 11], 12]]))",
    "    if not isinstance(list1, list):\n        return [list1]\n    else:\n        return sum([flatten_list(x) for x in list1], [])\n\nprint(flatten_list([1, 2, 3, [4, 5, 6], [7, 8, 9]]))",
    "    if not isinstance(list1, list):\n        return [list1]\n    return sum([flatten_list(x) for x in list1], [])\n\nprint(flatten_list([1, 2, [3, 4], [5, 6], 7, [8, 9]]))",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n\nprint(flatten_list([[1, 2, [3, 4]], [5, 6], 7]))",
    "    if not isinstance(list1, list):\n        return [list1]\n    else:\n        return sum([flatten_list(x) for x in list1], [])\n\n",
    "    return [item for sublist in list1 for item in sublist]\n",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n\nprint(flatten_list([[1, 1], 2, [1, 1]]))\nprint(flatten_list([1, [2, 2, 2], 4]))\nprint(flatten_list([[[2]], [4, [5, 6, [6], 6, 6, 6], 7]]))\nprint(flatten_list([-1, [-2, [-3, [-4, [-5, [-6, [-7, [-8, [-9, [-10]]]]]]]]]]))\nprint(flatten_list([1, [], [3, [[4], [5, 6, [7, 8, [9]]]]]]))\nprint(flatten_list
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n\nprint(flatten_list([[1, 1], 2, [1, 1]]))\nprint(flatten_list([[[[1, 1], 2], 1], 1]))\nprint(flatten_list([[[[[[[[[[1]]]]]]]]]))\nprint(flatten_list([10, [4, [[3, 2], 1]], [3, 2], 1]))\nprint(flatten_list([1, [2, [[3]], [4, [[5]]], 6, 7], 8]))\nprint(flatten_list([1, [2, [[3]], [4, [[5]]], 6, 7], 8]))\nprint(flatten_list([1, [2, [[3]], [4, [[5]]], 6, 7], 8]))\nprint(flatten_list([1, [2, [[3]], [4, [[5]]], 6, 7], 8]))\nprint(flatten_list([1, [2, [[3]], [4, [[5]]], 6, 7], 8]))\nprint(flatten_list([1, [2, [[3]], [4, [[5]]], 6, 7], 8]))\nprint(flatten_list([1, [2, [[3]], [4, [[5]]], 6, 7], 8]))\nprint(flatten_list([1, [2, [[3]], [4, [[5]]], 6, 7], 8]))\nprint(flatten_list([1, [2, [[3]], [4, [[5]]], 6, 7], 8]))\nprint(flatten_list([1, [2, [[3]], [4, [[5]]], 6, 7], 8]))\nprint(flatten_list([1, [2, [[3]], [4, [[5]]], 6, 7], 8]))\nprint(flatten_list",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n",
    "    if isinstance(list1, list):\n        return sum(map(flatten_list, list1), [])\n    else:\n        return [list1]\n",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n\n",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n",
    "    if isinstance(list1, list):\n        return sum(map(flatten_list, list1), [])\n    else:\n        return [list1]\n\nprint(flatten_list([1, [2, 3], 4, [5, 6, [7, 8, [9, 10]]]]))",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n\n",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n",
    "    if isinstance(list1, list):\n        return sum(map(flatten_list, list1), [])\n    else:\n        return [list1]\n",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n\nprint(flatten_list([[1, 2, [3, 4]], [5, 6], 7]))",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n",
    "    if isinstance(list1, list):\n        return sum(map(flatten_list, list1), [])\n    else:\n        return [list1]\n\nprint(flatten_list([1, 2, [3, 4, [5, 6], 7], 8]))",
    "    if not isinstance(list1, list):\n        return [list1]\n    else:\n        return sum([flatten_list(x) for x in list1], [])\n\nprint(flatten_list([1, [2, 3], [4, [5, 6]]]))",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n\nprint(flatten_list([1, [2, 3], [4, [5, 6]]]))",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n",
    "    if not isinstance(list1, list):\n        return [list1]\n    else:\n        return sum(map(flatten_list, list1), [])\n",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])",
    "    if isinstance(list1, list):\n        return sum(map(flatten_list, list1), [])\n    return [list1]\n\nprint(flatten_list([1, [2, 3], [4, [5, 6]]]))",
    "    if not isinstance(list1, list):\n        return [list1]\n    else:\n        return sum([flatten_list(x) for x in list1], [])",
    "    if not isinstance(list1, list):\n        return [list1]\n    else:\n        return sum([flatten_list(x) for x in list1], [])",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n\nprint(flatten_list([[1, 1], 2, [1, 1]]))\nprint(flatten_list([[[3, 4, 5], [[9, 9, 9]], [[[]]], [[[1]]]]]))\nprint(flatten_list([[1, [2, 2, 2], 4], [5, 6], 7, [[8, 9], [10, [11, 12]]]]))\nprint(flatten_list([[1, [2, 2, 2], 4], [5, 6], 7, [[8, 9], [10, [11, 12]]]]))\nprint(flatten_list([[1, [2, 2, 2], 4], [5, 6], 7, [[8, 9], [10, [11, 12]]]]))",
    "    if not isinstance(list1, list):\n        return [list1]\n    else:\n        return sum([flatten_list(x) for x in list1], [])\n\nprint(flatten_list([1, [2, 3], [4, [5, 6]]]))",
    "    if not isinstance(list1, list):\n        return [list1]\n    else:\n        return sum([flatten_list(x) for x in list1], [])",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n\nprint(flatten_list([[1, 2, [3, 4]], [5, 6], 7]))",
    "    if not isinstance(list1, list):\n        return [list1]\n    else:\n        return sum([flatten_list(x) for x in list1], [])\n\n",
    "    if isinstance(list1, list):\n        return sum(map(flatten_list, list1), [])\n    return [list1]\n",
    "    if not isinstance(list1, list):\n        return [list1]\n    else:\n        return sum([flatten_list(x) for x in list1], [])\n\nprint(flatten_list([1, [2, 3], 4, [5, 6, [7, 8, [9, 10]]]]))",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n\nprint(flatten_list([1, [2, 3], [4, [5, 6]]]))",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n",
    "    if isinstance(list1, list):\n        return sum(map(flatten_list, list1), [])\n    else:\n        return [list1]\n\nprint(flatten_list([1, 2, [3, 4, [5, 6], 7], 8, [9, 10]]))",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n\nprint(flatten_list([[1, 2, [3, 4]], [5, 6], 7]))",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n\nprint(flatten_list([[1, 2, [3, 4]], [5, 6], 7]))",
    "    if not isinstance(list1, list):\n        return [list1]\n    else:\n        return sum([flatten_list(x) for x in list1], [])\n\nprint(flatten_list([1, 2, 3, [4, 5], 6, [7, 8, [9, 10]]]))",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n\nprint(flatten_list([1, [2, 3], 4, [5, 6, [7, 8, 9]]]))",
    "    if not isinstance(list1, list):\n        return [list1]\n    else:\n        return sum([flatten_list(x) for x in list1], [])",
    "    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result\n\nprint(flatten_list([1, [2, 3], [4, [5, 6, [7, 8]]]]))",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n\nprint(flatten_list([[1,2,[3]],4]))",
    "    if type(list1) is not list:\n        return [list1]\n    else:\n        return sum([flatten_list(x) for x in list1], [])",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n",
    "    if not isinstance(list1, list):\n        return [list1]\n    else:\n        return sum([flatten_list(x) for x in list1], [])",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n\nprint(flatten_list([[1, 1], 2, [1, 1]]))\nprint(flatten_list([1, [4, [6]]]))",
    "    if not isinstance(list1, list):\n        return [list1]\n    else:\n        return sum([flatten_list(x) for x in list1], [])\n\nprint(flatten_list([1, [2, 3], [4, [5, 6]]]))",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n\nprint(flatten_list([[1,2,[3]],4]))",
    "    if not isinstance(list1, list):\n        return [list1]\n    else:\n        return sum([flatten_list(x) for x in list1], [])\n",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n",
    "    if type(list1) is not list:\n        return [list1]\n    else:\n        return sum([flatten_list(x) for x in list1], [])\n",
    "    if isinstance(list1, list):\n        return sum(map(flatten_list, list1), [])\n    else:\n        return [list1]",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n",
    "    if type(list1) is not list:\n        return [list1]\n    else:\n        return sum([flatten_list(x) for x in list1], [])\n",
    "    if isinstance(list1, list):\n        return sum(map(flatten_list, list1), [])\n    else:\n        return [list1]\n",
    "    if not isinstance(list1, list):\n        return [list1]\n    else:\n        return sum([flatten_list(x) for x in list1], [])\n",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n",
    "    if not isinstance(list1, list):\n        return [list1]\n    else:\n        return sum([flatten_list(x) for x in list1], [])",
    "    if not isinstance(list1, list):\n        return [list1]\n    else:\n        return sum([flatten_list(x) for x in list1], [])\n",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n",
    "    if isinstance(list1, list):\n        return sum(map(flatten_list, list1), [])\n    else:\n        return [list1]\n\nprint(flatten_list([1, 2, 3, [4, 5], 6, [7, 8, 9]]))",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n",
    "    if not isinstance(list1, list):\n        return [list1]\n    else:\n        return sum([flatten_list(x) for x in list1], [])\n\nprint(flatten_list([1, [2, 3], [4, [5, 6]]]))",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n",
    "    if not isinstance(list1, list):\n        return [list1]\n    else:\n        return sum([flatten_list(x) for x in list1], [])\n",
    "    return [item for sublist in list1 for item in sublist]\n\nprint(flatten_list([[1, 2, [3, 4]], [5, 6], 7]))",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n",
    "    if isinstance(list1, list):\n        return sum(map(flatten_list, list1), [])\n    else:\n        return [list1]",
    "    if isinstance(list1, list):\n        return sum(map(flatten_list, list1), [])\n    else:\n        return [list1]\n\nprint(flatten_list([1, 2, [3, 4, [5, 6], 7], 8, [9]]))",
    "    if not isinstance(list1, list):\n        return [list1]\n    else:\n        return sum([flatten_list(x) for x in list1], [])\n",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n",
    "    if not isinstance(list1, list):\n        return [list1]\n    else:\n        return sum(map(flatten_list, list1), [])\n",
    "    if isinstance(list1, list):\n        return sum(map(flatten_list, list1), [])\n    else:\n        return [list1]\n\nprint(flatten_list([[1,2,[3]],4]))",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n",
    "    if not isinstance(list1, list):\n        return [list1]\n    else:\n        return sum([flatten_list(i) for i in list1], [])\n\nprint(flatten_list([1, [2, 3], [4, [5, 6]]]))",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n\nprint(flatten_list([1, [2, 3], 4, [5, 6, [7, 8, 9]]]))",
    "    if type(list1) != list:\n        return [list1]\n    else:\n        return sum([flatten_list(x) for x in list1], [])\n\nprint(flatten_list([1, [2, 3], [4, [5, 6]]]))",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n\nprint(flatten_list([1, [2, 3], 4, [5, 6, [7, 8, [9, 10]]]]))",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n\nprint(flatten_list([1, [2, 3], [4, [5, 6]]]))",
    "    if not isinstance(list1, list):\n        return [list1]\n    else:\n        return sum([flatten_list(x) for x in list1], [])\n",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    return [list1]\n\nprint(flatten_list([[1, 2, [3, 4]], [5, 6], 7]))",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n",
    "    if not isinstance(list1, list):\n        return [list1]\n    else:\n        return sum([flatten_list(x) for x in list1], [])\n",
    "    if not isinstance(list1, list):\n        return [list1]\n    else:\n        return sum([flatten_list(x) for x in list1], [])",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n\nprint(flatten_list([[1, 2, [3, 4]], [5, 6], 7]))",
    "    if not isinstance(list1, list):\n        return [list1]\n    else:\n        return sum([flatten_list(x) for x in list1], [])\n",
    "    if isinstance(list1, list):\n        return sum(map(flatten_list, list1), [])\n    else:\n        return [list1]\n",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n\nprint(flatten_list([[1, 2, [3, 4]], [5, 6], 7]))\nprint(flatten_list([1, 2, 3, 4, 5, 6, 7]))\nprint(flatten_list([1, 2, [3, 4], [5, 6], 7]))\nprint(flatten_list([1, 2, [3, 4], [5, 6], 7, [8, 9]]))\nprint(flatten_list([1, 2, [3, 4], [5, 6], 7, [8, 9], [10, 11]]))",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n\nprint(flatten_list([[1, 2, [3, 4]], [5, 6], 7]))",
    "    if type(list1) is not list:\n        return [list1]\n    else:\n        return sum([flatten_list(x) for x in list1], [])\n\n",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]\n",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n",
    "    result = []\n    for i in list1:\n        if isinstance(i, list):\n            result.extend(flatten_list(i))\n        else:\n            result.append(i)\n    return result\n",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n\nprint(flatten_list([[1, 2, [3, 4]], [5, 6], 7]))\nprint(flatten_list([[1, 2, [3, 4]], [5, 6], 7, [8, 9]]))\nprint(flatten_list([[1, 2, [3, 4]], [5, 6], 7, [8, 9], 10]))\nprint(flatten_list([[1, 2, [3, 4]], [5, 6], 7, [8, 9], 10, [11, 12]]))\nprint(flatten_list([[1, 2, [3, 4]], [5, 6], 7, [8, 9], 10, [11, 12], 13]))\nprint(flatten_list([[1, 2, [3, 4]], [5, 6], 7, [8, 9], 10, [11, 12], 13, [14, 15]]))\nprint(flatten_list([[1, 2, [3, 4]], [5, 6], 7, [8, 9], 10, [11, 12], 13, [14, 15], 16]))\nprint(flatten_list([[1, 2, [3, 4]], [5, 6], 7, [8, 9], 10, [11, 12], 13, [14, 15], 16, [17, 18]]))\nprint(flatten_list([[1, 2, [3, 4]], [5, 6], 7, [8, 9], 10, [11, 12], 13, [14, 15], 16, [17, 18], 19]))\nprint(flatten_list([[1, 2, [3, 4]], [5, 6], 7, [8, 9], 10, [11, 12], 13, [14, 15], 16, [17, 18], 19, [20, 21]]))\nprint(fl",
    "    if list1 == []:\n        return []\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n",
    "    if isinstance(list1, list):\n        return [a for i in list1 for a in flatten_list(i)]\n    else:\n        return [list1]",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n\nprint(flatten_list([[1, 1], 2, [1, 1]]))\nprint(flatten_list([[[3, 4, 5], [[9, 9, 9]], [1, 2, 3]]]))\nprint(flatten_list([[[3, 4, 5], [[9, 9, 9]], [1, 2, 3]]]))\nprint(flatten_list([[1, 2, 3], [4, 5], [6, 7, 8]]))\nprint(flatten_list([[1, [1, 1]], 2, [[3, 4], 5], [[[]]], [[[6]]], 7, 8, []]))\nprint(flatten_list([1, [2, 2, 2], 4]))\nprint(flatten_list([[[3, [4], 5], 9], [9, [7, 8]], [6]]))\nprint(flatten_list([[[3, [4], 5], 9], [9, [7, 8]], [6]]))\nprint(flatten_list([1, 2, 3]))\nprint(flatten_list([1, [2, 2, 2], 4]))\nprint(flatten_list([[[3, [4], 5], 9], [9, [7, 8]], [6]]))\nprint(flatten_list([[[3, [4], 5], 9], [9, [7, 8]], [6]]))\nprint(flatten_list([[[3, [4], 5], 9], [9, [7, 8]], [6]]))\nprint(flatten_list([[[3, [4], 5], 9], [9, [7, 8]], [6]]))\nprint(flatten_list([[[3, [4], 5], 9], [9, [7, 8]], [6]]))\nprint(flatten_list([[[3, [",
    "    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n\nprint(flatten_list([[1, 1], 2, [1, 1]]))\nprint(flatten_list([[[3, 4, 5], [[9, 9, 9]], [1, 2, 3]]]))\nprint(flatten_list([[[3, 4, 5], [[9, 9, 9]], [1, 2, 3]]]))\nprint(flatten_list([[3, 4, 5], [[9, 9, 9]], [1, 2, 3]]))\nprint(flatten_list([[[3, 4, 5], [[9, 9, 9]], [1, 2, 3]]]))\nprint(flatten_list([[[3, 4, 5], [[9, 9, 9]], [1, 2, 3]]]))\nprint(flatten_list([[[3, 4, 5], [[9, 9, 9]], [1, 2, 3]]]))\nprint(flatten_list([[[3, 4, 5], [[9, 9, 9]], [1, 2, 3]]]))\nprint(flatten_list([[[3, 4, 5], [[9, 9, 9]], [1, 2, 3]]]))\nprint(flatten_list([[[3, 4, 5], [[9, 9, 9]], [1, 2, 3]]]))\nprint(flatten_list([[[3, 4, 5], [[9, 9, 9]], [1, 2, 3]]]))\nprint(flatten_list([[[3, 4, 5], [[9, 9, 9]], [1, 2, 3]]]))\nprint(flatten_list([[[3, 4, 5], [[9, 9, 9]], [1, 2, 3]]]))\nprint(flatten_list([[[3, 4, 5], [[9, 9, 9]], [1, 2, 3]]]))\nprint("
  ]
}