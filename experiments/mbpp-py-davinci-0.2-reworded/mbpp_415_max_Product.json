{
  "name": "mbpp_415_max_Product",
  "language": "py",
  "prompt": "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a python function to find a pair with highest product from a given array of integers.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_415_max_Product.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 7, 0, 8, 4]) == (7, 8)\n    assert candidate([0, -1, -2, -4, 5, 0, -6]) == (-4, -6)\n    assert candidate([1, 2, 3]) == (2, 3)\n\ndef test_check():\n    check(max_Product)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n",
    "    if len(arr) < 2:\n        return None\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            max_product = max(max_product, arr[i]*arr[j])\n    return max_product\n",
    "    arr.sort()\n    return arr[-1]*arr[-2]\n\n",
    "    if len(arr) < 2:\n        return None\n\n    max_prod = arr[0] * arr[1]\n    max_i = 0\n    max_j = 1\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] > max_prod:\n                max_prod = arr[i] * arr[j]\n                max_i = i\n                max_j = j\n\n    return (max_i, max_j)\n",
    "    arr.sort()\n    return arr[-1] * arr[-2]\n",
    "    if len(arr) < 2:\n        return None\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            max_product = max(max_product, arr[i]*arr[j])\n    return max_product\n",
    "    arr.sort()\n    return arr[-1] * arr[-2]\n",
    "    if len(arr) < 2:\n        return None\n    max_product = arr[0] * arr[1]\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            max_product = max(max_product, arr[i] * arr[j])\n    return max_product\n",
    "    if len(arr) < 2:\n        return None\n    max_product = arr[0] * arr[1]\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            max_product = max(max_product, arr[i] * arr[j])\n    return max_product\n",
    "    max_product = arr[0] * arr[1]\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n    return max_product\n",
    "    if len(arr) < 2:\n        return None\n    max_prod = arr[0] * arr[1]\n    max_num = max(arr[0], arr[1])\n    min_num = min(arr[0], arr[1])\n    for i in range(2, len(arr)):\n        max_prod = max(max_prod, max_num * arr[i], min_num * arr[i])\n        max_num = max(max_num, arr[i], min_num * arr[i])\n        min_num = min(min_num, arr[i], max_num * arr[i])\n    return max_prod\n",
    "    arr.sort()\n    return arr[-1] * arr[-2]\n",
    "    arr.sort()\n    return arr[-1] * arr[-2]\n",
    "    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            max_product = max(max_product, arr[i]*arr[j])\n    return max_product\n",
    "    arr.sort()\n    return arr[-1] * arr[-2]\n",
    "    arr.sort()\n    return arr[-1] * arr[-2]\n",
    "    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n",
    "    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            max_product = max(max_product, arr[i] * arr[j])\n    return max_product\n",
    "    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n",
    "    arr.sort()\n    return arr[-1] * arr[-2]\n"
  ]
}