{
  "name": "mbpp_129_magic_square_test",
  "language": "py",
  "prompt": "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    \"\"\"\n\tWrite a function to calculate whether the matrix is a magic square.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]) == True\n    assert candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) == True\n    assert candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]) == False\n\ndef test_check():\n    check(magic_square_test)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    # check if matrix is square\n    if len(my_matrix) != len(my_matrix[0]):\n        return False\n\n    # check if all numbers are unique\n    if len(set(my_matrix[0])) != len(my_matrix[0]):\n        return False\n\n    # check if all numbers are in range\n    if max(my_matrix[0]) > len(my_matrix[0]):\n        return False\n\n    # check if all rows are equal\n    for row in my_matrix:\n        if row != my_matrix[0]:\n            return False\n\n    # check if all columns are equal\n    for i in range(len(my_matrix[0])):\n        column = []\n        for row in my_matrix:\n            column.append(row[i])\n        if column != my_matrix[0]:\n            return False\n\n    # check if diagonals are equal\n    diagonal1 = []\n    diagonal2 = []\n    for i in range(len(my_matrix[0])):\n        diagonal1.append(my_matrix[i][i])\n        diagonal2.append(my_matrix[i][len(my_matrix[0]) - 1 - i])\n    if diagonal1 != my_matrix[0] or diagonal2 != my_matrix[0]:\n        return False\n\n    return True\n",
    "    # check if matrix is square\n    if len(my_matrix) != len(my_matrix[0]):\n        return False\n    # check if matrix is magic square\n    # check if all rows and columns sum to the same value\n    # check if diagonals sum to the same value\n    # check if all numbers are unique\n    return True\n",
    "    # check if matrix is square\n    if len(my_matrix) != len(my_matrix[0]):\n        return False\n\n    # check if all numbers are unique\n    if len(set(my_matrix[0] + my_matrix[1] + my_matrix[2])) != 9:\n        return False\n\n    # check if all rows and columns add up to the same number\n    if sum(my_matrix[0]) != sum(my_matrix[1]) or sum(my_matrix[1]) != sum(my_matrix[2]):\n        return False\n    if sum([row[0] for row in my_matrix]) != sum([row[1] for row in my_matrix]) or sum([row[1] for row in my_matrix]) != sum([row[2] for row in my_matrix]):\n        return False\n\n    # check if diagonals add up to the same number\n    if my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] != my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0]:\n        return False\n\n    return True\n\nprint(magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\nprint(magic_square_test([[4, 9, 2], [3, 5, 7], [8, 1, 6]]))\nprint(magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]))\nprint(magic_square_test([[23, 28, 21], [22, 24, 26], [27, 20, 25]]))\nprint(magic_square_test([[16, 23, 17], [78, 32, 21], [17, 16, 15]]))",
    "    # TODO: Write your code here\n    pass\n",
    "    # check if matrix is square\n    if len(my_matrix) != len(my_matrix[0]):\n        return False\n    # check if matrix is magic square\n    # 1. check if all rows and columns sum to the same number\n    # 2. check if the diagonals sum to the same number\n    # 3. check if all numbers are unique\n    # 4. check if all numbers are positive\n    # 5. check if all numbers are integers\n    # 6. check if all numbers are less than the length of the matrix\n    # 7. check if all numbers are greater than 0\n    # 8. check if all numbers are less than the length of the matrix\n    # 9. check if all numbers are greater than 0\n    # 10. check if all numbers are less than the length of the matrix\n    # 11. check if all numbers are greater than 0\n    # 12. check if all numbers are less than the length of the matrix\n    # 13. check if all numbers are greater than 0\n    # 14. check if all numbers are less than the length of the matrix\n    # 15. check if all numbers are greater than 0\n    # 16. check if all numbers are less than the length of the matrix\n    # 17. check if all numbers are greater than 0\n    # 18. check if all numbers are less than the length of the matrix\n    # 19. check if all numbers are greater than 0\n    # 20. check if all numbers are less than the length of the matrix\n    # 21. check if all numbers are greater than 0\n    # 22. check if all numbers are less than the length of the matrix\n    # 23. check if all numbers are greater than 0\n    # 24. check if all numbers are less than the length of the matrix\n    # 25. check if all numbers are greater than 0\n    # 26. check if all numbers are less than the length of the matrix\n    # 27. check if all numbers are greater than 0\n    # 28. check if all numbers are less than the length of the matrix\n    # 29. check if all numbers are greater than 0\n    # 30. check if all numbers are less than the length of the matrix\n    # 31. check if all numbers are greater than 0\n    # 32. check if all numbers are less than the length of",
    "    # Check if the matrix is a square matrix\n    if len(my_matrix) != len(my_matrix[0]):\n        return False\n\n    # Check if the matrix is a magic square\n    # Calculate the sum of the first row\n    sum_row = 0\n    for i in range(len(my_matrix[0])):\n        sum_row += my_matrix[0][i]\n\n    # Check if the sum of each row is equal to the sum of the first row\n    for i in range(len(my_matrix)):\n        sum_row_temp = 0\n        for j in range(len(my_matrix[0])):\n            sum_row_temp += my_matrix[i][j]\n        if sum_row_temp != sum_row:\n            return False\n\n    # Check if the sum of each column is equal to the sum of the first row\n    for i in range(len(my_matrix[0])):\n        sum_col_temp = 0\n        for j in range(len(my_matrix)):\n            sum_col_temp += my_matrix[j][i]\n        if sum_col_temp != sum_row:\n            return False\n\n    # Check if the sum of the diagonal is equal to the sum of the first row\n    sum_diag = 0\n    for i in range(len(my_matrix)):\n        sum_diag += my_matrix[i][i]\n    if sum_diag != sum_row:\n        return False\n\n    # Check if the sum of the anti-diagonal is equal to the sum of the first row\n    sum_anti_diag = 0\n    for i in range(len(my_matrix)):\n        sum_anti_diag += my_matrix[i][len(my_matrix) - 1 - i]\n    if sum_anti_diag != sum_row:\n        return False\n\n    return True\n\n",
    "    # TODO: Implement me\n    return False\n",
    "    # check if matrix is square\n    if len(my_matrix) != len(my_matrix[0]):\n        return False\n\n    # check if all numbers are unique\n    if len(my_matrix) != len(set([num for row in my_matrix for num in row])):\n        return False\n\n    # check if all rows sum to the same number\n    if len(set([sum(row) for row in my_matrix])) != 1:\n        return False\n\n    # check if all columns sum to the same number\n    if len(set([sum(col) for col in zip(*my_matrix)])) != 1:\n        return False\n\n    # check if both diagonals sum to the same number\n    if sum([my_matrix[i][i] for i in range(len(my_matrix))]) != sum([my_matrix[i][len(my_matrix) - i - 1] for i in range(len(my_matrix))]):\n        return False\n\n    return True\n",
    "    # TODO: Write your code here\n    pass\n\n",
    "    pass\n",
    "    # check if the matrix is a square\n    if len(my_matrix) != len(my_matrix[0]):\n        return False\n    # check if the matrix is a magic square\n    # check the sum of each row\n    for row in my_matrix:\n        if sum(row) != 15:\n            return False\n    # check the sum of each column\n    for i in range(len(my_matrix)):\n        if sum([row[i] for row in my_matrix]) != 15:\n            return False\n    # check the sum of the two diagonals\n    if sum([my_matrix[i][i] for i in range(len(my_matrix))]) != 15:\n        return False\n    if sum([my_matrix[i][len(my_matrix) - 1 - i] for i in range(len(my_matrix))]) != 15:\n        return False\n    return True\n",
    "    # If the matrix is not square, it is not a magic square.\n    if len(my_matrix) != len(my_matrix[0]):\n        return False\n\n    # If the matrix is square, check the sum of each row, column, and diagonal.\n    # If any of these sums is not equal to the others, it is not a magic square.\n    # Otherwise, it is a magic square.\n    sum_of_first_row = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != sum_of_first_row:\n            return False\n\n    for i in range(len(my_matrix)):\n        sum_of_column = 0\n        for j in range(len(my_matrix[i])):\n            sum_of_column += my_matrix[j][i]\n        if sum_of_column != sum_of_first_row:\n            return False\n\n    sum_of_diagonal = 0\n    for i in range(len(my_matrix)):\n        sum_of_diagonal += my_matrix[i][i]\n    if sum_of_diagonal != sum_of_first_row:\n        return False\n\n    sum_of_diagonal = 0\n    for i in range(len(my_matrix)):\n        sum_of_diagonal += my_matrix[i][len(my_matrix) - 1 - i]\n    if sum_of_diagonal != sum_of_first_row:\n        return False\n\n    return True\n",
    "    pass",
    "    # TODO: implement this function\n    pass\n",
    "    # check if the matrix is a square\n    if len(my_matrix) != len(my_matrix[0]):\n        return False\n    # check if the matrix is a magic square\n    # check if the sum of each row is equal to the sum of each column\n    # check if the sum of each diagonal is equal to the sum of each row\n    # check if the sum of each diagonal is equal to the sum of each column\n    # check if the sum of each diagonal is equal to the sum of each row\n    # check if the sum of each diagonal is equal to the sum of each column\n    # check if the sum of each diagonal is equal to the sum of each row\n    # check if the sum of each diagonal is equal to the sum of each column\n    # check if the sum of each diagonal is equal to the sum of each row\n    # check if the sum of each diagonal is equal to the sum of each column\n    # check if the sum of each diagonal is equal to the sum of each row\n    # check if the sum of each diagonal is equal to the sum of each column\n    # check if the sum of each diagonal is equal to the sum of each row\n    # check if the sum of each diagonal is equal to the sum of each column\n    # check if the sum of each diagonal is equal to the sum of each row\n    # check if the sum of each diagonal is equal to the sum of each column\n    # check if the sum of each diagonal is equal to the sum of each row\n    # check if the sum of each diagonal is equal to the sum of each column\n    # check if the sum of each diagonal is equal to the sum of each row\n    # check if the sum of each diagonal is equal to the sum of each column\n    # check if the sum of each diagonal is equal to the sum of each row\n    # check if the sum of each diagonal is equal to the sum of each column\n    # check if the sum of each diagonal is equal to the sum of each row\n    # check if the sum of each diagonal is equal to the sum of each column\n    # check if the sum of each diagonal is equal to the sum of each row\n    # check if the sum of each diagonal is equal to the sum of each column\n    # check if the sum of each diagonal is equal to the sum of",
    "    # TODO: Implement me\n    pass\n",
    "    pass\n",
    "    # check if matrix is square\n    if len(my_matrix) != len(my_matrix[0]):\n        return False\n    # check if all numbers are unique\n    if len(my_matrix) != len(set(my_matrix[0])):\n        return False\n    # check if all rows and columns sum to the same number\n    sum_row = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != sum_row:\n            return False\n    for i in range(len(my_matrix)):\n        if sum(my_matrix[j][i] for j in range(len(my_matrix))) != sum_row:\n            return False\n    # check if both diagonals sum to the same number\n    if sum(my_matrix[i][i] for i in range(len(my_matrix))) != sum_row:\n        return False\n    if sum(my_matrix[i][len(my_matrix) - 1 - i] for i in range(len(my_matrix))) != sum_row:\n        return False\n    return True\n",
    "    # TODO: Implement me\n    pass\n",
    "    # TODO: Implement me\n    pass\n"
  ]
}