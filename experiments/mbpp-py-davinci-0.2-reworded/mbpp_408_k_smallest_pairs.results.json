{
  "name": "mbpp_408_k_smallest_pairs",
  "language": "py",
  "prompt": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_408_k_smallest_pairs.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "results": [
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [x[1] for x in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2pzjan8.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpq2pzjan8.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpq2pzjan8.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpq2pzjan8.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0gm2rnbj.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmp0gm2rnbj.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp0gm2rnbj.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp0gm2rnbj.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\n\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6dpsouz7.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp6dpsouz7.py\", line 31, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp6dpsouz7.py\", line 26, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp6dpsouz7.py\", line 14, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [item[1] for item in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpommfg9ow.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpommfg9ow.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpommfg9ow.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpommfg9ow.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n\nprint(k_smallest_pairs([1,7,11], [2,4,6], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2xc78tud.py\", line 24, in <module>\n    print(k_smallest_pairs([1,7,11], [2,4,6], 3))\n  File \"/tmp/tmp2xc78tud.py\", line 17, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'help'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappushpop(heap, (nums1[i] + nums2[j], i, j))\n    res = []\n    for i in range(k):\n        res.append([nums1[heap[i][1]], nums2[heap[i][2]]])\n    return res\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpp_q1mkck.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpp_q1mkck.py\", line 32, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpp_q1mkck.py\", line 27, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpp_q1mkck.py\", line 17, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    pairs = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            pairs.append([nums1[i], nums2[j]])\n    pairs.sort(key=lambda x: x[0] + x[1])\n    return pairs[:k]\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(len(nums1), k)):\n        for j in range(min(len(nums2), k)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [(nums1[i], nums2[j]) for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpznj0ex6r.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpznj0ex6r.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpznj0ex6r.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpznj0ex6r.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n    res = []\n    while k > 0 and heap:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        k -= 1\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpemqw99uj.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpemqw99uj.py\", line 25, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpemqw99uj.py\", line 20, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpemqw99uj.py\", line 12, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[p[1]], nums2[p[2]]] for p in heap]\n\n\nprint(k_smallest_pairs([1, 7, 11], [2, 4, 6], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpn7874yx3.py\", line 23, in <module>\n    print(k_smallest_pairs([1, 7, 11], [2, 4, 6], 3))\n  File \"/tmp/tmpn7874yx3.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(min(len(nums1), k)):\n        for j in range(min(len(nums2), k)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpeawilgon.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpeawilgon.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpeawilgon.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpeawilgon.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [x[1] for x in heap]\n\nprint(k_smallest_pairs([1,7,11], [2,4,6], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvg3hzmwu.py\", line 26, in <module>\n    print(k_smallest_pairs([1,7,11], [2,4,6], 3))\n  File \"/tmp/tmpvg3hzmwu.py\", line 17, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    res = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            res.append([nums1[i], nums2[j]])\n    res.sort(key=lambda x: x[0] + x[1])\n    return res[:k]\n\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (-nums1[i]-nums2[j], nums1[i], nums2[j]))\n            else:\n                if -heap[0][0] > nums1[i] + nums2[j]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (-nums1[i]-nums2[j], nums1[i], nums2[j]))\n    return [[x[1], x[2]] for x in heap]\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi7798uej.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpi7798uej.py\", line 26, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpi7798uej.py\", line 21, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpi7798uej.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (-nums1[i]-nums2[j], nums1[i], nums2[j]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4c6luvme.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmp4c6luvme.py\", line 28, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp4c6luvme.py\", line 23, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp4c6luvme.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    return [x[1] for x in heap]\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpuwnn7oy6.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmpuwnn7oy6.py\", line 30, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpuwnn7oy6.py\", line 25, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpuwnn7oy6.py\", line 17, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    n1, n2 = len(nums1), len(nums2)\n    if k > n1 * n2:\n        k = n1 * n2\n    heap = []\n    for i in range(n1):\n        for j in range(n2):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [(nums1[i], nums2[j]) for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0snzaw47.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmp0snzaw47.py\", line 30, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp0snzaw47.py\", line 25, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp0snzaw47.py\", line 16, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpesmfjy2k.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmpesmfjy2k.py\", line 30, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpesmfjy2k.py\", line 25, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpesmfjy2k.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    res = []\n    for _ in range(k):\n        if heap:\n            res.append(heapq.heappop(heap)[1])\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkktf63q9.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpkktf63q9.py\", line 24, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpkktf63q9.py\", line 19, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpkktf63q9.py\", line 12, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfrcgmzxz.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpfrcgmzxz.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpfrcgmzxz.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpfrcgmzxz.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [heapq.heappop(heap)[1] for _ in range(len(heap))]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyq3xwqjn.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpyq3xwqjn.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpyq3xwqjn.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpyq3xwqjn.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'help'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [x[1] for x in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2pzjan8.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpq2pzjan8.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpq2pzjan8.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpq2pzjan8.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    # Time: O(k * log(k))\n    # Space: O(k)\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(len(nums1), k)):\n        for j in range(min(len(nums2), k)):\n            if len(heap) < k:\n                heapq.heappush(heap, (-nums1[i] - nums2[j], i, j))\n            else:\n                if -heap[0][0] > nums1[i] + nums2[j]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (-nums1[i] - nums2[j], i, j))\n                else:\n                    break\n    return [[-x[0] - y[0], x[0], y[0]] for x, y in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7ax12qok.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmp7ax12qok.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp7ax12qok.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp7ax12qok.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (-nums1[i] - nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\n\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjl_bbua_.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmpjl_bbua_.py\", line 31, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpjl_bbua_.py\", line 26, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpjl_bbua_.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [x[1] for x in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2pzjan8.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpq2pzjan8.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpq2pzjan8.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpq2pzjan8.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxxgu7tab.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpxxgu7tab.py\", line 32, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpxxgu7tab.py\", line 27, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpxxgu7tab.py\", line 17, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    return [heapq.heappop(heap)[1] for _ in range(k)] if k <= len(heap) else [heapq.heappop(heap)[1] for _ in range(len(heap))]\n\nprint(k_smallest_pairs([1,7,11], [2,4,6], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm8uav6_f.py\", line 15, in <module>\n    print(k_smallest_pairs([1,7,11], [2,4,6], 3))\n  File \"/tmp/tmpm8uav6_f.py\", line 12, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'help'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\n\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2s46h9ge.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmp2s46h9ge.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp2s46h9ge.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp2s46h9ge.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4c6luvme.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmp4c6luvme.py\", line 28, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp4c6luvme.py\", line 23, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp4c6luvme.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if len(nums1) * len(nums2) <= k:\n        return [[i, j] for i in nums1 for j in nums2]\n    heap = []\n    for i in range(min(len(nums1), k)):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    res = []\n    while len(res) < k:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return res\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzqec2wu5.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmpzqec2wu5.py\", line 30, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpzqec2wu5.py\", line 25, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpzqec2wu5.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    pairs = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            pairs.append([nums1[i], nums2[j]])\n    pairs.sort(key=lambda x: x[0] + x[1])\n    return pairs[:k]\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (-nums1[i] - nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if -heap[0][0] > nums1[i] + nums2[j]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (-nums1[i] - nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [pair[1] for pair in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqe_fps2g.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpqe_fps2g.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpqe_fps2g.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpqe_fps2g.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (-nums1[i] - nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    res = []\n    for i in range(k):\n        res.append(heapq.heappop(heap)[1])\n    return res\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpg48ny1pf.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpg48ny1pf.py\", line 28, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpg48ny1pf.py\", line 23, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpg48ny1pf.py\", line 16, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [x[1] for x in heap]\n\nprint(k_smallest_pairs([1,7,11], [2,4,6], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvg3hzmwu.py\", line 26, in <module>\n    print(k_smallest_pairs([1,7,11], [2,4,6], 3))\n  File \"/tmp/tmpvg3hzmwu.py\", line 17, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpp7evf4da.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpp7evf4da.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpp7evf4da.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpp7evf4da.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    return [heapq.heappop(heap)[1] for _ in range(k)] if k < len(heap) else [heapq.heappop(heap)[1] for _ in range(len(heap))]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfevcmlri.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpfevcmlri.py\", line 20, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpfevcmlri.py\", line 15, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpfevcmlri.py\", line 12, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'help'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k <= 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if heap[0][0] > nums1[i] + nums2[j]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n    res = []\n    while heap:\n        res.append([nums1[heap[0][1]], nums2[heap[0][2]]])\n        heapq.heappop(heap)\n    return res\n\nprint(k_smallest_pairs([1,7,11], [2,4,6], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm42zz8o5.py\", line 28, in <module>\n    print(k_smallest_pairs([1,7,11], [2,4,6], 3))\n  File \"/tmp/tmpm42zz8o5.py\", line 17, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[p[1]], nums2[p[2]]] for p in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpwpmdeuvb.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpwpmdeuvb.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpwpmdeuvb.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpwpmdeuvb.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    res = []\n    while k > 0:\n        res.append(heapq.heappop(heap)[1])\n        k -= 1\n    return res\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp57fgqjzw.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp57fgqjzw.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp57fgqjzw.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp57fgqjzw.py\", line 14, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    res = []\n    while heap:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n    return res[::-1]\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnzo_chrc.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpnzo_chrc.py\", line 34, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpnzo_chrc.py\", line 29, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpnzo_chrc.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (-nums1[i] - nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if -nums1[i] - nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (-nums1[i] - nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [heapq.heappop(heap)[1] for _ in range(len(heap))]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpozch1aj4.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpozch1aj4.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpozch1aj4.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpozch1aj4.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (-nums1[i] - nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'help'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    res = []\n    for i in range(k):\n        res.append(heapq.heappop(heap)[1])\n    return res\n\nprint(k_smallest_pairs([1,7,11], [2,4,6], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp55g0rgzt.py\", line 22, in <module>\n    print(k_smallest_pairs([1,7,11], [2,4,6], 3))\n  File \"/tmp/tmp55g0rgzt.py\", line 16, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    res = []\n    for _ in range(min(k, len(heap))):\n        res.append(heapq.heappop(heap)[1])\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpscxp_3xs.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpscxp_3xs.py\", line 23, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpscxp_3xs.py\", line 18, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpscxp_3xs.py\", line 12, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    res = []\n    for i in range(len(heap)):\n        res.append([nums1[heap[i][1]], nums2[heap[i][2]]])\n    return res\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptlfq4j6w.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmptlfq4j6w.py\", line 31, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmptlfq4j6w.py\", line 26, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmptlfq4j6w.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    queue = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(queue) < k:\n                heapq.heappush(queue, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < queue[0][0]:\n                    heapq.heappop(queue)\n                    heapq.heappush(queue, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [pair[1] for pair in queue]\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9o73zlqr.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmp9o73zlqr.py\", line 28, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp9o73zlqr.py\", line 23, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp9o73zlqr.py\", line 13, in k_smallest_pairs\n    heapq.heappush(queue, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'help'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [i[1] for i in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpom49taxc.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpom49taxc.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpom49taxc.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpom49taxc.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    # create a min heap\n    heap = []\n    # add the first element of each array to the heap\n    heapq.heappush(heap, (nums1[0] + nums2[0], [0, 0]))\n    # create a set to keep track of the indices we have already visited\n    visited = set()\n    # create a list to store the result\n    result = []\n    # loop k times\n    for _ in range(k):\n        # if the heap is empty, break\n        if not heap:\n            break\n        # pop the smallest element from the heap\n        _, [i, j] = heapq.heappop(heap)\n        # add the element to the result\n        result.append([nums1[i], nums2[j]])\n        # if we haven't visited the next element in nums1, add it to the heap\n        if i + 1 < len(nums1) and (i + 1, j) not in visited:\n            heapq.heappush(heap, (nums1[i + 1] + nums2[j], [i + 1, j]))\n            visited.add((i + 1, j))\n        # if we haven't visited the next element in nums2, add it to the heap\n        if j + 1 < len(nums2) and (i, j + 1) not in visited:\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], [i, j + 1]))\n            visited.add((i, j + 1))\n    return result\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmppz_y0k3n.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmppz_y0k3n.py\", line 41, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmppz_y0k3n.py\", line 36, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmppz_y0k3n.py\", line 12, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[0] + nums2[0], [0, 0]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4c6luvme.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmp4c6luvme.py\", line 28, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp4c6luvme.py\", line 23, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp4c6luvme.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if heap[0][0] > nums1[i] + nums2[j]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n    return [(nums1[i], nums2[j]) for _, i, j in heap]\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiweo42rv.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmpiweo42rv.py\", line 30, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpiweo42rv.py\", line 25, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpiweo42rv.py\", line 17, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpp7evf4da.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpp7evf4da.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpp7evf4da.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpp7evf4da.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    res = []\n    for i in range(k):\n        res.append(heapq.heappop(heap)[1])\n    return res\n\nprint(k_smallest_pairs([1, 7, 11], [2, 4, 6], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdyzt8uab.py\", line 20, in <module>\n    print(k_smallest_pairs([1, 7, 11], [2, 4, 6], 3))\n  File \"/tmp/tmpdyzt8uab.py\", line 14, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    result = []\n    for i in range(k):\n        result.append(heapq.heappop(heap)[1])\n    return result\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpn0gq_oi2.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpn0gq_oi2.py\", line 28, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpn0gq_oi2.py\", line 23, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpn0gq_oi2.py\", line 16, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (-nums1[i] - nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if -heap[0][0] > nums1[i] + nums2[j]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (-nums1[i] - nums2[j], [nums1[i], nums2[j]]))\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1_7wsl4r.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmp1_7wsl4r.py\", line 30, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp1_7wsl4r.py\", line 25, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp1_7wsl4r.py\", line 17, in k_smallest_pairs\n    heapq.heappush(heap, (-nums1[i] - nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'help'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    # if not nums1 or not nums2:\n    #     return []\n    #\n    # heap = []\n    # for i in range(len(nums1)):\n    #     for j in range(len(nums2)):\n    #         heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    #\n    # res = []\n    # for _ in range(k):\n    #     if heap:\n    #         res.append(heapq.heappop(heap)[1])\n    #\n    # return res\n\n    # if not nums1 or not nums2:\n    #     return []\n    #\n    # heap = []\n    # for i in range(len(nums1)):\n    #     for j in range(len(nums2)):\n    #         if len(heap) < k:\n    #             heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    #         else:\n    #             if nums1[i] + nums2[j] < heap[0][0]:\n    #                 heapq.heapreplace(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    #\n    # return [heapq.heappop(heap)[1] for _ in range(k) if heap]\n\n    if not nums1 or not nums2:\n        return []\n\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heapreplace\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpujb9jyfd.py\", line 55, in <module>\n    test_check()\n  File \"/tmp/tmpujb9jyfd.py\", line 53, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpujb9jyfd.py\", line 48, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpujb9jyfd.py\", line 43, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if heap[0][0] > nums1[i] + nums2[j]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [x[1] for x in heap]\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv9_nw3p5.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpv9_nw3p5.py\", line 28, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpv9_nw3p5.py\", line 23, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpv9_nw3p5.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    res = []\n    while heap:\n        res.append([nums1[heap[0][1]], nums2[heap[0][2]]])\n        heapq.heappop(heap)\n    return res\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpindrcviv.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpindrcviv.py\", line 34, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpindrcviv.py\", line 29, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpindrcviv.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    res = []\n    while heap and len(res) < k:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpc4vhy8j9.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpc4vhy8j9.py\", line 25, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpc4vhy8j9.py\", line 20, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpc4vhy8j9.py\", line 11, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\n\nprint(k_smallest_pairs([1,7,11], [2,4,6], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqtrml7i6.py\", line 22, in <module>\n    print(k_smallest_pairs([1,7,11], [2,4,6], 3))\n  File \"/tmp/tmpqtrml7i6.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    res = []\n    while heap and len(res) < k:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return res\n\nprint(k_smallest_pairs([1,7,11], [2,4,6], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw1p4t57w.py\", line 20, in <module>\n    print(k_smallest_pairs([1,7,11], [2,4,6], 3))\n  File \"/tmp/tmpw1p4t57w.py\", line 11, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [(nums1[i], nums2[j]) for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpl3_dbo5e.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpl3_dbo5e.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpl3_dbo5e.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpl3_dbo5e.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [x[1] for x in heap]\n\nprint(k_smallest_pairs([1,7,11], [2,4,6], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpadc4hsiu.py\", line 22, in <module>\n    print(k_smallest_pairs([1,7,11], [2,4,6], 3))\n  File \"/tmp/tmpadc4hsiu.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [heapq.heappop(heap)[1] for _ in range(len(heap))]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpazcf9n5d.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpazcf9n5d.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpazcf9n5d.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpazcf9n5d.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'help'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    res = []\n    while heap and len(res) < k:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpc4vhy8j9.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpc4vhy8j9.py\", line 25, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpc4vhy8j9.py\", line 20, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpc4vhy8j9.py\", line 11, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (-nums1[i] - nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if -heap[0][0] > nums1[i] + nums2[j]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (-nums1[i] - nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [heapq.heappop(heap)[1] for _ in range(len(heap))]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5p_y3hht.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp5p_y3hht.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp5p_y3hht.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp5p_y3hht.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (-nums1[i] - nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'help'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    res = []\n    for _ in range(min(k, len(heap))):\n        res.append(heapq.heappop(heap)[1])\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8hsg2hlc.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmp8hsg2hlc.py\", line 25, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp8hsg2hlc.py\", line 20, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp8hsg2hlc.py\", line 14, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [x[1] for x in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2pzjan8.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpq2pzjan8.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpq2pzjan8.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpq2pzjan8.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappushpop(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiqfqtnul.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpiqfqtnul.py\", line 28, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpiqfqtnul.py\", line 23, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpiqfqtnul.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[p[1]], nums2[p[2]]] for p in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpwpmdeuvb.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpwpmdeuvb.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpwpmdeuvb.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpwpmdeuvb.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [heapq.heappop(heap)[1] for _ in range(len(heap))]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpazcf9n5d.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpazcf9n5d.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpazcf9n5d.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpazcf9n5d.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'help'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4c6luvme.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmp4c6luvme.py\", line 28, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp4c6luvme.py\", line 23, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp4c6luvme.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappushpop(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n\n    return [x[1] for x in heap]\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2n6at_bn.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp2n6at_bn.py\", line 31, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp2n6at_bn.py\", line 26, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp2n6at_bn.py\", line 16, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    # Time: O(klogk)\n    # Space: O(k)\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    res = []\n    while heap and len(res) < k:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgww5_5j2.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpgww5_5j2.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpgww5_5j2.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpgww5_5j2.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heapreplace(heap, (nums1[i] + nums2[j], i, j))\n    return [(nums1[i], nums2[j]) for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj9z4_qhs.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpj9z4_qhs.py\", line 28, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpj9z4_qhs.py\", line 23, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpj9z4_qhs.py\", line 17, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    res = []\n    for _ in range(min(k, len(heap))):\n        res.append(heapq.heappop(heap)[1])\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpscxp_3xs.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpscxp_3xs.py\", line 23, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpscxp_3xs.py\", line 18, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpscxp_3xs.py\", line 12, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    res = []\n    while heap and len(res) < k:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpc4vhy8j9.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpc4vhy8j9.py\", line 25, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpc4vhy8j9.py\", line 20, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpc4vhy8j9.py\", line 11, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    import heapq\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], (nums1[i], nums2[j])))\n    res = []\n    for _ in range(k):\n        if heap:\n            res.append(heapq.heappop(heap)[1])\n    return res\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmxooa5ji.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpmxooa5ji.py\", line 26, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpmxooa5ji.py\", line 21, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k >= len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp523qsldy.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp523qsldy.py\", line 31, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp523qsldy.py\", line 26, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp523qsldy.py\", line 17, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    res = []\n    while heap and len(res) < k:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpc4vhy8j9.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpc4vhy8j9.py\", line 25, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpc4vhy8j9.py\", line 20, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpc4vhy8j9.py\", line 11, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [item[1] for item in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsw4u0u80.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpsw4u0u80.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpsw4u0u80.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpsw4u0u80.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfrcgmzxz.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpfrcgmzxz.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpfrcgmzxz.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpfrcgmzxz.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if len(nums1) * len(nums2) <= k:\n        return [[i, j] for i in nums1 for j in nums2]\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    res = []\n    while heap and len(res) < k:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return res\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpo2eee8yd.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpo2eee8yd.py\", line 28, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpo2eee8yd.py\", line 23, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpo2eee8yd.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_5cw_hrb.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp_5cw_hrb.py\", line 31, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp_5cw_hrb.py\", line 26, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp_5cw_hrb.py\", line 16, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpesmfjy2k.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmpesmfjy2k.py\", line 30, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpesmfjy2k.py\", line 25, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpesmfjy2k.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(min(len(nums1), k)):\n        for j in range(min(len(nums2), k)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpeawilgon.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpeawilgon.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpeawilgon.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpeawilgon.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    res = []\n    for i in range(k):\n        res.append(heapq.heappop(heap)[1])\n    return res\n\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4xhb17sw.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp4xhb17sw.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp4xhb17sw.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp4xhb17sw.py\", line 14, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(len(nums1), k)):\n        for j in range(min(len(nums2), k)):\n            if len(heap) < k:\n                heapq.heappush(heap, (-nums1[i] - nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if -heap[0][0] > nums1[i] + nums2[j]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (-nums1[i] - nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [heapq.heappop(heap)[1] for _ in range(len(heap))]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsdu4gb8l.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpsdu4gb8l.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpsdu4gb8l.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpsdu4gb8l.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (-nums1[i] - nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'help'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    # heapify the list of tuples\n    heap = [(nums1[i] + nums2[0], i, 0) for i in range(len(nums1))]\n    heapq.heapify(heap)\n    res = []\n    while k > 0 and heap:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n        k -= 1\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmjmrpxiu.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpmjmrpxiu.py\", line 26, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpmjmrpxiu.py\", line 21, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpmjmrpxiu.py\", line 11, in k_smallest_pairs\n    heapq.heapify(heap)\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [x[1] for x in heap]\n\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpuo7gp20i.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpuo7gp20i.py\", line 33, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpuo7gp20i.py\", line 28, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpuo7gp20i.py\", line 17, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (-nums1[i] - nums2[j], i, j))\n            else:\n                if -heap[0][0] > nums1[i] + nums2[j]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (-nums1[i] - nums2[j], i, j))\n                else:\n                    break\n    res = []\n    while heap:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n    return res\n\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpr_wjzwj3.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpr_wjzwj3.py\", line 35, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpr_wjzwj3.py\", line 30, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpr_wjzwj3.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (-nums1[i] - nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    res = []\n    while heap and len(res) < k:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpc4vhy8j9.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpc4vhy8j9.py\", line 25, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpc4vhy8j9.py\", line 20, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpc4vhy8j9.py\", line 11, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n\n    # heapify the first array\n    heapq.heapify(nums1)\n\n    # initialize the result list\n    result = []\n\n    # loop through the second array\n    for num in nums2:\n        # if the length of the result list is less than k\n        if len(result) < k:\n            # pop the first element from the heap\n            popped_num = heapq.heappop(nums1)\n            # add the popped element and the current element to the result list\n            result.append([popped_num, num])\n            # push the popped element back to the heap\n            heapq.heappush(nums1, popped_num)\n        # if the length of the result list is equal to k\n        else:\n            # if the sum of the first element in the heap and the current element is greater than the sum of the last element in the result list\n            if nums1[0] + num > result[-1][0] + result[-1][1]:\n                # pop the first element from the heap\n                popped_num = heapq.heappop(nums1)\n                # pop the last element from the result list\n                popped_result = result.pop()\n                # add the popped element and the current element to the result list\n                result.append([popped_num, num])\n                # push the popped element back to the heap\n                heapq.heappush(nums1, popped_num)\n                # push the popped element from the result list back to the heap\n                heapq.heappush(nums1, popped_result[0])\n            # if the sum of the first element in the heap and the current element is less than the sum of the last element in the result list\n            else:\n                # break the loop\n                break\n\n    return result\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqd2ex77h.py\", line 55, in <module>\n    test_check()\n  File \"/tmp/tmpqd2ex77h.py\", line 53, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpqd2ex77h.py\", line 48, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpqd2ex77h.py\", line 11, in k_smallest_pairs\n    heapq.heapify(nums1)\nNameError: name 'heapq' is not defined. Did you mean: 'help'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [x[1] for x in heap]\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkkz0q4tv.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmpkkz0q4tv.py\", line 30, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpkkz0q4tv.py\", line 25, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpkkz0q4tv.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    res = []\n    while heap and len(res) < k:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpc4vhy8j9.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpc4vhy8j9.py\", line 25, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpc4vhy8j9.py\", line 20, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpc4vhy8j9.py\", line 11, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [pair[1] for pair in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnvmq8j2c.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmpnvmq8j2c.py\", line 31, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpnvmq8j2c.py\", line 26, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpnvmq8j2c.py\", line 17, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [ [nums1[i], nums2[j]] for _, i, j in heap ]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6iyqpah9.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp6iyqpah9.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp6iyqpah9.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp6iyqpah9.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n    res = []\n    for i in range(k):\n        res.append([nums1[heap[i][1]], nums2[heap[i][2]]])\n    return res\n\nprint(k_smallest_pairs([1,7,11], [2,4,6], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpz1diwwq6.py\", line 27, in <module>\n    print(k_smallest_pairs([1,7,11], [2,4,6], 3))\n  File \"/tmp/tmpz1diwwq6.py\", line 17, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpp7evf4da.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpp7evf4da.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpp7evf4da.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpp7evf4da.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    res = []\n    for _, i, j in heap:\n        res.append([nums1[i], nums2[j]])\n    return res\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxmqc5oua.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpxmqc5oua.py\", line 33, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpxmqc5oua.py\", line 28, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpxmqc5oua.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    res = []\n    for i in range(k):\n        res.append(heapq.heappop(heap)[1])\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2prg663b.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp2prg663b.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp2prg663b.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp2prg663b.py\", line 16, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4c6luvme.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmp4c6luvme.py\", line 28, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp4c6luvme.py\", line 23, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp4c6luvme.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if len(nums1) * len(nums2) <= k:\n        return [[i, j] for i in nums1 for j in nums2]\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    res = []\n    while heap and len(res) < k:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk3tngbud.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpk3tngbud.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpk3tngbud.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpk3tngbud.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4c6luvme.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmp4c6luvme.py\", line 28, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp4c6luvme.py\", line 23, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp4c6luvme.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    return [pair[1] for pair in heap]\n\nprint(k_smallest_pairs([1, 7, 11], [2, 4, 6], 3))\nprint(k_smallest_pairs([1, 1, 2], [1, 2, 3], 2))\nprint(k_smallest_pairs([1, 2], [3], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9ey5kawc.py\", line 24, in <module>\n    print(k_smallest_pairs([1, 7, 11], [2, 4, 6], 3))\n  File \"/tmp/tmp9ey5kawc.py\", line 17, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [item[1] for item in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpommfg9ow.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpommfg9ow.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpommfg9ow.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpommfg9ow.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\n\nprint(k_smallest_pairs([1,7,11], [2,4,6], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqtrml7i6.py\", line 22, in <module>\n    print(k_smallest_pairs([1,7,11], [2,4,6], 3))\n  File \"/tmp/tmpqtrml7i6.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    heapq.heappush(heap, (nums1[0] + nums2[0], 0, 0))\n    res = []\n    while k > 0 and heap:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n        if j == 0 and i + 1 < len(nums1):\n            heapq.heappush(heap, (nums1[i + 1] + nums2[j], i + 1, j))\n        k -= 1\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpeonuvbvb.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpeonuvbvb.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpeonuvbvb.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpeonuvbvb.py\", line 12, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[0] + nums2[0], 0, 0))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heappush(heap, (nums1[i] + nums2[0], i, 0))\n\n    result = []\n    while heap and len(result) < k:\n        _, i, j = heappop(heap)\n        result.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n\n    return result\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqpaff3dw.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmpqpaff3dw.py\", line 30, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpqpaff3dw.py\", line 25, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpqpaff3dw.py\", line 14, in k_smallest_pairs\n    heappush(heap, (nums1[i] + nums2[0], i, 0))\nNameError: name 'heappush' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n\n    heap = []\n    for i in range(min(len(nums1), k)):\n        for j in range(min(len(nums2), k)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_hyw9lhl.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmp_hyw9lhl.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp_hyw9lhl.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp_hyw9lhl.py\", line 14, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    res = []\n    for _ in range(k):\n        res.append(heapq.heappop(heap)[1])\n    return res\n\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph7nuazav.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmph7nuazav.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmph7nuazav.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmph7nuazav.py\", line 16, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [x[1] for x in heap]\n\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpntsjl1cu.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpntsjl1cu.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpntsjl1cu.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpntsjl1cu.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4c6luvme.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmp4c6luvme.py\", line 28, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp4c6luvme.py\", line 23, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp4c6luvme.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\n\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2s46h9ge.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmp2s46h9ge.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp2s46h9ge.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp2s46h9ge.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [x[1] for x in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm87k8s7p.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmpm87k8s7p.py\", line 31, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpm87k8s7p.py\", line 26, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpm87k8s7p.py\", line 17, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(len(nums1), k)):\n        for j in range(min(len(nums2), k)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [(nums1[i], nums2[j]) for _, i, j in heap]\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptbqsd97y.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmptbqsd97y.py\", line 28, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmptbqsd97y.py\", line 23, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmptbqsd97y.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    res = []\n    for _ in range(k):\n        if not heap:\n            break\n        res.append(heapq.heappop(heap)[1])\n    return res\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyot_quyt.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpyot_quyt.py\", line 26, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpyot_quyt.py\", line 21, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpyot_quyt.py\", line 12, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n\n    heap = []\n    for i in range(min(len(nums1), k)):\n        for j in range(min(len(nums2), k)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_hyw9lhl.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmp_hyw9lhl.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp_hyw9lhl.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp_hyw9lhl.py\", line 14, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [heapq.heappop(heap)[1] for _ in range(len(heap))]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpazcf9n5d.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpazcf9n5d.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpazcf9n5d.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpazcf9n5d.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'help'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [x[1] for x in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm4njulad.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpm4njulad.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpm4njulad.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpm4njulad.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    pairs = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            pairs.append([nums1[i], nums2[j]])\n    pairs.sort(key=lambda x: x[0] + x[1])\n    return pairs[:k]\n\nprint(k_smallest_pairs([1, 7, 11], [2, 4, 6], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "[[1, 2], [1, 4], [1, 6]]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    res = []\n    heap = []\n    for i in range(len(nums1)):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    while k > 0 and heap:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n        k -= 1\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpwjltj2kb.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpwjltj2kb.py\", line 26, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpwjltj2kb.py\", line 21, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpwjltj2kb.py\", line 12, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [heapq.heappop(heap)[1] for _ in range(len(heap))]\n\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcr1bes68.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmpcr1bes68.py\", line 31, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpcr1bes68.py\", line 26, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpcr1bes68.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'help'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    res = []\n    for i in range(k):\n        res.append(heapq.heappop(heap)[1])\n    return res\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpg48ny1pf.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpg48ny1pf.py\", line 28, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpg48ny1pf.py\", line 23, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpg48ny1pf.py\", line 16, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4c6luvme.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmp4c6luvme.py\", line 28, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp4c6luvme.py\", line 23, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp4c6luvme.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    res = []\n    while heap and len(res) < k:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpc4vhy8j9.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpc4vhy8j9.py\", line 25, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpc4vhy8j9.py\", line 20, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpc4vhy8j9.py\", line 11, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if len(nums1) * len(nums2) <= k:\n        return [[i, j] for i in nums1 for j in nums2]\n    heap = []\n    for i in range(min(len(nums1), k)):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    res = []\n    while len(res) < k:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp69vaaaed.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmp69vaaaed.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp69vaaaed.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp69vaaaed.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4c6luvme.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmp4c6luvme.py\", line 28, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp4c6luvme.py\", line 23, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp4c6luvme.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    res = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            res.append([nums1[i], nums2[j]])\n    res.sort(key=lambda x: x[0] + x[1])\n    return res[:k]\n\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n\n    res = []\n    for _ in range(k):\n        if heap:\n            res.append(heapq.heappop(heap)[1])\n        else:\n            break\n\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8vrnez8s.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmp8vrnez8s.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp8vrnez8s.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp8vrnez8s.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    pairs = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            pairs.append([nums1[i], nums2[j]])\n    pairs.sort(key=lambda x: x[0] + x[1])\n    return pairs[:k]\n\nprint(k_smallest_pairs([1,7,11], [2,4,6], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "[[1, 2], [1, 4], [1, 6]]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    res = []\n    while heap and len(res) < k:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpc4vhy8j9.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpc4vhy8j9.py\", line 25, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpc4vhy8j9.py\", line 20, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpc4vhy8j9.py\", line 11, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [pair[1] for pair in heap]\n\nprint(k_smallest_pairs([1,7,11], [2,4,6], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmppnzb1avn.py\", line 22, in <module>\n    print(k_smallest_pairs([1,7,11], [2,4,6], 3))\n  File \"/tmp/tmppnzb1avn.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    return [x[1] for x in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsoivwz0m.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpsoivwz0m.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpsoivwz0m.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpsoivwz0m.py\", line 17, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n\nprint(k_smallest_pairs([1,7,11], [2,4,6], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2xc78tud.py\", line 24, in <module>\n    print(k_smallest_pairs([1,7,11], [2,4,6], 3))\n  File \"/tmp/tmp2xc78tud.py\", line 17, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'help'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpesmfjy2k.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmpesmfjy2k.py\", line 30, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpesmfjy2k.py\", line 25, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpesmfjy2k.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [x[1] for x in heap]\n\nprint(k_smallest_pairs([1,7,11], [2,4,6], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvg3hzmwu.py\", line 26, in <module>\n    print(k_smallest_pairs([1,7,11], [2,4,6], 3))\n  File \"/tmp/tmpvg3hzmwu.py\", line 17, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n\n    res = []\n    for _ in range(k):\n        res.append(heapq.heappop(heap)[1])\n\n    return res\n\nprint(k_smallest_pairs([1,7,11], [2,4,6], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfocmnwrh.py\", line 25, in <module>\n    print(k_smallest_pairs([1,7,11], [2,4,6], 3))\n  File \"/tmp/tmpfocmnwrh.py\", line 17, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n    return [x[1] for x in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpt4dkvbun.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpt4dkvbun.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpt4dkvbun.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpt4dkvbun.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    res = []\n    while heap and len(res) < k:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpc4vhy8j9.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpc4vhy8j9.py\", line 25, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpc4vhy8j9.py\", line 20, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpc4vhy8j9.py\", line 11, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(len(nums1), k)):\n        for j in range(min(len(nums2), k)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2l9hd84y.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp2l9hd84y.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp2l9hd84y.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp2l9hd84y.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (-nums1[i] - nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if -heap[0][0] > nums1[i] + nums2[j]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (-nums1[i] - nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [x[1] for x in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiywktxjm.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpiywktxjm.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpiywktxjm.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpiywktxjm.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (-nums1[i] - nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if len(nums1) * len(nums2) <= k:\n        return [[i, j] for i in nums1 for j in nums2]\n    heap = []\n    for i in range(min(len(nums1), k)):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    res = []\n    while k > 0 and heap:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n        k -= 1\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpin70i6nk.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmpin70i6nk.py\", line 30, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpin70i6nk.py\", line 25, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpin70i6nk.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(len(nums1), k)):\n        for j in range(min(len(nums2), k)):\n            if len(heap) < k:\n                heapq.heappush(heap, (-nums1[i] - nums2[j], i, j))\n            else:\n                if -heap[0][0] > nums1[i] + nums2[j]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (-nums1[i] - nums2[j], i, j))\n                else:\n                    break\n    return [[-heap[i][0] - nums2[heap[i][2]], nums2[heap[i][2]]] for i in range(k) if heap[i][1] < len(nums1)]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7e6lfq6q.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp7e6lfq6q.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp7e6lfq6q.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp7e6lfq6q.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (-nums1[i] - nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'help'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n                else:\n                    break\n    return [x[1] for x in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm4njulad.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpm4njulad.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpm4njulad.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpm4njulad.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = [(nums1[0] + nums2[0], 0, 0)]\n    result = []\n    while heap and len(result) < k:\n        _, i, j = heapq.heappop(heap)\n        result.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n        if j == 0 and i + 1 < len(nums1):\n            heapq.heappush(heap, (nums1[i + 1] + nums2[j], i + 1, j))\n    return result\n\nprint(k_smallest_pairs([1,7,11], [2,4,6], 3))\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnajx161k.py\", line 20, in <module>\n    print(k_smallest_pairs([1,7,11], [2,4,6], 3))\n  File \"/tmp/tmpnajx161k.py\", line 12, in k_smallest_pairs\n    _, i, j = heapq.heappop(heap)\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(len(nums1), k)):\n        for j in range(min(len(nums2), k)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2l9hd84y.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp2l9hd84y.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp2l9hd84y.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp2l9hd84y.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpp7evf4da.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpp7evf4da.py\", line 29, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpp7evf4da.py\", line 24, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpp7evf4da.py\", line 15, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(len(nums1), k)):\n        for j in range(min(len(nums2), k)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2l9hd84y.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp2l9hd84y.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmp2l9hd84y.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmp2l9hd84y.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    res = []\n    while heap:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n    return res\n\n\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpwn2ewemw.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpwn2ewemw.py\", line 37, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpwn2ewemw.py\", line 32, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpwn2ewemw.py\", line 17, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    res = []\n    while heap and len(res) < k:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpc4vhy8j9.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpc4vhy8j9.py\", line 25, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpc4vhy8j9.py\", line 20, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpc4vhy8j9.py\", line 11, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    res = []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    while heap and len(res) < k:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return res\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkalmbk2e.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpkalmbk2e.py\", line 25, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmpkalmbk2e.py\", line 20, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmpkalmbk2e.py\", line 12, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n    return [[nums1[i], nums2[j]] for _, i, j in heap]\ndef check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvcvlsba.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmprvcvlsba.py\", line 27, in test_check\n    check(k_smallest_pairs)\n  File \"/tmp/tmprvcvlsba.py\", line 22, in check\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n  File \"/tmp/tmprvcvlsba.py\", line 13, in k_smallest_pairs\n    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\nNameError: name 'heapq' is not defined. Did you mean: 'heap'?\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}