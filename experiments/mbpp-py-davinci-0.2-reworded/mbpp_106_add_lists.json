{
  "name": "mbpp_106_add_lists",
  "language": "py",
  "prompt": "from typing import List, Tuple\n\ndef add_lists(test_list: List[int], test_tup: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function to append the given list to the given tuples.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_106_add_lists.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n    assert candidate([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\n    assert candidate([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)\n\ndef test_check():\n    check(add_lists)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return test_tup + tuple(test_list)\n",
    "    return test_tup + tuple(test_list)\n\nprint(add_lists([1,2,3], (4,5,6)))",
    "    return test_tup + tuple(test_list)\n\nprint(add_lists([1,2,3], (4,5,6)))\n",
    "    return test_tup + tuple(test_list)\n\nprint(add_lists([1, 2, 3], (4, 5, 6)))",
    "    return test_tup + tuple(test_list)\n\nprint(add_lists([1, 2, 3], (4, 5, 6)))",
    "    return tuple(test_tup) + tuple(test_list)\n\nprint(add_lists([1,2,3], (1,2,3)))",
    "    return test_tup + tuple(test_list)\n\nprint(add_lists([1,2,3,4], (5,6,7,8)))",
    "    return tuple(test_list + list(test_tup))\n",
    "    return test_tup + tuple(test_list)\n\nprint(add_lists([1,2,3], (4,5,6)))",
    "    return test_tup + tuple(test_list)\n\n",
    "    return test_tup + tuple(test_list)\n\nprint(add_lists([1,2,3], (4,5,6)))",
    "    return test_tup + tuple(test_list)\n\nprint(add_lists([1, 2, 3], (4, 5, 6)))",
    "    return test_tup + tuple(test_list)\n\nprint(add_lists([1,2,3], (4,5,6)))",
    "    return tuple(test_tup) + tuple(test_list)\n\nprint(add_lists([1,2,3], (4,5,6)))",
    "    return test_tup + tuple(test_list)\n\nprint(add_lists([1, 2, 3], (4, 5, 6)))",
    "    return test_tup + tuple(test_list)\n\nprint(add_lists([1,2,3], (4,5,6)))\n",
    "    return test_tup + tuple(test_list)\n\nprint(add_lists([1,2,3], (4,5,6)))",
    "    return test_tup + tuple(test_list)\n\nprint(add_lists([1, 2, 3], (4, 5, 6)))",
    "    return test_tup + tuple(test_list)\n\nprint(add_lists([1, 2, 3], (4, 5, 6)))",
    "    return tuple(test_tup) + tuple(test_list)\n\nprint(add_lists([1,2,3], (4,5,6)))"
  ]
}