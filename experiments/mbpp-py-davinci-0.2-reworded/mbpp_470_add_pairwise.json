{
  "name": "mbpp_470_add_pairwise",
  "language": "py",
  "prompt": "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_470_add_pairwise.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n    assert candidate((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\n    assert candidate((3, 7, 9, 10, 12)) == (10, 16, 19, 22)\n\ndef test_check():\n    check(add_pairwise)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return tuple(test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1))\n",
    "    return tuple(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))\n",
    "    return tuple(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))\n",
    "    return tuple(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))\n",
    "    return tuple(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))\n",
    "    return tuple([test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1)])\n\nprint(add_pairwise((1,2,3,4,5,6)))",
    "    return tuple([test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)])\n\nprint(add_pairwise((1, 2, 3, 4)))\nprint(add_pairwise((1, 2, 3, 4, 5)))\nprint(add_pairwise((1, 2, 3, 4, 5, 6)))",
    "    return tuple(test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1))\n\n",
    "    return tuple(test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1))\n\n",
    "    return tuple(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))\n\nprint(add_pairwise((1,2,3,4,5,6)))",
    "    return tuple(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))\n",
    "    return tuple(test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1))\n",
    "    return tuple(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))\n",
    "    return tuple(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))\n",
    "    return tuple(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))\n",
    "    return tuple([test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1)])\n",
    "    return tuple(test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1))\n\n",
    "    return tuple(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))\n",
    "    return tuple(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))\n",
    "    return tuple(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))\n"
  ]
}