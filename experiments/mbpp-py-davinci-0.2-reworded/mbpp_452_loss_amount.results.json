{
  "name": "mbpp_452_loss_amount",
  "language": "py",
  "prompt": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_452_loss_amount.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "results": [
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfw38me67.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpfw38me67.py\", line 16, in test_check\n    check(loss_amount)\n  File \"/tmp/tmpfw38me67.py\", line 11, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfw38me67.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpfw38me67.py\", line 16, in test_check\n    check(loss_amount)\n  File \"/tmp/tmpfw38me67.py\", line 11, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfw38me67.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpfw38me67.py\", line 16, in test_check\n    check(loss_amount)\n  File \"/tmp/tmpfw38me67.py\", line 11, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfw38me67.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpfw38me67.py\", line 16, in test_check\n    check(loss_amount)\n  File \"/tmp/tmpfw38me67.py\", line 11, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfw38me67.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpfw38me67.py\", line 16, in test_check\n    check(loss_amount)\n  File \"/tmp/tmpfw38me67.py\", line 11, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    return actual_cost - sale_amount\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpu0e3g8cl.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpu0e3g8cl.py\", line 14, in test_check\n    check(loss_amount)\n  File \"/tmp/tmpu0e3g8cl.py\", line 9, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\nprint(loss_amount(100, 50))\nprint(loss_amount(50, 100))\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1666122634,
      "stdout": "50\n0\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpb2e27xrt.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpb2e27xrt.py\", line 21, in test_check\n    check(loss_amount)\n  File \"/tmp/tmpb2e27xrt.py\", line 16, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfw38me67.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpfw38me67.py\", line 16, in test_check\n    check(loss_amount)\n  File \"/tmp/tmpfw38me67.py\", line 11, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfw38me67.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpfw38me67.py\", line 16, in test_check\n    check(loss_amount)\n  File \"/tmp/tmpfw38me67.py\", line 11, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\nprint(loss_amount(100, 200))\nprint(loss_amount(200, 100))\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1666122634,
      "stdout": "0\n100\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpwirwt5h_.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpwirwt5h_.py\", line 21, in test_check\n    check(loss_amount)\n  File \"/tmp/tmpwirwt5h_.py\", line 16, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfw38me67.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpfw38me67.py\", line 16, in test_check\n    check(loss_amount)\n  File \"/tmp/tmpfw38me67.py\", line 11, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfw38me67.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpfw38me67.py\", line 16, in test_check\n    check(loss_amount)\n  File \"/tmp/tmpfw38me67.py\", line 11, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfw38me67.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpfw38me67.py\", line 16, in test_check\n    check(loss_amount)\n  File \"/tmp/tmpfw38me67.py\", line 11, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfw38me67.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpfw38me67.py\", line 16, in test_check\n    check(loss_amount)\n  File \"/tmp/tmpfw38me67.py\", line 11, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfw38me67.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpfw38me67.py\", line 16, in test_check\n    check(loss_amount)\n  File \"/tmp/tmpfw38me67.py\", line 11, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfw38me67.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpfw38me67.py\", line 16, in test_check\n    check(loss_amount)\n  File \"/tmp/tmpfw38me67.py\", line 11, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    return actual_cost - sale_amount\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpu0e3g8cl.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpu0e3g8cl.py\", line 14, in test_check\n    check(loss_amount)\n  File \"/tmp/tmpu0e3g8cl.py\", line 9, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfw38me67.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpfw38me67.py\", line 16, in test_check\n    check(loss_amount)\n  File \"/tmp/tmpfw38me67.py\", line 11, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\nprint(loss_amount(100, 80))\nprint(loss_amount(100, 120))\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1666122634,
      "stdout": "20\n0\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpu6kw6c9l.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpu6kw6c9l.py\", line 21, in test_check\n    check(loss_amount)\n  File \"/tmp/tmpu6kw6c9l.py\", line 16, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    return actual_cost - sale_amount\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpu0e3g8cl.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpu0e3g8cl.py\", line 14, in test_check\n    check(loss_amount)\n  File \"/tmp/tmpu0e3g8cl.py\", line 9, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\nprint(loss_amount(100, 50))  # 50\nprint(loss_amount(100, 150))  # 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1666122634,
      "stdout": "50\n0\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0s6amk23.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmp0s6amk23.py\", line 21, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp0s6amk23.py\", line 16, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\nprint(loss_amount(100, 200))\nprint(loss_amount(200, 100))\nprint(loss_amount(100, 100))\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1666122634,
      "stdout": "0\n100\n0\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpokd00oks.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpokd00oks.py\", line 22, in test_check\n    check(loss_amount)\n  File \"/tmp/tmpokd00oks.py\", line 17, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfw38me67.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpfw38me67.py\", line 16, in test_check\n    check(loss_amount)\n  File \"/tmp/tmpfw38me67.py\", line 11, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfw38me67.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpfw38me67.py\", line 16, in test_check\n    check(loss_amount)\n  File \"/tmp/tmpfw38me67.py\", line 11, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    return actual_cost - sale_amount\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpu0e3g8cl.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpu0e3g8cl.py\", line 14, in test_check\n    check(loss_amount)\n  File \"/tmp/tmpu0e3g8cl.py\", line 9, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    loss = actual_cost - sale_amount\n    if loss > 0:\n        return loss\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5i8y0_nt.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmp5i8y0_nt.py\", line 18, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp5i8y0_nt.py\", line 13, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfw38me67.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpfw38me67.py\", line 16, in test_check\n    check(loss_amount)\n  File \"/tmp/tmpfw38me67.py\", line 11, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n",
      "timestamp": 1665510177,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yi_0ne5.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp7yi_0ne5.py\", line 17, in test_check\n    check(loss_amount)\n  File \"/tmp/tmp7yi_0ne5.py\", line 12, in check\n    assert candidate(1500, 1200) == 0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}