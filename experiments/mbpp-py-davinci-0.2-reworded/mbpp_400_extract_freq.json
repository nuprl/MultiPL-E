{
  "name": "mbpp_400_extract_freq",
  "language": "py",
  "prompt": "from typing import List, Tuple\n\ndef extract_freq(test_list: List[Tuple[int]]) -> int:\n    \"\"\"\n\tWrite a function to extract the number of unique tuples in the given list.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_400_extract_freq.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate([(3, 4), (1, 2), (4, 3), (5, 6)]) == 3\n    assert candidate([(4, 15), (2, 3), (5, 4), (6, 7)]) == 4\n    assert candidate([(5, 16), (2, 3), (6, 5), (6, 9)]) == 4\n\ndef test_check():\n    check(extract_freq)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return len(set(test_list))\n",
    "    return len(set(test_list))\n",
    "    return len(set(test_list))\n",
    "    return len(set(test_list))\n",
    "    return len(set(test_list))\n\n",
    "    return len(set(test_list))\n",
    "    return len(set(test_list))\n",
    "    return len(set(test_list))\n\nprint(extract_freq([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]))",
    "    return len(set(test_list))\n",
    "    return len(set(test_list))\n",
    "    return len(set(test_list))\n",
    "    return len(set(test_list))\n",
    "    return len(set(test_list))\n",
    "    return len(set(test_list))\n\nprint(extract_freq([(1, 2), (3, 4), (1, 2), (5, 6), (7, 8), (1, 2), (3, 4), (3, 4), (7, 8), (9, 10)]))\n",
    "    return len(set(test_list))\n",
    "    return len(set(test_list))\n\nprint(extract_freq([(1, 2), (3, 4), (5, 6), (1, 2), (7, 8), (1, 2), (3, 4), (3, 4), (7, 8), (9, 10)]))",
    "    return len(set(test_list))\n",
    "    return len(set(test_list))\n",
    "    return len(set(test_list))\n",
    "    return len(set(test_list))\n"
  ]
}