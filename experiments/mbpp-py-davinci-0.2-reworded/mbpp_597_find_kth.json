{
  "name": "mbpp_597_find_kth",
  "language": "py",
  "prompt": "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    \"\"\"\n\tWrite a function to find kth element from the given two sorted arrays.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_597_find_kth.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\n    assert candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7) == 256\n    assert candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6) == 8\n\ndef test_check():\n    check(find_kth)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if len(arr1) == 1 and len(arr2) == 1:\n        return max(arr1[0], arr2[0])\n    if len(arr1) == 1:\n        if arr1[0] > arr2[k]:\n            return arr2[k]\n        else:\n            return arr2[k-1]\n    if len(arr2) == 1:\n        if arr2[0] > arr1[k]:\n            return arr1[k]\n        else:\n            return arr1[k-1]\n    if k == 1:\n        if arr1[0] > arr2[0]:\n            return arr2[0]\n        else:\n            return arr1[0]\n    if k == 2:\n        if arr1[0] > arr2[1]:\n            return arr2[1]\n        else:\n            return arr1[1]\n    if k == 3:\n        if arr1[1] > arr2[1]:\n            return arr2[1]\n        else:\n            return arr1[1]\n    if k == 4:\n        if arr1[1] > arr2[2]:\n            return arr2[2]\n        else:\n            return arr1[2]\n    if k == 5:\n        if arr1[2] > arr2[2]:\n            return arr2[2]\n        else:\n            return arr1[2]\n    if k == 6:\n        if arr1[2] > arr2[3]:\n            return arr2[3]\n        else:\n            return arr1[3]\n    if k == 7:\n        if arr1[3] > arr2[3]:\n            return arr2[3]\n        else:\n            return arr1[3]\n    if k == 8:\n        if arr1[3] > arr2[4]:\n            return arr2[4]\n        else:\n            return arr",
    "    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n\n    if k // 2 > len(arr1):\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n    else:\n        if arr1[k // 2 - 1] < arr2[k // 2 - 1]:\n            return find_kth(arr1[k // 2:], arr2, k - k // 2)\n        else:\n            return find_kth(arr1, arr2[k // 2:], k - k // 2)\n\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n\n    if k == 0:\n        return min(arr1[0], arr2[0])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n",
    "    if not arr1:\n        return arr2[k]\n    if not arr2:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == 1:\n        return max(arr1[0], arr2[0])\n    a = arr1[k // 2] if len(arr1) >= k // 2 + 1 else None\n    b = arr2[k // 2] if len(arr2) >= k // 2 + 1 else None\n    if b is None or (a is not None and a < b):\n        return find_kth(arr1[k // 2 + 1:], arr2, k - k // 2 - 1)\n    return find_kth(arr1, arr2[k // 2 + 1:], k - k // 2 - 1)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    i = k // 2\n    j = k - i\n    if i >= len(arr1):\n        i = len(arr1) - 1\n        j = k - i\n    if j >= len(arr2):\n        j = len(arr2) - 1\n        i = k - j\n    if arr1[i] > arr2[j]:\n        return find_kth(arr1, arr2[j + 1:], k - j - 1)\n    elif arr1[i] < arr2[j]:\n        return find_kth(arr1[i + 1:], arr2, k - i - 1)\n    else:\n        return arr1[i]\n",
    "    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2) - 1:\n        return max(arr1[-1], arr2[-1])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2) - 1:\n        return max(arr1[-1], arr2[-1])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if arr1[mid1] <= arr2[mid2]:\n        if k <= mid1 + mid2:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n    else:\n        if k <= mid1 + mid2:\n            return find_kth(arr1, arr2[:mid2], k)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n",
    "    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n\n    mid1 = arr1[len(arr1) // 2]\n    mid2 = arr2[len(arr2) // 2]\n\n    if len(arr1) // 2 + len(arr2) // 2 + 1 >= k:\n        if mid1 > mid2:\n            return find_kth(arr1, arr2[:len(arr2) // 2], k)\n        else:\n            return find_kth(arr1[:len(arr1) // 2], arr2, k)\n    else:\n        if mid1 > mid2:\n            return find_kth(arr1[len(arr1) // 2 + 1:], arr2, k - len(arr1) // 2 - 1)\n        else:\n            return find_kth(arr1, arr2[len(arr2) // 2 + 1:], k - len(arr2) // 2 - 1)\n\n",
    "    if len(arr1) == 0:\n        return arr2[k-1]\n    if len(arr2) == 0:\n        return arr1[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    if len(arr1) < k//2:\n        return find_kth(arr1, arr2[k//2:], k-k//2)\n    if arr1[k//2-1] < arr2[k//2-1]:\n        return find_kth(arr1[k//2:], arr2, k-k//2)\n    else:\n        return find_kth(arr1, arr2[k//2:], k-k//2)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2) - 1:\n        return max(arr1[-1], arr2[-1])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if arr1[mid1] < arr2[mid2]:\n        if k <= mid1 + mid2:\n            return find_kth(arr1, arr2[:mid2], k)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if k <= mid1 + mid2:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n\n",
    "    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    if len(arr1) > k // 2:\n        return find_kth(arr1[k // 2:], arr2, k - k // 2)\n    else:\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n",
    "    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            i += 1\n            k -= 1\n        else:\n            if k == 1:\n                return arr2[j]\n            j += 1\n            k -= 1\n    while i < len(arr1):\n        if k == 1:\n            return arr1[i]\n        i += 1\n        k -= 1\n    while j < len(arr2):\n        if k == 1:\n            return arr2[j]\n        j += 1\n        k -= 1\n    return -1\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n        else:\n            return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n",
    "    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    if not arr1:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(len(arr1), k // 2)\n    j = min(len(arr2), k // 2)\n    if arr1[i - 1] > arr2[j - 1]:\n        return find_kth(arr1, arr2[j:], k - j)\n    else:\n        return find_kth(arr1[i:], arr2, k - i)\n",
    "    if k > len(arr1) + len(arr2):\n        return None\n    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    if len(arr1) < k // 2:\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n    if arr1[k // 2 - 1] < arr2[k // 2 - 1]:\n        return find_kth(arr1[k // 2:], arr2, k - k // 2)\n    else:\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    i = len(arr1) // 2\n    j = len(arr2) // 2\n    if i + j < k:\n        if arr1[i] > arr2[j]:\n            return find_kth(arr1, arr2[j+1:], k-j-1)\n        else:\n            return find_kth(arr1[i+1:], arr2, k-i-1)\n    else:\n        if arr1[i] > arr2[j]:\n            return find_kth(arr1[:i], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:j], k)\n",
    "    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    if len(arr1) <= k // 2 - 1:\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n    if len(arr2) <= k // 2 - 1:\n        return find_kth(arr1[k // 2:], arr2, k - k // 2)\n    if arr1[k // 2 - 1] < arr2[k // 2 - 1]:\n        return find_kth(arr1[k // 2:], arr2, k - k // 2)\n    else:\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if len(arr1) <= k // 2:\n        if arr1[-1] > arr2[k // 2]:\n            return find_kth(arr1, arr2[k // 2 + 1:], k - k // 2 - 1)\n        else:\n            return find_kth(arr1, arr2[:k // 2], k // 2)\n    if len(arr2) <= k // 2:\n        if arr2[-1] > arr1[k // 2]:\n            return find_kth(arr1[k // 2 + 1:], arr2, k - k // 2 - 1)\n        else:\n            return find_kth(arr1[:k // 2], arr2, k // 2)\n    if arr1[k // 2] > arr2[k // 2]:\n        return find_kth(arr1, arr2[k // 2 + 1:], k - k // 2 - 1)\n    else:\n        return find_kth(arr1[k // 2 + 1:], arr2, k - k // 2 - 1)\n\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2) - 1:\n        return max(arr1[-1], arr2[-1])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if len(arr1) == 1 and len(arr2) == 1:\n        return max(arr1[0], arr2[0])\n    if len(arr1) == 1:\n        if arr1[0] > arr2[k]:\n            return arr2[k]\n        else:\n            return arr2[k-1]\n    if len(arr2) == 1:\n        if arr2[0] > arr1[k]:\n            return arr1[k]\n        else:\n            return arr1[k-1]\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if arr1[mid1] > arr2[mid2]:\n        if k <= mid1 + mid2:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    else:\n        if k <= mid1 + mid2:\n            return find_kth(arr1, arr2[:mid2], k)\n        else:\n            return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2) - 1:\n        return max(arr1[-1], arr2[-1])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if arr1[mid1] < arr2[mid2]:\n        if k <= mid1 + mid2:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n    else:\n        if k <= mid1 + mid2:\n            return find_kth(arr1, arr2[:mid2], k)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    i = k // 2\n    j = k - i\n    if i >= len(arr1):\n        i = len(arr1) - 1\n        j = k - i\n    if j >= len(arr2):\n        j = len(arr2) - 1\n        i = k - j\n    if arr1[i] < arr2[j]:\n        return find_kth(arr1[i+1:], arr2, k - i - 1)\n    else:\n        return find_kth(arr1, arr2[j+1:], k - j - 1)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2) - 1:\n        return max(arr1[-1], arr2[-1])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n\n",
    "    if not arr1:\n        return arr2[k]\n    if not arr2:\n        return arr1[k]\n\n    if k == 0:\n        return min(arr1[0], arr2[0])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2):\n        return max(arr1[-1], arr2[-1])\n    if k == len(arr1):\n        return arr2[k - len(arr1)]\n    if k == len(arr2):\n        return arr1[k - len(arr2)]\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if arr1[mid1] <= arr2[mid2]:\n        if k <= mid1 + mid2:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n    else:\n        if k <= mid1 + mid2:\n            return find_kth(arr1, arr2[:mid2], k)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n\n",
    "    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    if len(arr1) < k // 2:\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n    if len(arr2) < k // 2:\n        return find_kth(arr1[k // 2:], arr2, k - k // 2)\n    if arr1[k // 2 - 1] < arr2[k // 2 - 1]:\n        return find_kth(arr1[k // 2:], arr2, k - k // 2)\n    else:\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n",
    "    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n",
    "    if not arr1:\n        return arr2[k]\n    if not arr2:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == 1:\n        return max(arr1[0], arr2[0])\n    mid1 = arr1[k//2] if len(arr1) >= k//2 else None\n    mid2 = arr2[k//2] if len(arr2) >= k//2 else None\n    if mid1 is None:\n        return find_kth(arr1, arr2[k//2+1:], k-k//2-1)\n    if mid2 is None:\n        return find_kth(arr1[k//2+1:], arr2, k-k//2-1)\n    if mid1 < mid2:\n        return find_kth(arr1[k//2:], arr2, k-k//2)\n    else:\n        return find_kth(arr1, arr2[k//2:], k-k//2)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n",
    "    if len(arr1) == 0:\n        return arr2[k-1]\n    if len(arr2) == 0:\n        return arr1[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    if len(arr1) < k//2:\n        return find_kth(arr1, arr2[k//2:], k-k//2)\n    if arr1[k//2-1] < arr2[k//2-1]:\n        return find_kth(arr1[k//2:], arr2, k-k//2)\n    else:\n        return find_kth(arr1, arr2[k//2:], k-k//2)\n",
    "    if not arr1:\n        return arr2[k]\n    if not arr2:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n\n",
    "    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    if not arr1:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(len(arr1), k // 2)\n    j = min(len(arr2), k // 2)\n    if arr1[i - 1] > arr2[j - 1]:\n        return find_kth(arr1, arr2[j:], k - j)\n    else:\n        return find_kth(arr1[i:], arr2, k - i)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    if len(arr1) < k // 2:\n        if arr1[-1] < arr2[k - len(arr1)]:\n            return arr2[k - len(arr1)]\n        else:\n            return find_kth(arr1, arr2[:k - len(arr1)], k - len(arr1))\n    else:\n        if arr1[k // 2] < arr2[k // 2]:\n            return find_kth(arr1[k // 2:], arr2, k - k // 2)\n        else:\n            return find_kth(arr1, arr2[k // 2:], k - k // 2)\n\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2) - 1:\n        return max(arr1[-1], arr2[-1])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if arr1[mid1] <= arr2[mid2]:\n        if k <= mid1 + mid2:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    else:\n        if k <= mid1 + mid2:\n            return find_kth(arr1, arr2[:mid2], k)\n        else:\n            return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n\n",
    "    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    if len(arr1) <= k // 2 - 1:\n        if arr1[-1] <= arr2[k // 2 - 1]:\n            return arr2[k - len(arr1) - 1]\n        else:\n            return find_kth(arr1, arr2[k // 2:], k - k // 2)\n    if len(arr2) <= k // 2 - 1:\n        if arr2[-1] <= arr1[k // 2 - 1]:\n            return arr1[k - len(arr2) - 1]\n        else:\n            return find_kth(arr1[k // 2:], arr2, k - k // 2)\n    if arr1[k // 2 - 1] <= arr2[k // 2 - 1]:\n        return find_kth(arr1[k // 2:], arr2, k - k // 2)\n    else:\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2) - 1:\n        return max(arr1[-1], arr2[-1])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if arr1[mid1] <= arr2[mid2]:\n        if k <= mid1 + mid2:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n    else:\n        if k <= mid1 + mid2:\n            return find_kth(arr1, arr2[:mid2], k)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if len(arr1) == 1 and len(arr2) == 1:\n        return max(arr1[0], arr2[0])\n    if len(arr1) == 1:\n        if arr1[0] > arr2[k-1]:\n            return arr1[0]\n        else:\n            return arr2[k-1]\n    if len(arr2) == 1:\n        if arr2[0] > arr1[k-1]:\n            return arr2[0]\n        else:\n            return arr1[k-1]\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if arr1[mid1] > arr2[mid2]:\n        if k <= mid1 + mid2 + 1:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    else:\n        if k <= mid1 + mid2 + 1:\n            return find_kth(arr1, arr2[:mid2], k)\n        else:\n            return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if len(arr1) == 1 and len(arr2) == 1:\n        return max(arr1[0], arr2[0])\n    if len(arr1) == 1:\n        if arr1[0] > arr2[k]:\n            return arr2[k]\n        else:\n            return find_kth(arr1, arr2[1:], k-1)\n    if len(arr2) == 1:\n        if arr2[0] > arr1[k]:\n            return arr1[k]\n        else:\n            return find_kth(arr1[1:], arr2, k-1)\n    if arr1[k//2] > arr2[k//2]:\n        return find_kth(arr1, arr2[k//2:], k-k//2)\n    else:\n        return find_kth(arr1[k//2:], arr2, k-k//2)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == 1:\n        return max(arr1[0], arr2[0])\n    if len(arr1) == 1:\n        return arr2[k-1]\n    if len(arr2) == 1:\n        return arr1[k-1]\n    if len(arr1) == 2:\n        return arr2[k-2]\n    if len(arr2) == 2:\n        return arr1[k-2]\n    if k == 2:\n        return max(arr1[0], arr2[0])\n    if k == 3:\n        return min(arr1[1], arr2[1])\n    if k == 4:\n        return max(arr1[1], arr2[1])\n    if k == 5:\n        return min(arr1[2], arr2[2])\n    if k == 6:\n        return max(arr1[2], arr2[2])\n    if k == 7:\n        return min(arr1[3], arr2[3])\n    if k == 8:\n        return max(arr1[3], arr2[3])\n    if k == 9:\n        return min(arr1[4], arr2[4])\n    if k == 10:\n        return max(arr1[4], arr2[4])\n    if k == 11:\n        return min(arr1[5], arr2[5])\n    if k == 12:\n        return max(arr1[5], arr2[5])\n    if k == 13:\n        return min(arr1[6], arr2[6])\n    if k == 14:\n        return max(arr1[6], arr2[6])\n    if k == 15:\n        return min(arr1[7], arr2[7])\n    if k == 16:\n        return max(arr1[7], arr2[7])\n    if k == 17:\n        return min(arr1[8",
    "    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    if len(arr1) < k // 2:\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n    if len(arr2) < k // 2:\n        return find_kth(arr1[k // 2:], arr2, k - k // 2)\n    if arr1[k // 2 - 1] < arr2[k // 2 - 1]:\n        return find_kth(arr1[k // 2:], arr2, k - k // 2)\n    else:\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n",
    "    if k > len(arr1) + len(arr2):\n        return None\n    if len(arr1) == 0:\n        return arr2[k-1]\n    if len(arr2) == 0:\n        return arr1[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2):\n        return max(arr1[-1], arr2[-1])\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    if len(arr1) < k//2:\n        return find_kth(arr1, arr2[k//2:], k-k//2)\n    if arr1[k//2-1] < arr2[k//2-1]:\n        return find_kth(arr1[k//2:], arr2, k-k//2)\n    else:\n        return find_kth(arr1, arr2[k//2:], k-k//2)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n\n    if k == 0:\n        return min(arr1[0], arr2[0])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n\n",
    "    if k > len(arr1) + len(arr2):\n        return -1\n\n    if len(arr1) == 0:\n        return arr2[k - 1]\n\n    if len(arr2) == 0:\n        return arr1[k - 1]\n\n    if k == 1:\n        return min(arr1[0], arr2[0])\n\n    if len(arr1) < k // 2:\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n\n    if len(arr2) < k // 2:\n        return find_kth(arr1[k // 2:], arr2, k - k // 2)\n\n    if arr1[k // 2 - 1] < arr2[k // 2 - 1]:\n        return find_kth(arr1[k // 2:], arr2, k - k // 2)\n\n    return find_kth(arr1, arr2[k // 2:], k - k // 2)\n\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2) - 1:\n        return max(arr1[-1], arr2[-1])\n    if k == len(arr1) - 1:\n        return max(arr1[-1], arr2[0])\n    if k == len(arr2) - 1:\n        return max(arr1[0], arr2[-1])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if arr1[mid1] <= arr2[mid2]:\n        if k <= mid1 + mid2:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n    else:\n        if k <= mid1 + mid2:\n            return find_kth(arr1, arr2[:mid2], k)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2) - 1:\n        return max(arr1[-1], arr2[-1])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2) - 1:\n        return max(arr1[-1], arr2[-1])\n    if k < len(arr1):\n        if arr1[k] < arr2[0]:\n            return arr1[k]\n        else:\n            return find_kth(arr1, arr2[1:], k)\n    else:\n        if arr2[k - len(arr1)] < arr1[0]:\n            return arr2[k - len(arr1)]\n        else:\n            return find_kth(arr1[1:], arr2, k)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2) - 1:\n        return max(arr1[-1], arr2[-1])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if arr1[mid1] > arr2[mid2]:\n        if k <= mid1 + mid2:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n    else:\n        if k <= mid1 + mid2:\n            return find_kth(arr1, arr2[:mid2], k)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2) - 1:\n        return max(arr1[-1], arr2[-1])\n    mid_1 = len(arr1) // 2\n    mid_2 = len(arr2) // 2\n    if arr1[mid_1] <= arr2[mid_2]:\n        if k <= mid_1 + mid_2:\n            return find_kth(arr1[:mid_1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[mid_2 + 1:], k - mid_2 - 1)\n    else:\n        if k <= mid_1 + mid_2:\n            return find_kth(arr1, arr2[:mid_2], k)\n        else:\n            return find_kth(arr1[mid_1 + 1:], arr2, k - mid_1 - 1)\n\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n\n",
    "    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    if len(arr1) == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(len(arr1), k // 2)\n    j = min(len(arr2), k // 2)\n    if arr1[i - 1] > arr2[j - 1]:\n        return find_kth(arr1, arr2[j:], k - j)\n    else:\n        return find_kth(arr1[i:], arr2, k - i)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if len(arr1) == 1 and len(arr2) == 1:\n        return max(arr1[0], arr2[0])\n    if len(arr1) == 1:\n        if k == 1:\n            return max(arr1[0], arr2[0])\n        else:\n            return arr2[k - 1]\n    if len(arr2) == 1:\n        if k == 1:\n            return max(arr1[0], arr2[0])\n        else:\n            return arr1[k - 1]\n    if k == 1:\n        return max(arr1[0], arr2[0])\n    if k == 2:\n        return max(min(arr1[0], arr2[0]), min(arr1[1], arr2[1]))\n    if k == 3:\n        return max(min(arr1[0], arr2[0]), min(arr1[1], arr2[1]), min(arr1[2], arr2[2]))\n    if k == 4:\n        return max(min(arr1[0], arr2[0]), min(arr1[1], arr2[1]), min(arr1[2], arr2[2]), min(arr1[3], arr2[3]))\n    if k == 5:\n        return max(min(arr1[0], arr2[0]), min(arr1[1], arr2[1]), min(arr1[2], arr2[2]), min(arr1[3], arr2[3]),\n                   min(arr1[4], arr2[4]))\n    if k == 6:\n        return max(min(arr1[0], arr2[0]), min(arr1[1], arr2[1]), min(arr1[2], arr2[2]), min(arr1[3], arr2[3]),\n                   min(arr1[4], arr2[4]), min(arr1[5",
    "    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n\n",
    "    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    if len(arr1) == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(len(arr1), k // 2)\n    j = min(len(arr2), k // 2)\n    if arr1[i - 1] > arr2[j - 1]:\n        return find_kth(arr1, arr2[j:], k - j)\n    else:\n        return find_kth(arr1[i:], arr2, k - i)\n",
    "    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    mid1 = arr1[k // 2 - 1] if len(arr1) >= k // 2 else None\n    mid2 = arr2[k // 2 - 1] if len(arr2) >= k // 2 else None\n    if mid1 is None:\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n    if mid2 is None:\n        return find_kth(arr1[k // 2:], arr2, k - k // 2)\n    if mid1 < mid2:\n        return find_kth(arr1[k // 2:], arr2, k - k // 2)\n    return find_kth(arr1, arr2[k // 2:], k - k // 2)\n",
    "    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    if len(arr1) == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(len(arr1), k // 2)\n    j = min(len(arr2), k // 2)\n    if arr1[i - 1] > arr2[j - 1]:\n        return find_kth(arr1, arr2[j:], k - j)\n    else:\n        return find_kth(arr1[i:], arr2, k - i)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2) - 1:\n        return max(arr1[-1], arr2[-1])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n\n    if k == 0:\n        return min(arr1[0], arr2[0])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2) - 1:\n        return max(arr1[-1], arr2[-1])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n",
    "    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n",
    "    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    if len(arr1) <= k // 2:\n        if arr1[-1] <= arr2[k // 2 - 1]:\n            return arr2[k - len(arr1) - 1]\n        else:\n            return find_kth(arr1, arr2[k // 2:], k - k // 2)\n    if len(arr2) <= k // 2:\n        if arr2[-1] <= arr1[k // 2 - 1]:\n            return arr1[k - len(arr2) - 1]\n        else:\n            return find_kth(arr1[k // 2:], arr2, k - k // 2)\n    if arr1[k // 2 - 1] <= arr2[k // 2 - 1]:\n        return find_kth(arr1[k // 2:], arr2, k - k // 2)\n    else:\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2) - 1:\n        return max(arr1[-1], arr2[-1])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if arr1[mid1] <= arr2[mid2]:\n        if k <= mid1 + mid2:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n    else:\n        if k <= mid1 + mid2:\n            return find_kth(arr1, arr2[:mid2], k)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if len(arr1) <= k // 2:\n        if arr1[-1] <= arr2[k - len(arr1)]:\n            return arr2[k - len(arr1)]\n        else:\n            return find_kth(arr1, arr2[:k - len(arr1)], k - len(arr1))\n    if len(arr2) <= k // 2:\n        if arr2[-1] <= arr1[k - len(arr2)]:\n            return arr1[k - len(arr2)]\n        else:\n            return find_kth(arr1[:k - len(arr2)], arr2, k - len(arr2))\n    if arr1[k // 2] <= arr2[k // 2]:\n        return find_kth(arr1[k // 2:], arr2, k - k // 2)\n    else:\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n",
    "    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    if len(arr1) <= k // 2 - 1:\n        if arr1[-1] > arr2[k // 2 - 1]:\n            return find_kth(arr1, arr2[k // 2:], k - k // 2)\n        else:\n            return find_kth(arr1, arr2[:k // 2], k - k // 2)\n    if len(arr2) <= k // 2 - 1:\n        if arr2[-1] > arr1[k // 2 - 1]:\n            return find_kth(arr1[k // 2:], arr2, k - k // 2)\n        else:\n            return find_kth(arr1[:k // 2], arr2, k - k // 2)\n    if arr1[k // 2 - 1] > arr2[k // 2 - 1]:\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n    else:\n        return find_kth(arr1[k // 2:], arr2, k - k // 2)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2) - 1:\n        return max(arr1[-1], arr2[-1])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n\n",
    "    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n\n    if len(arr1) < k // 2:\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n    if len(arr2) < k // 2:\n        return find_kth(arr1[k // 2:], arr2, k - k // 2)\n\n    if arr1[k // 2 - 1] < arr2[k // 2 - 1]:\n        return find_kth(arr1[k // 2:], arr2, k - k // 2)\n    return find_kth(arr1, arr2[k // 2:], k - k // 2)\n\n",
    "    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    if len(arr1) == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(len(arr1), k // 2)\n    j = min(len(arr2), k // 2)\n    if arr1[i - 1] > arr2[j - 1]:\n        return find_kth(arr1, arr2[j:], k - j)\n    else:\n        return find_kth(arr1[i:], arr2, k - i)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2) - 1:\n        return max(arr1[-1], arr2[-1])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n\n",
    "    if k > len(arr1) + len(arr2):\n        return -1\n\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n        if i + j == k:\n            return min(arr1[i], arr2[j])\n\n    if i == len(arr1):\n        return arr2[k - i]\n    else:\n        return arr1[k - j]\n\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if len(arr1) == 1 and len(arr2) == 1:\n        return max(arr1[0], arr2[0])\n    if len(arr1) == 1:\n        if k == 1:\n            return min(arr1[0], arr2[0])\n        else:\n            return arr2[k-1]\n    if len(arr2) == 1:\n        if k == 1:\n            return min(arr1[0], arr2[0])\n        else:\n            return arr1[k-1]\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if arr1[mid1] <= arr2[mid2]:\n        if k <= mid1 + mid2 + 1:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    else:\n        if k <= mid1 + mid2 + 1:\n            return find_kth(arr1, arr2[:mid2], k)\n        else:\n            return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n",
    "    if k > len(arr1) + len(arr2):\n        return -1\n\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2) and k > 0:\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n        k -= 1\n\n    if k == 0:\n        return min(arr1[i], arr2[j])\n    elif k > 0:\n        if i == len(arr1):\n            return arr2[j + k - 1]\n        else:\n            return arr1[i + k - 1]\n    else:\n        return -1\n\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    i = k // 2\n    j = k - i\n    if i >= len(arr1):\n        i = len(arr1) - 1\n        j = k - i\n    if j >= len(arr2):\n        j = len(arr2) - 1\n        i = k - j\n    if arr1[i] > arr2[j]:\n        return find_kth(arr1[:i], arr2[j:], i)\n    else:\n        return find_kth(arr1[i:], arr2[:j], j)\n",
    "    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    if len(arr1) < k // 2:\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n    if len(arr2) < k // 2:\n        return find_kth(arr1[k // 2:], arr2, k - k // 2)\n    if arr1[k // 2 - 1] < arr2[k // 2 - 1]:\n        return find_kth(arr1[k // 2:], arr2, k - k // 2)\n    else:\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if len(arr1) == 1 and len(arr2) == 1:\n        return max(arr1[0], arr2[0])\n    if len(arr1) == 1:\n        if k == 1:\n            return min(arr1[0], arr2[0])\n        if k == 2:\n            return max(arr1[0], arr2[0])\n    if len(arr2) == 1:\n        if k == 1:\n            return min(arr1[0], arr2[0])\n        if k == 2:\n            return max(arr1[0], arr2[0])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if arr1[mid1] < arr2[mid2]:\n        if k <= mid1 + mid2 + 1:\n            return find_kth(arr1, arr2[:mid2], k)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if k <= mid1 + mid2 + 1:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n\n",
    "    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n\n    if len(arr1) < k // 2:\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n    else:\n        if arr1[k // 2 - 1] < arr2[k // 2 - 1]:\n            return find_kth(arr1[k // 2:], arr2, k - k // 2)\n        else:\n            return find_kth(arr1, arr2[k // 2:], k - k // 2)\n\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2) - 1:\n        return max(arr1[-1], arr2[-1])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n        else:\n            return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n",
    "    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    if len(arr1) < len(arr2):\n        return find_kth(arr2, arr1, k)\n    if len(arr2) < k // 2:\n        return find_kth(arr1[k // 2:], arr2, k - k // 2)\n    if arr1[k // 2 - 1] > arr2[k // 2 - 1]:\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n    return find_kth(arr1[k // 2:], arr2, k - k // 2)\n",
    "    if k > len(arr1) + len(arr2):\n        return -1\n    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    if len(arr1) < k // 2:\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n    if len(arr2) < k // 2:\n        return find_kth(arr1[k // 2:], arr2, k - k // 2)\n    if arr1[k // 2 - 1] < arr2[k // 2 - 1]:\n        return find_kth(arr1[k // 2:], arr2, k - k // 2)\n    return find_kth(arr1, arr2[k // 2:], k - k // 2)\n",
    "    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    if len(arr1) <= k // 2 - 1:\n        if arr1[-1] < arr2[k // 2 - 1]:\n            return arr2[k - len(arr1) - 1]\n        else:\n            return find_kth(arr1, arr2[k // 2:], k - k // 2)\n    if len(arr2) <= k // 2 - 1:\n        if arr2[-1] < arr1[k // 2 - 1]:\n            return arr1[k - len(arr2) - 1]\n        else:\n            return find_kth(arr1[k // 2:], arr2, k - k // 2)\n    if arr1[k // 2 - 1] < arr2[k // 2 - 1]:\n        return find_kth(arr1[k // 2:], arr2, k - k // 2)\n    else:\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == 1:\n        return max(arr1[0], arr2[0])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if arr1[mid1] < arr2[mid2]:\n        if k <= mid1 + mid2:\n            return find_kth(arr1, arr2[:mid2], k)\n        else:\n            return find_kth(arr1[mid1:], arr2, k - mid1)\n    else:\n        if k <= mid1 + mid2:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[mid2:], k - mid2)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2) - 1:\n        return max(arr1[-1], arr2[-1])\n    if len(arr1) < len(arr2):\n        return find_kth(arr2, arr1, k)\n    if k < len(arr2):\n        if arr1[k] < arr2[k]:\n            return find_kth(arr1[k:], arr2, k)\n        else:\n            return find_kth(arr1, arr2[k:], k)\n    else:\n        if arr1[k] < arr2[-1]:\n            return find_kth(arr1[k:], arr2, k - len(arr1))\n        else:\n            return find_kth(arr1, arr2[k - len(arr1):], k - len(arr1))\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n\nprint(find_kth([1,2,3,4,5,6,7,8], [2,3,4,5,6,7,8,9], 7))",
    "    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    if len(arr1) == 0:\n        return arr2[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(len(arr1), k//2)\n    j = min(len(arr2), k//2)\n    if arr1[i-1] > arr2[j-1]:\n        return find_kth(arr1, arr2[j:], k-j)\n    else:\n        return find_kth(arr1[i:], arr2, k-i)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if len(arr1) + len(arr2) <= k:\n        return max(arr1[-1], arr2[-1])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if arr1[mid1] < arr2[mid2]:\n        if mid1 + mid2 + 1 >= k:\n            return find_kth(arr1, arr2[:mid2], k)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if mid1 + mid2 + 1 >= k:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    i = len(arr1) // 2\n    j = len(arr2) // 2\n    if i + j < k:\n        if arr1[i] > arr2[j]:\n            return find_kth(arr1, arr2[j + 1:], k - j - 1)\n        else:\n            return find_kth(arr1[i + 1:], arr2, k - i - 1)\n    else:\n        if arr1[i] > arr2[j]:\n            return find_kth(arr1[:i], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:j], k)\n\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n",
    "    # TODO: Implement me\n    pass\n",
    "    assert k > 0 and k <= len(arr1) + len(arr2)\n    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2):\n        return max(arr1[-1], arr2[-1])\n    if k == len(arr1):\n        return max(arr1[-1], arr2[k - len(arr1) - 1])\n    if k == len(arr2):\n        return max(arr2[-1], arr1[k - len(arr2) - 1])\n    mid1 = min(k // 2, len(arr1))\n    mid2 = min(k // 2, len(arr2))\n    if arr1[mid1 - 1] > arr2[mid2 - 1]:\n        return find_kth(arr1, arr2[mid2:], k - mid2)\n    else:\n        return find_kth(arr1[mid1:], arr2, k - mid1)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n        else:\n            return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n",
    "    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n        if i + j == k:\n            return min(arr1[i], arr2[j])\n    return -1\n",
    "    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    if len(arr1) + len(arr2) < k:\n        return -1\n    i = min(len(arr1), k // 2)\n    j = min(len(arr2), k // 2)\n    if arr1[i - 1] > arr2[j - 1]:\n        return find_kth(arr1, arr2[j:], k - j)\n    else:\n        return find_kth(arr1[i:], arr2, k - i)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n\n",
    "    if not arr1:\n        return arr2[k]\n    if not arr2:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if len(arr1) < len(arr2):\n        return find_kth(arr2, arr1, k)\n    if k > len(arr2):\n        if arr1[k - len(arr2) - 1] >= arr2[-1]:\n            return arr1[k - len(arr2) - 1]\n        else:\n            return find_kth(arr1, arr2[k - len(arr1):], k - len(arr2))\n    else:\n        if arr1[k - 1] >= arr2[k - 1]:\n            return arr1[k - 1]\n        else:\n            return find_kth(arr1[:k], arr2, k)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n\nprint(find_kth([1,2,3,4,5,6,7,8,9,10], [2,3,4,5,6,7,8,9,10,11], 5))",
    "    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2) - 1:\n        return max(arr1[-1], arr2[-1])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n",
    "    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    if len(arr1) == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(len(arr1), k // 2)\n    j = min(len(arr2), k // 2)\n    if arr1[i - 1] > arr2[j - 1]:\n        return find_kth(arr1, arr2[j:], k - j)\n    else:\n        return find_kth(arr1[i:], arr2, k - i)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2) - 1:\n        return max(arr1[-1], arr2[-1])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n\n",
    "    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    if len(arr1) == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    p1 = min(k // 2, len(arr1))\n    p2 = k - p1\n    if arr1[p1 - 1] < arr2[p2 - 1]:\n        return find_kth(arr1[p1:], arr2, k - p1)\n    elif arr1[p1 - 1] > arr2[p2 - 1]:\n        return find_kth(arr1, arr2[p2:], k - p2)\n    else:\n        return arr1[p1 - 1]\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2) - 1:\n        return max(arr1[-1], arr2[-1])\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    if len(arr1) == 1:\n        return min(arr1[0], arr2[k])\n    if len(arr2) == 1:\n        return min(arr2[0], arr1[k])\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    if k == 2:\n        return max(min(arr1[0], arr2[1]), min(arr1[1], arr2[0]))\n    i = min(len(arr1), k // 2)\n    j = min(len(arr2), k // 2)\n    if arr1[i - 1] < arr2[j - 1]:\n        return find_kth(arr1[i:], arr2, k - i)\n    else:\n        return find_kth(arr1, arr2[j:], k - j)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if len(arr1) == 1:\n        if k == 1:\n            return min(arr1[0], arr2[0])\n        if arr1[0] > arr2[k - 1]:\n            return arr2[k - 1]\n        if arr1[0] > arr2[k - 2]:\n            return arr1[0]\n        return arr2[k - 2]\n    if len(arr2) == 1:\n        if k == 1:\n            return min(arr1[0], arr2[0])\n        if arr2[0] > arr1[k - 1]:\n            return arr1[k - 1]\n        if arr2[0] > arr1[k - 2]:\n            return arr2[0]\n        return arr1[k - 2]\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    if arr1[-1] < arr2[0]:\n        if k <= len(arr1):\n            return arr1[k - 1]\n        return arr2[k - len(arr1) - 1]\n    if arr1[0] > arr2[-1]:\n        if k <= len(arr2):\n            return arr2[k - 1]\n        return arr1[k - len(arr2) - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    if k == 2:\n        return min(arr1[1], arr2[1], arr1[0] + arr2[0])\n    if k == 3:\n        return min(arr1[2], arr2[2], arr1[1] + arr2[0], arr1[0] + arr2[1])\n    if k == 4:\n        return min(arr1[3], arr2[3], arr1[2] + arr2[0], arr1",
    "    if not arr1:\n        return arr2[k]\n    if not arr2:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n\n",
    "    if not arr1 or not arr2:\n        return -1\n\n    if k > len(arr1) + len(arr2):\n        return -1\n\n    i = 0\n    j = 0\n    while k > 0:\n        if i == len(arr1):\n            return arr2[j + k - 1]\n        if j == len(arr2):\n            return arr1[i + k - 1]\n\n        if k == 1:\n            return min(arr1[i], arr2[j])\n\n        if k == 2:\n            return max(arr1[i], arr2[j])\n\n        if i + k // 2 - 1 >= len(arr1):\n            j += k // 2\n        elif j + k // 2 - 1 >= len(arr2):\n            i += k // 2\n        else:\n            if arr1[i + k // 2 - 1] < arr2[j + k // 2 - 1]:\n                i += k // 2\n            else:\n                j += k // 2\n\n        k -= k // 2\n\n    return -1\n\n",
    "    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if i + j == k - 1:\n                return arr1[i]\n            i += 1\n        else:\n            if i + j == k - 1:\n                return arr2[j]\n            j += 1\n    if i == len(arr1):\n        return arr2[k - len(arr1) - 1]\n    else:\n        return arr1[k - len(arr2) - 1]\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if len(arr1) == 1 and len(arr2) == 1:\n        return max(arr1[0], arr2[0])\n    if len(arr1) == 1:\n        if k == 1:\n            return min(arr1[0], arr2[0])\n        else:\n            return arr2[k-1]\n    if len(arr2) == 1:\n        if k == 1:\n            return min(arr1[0], arr2[0])\n        else:\n            return arr1[k-1]\n    i = len(arr1) // 2\n    j = len(arr2) // 2\n    if i + j < k:\n        if arr1[i] > arr2[j]:\n            return find_kth(arr1, arr2[j+1:], k-j-1)\n        else:\n            return find_kth(arr1[i+1:], arr2, k-i-1)\n    else:\n        if arr1[i] > arr2[j]:\n            return find_kth(arr1[:i], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:j], k)\n",
    "    if not arr1:\n        return arr2[k]\n    if not arr2:\n        return arr1[k]\n\n    if k == 0:\n        return min(arr1[0], arr2[0])\n\n    if len(arr1) == 1 and len(arr2) == 1:\n        return max(arr1[0], arr2[0])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    if len(arr1) <= k:\n        if arr1[-1] >= arr2[k - len(arr1)]:\n            return arr1[-1]\n        else:\n            return find_kth(arr1, arr2[k - len(arr1):], k - len(arr1))\n    else:\n        if arr1[k] >= arr2[0]:\n            return arr1[k]\n        else:\n            return find_kth(arr1[:k], arr2, k)\n",
    "    if not arr1:\n        return arr2[k]\n    if not arr2:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if len(arr1) == 1 and len(arr2) == 1:\n        return max(arr1[0], arr2[0])\n    if len(arr1) == 1:\n        if arr1[0] > arr2[k]:\n            return arr2[k]\n        else:\n            return arr2[k-1]\n    if len(arr2) == 1:\n        if arr2[0] > arr1[k]:\n            return arr1[k]\n        else:\n            return arr1[k-1]\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if arr1[mid1] < arr2[mid2]:\n        if mid1 + mid2 + 1 > k:\n            return find_kth(arr1, arr2[:mid2], k)\n        else:\n            return find_kth(arr1[mid1:], arr2, k-mid1)\n    else:\n        if mid1 + mid2 + 1 > k:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[mid2:], k-mid2)\n",
    "    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    if len(arr1) == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(len(arr1), k // 2)\n    j = min(len(arr2), k // 2)\n    if arr1[i - 1] > arr2[j - 1]:\n        return find_kth(arr1, arr2[j:], k - j)\n    else:\n        return find_kth(arr1[i:], arr2, k - i)\n",
    "    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    if len(arr1) == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(len(arr1), k // 2)\n    j = min(len(arr2), k // 2)\n    if arr1[i - 1] > arr2[j - 1]:\n        return find_kth(arr1, arr2[j:], k - j)\n    else:\n        return find_kth(arr1[i:], arr2, k - i)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n\n    i = k // 2\n    j = k - i\n\n    if i >= len(arr1):\n        i = len(arr1) - 1\n        j = k - i\n    if j >= len(arr2):\n        j = len(arr2) - 1\n        i = k - j\n\n    if arr1[i] < arr2[j]:\n        return find_kth(arr1[i + 1:], arr2, k - i - 1)\n    else:\n        return find_kth(arr1, arr2[j + 1:], k - j - 1)\n\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2) - 1:\n        return max(arr1[-1], arr2[-1])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == 1:\n        return max(arr1[0], arr2[0])\n    if k == 2:\n        return min(arr1[1], arr2[1])\n    if k == 3:\n        return max(arr1[1], arr2[1])\n    if k == 4:\n        return min(arr1[2], arr2[2])\n    if k == 5:\n        return max(arr1[2], arr2[2])\n    if k == 6:\n        return min(arr1[3], arr2[3])\n    if k == 7:\n        return max(arr1[3], arr2[3])\n    if k == 8:\n        return min(arr1[4], arr2[4])\n    if k == 9:\n        return max(arr1[4], arr2[4])\n    if k == 10:\n        return min(arr1[5], arr2[5])\n    if k == 11:\n        return max(arr1[5], arr2[5])\n    if k == 12:\n        return min(arr1[6], arr2[6])\n    if k == 13:\n        return max(arr1[6], arr2[6])\n    if k == 14:\n        return min(arr1[7], arr2[7])\n    if k == 15:\n        return max(arr1[7], arr2[7])\n    if k == 16:\n        return min(arr1[8], arr2[8])\n    if k == 17:\n        return max(arr1[8], arr2[8])\n    if k == 18:\n        return min(arr1[9], arr2[9])\n    if k == 19:\n        return max(arr1[9], arr2[9])\n    if k == 20:\n        return min(arr1[10], arr2[10])\n    if k == 21:\n        return max(",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2) - 1:\n        return max(arr1[-1], arr2[-1])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if len(arr1) < len(arr2):\n        arr1, arr2 = arr2, arr1\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if len(arr1) < len(arr2):\n        arr1, arr2 = arr2, arr1\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if len(arr1) < len(arr2):\n        arr1, arr2 = arr2, arr1\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if len(arr1) < len(arr2):\n        arr1, arr2 = arr2, arr1\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if len(arr1) < len(arr2):\n        arr1, arr2 = arr2, arr1\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if len(arr1) < len(arr2):\n        arr1, arr2 = arr2, arr1\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if len(arr1) < len(arr2):\n        arr1, arr2 = arr2, arr1\n    if len(arr2) == 0:\n        return arr1[",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2) - 1:\n        return max(arr1[-1], arr2[-1])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2) - 1:\n        return max(arr1[-1], arr2[-1])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    if len(arr1) == 1:\n        return min(arr1[0], arr2[k])\n    if len(arr2) == 1:\n        return min(arr2[0], arr1[k])\n    if k == 1:\n        return min(arr1[1], arr2[1])\n    if k == 2:\n        return min(arr1[1], arr2[1], arr1[0], arr2[0])\n    if k == 3:\n        return min(arr1[2], arr2[2], arr1[1], arr2[1], arr1[0], arr2[0])\n    if k == 4:\n        return min(arr1[3], arr2[3], arr1[2], arr2[2], arr1[1], arr2[1], arr1[0], arr2[0])\n    if k == 5:\n        return min(arr1[4], arr2[4], arr1[3], arr2[3], arr1[2], arr2[2], arr1[1], arr2[1], arr1[0], arr2[0])\n    if k == 6:\n        return min(arr1[5], arr2[5], arr1[4], arr2[4], arr1[3], arr2[3], arr1[2], arr2[2], arr1[1], arr2[1], arr1[0], arr2[0])\n    if k == 7:\n        return min(arr1[6], arr2[6], arr1[5], arr2[5], arr1[4], arr2[4], arr1[3], arr2[3], arr1[2], arr2[2], arr1[1], arr2[1], arr1[0], arr2[0])\n    if k == 8",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if len(arr1) == 1 and len(arr2) == 1:\n        return max(arr1[0], arr2[0])\n    if len(arr1) == 1:\n        if k == 1:\n            return min(arr1[0], arr2[0])\n        if k == 2:\n            return max(arr1[0], arr2[0])\n    if len(arr2) == 1:\n        if k == 1:\n            return min(arr1[0], arr2[0])\n        if k == 2:\n            return max(arr1[0], arr2[0])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if arr1[mid1] <= arr2[mid2]:\n        if k <= mid1 + mid2 + 1:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n    else:\n        if k <= mid1 + mid2 + 1:\n            return find_kth(arr1, arr2[:mid2], k)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n\n    if k == 0:\n        return min(arr1[0], arr2[0])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n\n",
    "    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    if len(arr1) < k // 2:\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n    if len(arr2) < k // 2:\n        return find_kth(arr1[k // 2:], arr2, k - k // 2)\n    if arr1[k // 2 - 1] > arr2[k // 2 - 1]:\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n    return find_kth(arr1[k // 2:], arr2, k - k // 2)\n",
    "    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    if len(arr1) < k // 2:\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n    if len(arr2) < k // 2:\n        return find_kth(arr1[k // 2:], arr2, k - k // 2)\n    if arr1[k // 2 - 1] < arr2[k // 2 - 1]:\n        return find_kth(arr1[k // 2:], arr2, k - k // 2)\n    else:\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n",
    "    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if arr1[mid1] <= arr2[mid2]:\n        if k <= mid1 + mid2 + 1:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n    else:\n        if k <= mid1 + mid2 + 1:\n            return find_kth(arr1, arr2[:mid2], k)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n\n",
    "    if not arr1 or not arr2:\n        return arr1[k - 1] if arr1 else arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    if len(arr1) < k // 2:\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n    if arr1[k // 2 - 1] < arr2[k // 2 - 1]:\n        return find_kth(arr1[k // 2:], arr2, k - k // 2)\n    return find_kth(arr1, arr2[k // 2:], k - k // 2)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n",
    "    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    if len(arr1) < k // 2:\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n    else:\n        if arr1[k // 2 - 1] < arr2[k // 2 - 1]:\n            return find_kth(arr1[k // 2:], arr2, k - k // 2)\n        else:\n            return find_kth(arr1, arr2[k // 2:], k - k // 2)\n",
    "    if not arr1:\n        return arr2[k]\n    if not arr2:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == 1:\n        return max(arr1[0], arr2[0])\n    if k == 2:\n        return min(arr1[1], arr2[1])\n    if k == 3:\n        return max(arr1[1], arr2[1])\n    if k == 4:\n        return min(arr1[2], arr2[2])\n    if k == 5:\n        return max(arr1[2], arr2[2])\n    if k == 6:\n        return min(arr1[3], arr2[3])\n    if k == 7:\n        return max(arr1[3], arr2[3])\n    if k == 8:\n        return min(arr1[4], arr2[4])\n    if k == 9:\n        return max(arr1[4], arr2[4])\n    if k == 10:\n        return min(arr1[5], arr2[5])\n    if k == 11:\n        return max(arr1[5], arr2[5])\n    if k == 12:\n        return min(arr1[6], arr2[6])\n    if k == 13:\n        return max(arr1[6], arr2[6])\n    if k == 14:\n        return min(arr1[7], arr2[7])\n    if k == 15:\n        return max(arr1[7], arr2[7])\n    if k == 16:\n        return min(arr1[8], arr2[8])\n    if k == 17:\n        return max(arr1[8], arr2[8])\n    if k == 18:\n        return min(arr1[9], arr2[9])\n    if k == 19:\n        return max(arr1[9], arr2[9])\n    if k == 20:\n        return min(arr1[10], arr2[10])\n    if k == 21:\n        return max(arr1[10], arr2[",
    "    if not arr1:\n        return arr2[k]\n    if not arr2:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == 1:\n        return max(arr1[0], arr2[0])\n    if k == 2:\n        return min(arr1[1], arr2[1])\n    if k == 3:\n        return max(arr1[1], arr2[1])\n    if len(arr1) == 1:\n        return arr2[k - 1]\n    if len(arr2) == 1:\n        return arr1[k - 1]\n    if len(arr1) == 2:\n        return arr2[k - 2]\n    if len(arr2) == 2:\n        return arr1[k - 2]\n    if k % 2 == 0:\n        if arr1[k // 2] > arr2[k // 2]:\n            return find_kth(arr1, arr2[k // 2:], k // 2)\n        else:\n            return find_kth(arr1[k // 2:], arr2, k // 2)\n    else:\n        if arr1[k // 2] > arr2[k // 2]:\n            return find_kth(arr1, arr2[k // 2 + 1:], k // 2)\n        else:\n            return find_kth(arr1[k // 2 + 1:], arr2, k // 2)\n",
    "    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    if len(arr1) <= k // 2 - 1:\n        if arr1[-1] > arr2[k // 2 - 1]:\n            return find_kth(arr1, arr2[k // 2:], k - k // 2)\n        else:\n            return find_kth(arr1, arr2[:k // 2], k - k // 2)\n    if len(arr2) <= k // 2 - 1:\n        if arr2[-1] > arr1[k // 2 - 1]:\n            return find_kth(arr1[k // 2:], arr2, k - k // 2)\n        else:\n            return find_kth(arr1[:k // 2], arr2, k - k // 2)\n    if arr1[k // 2 - 1] < arr2[k // 2 - 1]:\n        return find_kth(arr1[k // 2:], arr2, k - k // 2)\n    else:\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n",
    "    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    if len(arr1) == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(len(arr1), k // 2)\n    j = min(len(arr2), k // 2)\n    if arr1[i - 1] > arr2[j - 1]:\n        return find_kth(arr1, arr2[j:], k - j)\n    else:\n        return find_kth(arr1[i:], arr2, k - i)\n",
    "    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    if not arr1:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(len(arr1), k // 2)\n    j = min(len(arr2), k // 2)\n    if arr1[i - 1] > arr2[j - 1]:\n        return find_kth(arr1, arr2[j:], k - j)\n    else:\n        return find_kth(arr1[i:], arr2, k - i)\n",
    "    if not arr1:\n        return arr2[k]\n    if not arr2:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == 1:\n        return max(arr1[0], arr2[0])\n    if len(arr1) == 1:\n        return arr2[k - 1]\n    if len(arr2) == 1:\n        return arr1[k - 1]\n    if len(arr1) == 2:\n        return arr2[k - 2]\n    if len(arr2) == 2:\n        return arr1[k - 2]\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if arr1[mid1] < arr2[mid2]:\n        if k <= mid1 + mid2:\n            return find_kth(arr1[:mid1 + 1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n    else:\n        if k <= mid1 + mid2:\n            return find_kth(arr1, arr2[:mid2 + 1], k)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if k > mid1 + mid2:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n\n",
    "    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    if len(arr1) < k // 2:\n        if arr1[-1] < arr2[k // 2 - 1]:\n            return arr2[k - len(arr1) - 1]\n        else:\n            return find_kth(arr1, arr2[k // 2:], k - k // 2)\n    if len(arr2) < k // 2:\n        if arr2[-1] < arr1[k // 2 - 1]:\n            return arr1[k - len(arr2) - 1]\n        else:\n            return find_kth(arr1[k // 2:], arr2, k - k // 2)\n    if arr1[k // 2 - 1] < arr2[k // 2 - 1]:\n        return find_kth(arr1[k // 2:], arr2, k - k // 2)\n    else:\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2) - 1:\n        return max(arr1[-1], arr2[-1])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n\n    if k == 0:\n        return min(arr1[0], arr2[0])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n",
    "    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    if len(arr1) < k // 2:\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n    if arr1[k // 2 - 1] < arr2[k // 2 - 1]:\n        return find_kth(arr1[k // 2:], arr2, k - k // 2)\n    else:\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n\n",
    "    if k > len(arr1) + len(arr2):\n        return None\n    if len(arr1) == 0:\n        return arr2[k-1]\n    if len(arr2) == 0:\n        return arr1[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    if len(arr1) < k/2:\n        return find_kth(arr1, arr2[k//2:], k-k//2)\n    if len(arr2) < k/2:\n        return find_kth(arr1[k//2:], arr2, k-k//2)\n    if arr1[k//2-1] < arr2[k//2-1]:\n        return find_kth(arr1[k//2:], arr2, k-k//2)\n    else:\n        return find_kth(arr1, arr2[k//2:], k-k//2)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == 1:\n        return max(arr1[0], arr2[0])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if arr1[mid1] <= arr2[mid2]:\n        if mid1 + mid2 < k:\n            return find_kth(arr1[mid1:], arr2, k - mid1)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n    else:\n        if mid1 + mid2 < k:\n            return find_kth(arr1, arr2[mid2:], k - mid2)\n        else:\n            return find_kth(arr1[:mid1], arr2, k)",
    "    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if i + j == k:\n                return arr1[i]\n            i += 1\n        else:\n            if i + j == k:\n                return arr2[j]\n            j += 1\n    if i < len(arr1):\n        return arr1[k - j]\n    else:\n        return arr2[k - i]\n\n",
    "    if not arr1:\n        return arr2[k]\n    if not arr2:\n        return arr1[k]\n\n    if k == 0:\n        return min(arr1[0], arr2[0])\n\n    if len(arr1) == 1 and len(arr2) == 1:\n        return max(arr1[0], arr2[0])\n\n    if len(arr1) == 1:\n        if k == 1:\n            return max(arr1[0], arr2[0])\n        else:\n            return arr2[k - 1]\n\n    if len(arr2) == 1:\n        if k == 1:\n            return max(arr1[0], arr2[0])\n        else:\n            return arr1[k - 1]\n\n    if k == 1:\n        return max(arr1[0], arr2[0])\n\n    if k == 2:\n        return max(min(arr1[0], arr2[0]), min(arr1[1], arr2[1]))\n\n    if k == 3:\n        return max(min(arr1[0], arr2[0]), min(arr1[1], arr2[1]), min(arr1[2], arr2[2]))\n\n    if k == 4:\n        return max(min(arr1[0], arr2[0]), min(arr1[1], arr2[1]), min(arr1[2], arr2[2]), min(arr1[3], arr2[3]))\n\n    if k == 5:\n        return max(min(arr1[0], arr2[0]), min(arr1[1], arr2[1]), min(arr1[2], arr2[2]), min(arr1[3], arr2[3]),\n                   min(arr1[4], arr2[4]))\n\n    if k == 6:\n        return max(min(arr1[0], arr2[0]), min(arr1[1], arr2[1]), min(arr1[2], arr2[2]), min(arr1[3], arr2[3]),\n                   min(arr1[4], arr2[4]), min(arr1[5], arr2[5]))\n\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2) - 1:\n        return max(arr1[-1], arr2[-1])\n\n    mid_arr1 = arr1[len(arr1) // 2]\n    mid_arr2 = arr2[len(arr2) // 2]\n\n    if mid_arr1 <= mid_arr2:\n        if k > len(arr1) // 2 + len(arr2) // 2:\n            return find_kth(arr1, arr2[len(arr2) // 2 + 1:], k - len(arr2) // 2 - 1)\n        else:\n            return find_kth(arr1[:len(arr1) // 2], arr2, k)\n    else:\n        if k > len(arr1) // 2 + len(arr2) // 2:\n            return find_kth(arr1[len(arr1) // 2 + 1:], arr2, k - len(arr1) // 2 - 1)\n        else:\n            return find_kth(arr1, arr2[:len(arr2) // 2], k)\n\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if len(arr1) < len(arr2):\n        arr1, arr2 = arr2, arr1\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if len(arr1) < len(arr2):\n        arr1, arr2 = arr2, arr1\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if len(arr1) < len(arr2):\n        arr1, arr2 = arr2, arr1\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if len(arr1) < len(arr2):\n        arr1, arr2 = arr2, arr1\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if len(arr1) < len(arr2):\n        arr1, arr2 = arr2, arr1\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if len(arr1) < len(arr2):\n        arr1, arr2 = arr2, arr1\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if len(arr1) < len(arr2):\n        arr1, arr2 = arr2, arr1\n    if len(arr2) == 0:\n        return arr1[",
    "    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    mid1 = arr1[k // 2 - 1] if len(arr1) >= k // 2 else None\n    mid2 = arr2[k // 2 - 1] if len(arr2) >= k // 2 else None\n    if mid2 is None or (mid1 is not None and mid1 < mid2):\n        return find_kth(arr1[k // 2:], arr2, k - k // 2)\n    return find_kth(arr1, arr2[k // 2:], k - k // 2)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2) - 1:\n        return max(arr1[-1], arr2[-1])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    if len(arr1) == 1:\n        if arr1[0] > arr2[k-1]:\n            return arr2[k-1]\n        else:\n            return arr2[k]\n    if len(arr2) == 1:\n        if arr2[0] > arr1[k-1]:\n            return arr1[k-1]\n        else:\n            return arr1[k]\n    i = min(len(arr1), k//2)\n    j = min(len(arr2), k//2)\n    if arr1[i-1] > arr2[j-1]:\n        return find_kth(arr1, arr2[j:], k-j)\n    else:\n        return find_kth(arr1[i:], arr2, k-i)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2) - 1:\n        return max(arr1[-1], arr2[-1])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if arr1[mid1] <= arr2[mid2]:\n        if k <= mid1 + mid2:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n    else:\n        if k <= mid1 + mid2:\n            return find_kth(arr1, arr2[:mid2], k)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    if len(arr1) > k:\n        return find_kth(arr1[:k], arr2, k)\n    else:\n        return find_kth(arr1, arr2[k - len(arr1):], k - len(arr1))\n",
    "    if not arr1:\n        return arr2[k]\n    if not arr2:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == 1:\n        return max(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2) - 1:\n        return max(arr1[-1], arr2[-1])\n    if k == len(arr1) + len(arr2) - 2:\n        return min(arr1[-1], arr2[-1])\n    if k > len(arr1) + len(arr2) - 2:\n        return None\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    i = min(len(arr1) - 1, k // 2)\n    j = min(len(arr2) - 1, k // 2)\n    if arr1[i] > arr2[j]:\n        return find_kth(arr1, arr2[j + 1:], k - j - 1)\n    else:\n        return find_kth(arr1[i + 1:], arr2, k - i - 1)\n\n",
    "    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    if len(arr1) < k // 2:\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n    else:\n        if arr1[k // 2 - 1] < arr2[k // 2 - 1]:\n            return find_kth(arr1[k // 2:], arr2, k - k // 2)\n        else:\n            return find_kth(arr1, arr2[k // 2:], k - k // 2)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2) - 1:\n        return max(arr1[-1], arr2[-1])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if arr1[mid1] < arr2[mid2]:\n        if mid1 + mid2 < k:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n    else:\n        if mid1 + mid2 < k:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[:mid1], arr2, k)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2) - 1:\n        return max(arr1[-1], arr2[-1])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n        else:\n            return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2) - 1:\n        return max(arr1[-1], arr2[-1])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n        else:\n            return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n",
    "    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    if len(arr1) <= k // 2:\n        if arr1[-1] <= arr2[k // 2 - 1]:\n            return arr2[k - len(arr1) - 1]\n        else:\n            return find_kth(arr1, arr2[k // 2:], k - k // 2)\n    if len(arr2) <= k // 2:\n        if arr2[-1] <= arr1[k // 2 - 1]:\n            return arr1[k - len(arr2) - 1]\n        else:\n            return find_kth(arr1[k // 2:], arr2, k - k // 2)\n    if arr1[k // 2 - 1] <= arr2[k // 2 - 1]:\n        return find_kth(arr1[k // 2:], arr2, k - k // 2)\n    else:\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n\n    if k == 0:\n        return min(arr1[0], arr2[0])\n\n    if len(arr1) <= k // 2:\n        if arr1[-1] <= arr2[k // 2]:\n            return arr2[k - len(arr1)]\n        else:\n            return find_kth(arr1, arr2[:k // 2], k // 2)\n    elif len(arr2) <= k // 2:\n        if arr2[-1] <= arr1[k // 2]:\n            return arr1[k - len(arr2)]\n        else:\n            return find_kth(arr1[:k // 2], arr2, k // 2)\n    else:\n        if arr1[k // 2] <= arr2[k // 2]:\n            return find_kth(arr1[k // 2:], arr2, k - k // 2)\n        else:\n            return find_kth(arr1, arr2[k // 2:], k - k // 2)\n\n",
    "    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    if len(arr1) == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(len(arr1), k // 2)\n    j = min(len(arr2), k // 2)\n    if arr1[i - 1] > arr2[j - 1]:\n        return find_kth(arr1, arr2[j:], k - j)\n    else:\n        return find_kth(arr1[i:], arr2, k - i)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n",
    "    if not arr1:\n        return arr2[k - 1]\n    if not arr2:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    if len(arr1) == 1:\n        return min(arr1[0], arr2[k - 1])\n    if len(arr2) == 1:\n        return min(arr2[0], arr1[k - 1])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if arr1[mid1] < arr2[mid2]:\n        if k <= mid1 + mid2 + 1:\n            return find_kth(arr1, arr2[:mid2], k)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if k <= mid1 + mid2 + 1:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n\n    if k == 0:\n        return min(arr1[0], arr2[0])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n\n    if k == 0:\n        return min(arr1[0], arr2[0])\n\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n\n    if k > len(arr1) + len(arr2):\n        return -1\n\n    if k > len(arr1):\n        return find_kth(arr1, arr2[k - len(arr1):], len(arr1))\n\n    if arr1[k // 2] > arr2[k // 2]:\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n    else:\n        return find_kth(arr1[k // 2:], arr2, k - k // 2)\n\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if len(arr1) == 1 and len(arr2) == 1:\n        return max(arr1[0], arr2[0])\n    if len(arr1) == 1:\n        if arr1[0] >= arr2[k - 1] and arr1[0] <= arr2[k]:\n            return arr1[0]\n        if arr1[0] > arr2[k]:\n            return arr2[k]\n        if arr1[0] < arr2[k - 1]:\n            return arr2[k - 1]\n    if len(arr2) == 1:\n        if arr2[0] >= arr1[k - 1] and arr2[0] <= arr1[k]:\n            return arr2[0]\n        if arr2[0] > arr1[k]:\n            return arr1[k]\n        if arr2[0] < arr1[k - 1]:\n            return arr1[k - 1]\n    if arr1[len(arr1) // 2] > arr2[len(arr2) // 2]:\n        if k <= len(arr1) // 2 + len(arr2) // 2:\n            return find_kth(arr1[:len(arr1) // 2], arr2, k)\n        else:\n            return find_kth(arr1, arr2[len(arr2) // 2 + 1:], k - len(arr2) // 2 - 1)\n    else:\n        if k <= len(arr1) // 2 + len(arr2) // 2:\n            return find_kth(arr1, arr2[:len(arr2) // 2], k)\n        else:\n            return find_kth(arr1[len(arr1) // 2 + 1:], arr2, k - len(arr1) // 2 - 1)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if len(arr1) <= k // 2:\n        if arr1[-1] > arr2[k - len(arr1)]:\n            return arr1[-1]\n        else:\n            return find_kth(arr1, arr2[k - len(arr1):], k - len(arr1))\n    if len(arr2) <= k // 2:\n        if arr2[-1] > arr1[k - len(arr2)]:\n            return arr2[-1]\n        else:\n            return find_kth(arr1[k - len(arr2):], arr2, k - len(arr2))\n    if arr1[k // 2] > arr2[k // 2]:\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n    else:\n        return find_kth(arr1[k // 2:], arr2, k - k // 2)\n\n",
    "    if not arr1:\n        return arr2[k]\n    if not arr2:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    mid1 = mid2 = mid = k // 2\n    if mid1 >= len(arr1):\n        mid1 = len(arr1) - 1\n    if mid2 >= len(arr2):\n        mid2 = len(arr2) - 1\n    if arr1[mid1] > arr2[mid2]:\n        return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n    else:\n        return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n",
    "    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    mid1 = arr1[k // 2 - 1] if len(arr1) >= k // 2 else None\n    mid2 = arr2[k // 2 - 1] if len(arr2) >= k // 2 else None\n    if mid2 is None or (mid1 is not None and mid1 < mid2):\n        return find_kth(arr1[k // 2:], arr2, k - k // 2)\n    return find_kth(arr1, arr2[k // 2:], k - k // 2)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    i = k // 2\n    j = k - i\n    if i >= len(arr1):\n        i = len(arr1) - 1\n    if j >= len(arr2):\n        j = len(arr2) - 1\n    if arr1[i] < arr2[j]:\n        return find_kth(arr1[i + 1:], arr2, k - i - 1)\n    else:\n        return find_kth(arr1, arr2[j + 1:], k - j - 1)\n",
    "    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    if len(arr1) < k // 2:\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n    if len(arr2) < k // 2:\n        return find_kth(arr1[k // 2:], arr2, k - k // 2)\n    if arr1[k // 2 - 1] < arr2[k // 2 - 1]:\n        return find_kth(arr1[k // 2:], arr2, k - k // 2)\n    else:\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if len(arr1) == 1 and len(arr2) == 1:\n        return max(arr1[0], arr2[0])\n    if len(arr1) == 1:\n        if k == 1:\n            return max(arr1[0], arr2[0])\n        else:\n            return arr2[k - 1]\n    if len(arr2) == 1:\n        if k == 1:\n            return max(arr1[0], arr2[0])\n        else:\n            return arr1[k - 1]\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if arr1[mid1] <= arr2[mid2]:\n        if k <= mid1 + mid2 + 1:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n    else:\n        if k <= mid1 + mid2 + 1:\n            return find_kth(arr1, arr2[:mid2], k)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n\n",
    "    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n\n    if k == 1:\n        return min(arr1[0], arr2[0])\n\n    if len(arr1) < k // 2:\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n    if len(arr2) < k // 2:\n        return find_kth(arr1[k // 2:], arr2, k - k // 2)\n\n    if arr1[k // 2 - 1] < arr2[k // 2 - 1]:\n        return find_kth(arr1[k // 2:], arr2, k - k // 2)\n    else:\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n\n",
    "    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    if len(arr1) == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(len(arr1), k // 2)\n    j = min(len(arr2), k // 2)\n    if arr1[i - 1] < arr2[j - 1]:\n        return find_kth(arr1[i:], arr2, k - i)\n    else:\n        return find_kth(arr1, arr2[j:], k - j)\n",
    "    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    if len(arr1) < k // 2:\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n    if arr1[k // 2 - 1] < arr2[k // 2 - 1]:\n        return find_kth(arr1[k // 2:], arr2, k - k // 2)\n    else:\n        return find_kth(arr1, arr2[k // 2:], k - k // 2)\n",
    "    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2) - 1:\n        return max(arr1[-1], arr2[-1])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n"
  ]
}