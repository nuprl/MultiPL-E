{
  "name": "mbpp_286_max_sub_array_sum_repeated",
  "language": "py",
  "prompt": "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n    \"\"\"\n\tWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate([10, 20, -30, -1], 4, 3) == 30\n    assert candidate([-1, 10, 20], 3, 2) == 59\n    assert candidate([-1, -2, -3], 3, 3) == -1\n\ndef test_check():\n    check(max_sub_array_sum_repeated)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    if n == 0:\n        return 0\n    if n == 1:\n        return a[0]\n    if k == 1:\n        return max(a)\n    if k == 2:\n        return max(a) + max(a[:n - 1])\n    if k == 3:\n        return max(a) + max(a[:n - 1]) + max(a[:n - 2])\n    if k == 4:\n        return max(a) + max(a[:n - 1]) + max(a[:n - 2]) + max(a[:n - 3])\n    if k == 5:\n        return max(a) + max(a[:n - 1]) + max(a[:n - 2]) + max(a[:n - 3]) + max(a[:n - 4])\n    if k == 6:\n        return max(a) + max(a[:n - 1]) + max(a[:n - 2]) + max(a[:n - 3]) + max(a[:n - 4]) + max(a[:n - 5])\n    if k == 7:\n        return max(a) + max(a[:n - 1]) + max(a[:n - 2]) + max(a[:n - 3]) + max(a[:n - 4]) + max(a[:n - 5]) + max(a[:n - 6])\n    if k == 8:\n        return max(a) + max(a[:n - 1]) + max(a[:n - 2]) + max(a[:n - 3]) + max(a[:n - 4]) + max(a[:n - 5]) + max(a[:n - 6]) + max(a[:n - 7])\n    if k == 9:\n        return max(a) + max(a[:n - 1]) + max(a[:n - 2]) + max(a[:n - 3]) + max(a[:n - 4]) + max(a[:n - 5]) + max(a[:n - 6]) + max(a[:n - 7]) + max(a[:n - 8])\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    if k == 2:\n        return max(max_sub_array_sum(a, n), max_sub_array_sum(a, n, True))\n    max_sum = max_sub_array_sum(a, n)\n    max_sum_repeated = max_sum\n    for i in range(1, k):\n        max_sum_repeated = max(max_sum_repeated, max_sum + max_sub_array_sum(a, n, True))\n        max_sum += max_sub_array_sum(a, n)\n    return max_sum_repeated\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        max_sum += a[i]\n    curr_sum = max_sum\n    for i in range(n):\n        curr_sum = curr_sum - (a[i] * (k - 1))\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_sum = 0\n    for i in range(n):\n        max_sum += a[i]\n\n    max_sum = max(max_sum, max_sub_array_sum(a, n))\n\n    prefix_sum = 0\n    for i in range(n):\n        prefix_sum += a[i]\n        max_sum = max(max_sum, prefix_sum)\n        if prefix_sum < 0:\n            prefix_sum = 0\n\n    suffix_sum = 0\n    for i in range(n - 1, -1, -1):\n        suffix_sum += a[i]\n        max_sum = max(max_sum, suffix_sum)\n        if suffix_sum < 0:\n            suffix_sum = 0\n\n    return max_sum\n",
    "    max_sum = 0\n    for i in range(n):\n        current_sum = 0\n        for j in range(k):\n            current_sum += a[(i + j) % n]\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n",
    "    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n\n    max_wrap = 0\n    for i in range(n):\n        max_wrap += a[i]\n        a[i] = -a[i]\n\n    max_wrap = max_wrap + max_sub_array_sum(a, n)\n\n    if max_wrap > max_so_far:\n        return max_wrap\n    else:\n        return max_so_far\n\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        max_sum += a[i]\n    curr_sum = max_sum\n    for i in range(n * 2, n * k, 1):\n        curr_sum = curr_sum - a[i % n] + a[i % n]\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        max_sum += a[i]\n    curr_max = max_sum\n    for i in range(1, k):\n        for j in range(n):\n            curr_max = max(curr_max + a[j], max_sum)\n            max_sum = curr_max\n    return max_sum\n",
    "    # kadane's algorithm\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here += a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    if max_so_far == 0:\n        return max(a)\n    max_wrap = 0\n    for i in range(n):\n        max_wrap += a[i]\n        a[i] = -a[i]\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1)\n    return max(max_so_far, max_wrap)\n",
    "    if n == 0:\n        return 0\n    if k == 1:\n        return max_sub_array_sum(a, n)\n    if k == 2:\n        return max(max_sub_array_sum(a, n), max_sub_array_sum(a, n) + sum(a))\n    return max(max_sub_array_sum_repeated(a, n, k-1), max_sub_array_sum_repeated(a, n, k-2) + sum(a))\n",
    "    max_sum = 0\n    curr_sum = 0\n\n    for i in range(n):\n        curr_sum += a[i]\n        if curr_sum < 0:\n            curr_sum = 0\n        if max_sum < curr_sum:\n            max_sum = curr_sum\n\n    max_wrap = 0\n    for i in range(n):\n        max_wrap += a[i]\n        a[i] = -a[i]\n\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        if curr_sum < 0:\n            curr_sum = 0\n        if max_wrap < curr_sum:\n            max_wrap = curr_sum\n\n    max_wrap = max_wrap + max_wrap\n\n    if max_wrap > max_sum:\n        return max_wrap\n    else:\n        return max_sum\n\n",
    "    if n == 0:\n        return 0\n    if n == 1:\n        return a[0]\n\n    # Find the max sum with middle term as pivot\n    max_sum = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    # Find the max sum on the left of the pivot\n    left_sum = 0\n    curr_sum = 0\n    for i in range(n-1, -1, -1):\n        curr_sum += a[i]\n        left_sum = max(left_sum, curr_sum)\n\n    # Find the max sum on the right of the pivot\n    right_sum = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        right_sum = max(right_sum, curr_sum)\n\n    # Return the max possible sum\n    return max(max_sum, left_sum + right_sum + (k-2)*max_sum)\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_sum = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    max_wrap = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        max_wrap = max(max_wrap, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    max_wrap = max_wrap * (k - 2)\n\n    return max(max_sum, max_wrap + max_sub_array_sum(a, n))\n",
    "    max_sum = 0\n    for i in range(n):\n        sum = 0\n        for j in range(i, n):\n            sum += a[j]\n            if sum > max_sum:\n                max_sum = sum\n    return max_sum * k\n",
    "    max_so_far = 0\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    if max_so_far == 0:\n        return max(a)\n    max_so_far = max_so_far * k\n    curr_prefix = 0\n    for i in range(n):\n        curr_prefix = curr_prefix + a[i]\n        max_so_far = max(max_so_far, curr_prefix)\n    curr_suffix = 0\n    for i in range(n - 1, -1, -1):\n        curr_suffix = curr_suffix + a[i]\n        max_so_far = max(max_so_far, curr_suffix)\n    return max_so_far\n\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    max_sum = 0\n    for i in range(n):\n        current_sum = 0\n        for j in range(i, n):\n            current_sum += a[j]\n            max_sum = max(max_sum, current_sum)\n    return max_sum * k\n",
    "    max_so_far = 0\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    if max_so_far == 0:\n        return max(a)\n    max_so_far = max_so_far * k\n    curr_val = 0\n    for i in range(n):\n        curr_val = curr_val + a[i]\n        a[i] = -a[i]\n    curr_val = curr_val * k\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here + curr_val:\n            max_so_far = max_ending_here + curr_val\n    return max_so_far\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_sum = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        if curr_sum < 0:\n            curr_sum = 0\n        max_sum = max(max_sum, curr_sum)\n\n    if max_sum > 0:\n        max_sum *= k\n\n    max_wrap = 0\n    curr_wrap = 0\n    for i in range(n):\n        curr_wrap += a[i]\n        if curr_wrap < 0:\n            curr_wrap = 0\n        max_wrap = max(max_wrap, curr_wrap)\n\n    if max_wrap > 0:\n        max_wrap = (max_wrap * (k - 1)) + max_wrap\n\n    return max(max_sum, max_wrap)\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_sum = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n    max_wrap = 0\n    for i in range(n):\n        curr_sum += a[i]\n        max_wrap = max(max_wrap, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n    max_wrap = max(0, max_wrap)\n\n    return max(max_sum, max_wrap * (k - 2) + max_sum)\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(n):\n            curr_sum += a[(i + j) % n]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    if n == 0:\n        return 0\n    if n == 1:\n        return a[0]\n\n    max_sum = 0\n    for i in range(n):\n        max_sum += a[i]\n\n    max_sum_so_far = 0\n    for i in range(n):\n        max_sum_so_far += a[i]\n        if max_sum_so_far < 0:\n            max_sum_so_far = 0\n        elif max_sum < max_sum_so_far:\n            max_sum = max_sum_so_far\n\n    if max_sum > 0:\n        max_sum *= k\n        for i in range(n):\n            curr_sum = 0\n            for j in range(i, n):\n                curr_sum += a[j]\n                if curr_sum > max_sum:\n                    max_sum = curr_sum\n    return max_sum\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        max_sum += a[i]\n    curr_sum = max_sum\n    for i in range(n):\n        curr_sum += max_sum\n        curr_sum -= a[i] * k\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_sum = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    max_wrap = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        max_wrap = max(max_wrap, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    max_wrap = max_wrap * k\n\n    return max(max_sum, max_wrap)\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_ending_here = 0\n    max_so_far = 0\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        elif max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    max_wrap = 0\n    for i in range(n):\n        max_wrap += a[i]\n        a[i] = -a[i]\n    max_wrap = max_wrap + max_sub_array_sum(a, n)\n    if max_wrap > max_so_far:\n        return max_wrap\n    return max_so_far\n",
    "    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_ending_here = 0\n    max_so_far = 0\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        elif max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    max_wrap = 0\n    for i in range(n):\n        max_wrap += a[i]\n        a[i] = -a[i]\n    max_wrap = max_wrap + max_sub_array_sum(a, n)\n    if max_wrap > max_so_far:\n        return max_wrap\n    else:\n        return max_so_far\n\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(n):\n            curr_sum += a[(i+j)%n]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        max_sum += a[i]\n    max_sum = max(max_sum, 0)\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + a[i - 1]\n    max_prefix_sum = prefix_sum[n]\n    for i in range(1, n):\n        max_prefix_sum = max(max_prefix_sum, prefix_sum[i])\n    max_sum += (k - 2) * max_prefix_sum\n    max_sum_suffix = 0\n    for i in range(n - 1, -1, -1):\n        max_sum_suffix += a[i]\n        max_sum = max(max_sum, max_sum_suffix)\n    return max_sum\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    max_so_far = 0\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    if max_so_far == 0:\n        return max(a)\n    max_so_far = max_so_far * k\n    curr_val = 0\n    for i in range(n):\n        curr_val = curr_val + a[i]\n        a[i] = -a[i]\n    curr_val = curr_val * k\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here + curr_val:\n            max_so_far = max_ending_here + curr_val\n    return max_so_far\n",
    "    max_sum = 0\n    for i in range(n):\n        current_sum = 0\n        for j in range(i, n):\n            current_sum += a[j]\n            max_sum = max(max_sum, current_sum)\n    return max_sum * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_sum = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n\n    max_wrap = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_wrap = max(max_wrap, curr_sum)\n\n    max_wrap = max_wrap * (k - 2)\n    return max(max_sum, max_wrap + max_sub_array_sum(a, n))\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        max_sum += a[i]\n    curr_sum = max_sum\n    for i in range(n):\n        curr_sum = curr_sum + max_sum - (n * a[n - i - 1])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    else:\n        # Find the maximum sum of the subarray in the original array\n        max_sum = max_sub_array_sum(a, n)\n\n        # Find the maximum sum of the subarray with corner elements.\n        max_corner_sum = 0\n        for i in range(n):\n            max_corner_sum += a[i] * (k - 2)\n        max_corner_sum += max(a[0], a[n - 1])\n\n        # Return the maximum of two sums\n        return max(max_sum, max_corner_sum)\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_sum = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    max_wrap = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        max_wrap = max(max_wrap, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    max_wrap = max_wrap * k\n\n    return max(max_sum, max_wrap)\n",
    "    max_so_far = 0\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    if max_so_far == 0:\n        return max(a)\n    max_so_far = max_so_far * k\n    curr_val = 0\n    for i in range(n):\n        curr_val = curr_val + a[i]\n        a[i] = -a[i]\n    curr_val = curr_val * k\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here + curr_val:\n            max_so_far = max_ending_here + curr_val\n    return max_so_far\n",
    "    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    if n == 0:\n        return 0\n    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = max_sub_array_sum(a, n)\n    if max_sum < 0:\n        return max_sum\n    max_sum_so_far = 0\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here += a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_sum_so_far < max_ending_here:\n            max_sum_so_far = max_ending_here\n    max_sum = max_sum_so_far * (k - 2)\n    max_sum_so_far = 0\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here += a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_sum_so_far < max_ending_here:\n            max_sum_so_far = max_ending_here\n    max_sum += max_sum_so_far\n    max_sum_so_far = 0\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here += a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_sum_so_far < max_ending_here:\n            max_sum_so_far = max_ending_here\n    max_sum += max_sum_so_far\n    return max_sum\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_sum = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    max_wrap = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        max_wrap = max(max_wrap, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    max_wrap = max_wrap * k\n\n    return max(max_sum, max_wrap)\n\n",
    "    # kadane's algorithm\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here += a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    if max_so_far == 0:\n        return max(a)\n    max_wrap = 0\n    for i in range(n):\n        max_wrap += a[i]\n        a[i] = -a[i]\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1)\n    return max(max_so_far, max_wrap)\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_sum = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        if curr_sum < 0:\n            curr_sum = 0\n        max_sum = max(max_sum, curr_sum)\n\n    if max_sum == 0:\n        return max_sum\n\n    max_wrap = 0\n    for i in range(n):\n        max_wrap += a[i]\n        a[i] = -a[i]\n\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        if curr_sum < 0:\n            curr_sum = 0\n        max_wrap = max(max_wrap, curr_sum)\n\n    max_wrap = max_wrap * k\n    return max(max_wrap, max_sum)\n\n",
    "    max_so_far = 0\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    max_so_far = max_so_far * k\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    return max_so_far\n",
    "    if n == 0:\n        return 0\n    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, max_sub_array_sum(a, n))\n        rotate_array(a, n)\n    return max_sum\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    else:\n        max_sum = max_sub_array_sum(a, n)\n        max_ending_here = 0\n        for i in range(n):\n            max_ending_here = max_ending_here + a[i]\n            if max_ending_here < 0:\n                max_ending_here = 0\n            elif max_sum < max_ending_here:\n                max_sum = max_ending_here\n        max_wrap = 0\n        for i in range(n):\n            max_wrap = max_wrap + a[i]\n            a[i] = -a[i]\n        max_wrap = max_wrap + max_sub_array_sum(a, n)\n        if max_wrap > max_sum:\n            max_sum = max_wrap\n        return max_sum * k\n",
    "    max_sum = 0\n    for i in range(n):\n        sum = 0\n        for j in range(i, n):\n            sum += a[j]\n            max_sum = max(max_sum, sum)\n    return max_sum * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        current_sum = 0\n        for j in range(i, n):\n            current_sum += a[j]\n            max_sum = max(max_sum, current_sum)\n    return max_sum * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    max_sum = 0\n    for i in range(n):\n        max_sum += a[i]\n    curr_max = max_sum\n    for i in range(n):\n        curr_max = curr_max + (max_sum - a[i])\n        if curr_max > max_sum:\n            max_sum = curr_max\n    return max_sum * k\n",
    "    if n == 0:\n        return 0\n    if k == 1:\n        return max_sub_array_sum(a, n)\n    if k == 2:\n        return max(max_sub_array_sum(a, n), max_sub_array_sum(a, n, 0, n - 1))\n    return max(max_sub_array_sum_repeated(a, n, k - 1), max_sub_array_sum(a, n) + max_sub_array_sum_repeated(a, n, k - 2))\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        max_sum += a[i]\n    curr_sum = max_sum\n    for i in range(n):\n        curr_sum += max_sum\n        curr_sum -= a[i] * k\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n",
    "    if n == 0:\n        return 0\n    if n == 1:\n        return a[0]\n    if k == 1:\n        return max(a)\n    if k == 2:\n        return max(a) + max(a[:n-1])\n    if k == 3:\n        return max(a) + max(a[:n-1]) + max(a[:n-2])\n    if k == 4:\n        return max(a) + max(a[:n-1]) + max(a[:n-2]) + max(a[:n-3])\n    if k == 5:\n        return max(a) + max(a[:n-1]) + max(a[:n-2]) + max(a[:n-3]) + max(a[:n-4])\n    if k == 6:\n        return max(a) + max(a[:n-1]) + max(a[:n-2]) + max(a[:n-3]) + max(a[:n-4]) + max(a[:n-5])\n    if k == 7:\n        return max(a) + max(a[:n-1]) + max(a[:n-2]) + max(a[:n-3]) + max(a[:n-4]) + max(a[:n-5]) + max(a[:n-6])\n    if k == 8:\n        return max(a) + max(a[:n-1]) + max(a[:n-2]) + max(a[:n-3]) + max(a[:n-4]) + max(a[:n-5]) + max(a[:n-6]) + max(a[:n-7])\n    if k == 9:\n        return max(a) + max(a[:n-1]) + max(a[:n-2]) + max(a[:n-3]) + max(a[:n-4]) + max(a[:n-5]) + max(a[:n-6]) + max(a[:n-7]) + max(a[:n-8])\n",
    "    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    max_so_far = 0\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    if max_so_far == 0:\n        return max(a)\n    max_so_far = max_so_far * k\n    curr_val = 0\n    for i in range(n):\n        curr_val = curr_val + a[i]\n        a[i] = -a[i]\n    curr_val = curr_val * k\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here + curr_val:\n            max_so_far = max_ending_here + curr_val\n    return max_so_far\n",
    "    if n == 0:\n        return 0\n\n    max_so_far = a[0]\n    curr_max = a[0]\n\n    for i in range(1, n):\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n\n    max_wrap = 0\n    for i in range(0, n):\n        max_wrap += a[i]\n        a[i] = -a[i]\n\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k)\n\n    return max(max_so_far, max_wrap)\n\n",
    "    if n == 0:\n        return 0\n    if k == 1:\n        return max(a)\n    if k == 2:\n        return max(max(a), sum(a))\n    if k > 2:\n        return max(max_sub_array_sum_repeated(a, n, k-1), sum(a) + max_sub_array_sum_repeated(a, n, k-2))\n",
    "    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(k):\n            curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    else:\n        max_sum = max_sub_array_sum(a, n)\n        curr_sum = max_sum\n        for i in range(1, k):\n            for j in range(0, n):\n                curr_sum = curr_sum - a[j] + a[(i * n + j) % n]\n                max_sum = max(max_sum, curr_sum)\n        return max_sum\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_sum = 0\n    for i in range(n):\n        max_sum += a[i]\n\n    max_sum_so_far = 0\n    for i in range(n):\n        max_sum_so_far += a[i]\n        if max_sum_so_far < 0:\n            max_sum_so_far = 0\n        elif max_sum_so_far > max_sum:\n            max_sum = max_sum_so_far\n\n    max_sum_so_far = 0\n    for i in range(n):\n        max_sum_so_far += a[i]\n        if max_sum_so_far > max_sum:\n            max_sum = max_sum_so_far\n\n    return max_sum * (k - 2) + max_sum\n",
    "    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    max_sum = 0\n    for i in range(n):\n        current_sum = 0\n        for j in range(i, n):\n            current_sum += a[j]\n            max_sum = max(max_sum, current_sum)\n    return max_sum * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    if k == 2:\n        return max(max_sub_array_sum(a, n), max_sub_array_sum(a, n, True))\n    return max(max_sub_array_sum(a, n), max_sub_array_sum(a, n, True), max_sub_array_sum_repeated(a, n, k-1))\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(n):\n            curr_sum += a[(i + j) % n]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    max_so_far = 0\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    if max_so_far == 0:\n        return max(a)\n    max_so_far = max_so_far * k\n    max_wrap = 0\n    for i in range(n):\n        max_wrap += a[i]\n        a[i] = -a[i]\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1)\n    if max_wrap > max_so_far:\n        return max_wrap\n    else:\n        return max_so_far\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    max_sum = 0\n    for i in range(n):\n        sum = 0\n        for j in range(i, n):\n            sum += a[j]\n            if sum > max_sum:\n                max_sum = sum\n    return max_sum * k\n",
    "    if n == 0:\n        return 0\n    if n == 1:\n        return a[0]\n    if k == 1:\n        return max(a)\n\n    # Find the maximum subarray sum for the first array\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n\n    # Find the maximum subarray sum for the second array\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n\n    # Find the maximum subarray sum such that the subarray wraps around\n    max_wrap = 0\n    for i in range(n):\n        max_wrap = max_wrap + a[i]\n        if max_wrap < 0:\n            max_wrap = 0\n\n    # The maximum is maximum of three cases\n    return max(max_so_far, max_wrap, max_wrap + max_so_far)\n\n",
    "    if n == 0:\n        return 0\n    if k == 1:\n        return max(a)\n    if k == 2:\n        return max(sum(a), max_sub_array_sum(a, n))\n    if k > 2:\n        return max(sum(a), max_sub_array_sum(a, n), max_sub_array_sum_repeated(a, n, k - 1))\n",
    "    if n == 0:\n        return 0\n    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = max_sub_array_sum(a, n)\n    max_sum_so_far = 0\n    for i in range(n):\n        max_sum_so_far += a[i]\n        if max_sum_so_far < 0:\n            max_sum_so_far = 0\n        elif max_sum < max_sum_so_far:\n            max_sum = max_sum_so_far\n    max_sum_so_far = 0\n    for i in range(n):\n        max_sum_so_far += a[i]\n        if max_sum_so_far > 0:\n            max_sum_so_far = 0\n        elif max_sum < max_sum_so_far:\n            max_sum = max_sum_so_far\n    return max_sum\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    elif k == 2:\n        return max(max_sub_array_sum(a, n), max_sub_array_sum(a, n, True))\n    else:\n        return max(max_sub_array_sum(a, n), max_sub_array_sum(a, n, True), max_sub_array_sum(a, n) + max_sub_array_sum(a, n, True))\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    else:\n        max_sum = max_sub_array_sum(a, n)\n        max_sum_so_far = max_sum\n        for i in range(1, k):\n            max_sum_so_far = max(max_sum_so_far + max_sum, max_sub_array_sum(a, n))\n        return max_sum_so_far\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_sum = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    sum_of_array = sum(a)\n    max_sum_of_array = max_sum\n    max_wrap_sum = sum_of_array * (k - 2) + max_sum_of_array\n    for i in range(n):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    return max(max_sum, max_wrap_sum)\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        max_sum += a[i]\n    curr_sum = max_sum\n    for i in range(n):\n        curr_sum = curr_sum + max_sum - (n * a[n - i - 1])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_sum = 0\n    for i in range(n):\n        max_sum += a[i]\n\n    curr_sum = max_sum\n    for i in range(n):\n        curr_sum = curr_sum - (a[i] * (k - 1))\n        max_sum = max(max_sum, curr_sum)\n\n    return max_sum\n\n",
    "    if n == 0:\n        return 0\n    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = max_sub_array_sum(a, n)\n    for i in range(1, k):\n        max_sum = max(max_sum, max_sub_array_sum(a, n, i))\n    return max_sum\n",
    "    max_so_far = 0\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    if max_so_far == 0:\n        return max(a)\n    max_so_far = max_so_far * k\n    curr_val = 0\n    for i in range(n):\n        curr_val = curr_val + a[i]\n        a[i] = -a[i]\n    curr_val = curr_val * k\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here + curr_val:\n            max_so_far = max_ending_here + curr_val\n    return max_so_far\n\n",
    "    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_sum = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        if curr_sum < 0:\n            curr_sum = 0\n        max_sum = max(max_sum, curr_sum)\n\n    if max_sum > 0:\n        max_sum = (k - 2) * max_sum + max_sub_array_sum(a, n)\n    else:\n        max_sum = max_sub_array_sum(a, n)\n\n    return max_sum\n",
    "    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_sum = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    max_wrap = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        max_wrap = max(max_wrap, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    max_wrap = max_wrap * k\n\n    return max(max_sum, max_wrap)\n\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        max_sum += a[i]\n    curr_sum = max_sum\n    for i in range(n, n * k):\n        curr_sum += a[i % n] - a[i % n - n]\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_sum = 0\n    for i in range(n):\n        max_sum += a[i]\n\n    max_sum_so_far = 0\n    for i in range(n):\n        max_sum_so_far += a[i]\n        if max_sum_so_far < 0:\n            max_sum_so_far = 0\n        elif max_sum_so_far > max_sum:\n            max_sum = max_sum_so_far\n\n    max_sum_so_far = 0\n    for i in range(n):\n        max_sum_so_far += a[i]\n        if max_sum_so_far > max_sum:\n            max_sum = max_sum_so_far\n\n    return max_sum * (k - 2) + max_sum\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_sum = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    max_wrap = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        max_wrap = max(max_wrap, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    max_wrap = max_wrap * k\n\n    return max(max_sum, max_wrap)",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_sum = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        if curr_sum < 0:\n            curr_sum = 0\n        max_sum = max(max_sum, curr_sum)\n\n    if max_sum > 0:\n        max_sum *= k\n        curr_sum = 0\n        for i in range(n):\n            curr_sum += a[i]\n            if curr_sum < 0:\n                curr_sum = 0\n            max_sum = max(max_sum, curr_sum)\n            curr_sum = max(curr_sum, 0)\n    return max_sum\n\n",
    "    if n == 0:\n        return 0\n    if n == 1:\n        return a[0]\n\n    max_sum = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        if curr_sum < 0:\n            curr_sum = 0\n        if max_sum < curr_sum:\n            max_sum = curr_sum\n\n    if max_sum == 0:\n        return max(a)\n\n    max_wrap = 0\n    curr_wrap = 0\n    for i in range(n):\n        curr_wrap += a[i]\n        if curr_wrap < 0:\n            curr_wrap = 0\n        if max_wrap < curr_wrap:\n            max_wrap = curr_wrap\n\n    return max(max_sum, max_wrap + (k - 2) * max_wrap)\n\n",
    "    max_so_far = 0\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    max_so_far = max_so_far * k\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    return max_so_far\n",
    "    max_sum = 0\n    for i in range(n):\n        max_sum += a[i]\n    curr_sum = max_sum\n    for i in range(n):\n        curr_sum += max_sum - (n * a[n - i - 1])\n        max_sum = max(curr_sum, max_sum)\n    return max_sum\n",
    "    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n    return max_sum * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_sum = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        if curr_sum < 0:\n            curr_sum = 0\n        max_sum = max(max_sum, curr_sum)\n\n    if max_sum > 0:\n        max_sum *= k\n        curr_sum = 0\n        for i in range(n):\n            curr_sum += a[i]\n            if curr_sum < 0:\n                curr_sum = 0\n            max_sum = max(max_sum, curr_sum)\n            max_sum = max(max_sum, curr_sum + (k - 2) * curr_sum)\n\n    return max_sum\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_sum = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    max_wrap = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        max_wrap = max(max_wrap, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    max_wrap = max_wrap * k\n\n    return max(max_sum, max_wrap)\n",
    "    if n == 0:\n        return 0\n    elif n == 1:\n        return a[0]\n    elif k == 1:\n        return max(a)\n\n    max_sum = 0\n    for i in range(n):\n        max_sum += a[i]\n    max_sum *= k\n\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n\n    return max_sum\n\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    else:\n        max_sum = 0\n        for i in range(n):\n            max_sum += a[i]\n        max_sum *= k\n        curr_sum = 0\n        for i in range(n):\n            curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n        for i in range(n, n * k):\n            curr_sum += a[i % n] - a[i % n - n]\n            max_sum = max(max_sum, curr_sum)\n        return max_sum\n",
    "    if n == 0:\n        return 0\n\n    max_sum = -float('inf')\n    current_sum = 0\n    for i in range(n * k):\n        current_sum += a[i % n]\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    else:\n        max_sum = 0\n        for i in range(n):\n            max_sum += a[i]\n        max_sum *= k\n        curr_sum = 0\n        for i in range(n):\n            curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n        for i in range(n, n * k):\n            curr_sum += a[i % n] - a[(i - n) % n]\n            max_sum = max(max_sum, curr_sum)\n        return max_sum\n",
    "    # kadane's algorithm\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    max_wrap = 0\n    for i in range(n):\n        max_wrap += a[i]\n        a[i] = -a[i]\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1)\n    if max_wrap > max_so_far:\n        return max_wrap\n    return max_so_far\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(n):\n            curr_sum += a[(i + j) % n]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    max_sum = 0\n    for i in range(n):\n        sum = 0\n        for j in range(i, n):\n            sum += a[j]\n            max_sum = max(max_sum, sum)\n    return max_sum * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_sum = 0\n    for i in range(n):\n        max_sum += a[i]\n\n    curr_sum = max_sum\n    for i in range(n):\n        curr_sum = curr_sum - (a[i] * (k - 1))\n        max_sum = max(max_sum, curr_sum)\n\n    return max_sum\n",
    "    if n == 0:\n        return 0\n    if k == 1:\n        return max_sub_array_sum(a, n)\n    if k == 2:\n        return max(max_sub_array_sum(a, n), max_sub_array_sum(a, n, 0, n-1))\n    return max(max_sub_array_sum_repeated(a, n, k-1), max_sub_array_sum(a, n) + max_sub_array_sum_repeated(a, n, k-2))\n",
    "    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(k):\n            curr_sum += a[(i + j) % n]\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    # kadane's algorithm\n    max_so_far = 0\n    max_ending_here = 0\n\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n\n    max_wrap = 0\n    for i in range(n):\n        max_wrap += a[i]\n        a[i] = -a[i]\n\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1)\n\n    if max_wrap > max_so_far:\n        return max_wrap\n    else:\n        return max_so_far\n\n",
    "    if n == 1:\n        return a[0]\n    if n == 2:\n        return max(a[0], a[1])\n    if n == 3:\n        return max(a[0], a[1], a[2])\n\n    max_sum = 0\n    for i in range(n):\n        max_sum += a[i]\n\n    curr_sum = max_sum\n    for i in range(n):\n        curr_sum = curr_sum - (a[i] * (k - 1))\n        max_sum = max(max_sum, curr_sum)\n\n    return max_sum\n",
    "    if n == 0:\n        return 0\n    if k == 1:\n        return max_sub_array_sum(a, n)\n    if k == 2:\n        return max(max_sub_array_sum(a, n), max_sub_array_sum(a, n, 0, n - 1) + max_sub_array_sum(a, n, 1, n))\n    return max(max_sub_array_sum_repeated(a, n, k - 1), max_sub_array_sum_repeated(a, n, k - 2) + max_sub_array_sum(a, n))\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    if n == 0:\n        return 0\n    if n == 1:\n        return a[0]\n    if k == 1:\n        return max_sub_array_sum(a, n)\n    if k == 2:\n        return max(max_sub_array_sum(a, n), max_sub_array_sum(a, n, 0, n-1))\n    return max(max_sub_array_sum(a, n), max_sub_array_sum_repeated(a, n, k-1))\n",
    "    max_so_far = 0\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    max_so_far = max_so_far * k\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    return max_so_far\n\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        max_sum += a[i]\n    curr_sum = max_sum\n    for i in range(n, n * k):\n        curr_sum += a[i % n] - a[i - n]\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n",
    "    if n == 0:\n        return 0\n    if n == 1:\n        return a[0]\n    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    # Find the maximum sum of the subarray in the first k-1 arrays\n    # and the minimum sum of the subarray in the last k-1 arrays\n    # and the sum of the whole array.\n    max_sum = 0\n    min_sum = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        if i == 0:\n            max_sum = curr_sum\n        else:\n            max_sum = max(max_sum, curr_sum)\n            min_sum = min(min_sum, curr_sum)\n    total_sum = curr_sum\n\n    # If the total sum is negative, then the maximum sum is the maximum\n    # subarray sum in the first k-1 arrays.\n    if total_sum > 0:\n        return max(max_sum, total_sum * (k - 2) + max_sum)\n    else:\n        return max(max_sum, total_sum * (k - 2) + max_sum - min_sum)\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        max_sum += a[i]\n    curr_sum = max_sum\n    for i in range(n):\n        curr_sum = curr_sum - a[i] + a[(i + 1) % n]\n        max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    else:\n        return max(max_sub_array_sum(a, n), max_sub_array_sum_repeated(a, n, k-1))\n",
    "    max_so_far = 0\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        elif max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    max_wrap = 0\n    for i in range(n):\n        max_wrap += a[i]\n        a[i] = -a[i]\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1)\n    if max_wrap > max_so_far:\n        return max_wrap\n    return max_so_far\n",
    "    max_so_far = 0\n    max_ending_here = 0\n    for i in range(0, n * k):\n        max_ending_here = max_ending_here + a[i % n]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far\n",
    "    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(n):\n            curr_sum += a[(i + j) % n]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    else:\n        max_sum = max_sub_array_sum(a, n)\n        curr_sum = max_sum\n        for i in range(1, k):\n            for j in range(0, n):\n                curr_sum = curr_sum - a[j] + a[(i * n + j) % n]\n                max_sum = max(max_sum, curr_sum)\n        return max_sum\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        max_sum += a[i]\n    curr_sum = max_sum\n    for i in range(n):\n        curr_sum = curr_sum - a[i] + a[(i + 1) % n]\n        max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    if n == 0:\n        return 0\n    if n == 1:\n        return a[0]\n\n    max_sum = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        if curr_sum < 0:\n            curr_sum = 0\n        if max_sum < curr_sum:\n            max_sum = curr_sum\n\n    if k == 1:\n        return max_sum\n\n    max_wrap = 0\n    for i in range(n):\n        max_wrap += a[i]\n        a[i] = -a[i]\n\n    max_wrap += max_sub_array_sum_repeated(a, n, 1)\n\n    if max_wrap > max_sum:\n        return max_wrap\n\n    return max_sum\n",
    "    max_so_far = 0\n    max_ending_here = 0\n    for i in range(0, n * k):\n        max_ending_here = max_ending_here + a[i % n]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far\n\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_ending_here = 0\n    max_so_far = 0\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        elif max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    max_wrap = 0\n    for i in range(n):\n        max_wrap += a[i]\n        a[i] = -a[i]\n    max_wrap = max_wrap + max_sub_array_sum(a, n)\n    if max_wrap > max_so_far:\n        return max_wrap\n    else:\n        return max_so_far\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        max_sum += a[i]\n    curr_max = max_sum\n    for i in range(1, k):\n        for j in range(n):\n            curr_max = max(curr_max + a[j], max_sum)\n            max_sum = curr_max\n    return max_sum\n",
    "    max_sum = 0\n    for i in range(n):\n        current_sum = 0\n        for j in range(i, n):\n            current_sum += a[j]\n            max_sum = max(max_sum, current_sum)\n    return max_sum * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_sum = -float('inf')\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n\n    return max_sum * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    else:\n        max_sum = 0\n        for i in range(n):\n            max_sum += a[i]\n        curr_sum = max_sum\n        for i in range(n):\n            curr_sum += max_sum - (n * a[n - i - 1])\n            max_sum = max(max_sum, curr_sum)\n        return max_sum\n\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(k):\n            curr_sum += a[(i + j) % n]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum\n",
    "    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    max_so_far = 0\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    return max_so_far * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    else:\n        return max(\n            max_sub_array_sum_repeated(a, n, k - 1),\n            max_sub_array_sum(a, n) + max_sub_array_sum_repeated(a, n, k - 2),\n        )\n\n",
    "    if n == 0:\n        return 0\n    if n == 1:\n        return a[0]\n    if k == 1:\n        return max(a)\n\n    # Kadane's algorithm\n    max_so_far = a[0]\n    curr_max = a[0]\n\n    for i in range(1, n):\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n\n    # max sum with corner elements\n    max_corner_sum = 0\n    for i in range(0, n):\n        max_corner_sum += a[i]\n\n    # max sum is sum of corner elements\n    # multiplied by number of repetitions\n    max_corner_sum = max_corner_sum * k\n\n    # handle the case when array elements\n    # sum is negative\n    return max(max_so_far, max_corner_sum)\n\n",
    "    max_so_far = 0\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    max_so_far = max_so_far * k\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    return max_so_far\n",
    "    max_so_far = 0\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    if max_so_far == 0:\n        return max(a)\n    max_so_far = max_so_far * k\n    max_wrap = 0\n    for i in range(n):\n        max_wrap += a[i]\n        a[i] = -a[i]\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1)\n    return max(max_so_far, max_wrap)\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        max_sum += a[i]\n    curr_sum = max_sum\n    for i in range(n):\n        curr_sum = curr_sum - (a[i] * (k - 1))\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n",
    "    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        max_sum += a[i]\n    curr_sum = max_sum\n    for i in range(n):\n        curr_sum = curr_sum - (a[i] * (k - 1))\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_sum = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    max_wrap = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        max_wrap = max(max_wrap, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    max_wrap = max_wrap * k\n\n    return max(max_sum, max_wrap)\n",
    "    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    else:\n        max_sum = max_sub_array_sum(a, n)\n        curr_sum = max_sum\n        for i in range(n):\n            curr_sum = curr_sum - a[i] + a[(i + 1) % n]\n            max_sum = max(max_sum, curr_sum)\n        return max_sum * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(n):\n            curr_sum += a[(i + j) % n]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    # kadane's algorithm\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    if max_so_far == 0:\n        return max(a)\n    max_wrap = 0\n    for i in range(n):\n        max_wrap += a[i]\n        a[i] = -a[i]\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1)\n    return max(max_so_far, max_wrap)\n\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_sum = 0\n    curr_sum = 0\n\n    for i in range(n):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    max_wrap = 0\n    curr_sum = 0\n\n    for i in range(n):\n        curr_sum += a[i]\n        max_wrap = max(max_wrap, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    max_wrap = max_wrap * k\n\n    return max(max_wrap, max_sum)\n\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        max_sum += a[i]\n    curr_sum = max_sum\n    for i in range(n):\n        curr_sum = curr_sum - (a[i] * (k - 1))\n        max_sum = max(curr_sum, max_sum)\n    return max_sum\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        max_sum += a[i]\n    curr_sum = max_sum\n    for i in range(n, n*k):\n        curr_sum = curr_sum + a[i%n] - a[(i-n)%n]\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n",
    "    if n == 0:\n        return 0\n    if n == 1:\n        return a[0]\n    if k == 1:\n        return max(a)\n    if k == 2:\n        return max(max(a), sum(a))\n\n    # Find the maximum sum subarray in first set\n    # of size n.\n    max_sum = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    # Find the maximum sum in second set.\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    # The maximum sum is sum of two maximum\n    # sums of two sets.\n    return max_sum\n\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_sum = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    max_wrap = 0\n    for i in range(n):\n        max_wrap += a[i]\n        a[i] = -a[i]\n\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        max_wrap = max(max_wrap, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    max_wrap = max_wrap * k\n\n    return max(max_sum, max_wrap)\n\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    else:\n        max_sum = max_sub_array_sum(a, n)\n        max_ending_here = 0\n        for i in range(n):\n            max_ending_here += a[i]\n            if max_ending_here < 0:\n                max_ending_here = 0\n            elif max_sum < max_ending_here:\n                max_sum = max_ending_here\n        max_wrap = 0\n        for i in range(n):\n            max_wrap += a[i]\n            a[i] = -a[i]\n        max_wrap = max_wrap + max_sub_array_sum(a, n)\n        if max_wrap > max_sum:\n            max_sum = max_wrap\n        return max_sum * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    # kadane's algorithm\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    if max_so_far == 0:\n        return max(a)\n    max_wrap = 0\n    for i in range(n):\n        max_wrap += a[i]\n        a[i] = -a[i]\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1)\n    return max(max_so_far, max_wrap)\n",
    "    max_sum = 0\n    for i in range(n):\n        sum = 0\n        for j in range(i, n):\n            sum += a[j]\n            if sum > max_sum:\n                max_sum = sum\n    return max_sum * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    else:\n        max_sum = max_sub_array_sum(a, n)\n        max_sum_so_far = max_sum\n        for i in range(1, k):\n            max_sum_so_far = max(max_sum_so_far + max_sum, max_sub_array_sum(a, n))\n            max_sum = max_sum_so_far\n        return max_sum\n",
    "    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(k):\n            curr_sum += a[(i + j) % n]\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_sum = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    max_wrap = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        max_wrap = max(max_wrap, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    max_wrap = max_wrap * k\n    return max(max_sum, max_wrap)\n",
    "    if n == 0:\n        return 0\n    if n == 1:\n        return a[0]\n    if k == 1:\n        return max(a)\n    if k == 2:\n        return max(a) + max(a)\n    if k == 3:\n        return max(a) + max(a) + max(a)\n    if k == 4:\n        return max(a) + max(a) + max(a) + max(a)\n\n    max_sum = 0\n    for i in range(n):\n        max_sum += a[i]\n    max_sum *= k\n    return max_sum\n\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    if k == 2:\n        return max(max_sub_array_sum(a, n), max_sub_array_sum(a, n, True))\n    return max(max_sub_array_sum(a, n), max_sub_array_sum(a, n, True), max_sub_array_sum_repeated(a, n, k - 1))\n",
    "    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(k):\n            curr_sum += a[(i + j) % n]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum\n\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_sum = 0\n    for i in range(n):\n        max_sum += a[i]\n\n    max_sum_so_far = 0\n    for i in range(n):\n        max_sum_so_far += a[i]\n        if max_sum_so_far < 0:\n            max_sum_so_far = 0\n        elif max_sum < max_sum_so_far:\n            max_sum = max_sum_so_far\n\n    max_sum_so_far = 0\n    for i in range(n-1, -1, -1):\n        max_sum_so_far += a[i]\n        if max_sum_so_far < 0:\n            max_sum_so_far = 0\n        elif max_sum < max_sum_so_far:\n            max_sum = max_sum_so_far\n\n    return max_sum\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_sum = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    max_wrap_sum = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        max_wrap_sum = max(max_wrap_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    if max_wrap_sum > 0:\n        return max(max_wrap_sum, max_sum + (k - 2) * max_wrap_sum)\n    else:\n        return max_sum\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    else:\n        max_sum = max_sub_array_sum(a, n)\n        max_ending_here = 0\n        for i in range(n):\n            max_ending_here = max_ending_here + a[i]\n            if max_ending_here < 0:\n                max_ending_here = 0\n            elif max_sum < max_ending_here:\n                max_sum = max_ending_here\n        max_wrap = 0\n        for i in range(n):\n            max_wrap = max_wrap + a[i]\n            a[i] = -a[i]\n        max_wrap = max_wrap + max_sub_array_sum(a, n)\n        if max_wrap > max_sum:\n            max_sum = max_wrap\n        return max_sum * k\n",
    "    if n == 0:\n        return 0\n    if n == 1:\n        return a[0]\n    if k == 1:\n        return max(a)\n    if k == 2:\n        return max(a + a)\n    if k > 2:\n        return max(a + a + a)\n",
    "    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, i + n):\n            curr_sum += a[j % n]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    max_sum = 0\n    for i in range(n):\n        sum = 0\n        for j in range(i, n):\n            sum += a[j]\n            if sum > max_sum:\n                max_sum = sum\n    return max_sum * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    else:\n        max_sum = 0\n        for i in range(n):\n            max_sum += a[i]\n        max_sum = max(max_sum, max_sub_array_sum_repeated(a, n, k - 1))\n        return max_sum\n\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_sum = 0\n    for i in range(n):\n        max_sum += a[i]\n\n    max_sum *= k\n\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n\n    max_wrap = curr_sum\n\n    for i in range(n, 2 * n):\n        curr_sum += a[i % n] - a[i - n]\n        max_wrap = max(max_wrap, curr_sum)\n\n    return max(max_sum, max_wrap)\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_sum = 0\n    for i in range(n):\n        max_sum += a[i]\n\n    max_sum_so_far = max_sum\n    for i in range(n, n * k):\n        max_sum_so_far += a[i % n] - a[(i - n) % n]\n        max_sum_so_far = max(max_sum_so_far, max_sum)\n\n    return max_sum_so_far\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    else:\n        max_sum = max_sub_array_sum(a, n)\n        sum_so_far = 0\n        for i in range(n):\n            sum_so_far += a[i]\n            max_sum = max(max_sum, sum_so_far)\n            if sum_so_far < 0:\n                sum_so_far = 0\n        sum_so_far = 0\n        for i in range(n - 1, -1, -1):\n            sum_so_far += a[i]\n            max_sum = max(max_sum, sum_so_far)\n            if sum_so_far < 0:\n                sum_so_far = 0\n        sum_of_array = 0\n        for i in range(n):\n            sum_of_array += a[i]\n        max_sum = max(max_sum, sum_of_array * (k - 2))\n        return max_sum\n",
    "    max_so_far = 0\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here += a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    max_so_far = max(max_so_far, max_ending_here)\n\n    max_wrap = 0\n    for i in range(n):\n        max_wrap += a[i]\n        a[i] = -a[i]\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1)\n\n    if max_wrap > max_so_far:\n        return max_wrap\n    else:\n        return max_so_far * k\n\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    else:\n        max_sum = max_sub_array_sum(a, n)\n        for i in range(1, k):\n            max_sum = max(max_sum, max_sub_array_sum(a, n, i))\n        return max_sum\n",
    "    # Kadane's algorithm\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(n * k):\n        max_ending_here = max_ending_here + a[i % n]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    return max_so_far\n\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        max_sum += a[i]\n    curr_sum = max_sum\n    for i in range(n):\n        curr_sum = curr_sum - (a[i] * (k - 1))\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n",
    "    max_so_far = 0\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    if max_so_far == 0:\n        return max(a)\n    max_so_far = max_so_far * k\n    curr_val = 0\n    for i in range(n):\n        curr_val = curr_val + a[i]\n        a[i] = -a[i]\n    curr_val = curr_val * 2\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here + curr_val:\n            max_so_far = max_ending_here + curr_val\n    return max_so_far\n\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_sum = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        if curr_sum < 0:\n            curr_sum = 0\n        max_sum = max(max_sum, curr_sum)\n\n    if max_sum > 0:\n        max_sum *= k\n        curr_sum = 0\n        for i in range(n):\n            curr_sum += a[i]\n            if curr_sum < 0:\n                curr_sum = 0\n            max_sum = max(max_sum, curr_sum)\n            max_sum = max(max_sum, curr_sum + (k - 2) * curr_sum)\n    return max_sum\n\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_sum = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n\n    max_wrap = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_wrap = max(max_wrap, curr_sum)\n\n    max_wrap = max_wrap * (k - 2)\n    return max(max_sum, max_wrap + max_sub_array_sum(a, n))\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_sum = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    max_wrap = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        max_wrap = max(max_wrap, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    max_wrap = max_wrap * k\n\n    if max_wrap > max_sum:\n        return max_wrap\n    else:\n        return max_sum\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        current_sum = 0\n        for j in range(n):\n            current_sum += a[(i + j) % n]\n            max_sum = max(max_sum, current_sum)\n    return max_sum * k\n",
    "    # kadane's algorithm\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    max_wrap = 0\n    for i in range(n):\n        max_wrap += a[i]\n        a[i] = -a[i]\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1)\n    if max_wrap > max_so_far:\n        return max_wrap\n    return max_so_far\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        max_sum += a[i]\n    curr_sum = max_sum\n    for i in range(n):\n        curr_sum = curr_sum - (a[i] * (k - 1))\n        max_sum = max(curr_sum, max_sum)\n    return max_sum\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    else:\n        max_sum = 0\n        for i in range(n):\n            max_sum += a[i]\n        max_sum *= k\n        curr_sum = 0\n        for i in range(n):\n            curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n        for i in range(n, 2*n):\n            curr_sum += a[i] - a[i-n]\n            max_sum = max(max_sum, curr_sum)\n        return max_sum\n",
    "    max_sum = 0\n    for i in range(n):\n        current_sum = 0\n        for j in range(i, n):\n            current_sum += a[j]\n            max_sum = max(max_sum, current_sum)\n    return max_sum * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    else:\n        max_sum = max_sub_array_sum(a, n)\n        max_ending_here = 0\n        for i in range(n):\n            max_ending_here = max_ending_here + a[i]\n            if max_ending_here < 0:\n                max_ending_here = 0\n            elif max_sum < max_ending_here:\n                max_sum = max_ending_here\n        max_wrap = 0\n        for i in range(n):\n            max_wrap = max_wrap + a[i]\n            a[i] = -a[i]\n        max_wrap = max_wrap + max_sub_array_sum(a, n)\n        if max_wrap > max_sum:\n            max_sum = max_wrap\n        return max_sum * k\n",
    "    if n == 0:\n        return 0\n    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here += a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    if max_so_far == 0:\n        return max(a)\n    max_wrap = 0\n    for i in range(n):\n        max_wrap += a[i]\n        a[i] = -a[i]\n    max_wrap += max_sub_array_sum(a, n)\n    if max_wrap > max_so_far:\n        return max_wrap\n    return max_so_far\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    else:\n        max_sum = max_sub_array_sum(a, n)\n        max_val = max(a)\n        if max_val <= 0:\n            return max_val * k\n        else:\n            sum_of_all = sum(a)\n            min_val = min(a)\n            if min_val >= 0:\n                return sum_of_all * k\n            else:\n                max_sum = max(max_sum, sum_of_all * (k - 2) + max_sub_array_sum(a, n))\n                return max_sum\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    else:\n        max_sum = max_sub_array_sum(a, n)\n        max_ending_here = 0\n        for i in range(n):\n            max_ending_here = max_ending_here + a[i]\n            if max_ending_here < 0:\n                max_ending_here = 0\n            elif max_sum < max_ending_here:\n                max_sum = max_ending_here\n        max_wrap = 0\n        for i in range(n):\n            max_wrap += a[i]\n            a[i] = -a[i]\n        max_wrap = max_wrap + max_sub_array_sum(a, n)\n        return max(max_sum, max_wrap)\n\n"
  ]
}