{
  "name": "mbpp_286_max_sub_array_sum_repeated",
  "language": "py",
  "prompt": "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n    \"\"\"\n\tWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate([10, 20, -30, -1], 4, 3) == 30\n    assert candidate([-1, 10, 20], 3, 2) == 59\n    assert candidate([-1, -2, -3], 3, 3) == -1\n\ndef test_check():\n    check(max_sub_array_sum_repeated)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    if n == 0:\n        return 0\n    if n == 1:\n        return a[0]\n    if k == 1:\n        return max(a)\n    if k == 2:\n        return max(a) + max(a[:n - 1])\n    if k == 3:\n        return max(a) + max(a[:n - 1]) + max(a[:n - 2])\n    if k == 4:\n        return max(a) + max(a[:n - 1]) + max(a[:n - 2]) + max(a[:n - 3])\n    if k == 5:\n        return max(a) + max(a[:n - 1]) + max(a[:n - 2]) + max(a[:n - 3]) + max(a[:n - 4])\n    if k == 6:\n        return max(a) + max(a[:n - 1]) + max(a[:n - 2]) + max(a[:n - 3]) + max(a[:n - 4]) + max(a[:n - 5])\n    if k == 7:\n        return max(a) + max(a[:n - 1]) + max(a[:n - 2]) + max(a[:n - 3]) + max(a[:n - 4]) + max(a[:n - 5]) + max(a[:n - 6])\n    if k == 8:\n        return max(a) + max(a[:n - 1]) + max(a[:n - 2]) + max(a[:n - 3]) + max(a[:n - 4]) + max(a[:n - 5]) + max(a[:n - 6]) + max(a[:n - 7])\n    if k == 9:\n        return max(a) + max(a[:n - 1]) + max(a[:n - 2]) + max(a[:n - 3]) + max(a[:n - 4]) + max(a[:n - 5]) + max(a[:n - 6]) + max(a[:n - 7]) + max(a[:n - 8])\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    if k == 2:\n        return max(max_sub_array_sum(a, n), max_sub_array_sum(a, n, True))\n    max_sum = max_sub_array_sum(a, n)\n    max_sum_repeated = max_sum\n    for i in range(1, k):\n        max_sum_repeated = max(max_sum_repeated, max_sum + max_sub_array_sum(a, n, True))\n        max_sum += max_sub_array_sum(a, n)\n    return max_sum_repeated\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        max_sum += a[i]\n    curr_sum = max_sum\n    for i in range(n):\n        curr_sum = curr_sum - (a[i] * (k - 1))\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_sum = 0\n    for i in range(n):\n        max_sum += a[i]\n\n    max_sum = max(max_sum, max_sub_array_sum(a, n))\n\n    prefix_sum = 0\n    for i in range(n):\n        prefix_sum += a[i]\n        max_sum = max(max_sum, prefix_sum)\n        if prefix_sum < 0:\n            prefix_sum = 0\n\n    suffix_sum = 0\n    for i in range(n - 1, -1, -1):\n        suffix_sum += a[i]\n        max_sum = max(max_sum, suffix_sum)\n        if suffix_sum < 0:\n            suffix_sum = 0\n\n    return max_sum\n",
    "    max_sum = 0\n    for i in range(n):\n        current_sum = 0\n        for j in range(k):\n            current_sum += a[(i + j) % n]\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n",
    "    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n\n    max_wrap = 0\n    for i in range(n):\n        max_wrap += a[i]\n        a[i] = -a[i]\n\n    max_wrap = max_wrap + max_sub_array_sum(a, n)\n\n    if max_wrap > max_so_far:\n        return max_wrap\n    else:\n        return max_so_far\n\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        max_sum += a[i]\n    curr_sum = max_sum\n    for i in range(n * 2, n * k, 1):\n        curr_sum = curr_sum - a[i % n] + a[i % n]\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        max_sum += a[i]\n    curr_max = max_sum\n    for i in range(1, k):\n        for j in range(n):\n            curr_max = max(curr_max + a[j], max_sum)\n            max_sum = curr_max\n    return max_sum\n",
    "    # kadane's algorithm\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here += a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    if max_so_far == 0:\n        return max(a)\n    max_wrap = 0\n    for i in range(n):\n        max_wrap += a[i]\n        a[i] = -a[i]\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1)\n    return max(max_so_far, max_wrap)\n",
    "    if n == 0:\n        return 0\n    if k == 1:\n        return max_sub_array_sum(a, n)\n    if k == 2:\n        return max(max_sub_array_sum(a, n), max_sub_array_sum(a, n) + sum(a))\n    return max(max_sub_array_sum_repeated(a, n, k-1), max_sub_array_sum_repeated(a, n, k-2) + sum(a))\n",
    "    max_sum = 0\n    curr_sum = 0\n\n    for i in range(n):\n        curr_sum += a[i]\n        if curr_sum < 0:\n            curr_sum = 0\n        if max_sum < curr_sum:\n            max_sum = curr_sum\n\n    max_wrap = 0\n    for i in range(n):\n        max_wrap += a[i]\n        a[i] = -a[i]\n\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        if curr_sum < 0:\n            curr_sum = 0\n        if max_wrap < curr_sum:\n            max_wrap = curr_sum\n\n    max_wrap = max_wrap + max_wrap\n\n    if max_wrap > max_sum:\n        return max_wrap\n    else:\n        return max_sum\n\n",
    "    if n == 0:\n        return 0\n    if n == 1:\n        return a[0]\n\n    # Find the max sum with middle term as pivot\n    max_sum = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    # Find the max sum on the left of the pivot\n    left_sum = 0\n    curr_sum = 0\n    for i in range(n-1, -1, -1):\n        curr_sum += a[i]\n        left_sum = max(left_sum, curr_sum)\n\n    # Find the max sum on the right of the pivot\n    right_sum = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        right_sum = max(right_sum, curr_sum)\n\n    # Return the max possible sum\n    return max(max_sum, left_sum + right_sum + (k-2)*max_sum)\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    max_sum = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    max_wrap = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        max_wrap = max(max_wrap, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    max_wrap = max_wrap * (k - 2)\n\n    return max(max_sum, max_wrap + max_sub_array_sum(a, n))\n",
    "    max_sum = 0\n    for i in range(n):\n        sum = 0\n        for j in range(i, n):\n            sum += a[j]\n            if sum > max_sum:\n                max_sum = sum\n    return max_sum * k\n",
    "    max_so_far = 0\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    if max_so_far == 0:\n        return max(a)\n    max_so_far = max_so_far * k\n    curr_prefix = 0\n    for i in range(n):\n        curr_prefix = curr_prefix + a[i]\n        max_so_far = max(max_so_far, curr_prefix)\n    curr_suffix = 0\n    for i in range(n - 1, -1, -1):\n        curr_suffix = curr_suffix + a[i]\n        max_so_far = max(max_so_far, curr_suffix)\n    return max_so_far\n\n",
    "    if k == 1:\n        return max_sub_array_sum(a, n)\n    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n",
    "    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum * k\n"
  ]
}