{
  "name": "mbpp_8_square_nums",
  "language": "py",
  "prompt": "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to find squares of individual elements in a list.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_8_square_nums.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    assert candidate([10, 20, 30]) == [100, 400, 900]\n    assert candidate([12, 15]) == [144, 225]\n\ndef test_check():\n    check(square_nums)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return [num ** 2 for num in nums]\n\nprint(square_nums([1, 2, 3, 4, 5]))",
    "    return [num ** 2 for num in nums]",
    "    return [num**2 for num in nums]\n\nprint(square_nums([1, 2, 3, 4, 5]))",
    "    return [num ** 2 for num in nums]\n\nprint(square_nums([1, 2, 3, 4, 5]))",
    "    return [num ** 2 for num in nums]\n",
    "    return [num ** 2 for num in nums]\n\nprint(square_nums([1, 2, 3, 4, 5]))",
    "    return [num ** 2 for num in nums]\n",
    "    return [num ** 2 for num in nums]",
    "    return [num ** 2 for num in nums]\n",
    "    return [num**2 for num in nums]",
    "    return [num ** 2 for num in nums]\n\n",
    "    return [num ** 2 for num in nums]\n",
    "    return [num ** 2 for num in nums]\n",
    "    return [num ** 2 for num in nums]\n\nprint(square_nums([1, 2, 3, 4, 5]))",
    "    return [num ** 2 for num in nums]\n\nprint(square_nums([1, 2, 3, 4, 5]))",
    "    return [num ** 2 for num in nums]\n",
    "    return [num ** 2 for num in nums]\n",
    "    return [num ** 2 for num in nums]\n\nprint(square_nums([1,2,3,4,5]))",
    "    return [num ** 2 for num in nums]\n",
    "    return [num ** 2 for num in nums]\n"
  ]
}