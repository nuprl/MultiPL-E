{
  "name": "mbpp_130_max_occurrences",
  "language": "py",
  "prompt": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "results": [
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 0\n    curr_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            curr_count += 1\n        else:\n            max_count = max(max_count, curr_count)\n            curr_count = 1\n    return max(max_count, curr_count)\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9nz8kdox.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp9nz8kdox.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp9nz8kdox.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    curr_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            curr_count += 1\n        else:\n            curr_count = 1\n        max_count = max(max_count, curr_count)\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpaz9jjnaa.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpaz9jjnaa.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpaz9jjnaa.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    return max(nums, key=nums.count)\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    nums.sort()\n    max_count = 0\n    max_num = 0\n    count = 1\n    for i in range(len(nums) - 1):\n        if nums[i] == nums[i + 1]:\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n                max_num = nums[i]\n            count = 1\n    if count > max_count:\n        max_count = count\n        max_num = nums[i]\n    return max_num\n\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5bsegbri.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp5bsegbri.py\", line 31, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp5bsegbri.py\", line 27, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n\n    max_occur = 0\n    num_occur = {}\n    for num in nums:\n        if num not in num_occur:\n            num_occur[num] = 1\n        else:\n            num_occur[num] += 1\n\n        max_occur = max(max_occur, num_occur[num])\n\n    return max_occur\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprtlkudi3.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmprtlkudi3.py\", line 28, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmprtlkudi3.py\", line 23, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return 1\n    nums.sort()\n    count = 1\n    max_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            count = 1\n        if count > max_count:\n            max_count = count\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6vmq0g1r.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmp6vmq0g1r.py\", line 29, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp6vmq0g1r.py\", line 24, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    nums.sort()\n    max_num = nums[0]\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n                max_num = nums[i - 1]\n            count = 1\n    if count > max_count:\n        max_count = count\n        max_num = nums[-1]\n    return max_num\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpefzoaf63.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmpefzoaf63.py\", line 30, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpefzoaf63.py\", line 26, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 1\n    return max(max_count, count)\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpox5m7is5.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpox5m7is5.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpox5m7is5.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    d = {}\n    for num in nums:\n        if num in d:\n            d[num] += 1\n        else:\n            d[num] = 1\n    max_val = max(d.values())\n    return max_val\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9kdaha8a.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmp9kdaha8a.py\", line 24, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp9kdaha8a.py\", line 19, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    curr_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            curr_count += 1\n        else:\n            max_count = max(max_count, curr_count)\n            curr_count = 1\n    return max(max_count, curr_count)\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpo1oykz8s.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpo1oykz8s.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpo1oykz8s.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    return max(nums, key=nums.count)\n\nprint(max_occurrences([1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpcul3anj7.py\", line 9\n    print(max_occurrences([1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1\n                          ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n\n    max_count = 0\n    max_num = None\n    num_count = {}\n\n    for num in nums:\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n\n        if num_count[num] > max_count:\n            max_count = num_count[num]\n            max_num = num\n\n    return max_num\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_freq = 1\n    curr_freq = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            curr_freq += 1\n        else:\n            curr_freq = 1\n        max_freq = max(max_freq, curr_freq)\n    return max_freq\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmplcs1fpil.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmplcs1fpil.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmplcs1fpil.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    nums.sort()\n    max_count = 0\n    max_num = 0\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n                max_num = nums[i-1]\n            count = 1\n    if count > max_count:\n        max_count = count\n        max_num = nums[-1]\n    return max_num\n\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8uhi2sfo.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp8uhi2sfo.py\", line 31, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp8uhi2sfo.py\", line 27, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    count = {}\n    for num in nums:\n        if num not in count:\n            count[num] = 1\n        else:\n            count[num] += 1\n    return max(count.values())\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfa4bpwwb.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpfa4bpwwb.py\", line 22, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpfa4bpwwb.py\", line 17, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_freq = 1\n    curr_freq = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            curr_freq += 1\n        else:\n            max_freq = max(max_freq, curr_freq)\n            curr_freq = 1\n    return max(max_freq, curr_freq)\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0hmrjw50.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmp0hmrjw50.py\", line 25, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp0hmrjw50.py\", line 20, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    curr_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            curr_count += 1\n        else:\n            curr_count = 1\n        max_count = max(max_count, curr_count)\n    return max_count\n\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmppwoefwuc.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmppwoefwuc.py\", line 27, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmppwoefwuc.py\", line 22, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            count = 1\n        max_count = max(max_count, count)\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpet6sir93.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpet6sir93.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpet6sir93.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    # TODO: Implement this function\n    pass\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsihkw_vq.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpsihkw_vq.py\", line 16, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpsihkw_vq.py\", line 11, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 1\n    return max(max_count, count)\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpox5m7is5.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpox5m7is5.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpox5m7is5.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    curr_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            curr_count += 1\n        else:\n            max_count = max(max_count, curr_count)\n            curr_count = 1\n    return max(max_count, curr_count)\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8x2wnpvp.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmp8x2wnpvp.py\", line 25, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp8x2wnpvp.py\", line 20, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n\n    max_count = 0\n    num_count = {}\n    for num in nums:\n        if num not in num_count:\n            num_count[num] = 1\n        else:\n            num_count[num] += 1\n        max_count = max(max_count, num_count[num])\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzgsig4zm.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpzgsig4zm.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpzgsig4zm.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    d = {}\n    for num in nums:\n        d[num] = d.get(num, 0) + 1\n    return max(d.values())\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9wjp9o0s.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmp9wjp9o0s.py\", line 19, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp9wjp9o0s.py\", line 14, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 1\n    return max(max_count, count)\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpox5m7is5.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpox5m7is5.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpox5m7is5.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_freq = 1\n    curr_freq = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            curr_freq += 1\n        else:\n            max_freq = max(max_freq, curr_freq)\n            curr_freq = 1\n    return max(max_freq, curr_freq)\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpr42c5mtx.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpr42c5mtx.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpr42c5mtx.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    max_count = 0\n    max_item = None\n    counts = {}\n    for num in nums:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n        if counts[num] > max_count:\n            max_count = counts[num]\n            max_item = num\n    return max_item\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    cur_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            cur_count += 1\n        else:\n            max_count = max(max_count, cur_count)\n            cur_count = 1\n    return max(max_count, cur_count)\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpn7jxbmz6.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpn7jxbmz6.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpn7jxbmz6.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            count = 1\n        max_count = max(max_count, count)\n    return max_count\n\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpn603qnlg.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpn603qnlg.py\", line 28, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpn603qnlg.py\", line 23, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    nums.sort()\n    max_count = 0\n    max_num = 0\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n                max_num = nums[i - 1]\n            count = 1\n    if count > max_count:\n        max_count = count\n        max_num = nums[-1]\n    return max_num\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5aitwg3u.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmp5aitwg3u.py\", line 30, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp5aitwg3u.py\", line 26, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            count = 1\n        max_count = max(max_count, count)\n    return max_count\n\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq8b458il.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpq8b458il.py\", line 27, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpq8b458il.py\", line 22, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    max_count = 0\n    max_item = None\n    num_count = {}\n    for num in nums:\n        if num not in num_count:\n            num_count[num] = 1\n        else:\n            num_count[num] += 1\n        if num_count[num] > max_count:\n            max_count = num_count[num]\n            max_item = num\n    return max_item\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    nums.sort()\n    max_count = 0\n    max_item = None\n    current_count = 0\n    current_item = None\n    for num in nums:\n        if num != current_item:\n            current_item = num\n            current_count = 1\n        else:\n            current_count += 1\n        if current_count > max_count:\n            max_count = current_count\n            max_item = current_item\n    return max_item\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp65enjzdc.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmp65enjzdc.py\", line 29, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp65enjzdc.py\", line 25, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    curr_num = nums[0]\n    curr_count = 1\n    max_num = curr_num\n    max_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == curr_num:\n            curr_count += 1\n        else:\n            if curr_count > max_count:\n                max_count = curr_count\n                max_num = curr_num\n            curr_num = nums[i]\n            curr_count = 1\n    if curr_count > max_count:\n        max_count = curr_count\n        max_num = curr_num\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnj7wgokk.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpnj7wgokk.py\", line 34, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpnj7wgokk.py\", line 29, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    curr_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            curr_count += 1\n        else:\n            max_count = max(max_count, curr_count)\n            curr_count = 1\n    return max(max_count, curr_count)\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpo1oykz8s.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpo1oykz8s.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpo1oykz8s.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_freq = 1\n    curr_freq = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            curr_freq += 1\n        else:\n            max_freq = max(max_freq, curr_freq)\n            curr_freq = 1\n    return max(max_freq, curr_freq)\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0hmrjw50.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmp0hmrjw50.py\", line 25, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp0hmrjw50.py\", line 20, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    nums_dict = {}\n    for num in nums:\n        if num in nums_dict:\n            nums_dict[num] += 1\n        else:\n            nums_dict[num] = 1\n    max_value = max(nums_dict.values())\n    return max_value\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1m_egczc.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmp1m_egczc.py\", line 22, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp1m_egczc.py\", line 17, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 1\n    return max(max_count, count)\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcgaylphc.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpcgaylphc.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpcgaylphc.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    max_count = 0\n    max_item = None\n    count = {}\n    for item in nums:\n        if item not in count:\n            count[item] = 1\n        else:\n            count[item] += 1\n        if count[item] > max_count:\n            max_count = count[item]\n            max_item = item\n    return max_item\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    max_count = 0\n    num_count = {}\n    for num in nums:\n        if num not in num_count:\n            num_count[num] = 1\n        else:\n            num_count[num] += 1\n        max_count = max(max_count, num_count[num])\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk5t666qz.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpk5t666qz.py\", line 25, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpk5t666qz.py\", line 20, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    max_count = 0\n    for num in nums:\n        count = nums.count(num)\n        if count > max_count:\n            max_count = count\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptq66osxa.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmptq66osxa.py\", line 22, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmptq66osxa.py\", line 17, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    curr_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            curr_count += 1\n        else:\n            max_count = max(max_count, curr_count)\n            curr_count = 1\n    return max(max_count, curr_count)\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpo1oykz8s.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpo1oykz8s.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpo1oykz8s.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            count += 1\n        else:\n            count = 1\n        max_count = max(max_count, count)\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4mnstsq8.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4mnstsq8.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp4mnstsq8.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 1\n    return max(max_count, count)\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxv5ps0oo.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpxv5ps0oo.py\", line 27, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpxv5ps0oo.py\", line 22, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n\n    counts = {}\n    for num in nums:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n\n    max_count = 0\n    for count in counts.values():\n        max_count = max(max_count, count)\n\n    return max_count\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpl0csn5cc.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpl0csn5cc.py\", line 28, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpl0csn5cc.py\", line 23, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    # Your code here\n    return 0\n\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpz7bwvtdh.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmpz7bwvtdh.py\", line 17, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpz7bwvtdh.py\", line 12, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    count = {}\n    for num in nums:\n        if num not in count:\n            count[num] = 1\n        else:\n            count[num] += 1\n    max_count = 0\n    for num in count:\n        if count[num] > max_count:\n            max_count = count[num]\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2wqxn8lb.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp2wqxn8lb.py\", line 27, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp2wqxn8lb.py\", line 22, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    curr_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            curr_count += 1\n        else:\n            max_count = max(max_count, curr_count)\n            curr_count = 1\n    return max(max_count, curr_count)\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpo1oykz8s.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpo1oykz8s.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpo1oykz8s.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    num_dict = {}\n    for num in nums:\n        if num in num_dict:\n            num_dict[num] += 1\n        else:\n            num_dict[num] = 1\n    max_num = max(num_dict.values())\n    return max_num\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1rv5t5_u.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmp1rv5t5_u.py\", line 24, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp1rv5t5_u.py\", line 19, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    d = {}\n    for i in nums:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    max_val = max(d.values())\n    return max_val\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9clq1fnn.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmp9clq1fnn.py\", line 22, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp9clq1fnn.py\", line 17, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n\n    nums.sort()\n    max_count = 1\n    curr_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            curr_count += 1\n        else:\n            max_count = max(max_count, curr_count)\n            curr_count = 1\n    return max(max_count, curr_count)\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzrhn8h7i.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpzrhn8h7i.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpzrhn8h7i.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    max_count = 0\n    num_count = {}\n    for num in nums:\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n        if num_count[num] > max_count:\n            max_count = num_count[num]\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpf0fktqv_.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpf0fktqv_.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpf0fktqv_.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    return max(Counter(nums).values())\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpf0a978ef.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpf0a978ef.py\", line 15, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpf0a978ef.py\", line 10, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n  File \"/tmp/tmpf0a978ef.py\", line 7, in max_occurrences\n    return max(Counter(nums).values())\nNameError: name 'Counter' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            count = 1\n        max_count = max(max_count, count)\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3xeso5xa.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp3xeso5xa.py\", line 27, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp3xeso5xa.py\", line 22, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    max_count = 0\n    num_count = {}\n    for num in nums:\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n        max_count = max(max_count, num_count[num])\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv7zzb28o.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpv7zzb28o.py\", line 25, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpv7zzb28o.py\", line 20, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    nums.sort()\n    max_count = 0\n    max_num = 0\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n                max_num = nums[i-1]\n            count = 1\n    if count > max_count:\n        max_count = count\n        max_num = nums[-1]\n    return max_num\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdf9j815o.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmpdf9j815o.py\", line 30, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpdf9j815o.py\", line 26, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    nums_dict = {}\n    for num in nums:\n        if num in nums_dict:\n            nums_dict[num] += 1\n        else:\n            nums_dict[num] = 1\n    max_value = max(nums_dict.values())\n    return max_value\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1m_egczc.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmp1m_egczc.py\", line 22, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp1m_egczc.py\", line 17, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 1\n    return max(max_count, count)\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpuwi33lj6.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpuwi33lj6.py\", line 25, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpuwi33lj6.py\", line 20, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n\n    max_count = 0\n    num_counts = {}\n    for num in nums:\n        num_counts[num] = num_counts.get(num, 0) + 1\n        max_count = max(max_count, num_counts[num])\n\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj6hfj2ub.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpj6hfj2ub.py\", line 24, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpj6hfj2ub.py\", line 19, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if len(nums) == 0:\n        return 0\n\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            count = 1\n        max_count = max(max_count, count)\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxcmonw4f.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpxcmonw4f.py\", line 27, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpxcmonw4f.py\", line 22, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            count += 1\n        else:\n            count = 1\n        max_count = max(max_count, count)\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4mnstsq8.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4mnstsq8.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp4mnstsq8.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 1\n    return max(max_count, count)\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpox5m7is5.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpox5m7is5.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpox5m7is5.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    nums.sort()\n    max_count = 1\n    res = nums[0]\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n                res = nums[i - 1]\n            count = 1\n    if count > max_count:\n        max_count = count\n        res = nums[-1]\n    return res\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp89_udrtm.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmp89_udrtm.py\", line 30, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp89_udrtm.py\", line 26, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            count += 1\n        else:\n            count = 1\n        max_count = max(max_count, count)\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4mnstsq8.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4mnstsq8.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp4mnstsq8.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    # TODO: Implement this function\n    pass\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsihkw_vq.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpsihkw_vq.py\", line 16, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpsihkw_vq.py\", line 11, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            count = 1\n        max_count = max(max_count, count)\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpet6sir93.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpet6sir93.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpet6sir93.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    nums.sort()\n    max_count = 1\n    res = nums[0]\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n                res = nums[i - 1]\n            count = 1\n    if count > max_count:\n        max_count = count\n        res = nums[-1]\n    return res\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp89_udrtm.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmp89_udrtm.py\", line 30, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp89_udrtm.py\", line 26, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    max_count = 0\n    max_item = None\n    for item in nums:\n        count = nums.count(item)\n        if count > max_count:\n            max_count = count\n            max_item = item\n    return max_item\n\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 0\n    curr_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            curr_count += 1\n        else:\n            max_count = max(max_count, curr_count)\n            curr_count = 1\n    return max(max_count, curr_count)\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp04t5lw_u.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmp04t5lw_u.py\", line 25, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp04t5lw_u.py\", line 20, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 1\n\n    return max(max_count, count)\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmppo2_li5p.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmppo2_li5p.py\", line 28, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmppo2_li5p.py\", line 23, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    nums.sort()\n    max_count = 1\n    res = nums[0]\n    curr_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            curr_count += 1\n        else:\n            if curr_count > max_count:\n                max_count = curr_count\n                res = nums[i - 1]\n            curr_count = 1\n    if curr_count > max_count:\n        max_count = curr_count\n        res = nums[-1]\n    return res\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp00bkmn72.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmp00bkmn72.py\", line 30, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp00bkmn72.py\", line 26, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    cur_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            cur_count += 1\n        else:\n            cur_count = 1\n        max_count = max(max_count, cur_count)\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpn0ow8o2v.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpn0ow8o2v.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpn0ow8o2v.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    d = {}\n    for num in nums:\n        if num in d:\n            d[num] += 1\n        else:\n            d[num] = 1\n    max_value = max(d.values())\n    return max_value\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpg_ib14oq.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpg_ib14oq.py\", line 24, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpg_ib14oq.py\", line 19, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    nums_dict = {}\n    for num in nums:\n        if num in nums_dict:\n            nums_dict[num] += 1\n        else:\n            nums_dict[num] = 1\n    max_value = max(nums_dict.values())\n    return max_value\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1m_egczc.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmp1m_egczc.py\", line 22, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp1m_egczc.py\", line 17, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    nums.sort()\n    max_freq = 0\n    max_num = None\n    curr_freq = 1\n    curr_num = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] == curr_num:\n            curr_freq += 1\n        else:\n            if curr_freq > max_freq:\n                max_freq = curr_freq\n                max_num = curr_num\n            curr_freq = 1\n            curr_num = nums[i]\n    if curr_freq > max_freq:\n        max_freq = curr_freq\n        max_num = curr_num\n    return max_num\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_wwkv_jr.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp_wwkv_jr.py\", line 32, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp_wwkv_jr.py\", line 28, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    max_count = 0\n    max_item = None\n    for num in nums:\n        count = nums.count(num)\n        if count > max_count:\n            max_count = count\n            max_item = num\n    return max_item\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    max_count = 0\n    num_counts = {}\n    for num in nums:\n        if num in num_counts:\n            num_counts[num] += 1\n        else:\n            num_counts[num] = 1\n        max_count = max(max_count, num_counts[num])\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnvueilbf.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpnvueilbf.py\", line 25, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpnvueilbf.py\", line 20, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_freq = 0\n    curr_freq = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            curr_freq += 1\n        else:\n            max_freq = max(max_freq, curr_freq)\n            curr_freq = 1\n    return max(max_freq, curr_freq)\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptr5er4b6.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmptr5er4b6.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmptr5er4b6.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    max_count = 0\n    max_item = None\n    counts = {}\n    for num in nums:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n        if counts[num] > max_count:\n            max_count = counts[num]\n            max_item = num\n    return max_item\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    nums.sort()\n    max_count = 0\n    max_num = None\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n                max_num = nums[i - 1]\n            count = 1\n    if count > max_count:\n        max_count = count\n        max_num = nums[-1]\n    return max_num\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvle_ztbi.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmpvle_ztbi.py\", line 30, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpvle_ztbi.py\", line 26, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    max_count = 0\n    for i in nums:\n        count = nums.count(i)\n        if count > max_count:\n            max_count = count\n            max_item = i\n    return max_item\n\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    return max(nums, key=nums.count)\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    count = {}\n    for num in nums:\n        if num not in count:\n            count[num] = 1\n        else:\n            count[num] += 1\n    return max(count.values())\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfa4bpwwb.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpfa4bpwwb.py\", line 22, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpfa4bpwwb.py\", line 17, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 1\n    return max(max_count, count)\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpox5m7is5.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpox5m7is5.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpox5m7is5.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    nums.sort()\n    max_count = 0\n    max_item = None\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n                max_item = nums[i - 1]\n            count = 1\n    if count > max_count:\n        max_count = count\n        max_item = nums[-1]\n    return max_item\n\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpwfx6194e.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmpwfx6194e.py\", line 31, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpwfx6194e.py\", line 27, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    nums_dict = {}\n    for num in nums:\n        if num in nums_dict:\n            nums_dict[num] += 1\n        else:\n            nums_dict[num] = 1\n    max_occur = 0\n    for key, value in nums_dict.items():\n        if value > max_occur:\n            max_occur = value\n    return max_occur\n\nprint(max_occurrences([1, 2, 3, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 2\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpv695a9i1.py\", line 19\n    print(max_occurrences([1, 2, 3, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 2\n                          ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    curr_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            curr_count += 1\n        else:\n            max_count = max(max_count, curr_count)\n            curr_count = 1\n    return max(max_count, curr_count)\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpo1oykz8s.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpo1oykz8s.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpo1oykz8s.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_occur = 1\n    curr_occur = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            curr_occur += 1\n        else:\n            if curr_occur > max_occur:\n                max_occur = curr_occur\n            curr_occur = 1\n    return max_occur\n\nprint(max_occurrences([1,2,3,1,2,3,3,3]))\nprint(max_occurrences([1,2,3,1,2,3,3,3,3]))\nprint(max_occurrences([1,2,3,1,2,3,3,3,3,3]))\nprint(max_occurrences([1,2,3,1,2,3,3,3,3,3,3]))\nprint(max_occurrences([1,2,3,1,2,3,3,3,3,3,3,3]))\nprint(max_occurrences([1,2,3,1,2,3,3,3,3,3,3,3,3]))\nprint(max_occurrences([1,2,3,1,2,3,3,3,3,3,3,3,3,3]))\nprint(max_occurrences([1,2,3,1,2,3,3,3,3,3,3,3,3,3,3]))\nprint(max_occurrences([1,2,3,1,2,3,3,3,3,3,3,3,3,3,3,3]))\nprint(max_occurrences([1,2,3,1,2,3,3,3,3,3,3,3,3,3,3,3,3]))\nprint(max_occurrences([1,2,3,1,2,3,3,3,3,3,3,3,3,3,3,3\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "  File \"/tmp/tmp88en6xic.py\", line 31\n    print(max_occurrences([1,2,3,1,2,3,3,3,3,3,3,3,3,3,3,3\n                          ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    d = {}\n    for i in nums:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return max(d.values())\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv0olhlhr.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpv0olhlhr.py\", line 21, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpv0olhlhr.py\", line 16, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 1\n    return max(max_count, count)\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpuwi33lj6.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpuwi33lj6.py\", line 25, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpuwi33lj6.py\", line 20, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    nums_dict = {}\n    for num in nums:\n        if num in nums_dict:\n            nums_dict[num] += 1\n        else:\n            nums_dict[num] = 1\n    max_val = max(nums_dict.values())\n    return max_val\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpocz1u7ug.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpocz1u7ug.py\", line 22, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpocz1u7ug.py\", line 17, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n\n    nums.sort()\n    max_count = 1\n    cur_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            cur_count += 1\n        else:\n            max_count = max(max_count, cur_count)\n            cur_count = 1\n    return max(max_count, cur_count)\n\nprint(max_occurrences([1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2,\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpw1gw91jy.py\", line 21\n    print(max_occurrences([1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 2,\n                          ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if len(nums) == 0:\n        return 0\n    max_num = nums[0]\n    max_count = 1\n    num_counts = {}\n    for num in nums:\n        if num in num_counts:\n            num_counts[num] += 1\n        else:\n            num_counts[num] = 1\n        if num_counts[num] > max_count:\n            max_count = num_counts[num]\n            max_num = num\n    return max_num\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    max_freq = 0\n    max_item = None\n    freq_map = {}\n    for num in nums:\n        if num not in freq_map:\n            freq_map[num] = 1\n        else:\n            freq_map[num] += 1\n        if freq_map[num] > max_freq:\n            max_freq = freq_map[num]\n            max_item = num\n    return max_item\n\nprint(max_occurrences([1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "  File \"/tmp/tmp8ne2pvts.py\", line 20\n    print(max_occurrences([1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1\n                          ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    max_count = 0\n    max_num = 0\n    for num, c in count.items():\n        if c > max_count:\n            max_count = c\n            max_num = num\n    return max_num\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    curr_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            curr_count += 1\n        else:\n            max_count = max(max_count, curr_count)\n            curr_count = 1\n    max_count = max(max_count, curr_count)\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpd7bmimtb.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpd7bmimtb.py\", line 27, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpd7bmimtb.py\", line 22, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 1\n    return max(max_count, count)\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpox5m7is5.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpox5m7is5.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpox5m7is5.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    d = {}\n    for i in nums:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return max(d.values())\n\nprint(max_occurrences([1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "  File \"/tmp/tmp99a0fg6l.py\", line 15\n    print(max_occurrences([1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2\n                          ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    d = {}\n    for i in nums:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return max(d.values())\n\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7_1fmnhn.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmp7_1fmnhn.py\", line 22, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp7_1fmnhn.py\", line 17, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    curr_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            curr_count += 1\n        else:\n            max_count = max(max_count, curr_count)\n            curr_count = 1\n    return max(max_count, curr_count)\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8x2wnpvp.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmp8x2wnpvp.py\", line 25, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp8x2wnpvp.py\", line 20, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    nums_dict = {}\n    for num in nums:\n        if num in nums_dict:\n            nums_dict[num] += 1\n        else:\n            nums_dict[num] = 1\n    max_num = 0\n    max_count = 0\n    for num, count in nums_dict.items():\n        if count > max_count:\n            max_num = num\n            max_count = count\n    return max_num\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            count += 1\n        else:\n            count = 1\n        max_count = max(max_count, count)\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4mnstsq8.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4mnstsq8.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp4mnstsq8.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    max_count = 0\n    max_num = None\n    num_count = {}\n    for num in nums:\n        if num not in num_count:\n            num_count[num] = 1\n        else:\n            num_count[num] += 1\n        if num_count[num] > max_count:\n            max_count = num_count[num]\n            max_num = num\n    return max_num\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    count = 1\n    max_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            count = 1\n        max_count = max(max_count, count)\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpapfls4rj.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpapfls4rj.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpapfls4rj.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return 1\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(len(nums) - 1):\n        if nums[i] == nums[i + 1]:\n            count += 1\n        else:\n            count = 1\n        if count > max_count:\n            max_count = count\n    return max_count\n\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9s9812vg.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmp9s9812vg.py\", line 30, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp9s9812vg.py\", line 25, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            count = 1\n        max_count = max(max_count, count)\n    return max_count\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvzg9tp43.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpvzg9tp43.py\", line 25, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpvzg9tp43.py\", line 20, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    curr_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            curr_count += 1\n        else:\n            curr_count = 1\n        max_count = max(max_count, curr_count)\n    return max_count\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmputcz1055.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmputcz1055.py\", line 25, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmputcz1055.py\", line 20, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return 1\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            count = 1\n        max_count = max(max_count, count)\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1ririm6w.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmp1ririm6w.py\", line 28, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp1ririm6w.py\", line 23, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n\n    num_count = {}\n    for num in nums:\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n\n    return max(num_count.values())\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjvi0ran_.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpjvi0ran_.py\", line 25, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpjvi0ran_.py\", line 20, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    max_count = 0\n    max_item = None\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n        if count[num] > max_count:\n            max_count = count[num]\n            max_item = num\n    return max_item\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_freq = 1\n    cur_freq = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            cur_freq += 1\n        else:\n            cur_freq = 1\n        max_freq = max(max_freq, cur_freq)\n    return max_freq\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsi4zxf5g.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpsi4zxf5g.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpsi4zxf5g.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            count += 1\n        else:\n            count = 1\n        max_count = max(max_count, count)\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4mnstsq8.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4mnstsq8.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp4mnstsq8.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n\n    nums.sort()\n    max_freq = 1\n    curr_freq = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            curr_freq += 1\n        else:\n            curr_freq = 1\n        max_freq = max(max_freq, curr_freq)\n    return max_freq\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0i614xcr.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp0i614xcr.py\", line 27, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp0i614xcr.py\", line 22, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    # TODO: Implement me\n    pass\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpixccqnkz.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpixccqnkz.py\", line 16, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpixccqnkz.py\", line 11, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    count = 1\n    max_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            count = 1\n        max_count = max(max_count, count)\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpapfls4rj.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpapfls4rj.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpapfls4rj.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    count = 1\n    max_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            count = 1\n        max_count = max(count, max_count)\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpucss9s8y.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpucss9s8y.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpucss9s8y.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if len(nums) == 0:\n        return 0\n    max_occur = 0\n    nums_dict = {}\n    for num in nums:\n        if num in nums_dict:\n            nums_dict[num] += 1\n        else:\n            nums_dict[num] = 1\n        if nums_dict[num] > max_occur:\n            max_occur = nums_dict[num]\n    return max_occur\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvsbhw504.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpvsbhw504.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpvsbhw504.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    nums_dict = {}\n    for num in nums:\n        if num in nums_dict:\n            nums_dict[num] += 1\n        else:\n            nums_dict[num] = 1\n    max_occurrences = 0\n    for num in nums_dict:\n        if nums_dict[num] > max_occurrences:\n            max_occurrences = nums_dict[num]\n    return max_occurrences\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp60shb0kd.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmp60shb0kd.py\", line 24, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp60shb0kd.py\", line 19, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if len(nums) == 0:\n        return 0\n\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            count += 1\n        else:\n            count = 1\n        if count > max_count:\n            max_count = count\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpx2l752j7.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpx2l752j7.py\", line 28, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpx2l752j7.py\", line 23, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n\n    max_count = 0\n    counts = {}\n    for num in nums:\n        if num not in counts:\n            counts[num] = 1\n        else:\n            counts[num] += 1\n        max_count = max(max_count, counts[num])\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpf54dnumz.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpf54dnumz.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpf54dnumz.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    curr_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            curr_count += 1\n        else:\n            max_count = max(max_count, curr_count)\n            curr_count = 1\n    return max(max_count, curr_count)\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqt29_iii.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpqt29_iii.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpqt29_iii.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    max_count = 0\n    num_counts = {}\n    for num in nums:\n        if num not in num_counts:\n            num_counts[num] = 1\n        else:\n            num_counts[num] += 1\n        max_count = max(max_count, num_counts[num])\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphexrzd7i.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmphexrzd7i.py\", line 25, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmphexrzd7i.py\", line 20, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    # TODO: Implement me\n    pass\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8f3_i39t.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp8f3_i39t.py\", line 15, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp8f3_i39t.py\", line 10, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    d = {}\n    for i in nums:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    max_count = 0\n    for i in d:\n        if d[i] > max_count:\n            max_count = d[i]\n    return max_count\n\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbs16zd5v.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpbs16zd5v.py\", line 28, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpbs16zd5v.py\", line 23, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    nums.sort()\n    max_count = 1\n    res = nums[0]\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n                res = nums[i - 1]\n            count = 1\n    if count > max_count:\n        max_count = count\n        res = nums[-1]\n    return res\n\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptuc6365v.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmptuc6365v.py\", line 31, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmptuc6365v.py\", line 27, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    max_count = 0\n    max_num = None\n    num_count = {}\n    for num in nums:\n        if num not in num_count:\n            num_count[num] = 1\n        else:\n            num_count[num] += 1\n        if num_count[num] > max_count:\n            max_count = num_count[num]\n            max_num = num\n    return max_num\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    curr_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            curr_count += 1\n        else:\n            max_count = max(max_count, curr_count)\n            curr_count = 1\n    return max(max_count, curr_count)\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpo1oykz8s.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpo1oykz8s.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpo1oykz8s.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if len(nums) == 0:\n        return 0\n    nums.sort()\n    max_count = 1\n    curr_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            curr_count += 1\n        else:\n            curr_count = 1\n        max_count = max(max_count, curr_count)\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2ow0l85u.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp2ow0l85u.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp2ow0l85u.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    num_count = {}\n    for num in nums:\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n    max_count = 0\n    for num, count in num_count.items():\n        if count > max_count:\n            max_count = count\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpx0qyjp_g.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpx0qyjp_g.py\", line 27, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpx0qyjp_g.py\", line 22, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    count = {}\n    for num in nums:\n        if num not in count:\n            count[num] = 1\n        else:\n            count[num] += 1\n    max_count = 0\n    for num in count:\n        if count[num] > max_count:\n            max_count = count[num]\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0s6_ywix.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmp0s6_ywix.py\", line 25, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp0s6_ywix.py\", line 20, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    nums_dict = {}\n    for num in nums:\n        if num in nums_dict:\n            nums_dict[num] += 1\n        else:\n            nums_dict[num] = 1\n    max_num = 0\n    max_count = 0\n    for num, count in nums_dict.items():\n        if count > max_count:\n            max_count = count\n            max_num = num\n    return max_num\n\nprint(max_occurrences([1, 2, 3, 1, 2, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5]))\nprint(max_occurrences([1, 2, 3, 1, 2, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpkn579mpf.py\", line 22\n    print(max_occurrences([1, 2, 3, 1, 2, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5\n                          ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if len(nums) == 0:\n        return 0\n    nums.sort()\n    max_count = 1\n    curr_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            curr_count += 1\n        else:\n            curr_count = 1\n        max_count = max(max_count, curr_count)\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2ow0l85u.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp2ow0l85u.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp2ow0l85u.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    max_count = 0\n    max_num = None\n    num_counts = {}\n    for num in nums:\n        if num not in num_counts:\n            num_counts[num] = 1\n        else:\n            num_counts[num] += 1\n        if num_counts[num] > max_count:\n            max_count = num_counts[num]\n            max_num = num\n    return max_num\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    nums.sort()\n    max_count = 0\n    max_num = 0\n    count = 0\n    for i in range(len(nums)):\n        if i == 0:\n            count = 1\n            continue\n        if nums[i] == nums[i-1]:\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n                max_num = nums[i-1]\n            count = 1\n    if count > max_count:\n        max_count = count\n        max_num = nums[i]\n    return max_num\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpajsou_ou.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpajsou_ou.py\", line 33, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpajsou_ou.py\", line 29, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    nums.sort()\n    count = 1\n    max_count = 1\n    max_item = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            count = 1\n        if count > max_count:\n            max_count = count\n            max_item = nums[i]\n    return max_item\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2kg3kmpd.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp2kg3kmpd.py\", line 27, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp2kg3kmpd.py\", line 23, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    max_count = 0\n    for key in count:\n        max_count = max(max_count, count[key])\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpu2x6_vic.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpu2x6_vic.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpu2x6_vic.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    curr_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            curr_count += 1\n        else:\n            curr_count = 1\n        max_count = max(max_count, curr_count)\n    return max_count\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmputcz1055.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmputcz1055.py\", line 25, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmputcz1055.py\", line 20, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 1\n    return max(max_count, count)\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpox5m7is5.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpox5m7is5.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpox5m7is5.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    nums.sort()\n    max_count = 0\n    max_num = 0\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n                max_num = nums[i - 1]\n            count = 1\n    if count > max_count:\n        max_count = count\n        max_num = nums[-1]\n    return max_num\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5aitwg3u.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmp5aitwg3u.py\", line 30, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp5aitwg3u.py\", line 26, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    nums_dict = {}\n    for num in nums:\n        if num in nums_dict:\n            nums_dict[num] += 1\n        else:\n            nums_dict[num] = 1\n    max_num = max(nums_dict.values())\n    return max_num\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpae0hf9hs.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpae0hf9hs.py\", line 22, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpae0hf9hs.py\", line 17, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            count += 1\n        else:\n            count = 1\n        max_count = max(max_count, count)\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4mnstsq8.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4mnstsq8.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp4mnstsq8.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    curr_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            curr_count += 1\n        else:\n            max_count = max(max_count, curr_count)\n            curr_count = 1\n    return max(max_count, curr_count)\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqt29_iii.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpqt29_iii.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpqt29_iii.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 1\n    return max(max_count, count)\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpox5m7is5.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpox5m7is5.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpox5m7is5.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 1\n    return max(max_count, count)\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpox5m7is5.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpox5m7is5.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpox5m7is5.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return 1\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            count += 1\n        else:\n            count = 1\n        if count > max_count:\n            max_count = count\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_m94vcc3.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmp_m94vcc3.py\", line 29, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp_m94vcc3.py\", line 24, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_num = nums[0]\n    max_count = 1\n    cur_num = nums[0]\n    cur_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == cur_num:\n            cur_count += 1\n        else:\n            if cur_count > max_count:\n                max_count = cur_count\n                max_num = cur_num\n            cur_num = nums[i]\n            cur_count = 1\n    if cur_count > max_count:\n        max_count = cur_count\n        max_num = cur_num\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvo9u2j7s.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpvo9u2j7s.py\", line 34, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpvo9u2j7s.py\", line 29, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            count = 1\n        max_count = max(max_count, count)\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpet6sir93.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpet6sir93.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpet6sir93.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    nums.sort()\n    max_count = 0\n    max_num = 0\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n                max_num = nums[i - 1]\n            count = 1\n    if count > max_count:\n        max_count = count\n        max_num = nums[len(nums) - 1]\n    return max_num\n\nprint(max_occurrences([1, 3, 2, 1, 2, 1, 5, 3, 3, 4, 2]))\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "1\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv26gb3n6.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmpv26gb3n6.py\", line 31, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpv26gb3n6.py\", line 27, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            count += 1\n        else:\n            count = 1\n        max_count = max(max_count, count)\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4mnstsq8.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4mnstsq8.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp4mnstsq8.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    d = {}\n    for num in nums:\n        d[num] = d.get(num, 0) + 1\n    return max(d.values())\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0zzr66tx.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp0zzr66tx.py\", line 20, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp0zzr66tx.py\", line 15, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    nums.sort()\n    max_count = 0\n    max_num = 0\n    count = 1\n    for i in range(len(nums) - 1):\n        if nums[i] == nums[i + 1]:\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n                max_num = nums[i]\n            count = 1\n    if count > max_count:\n        max_count = count\n        max_num = nums[-1]\n    return max_num\n\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpja5875ia.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmpja5875ia.py\", line 31, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpja5875ia.py\", line 27, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_occur = 1\n    curr_occur = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            curr_occur += 1\n            max_occur = max(max_occur, curr_occur)\n        else:\n            curr_occur = 1\n    return max_occur\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcp2ev174.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpcp2ev174.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpcp2ev174.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    curr_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            curr_count += 1\n        else:\n            curr_count = 1\n        max_count = max(max_count, curr_count)\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpaz9jjnaa.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpaz9jjnaa.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpaz9jjnaa.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return 1\n    else:\n        nums.sort()\n        max_count = 1\n        count = 1\n        for i in range(1, len(nums)):\n            if nums[i] == nums[i-1]:\n                count += 1\n            else:\n                count = 1\n            if count > max_count:\n                max_count = count\n        return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6mf3bjo5.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmp6mf3bjo5.py\", line 30, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp6mf3bjo5.py\", line 25, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n\n    nums.sort()\n    max_freq = 1\n    curr_freq = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            curr_freq += 1\n        else:\n            max_freq = max(max_freq, curr_freq)\n            curr_freq = 1\n\n    return max(max_freq, curr_freq)\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqrolae64.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpqrolae64.py\", line 28, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpqrolae64.py\", line 23, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    curr_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            curr_count += 1\n        else:\n            curr_count = 1\n        max_count = max(max_count, curr_count)\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpwbfim3ff.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpwbfim3ff.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpwbfim3ff.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    return max(nums, key=nums.count)\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 1\n    return max(max_count, count)\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpox5m7is5.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpox5m7is5.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpox5m7is5.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    nums.sort()\n    max_count = 0\n    max_num = 0\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n                max_num = nums[i - 1]\n            count = 1\n    if count > max_count:\n        max_count = count\n        max_num = nums[-1]\n    return max_num\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5aitwg3u.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmp5aitwg3u.py\", line 30, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp5aitwg3u.py\", line 26, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    nums_dict = {}\n    for num in nums:\n        if num not in nums_dict:\n            nums_dict[num] = 1\n        else:\n            nums_dict[num] += 1\n    max_occurrences = 0\n    for key in nums_dict:\n        if nums_dict[key] > max_occurrences:\n            max_occurrences = nums_dict[key]\n    return max_occurrences\n\nprint(max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "  File \"/tmp/tmp9cro5x7s.py\", line 19\n    print(max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,\n                          ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    num_count = {}\n    for num in nums:\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n    return max(num_count.values())\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfrcraboe.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpfrcraboe.py\", line 23, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpfrcraboe.py\", line 18, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    nums_dict = {}\n    for num in nums:\n        if num in nums_dict:\n            nums_dict[num] += 1\n        else:\n            nums_dict[num] = 1\n    return max(nums_dict.values())\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxfvtc9b6.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpxfvtc9b6.py\", line 21, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpxfvtc9b6.py\", line 16, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    nums.sort()\n    max_count = 1\n    res = nums[0]\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n                res = nums[i - 1]\n            count = 1\n    if count > max_count:\n        max_count = count\n        res = nums[-1]\n    return res\n\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptuc6365v.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmptuc6365v.py\", line 31, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmptuc6365v.py\", line 27, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return 1\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 1\n    max_count = max(max_count, count)\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_8c8f9oe.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmp_8c8f9oe.py\", line 29, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp_8c8f9oe.py\", line 24, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    d = {}\n    for i in nums:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return max(d.values())\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpblk68p_x.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpblk68p_x.py\", line 23, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpblk68p_x.py\", line 18, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_freq = 1\n    curr_freq = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            curr_freq += 1\n        else:\n            curr_freq = 1\n        max_freq = max(max_freq, curr_freq)\n    return max_freq\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0mi2iw6h.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp0mi2iw6h.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp0mi2iw6h.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    nums.sort()\n    max_count = 0\n    max_num = 0\n    count = 0\n    prev_num = None\n    for num in nums:\n        if num == prev_num:\n            count += 1\n        else:\n            count = 1\n        if count > max_count:\n            max_count = count\n            max_num = num\n        prev_num = num\n    return max_num\n\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6i79v82l.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmp6i79v82l.py\", line 30, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp6i79v82l.py\", line 26, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 1\n    return max(max_count, count)\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpox5m7is5.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpox5m7is5.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpox5m7is5.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    num_count = {}\n    for num in nums:\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n    max_count = 0\n    for num, count in num_count.items():\n        if count > max_count:\n            max_count = count\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpx0qyjp_g.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpx0qyjp_g.py\", line 27, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpx0qyjp_g.py\", line 22, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    nums.sort()\n    max_count = 0\n    max_num = 0\n    count = 1\n    for i in range(len(nums) - 1):\n        if nums[i] == nums[i + 1]:\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n                max_num = nums[i]\n            count = 1\n    if count > max_count:\n        max_count = count\n        max_num = nums[-1]\n    return max_num\n\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpja5875ia.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmpja5875ia.py\", line 31, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpja5875ia.py\", line 27, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            count += 1\n        else:\n            count = 1\n        max_count = max(max_count, count)\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4mnstsq8.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4mnstsq8.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp4mnstsq8.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    count = Counter(nums)\n    return max(count.values())\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmplgu6oxmr.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmplgu6oxmr.py\", line 18, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmplgu6oxmr.py\", line 13, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n  File \"/tmp/tmplgu6oxmr.py\", line 9, in max_occurrences\n    count = Counter(nums)\nNameError: name 'Counter' is not defined. Did you mean: 'count'?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    d = {}\n    for num in nums:\n        if num not in d:\n            d[num] = 1\n        else:\n            d[num] += 1\n    max_count = max(d.values())\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpune_m2xh.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpune_m2xh.py\", line 24, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpune_m2xh.py\", line 19, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 1\n    max_count = max(max_count, count)\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6qqtdg1z.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp6qqtdg1z.py\", line 27, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp6qqtdg1z.py\", line 22, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 1\n\n    return max(max_count, count)\n\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpni69ivyb.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpni69ivyb.py\", line 29, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpni69ivyb.py\", line 24, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    d = {}\n    for i in nums:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    max_val = max(d.values())\n    return max_val\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9clq1fnn.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmp9clq1fnn.py\", line 22, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp9clq1fnn.py\", line 17, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n\n    nums.sort()\n    max_freq = 1\n    curr_freq = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            curr_freq += 1\n        else:\n            curr_freq = 1\n        max_freq = max(max_freq, curr_freq)\n    return max_freq\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0i614xcr.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp0i614xcr.py\", line 27, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp0i614xcr.py\", line 22, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    max_count = 0\n    max_num = nums[0]\n    num_count = {}\n    for num in nums:\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n        if num_count[num] > max_count:\n            max_count = num_count[num]\n            max_num = num\n    return max_num\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            count += 1\n            max_count = max(max_count, count)\n        else:\n            count = 1\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_w4n3v8y.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp_w4n3v8y.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp_w4n3v8y.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    d = {}\n    for num in nums:\n        if num in d:\n            d[num] += 1\n        else:\n            d[num] = 1\n    max_num = max(d.values())\n    return max_num\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2fr2j_pq.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmp2fr2j_pq.py\", line 24, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp2fr2j_pq.py\", line 19, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    nums.sort()\n    max_count = 0\n    max_num = 0\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n                max_num = nums[i-1]\n            count = 1\n    if count > max_count:\n        max_count = count\n        max_num = nums[-1]\n    return max_num\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdf9j815o.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmpdf9j815o.py\", line 30, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpdf9j815o.py\", line 26, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 1\n    return max(max_count, count)\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcgaylphc.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpcgaylphc.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpcgaylphc.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    curr_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            curr_count += 1\n        else:\n            curr_count = 1\n        max_count = max(max_count, curr_count)\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpwbfim3ff.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpwbfim3ff.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpwbfim3ff.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    # create a dictionary to store the frequency of each item\n    freq = {}\n    # loop through the list\n    for num in nums:\n        # if the item is not in the dictionary, add it\n        if num not in freq:\n            freq[num] = 1\n        # if the item is in the dictionary, increment its frequency\n        else:\n            freq[num] += 1\n    # create a variable to store the maximum frequency\n    max_freq = 0\n    # loop through the dictionary\n    for key in freq:\n        # if the current frequency is greater than the maximum frequency, update the maximum frequency\n        if freq[key] > max_freq:\n            max_freq = freq[key]\n    # return the maximum frequency\n    return max_freq\n\nprint(max_occurrences([1, 2, 3, 1, 2, 3, 3, 3]))\nprint(max_occurrences([1, 2, 3, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3]))\nprint(max_occurrences([1, 2, 3, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpm6_zz6go.py\", line 29\n    print(max_occurrences([1, 2, 3, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3\n                          ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    max_count = max(count.values())\n    return max_count\n\nprint(max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpbraxvysp.py\", line 18\n    print(max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 21",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 1\n    return max(max_count, count)\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpox5m7is5.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpox5m7is5.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpox5m7is5.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    nums.sort()\n    max_count = 0\n    max_num = nums[0]\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n                max_num = nums[i-1]\n            count = 1\n    return max_num\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzu15wt3j.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpzu15wt3j.py\", line 27, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpzu15wt3j.py\", line 23, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 1\n    return max(max_count, count)\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpox5m7is5.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpox5m7is5.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpox5m7is5.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    nums.sort()\n    max_count = 0\n    max_num = 0\n    count = 1\n    for i in range(len(nums) - 1):\n        if nums[i] == nums[i + 1]:\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n                max_num = nums[i]\n            count = 1\n    if count > max_count:\n        max_count = count\n        max_num = nums[i]\n    return max_num\n\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5bsegbri.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp5bsegbri.py\", line 31, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp5bsegbri.py\", line 27, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return 1\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 1\n    return max(max_count, count)\n\nprint(max_occurrences([1, 2, 3, 1, 2, 3, 1, 2, 3]))\nprint(max_occurrences([1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "  File \"/tmp/tmp0pkfcxj1.py\", line 23\n    print(max_occurrences([1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3\n                          ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 1\n    return max(max_count, count)\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpox5m7is5.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpox5m7is5.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpox5m7is5.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    curr_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            curr_count += 1\n        else:\n            max_count = max(max_count, curr_count)\n            curr_count = 1\n    return max(max_count, curr_count)\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8x2wnpvp.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmp8x2wnpvp.py\", line 25, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp8x2wnpvp.py\", line 20, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    nums.sort()\n    max_count = 0\n    max_item = None\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n                max_item = nums[i - 1]\n            count = 1\n    if count > max_count:\n        max_count = count\n        max_item = nums[-1]\n    return max_item\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmplip6effq.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmplip6effq.py\", line 30, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmplip6effq.py\", line 26, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    count = {}\n    for num in nums:\n        if num not in count:\n            count[num] = 1\n        else:\n            count[num] += 1\n    return max(count.values())\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6m1og3_b.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp6m1og3_b.py\", line 23, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp6m1og3_b.py\", line 18, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return 1\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            count = 1\n        if count > max_count:\n            max_count = count\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfxmie9sx.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpfxmie9sx.py\", line 29, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpfxmie9sx.py\", line 24, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if len(nums) == 0:\n        return 0\n    else:\n        nums.sort()\n        max_count = 1\n        curr_count = 1\n        for i in range(1, len(nums)):\n            if nums[i] == nums[i - 1]:\n                curr_count += 1\n            else:\n                curr_count = 1\n            if curr_count > max_count:\n                max_count = curr_count\n        return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpwfks7kdm.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpwfks7kdm.py\", line 28, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpwfks7kdm.py\", line 23, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    max_count = 0\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n        max_count = max(max_count, count[num])\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptla743xu.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmptla743xu.py\", line 25, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmptla743xu.py\", line 20, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 1\n    max_count = max(max_count, count)\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6qqtdg1z.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp6qqtdg1z.py\", line 27, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmp6qqtdg1z.py\", line 22, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    max_count = 1\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            count = 1\n        max_count = max(max_count, count)\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpet6sir93.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpet6sir93.py\", line 26, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpet6sir93.py\", line 21, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    return max(nums, key=nums.count)\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1665509942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n    count = {}\n    for num in nums:\n        if num not in count:\n            count[num] = 0\n        count[num] += 1\n    max_count = 0\n    for num in count:\n        if count[num] > max_count:\n            max_count = count[num]\n    return max_count\n\ndef check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjeo208vs.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpjeo208vs.py\", line 24, in test_check\n    check(max_occurrences)\n  File \"/tmp/tmpjeo208vs.py\", line 19, in check\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}