{
  "name": "mbpp_262_split_two_parts",
  "language": "py",
  "prompt": "from typing import Any\n\ndef split_two_parts(list1: Any, L: int) -> Any:\n    \"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_262_split_two_parts.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1])\n    assert candidate(['a', 'b', 'c', 'd'], 2) == (['a', 'b'], ['c', 'd'])\n    assert candidate(['p', 'y', 't', 'h', 'o', 'n'], 4) == (['p', 'y', 't', 'h'], ['o', 'n'])\n\ndef test_check():\n    check(split_two_parts)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return list1[:L], list1[L:]\n\n",
    "    return (list1[:L], list1[L:])\n",
    "    return list1[:L], list1[L:]\n",
    "    if L > len(list1):\n        return \"Error\"\n    else:\n        return (list1[:L], list1[L:])",
    "    return (list1[:L], list1[L:])\n\n",
    "    return list1[:L], list1[L:]\n\n",
    "    return list1[:L], list1[L:]\n\nprint(split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9], 5))\nprint(split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9], 4))\nprint(split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))\nprint(split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9], 2))\nprint(split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9], 1))\nprint(split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9], 0))\nprint(split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9], -1))\nprint(split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9], -2))\nprint(split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9], -3))\nprint(split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9], -4))\nprint(split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9], -5))\nprint(split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9], -6))\nprint(split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9], -7))\nprint(split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9], -8))\nprint(split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9], -9))\nprint(split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9], -10))\nprint(split_two_parts([1, 2, 3, 4, 5, 6, 7,",
    "    return list1[:L], list1[L:]\n",
    "    return list1[:L], list1[L:]\n",
    "    return list1[:L], list1[L:]\n",
    "    return list1[:L], list1[L:]\n\nprint(split_two_parts([1, 2, 3, 4, 5, 6], 3))",
    "    return list1[:L], list1[L:]\n",
    "    return list1[:L], list1[L:]\n",
    "    return list1[:L], list1[L:]\n",
    "    list2 = list1[L:]\n    list1 = list1[:L]\n    return (list1, list2)\n",
    "    return (list1[:L], list1[L:])\n",
    "    return list1[:L], list1[L:]\n\n",
    "    return (list1[:L], list1[L:])\n",
    "    return list1[:L], list1[L:]\n\n",
    "    return list1[:L], list1[L:]\n"
  ]
}