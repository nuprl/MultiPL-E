{
  "name": "mbpp_119_search",
  "language": "py",
  "prompt": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "results": [
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else arr[1]\n    else:\n        mid = len(arr) // 2\n        if arr[mid] == arr[mid - 1]:\n            return search(arr[mid + 1:])\n        elif arr[mid] == arr[mid + 1]:\n            return search(arr[:mid])\n        else:\n            return arr[mid]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpej1fprwt.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpej1fprwt.py\", line 26, in test_check\n    check(search)\n  File \"/tmp/tmpej1fprwt.py\", line 21, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return None\n        else:\n            return arr[0]\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        return search(arr[mid + 1:])\n    elif arr[mid] == arr[mid + 1]:\n        return search(arr[:mid])\n    else:\n        return arr[mid]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9cl_jiy4.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmp9cl_jiy4.py\", line 28, in test_check\n    check(search)\n  File \"/tmp/tmp9cl_jiy4.py\", line 23, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] != arr[i+1]:\n                return arr[i]\n        elif i == len(arr)-1:\n            if arr[i] != arr[i-1]:\n                return arr[i]\n        else:\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1:\n            return arr[i]\n        if arr[i] != arr[i+1]:\n            return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] != arr[i + 1]:\n                return arr[i]\n        elif i == len(arr) - 1:\n            if arr[i] != arr[i - 1]:\n                return arr[i]\n        else:\n            if arr[i] != arr[i - 1] and arr[i] != arr[i + 1]:\n                return arr[i]\n    return -1\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else None\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        return search(arr[mid + 1:])\n    elif arr[mid] == arr[mid + 1]:\n        return search(arr[:mid])\n    else:\n        return arr[mid]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpr0f9b0yg.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpr0f9b0yg.py\", line 25, in test_check\n    check(search)\n  File \"/tmp/tmpr0f9b0yg.py\", line 20, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1:\n            return arr[i]\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] != arr[i + 1]:\n                return arr[i]\n        elif i == len(arr) - 1:\n            if arr[i] != arr[i - 1]:\n                return arr[i]\n        else:\n            if arr[i] != arr[i - 1] and arr[i] != arr[i + 1]:\n                return arr[i]\n    return -1\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] != arr[i+1]:\n                return arr[i]\n        elif i == len(arr) - 1:\n            if arr[i] != arr[i-1]:\n                return arr[i]\n        else:\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n    return -1\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        if arr[0] != arr[1]:\n            return arr[0]\n        if arr[-1] != arr[-2]:\n            return arr[-1]\n        for i in range(1, len(arr) - 1):\n            if arr[i] != arr[i - 1] and arr[i] != arr[i + 1]:\n                return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    for i in range(1, len(arr) - 1):\n        if arr[i] != arr[i - 1] and arr[i] != arr[i + 1]:\n            return arr[i]\n    return None\n\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1:\n            return arr[i]\n        if arr[i] != arr[i+1]:\n            return arr[i]\n    return -1\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    for i in range(1, len(arr) - 1):\n        if arr[i] != arr[i - 1] and arr[i] != arr[i + 1]:\n            return arr[i]\n    return -1\n\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1:\n            return arr[i]\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else None\n    if len(arr) == 3:\n        return arr[0] if arr[0] != arr[1] else arr[2]\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        if mid % 2 == 0:\n            return search(arr[mid + 1:])\n        else:\n            return search(arr[:mid - 1])\n    elif arr[mid] == arr[mid + 1]:\n        if mid % 2 == 0:\n            return search(arr[:mid - 1])\n        else:\n            return search(arr[mid + 2:])\n    else:\n        return arr[mid]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7bvyy8l.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpm7bvyy8l.py\", line 33, in test_check\n    check(search)\n  File \"/tmp/tmpm7bvyy8l.py\", line 28, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] != arr[mid - 1] and arr[mid] != arr[mid + 1]:\n            return arr[mid]\n        if arr[mid] == arr[mid - 1]:\n            if mid % 2 == 0:\n                start = mid + 1\n            else:\n                end = mid - 1\n        else:\n            if mid % 2 == 0:\n                end = mid - 1\n            else:\n                start = mid + 1\n\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(0, len(arr) - 1, 2):\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n    return arr[-1]\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(0, len(arr) - 1, 2):\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n    return arr[-1]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        for i in range(0, len(arr), 2):\n            if i == len(arr) - 1:\n                return arr[i]\n            if arr[i] != arr[i + 1]:\n                return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] != arr[i+1]:\n                return arr[i]\n        elif i == len(arr) - 1:\n            if arr[i] != arr[i-1]:\n                return arr[i]\n        else:\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] != arr[i+1]:\n                return arr[i]\n        elif i == len(arr)-1:\n            if arr[i] != arr[i-1]:\n                return arr[i]\n        else:\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] != arr[i+1]:\n                return arr[i]\n        elif i == len(arr)-1:\n            if arr[i] != arr[i-1]:\n                return arr[i]\n        else:\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else None\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        return search(arr[mid + 1:])\n    if arr[mid] == arr[mid + 1]:\n        return search(arr[:mid])\n    return arr[mid]\n\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpd98i1mej.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpd98i1mej.py\", line 25, in test_check\n    check(search)\n  File \"/tmp/tmpd98i1mej.py\", line 20, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] != arr[i+1]:\n                return arr[i]\n        elif i == len(arr) - 1:\n            if arr[i] != arr[i-1]:\n                return arr[i]\n        else:\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else None\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        return search(arr[mid + 1:])\n    if arr[mid] == arr[mid + 1]:\n        return search(arr[:mid])\n    return arr[mid]\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpd4lj_9ec.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpd4lj_9ec.py\", line 23, in test_check\n    check(search)\n  File \"/tmp/tmpd4lj_9ec.py\", line 18, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] != arr[i+1]:\n                return arr[i]\n        elif i == len(arr)-1:\n            if arr[i] != arr[i-1]:\n                return arr[i]\n        else:\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return -1\n        else:\n            return arr[0]\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        return search(arr[mid + 1:])\n    elif arr[mid] == arr[mid + 1]:\n        return search(arr[:mid])\n    else:\n        return arr[mid]\n\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbe13ivdw.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpbe13ivdw.py\", line 29, in test_check\n    check(search)\n  File \"/tmp/tmpbe13ivdw.py\", line 24, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else None\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        return search(arr[mid + 1:])\n    elif arr[mid] == arr[mid + 1]:\n        return search(arr[:mid])\n    else:\n        return arr[mid]\n\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiqft_d3t.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpiqft_d3t.py\", line 26, in test_check\n    check(search)\n  File \"/tmp/tmpiqft_d3t.py\", line 21, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1:\n            return arr[i]\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else None\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        return search(arr[mid + 1:])\n    if arr[mid] == arr[mid + 1]:\n        return search(arr[:mid])\n    return arr[mid]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbip1y7gh.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpbip1y7gh.py\", line 24, in test_check\n    check(search)\n  File \"/tmp/tmpbip1y7gh.py\", line 19, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    # TODO: Implement this function\n    pass\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8htdbgqa.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp8htdbgqa.py\", line 16, in test_check\n    check(search)\n  File \"/tmp/tmp8htdbgqa.py\", line 11, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    for i in range(1, len(arr) - 1):\n        if arr[i] != arr[i - 1] and arr[i] != arr[i + 1]:\n            return arr[i]\n    return -1\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] != arr[i+1]:\n                return arr[i]\n        elif i == len(arr)-1:\n            if arr[i] != arr[i-1]:\n                return arr[i]\n        else:\n            if arr[i] != arr[i+1] and arr[i] != arr[i-1]:\n                return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return -1\n        else:\n            return arr[0]\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        if mid % 2 == 0:\n            return search(arr[mid + 1:])\n        else:\n            return search(arr[:mid - 1])\n    elif arr[mid] == arr[mid + 1]:\n        if mid % 2 == 0:\n            return search(arr[:mid - 1])\n        else:\n            return search(arr[mid + 2:])\n    else:\n        return arr[mid]\n\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp983z1tnn.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmp983z1tnn.py\", line 35, in test_check\n    check(search)\n  File \"/tmp/tmp983z1tnn.py\", line 30, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] != arr[i+1]:\n                return arr[i]\n        elif i == len(arr)-1:\n            if arr[i] != arr[i-1]:\n                return arr[i]\n        else:\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else arr[1]\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        return search(arr[mid + 1:])\n    elif arr[mid] == arr[mid + 1]:\n        return search(arr[:mid])\n    else:\n        return arr[mid]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy66uriug.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpy66uriug.py\", line 25, in test_check\n    check(search)\n  File \"/tmp/tmpy66uriug.py\", line 20, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else None\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        return search(arr[mid + 1:])\n    if arr[mid] == arr[mid + 1]:\n        return search(arr[:mid])\n    return arr[mid]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbip1y7gh.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpbip1y7gh.py\", line 24, in test_check\n    check(search)\n  File \"/tmp/tmpbip1y7gh.py\", line 19, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(0, len(arr) - 1, 2):\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n    return arr[-1]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return None\n        else:\n            return arr[0]\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        return search(arr[mid + 1:])\n    elif arr[mid] == arr[mid + 1]:\n        return search(arr[:mid])\n    else:\n        return arr[mid]\n\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjjr5ruls.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpjjr5ruls.py\", line 29, in test_check\n    check(search)\n  File \"/tmp/tmpjjr5ruls.py\", line 24, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] != arr[i + 1]:\n                return arr[i]\n        elif i == len(arr) - 1:\n            if arr[i] != arr[i - 1]:\n                return arr[i]\n        else:\n            if arr[i] != arr[i - 1] and arr[i] != arr[i + 1]:\n                return arr[i]\n    return -1\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    for i in range(1, len(arr) - 1):\n        if arr[i] != arr[i - 1] and arr[i] != arr[i + 1]:\n            return arr[i]\n    return -1\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1:\n            return arr[i]\n        if arr[i] != arr[i+1]:\n            return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    return arr[0] if arr[0] != arr[1] else arr[-1]\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else arr[1]\n    else:\n        mid = len(arr) // 2\n        if arr[mid] == arr[mid - 1]:\n            return search(arr[mid + 1:])\n        elif arr[mid] == arr[mid + 1]:\n            return search(arr[:mid])\n        else:\n            return arr[mid]\n\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpaq0za4cf.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpaq0za4cf.py\", line 27, in test_check\n    check(search)\n  File \"/tmp/tmpaq0za4cf.py\", line 22, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] != arr[i+1]:\n                return arr[i]\n        elif i == len(arr)-1:\n            if arr[i] != arr[i-1]:\n                return arr[i]\n        else:\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n\nprint(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]))\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] != arr[i+1]:\n                return arr[i]\n        elif i == len(arr)-1:\n            if arr[i] != arr[i-1]:\n                return arr[i]\n        else:\n            if arr[i] != arr[i+1] and arr[i] != arr[i-1]:\n                return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else None\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid-1]:\n        return search(arr[mid+1:])\n    elif arr[mid] == arr[mid+1]:\n        return search(arr[:mid])\n    else:\n        return arr[mid]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2jup6ot8.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmp2jup6ot8.py\", line 25, in test_check\n    check(search)\n  File \"/tmp/tmp2jup6ot8.py\", line 20, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else None\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        return search(arr[mid + 1:])\n    elif arr[mid] == arr[mid + 1]:\n        return search(arr[:mid])\n    else:\n        return arr[mid]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpr0f9b0yg.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpr0f9b0yg.py\", line 25, in test_check\n    check(search)\n  File \"/tmp/tmpr0f9b0yg.py\", line 20, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    for i in range(1, len(arr) - 1):\n        if arr[i] != arr[i - 1] and arr[i] != arr[i + 1]:\n            return arr[i]\n    return None\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else None\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    mid = len(arr) // 2\n    if arr[mid] != arr[mid-1] and arr[mid] != arr[mid+1]:\n        return arr[mid]\n    if arr[mid] == arr[mid-1]:\n        return search(arr[mid+1:])\n    return search(arr[:mid])\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    for i in range(1, len(arr) - 1):\n        if arr[i] != arr[i - 1] and arr[i] != arr[i + 1]:\n            return arr[i]\n    return arr[-1]\n\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpwijcl5rb.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpwijcl5rb.py\", line 21, in test_check\n    check(search)\n  File \"/tmp/tmpwijcl5rb.py\", line 18, in check\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    for i in range(len(arr)):\n        if i == 0 and arr[i] != arr[i+1]:\n            return arr[i]\n        if i == len(arr)-1 and arr[i] != arr[i-1]:\n            return arr[i]\n        if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n            return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] != arr[i+1]:\n                return arr[i]\n        elif i == len(arr) - 1:\n            if arr[i] != arr[i-1]:\n                return arr[i]\n        else:\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(0, len(arr) - 1, 2):\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n    return arr[-1]\n\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    for i in range(1, len(arr) - 1):\n        if arr[i] != arr[i - 1] and arr[i] != arr[i + 1]:\n            return arr[i]\n    return -1\n\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    for i in range(1, len(arr) - 1):\n        if arr[i] != arr[i - 1] and arr[i] != arr[i + 1]:\n            return arr[i]\n    return -1\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] != arr[i+1]:\n                return arr[i]\n        elif i == len(arr)-1:\n            if arr[i] != arr[i-1]:\n                return arr[i]\n        else:\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1:\n            return arr[i]\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    start = 1\n    end = len(arr) - 2\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] != arr[mid - 1] and arr[mid] != arr[mid + 1]:\n            return arr[mid]\n        if mid % 2 == 0:\n            if arr[mid] == arr[mid + 1]:\n                start = mid + 2\n            else:\n                end = mid - 2\n        else:\n            if arr[mid] == arr[mid - 1]:\n                start = mid + 1\n            else:\n                end = mid - 1\n    return -1\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    return arr[0] if arr[0] != arr[1] else arr[-1]\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1:\n            return arr[i]\n        if arr[i] != arr[i+1]:\n            return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] != arr[i+1]:\n                return arr[i]\n        elif i == len(arr) - 1:\n            if arr[i] != arr[i-1]:\n                return arr[i]\n        else:\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else None\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        return search(arr[mid + 1:])\n    if arr[mid] == arr[mid + 1]:\n        return search(arr[:mid])\n    return arr[mid]\n\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpd98i1mej.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpd98i1mej.py\", line 25, in test_check\n    check(search)\n  File \"/tmp/tmpd98i1mej.py\", line 20, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1:\n            return arr[i]\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else arr[1]\n    if len(arr) == 3:\n        return arr[0] if arr[0] != arr[1] else arr[2]\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        return search(arr[mid + 1:])\n    if arr[mid] == arr[mid + 1]:\n        return search(arr[:mid])\n    return arr[mid]\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1gelcupf.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmp1gelcupf.py\", line 25, in test_check\n    check(search)\n  File \"/tmp/tmp1gelcupf.py\", line 20, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] != arr[i+1]:\n                return arr[i]\n        elif i == len(arr)-1:\n            if arr[i] != arr[i-1]:\n                return arr[i]\n        else:\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else None\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        return search(arr[mid + 1:])\n    elif arr[mid] == arr[mid + 1]:\n        return search(arr[:mid])\n    return arr[mid]\n\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpd6bther2.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpd6bther2.py\", line 25, in test_check\n    check(search)\n  File \"/tmp/tmpd6bther2.py\", line 20, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return None\n        else:\n            return arr[0]\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        return search(arr[:mid - 1])\n    elif arr[mid] == arr[mid + 1]:\n        return search(arr[mid + 2:])\n    else:\n        return arr[mid]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfg54jsl_.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpfg54jsl_.py\", line 28, in test_check\n    check(search)\n  File \"/tmp/tmpfg54jsl_.py\", line 24, in check\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n  File \"/tmp/tmpfg54jsl_.py\", line 16, in search\n    return search(arr[:mid - 1])\n  File \"/tmp/tmpfg54jsl_.py\", line 18, in search\n    return search(arr[mid + 2:])\n  File \"/tmp/tmpfg54jsl_.py\", line 15, in search\n    if arr[mid] == arr[mid - 1]:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    for i in range(1, len(arr) - 1):\n        if arr[i] != arr[i - 1] and arr[i] != arr[i + 1]:\n            return arr[i]\n    return -1\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    for i in range(1, len(arr) - 1):\n        if arr[i] != arr[i - 1] and arr[i] != arr[i + 1]:\n            return arr[i]\n    return None\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] != arr[i+1]:\n                return arr[i]\n        elif i == len(arr) - 1:\n            if arr[i] != arr[i-1]:\n                return arr[i]\n        else:\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return None\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        return search(arr[:mid - 1])\n    elif arr[mid] == arr[mid + 1]:\n        return search(arr[mid + 2:])\n    else:\n        return arr[mid]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpl_v4mnxt.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpl_v4mnxt.py\", line 27, in test_check\n    check(search)\n  File \"/tmp/tmpl_v4mnxt.py\", line 23, in check\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return None\n        else:\n            return arr[0]\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        return search(arr[mid + 1:])\n    elif arr[mid] == arr[mid + 1]:\n        return search(arr[:mid])\n    else:\n        return arr[mid]\n\nprint(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]))\nprint(search([1, 1, 2, 2, 3, 3, 4, 4, 50, 50, 65]))\nprint(search([1, 1, 2, 2, 3, 3, 4, 4, 50, 50, 65, 65, 66]))\nprint(search([1, 1, 2, 2, 3, 3, 4, 4, 50, 50, 65, 65, 66, 66]))\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "None\nNone\nNone\nNone\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkhahfat0.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpkhahfat0.py\", line 32, in test_check\n    check(search)\n  File \"/tmp/tmpkhahfat0.py\", line 27, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] != arr[i+1]:\n                return arr[i]\n        elif i == len(arr) - 1:\n            if arr[i] != arr[i-1]:\n                return arr[i]\n        else:\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n\nprint(search([1,1,2,2,3,3,4,50,50,65,65]))\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] != arr[i+1]:\n                return arr[i]\n        elif i == len(arr)-1:\n            if arr[i] != arr[i-1]:\n                return arr[i]\n        else:\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1:\n            return arr[i]\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n            return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj56mdv8i.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmpj56mdv8i.py\", line 17, in test_check\n    check(search)\n  File \"/tmp/tmpj56mdv8i.py\", line 12, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\n  File \"/tmp/tmpj56mdv8i.py\", line 8, in search\n    if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    for i in range(1, len(arr) - 1):\n        if arr[i] != arr[i - 1] and arr[i] != arr[i + 1]:\n            return arr[i]\n    return -1\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] != arr[i+1]:\n                return arr[i]\n        elif i == len(arr) - 1:\n            if arr[i] != arr[i-1]:\n                return arr[i]\n        else:\n            if arr[i] != arr[i+1] and arr[i] != arr[i-1]:\n                return arr[i]\n    return -1\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n            return arr[i]\n    return None\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi1l21kuk.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmpi1l21kuk.py\", line 18, in test_check\n    check(search)\n  File \"/tmp/tmpi1l21kuk.py\", line 13, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\n  File \"/tmp/tmpi1l21kuk.py\", line 8, in search\n    if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(0, len(arr) - 1, 2):\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n    return arr[-1]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    return arr[0] if arr[0] != arr[1] else arr[-1]\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else arr[1]\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        return search(arr[mid + 1:])\n    if arr[mid] == arr[mid + 1]:\n        return search(arr[:mid])\n    return arr[mid]\n\nprint(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]))\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "65\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmps2iq27y6.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmps2iq27y6.py\", line 25, in test_check\n    check(search)\n  File \"/tmp/tmps2iq27y6.py\", line 20, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1:\n            return arr[i]\n        if arr[i] != arr[i+1]:\n            return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] != arr[i+1]:\n                return arr[i]\n        elif i == len(arr)-1:\n            if arr[i] != arr[i-1]:\n                return arr[i]\n        else:\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    # if len(arr) == 1:\n    # \treturn arr[0]\n    # for i in range(len(arr)):\n    # \tif i == 0 and arr[i] != arr[i+1]:\n    # \t\treturn arr[i]\n    # \telif i == len(arr)-1 and arr[i] != arr[i-1]:\n    # \t\treturn arr[i]\n    # \telif arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n    # \t\treturn arr[i]\n    # return None\n    # if len(arr) == 1:\n    # \treturn arr[0]\n    # for i in range(len(arr)):\n    # \tif i == 0 and arr[i] != arr[i+1]:\n    # \t\treturn arr[i]\n    # \telif i == len(arr)-1 and arr[i] != arr[i-1]:\n    # \t\treturn arr[i]\n    # \telif arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n    # \t\treturn arr[i]\n    # return None\n    if len(arr) == 1:\n        return arr[0]\n    for i in range(len(arr)):\n        if i == 0 and arr[i] != arr[i+1]:\n            return arr[i]\n        elif i == len(arr)-1 and arr[i] != arr[i-1]:\n            return arr[i]\n        elif arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n            return arr[i]\n    return None\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] != arr[i+1]:\n                return arr[i]\n        elif i == len(arr)-1:\n            if arr[i] != arr[i-1]:\n                return arr[i]\n        else:\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else arr[1]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    for i in range(1, len(arr)-1):\n        if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n            return arr[i]\n    return -1\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] != arr[mid - 1] and arr[mid] != arr[mid + 1]:\n            return arr[mid]\n        if arr[mid] == arr[mid - 1]:\n            if mid % 2 == 0:\n                start = mid + 1\n            else:\n                end = mid - 1\n        else:\n            if mid % 2 == 0:\n                end = mid - 1\n            else:\n                start = mid + 1\n    return -1\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return None\n        else:\n            return arr[0]\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        return search(arr[mid + 1:])\n    elif arr[mid] == arr[mid + 1]:\n        return search(arr[:mid])\n    else:\n        return arr[mid]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9cl_jiy4.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmp9cl_jiy4.py\", line 28, in test_check\n    check(search)\n  File \"/tmp/tmp9cl_jiy4.py\", line 23, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1:\n            return arr[i]\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return None\n        else:\n            return arr[0]\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        return search(arr[mid + 1:])\n    elif arr[mid] == arr[mid + 1]:\n        return search(arr[:mid])\n    else:\n        return arr[mid]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9cl_jiy4.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmp9cl_jiy4.py\", line 28, in test_check\n    check(search)\n  File \"/tmp/tmp9cl_jiy4.py\", line 23, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    for i in range(1, len(arr) - 1):\n        if arr[i] != arr[i - 1] and arr[i] != arr[i + 1]:\n            return arr[i]\n    return -1\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    for i in range(1, len(arr)-1):\n        if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n            return arr[i]\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    for i in range(1, len(arr) - 1):\n        if arr[i] != arr[i - 1] and arr[i] != arr[i + 1]:\n            return arr[i]\n    return -1\n\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1:\n            return arr[i]\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n\nprint(search([1, 1, 3, 3, 4, 5, 5, 7, 7, 8, 8]))\nprint(search([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]))\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "4\n8\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else -1\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        return search(arr[mid + 1:])\n    elif arr[mid] == arr[mid + 1]:\n        return search(arr[:mid])\n    else:\n        return arr[mid]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6hpvt2y0.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmp6hpvt2y0.py\", line 25, in test_check\n    check(search)\n  File \"/tmp/tmp6hpvt2y0.py\", line 20, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return None\n        else:\n            return arr[0] if arr[0] != arr[1] else arr[1]\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid-1]:\n        return search(arr[mid+1:])\n    elif arr[mid] == arr[mid+1]:\n        return search(arr[:mid])\n    else:\n        return arr[mid]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpl305rpls.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpl305rpls.py\", line 28, in test_check\n    check(search)\n  File \"/tmp/tmpl305rpls.py\", line 23, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else arr[1]\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        return search(arr[mid + 1:])\n    elif arr[mid] == arr[mid + 1]:\n        return search(arr[:mid])\n    else:\n        return arr[mid]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy66uriug.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpy66uriug.py\", line 25, in test_check\n    check(search)\n  File \"/tmp/tmpy66uriug.py\", line 20, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1:\n            return arr[i]\n        if arr[i] != arr[i+1]:\n            return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else None\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        return search(arr[mid + 1:])\n    elif arr[mid] == arr[mid + 1]:\n        return search(arr[:mid])\n    else:\n        return arr[mid]\n\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiqft_d3t.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpiqft_d3t.py\", line 26, in test_check\n    check(search)\n  File \"/tmp/tmpiqft_d3t.py\", line 21, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 0:\n        return -1\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    for i in range(1, len(arr) - 1):\n        if arr[i] != arr[i - 1] and arr[i] != arr[i + 1]:\n            return arr[i]\n    return -1\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else None\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    mid = len(arr) // 2\n    if arr[mid] != arr[mid-1] and arr[mid] != arr[mid+1]:\n        return arr[mid]\n    if arr[mid] == arr[mid-1]:\n        return search(arr[mid+1:])\n    return search(arr[:mid])\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    for i in range(1, len(arr) - 1):\n        if arr[i] != arr[i - 1] and arr[i] != arr[i + 1]:\n            return arr[i]\n    return -1\n\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] != arr[i+1]:\n                return arr[i]\n        elif i == len(arr) - 1:\n            if arr[i] != arr[i-1]:\n                return arr[i]\n        else:\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    for i in range(1, len(arr) - 1):\n        if arr[i] != arr[i - 1] and arr[i] != arr[i + 1]:\n            return arr[i]\n    return -1\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    for i in range(1, len(arr)-1):\n        if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n            return arr[i]\n    return -1\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    for i in range(1, len(arr)-1):\n        if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n            return arr[i]\n    return -1\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1:\n            return arr[i]\n        if arr[i] != arr[i+1]:\n            return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] != arr[i+1]:\n                return arr[i]\n        elif i == len(arr)-1:\n            if arr[i] != arr[i-1]:\n                return arr[i]\n        else:\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n            return arr[i]\n    return -1\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoekr3m6u.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmpoekr3m6u.py\", line 18, in test_check\n    check(search)\n  File \"/tmp/tmpoekr3m6u.py\", line 13, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\n  File \"/tmp/tmpoekr3m6u.py\", line 8, in search\n    if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    return arr[0] if arr[0] != arr[1] else arr[-1]\n\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    for i in range(1, len(arr) - 1):\n        if arr[i] != arr[i - 1] and arr[i] != arr[i + 1]:\n            return arr[i]\n    return arr[0] if arr[0] != arr[1] else arr[-1]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return None\n        else:\n            return arr[0]\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        return search(arr[mid + 1:])\n    elif arr[mid] == arr[mid + 1]:\n        return search(arr[:mid])\n    else:\n        return arr[mid]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9cl_jiy4.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmp9cl_jiy4.py\", line 28, in test_check\n    check(search)\n  File \"/tmp/tmp9cl_jiy4.py\", line 23, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n            return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj56mdv8i.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmpj56mdv8i.py\", line 17, in test_check\n    check(search)\n  File \"/tmp/tmpj56mdv8i.py\", line 12, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\n  File \"/tmp/tmpj56mdv8i.py\", line 8, in search\n    if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 0:\n        return -1\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return -1\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    for i in range(1, len(arr) - 1):\n        if arr[i] != arr[i - 1] and arr[i] != arr[i + 1]:\n            return arr[i]\n    return -1\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else None\n    if len(arr) == 3:\n        return arr[0] if arr[0] != arr[1] else arr[2]\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        if mid % 2 == 0:\n            return search(arr[mid + 1:])\n        else:\n            return search(arr[:mid - 1])\n    elif arr[mid] == arr[mid + 1]:\n        if mid % 2 == 0:\n            return search(arr[:mid - 1])\n        else:\n            return search(arr[mid + 2:])\n    else:\n        return arr[mid]\n\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfd_pbis3.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpfd_pbis3.py\", line 34, in test_check\n    check(search)\n  File \"/tmp/tmpfd_pbis3.py\", line 29, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1:\n            return arr[i]\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    return arr[0] if arr[0] != arr[1] else arr[-1]\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    for i in range(1, len(arr) - 1):\n        if arr[i] != arr[i - 1] and arr[i] != arr[i + 1]:\n            return arr[i]\n    return -1\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else None\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid-1]:\n        return search(arr[:mid-1])\n    if arr[mid] == arr[mid+1]:\n        return search(arr[mid+2:])\n    return arr[mid]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpt205rgnc.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpt205rgnc.py\", line 24, in test_check\n    check(search)\n  File \"/tmp/tmpt205rgnc.py\", line 20, in check\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n  File \"/tmp/tmpt205rgnc.py\", line 13, in search\n    return search(arr[:mid-1])\n  File \"/tmp/tmpt205rgnc.py\", line 15, in search\n    return search(arr[mid+2:])\n  File \"/tmp/tmpt205rgnc.py\", line 12, in search\n    if arr[mid] == arr[mid-1]:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] != arr[i+1]:\n                return arr[i]\n        elif i == len(arr) - 1:\n            if arr[i] != arr[i-1]:\n                return arr[i]\n        else:\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    return arr[0] if arr[0] != arr[1] else arr[-1]\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n            return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj56mdv8i.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmpj56mdv8i.py\", line 17, in test_check\n    check(search)\n  File \"/tmp/tmpj56mdv8i.py\", line 12, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\n  File \"/tmp/tmpj56mdv8i.py\", line 8, in search\n    if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else None\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid-1]:\n        return search(arr[mid+1:])\n    if arr[mid] == arr[mid+1]:\n        return search(arr[:mid])\n    return arr[mid]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpscszyz3l.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpscszyz3l.py\", line 24, in test_check\n    check(search)\n  File \"/tmp/tmpscszyz3l.py\", line 19, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    for i in range(0, len(arr), 2):\n        if i + 1 < len(arr):\n            if arr[i] != arr[i + 1]:\n                return arr[i]\n        else:\n            return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n            return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj56mdv8i.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmpj56mdv8i.py\", line 17, in test_check\n    check(search)\n  File \"/tmp/tmpj56mdv8i.py\", line 12, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\n  File \"/tmp/tmpj56mdv8i.py\", line 8, in search\n    if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else None\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        return search(arr[mid + 1:])\n    elif arr[mid] == arr[mid + 1]:\n        return search(arr[:mid])\n    else:\n        return arr[mid]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpr0f9b0yg.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpr0f9b0yg.py\", line 25, in test_check\n    check(search)\n  File \"/tmp/tmpr0f9b0yg.py\", line 20, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return None\n        else:\n            return arr[0]\n    mid = len(arr) // 2\n    if mid % 2 == 0:\n        if arr[mid] == arr[mid - 1]:\n            return search(arr[mid + 1:])\n        elif arr[mid] == arr[mid + 1]:\n            return search(arr[:mid - 1])\n        else:\n            return arr[mid]\n    else:\n        if arr[mid] == arr[mid - 1]:\n            return search(arr[:mid - 1])\n        elif arr[mid] == arr[mid + 1]:\n            return search(arr[mid + 2:])\n        else:\n            return arr[mid]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy3ycqvty.py\", line 38, in <module>\n    test_check()\n  File \"/tmp/tmpy3ycqvty.py\", line 36, in test_check\n    check(search)\n  File \"/tmp/tmpy3ycqvty.py\", line 31, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] != arr[i+1]:\n                return arr[i]\n        elif i == len(arr)-1:\n            if arr[i] != arr[i-1]:\n                return arr[i]\n        else:\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n            return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj56mdv8i.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmpj56mdv8i.py\", line 17, in test_check\n    check(search)\n  File \"/tmp/tmpj56mdv8i.py\", line 12, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\n  File \"/tmp/tmpj56mdv8i.py\", line 8, in search\n    if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else arr[1]\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid-1]:\n        return search(arr[mid+1:])\n    if arr[mid] == arr[mid+1]:\n        return search(arr[:mid])\n    return arr[mid]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmps8cucmnv.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmps8cucmnv.py\", line 24, in test_check\n    check(search)\n  File \"/tmp/tmps8cucmnv.py\", line 19, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1:\n            return arr[i]\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1:\n            return arr[i]\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    for i in range(1, len(arr)-1):\n        if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n            return arr[i]\n    return None\n\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if i == 0 and arr[i] != arr[i+1]:\n            return arr[i]\n        elif i == len(arr)-1 and arr[i] != arr[i-1]:\n            return arr[i]\n        elif arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n            return arr[i]\n\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else None\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        if mid % 2 == 0:\n            return search(arr[mid + 1:])\n        else:\n            return search(arr[:mid - 1])\n    elif arr[mid] == arr[mid + 1]:\n        if mid % 2 == 0:\n            return search(arr[:mid])\n        else:\n            return search(arr[mid + 2:])\n    else:\n        return arr[mid]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8sfnjpcd.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmp8sfnjpcd.py\", line 33, in test_check\n    check(search)\n  File \"/tmp/tmp8sfnjpcd.py\", line 28, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n            return arr[i]\n    return arr[0]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdy_lqsh1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpdy_lqsh1.py\", line 20, in test_check\n    check(search)\n  File \"/tmp/tmpdy_lqsh1.py\", line 15, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\n  File \"/tmp/tmpdy_lqsh1.py\", line 10, in search\n    if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] != arr[i+1]:\n                return arr[i]\n        elif i == len(arr) - 1:\n            if arr[i] != arr[i-1]:\n                return arr[i]\n        else:\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if i == 0 and arr[i] != arr[i+1]:\n            return arr[i]\n        elif i == len(arr)-1 and arr[i] != arr[i-1]:\n            return arr[i]\n        elif arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n            return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] != arr[mid - 1] and arr[mid] != arr[mid + 1]:\n            return arr[mid]\n        if mid % 2 == 0:\n            if arr[mid] == arr[mid + 1]:\n                low = mid + 2\n            else:\n                high = mid - 2\n        else:\n            if arr[mid] == arr[mid - 1]:\n                low = mid + 1\n            else:\n                high = mid - 1\n    return -1\n\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    return arr[0] if arr[0] != arr[1] else arr[-1]\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else None\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        return search(arr[mid + 1:])\n    if arr[mid] == arr[mid + 1]:\n        return search(arr[:mid])\n    return arr[mid]\n\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpd98i1mej.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpd98i1mej.py\", line 25, in test_check\n    check(search)\n  File \"/tmp/tmpd98i1mej.py\", line 20, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(0, len(arr) - 1, 2):\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n    return arr[-1]\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] != arr[i+1]:\n                return arr[i]\n        elif i == len(arr)-1:\n            if arr[i] != arr[i-1]:\n                return arr[i]\n        else:\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else None\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        return search(arr[mid + 1:])\n    if arr[mid] == arr[mid + 1]:\n        return search(arr[:mid])\n    return arr[mid]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbip1y7gh.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpbip1y7gh.py\", line 24, in test_check\n    check(search)\n  File \"/tmp/tmpbip1y7gh.py\", line 19, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(0, len(arr) - 1, 2):\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n    return arr[-1]\n\nprint(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]))\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    return arr[0] if arr[0] != arr[1] else arr[-1]\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if not arr:\n        return -1\n    start = 0\n    end = len(arr) - 1\n    while start < end:\n        mid = (start + end) // 2\n        if arr[mid] == arr[mid - 1]:\n            if (mid - 1) % 2 == 0:\n                start = mid + 1\n            else:\n                end = mid - 2\n        elif arr[mid] == arr[mid + 1]:\n            if (mid + 1) % 2 == 0:\n                start = mid + 2\n            else:\n                end = mid - 1\n        else:\n            return arr[mid]\n    return arr[start]\n\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp22ivtos7.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmp22ivtos7.py\", line 34, in test_check\n    check(search)\n  File \"/tmp/tmp22ivtos7.py\", line 29, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1:\n            return arr[i]\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(0, len(arr) - 1, 2):\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n    return arr[-1]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1:\n            return arr[i]\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] != arr[i+1]:\n                return arr[i]\n        elif i == len(arr)-1:\n            if arr[i] != arr[i-1]:\n                return arr[i]\n        else:\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] != arr[i+1]:\n                return arr[i]\n        elif i == len(arr) - 1:\n            if arr[i] != arr[i-1]:\n                return arr[i]\n        else:\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    for i in range(1, len(arr) - 1):\n        if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n            return arr[i]\n    return -1\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(0, len(arr) - 1, 2):\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n    return arr[-1]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else None\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        return search(arr[mid + 1:])\n    elif arr[mid] == arr[mid + 1]:\n        return search(arr[:mid])\n    else:\n        return arr[mid]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpr0f9b0yg.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpr0f9b0yg.py\", line 25, in test_check\n    check(search)\n  File \"/tmp/tmpr0f9b0yg.py\", line 20, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1:\n            return arr[i]\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n            return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj56mdv8i.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmpj56mdv8i.py\", line 17, in test_check\n    check(search)\n  File \"/tmp/tmpj56mdv8i.py\", line 12, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\n  File \"/tmp/tmpj56mdv8i.py\", line 8, in search\n    if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] != arr[i+1]:\n                return arr[i]\n        elif i == len(arr) - 1:\n            if arr[i] != arr[i-1]:\n                return arr[i]\n        else:\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    return arr[0] if arr[0] != arr[1] else arr[-1]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] != arr[i+1]:\n                return arr[i]\n        elif i == len(arr)-1:\n            if arr[i] != arr[i-1]:\n                return arr[i]\n        else:\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1:\n            return arr[i]\n        if arr[i] != arr[i+1]:\n            return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1:\n            return arr[i]\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(0, len(arr) - 1, 2):\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n    return arr[-1]\n\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1:\n            return arr[i]\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else None\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        return search(arr[:mid - 1])\n    elif arr[mid] == arr[mid + 1]:\n        return search(arr[mid + 2:])\n    else:\n        return arr[mid]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp49d14avo.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmp49d14avo.py\", line 25, in test_check\n    check(search)\n  File \"/tmp/tmp49d14avo.py\", line 21, in check\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n  File \"/tmp/tmp49d14avo.py\", line 13, in search\n    return search(arr[:mid - 1])\n  File \"/tmp/tmp49d14avo.py\", line 15, in search\n    return search(arr[mid + 2:])\n  File \"/tmp/tmp49d14avo.py\", line 12, in search\n    if arr[mid] == arr[mid - 1]:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    for i in range(1, len(arr) - 1):\n        if arr[i] != arr[i - 1] and arr[i] != arr[i + 1]:\n            return arr[i]\n    return None\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] != arr[i+1]:\n                return arr[i]\n        elif i == len(arr)-1:\n            if arr[i] != arr[i-1]:\n                return arr[i]\n        else:\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else None\n    else:\n        mid = len(arr) // 2\n        if arr[mid] == arr[mid-1]:\n            return search(arr[mid+1:])\n        elif arr[mid] == arr[mid+1]:\n            return search(arr[:mid])\n        else:\n            return arr[mid]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmwo26vy5.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpmwo26vy5.py\", line 26, in test_check\n    check(search)\n  File \"/tmp/tmpmwo26vy5.py\", line 21, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] != arr[i-1]:\n            return arr[i-1]\n    return arr[-1]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpp_ugv180.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpp_ugv180.py\", line 20, in test_check\n    check(search)\n  File \"/tmp/tmpp_ugv180.py\", line 15, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    for i in range(1, len(arr) - 1):\n        if arr[i] != arr[i - 1] and arr[i] != arr[i + 1]:\n            return arr[i]\n    return None\n\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] != arr[i+1]:\n                return arr[i]\n        elif i == len(arr)-1:\n            if arr[i] != arr[i-1]:\n                return arr[i]\n        else:\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1:\n            return arr[i]\n        if arr[i] != arr[i+1]:\n            return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else None\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        return search(arr[mid + 1:])\n    elif arr[mid] == arr[mid + 1]:\n        return search(arr[:mid])\n    else:\n        return arr[mid]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpr0f9b0yg.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpr0f9b0yg.py\", line 25, in test_check\n    check(search)\n  File \"/tmp/tmpr0f9b0yg.py\", line 20, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        if arr[0] == arr[1]:\n            return search(arr[2:])\n        else:\n            return arr[0]\n\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] != arr[mid - 1] and arr[mid] != arr[mid + 1]:\n            return arr[mid]\n        if arr[mid] == arr[mid - 1]:\n            if mid % 2 == 0:\n                high = mid - 2\n            else:\n                low = mid + 1\n        else:\n            if mid % 2 == 0:\n                low = mid + 2\n            else:\n                high = mid - 1\n    return -1\n\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1:\n            return arr[i]\n        if arr[i] != arr[i+1]:\n            return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1:\n            return arr[i]\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] != arr[i+1]:\n                return arr[i]\n        elif i == len(arr) - 1:\n            if arr[i] != arr[i-1]:\n                return arr[i]\n        else:\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return None\n        else:\n            return arr[0] if arr[0] != arr[1] else arr[1]\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        return search(arr[mid + 1:])\n    elif arr[mid] == arr[mid + 1]:\n        return search(arr[:mid])\n    else:\n        return arr[mid]\n\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fd9xr2k.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmp4fd9xr2k.py\", line 29, in test_check\n    check(search)\n  File \"/tmp/tmp4fd9xr2k.py\", line 24, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n            return arr[i]\n    return -1\n\nprint(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]))\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "4\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq7kfbkcd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpq7kfbkcd.py\", line 19, in test_check\n    check(search)\n  File \"/tmp/tmpq7kfbkcd.py\", line 14, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\n  File \"/tmp/tmpq7kfbkcd.py\", line 8, in search\n    if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1:\n            return arr[i]\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n\nprint(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]))\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else None\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        return search(arr[mid + 1:])\n    if arr[mid] == arr[mid + 1]:\n        return search(arr[:mid])\n    return arr[mid]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbip1y7gh.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpbip1y7gh.py\", line 24, in test_check\n    check(search)\n  File \"/tmp/tmpbip1y7gh.py\", line 19, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    for i in range(1, len(arr) - 1):\n        if arr[i] != arr[i - 1] and arr[i] != arr[i + 1]:\n            return arr[i]\n    return arr[-1]\n\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpwijcl5rb.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpwijcl5rb.py\", line 21, in test_check\n    check(search)\n  File \"/tmp/tmpwijcl5rb.py\", line 18, in check\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else None\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        return search(arr[mid + 1:])\n    elif arr[mid] == arr[mid + 1]:\n        return search(arr[:mid])\n    else:\n        return arr[mid]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpr0f9b0yg.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpr0f9b0yg.py\", line 25, in test_check\n    check(search)\n  File \"/tmp/tmpr0f9b0yg.py\", line 20, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else None\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        return search(arr[mid + 1:])\n    elif arr[mid] == arr[mid + 1]:\n        return search(arr[:mid])\n    else:\n        return arr[mid]\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmperjeh206.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmperjeh206.py\", line 24, in test_check\n    check(search)\n  File \"/tmp/tmperjeh206.py\", line 19, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1:\n            return arr[i]\n        if arr[i] != arr[i+1]:\n            return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n            return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj56mdv8i.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmpj56mdv8i.py\", line 17, in test_check\n    check(search)\n  File \"/tmp/tmpj56mdv8i.py\", line 12, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\n  File \"/tmp/tmpj56mdv8i.py\", line 8, in search\n    if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return None\n        else:\n            return arr[0]\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        return search(arr[mid + 1:])\n    elif arr[mid] == arr[mid + 1]:\n        return search(arr[:mid])\n    else:\n        return arr[mid]\n\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjjr5ruls.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpjjr5ruls.py\", line 29, in test_check\n    check(search)\n  File \"/tmp/tmpjjr5ruls.py\", line 24, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1:\n            return arr[i]\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else None\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        return search(arr[mid + 1:])\n    if arr[mid] == arr[mid + 1]:\n        return search(arr[:mid])\n    return arr[mid]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbip1y7gh.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpbip1y7gh.py\", line 24, in test_check\n    check(search)\n  File \"/tmp/tmpbip1y7gh.py\", line 19, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    for i in range(1, len(arr) - 1):\n        if arr[i] != arr[i - 1] and arr[i] != arr[i + 1]:\n            return arr[i]\n    return None\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else arr[1]\n    else:\n        mid = len(arr) // 2\n        if arr[mid] == arr[mid - 1]:\n            return search(arr[mid + 1:])\n        elif arr[mid] == arr[mid + 1]:\n            return search(arr[:mid])\n        else:\n            return arr[mid]\n\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpaq0za4cf.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpaq0za4cf.py\", line 27, in test_check\n    check(search)\n  File \"/tmp/tmpaq0za4cf.py\", line 22, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1:\n            return arr[i]\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return None\n        else:\n            return arr[0]\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        return search(arr[mid + 1:])\n    elif arr[mid] == arr[mid + 1]:\n        return search(arr[:mid])\n    else:\n        return arr[mid]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9cl_jiy4.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmp9cl_jiy4.py\", line 28, in test_check\n    check(search)\n  File \"/tmp/tmp9cl_jiy4.py\", line 23, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] != arr[i+1]:\n                return arr[i]\n        elif i == len(arr)-1:\n            if arr[i] != arr[i-1]:\n                return arr[i]\n        else:\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else None\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid - 1]:\n        return search(arr[mid + 1:])\n    elif arr[mid] == arr[mid + 1]:\n        return search(arr[:mid])\n    else:\n        return arr[mid]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpr0f9b0yg.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpr0f9b0yg.py\", line 25, in test_check\n    check(search)\n  File \"/tmp/tmpr0f9b0yg.py\", line 20, in check\n    assert candidate([1, 1, 2, 2, 3]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] != arr[i+1]:\n                return arr[i]\n        elif i == len(arr) - 1:\n            if arr[i] != arr[i-1]:\n                return arr[i]\n        else:\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n\nprint(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]))\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1666123300,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n    for i in range(0, len(arr) - 1, 2):\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n    return arr[-1]\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n",
      "timestamp": 1665510211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}