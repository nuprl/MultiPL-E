{
  "name": "mbpp_12_sort_matrix",
  "language": "py",
  "prompt": "from typing import List\n\ndef sort_matrix(M: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    assert candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\n    assert candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]]\n\ndef test_check():\n    check(sort_matrix)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return sorted(M, key=sum)\n",
    "    return sorted(M, key=lambda x: sum(x))",
    "    return sorted(M, key=lambda x: sum(x))\n\n",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    return sorted(M, key=lambda x: sum(x))",
    "    return sorted(M, key=sum)",
    "    sums = [sum(row) for row in M]\n    return [M[i] for i in sorted(range(len(sums)), key=lambda i: sums[i])]\n\n",
    "    return sorted(M, key=sum)",
    "    return sorted(M, key=lambda x: sum(x))",
    "    return sorted(M, key=lambda x: sum(x))\n\n",
    "    return sorted(M, key=lambda x: sum(x))\n\n",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    return sorted(M, key=sum)\n",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    return sorted(M, key=lambda x: sum(x))",
    "    return sorted(M, key=lambda x: sum(x))\n\n",
    "    return sorted(M, key=sum)",
    "    return sorted(M, key=sum)",
    "    return sorted(M, key=lambda x: sum(x))\n\nM = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sort_matrix(M))",
    "    return sorted(M, key=sum)",
    "    return sorted(M, key=lambda x: sum(x))",
    "    # sort by sum of rows\n    M.sort(key=lambda row: sum(row))\n    return M",
    "    M.sort(key=lambda x: sum(x))\n    return M\n\n",
    "    # sort by sum of rows\n    M.sort(key=lambda x: sum(x))\n    return M\n\n",
    "    return sorted(M, key=sum)\n",
    "    return sorted(M, key=sum)\n",
    "    return sorted(M, key=sum)",
    "    return sorted(M, key=lambda x: sum(x))",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    return sorted(M, key=lambda x: sum(x))\n\n",
    "    def get_row_sum(row):\n        return sum(row)\n    M.sort(key=get_row_sum)\n    return M\n",
    "    return sorted(M, key=sum)",
    "    return sorted(M, key=lambda x: sum(x))",
    "    return sorted(M, key=lambda x: sum(x))",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    return sorted(M, key=lambda x: sum(x))",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    # sort by row sum\n    M.sort(key=lambda x: sum(x))\n    return M\n\n",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    return sorted(M, key=lambda x: sum(x))",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    M.sort(key=lambda x: sum(x))\n    return M\n",
    "    # sort rows by sum\n    M.sort(key=lambda row: sum(row))\n    return M\n",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    return sorted(M, key=lambda x: sum(x))",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    return sorted(M, key=sum)",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    return sorted(M, key=sum)\n\n",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    return sorted(M, key=lambda x: sum(x))",
    "    return sorted(M, key=sum)\n\n",
    "    return sorted(M, key=lambda row: sum(row))",
    "    return sorted(M, key=lambda row: sum(row))\n",
    "    return sorted(M, key=sum)\n",
    "    return sorted(M, key=sum)\n",
    "    return sorted(M, key=sum)\n\n",
    "    return sorted(M, key=lambda x: sum(x))",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    # sort the matrix by the sum of each row\n    M.sort(key=lambda row: sum(row))\n    return M\n",
    "    return sorted(M, key=sum)\n\n",
    "    return sorted(M, key=sum)",
    "    return sorted(M, key=lambda x: sum(x))",
    "    return sorted(M, key=sum)\n",
    "    return sorted(M, key=lambda x: sum(x))",
    "    M.sort(key=lambda x: sum(x))\n    return M\n",
    "    return sorted(M, key=sum)\n\n",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    M.sort(key=lambda x: sum(x))\n    return M",
    "    return sorted(M, key=sum)\n",
    "    return sorted(M, key=lambda x: sum(x))",
    "    return sorted(M, key=lambda x: sum(x))",
    "    return sorted(M, key=lambda x: sum(x))",
    "    return sorted(M, key=lambda x: sum(x))",
    "    return sorted(M, key=lambda x: sum(x))\n\n",
    "    return sorted(M, key=lambda x: sum(x))",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    def sum_row(row):\n        return sum(row)\n    M.sort(key=sum_row)\n    return M\n",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    M.sort(key=lambda x: sum(x))\n    return M\n",
    "    return sorted(M, key=lambda x: sum(x))\n\n",
    "    return sorted(M, key=lambda x: sum(x))",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    def row_sum(row: List[int]) -> int:\n        return sum(row)\n\n    M.sort(key=row_sum)\n    return M\n\n",
    "    return sorted(M, key=sum)\n",
    "    return sorted(M, key=sum)\n",
    "    return sorted(M, key=lambda x: sum(x))",
    "    # sort the matrix by the sum of each row\n    M.sort(key=lambda row: sum(row))\n    return M",
    "    return sorted(M, key=sum)\n",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    M.sort(key=lambda row: sum(row))\n    return M\n",
    "    return sorted(M, key=lambda x: sum(x))",
    "    return sorted(M, key=lambda row: sum(row))",
    "    return sorted(M, key=sum)\n\nprint(sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))",
    "    # sort the matrix by the sum of each row\n    M.sort(key=lambda row: sum(row))\n    return M\n",
    "    return sorted(M, key=lambda row: sum(row))",
    "    return sorted(M, key=sum)\n\n",
    "    return sorted(M, key=lambda row: sum(row))",
    "    return sorted(M, key=sum)\n\n",
    "    return sorted(M, key=lambda x: sum(x))",
    "    return sorted(M, key=sum)",
    "    M.sort(key=lambda x: sum(x))\n    return M",
    "    return sorted(M, key=lambda x: sum(x))",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    return sorted(M, key=sum)\n",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    M.sort(key=lambda x: sum(x))\n    return M\n\n",
    "    return sorted(M, key=sum)\n",
    "    return sorted(M, key=lambda x: sum(x))\n\n",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    # sort by row sum\n    M.sort(key=lambda x: sum(x))\n    return M\n",
    "    return sorted(M, key=lambda x: sum(x))",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    return sorted(M, key=sum)\n",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    return sorted(M, key=lambda x: sum(x))\n\n",
    "    return sorted(M, key=lambda x: sum(x))",
    "    # sort the rows by the sum of their elements\n    M.sort(key=lambda row: sum(row))\n    return M",
    "    return sorted(M, key=lambda row: sum(row))",
    "    return sorted(M, key=lambda row: sum(row))",
    "    return sorted(M, key=sum)\n",
    "    return sorted(M, key=sum)\n",
    "    return sorted(M, key=lambda row: sum(row))\n",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    return sorted(M, key=sum)\n",
    "    return sorted(M, key=sum)",
    "    M.sort(key=lambda x: sum(x))\n    return M\n",
    "    return sorted(M, key=sum)\n",
    "    return sorted(M, key=sum)",
    "    return sorted(M, key=lambda x: sum(x))\n\n",
    "    # TODO: Implement me\n    return M",
    "    return sorted(M, key=sum)\n",
    "    return sorted(M, key=lambda x: sum(x))",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    return sorted(M, key=sum)\n",
    "    return sorted(M, key=lambda row: sum(row))\n",
    "    M.sort(key=lambda x: sum(x))\n    return M",
    "    return sorted(M, key=lambda x: sum(x))",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    return sorted(M, key=lambda x: sum(x))",
    "    return sorted(M, key=sum)\n",
    "    return sorted(M, key=sum)\n",
    "    M.sort(key=lambda x: sum(x))\n    return M\n",
    "    n = len(M)\n    m = len(M[0])\n    sums = [0] * n\n    for i in range(n):\n        for j in range(m):\n            sums[i] += M[i][j]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if sums[i] > sums[j]:\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n    return M\n\nM = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sort_matrix(M))",
    "    return sorted(M, key=sum)",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    # sort the matrix by the sum of each row\n    M.sort(key=lambda row: sum(row))\n    return M\n",
    "    return sorted(M, key=lambda x: sum(x))",
    "    # sort by sum of rows\n    M.sort(key=lambda row: sum(row))\n    return M\n",
    "    return sorted(M, key=sum)",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    # Sort the matrix by the sum of its rows\n    M.sort(key=lambda row: sum(row))\n    return M",
    "    return sorted(M, key=sum)\n\n",
    "    return sorted(M, key=sum)",
    "    # TODO: Implement me\n    return []\n",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    return sorted(M, key=lambda x: sum(x))",
    "    return sorted(M, key=lambda x: sum(x))",
    "    return sorted(M, key=lambda x: sum(x))\n\nM = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sort_matrix(M))",
    "    return sorted(M, key=sum)\n\n",
    "    return sorted(M, key=lambda x: sum(x))",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    return sorted(M, key=lambda x: sum(x))",
    "    return sorted(M, key=sum)\n\n",
    "    return sorted(M, key=lambda x: sum(x))",
    "    return sorted(M, key=sum)\n",
    "    return sorted(M, key=sum)\n",
    "    return sorted(M, key=lambda row: sum(row))\n",
    "    return sorted(M, key=lambda x: sum(x))",
    "    return sorted(M, key=sum)\n",
    "    return sorted(M, key=sum)\n\n",
    "    return sorted(M, key=sum)\n",
    "    return sorted(M, key=sum)",
    "    return sorted(M, key=lambda x: sum(x))",
    "    return sorted(M, key=lambda x: sum(x))",
    "    return sorted(M, key=lambda x: sum(x))\n\n",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    return sorted(M, key=lambda x: sum(x))",
    "    return sorted(M, key=lambda x: sum(x))",
    "    return sorted(M, key=lambda row: sum(row))\n",
    "    # sort the matrix by the sum of each row\n    M.sort(key=lambda row: sum(row))\n    return M\n",
    "    # sort the rows by the sum of their elements\n    M.sort(key=lambda row: sum(row))\n    return M",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    return sorted(M, key=lambda row: sum(row))",
    "    # sort the matrix according to the sum of each row\n    M.sort(key=lambda x: sum(x))\n    return M\n",
    "    return sorted(M, key=lambda row: sum(row))\n",
    "    return sorted(M, key=lambda x: sum(x))\n",
    "    return sorted(M, key=lambda x: sum(x))\n"
  ]
}