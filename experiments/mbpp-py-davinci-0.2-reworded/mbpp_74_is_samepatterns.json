{
  "name": "mbpp_74_is_samepatterns",
  "language": "py",
  "prompt": "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    \"\"\"\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_74_is_samepatterns.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate(['red', 'green', 'green'], ['a', 'b', 'b']) == True\n    assert candidate(['red', 'green', 'greenn'], ['a', 'b', 'b']) == False\n    assert candidate(['red', 'green', 'greenn'], ['a', 'b']) == False\n\ndef test_check():\n    check(is_samepatterns)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if patterns[i] == \"even\" and int(colors[i]) % 2 == 0:\n            continue\n        elif patterns[i] == \"odd\" and int(colors[i]) % 2 != 0:\n            continue\n        else:\n            return False\n    return True\n",
    "    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if patterns[i] == \"even\" and int(colors[i]) % 2 == 0:\n            continue\n        elif patterns[i] == \"odd\" and int(colors[i]) % 2 == 1:\n            continue\n        else:\n            return False\n    return True\n",
    "    if len(colors) != len(patterns):\n        return False\n    color_dict = {}\n    pattern_dict = {}\n    for i in range(len(colors)):\n        if colors[i] not in color_dict:\n            color_dict[colors[i]] = patterns[i]\n        else:\n            if color_dict[colors[i]] != patterns[i]:\n                return False\n        if patterns[i] not in pattern_dict:\n            pattern_dict[patterns[i]] = colors[i]\n        else:\n            if pattern_dict[patterns[i]] != colors[i]:\n                return False\n    return True\n",
    "    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if patterns[i] == \"even\" and colors[i] % 2 == 0:\n            continue\n        elif patterns[i] == \"odd\" and colors[i] % 2 != 0:\n            continue\n        else:\n            return False\n    return True\n\n",
    "    if len(colors) != len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if patterns[i] == \"even\" and colors[i] % 2 == 0:\n            continue\n        elif patterns[i] == \"odd\" and colors[i] % 2 == 1:\n            continue\n        else:\n            return False\n    return True\n\n",
    "    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if patterns[i] == \"even\" and int(colors[i]) % 2 != 0:\n            return False\n        if patterns[i] == \"odd\" and int(colors[i]) % 2 == 0:\n            return False\n    return True\n",
    "    for i in range(len(patterns)):\n        if patterns[i] == \"b\":\n            if i == 0:\n                if colors[i] != colors[i+1]:\n                    return False\n            elif i == len(patterns) - 1:\n                if colors[i] != colors[i-1]:\n                    return False\n            else:\n                if colors[i] != colors[i-1] and colors[i] != colors[i+1]:\n                    return False\n        elif patterns[i] == \"r\":\n            if i == 0:\n                if colors[i] == colors[i+1]:\n                    return False\n            elif i == len(patterns) - 1:\n                if colors[i] == colors[i-1]:\n                    return False\n            else:\n                if colors[i] == colors[i-1] or colors[i] == colors[i+1]:\n                    return False\n    return True\n",
    "    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if patterns[i] == 'even' and colors[i] % 2 == 0:\n            continue\n        elif patterns[i] == 'odd' and colors[i] % 2 != 0:\n            continue\n        else:\n            return False\n    return True\n\nprint(is_samepatterns([1, 3, 4, 6, 8, 2, 7], ['odd', 'odd', 'even', 'even', 'even', 'odd', 'odd']))\nprint(is_samepatterns([1, 2, 3, 4, 5, 6, 7, 8], ['even', 'odd', 'odd', 'even', 'odd', 'even', 'odd', 'even']))\nprint(is_samepatterns([1, 3, 4, 6, 8, 2, 7], ['even', 'odd', 'even', 'even', 'even', 'odd', 'odd']))",
    "    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if patterns[i] == 'even' and colors[i] % 2 == 0:\n            continue\n        elif patterns[i] == 'odd' and colors[i] % 2 == 1:\n            continue\n        else:\n            return False\n    return True\n",
    "    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if patterns[i] == \"even\" and int(colors[i]) % 2 == 0:\n            continue\n        elif patterns[i] == \"odd\" and int(colors[i]) % 2 != 0:\n            continue\n        else:\n            return False\n    return True\n",
    "    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if patterns[i] == \"even\" and int(colors[i]) % 2 == 0:\n            continue\n        elif patterns[i] == \"odd\" and int(colors[i]) % 2 == 1:\n            continue\n        else:\n            return False\n    return True\n",
    "    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if patterns[i] == \"even\" and colors[i] % 2 == 0:\n            continue\n        elif patterns[i] == \"odd\" and colors[i] % 2 == 1:\n            continue\n        else:\n            return False\n    return True\n\nprint(is_samepatterns([1, 3, 4, 6], [\"odd\", \"odd\", \"even\", \"even\"]))\nprint(is_samepatterns([1, 2, 3, 4, 5, 6, 7, 8, 9], [\"odd\", \"even\", \"odd\", \"even\", \"odd\", \"even\", \"odd\", \"even\", \"odd\"]))\nprint(is_samepatterns([1, 2, 3, 4, 5], [\"even\", \"odd\", \"even\"]))\nprint(is_samepatterns([1, 2, 3, 4, 5], [\"even\", \"even\", \"even\", \"even\", \"even\"]))",
    "    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i] != patterns[i]:\n            return False\n    return True\n",
    "    for i in range(len(patterns)):\n        if patterns[i] == \"odd\":\n            if colors[i] != colors[0]:\n                return False\n        elif patterns[i] == \"even\":\n            if colors[i] == colors[0]:\n                return False\n    return True\n\n",
    "    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if patterns[i] == 'odd' and colors[i] % 2 != 0:\n            continue\n        elif patterns[i] == 'even' and colors[i] % 2 == 0:\n            continue\n        else:\n            return False\n    return True\n",
    "    if len(colors) != len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if patterns[i] == 'even' and int(colors[i]) % 2 == 0:\n            continue\n        elif patterns[i] == 'odd' and int(colors[i]) % 2 == 1:\n            continue\n        else:\n            return False\n\n    return True\n\n",
    "    # TODO: Implement me\n    return False\n",
    "    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if patterns[i] == 'even' and int(colors[i]) % 2 != 0:\n            return False\n        elif patterns[i] == 'odd' and int(colors[i]) % 2 == 0:\n            return False\n    return True\n",
    "    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if patterns[i] == 'even' and colors[i] % 2 == 0:\n            continue\n        elif patterns[i] == 'odd' and colors[i] % 2 == 1:\n            continue\n        else:\n            return False\n    return True\n",
    "    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i] == patterns[i]:\n            return False\n    return True\n"
  ]
}