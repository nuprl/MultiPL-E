{
  "name": "mbpp_99_decimal_to_binary",
  "language": "py",
  "prompt": "def decimal_to_binary(n: int) -> str:\n    \"\"\"\n\tWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_99_decimal_to_binary.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate(8) == '1000'\n    assert candidate(18) == '10010'\n    assert candidate(7) == '111'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n\n",
    "    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n\n",
    "    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary += str(n % 2)\n        n //= 2\n    return binary[::-1]\n\n",
    "    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n\n",
    "    if n == 0:\n        return \"0\"\n    result = \"\"\n    while n > 0:\n        result = str(n % 2) + result\n        n = n // 2\n    return result\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary += str(n % 2)\n        n //= 2\n    return binary[::-1]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary += str(n % 2)\n        n //= 2\n    return binary[::-1]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    return decimal_to_binary(n // 2) + str(n % 2)\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary += str(n % 2)\n        n //= 2\n    return binary[::-1]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n\n",
    "    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n\n",
    "    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n % 2 == 0:\n        return decimal_to_binary(n // 2) + \"0\"\n    else:\n        return decimal_to_binary(n // 2) + \"1\"\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n\n",
    "    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"1\"\n    else:\n        return decimal_to_binary(n // 2) + str(n % 2)\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"1\"\n    else:\n        return decimal_to_binary(n // 2) + str(n % 2)\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n",
    "    return bin(n)[2:]\n\n"
  ]
}