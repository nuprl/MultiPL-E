{
  "name": "mbpp_746_sector_area",
  "language": "py",
  "prompt": "from typing import Optional\n\ndef sector_area(r: int, a: int) -> Optional[float]:\n    \"\"\"\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_746_sector_area.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate(4, 45) == 6.283185307179586\n    assert candidate(9, 45) == 31.808625617596654\n    assert candidate(9, 361) == None\n\ndef test_check():\n    check(sector_area)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    if a > 360:\n        return None\n    else:\n        return (a/360)*(math.pi*r**2)\n\nprint(sector_area(10, 360))\nprint(sector_area(10, 361))",
    "    if a > 360:\n        return None\n    else:\n        return (r**2 * a)/360\n\nprint(sector_area(10, 360))\nprint(sector_area(10, 361))",
    "    if a > 360:\n        return None\n    else:\n        return (a/360)*math.pi*r**2\n\nprint(sector_area(2, 360))\nprint(sector_area(2, 361))\nprint(sector_area(2, 180))",
    "    if a > 360:\n        return None\n    else:\n        return (a/360)*pi*r**2\n\nprint(sector_area(5, 360))\nprint(sector_area(5, 361))",
    "    if a > 360:\n        return None\n    else:\n        return (r**2)*(a/360)*math.pi\n\nprint(sector_area(5, 360))\nprint(sector_area(5, 361))",
    "    if a > 360:\n        return None\n    else:\n        return (a/360)*math.pi*r**2\n\nprint(sector_area(5, 360))\nprint(sector_area(5, 361))",
    "    if a > 360:\n        return None\n    else:\n        return (a/360)*(math.pi*r**2)\n\nprint(sector_area(10, 360))\nprint(sector_area(10, 361))",
    "    if a > 360:\n        return None\n    else:\n        return (a/360)*pi*r**2\n\nprint(sector_area(5, 360))\nprint(sector_area(5, 361))\n",
    "    if a > 360:\n        return None\n    else:\n        return (a/360)*math.pi*r**2\n\nprint(sector_area(5, 360))\nprint(sector_area(5, 361))",
    "    if a > 360:\n        return None\n    else:\n        return (a/360)*math.pi*r**2\n\nprint(sector_area(10, 360))\nprint(sector_area(10, 361))",
    "    if a > 360:\n        return None\n    else:\n        return (a/360)*math.pi*r**2\n\nprint(sector_area(5, 360))\nprint(sector_area(5, 361))\n",
    "    if a > 360:\n        return None\n    else:\n        return (a/360)*(math.pi*r**2)\n",
    "    if a > 360:\n        return None\n    else:\n        return (a/360)*math.pi*r**2\n\nprint(sector_area(5, 360))\nprint(sector_area(5, 361))",
    "    if a > 360:\n        return None\n    else:\n        return (a/360)*math.pi*r**2\n\nprint(sector_area(5, 360))\nprint(sector_area(5, 361))",
    "    if a > 360:\n        return None\n    else:\n        return (a / 360) * math.pi * r ** 2\n\nprint(sector_area(5, 360))\nprint(sector_area(5, 361))\n",
    "    if a > 360:\n        return None\n    else:\n        return (a/360)*math.pi*r**2\n\nprint(sector_area(5, 360))\nprint(sector_area(5, 361))",
    "    if a > 360:\n        return None\n    else:\n        return (a/360)*math.pi*r**2\n",
    "    if a > 360:\n        return None\n    else:\n        return (a/360)*math.pi*r**2\n\nprint(sector_area(10, 360))\nprint(sector_area(10, 361))",
    "    if a > 360:\n        return None\n    else:\n        return (a/360)*math.pi*r**2\n\nprint(sector_area(5, 360))\nprint(sector_area(5, 361))\n",
    "    if a > 360:\n        return None\n    else:\n        return (a/360)*(math.pi*r**2)\n\nprint(sector_area(5, 360))\nprint(sector_area(5, 361))"
  ]
}