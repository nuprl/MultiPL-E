{
  "name": "mbpp_80_tetrahedral_number",
  "language": "py",
  "prompt": "def tetrahedral_number(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth tetrahedral number.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_80_tetrahedral_number.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate(5) == 35\n    assert candidate(6) == 56\n    assert candidate(7) == 84\n\ndef test_check():\n    check(tetrahedral_number)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return int(n * (n + 1) * (n + 2) / 6)\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return int(n * (n + 1) * (n + 2) / 6)\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return int(n * (n + 1) * (n + 2) / 6)\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return int(n * (n + 1) * (n + 2) / 6)\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return sum(range(1, n + 1))\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return int(n * (n + 1) * (n + 2) / 6)\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return sum(range(1, n + 1))\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return int(n * (n + 1) * (n + 2) / 6)\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return sum(range(1, n + 1))\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return sum(range(1, n + 1))\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n",
    "    return n * (n + 1) * (n + 2) // 6\n\n",
    "    return (n * (n + 1) * (n + 2)) // 6\n\n"
  ]
}