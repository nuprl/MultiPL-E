{
  "name": "mbpp_293_otherside_rightangle",
  "language": "py",
  "prompt": "def otherside_rightangle(w: int, h: int) -> float:\n    \"\"\"\n\tWrite a function to find the third side of a right angled triangle.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_293_otherside_rightangle.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate(7, 8) == 10.63014581273465\n    assert candidate(3, 4) == 5\n    assert candidate(7, 15) == 16.55294535724685\n\ndef test_check():\n    check(otherside_rightangle)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return math.sqrt(w ** 2 + h ** 2)\n\n",
    "    return math.sqrt(w ** 2 + h ** 2)\n\n",
    "    return math.sqrt(w ** 2 + h ** 2)\n\n",
    "    return math.sqrt(w ** 2 + h ** 2)\n\n",
    "    return math.sqrt(w ** 2 + h ** 2)\n\n",
    "    return math.sqrt(w ** 2 + h ** 2)\n\n",
    "    return math.sqrt(w ** 2 + h ** 2)\n\n",
    "    return math.sqrt(w ** 2 + h ** 2)\n\n",
    "    return math.sqrt(w ** 2 + h ** 2)\n\n",
    "    return math.sqrt(w ** 2 + h ** 2)\n\n",
    "    return math.sqrt(w ** 2 + h ** 2)\n\n",
    "    return math.sqrt(w ** 2 + h ** 2)\n\n",
    "    return math.sqrt(w ** 2 + h ** 2)\n\n",
    "    return math.sqrt(w ** 2 + h ** 2)\n\n",
    "    return math.sqrt(w ** 2 + h ** 2)\n\n",
    "    return math.sqrt(w ** 2 + h ** 2)\n\n",
    "    return math.sqrt(w ** 2 + h ** 2)\n\n",
    "    return math.sqrt(w ** 2 + h ** 2)\n\n",
    "    return math.sqrt(w ** 2 + h ** 2)\n\n",
    "    return math.sqrt(w ** 2 + h ** 2)\n\n"
  ]
}