{
  "name": "mbpp_222_check_type",
  "language": "py",
  "prompt": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n",
    "    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n",
    "    return len(set(map(type, test_tuple))) == 1",
    "    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(test_tuple[0]) == type(i) for i in test_tuple)\n",
    "    return len(set([type(x) for x in test_tuple])) == 1",
    "    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n",
    "    return len(set(map(type, test_tuple))) == 1",
    "    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n",
    "    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(test_tuple[0]) == type(i) for i in test_tuple)\n",
    "    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n\nprint(check_type((1, 2, 3)))\nprint(check_type((1, 2, \"3\")))\nprint(check_type((1, 2, 3.0)))\nprint(check_type((1, 2, 3.0, \"4\")))",
    "    return len(set(map(type, test_tuple))) == 1",
    "    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n",
    "    return len(set(map(type, test_tuple))) == 1",
    "    return len(set(map(type, test_tuple))) == 1\n\n",
    "    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(type(test_tuple[0]) == type(x) for x in test_tuple)",
    "    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n",
    "    return len(set(map(type, test_tuple))) == 1",
    "    return len(set(map(type, test_tuple))) == 1",
    "    return len(set(map(type, test_tuple))) == 1",
    "    return len(set(map(type, test_tuple))) == 1"
  ]
}