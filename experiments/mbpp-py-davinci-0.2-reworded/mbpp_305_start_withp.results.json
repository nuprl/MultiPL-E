{
  "name": "mbpp_305_start_withp",
  "language": "py",
  "prompt": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_305_start_withp.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "results": [
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'pizza']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "('pumpkin', 'pie', 'pear', 'pizza')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3lugkmvs.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp3lugkmvs.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp3lugkmvs.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pepper', 'pizza', 'pancakes', 'pudding']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "('pumpkin', 'pie', 'pepper', 'pizza', 'pancakes', 'pudding')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpog3yhc_z.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpog3yhc_z.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpog3yhc_z.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancakes', 'potatoes']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "('pumpkin', 'pie', 'pudding', 'pancakes', 'potatoes')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpay4t19ky.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpay4t19ky.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpay4t19ky.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'peach']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "('pumpkin', 'pie', 'pear', 'peach')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprmy5frwf.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmprmy5frwf.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmprmy5frwf.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word.startswith('p'), words))\n\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancakes', 'pizza']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "('pumpkin', 'pie', 'pudding', 'pancakes', 'pizza')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphqtjczar.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmphqtjczar.py\", line 17, in test_check\n    check(start_withp)\n  File \"/tmp/tmphqtjczar.py\", line 12, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9k06tigs.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp9k06tigs.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp9k06tigs.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'pizza']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "('pumpkin', 'pie', 'pear', 'pizza')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1qk1i4ws.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp1qk1i4ws.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp1qk1i4ws.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp99ex3vra.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp99ex3vra.py\", line 14, in test_check\n    check(start_withp)\n  File \"/tmp/tmp99ex3vra.py\", line 9, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word[0] == 'p']\n\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxkqjwier.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpxkqjwier.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpxkqjwier.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(word for word in words if word[0] == 'p')\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "('pumpkin', 'pie', 'pear', 'peach')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp35zr6d7g.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp35zr6d7g.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp35zr6d7g.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'plum']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "('pumpkin', 'pie', 'pear', 'plum')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy7v5b0vy.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpy7v5b0vy.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpy7v5b0vy.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word[0] == 'p']\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach', 'pineapple']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "['pumpkin', 'pie', 'pear', 'peach', 'pineapple']\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpeyuqaihp.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpeyuqaihp.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpeyuqaihp.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word[0] == 'p']\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_co3tqc1.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp_co3tqc1.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp_co3tqc1.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9k06tigs.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp9k06tigs.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp9k06tigs.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjwuurpuc.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpjwuurpuc.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpjwuurpuc.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word[0] == 'p']\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_co3tqc1.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp_co3tqc1.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp_co3tqc1.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9k06tigs.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp9k06tigs.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp9k06tigs.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pizza', 'pasta', 'pancakes', 'potatoes', 'pepper']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pizza', 'pasta', 'pancakes', 'potatoes', 'pepper')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpknhsc8ny.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpknhsc8ny.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpknhsc8ny.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach', 'pineapple', 'pizza']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'peach', 'pineapple', 'pizza')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpctge707u.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpctge707u.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpctge707u.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pizza', 'pancake', 'pudding']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pizza', 'pancake', 'pudding')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxgwgtlsm.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpxgwgtlsm.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpxgwgtlsm.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pizza', 'pork', 'pancakes']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'pizza', 'pork', 'pancakes')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9viqav05.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp9viqav05.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp9viqav05.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9k06tigs.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp9k06tigs.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp9k06tigs.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpn7dta2o2.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpn7dta2o2.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmpn7dta2o2.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp99ex3vra.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp99ex3vra.py\", line 14, in test_check\n    check(start_withp)\n  File \"/tmp/tmp99ex3vra.py\", line 9, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pizza', 'apple', 'pear', 'pomegranate']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pizza', 'pear', 'pomegranate')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpu8otp34m.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpu8otp34m.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpu8otp34m.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancake', 'pizza']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pudding', 'pancake', 'pizza')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfa8jl4nk.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpfa8jl4nk.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpfa8jl4nk.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\n\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7x2h6991.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp7x2h6991.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp7x2h6991.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'plum']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "('pumpkin', 'pie', 'pear', 'plum')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy7v5b0vy.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpy7v5b0vy.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpy7v5b0vy.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'pizza', 'pork']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'pizza', 'pork')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvxo53eei.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpvxo53eei.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpvxo53eei.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pizza', 'pork', 'peas']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'pizza', 'pork', 'peas')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4xa82o01.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp4xa82o01.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp4xa82o01.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pizza', 'pork', 'peas']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'pizza', 'pork', 'peas')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4xa82o01.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp4xa82o01.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp4xa82o01.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pizza', 'pancake', 'pudding', 'popsicle', 'pudding']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pizza', 'pancake', 'pudding', 'popsicle', 'pudding')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy5366jap.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpy5366jap.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpy5366jap.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    words_p = []\n    for word in words:\n        if word[0] == 'p':\n            words_p.append(word)\n    return tuple(words_p)\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3khn0lt8.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmp3khn0lt8.py\", line 19, in test_check\n    check(start_withp)\n  File \"/tmp/tmp3khn0lt8.py\", line 14, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pepper', 'pizza', 'potato']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pepper', 'pizza', 'potato')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp04bner8s.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp04bner8s.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp04bner8s.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2w9n0l2e.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp2w9n0l2e.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp2w9n0l2e.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0].lower() == 'p', words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsvn9ujt4.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpsvn9ujt4.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmpsvn9ujt4.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpn7dta2o2.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpn7dta2o2.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmpn7dta2o2.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjwuurpuc.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpjwuurpuc.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpjwuurpuc.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph6_3rk49.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmph6_3rk49.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmph6_3rk49.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word[0] == 'p']\n\nprint(start_withp(['pumpkin', 'pie', 'pizza', 'pineapple', 'pudding']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "['pumpkin', 'pie', 'pizza', 'pineapple', 'pudding']\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjr3qoy2s.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpjr3qoy2s.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpjr3qoy2s.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9k06tigs.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp9k06tigs.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp9k06tigs.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'peach')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpovsq066t.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpovsq066t.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpovsq066t.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'peach')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpovsq066t.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpovsq066t.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpovsq066t.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'plum']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "('pumpkin', 'pie', 'pear', 'plum')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy7v5b0vy.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpy7v5b0vy.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpy7v5b0vy.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancake', 'pizza', 'pork']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pudding', 'pancake', 'pizza', 'pork')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8pxl8c4m.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp8pxl8c4m.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp8pxl8c4m.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word[0] == 'p']\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pear']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "['pumpkin', 'pie', 'pudding', 'pear']\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyn4a7kza.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpyn4a7kza.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpyn4a7kza.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'peach')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2shqytge.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp2shqytge.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp2shqytge.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'pineapple', 'peach']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'pineapple', 'peach')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkum6ixex.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpkum6ixex.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpkum6ixex.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcmpmkta7.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpcmpmkta7.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpcmpmkta7.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpn7dta2o2.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpn7dta2o2.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmpn7dta2o2.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'peach', 'pizza', 'pork']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'peach', 'pizza', 'pork')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7zv5limk.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp7zv5limk.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp7zv5limk.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancakes', 'pizza']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pudding', 'pancakes', 'pizza')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfutxjqa_.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpfutxjqa_.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpfutxjqa_.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pineapple', 'pizza', 'pork']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'pineapple', 'pizza', 'pork')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpus784ips.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpus784ips.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpus784ips.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'peach')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpovsq066t.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpovsq066t.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpovsq066t.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\n\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7x2h6991.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp7x2h6991.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp7x2h6991.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9k06tigs.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp9k06tigs.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp9k06tigs.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'peach', 'pear', 'plum']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'peach', 'pear', 'plum')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7yyjir8i.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp7yyjir8i.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp7yyjir8i.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp99ex3vra.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp99ex3vra.py\", line 14, in test_check\n    check(start_withp)\n  File \"/tmp/tmp99ex3vra.py\", line 9, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2w9n0l2e.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp2w9n0l2e.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp2w9n0l2e.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word[0] == 'p']\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "['pumpkin', 'pie', 'pear', 'peach']\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpd00ja0ph.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpd00ja0ph.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpd00ja0ph.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word[0] == 'p']\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_co3tqc1.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp_co3tqc1.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp_co3tqc1.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7vee86nt.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp7vee86nt.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp7vee86nt.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9k06tigs.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp9k06tigs.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp9k06tigs.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word[0] == 'p']\n\nprint(start_withp(['pizza', 'apple', 'pear', 'pizza']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "['pizza', 'pear', 'pizza']\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk4qbkrrz.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpk4qbkrrz.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpk4qbkrrz.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'pineapple', 'pizza']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'pineapple', 'pizza')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3vuacizq.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp3vuacizq.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp3vuacizq.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'peach', 'pear', 'apple', 'pineapple']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'peach', 'pear', 'pineapple')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprxkdbhxw.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmprxkdbhxw.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmprxkdbhxw.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach', 'pineapple']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'peach', 'pineapple')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvdy410cj.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpvdy410cj.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpvdy410cj.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'pizza']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'pizza')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3yaylqhv.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp3yaylqhv.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp3yaylqhv.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'peach', 'apple', 'pear', 'pizza', 'pork']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pudding', 'peach', 'pear', 'pizza', 'pork')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp98vw4e29.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp98vw4e29.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp98vw4e29.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'peach', 'plum', 'pecan']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'peach', 'plum', 'pecan')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjd6u479a.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpjd6u479a.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpjd6u479a.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'plum']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'plum')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpe13f183_.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpe13f183_.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpe13f183_.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancakes', 'pizza', 'pasta', 'peanuts']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pudding', 'pancakes', 'pizza', 'pasta', 'peanuts')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpry9rtne8.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpry9rtne8.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpry9rtne8.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pepper', 'pizza']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pepper', 'pizza')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpe0s13cie.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpe0s13cie.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpe0s13cie.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pizza', 'pork']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'pizza', 'pork')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpp8rvtdcw.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpp8rvtdcw.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpp8rvtdcw.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp02k1pryj.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp02k1pryj.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp02k1pryj.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word[0] == 'p']\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pizza', 'pork']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "['pumpkin', 'pie', 'pear', 'pizza', 'pork']\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpztssel8h.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpztssel8h.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpztssel8h.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(word for word in words if word[0] == 'p')\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pizza', 'pork', 'pancake', 'pudding']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'pizza', 'pork', 'pancake', 'pudding')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_48z_h1o.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp_48z_h1o.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp_48z_h1o.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word.startswith('p')]\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'pizza', 'pork']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "['pumpkin', 'pie', 'pear', 'pizza', 'pork']\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmehv6yhl.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpmehv6yhl.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpmehv6yhl.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'pineapple', 'peach']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'pineapple', 'peach')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkum6ixex.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpkum6ixex.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpkum6ixex.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9k06tigs.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp9k06tigs.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp9k06tigs.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancake', 'pizza']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pudding', 'pancake', 'pizza')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfa8jl4nk.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpfa8jl4nk.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpfa8jl4nk.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'potato', 'pepper', 'pizza']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'potato', 'pepper', 'pizza')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq07sy309.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpq07sy309.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpq07sy309.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pepper', 'pizza', 'pork', 'pineapple']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pepper', 'pizza', 'pork', 'pineapple')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpo138o3_k.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpo138o3_k.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpo138o3_k.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'peach']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'peach')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0w5rf1qy.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp0w5rf1qy.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0w5rf1qy.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmplkvrcai9.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmplkvrcai9.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmplkvrcai9.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpn7dta2o2.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpn7dta2o2.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmpn7dta2o2.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancakes', 'potatoes']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "('pumpkin', 'pie', 'pudding', 'pancakes', 'potatoes')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpay4t19ky.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpay4t19ky.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpay4t19ky.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'apple', 'pear', 'pineapple', 'peach', 'pomegranate']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pear', 'pineapple', 'peach', 'pomegranate')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp22lm6elw.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp22lm6elw.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp22lm6elw.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pepper', 'pizza', 'pancake', 'pudding']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pepper', 'pizza', 'pancake', 'pudding')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0di9r452.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp0di9r452.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0di9r452.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pizza', 'pancake']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'pizza', 'pancake')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpl76_ay1q.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpl76_ay1q.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpl76_ay1q.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pizza', 'pasta', 'salad', 'pancakes']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pizza', 'pasta', 'pancakes')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmplbuz8ppo.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmplbuz8ppo.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmplbuz8ppo.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9k06tigs.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp9k06tigs.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp9k06tigs.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'pineapple']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'pineapple')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2u2rbz0o.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp2u2rbz0o.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp2u2rbz0o.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'pineapple', 'peach']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'pineapple', 'peach')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkum6ixex.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpkum6ixex.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpkum6ixex.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pear', 'apple', 'peach', 'grape', 'plum']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pear', 'peach', 'plum')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8gkqxq1d.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp8gkqxq1d.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp8gkqxq1d.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pizza', 'pancake', 'pudding', 'popsicle']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pizza', 'pancake', 'pudding', 'popsicle')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_jx75n98.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp_jx75n98.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp_jx75n98.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(word for word in words if word[0] == 'p')\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach', 'plum']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'peach', 'plum')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbzhytkzf.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpbzhytkzf.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpbzhytkzf.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word[0] == 'p']\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'pineapple']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "['pumpkin', 'pie', 'pear', 'pineapple']\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1cw3f5no.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp1cw3f5no.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp1cw3f5no.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pizza', 'pancakes']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pizza', 'pancakes')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_wgagdpv.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp_wgagdpv.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp_wgagdpv.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word[0].lower() == 'p']\n\nprint(start_withp(['name','is','Peter','and','he','is','cool']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "['Peter']\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfb0g22yg.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpfb0g22yg.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpfb0g22yg.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pizza', 'pork', 'pancakes']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'pizza', 'pork', 'pancakes')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj8jf8t13.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpj8jf8t13.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpj8jf8t13.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp35fmeeja.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmp35fmeeja.py\", line 14, in test_check\n    check(start_withp)\n  File \"/tmp/tmp35fmeeja.py\", line 9, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(word for word in words if word[0] == 'p')\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3m_29n8g.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp3m_29n8g.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp3m_29n8g.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'pizza']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'pizza')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6bwyftdb.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp6bwyftdb.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp6bwyftdb.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9k06tigs.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp9k06tigs.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp9k06tigs.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word[0] == 'p']\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "['pumpkin', 'pie', 'pear']\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpl5cmfxbf.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpl5cmfxbf.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpl5cmfxbf.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pizza', 'pancake']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'pizza', 'pancake')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpl76_ay1q.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpl76_ay1q.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpl76_ay1q.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pepper', 'pizza', 'pancake']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pudding', 'pepper', 'pizza', 'pancake')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7uu01wwr.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp7uu01wwr.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp7uu01wwr.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'pizza', 'pork', 'peas']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'pizza', 'pork', 'peas')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpwh4vqdoa.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpwh4vqdoa.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpwh4vqdoa.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pineapple', 'apple', 'peach']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'pineapple', 'peach')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1_e_wpeq.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp1_e_wpeq.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp1_e_wpeq.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pizza', 'pork', 'pancake']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'pizza', 'pork', 'pancake')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpndq4slk7.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpndq4slk7.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpndq4slk7.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word.startswith('p'), words))\n\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1_9afowo.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp1_9afowo.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp1_9afowo.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpn7dta2o2.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpn7dta2o2.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmpn7dta2o2.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'peach', 'pizza', 'pork', 'pancake']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pudding', 'peach', 'pizza', 'pork', 'pancake')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphxh8p2j_.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmphxh8p2j_.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmphxh8p2j_.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmps19a7i02.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmps19a7i02.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmps19a7i02.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(word for word in words if word[0] == 'p')\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancake', 'pizza']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pudding', 'pancake', 'pizza')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptuyrij_y.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmptuyrij_y.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmptuyrij_y.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pepper', 'pizza', 'pork', 'potato']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pepper', 'pizza', 'pork', 'potato')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp75a0t13y.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp75a0t13y.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp75a0t13y.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'peach', 'plum', 'pineapple']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pear', 'peach', 'plum', 'pineapple')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzpftvnna.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpzpftvnna.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpzpftvnna.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pepper', 'pizza', 'pancake']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pepper', 'pizza', 'pancake')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqkmk3ffj.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpqkmk3ffj.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpqkmk3ffj.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pepper', 'pizza', 'pancake', 'pudding', 'pudding']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pepper', 'pizza', 'pancake', 'pudding', 'pudding')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpejicrz0_.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpejicrz0_.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpejicrz0_.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'pineapple']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pear', 'pineapple')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfqppy8yy.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpfqppy8yy.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpfqppy8yy.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word.startswith('p')]\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'pineapple', 'pizza']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "['pumpkin', 'pie', 'pear', 'pineapple', 'pizza']\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0uemeu6i.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp0uemeu6i.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0uemeu6i.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'potato', 'pancake', 'pizza']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'potato', 'pancake', 'pizza')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy6gikz17.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpy6gikz17.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpy6gikz17.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(word for word in words if word[0] == 'p')\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3m_29n8g.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp3m_29n8g.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp3m_29n8g.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'pizza']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'pizza')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3yaylqhv.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp3yaylqhv.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp3yaylqhv.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'pineapple']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pear', 'pineapple')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjh4zq0_l.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpjh4zq0_l.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpjh4zq0_l.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word.startswith('p')]\n\nprint(start_withp(['pumpkin', 'pie', 'pepper', 'pizza', 'pork', 'pudding']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "['pumpkin', 'pie', 'pepper', 'pizza', 'pork', 'pudding']\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpn8z3rnnp.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpn8z3rnnp.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpn8z3rnnp.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(word for word in words if word[0] == 'p')\n\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp04vkpjpu.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp04vkpjpu.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp04vkpjpu.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pizza', 'pancakes']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pizza', 'pancakes')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphuasat3i.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmphuasat3i.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmphuasat3i.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9k06tigs.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp9k06tigs.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp9k06tigs.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pizza', 'pancakes', 'pudding', 'popsicle']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pizza', 'pancakes', 'pudding', 'popsicle')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4s5lt2qg.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp4s5lt2qg.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp4s5lt2qg.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'peach']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pear', 'peach')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxmv9sndj.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpxmv9sndj.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpxmv9sndj.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancake', 'pepper']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pudding', 'pancake', 'pepper')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpchc34mro.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpchc34mro.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpchc34mro.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0].lower() == 'p', words))\n\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpe52d9uzk.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpe52d9uzk.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpe52d9uzk.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    p_words = []\n    for word in words:\n        if word[0].lower() == 'p':\n            p_words.append(word)\n    return tuple(p_words)\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'pizza', 'pasta']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pear', 'pizza', 'pasta')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy297iluq.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpy297iluq.py\", line 20, in test_check\n    check(start_withp)\n  File \"/tmp/tmpy297iluq.py\", line 15, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'pineapple']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pear', 'pineapple')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjh4zq0_l.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpjh4zq0_l.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpjh4zq0_l.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pizza', 'pasta', 'pancakes', 'pepperoni']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pizza', 'pasta', 'pancakes', 'pepperoni')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpweny3woi.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpweny3woi.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpweny3woi.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word[0] == 'p']\n\nwords = ['pizza', 'pepperoni', 'peppers', 'pineapple', 'pork', 'prawns']\nprint(start_withp(words))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "['pizza', 'pepperoni', 'peppers', 'pineapple', 'pork', 'prawns']\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpc8_7jd3u.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmpc8_7jd3u.py\", line 17, in test_check\n    check(start_withp)\n  File \"/tmp/tmpc8_7jd3u.py\", line 12, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word[0] == 'p']\n\nprint(start_withp(['pig', 'cow', 'horse', 'cat', 'dog']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "['pig']\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpr1pdvux0.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpr1pdvux0.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpr1pdvux0.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pizza', 'pancakes']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pizza', 'pancakes')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp43dnkx9x.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp43dnkx9x.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp43dnkx9x.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word[0] == 'p']\n\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxkqjwier.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpxkqjwier.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpxkqjwier.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2w9n0l2e.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp2w9n0l2e.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp2w9n0l2e.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word.startswith('p')]\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "['pumpkin', 'pie', 'pear', 'peach']\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpaehma50o.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpaehma50o.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpaehma50o.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach', 'pizza', 'pancake']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pear', 'peach', 'pizza', 'pancake')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk240xwsj.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpk240xwsj.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpk240xwsj.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pineapple', 'pizza']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pear', 'pineapple', 'pizza')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdum5cb4t.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpdum5cb4t.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpdum5cb4t.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word.startswith('p')]\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach', 'pepper']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "['pumpkin', 'pie', 'pear', 'peach', 'pepper']\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7bp4elqg.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp7bp4elqg.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp7bp4elqg.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pizza', 'pork', 'pancake']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pear', 'pizza', 'pork', 'pancake')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpwz96hmi_.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpwz96hmi_.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpwz96hmi_.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach', 'pineapple']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'peach', 'pineapple')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvdy410cj.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpvdy410cj.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpvdy410cj.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pizza', 'pancakes', 'pepper', 'parsley']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pizza', 'pancakes', 'pepper', 'parsley')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprxf2nejb.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmprxf2nejb.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmprxf2nejb.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'peach')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpovsq066t.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpovsq066t.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpovsq066t.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pizza', 'pork', 'pancakes']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'pizza', 'pork', 'pancakes')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9viqav05.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp9viqav05.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp9viqav05.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pizza', 'pancakes']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pizza', 'pancakes')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphuasat3i.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmphuasat3i.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmphuasat3i.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'apple', 'pear']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pudding', 'pear')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnat_m7pz.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpnat_m7pz.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpnat_m7pz.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple([word for word in words if word[0] == 'p'])\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprapxr16r.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmprapxr16r.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmprapxr16r.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pepper', 'pizza', 'pancake']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pepper', 'pizza', 'pancake')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfputx8rq.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpfputx8rq.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpfputx8rq.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pizza', 'pancake', 'pudding', 'popsicle']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pizza', 'pancake', 'pudding', 'popsicle')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_jx75n98.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp_jx75n98.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp_jx75n98.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'pizza', 'pork', 'potato']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pear', 'pizza', 'pork', 'potato')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvx8i4zj2.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpvx8i4zj2.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpvx8i4zj2.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'peach', 'pizza', 'pancake', 'pudding']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'peach', 'pizza', 'pancake', 'pudding')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1sc7aboo.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp1sc7aboo.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp1sc7aboo.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'potato', 'pepper', 'pizza']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'potato', 'pepper', 'pizza')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq07sy309.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpq07sy309.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpq07sy309.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(word for word in words if word[0] == 'p')\n\nprint(start_withp(['pumpkin', 'pie', 'pepper', 'pizza', 'pancake']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pepper', 'pizza', 'pancake')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpt6lbpqb9.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpt6lbpqb9.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpt6lbpqb9.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'pizza', 'pancakes', 'potatoes']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pizza', 'pancakes', 'potatoes')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8clqu5j3.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp8clqu5j3.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmp8clqu5j3.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word[0] == 'p']\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_co3tqc1.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp_co3tqc1.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp_co3tqc1.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word[0] == 'p']\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'peach']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "['pumpkin', 'pie', 'pear', 'peach']\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk8u708oh.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpk8u708oh.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpk8u708oh.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pepper', 'pizza', 'pork', 'pancake']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "('pumpkin', 'pie', 'pepper', 'pizza', 'pork', 'pancake')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbrwkyxqv.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpbrwkyxqv.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpbrwkyxqv.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach', 'pineapple']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "('pumpkin', 'pie', 'pear', 'peach', 'pineapple')\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvdy410cj.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpvdy410cj.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpvdy410cj.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word[0] == 'p']\n\nprint(start_withp(['pig', 'penguin', 'panda', 'piglet']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "['pig', 'penguin', 'panda', 'piglet']\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfo0faqzb.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpfo0faqzb.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpfo0faqzb.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda word: word[0] == 'p', words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpn7dta2o2.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpn7dta2o2.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmpn7dta2o2.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return tuple(filter(lambda x: x.startswith('p'), words))\n\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0pnqnpm3.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmp0pnqnpm3.py\", line 15, in test_check\n    check(start_withp)\n  File \"/tmp/tmp0pnqnpm3.py\", line 10, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n    return [word for word in words if word[0] == 'p']\n\nprint(start_withp(['pizza', 'apple', 'pear', 'pizza', 'pepper', 'pizza', 'pizza']))\ndef check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
      "timestamp": 1666123244,
      "stdout": "['pizza', 'pear', 'pizza', 'pepper', 'pizza', 'pizza']\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmd65_tnt.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmpmd65_tnt.py\", line 16, in test_check\n    check(start_withp)\n  File \"/tmp/tmpmd65_tnt.py\", line 11, in check\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}