{
  "name": "mbpp_64_subject_marks",
  "language": "py",
  "prompt": "from typing import List, Tuple, Union\n\ndef subject_marks(subjectmarks: List[Tuple[Union[str, int]]]) -> List[Tuple[Union[str, int]]]:\n    \"\"\"\n\tWrite a function to sort a list of tuples using the second value of each tuple.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_64_subject_marks.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]) == [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n    assert candidate([('Telugu', 49), ('Hindhi', 54), ('Social', 33)]) == [('Social', 33), ('Telugu', 49), ('Hindhi', 54)]\n    assert candidate([('Physics', 96), ('Chemistry', 97), ('Biology', 45)]) == [('Biology', 45), ('Physics', 96), ('Chemistry', 97)]\n\ndef test_check():\n    check(subject_marks)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return sorted(subjectmarks, key=lambda x: x[1])\n",
    "    return sorted(subjectmarks, key=lambda x: x[1])\n",
    "    return sorted(subjectmarks, key=lambda x: x[1])\n",
    "    return sorted(subjectmarks, key=lambda x: x[1])\n",
    "    return sorted(subjectmarks, key=lambda x: x[1])\n\nprint(subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]))",
    "    return sorted(subjectmarks, key=lambda x: x[1])\n",
    "    return sorted(subjectmarks, key=lambda x: x[1])\n",
    "    return sorted(subjectmarks, key=lambda x: x[1])\n",
    "    return sorted(subjectmarks, key=lambda x: x[1])",
    "    return sorted(subjectmarks, key=lambda x: x[1])\n\n",
    "    return sorted(subjectmarks, key=lambda x: x[1])\n",
    "    return sorted(subjectmarks, key=lambda x: x[1])\n",
    "    return sorted(subjectmarks, key=lambda x: x[1])",
    "    return sorted(subjectmarks, key=lambda x: x[1])\n\n",
    "    return sorted(subjectmarks, key=lambda x: x[1])\n",
    "    return sorted(subjectmarks, key=lambda x: x[1])\n\nprint(subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]))",
    "    return sorted(subjectmarks, key=lambda x: x[1])\n",
    "    return sorted(subjectmarks, key=lambda x: x[1])\n\n",
    "    return sorted(subjectmarks, key=lambda x: x[1])\n",
    "    return sorted(subjectmarks, key=lambda x: x[1])"
  ]
}