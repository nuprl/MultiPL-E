{
  "name": "mbpp_279_is_num_decagonal",
  "language": "py",
  "prompt": "def is_num_decagonal(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth decagonal number.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate(3) == 27\n    assert candidate(7) == 175\n    assert candidate(10) == 370\n\ndef test_check():\n    check(is_num_decagonal)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return n * (3 * n - 1) / 2\n\n",
    "    return n * (3 * n - 1) / 2\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 1) / 2\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 1) / 2\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 1) / 2\n\n",
    "    return n * (3 * n - 1) / 2\n\n",
    "    return n * (3 * n - 1) / 2\n\n",
    "    return n * (3 * n - 1) / 2\n\n",
    "    return n * (3 * n - 1) / 2\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 1) / 2\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return n * (3 * n - 2)\n\n",
    "    return (3 * n * n - n) / 2\n\n"
  ]
}