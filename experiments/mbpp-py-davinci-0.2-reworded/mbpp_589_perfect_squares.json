{
  "name": "mbpp_589_perfect_squares",
  "language": "py",
  "prompt": "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    \"\"\"\n\tWrite a function to find perfect squares between two given numbers.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_589_perfect_squares.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate(1, 30) == [1, 4, 9, 16, 25]\n    assert candidate(50, 100) == [64, 81, 100]\n    assert candidate(100, 200) == [100, 121, 144, 169, 196]\n\ndef test_check():\n    check(perfect_squares)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return [x for x in range(a, b + 1) if x ** 0.5 == int(x ** 0.5)]\n\n\nprint(perfect_squares(1, 100))",
    "    squares = []\n    for i in range(a, b + 1):\n        if i ** 0.5 == int(i ** 0.5):\n            squares.append(i)\n    return squares\n\nprint(perfect_squares(1, 100))",
    "    return [i * i for i in range(int(a ** 0.5), int(b ** 0.5) + 1)]\n\nprint(perfect_squares(1, 100))",
    "    squares = []\n    for i in range(a, b + 1):\n        if i ** 0.5 == int(i ** 0.5):\n            squares.append(i)\n    return squares\n\n",
    "    squares = []\n    for i in range(a, b + 1):\n        if i ** 0.5 == int(i ** 0.5):\n            squares.append(i)\n    return squares",
    "    squares = []\n    for i in range(a, b + 1):\n        if i ** 0.5 == int(i ** 0.5):\n            squares.append(i)\n    return squares\n\nprint(perfect_squares(1, 100))",
    "    squares = []\n    for i in range(a, b + 1):\n        if i ** 0.5 == int(i ** 0.5):\n            squares.append(i)\n    return squares\n\nprint(perfect_squares(1, 100))",
    "    squares = []\n    for i in range(a, b + 1):\n        if i ** 0.5 == int(i ** 0.5):\n            squares.append(i)\n    return squares\n\nprint(perfect_squares(1, 100))",
    "    squares = []\n    for i in range(a, b + 1):\n        if i ** 0.5 == int(i ** 0.5):\n            squares.append(i)\n    return squares\n\nprint(perfect_squares(1, 100))",
    "    squares = []\n    for i in range(a, b+1):\n        if i**0.5 == int(i**0.5):\n            squares.append(i)\n    return squares\n",
    "    return [x for x in range(a, b + 1) if x ** 0.5 == int(x ** 0.5)]\n\n\nprint(perfect_squares(1, 10))\nprint(perfect_squares(1, 100))\nprint(perfect_squares(1, 1000))\nprint(perfect_squares(1, 10000))",
    "    squares = []\n    for i in range(a, b+1):\n        if i**0.5 == int(i**0.5):\n            squares.append(i)\n    return squares\n\nprint(perfect_squares(1, 100))",
    "    if a > b:\n        return []\n    squares = []\n    for i in range(a, b+1):\n        sqrt = i ** 0.5\n        if sqrt.is_integer():\n            squares.append(i)\n    return squares\n\nprint(perfect_squares(1, 10))",
    "    squares = []\n    for i in range(a, b + 1):\n        if i ** 0.5 == int(i ** 0.5):\n            squares.append(i)\n    return squares\n\nprint(perfect_squares(1, 100))",
    "    squares = []\n    for i in range(a, b + 1):\n        if i ** 0.5 == int(i ** 0.5):\n            squares.append(i)\n    return squares\n",
    "    if a > b:\n        return []\n    squares = []\n    for i in range(a, b+1):\n        if i ** 0.5 == int(i ** 0.5):\n            squares.append(i)\n    return squares\n\nprint(perfect_squares(1, 100))",
    "    squares = []\n    for i in range(a, b + 1):\n        if i ** 0.5 == int(i ** 0.5):\n            squares.append(i)\n    return squares",
    "    squares = []\n    for i in range(a, b+1):\n        if i**0.5 == int(i**0.5):\n            squares.append(i)\n    return squares\n",
    "    squares = []\n    for i in range(a, b+1):\n        if i**0.5 == int(i**0.5):\n            squares.append(i)\n    return squares\n",
    "    squares = []\n    for i in range(a, b + 1):\n        if i ** 0.5 == int(i ** 0.5):\n            squares.append(i)\n    return squares\n\nprint(perfect_squares(1, 100))"
  ]
}