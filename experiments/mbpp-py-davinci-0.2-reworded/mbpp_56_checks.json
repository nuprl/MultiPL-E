{
  "name": "mbpp_56_checks",
  "language": "py",
  "prompt": "def checks(n: int) -> bool:\n    \"\"\"\n\tWrite a python function to check if a given number is one less than twice its reverse.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_56_checks.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate(70) == False\n    assert candidate(23) == False\n    assert candidate(73) == True\n\ndef test_check():\n    check(checks)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return n == (int(str(n)[::-1]) * 2) - 1\n\n",
    "    return n == (int(str(n)[::-1]) * 2) - 1\n\n",
    "    return n == int(str(n)[::-1]) + 1\n\n",
    "    return n == int(str(n)[::-1]) + 1\n\n",
    "    return n == (n + 1) // 2\n\n",
    "    return n == (int(str(n)[::-1]) * 2) - 1\n\n",
    "    return n == (2 * int(str(n)[::-1]) - 1)\n\n",
    "    return n == (n // 10) * 2 - 1\n\n",
    "    return n == int(str(n)[::-1]) + 1\n\n",
    "    return n == int(str(n)[::-1]) + 1\n\n",
    "    return n == (n % 10) * 10 + n // 10\n\n",
    "    return n == (n + 1) // 2\n\n",
    "    return n == (n // 10) * 2 - 1\n\n",
    "    return n == int(str(n)[::-1]) + 1\n\n",
    "    return n == (2 * int(str(n)[::-1])) - 1\n\n",
    "    return n == (2 * int(str(n)[::-1]) - 1)\n\n",
    "    return n == (n // 10) * 2 - 1\n\n",
    "    return n == (n % 10) * 10 + n // 10\n\n",
    "    return n == 2 * int(str(n)[::-1]) - 1\n\n",
    "    return n == int(str(n)[::-1]) + 1\n\n"
  ]
}