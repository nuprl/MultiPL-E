{
  "name": "mbpp_223_is_majority",
  "language": "py",
  "prompt": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "results": [
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi7thbeot.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpi7thbeot.py\", line 24, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi7thbeot.py\", line 21, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi7thbeot.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if len(arr) == 0:\n        return False\n    if len(arr) == 1:\n        return arr[0] == x\n    mid = len(arr) // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] < x:\n        return is_majority(arr[mid + 1:], n, x)\n    else:\n        return is_majority(arr[:mid], n, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpll4gm54r.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpll4gm54r.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmpll4gm54r.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # O(n) time | O(1) space\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n/2\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    return arr.count(x) > n // 2\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # TODO: Write your code here\n    pass\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcc4h5sa8.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmpcc4h5sa8.py\", line 18, in test_check\n    check(is_majority)\n  File \"/tmp/tmpcc4h5sa8.py\", line 12, in check\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy3bfdork.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpy3bfdork.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmpy3bfdork.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n/2\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptus53ps5.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmptus53ps5.py\", line 20, in test_check\n    check(is_majority)\n  File \"/tmp/tmptus53ps5.py\", line 17, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmptus53ps5.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # O(log n) time | O(1) space\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp34gqk_ib.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp34gqk_ib.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp34gqk_ib.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if arr[n//2] == x:\n        return True\n    elif arr[n//2] > x:\n        return is_majority(arr[:n//2], n//2, x)\n    else:\n        return is_majority(arr[n//2+1:], n//2, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9x9646c1.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp9x9646c1.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9x9646c1.py\", line 18, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    return arr.count(x) > n // 2\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp61no4d1u.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmp61no4d1u.py\", line 24, in test_check\n    check(is_majority)\n  File \"/tmp/tmp61no4d1u.py\", line 21, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmp61no4d1u.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoddgh9d7.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpoddgh9d7.py\", line 25, in test_check\n    check(is_majority)\n  File \"/tmp/tmpoddgh9d7.py\", line 22, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpoddgh9d7.py\", line 11, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi7thbeot.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpi7thbeot.py\", line 24, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi7thbeot.py\", line 21, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi7thbeot.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgu5gncpv.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpgu5gncpv.py\", line 22, in test_check\n    check(is_majority)\n  File \"/tmp/tmpgu5gncpv.py\", line 19, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpgu5gncpv.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # Time: O(log n)\n    # Space: O(1)\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpeg0_8o6n.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpeg0_8o6n.py\", line 29, in test_check\n    check(is_majority)\n  File \"/tmp/tmpeg0_8o6n.py\", line 24, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    if n == 2:\n        return arr[0] == x or arr[1] == x\n    if n == 3:\n        return arr[0] == x or arr[1] == x or arr[2] == x\n\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid:], n - mid, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpya7wr4hv.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmpya7wr4hv.py\", line 31, in test_check\n    check(is_majority)\n  File \"/tmp/tmpya7wr4hv.py\", line 26, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # TODO: Write your code here\n    pass\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcc4h5sa8.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmpcc4h5sa8.py\", line 18, in test_check\n    check(is_majority)\n  File \"/tmp/tmpcc4h5sa8.py\", line 12, in check\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] < x:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n    else:\n        return is_majority(arr[:mid], mid, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqro_xmw7.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpqro_xmw7.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmpqro_xmw7.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # TODO: Write your code here\n    pass\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcc4h5sa8.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmpcc4h5sa8.py\", line 18, in test_check\n    check(is_majority)\n  File \"/tmp/tmpcc4h5sa8.py\", line 12, in check\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi7thbeot.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpi7thbeot.py\", line 24, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi7thbeot.py\", line 21, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi7thbeot.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            if mid - 1 >= 0 and arr[mid - 1] == x:\n                right = mid - 1\n            elif mid + 1 < n and arr[mid + 1] == x:\n                left = mid + 1\n            else:\n                return True\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8q38r_bx.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp8q38r_bx.py\", line 32, in test_check\n    check(is_majority)\n  File \"/tmp/tmp8q38r_bx.py\", line 26, in check\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmplj62lli3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmplj62lli3.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmplj62lli3.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    return is_majority(arr[mid+1:], n - mid - 1, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxfx5jqe9.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpxfx5jqe9.py\", line 25, in test_check\n    check(is_majority)\n  File \"/tmp/tmpxfx5jqe9.py\", line 20, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgu5gncpv.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpgu5gncpv.py\", line 22, in test_check\n    check(is_majority)\n  File \"/tmp/tmpgu5gncpv.py\", line 19, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpgu5gncpv.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2ekqvley.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp2ekqvley.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmp2ekqvley.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmp2ekqvley.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if len(arr) == 0:\n        return False\n    if len(arr) == 1:\n        return arr[0] == x\n    mid = len(arr) // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], n, x)\n    else:\n        return is_majority(arr[mid+1:], n, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptou6h9z5.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmptou6h9z5.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmptou6h9z5.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    if arr[n//2] == x:\n        return True\n    if arr[n//2] > x:\n        return is_majority(arr[:n//2], n//2, x)\n    else:\n        return is_majority(arr[n//2+1:], n//2, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfv52oe18.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpfv52oe18.py\", line 25, in test_check\n    check(is_majority)\n  File \"/tmp/tmpfv52oe18.py\", line 20, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp61no4d1u.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmp61no4d1u.py\", line 24, in test_check\n    check(is_majority)\n  File \"/tmp/tmp61no4d1u.py\", line 21, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmp61no4d1u.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    return arr.count(x) > n / 2\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    return arr.count(x) > n/2\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if x == arr[n//2]:\n        return True\n    elif x < arr[n//2]:\n        return is_majority(arr[:n//2], n//2, x)\n    else:\n        return is_majority(arr[n//2+1:], n//2, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpt4gs_j6f.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpt4gs_j6f.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpt4gs_j6f.py\", line 18, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmplj62lli3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmplj62lli3.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmplj62lli3.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n\n    if n == 1:\n        return arr[0] == x\n\n    mid = n // 2\n\n    if arr[mid] == x:\n        return True\n\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n\n    return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmplrsj7r7p.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmplrsj7r7p.py\", line 31, in test_check\n    check(is_majority)\n  File \"/tmp/tmplrsj7r7p.py\", line 26, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgu5gncpv.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpgu5gncpv.py\", line 22, in test_check\n    check(is_majority)\n  File \"/tmp/tmpgu5gncpv.py\", line 19, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpgu5gncpv.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    return arr.count(x) > n/2\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n\n    if n == 1:\n        return arr[0] == x\n\n    mid = n // 2\n\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8x7xxddu.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmp8x7xxddu.py\", line 28, in test_check\n    check(is_majority)\n  File \"/tmp/tmp8x7xxddu.py\", line 23, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpl9c5zo_3.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpl9c5zo_3.py\", line 28, in test_check\n    check(is_majority)\n  File \"/tmp/tmpl9c5zo_3.py\", line 23, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxticwcgt.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpxticwcgt.py\", line 28, in test_check\n    check(is_majority)\n  File \"/tmp/tmpxticwcgt.py\", line 23, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # TODO: Write your code here\n    pass\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcc4h5sa8.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmpcc4h5sa8.py\", line 18, in test_check\n    check(is_majority)\n  File \"/tmp/tmpcc4h5sa8.py\", line 12, in check\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmplj62lli3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmplj62lli3.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmplj62lli3.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgt6thw_d.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpgt6thw_d.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmpgt6thw_d.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkxg4xi30.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpkxg4xi30.py\", line 25, in test_check\n    check(is_majority)\n  File \"/tmp/tmpkxg4xi30.py\", line 20, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgt6thw_d.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpgt6thw_d.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmpgt6thw_d.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if arr[n//2] == x:\n        return True\n    elif arr[n//2] > x:\n        return is_majority(arr[:n//2], n//2, x)\n    else:\n        return is_majority(arr[n//2+1:], n//2, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9x9646c1.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp9x9646c1.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9x9646c1.py\", line 18, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n/2\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptus53ps5.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmptus53ps5.py\", line 20, in test_check\n    check(is_majority)\n  File \"/tmp/tmptus53ps5.py\", line 17, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmptus53ps5.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgu5gncpv.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpgu5gncpv.py\", line 22, in test_check\n    check(is_majority)\n  File \"/tmp/tmpgu5gncpv.py\", line 19, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpgu5gncpv.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if len(arr) == 0:\n        return False\n    if len(arr) == 1:\n        return arr[0] == x\n    mid = len(arr) // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], n, x)\n    else:\n        return is_majority(arr[mid+1:], n, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptou6h9z5.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmptou6h9z5.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmptou6h9z5.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            if mid + n // 2 < n and arr[mid + n // 2] == x:\n                return True\n            elif mid - n // 2 >= 0 and arr[mid - n // 2] == x:\n                return True\n            else:\n                return False\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv1t2aty5.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmpv1t2aty5.py\", line 30, in test_check\n    check(is_majority)\n  File \"/tmp/tmpv1t2aty5.py\", line 24, in check\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # Time Complexity: O(log n)\n    # Space Complexity: O(1)\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            if mid + n // 2 < n and arr[mid + n // 2] == x:\n                return True\n            elif mid - n // 2 >= 0 and arr[mid - n // 2] == x:\n                return True\n            else:\n                return False\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4w2tnblr.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4w2tnblr.py\", line 32, in test_check\n    check(is_majority)\n  File \"/tmp/tmp4w2tnblr.py\", line 26, in check\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkxg4xi30.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpkxg4xi30.py\", line 25, in test_check\n    check(is_majority)\n  File \"/tmp/tmpkxg4xi30.py\", line 20, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7ltbpg4_.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp7ltbpg4_.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmp7ltbpg4_.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpl9c5zo_3.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpl9c5zo_3.py\", line 28, in test_check\n    check(is_majority)\n  File \"/tmp/tmpl9c5zo_3.py\", line 23, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # TODO: Write your code here\n    pass\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcc4h5sa8.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmpcc4h5sa8.py\", line 18, in test_check\n    check(is_majority)\n  File \"/tmp/tmpcc4h5sa8.py\", line 12, in check\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # TODO: Write your code here\n    pass\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcc4h5sa8.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmpcc4h5sa8.py\", line 18, in test_check\n    check(is_majority)\n  File \"/tmp/tmpcc4h5sa8.py\", line 12, in check\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7ltbpg4_.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp7ltbpg4_.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmp7ltbpg4_.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkxg4xi30.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpkxg4xi30.py\", line 25, in test_check\n    check(is_majority)\n  File \"/tmp/tmpkxg4xi30.py\", line 20, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # Write your code here.\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvqf_t88z.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpvqf_t88z.py\", line 24, in test_check\n    check(is_majority)\n  File \"/tmp/tmpvqf_t88z.py\", line 21, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpvqf_t88z.py\", line 10, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy3bfdork.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpy3bfdork.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmpy3bfdork.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n\n    if n == 1:\n        return arr[0] == x\n\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxt6jk5tq.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmpxt6jk5tq.py\", line 30, in test_check\n    check(is_majority)\n  File \"/tmp/tmpxt6jk5tq.py\", line 25, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] < x:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n    else:\n        return is_majority(arr[:mid], mid, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqro_xmw7.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpqro_xmw7.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmpqro_xmw7.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgt6thw_d.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpgt6thw_d.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmpgt6thw_d.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n\n    if arr[n // 2] == x:\n        return True\n\n    if arr[n // 2] > x:\n        return is_majority(arr[:n // 2], n // 2, x)\n    else:\n        return is_majority(arr[n // 2 + 1:], n // 2, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpu05jkhnu.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpu05jkhnu.py\", line 25, in test_check\n    check(is_majority)\n  File \"/tmp/tmpu05jkhnu.py\", line 20, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi7thbeot.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpi7thbeot.py\", line 24, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi7thbeot.py\", line 21, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi7thbeot.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # Write your code here.\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp071sleow.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmp071sleow.py\", line 25, in test_check\n    check(is_majority)\n  File \"/tmp/tmp071sleow.py\", line 22, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmp071sleow.py\", line 10, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # TODO: Write your code here\n    pass\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcc4h5sa8.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmpcc4h5sa8.py\", line 18, in test_check\n    check(is_majority)\n  File \"/tmp/tmpcc4h5sa8.py\", line 12, in check\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n/2\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptus53ps5.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmptus53ps5.py\", line 20, in test_check\n    check(is_majority)\n  File \"/tmp/tmptus53ps5.py\", line 17, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmptus53ps5.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] < x:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n    else:\n        return is_majority(arr[:mid], mid, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqro_xmw7.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpqro_xmw7.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmpqro_xmw7.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # O(log n) time | O(1) space\n    left = bisect.bisect_left(arr, x)\n    right = bisect.bisect_right(arr, x)\n    return right - left > n // 2\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpg2gazm7o.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmpg2gazm7o.py\", line 18, in test_check\n    check(is_majority)\n  File \"/tmp/tmpg2gazm7o.py\", line 12, in check\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n  File \"/tmp/tmpg2gazm7o.py\", line 8, in is_majority\n    left = bisect.bisect_left(arr, x)\nNameError: name 'bisect' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp61no4d1u.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmp61no4d1u.py\", line 24, in test_check\n    check(is_majority)\n  File \"/tmp/tmp61no4d1u.py\", line 21, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmp61no4d1u.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    return is_majority(arr[mid+1:], n - mid - 1, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxfx5jqe9.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpxfx5jqe9.py\", line 25, in test_check\n    check(is_majority)\n  File \"/tmp/tmpxfx5jqe9.py\", line 20, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7ltbpg4_.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp7ltbpg4_.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmp7ltbpg4_.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmplj62lli3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmplj62lli3.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmplj62lli3.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgu5gncpv.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpgu5gncpv.py\", line 22, in test_check\n    check(is_majority)\n  File \"/tmp/tmpgu5gncpv.py\", line 19, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpgu5gncpv.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    return arr.count(x) > n/2\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    if n == 2:\n        return arr[0] == x or arr[1] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    return is_majority(arr[mid:], n - mid, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkji_i7ga.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpkji_i7ga.py\", line 28, in test_check\n    check(is_majority)\n  File \"/tmp/tmpkji_i7ga.py\", line 23, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgu5gncpv.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpgu5gncpv.py\", line 22, in test_check\n    check(is_majority)\n  File \"/tmp/tmpgu5gncpv.py\", line 19, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpgu5gncpv.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # Time: O(logn)\n    # Space: O(1)\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw1eeoj9p.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpw1eeoj9p.py\", line 28, in test_check\n    check(is_majority)\n  File \"/tmp/tmpw1eeoj9p.py\", line 23, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzvleonac.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpzvleonac.py\", line 24, in test_check\n    check(is_majority)\n  File \"/tmp/tmpzvleonac.py\", line 21, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpzvleonac.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    return is_majority(arr[mid+1:], n - mid - 1, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxfx5jqe9.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpxfx5jqe9.py\", line 25, in test_check\n    check(is_majority)\n  File \"/tmp/tmpxfx5jqe9.py\", line 20, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if arr[n//2] == x:\n        return True\n    elif arr[n//2] > x:\n        return is_majority(arr[:n//2], n//2, x)\n    else:\n        return is_majority(arr[n//2+1:], n//2, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9x9646c1.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp9x9646c1.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9x9646c1.py\", line 18, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if arr[n // 2] == x:\n        return True\n    return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphtasr9h8.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmphtasr9h8.py\", line 19, in test_check\n    check(is_majority)\n  File \"/tmp/tmphtasr9h8.py\", line 14, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7ltbpg4_.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp7ltbpg4_.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmp7ltbpg4_.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # Time: O(log n)\n    # Space: O(1)\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5ulec9tz.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp5ulec9tz.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp5ulec9tz.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    if n == 2:\n        return arr[0] == x or arr[1] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid:], n - mid, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpruf7x74l.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpruf7x74l.py\", line 28, in test_check\n    check(is_majority)\n  File \"/tmp/tmpruf7x74l.py\", line 23, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n-mid-1, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9xfsfhw1.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp9xfsfhw1.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9xfsfhw1.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # Time: O(log(n))\n    # Space: O(1)\n    # Find the first occurrence of the element\n    first_occurrence = binary_search(arr, 0, n - 1, x)\n\n    # If element is not present in the array\n    if first_occurrence == -1:\n        return False\n\n    # If element is present, check if it is present more than n/2 times\n    if (first_occurrence + n // 2) <= (n - 1) and arr[first_occurrence + n // 2] == x:\n        return True\n\n    return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxz5gz7f6.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmpxz5gz7f6.py\", line 30, in test_check\n    check(is_majority)\n  File \"/tmp/tmpxz5gz7f6.py\", line 24, in check\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n  File \"/tmp/tmpxz5gz7f6.py\", line 10, in is_majority\n    first_occurrence = binary_search(arr, 0, n - 1, x)\nNameError: name 'binary_search' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    elif n == 1:\n        return arr[0] == x\n    else:\n        mid = n // 2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] > x:\n            return is_majority(arr[:mid], mid, x)\n        else:\n            return is_majority(arr[mid+1:], n-mid-1, x)\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0zmto19n.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp0zmto19n.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmp0zmto19n.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi7thbeot.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpi7thbeot.py\", line 24, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi7thbeot.py\", line 21, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi7thbeot.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7ltbpg4_.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp7ltbpg4_.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmp7ltbpg4_.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if x == arr[n // 2]:\n        return True\n    elif x < arr[n // 2]:\n        return is_majority(arr[:n // 2], n // 2, x)\n    else:\n        return is_majority(arr[n // 2 + 1:], n // 2, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpky22xvop.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpky22xvop.py\", line 24, in test_check\n    check(is_majority)\n  File \"/tmp/tmpky22xvop.py\", line 19, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if arr[n // 2] == x:\n        return True\n    elif arr[n // 2] > x:\n        return is_majority(arr[:n // 2], n // 2, x)\n    else:\n        return is_majority(arr[n // 2 + 1:], n // 2, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0bzmmo9z.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmp0bzmmo9z.py\", line 24, in test_check\n    check(is_majority)\n  File \"/tmp/tmp0bzmmo9z.py\", line 19, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n-mid-1, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9xfsfhw1.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp9xfsfhw1.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9xfsfhw1.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n-mid-1, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9xfsfhw1.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp9xfsfhw1.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9xfsfhw1.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpl9c5zo_3.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpl9c5zo_3.py\", line 28, in test_check\n    check(is_majority)\n  File \"/tmp/tmpl9c5zo_3.py\", line 23, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # Write your code here.\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvqf_t88z.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpvqf_t88z.py\", line 24, in test_check\n    check(is_majority)\n  File \"/tmp/tmpvqf_t88z.py\", line 21, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpvqf_t88z.py\", line 10, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7ltbpg4_.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp7ltbpg4_.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmp7ltbpg4_.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # O(n) time | O(1) space\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n / 2\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # Time: O(log n)\n    # Space: O(1)\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            if (mid == 0 or arr[mid - 1] != x) and (mid == n - 1 or arr[mid + 1] != x):\n                return True\n            elif mid > 0 and arr[mid - 1] == x:\n                right = mid - 1\n            else:\n                left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoynn9rkp.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpoynn9rkp.py\", line 33, in test_check\n    check(is_majority)\n  File \"/tmp/tmpoynn9rkp.py\", line 27, in check\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # Write your code here.\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            if (mid + n // 2) < n and arr[mid + n // 2] == x:\n                return True\n            else:\n                return False\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6dk18div.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmp6dk18div.py\", line 31, in test_check\n    check(is_majority)\n  File \"/tmp/tmp6dk18div.py\", line 25, in check\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] < x:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n    else:\n        return is_majority(arr[:mid], mid, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqro_xmw7.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpqro_xmw7.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmpqro_xmw7.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    return arr.count(x) > n // 2\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi7thbeot.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpi7thbeot.py\", line 24, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi7thbeot.py\", line 21, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi7thbeot.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp14fc9fxd.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmp14fc9fxd.py\", line 21, in test_check\n    check(is_majority)\n  File \"/tmp/tmp14fc9fxd.py\", line 18, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmp14fc9fxd.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n\n    if arr[n // 2] == x:\n        return True\n\n    if arr[n // 2] > x:\n        return is_majority(arr[:n // 2], n // 2, x)\n    else:\n        return is_majority(arr[n // 2 + 1:], n // 2, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpwsxy7rac.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpwsxy7rac.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmpwsxy7rac.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # O(n) time | O(1) space\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpe7rek7zh.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpe7rek7zh.py\", line 22, in test_check\n    check(is_majority)\n  File \"/tmp/tmpe7rek7zh.py\", line 19, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpe7rek7zh.py\", line 10, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2j1fpy20.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp2j1fpy20.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmp2j1fpy20.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmp2j1fpy20.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # TODO: Write your code here\n    pass\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcc4h5sa8.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmpcc4h5sa8.py\", line 18, in test_check\n    check(is_majority)\n  File \"/tmp/tmpcc4h5sa8.py\", line 12, in check\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] < x:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n    else:\n        return is_majority(arr[:mid], mid, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqro_xmw7.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpqro_xmw7.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmpqro_xmw7.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    return arr.count(x) > n // 2\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    return arr.count(x) > n / 2\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # Time: O(log n)\n    # Space: O(1)\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            if mid + n // 2 < n and arr[mid + n // 2] == x:\n                return True\n            elif mid - n // 2 >= 0 and arr[mid - n // 2] == x:\n                return True\n            else:\n                return False\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return False\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmps_wq6jeh.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmps_wq6jeh.py\", line 32, in test_check\n    check(is_majority)\n  File \"/tmp/tmps_wq6jeh.py\", line 26, in check\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # O(n) time | O(1) space\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n/2\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n\n    if arr[n // 2] == x:\n        return True\n\n    if arr[n // 2] > x:\n        return is_majority(arr[:n // 2], n // 2, x)\n\n    if arr[n // 2] < x:\n        return is_majority(arr[n // 2 + 1:], n // 2, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9l6hixlw.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9l6hixlw.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9l6hixlw.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if arr[n//2] == x:\n        return True\n    elif arr[n//2] > x:\n        return is_majority(arr[:n//2], n//2, x)\n    else:\n        return is_majority(arr[n//2+1:], n//2, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9x9646c1.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp9x9646c1.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9x9646c1.py\", line 18, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkxg4xi30.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpkxg4xi30.py\", line 25, in test_check\n    check(is_majority)\n  File \"/tmp/tmpkxg4xi30.py\", line 20, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # Time Complexity: O(log(n))\n    # Space Complexity: O(1)\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            if mid + n // 2 < n and arr[mid + n // 2] == x:\n                return True\n            elif mid - n // 2 >= 0 and arr[mid - n // 2] == x:\n                return True\n            else:\n                return False\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpagkffp76.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpagkffp76.py\", line 32, in test_check\n    check(is_majority)\n  File \"/tmp/tmpagkffp76.py\", line 26, in check\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2ekqvley.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp2ekqvley.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmp2ekqvley.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmp2ekqvley.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if arr[n//2] == x:\n        return True\n    elif arr[n//2] > x:\n        return is_majority(arr[:n//2], n//2, x)\n    else:\n        return is_majority(arr[n//2+1:], n//2, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9x9646c1.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp9x9646c1.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9x9646c1.py\", line 18, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] < x:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n    return is_majority(arr[:mid], mid, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpylcze0ni.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpylcze0ni.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmpylcze0ni.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgt6thw_d.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpgt6thw_d.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmpgt6thw_d.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7ltbpg4_.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp7ltbpg4_.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmp7ltbpg4_.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmplj62lli3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmplj62lli3.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmplj62lli3.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    if arr[n//2] == x:\n        return True\n    if arr[n//2] > x:\n        return is_majority(arr[:n//2], n//2, x)\n    if arr[n//2] < x:\n        return is_majority(arr[n//2+1:], n//2, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmppzcpr8_s.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmppzcpr8_s.py\", line 25, in test_check\n    check(is_majority)\n  File \"/tmp/tmppzcpr8_s.py\", line 20, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    return is_majority(arr[mid + 1:], n - mid - 1, x)\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvxylo8r3.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpvxylo8r3.py\", line 24, in test_check\n    check(is_majority)\n  File \"/tmp/tmpvxylo8r3.py\", line 19, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    # O(n) time | O(1) space\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpywxq34ho.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpywxq34ho.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmpywxq34ho.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    return is_majority(arr[mid + 1:], n - mid - 1, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnqb5v88h.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpnqb5v88h.py\", line 25, in test_check\n    check(is_majority)\n  File \"/tmp/tmpnqb5v88h.py\", line 20, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if len(arr) == 0:\n        return False\n    if len(arr) == 1:\n        return arr[0] == x\n    mid = len(arr) // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], n, x)\n    else:\n        return is_majority(arr[mid+1:], n, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptou6h9z5.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmptou6h9z5.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmptou6h9z5.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgu5gncpv.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpgu5gncpv.py\", line 22, in test_check\n    check(is_majority)\n  File \"/tmp/tmpgu5gncpv.py\", line 19, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpgu5gncpv.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9c1fg_p3.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp9c1fg_p3.py\", line 27, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9c1fg_p3.py\", line 22, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkxg4xi30.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpkxg4xi30.py\", line 25, in test_check\n    check(is_majority)\n  File \"/tmp/tmpkxg4xi30.py\", line 20, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    return arr.count(x) > n/2\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    return arr.count(x) > n // 2\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy3hlzodz.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpy3hlzodz.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmpy3hlzodz.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgu5gncpv.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpgu5gncpv.py\", line 22, in test_check\n    check(is_majority)\n  File \"/tmp/tmpgu5gncpv.py\", line 19, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpgu5gncpv.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n/2\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphb41af8f.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmphb41af8f.py\", line 21, in test_check\n    check(is_majority)\n  File \"/tmp/tmphb41af8f.py\", line 18, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmphb41af8f.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n\n    if n == 1:\n        return arr[0] == x\n\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n\n    if arr[mid] < x:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n    else:\n        return is_majority(arr[:mid], mid, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkk1ud08t.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmpkk1ud08t.py\", line 30, in test_check\n    check(is_majority)\n  File \"/tmp/tmpkk1ud08t.py\", line 25, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi7thbeot.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpi7thbeot.py\", line 24, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi7thbeot.py\", line 21, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi7thbeot.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi7thbeot.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpi7thbeot.py\", line 24, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi7thbeot.py\", line 21, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi7thbeot.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] < x:\n        return is_majority(arr[mid+1:], n-mid-1, x)\n    else:\n        return is_majority(arr[:mid], mid, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgv0swqsj.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpgv0swqsj.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmpgv0swqsj.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n-mid-1, x)\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9xfsfhw1.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp9xfsfhw1.py\", line 26, in test_check\n    check(is_majority)\n  File \"/tmp/tmp9xfsfhw1.py\", line 21, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n/2\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptus53ps5.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmptus53ps5.py\", line 20, in test_check\n    check(is_majority)\n  File \"/tmp/tmptus53ps5.py\", line 17, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmptus53ps5.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    return arr.count(x) > n // 2\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    if len(arr) == 0:\n        return False\n\n    if len(arr) == 1:\n        return arr[0] == x\n\n    mid = len(arr) // 2\n    if arr[mid] == x:\n        return True\n\n    if arr[mid] > x:\n        return is_majority(arr[:mid], n, x)\n    else:\n        return is_majority(arr[mid + 1:], n, x)\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqnm2o3kk.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmpqnm2o3kk.py\", line 30, in test_check\n    check(is_majority)\n  File \"/tmp/tmpqnm2o3kk.py\", line 25, in check\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi7thbeot.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpi7thbeot.py\", line 24, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi7thbeot.py\", line 21, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi7thbeot.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi37iv2yx.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpi37iv2yx.py\", line 23, in test_check\n    check(is_majority)\n  File \"/tmp/tmpi37iv2yx.py\", line 20, in check\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n  File \"/tmp/tmpi37iv2yx.py\", line 9, in is_majority\n    if arr[i] == x:\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}