{
  "name": "mbpp_391_convert_list_dictionary",
  "language": "py",
  "prompt": "from typing import List, Dict\n\ndef convert_list_dictionary(l1: List[str], l2: List[str], l3: List[int]) -> List[Dict[str, Dict[str, int]]]:\n    \"\"\"\n\tWrite a function to convert more than one list to nested dictionary.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_391_convert_list_dictionary.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate(['S001', 'S002', 'S003', 'S004'], ['Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'], [85, 98, 89, 92]) == [{ 'S001': { 'Adina Park': 85 } }, { 'S002': { 'Leyton Marsh': 98 } }, { 'S003': { 'Duncan Boyle': 89 } }, { 'S004': { 'Saim Richards': 92 } }]\n    assert candidate(['abc', 'def', 'ghi', 'jkl'], ['python', 'program', 'language', 'programs'], [100, 200, 300, 400]) == [{ 'abc': { 'python': 100 } }, { 'def': { 'program': 200 } }, { 'ghi': { 'language': 300 } }, { 'jkl': { 'programs': 400 } }]\n    assert candidate(['A1', 'A2', 'A3', 'A4'], ['java', 'C', 'C++', 'DBMS'], [10, 20, 30, 40]) == [{ 'A1': { 'java': 10 } }, { 'A2': { 'C': 20 } }, { 'A3': { 'C++': 30 } }, { 'A4': { 'DBMS': 40 } }]\n\ndef test_check():\n    check(convert_list_dictionary)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return [{l1[i]: {l2[i]: l3[i]}} for i in range(len(l1))]\n\nprint(convert_list_dictionary(['a', 'b', 'c'], ['d', 'e', 'f'], [1, 2, 3]))\nprint(convert_list_dictionary(['a', 'b', 'c'], ['d', 'e', 'f'], [1, 2, 3, 4]))\nprint(convert_list_dictionary(['a', 'b', 'c'], ['d', 'e', 'f'], [1, 2]))\nprint(convert_list_dictionary(['a', 'b', 'c'], ['d', 'e', 'f'], [1, 2, 3, 4, 5]))",
    "    return [{l1[i]: {l2[i]: l3[i]}} for i in range(len(l1))]\n\nprint(convert_list_dictionary([\"a\", \"b\", \"c\"], [\"A\", \"B\", \"C\"], [1, 2, 3]))",
    "    return [{l1[i]: {l2[i]: l3[i]}} for i in range(len(l1))]\n",
    "    return [{l1[i]: {l2[i]: l3[i]}} for i in range(len(l1))]\n\nprint(convert_list_dictionary([\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [1, 2, 3]))",
    "    return [{l1[i]: {l2[i]: l3[i]}} for i in range(len(l1))]",
    "    return [{l1[i]: {l2[i]: l3[i]}} for i in range(len(l1))]\n",
    "    return [{l1[i]: {l2[i]: l3[i]}} for i in range(len(l1))]",
    "    return [{l1[i]: {l2[i]: l3[i]}} for i in range(len(l1))]\n\nprint(convert_list_dictionary([\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [1, 2, 3]))",
    "    return [{l1[i]: {l2[i]: l3[i]}} for i in range(len(l1))]\n\nprint(convert_list_dictionary(['a', 'b', 'c'], ['d', 'e', 'f'], [1, 2, 3]))",
    "    return [{l1[i]: {l2[i]: l3[i]}} for i in range(len(l1))]\n\n",
    "    return [{l1[i]: {l2[i]: l3[i]}} for i in range(len(l1))]\n",
    "    return [{l1[i]: {l2[i]: l3[i]}} for i in range(len(l1))]\n\nprint(convert_list_dictionary([\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [1, 2, 3]))",
    "    return [{l1[i]: {l2[i]: l3[i]}} for i in range(len(l1))]\n\n",
    "    return [{l1[i]: {l2[i]: l3[i]}} for i in range(len(l1))]\n\nprint(convert_list_dictionary(['a', 'b', 'c'], ['d', 'e', 'f'], [1, 2, 3]))",
    "    return [{l1[i]: {l2[i]: l3[i]}} for i in range(len(l1))]\n\n",
    "    return [{l1[i]: {l2[i]: l3[i]}} for i in range(len(l1))]",
    "    return [{l1[i]: {l2[i]: l3[i]}} for i in range(len(l1))]\n\nprint(convert_list_dictionary(['a', 'b', 'c'], ['A', 'B', 'C'], [1, 2, 3]))\n",
    "    return [{l1[i]: {l2[i]: l3[i]}} for i in range(len(l1))]\n\nprint(convert_list_dictionary([\"a\", \"b\", \"c\"], [\"A\", \"B\", \"C\"], [1, 2, 3]))\n",
    "    return [{l1[i]: {l2[i]: l3[i]}} for i in range(len(l1))]\n\nprint(convert_list_dictionary(['a', 'b', 'c'], ['d', 'e', 'f'], [1, 2, 3]))\n",
    "    return [{l1[i]: {l2[i]: l3[i]}} for i in range(len(l1))]\n\nprint(convert_list_dictionary(['a', 'b', 'c'], ['d', 'e', 'f'], [1, 2, 3]))"
  ]
}