{
  "name": "mbpp_11_remove_Occ",
  "language": "py",
  "prompt": "def remove_Occ(s: str, ch: str) -> str:\n    \"\"\"\n\tWrite a python function to remove first and last occurrence of a given character from the string.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_11_remove_Occ.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate('hello', 'l') == 'heo'\n    assert candidate('abcda', 'a') == 'bcd'\n    assert candidate('PHP', 'P') == 'H'\n\ndef test_check():\n    check(remove_Occ)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, '', 1)\n\n",
    "    return s.replace(ch, '', 1).replace(ch, '', 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    elif s.count(ch) == 1:\n        return s.replace(ch, \"\")\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if ch in s:\n        s = s.replace(ch, \"\", 1)\n        s = s[::-1].replace(ch, \"\", 1)[::-1]\n    return s\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if s[0] == ch:\n        s = s[1:]\n    if s[-1] == ch:\n        s = s[:-1]\n    return s\n\n",
    "    if s.find(ch) == -1:\n        return s\n    else:\n        return s[:s.find(ch)] + s[s.find(ch) + 1:] + s[:s.rfind(ch)] + s[s.rfind(ch) + 1:]\n\n",
    "    if s.find(ch) == -1:\n        return s\n    else:\n        return s[:s.find(ch)] + s[s.find(ch) + 1:s.rfind(ch)] + s[s.rfind(ch) + 1:]\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    elif s.count(ch) == 1:\n        return s.replace(ch, \"\")\n    else:\n        return s.replace(ch, \"\", 1) + s[::-1].replace(ch, \"\", 1)[::-1]\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    elif s.count(ch) == 1:\n        return s.replace(ch, \"\")\n    else:\n        return s.replace(ch, \"\", 1) + s[::-1].replace(ch, \"\", 1)[::-1]\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    s = s.replace(ch, \"\")\n    return s\n\n",
    "    if s.count(ch) == 0:\n        return s\n    elif s.count(ch) == 1:\n        return s.replace(ch, \"\")\n    else:\n        return s.replace(ch, \"\", 1) + s[::-1].replace(ch, \"\", 1)[::-1]\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    elif s.count(ch) == 1:\n        return s.replace(ch, \"\")\n    else:\n        return s.replace(ch, \"\", 1) + s[::-1].replace(ch, \"\", 1)[::-1]\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    elif s.count(ch) == 1:\n        return s.replace(ch, \"\")\n    else:\n        return s.replace(ch, \"\", 1) + s[::-1].replace(ch, \"\", 1)[::-1]\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if ch in s:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n    else:\n        return s\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if ch in s:\n        s = s.replace(ch, \"\", 1)\n        s = s[::-1].replace(ch, \"\", 1)[::-1]\n    return s\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    elif s.count(ch) == 1:\n        return s.replace(ch, \"\")\n    else:\n        return s.replace(ch, \"\", 1) + s[::-1].replace(ch, \"\", 1)[::-1]\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if s.find(ch) == -1:\n        return s\n    else:\n        return s[:s.find(ch)] + s[s.find(ch) + 1:]\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if s.find(ch) == -1:\n        return s\n    else:\n        return s[:s.find(ch)] + s[s.find(ch) + 1:]\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if s.find(ch) == -1:\n        return s\n    else:\n        return s[:s.find(ch)] + s[s.find(ch) + 1:]\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n\n",
    "    if ch in s:\n        s = s.replace(ch, \"\", 1)\n        s = s[::-1].replace(ch, \"\", 1)[::-1]\n    return s\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n\n",
    "    if s.count(ch) > 0:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n    else:\n        return s\n\n",
    "    if ch in s:\n        return s.replace(ch, \"\", 1)\n    else:\n        return s\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if ch in s:\n        s = s.replace(ch, \"\", 1)\n        s = s[::-1].replace(ch, \"\", 1)[::-1]\n    return s\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", -1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s[:s.find(ch)] + s[s.find(ch) + 1:s.rfind(ch)] + s[s.rfind(ch) + 1:]\n\n",
    "    if ch in s:\n        s = s.replace(ch, \"\", 1)\n        s = s[::-1].replace(ch, \"\", 1)[::-1]\n    return s\n\n",
    "    if ch not in s:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    elif s.count(ch) == 1:\n        return s.replace(ch, \"\")\n    else:\n        return s.replace(ch, \"\", 1) + s[::-1].replace(ch, \"\", 1)[::-1]\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    elif s.count(ch) == 1:\n        return s.replace(ch, \"\")\n    else:\n        return s.replace(ch, \"\", 1) + s[::-1].replace(ch, \"\", 1)[::-1]\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n\n",
    "    if s.find(ch) != -1:\n        return s[:s.find(ch)] + s[s.find(ch) + 1:]\n    else:\n        return s\n\n",
    "    if s.count(ch) == 0:\n        return s\n    elif s.count(ch) == 1:\n        return s.replace(ch, \"\")\n    else:\n        return s.replace(ch, \"\", 1) + s[::-1].replace(ch, \"\", 1)[::-1]\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n\n",
    "    if s.count(ch) < 2:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if s.find(ch) == -1:\n        return s\n    else:\n        return s[:s.find(ch)] + s[s.find(ch) + 1:]\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n\n",
    "    if ch in s:\n        s = s.replace(ch, \"\")\n    return s\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n\n",
    "    if s.find(ch) == -1:\n        return s\n    else:\n        return s[:s.find(ch)] + s[s.find(ch) + 1 : s.rfind(ch)] + s[s.rfind(ch) + 1 :]\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    elif s.count(ch) == 1:\n        return s.replace(ch, \"\")\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if len(s) == 0:\n        return s\n    elif s[0] == ch:\n        return remove_Occ(s[1:], ch)\n    elif s[-1] == ch:\n        return remove_Occ(s[:-1], ch)\n    else:\n        return s[0] + remove_Occ(s[1:-1], ch) + s[-1]\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    s = s.replace(ch, \"\", 1)\n    s = s[::-1].replace(ch, \"\", 1)[::-1]\n    return s\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, '', 1).replace(ch, '', s.count(ch) - 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    elif s.count(ch) == 1:\n        return s.replace(ch, \"\")\n    else:\n        return s.replace(ch, \"\", 1) + s[::-1].replace(ch, \"\", 1)[::-1]\n\n",
    "    if s.count(ch) == 0:\n        return s\n    elif s.count(ch) == 1:\n        return s.replace(ch, \"\")\n    else:\n        return s.replace(ch, \"\", 1) + s[::-1].replace(ch, \"\", 1)[::-1]\n\n",
    "    if s.find(ch) == -1:\n        return s\n    else:\n        return s.replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if s[0] == ch:\n        s = s[1:]\n    if s[-1] == ch:\n        s = s[:-1]\n    return s\n\n",
    "    if ch in s:\n        s = s.replace(ch, \"\", 1)\n        s = s[::-1].replace(ch, \"\", 1)[::-1]\n    return s\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    elif s.count(ch) == 1:\n        return s.replace(ch, \"\")\n    else:\n        return s.replace(ch, \"\", 1) + s[::-1].replace(ch, \"\", 1)[::-1]\n\n",
    "    if s.count(ch) == 0:\n        return s\n    elif s.count(ch) == 1:\n        return s.replace(ch, \"\")\n    else:\n        return s.replace(ch, \"\", 1) + s[::-1].replace(ch, \"\", 1)[::-1]\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if ch in s:\n        s = s.replace(ch, \"\")\n    return s\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if s[0] == ch:\n        s = s[1:]\n    if s[-1] == ch:\n        s = s[:-1]\n    return s\n\n",
    "    if s.count(ch) == 0:\n        return s\n    elif s.count(ch) == 1:\n        return s.replace(ch, \"\")\n    else:\n        return s.replace(ch, \"\", 1) + s[::-1].replace(ch, \"\", 1)[::-1]\n\n",
    "    if s.find(ch) == -1:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        first_occ = s.find(ch)\n        last_occ = s.rfind(ch)\n        return s[:first_occ] + s[first_occ + 1:last_occ] + s[last_occ + 1:]\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n\n",
    "    if ch in s:\n        s = s.replace(ch, \"\", 1)\n        s = s[::-1].replace(ch, \"\", 1)[::-1]\n    return s\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    elif s.count(ch) == 1:\n        return s.replace(ch, \"\")\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if ch in s:\n        s = s.replace(ch, \"\", 1)\n        s = s[::-1].replace(ch, \"\", 1)[::-1]\n    return s\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    elif s.count(ch) == 1:\n        return s.replace(ch, \"\")\n    else:\n        return s.replace(ch, \"\", 1) + s[::-1].replace(ch, \"\", 1)[::-1]\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n\n",
    "    if s.find(ch) == -1:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    elif s.count(ch) == 1:\n        return s.replace(ch, \"\")\n    else:\n        return s.replace(ch, \"\", 1) + s[::-1].replace(ch, \"\", 1)[::-1]\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if ch in s:\n        s = s.replace(ch, \"\", 1)\n        s = s[::-1].replace(ch, \"\", 1)[::-1]\n    return s\n\n",
    "    if ch in s:\n        return s.replace(ch, \"\", 1)\n    else:\n        return s\n\n",
    "    if s.count(ch) == 0:\n        return s\n    elif s.count(ch) == 1:\n        return s.replace(ch, \"\")\n    else:\n        return s.replace(ch, \"\", 1) + s[::-1].replace(ch, \"\", 1)[::-1]\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1)\n\n",
    "    if s.find(ch) == -1:\n        return s\n    else:\n        return s[:s.find(ch)] + s[s.find(ch) + 1:]\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    elif s.count(ch) == 1:\n        return s.replace(ch, \"\")\n    else:\n        return s.replace(ch, \"\", 1) + s[::-1].replace(ch, \"\", 1)[::-1]\n\n",
    "    if s.count(ch) == 0:\n        return s\n    elif s.count(ch) == 1:\n        return s.replace(ch, \"\")\n    else:\n        return s.replace(ch, \"\", 1) + s[::-1].replace(ch, \"\", 1)[::-1]\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if s[0] == ch:\n        s = s[1:]\n    if s[-1] == ch:\n        s = s[:-1]\n    return s\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if s[0] == ch:\n        s = s[1:]\n    if s[-1] == ch:\n        s = s[:-1]\n    return s\n\n",
    "    if s.count(ch) == 0:\n        return s\n    elif s.count(ch) == 1:\n        return s.replace(ch, \"\")\n    else:\n        return s.replace(ch, \"\", 1) + s[::-1].replace(ch, \"\", 1)[::-1]\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if s[0] == ch:\n        s = s[1:]\n    if s[-1] == ch:\n        s = s[:-1]\n    return s\n\n",
    "    if s.count(ch) == 0:\n        return s\n    elif s.count(ch) == 1:\n        return s.replace(ch, \"\")\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n\n",
    "    return s.replace(ch, \"\", 1).replace(ch, \"\", 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n\n",
    "    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, \"\", 1).replace(ch, \"\", s.count(ch) - 1)\n\n"
  ]
}