{
  "name": "mbpp_292_find",
  "language": "py",
  "prompt": "def find(n: int, m: int) -> int:\n    \"\"\"\n\tWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_292_find.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate(10, 3) == 3\n    assert candidate(4, 2) == 2\n    assert candidate(20, 5) == 4\n\ndef test_check():\n    check(find)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n",
    "    return n // m\n\n"
  ]
}