{
  "name": "mbpp_399_bitwise_xor",
  "language": "py",
  "prompt": "from typing import Tuple\n\ndef bitwise_xor(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function to perform the mathematical bitwise xor operation across the given tuples.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_399_bitwise_xor.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n    assert candidate((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\n    assert candidate((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)\n\ndef test_check():\n    check(bitwise_xor)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return tuple(map(operator.xor, test_tup1, test_tup2))\n\nprint(bitwise_xor((1, 2, 3), (4, 5, 6)))",
    "    return tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))\n\n",
    "    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n",
    "    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n\nprint(bitwise_xor((1, 2, 3, 4), (5, 6, 7, 8)))",
    "    return tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))\n\nprint(bitwise_xor((1, 2, 3), (4, 5, 6)))",
    "    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n\n",
    "    return tuple([a ^ b for a, b in zip(test_tup1, test_tup2)])\n",
    "    return tuple(map(operator.xor, test_tup1, test_tup2))\n",
    "    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n\nprint(bitwise_xor((1, 2, 3), (4, 5, 6)))",
    "    return tuple(map(operator.xor, test_tup1, test_tup2))\n\n",
    "    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n\n",
    "    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n\n\nprint(bitwise_xor((1, 2, 3), (4, 5, 6)))",
    "    return tuple(map(operator.xor, test_tup1, test_tup2))\n\ntest_tup1 = (1, 2, 3, 4, 5)\ntest_tup2 = (6, 7, 8, 9, 10)\nprint(bitwise_xor(test_tup1, test_tup2))",
    "    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n\n",
    "    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n\nprint(bitwise_xor((1, 2, 3, 4), (4, 3, 2, 1)))\nprint(bitwise_xor((1, 2, 3, 4), (5, 6, 7, 8)))\nprint(bitwise_xor((1, 2, 3, 4), (1, 2, 3, 4)))",
    "    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n\n",
    "    return tuple(i ^ j for i, j in zip(test_tup1, test_tup2))\n",
    "    return tuple(map(operator.xor, test_tup1, test_tup2))\n\n",
    "    return tuple([x ^ y for x, y in zip(test_tup1, test_tup2)])\n\n",
    "    return tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))\n\n"
  ]
}