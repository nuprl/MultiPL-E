{
  "name": "mbpp_472_check_Consecutive",
  "language": "py",
  "prompt": "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_472_check_Consecutive.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 2, 3, 5, 6]) == False\n    assert candidate([1, 2, 1]) == False\n\ndef test_check():\n    check(check_Consecutive)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return sorted(l) == list(range(min(l), max(l)+1))\n",
    "    return sorted(l) == list(range(min(l), max(l)+1))\n",
    "    return sorted(l) == list(range(min(l), max(l)+1))\n",
    "    return sorted(l) == list(range(l[0], l[-1] + 1))\n",
    "    return sorted(l) == list(range(min(l), max(l)+1))\n",
    "    return sorted(l) == list(range(min(l), max(l)+1))\n\nprint(check_Consecutive([1,2,3,4,5]))\nprint(check_Consecutive([1,2,3,5,6]))",
    "    l.sort()\n    for i in range(len(l) - 1):\n        if l[i] + 1 != l[i + 1]:\n            return False\n    return True\n\n\nprint(check_Consecutive([1, 2, 3, 4, 5]))\nprint(check_Consecutive([1, 2, 3, 5, 6]))",
    "    return sorted(l) == list(range(min(l), max(l)+1))\n\nprint(check_Consecutive([1,2,3,4,5]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101]))\nprint(check_Consecutive([1,2,3,4,",
    "    return sorted(l) == list(range(min(l), max(l)+1))\n",
    "    return sorted(l) == list(range(min(l), max(l)+1))\n\nprint(check_Consecutive([1,2,3,4,5,6]))\nprint(check_Consecutive([1,2,3,4,5,7]))",
    "    return sorted(l) == list(range(min(l), max(l)+1))\n",
    "    return sorted(l) == list(range(min(l), max(l)+1))\n",
    "    return sorted(l) == list(range(min(l), max(l)+1))\n",
    "    return sorted(l) == list(range(min(l), max(l)+1))\n",
    "    return sorted(l) == list(range(min(l), max(l)+1))\n",
    "    return sorted(l) == list(range(min(l), max(l)+1))\n",
    "    return sorted(l) == list(range(min(l), max(l)+1))\n",
    "    return sorted(l) == list(range(min(l), max(l)+1))\n",
    "    return sorted(l) == list(range(min(l), max(l) + 1))\n",
    "    return sorted(l) == list(range(min(l), max(l)+1))\n"
  ]
}