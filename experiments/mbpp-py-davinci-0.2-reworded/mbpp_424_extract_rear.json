{
  "name": "mbpp_424_extract_rear",
  "language": "py",
  "prompt": "from typing import Tuple, List\n\ndef extract_rear(test_tuple: Tuple[str]) -> List[str]:\n    \"\"\"\n\tWrite a function to extract only the rear index element of each string in the given tuple.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_424_extract_rear.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate(('Mers', 'for', 'Vers')) == ['s', 'r', 's']\n    assert candidate(('Avenge', 'for', 'People')) == ['e', 'r', 'e']\n    assert candidate(('Gotta', 'get', 'go')) == ['a', 't', 'o']\n\ndef test_check():\n    check(extract_rear)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return [test_tuple[i][-1] for i in range(len(test_tuple))]\n",
    "    return [test_tuple[i][-1] for i in range(len(test_tuple))]\n",
    "    return [test_tuple[i][-1] for i in range(len(test_tuple))]\n",
    "    return [test_tuple[i][-1] for i in range(len(test_tuple))]\n",
    "    return [test_tuple[i][-1] for i in range(len(test_tuple))]\n",
    "    return [test_tuple[i][-1] for i in range(len(test_tuple))]\n",
    "    return [test_tuple[i][-1] for i in range(len(test_tuple))]\n",
    "    return [test_tuple[i][-1] for i in range(len(test_tuple))]\n",
    "    return [test_tuple[i][-1] for i in range(len(test_tuple))]\n\nprint(extract_rear((\"abc\", \"def\", \"ghi\")))",
    "    return [test_tuple[i][-1] for i in range(len(test_tuple))]\n",
    "    return [test_tuple[i][-1] for i in range(len(test_tuple))]\n\nprint(extract_rear(('abc', 'def', 'ghi')))\nprint(extract_rear(('abc', 'def', 'ghi', 'jkl')))",
    "    return [test_tuple[i][-1] for i in range(len(test_tuple))]\n",
    "    return [x[-1] for x in test_tuple]\n",
    "    return [test_tuple[i][-1] for i in range(len(test_tuple))]\n",
    "    return [x[-1] for x in test_tuple]\n",
    "    return [test_tuple[i][-1] for i in range(len(test_tuple))]\n",
    "    return [test_tuple[i][-1] for i in range(len(test_tuple))]",
    "    return [x[-1] for x in test_tuple]\n",
    "    return [test_tuple[i][-1] for i in range(len(test_tuple))]\n",
    "    return [test_tuple[i][-1] for i in range(len(test_tuple))]\n"
  ]
}