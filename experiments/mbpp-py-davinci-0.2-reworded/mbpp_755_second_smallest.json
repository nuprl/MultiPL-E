{
  "name": "mbpp_755_second_smallest",
  "language": "py",
  "prompt": "from typing import Any, Optional\n\ndef second_smallest(numbers: Any) -> Optional[float]:\n    \"\"\"\n\tWrite a function to find the second smallest number in a list.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_755_second_smallest.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate([1, 2, -8, -2, 0, -2]) == -2\n    assert candidate([1, 1, -0.5, 0, 2, -2, -2]) == -0.5\n    assert candidate([2, 2]) == None\n    assert candidate([2, 2, 2]) == None\n\ndef test_check():\n    check(second_smallest)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    if len(numbers) < 2:\n        return None\n    if len(numbers) == 2:\n        return min(numbers)\n    else:\n        numbers.remove(min(numbers))\n        return min(numbers)\n",
    "    if len(numbers) < 2:\n        return None\n    if numbers[0] < numbers[1]:\n        first = numbers[0]\n        second = numbers[1]\n    else:\n        first = numbers[1]\n        second = numbers[0]\n    for number in numbers[2:]:\n        if number < first:\n            second = first\n            first = number\n        elif number < second:\n            second = number\n    return second\n",
    "    if len(numbers) < 2:\n        return None\n    if numbers[0] < numbers[1]:\n        smallest = numbers[0]\n        second_smallest = numbers[1]\n    else:\n        smallest = numbers[1]\n        second_smallest = numbers[0]\n    for num in numbers[2:]:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest:\n            second_smallest = num\n    return second_smallest\n",
    "    if len(numbers) < 2:\n        return None\n\n    m1, m2 = float('inf'), float('inf')\n    for x in numbers:\n        if x <= m1:\n            m1, m2 = x, m1\n        elif x < m2:\n            m2 = x\n    return m2\n",
    "    if len(numbers) < 2:\n        return None\n    if len(numbers) == 2:\n        return numbers[1]\n    else:\n        numbers.sort()\n        return numbers[1]\n",
    "    if len(numbers) < 2:\n        return None\n    if numbers[0] < numbers[1]:\n        smallest = numbers[0]\n        second_smallest = numbers[1]\n    else:\n        smallest = numbers[1]\n        second_smallest = numbers[0]\n    for i in range(2, len(numbers)):\n        if numbers[i] < smallest:\n            second_smallest = smallest\n            smallest = numbers[i]\n        elif numbers[i] < second_smallest:\n            second_smallest = numbers[i]\n    return second_smallest\n\n",
    "    if len(numbers) < 2:\n        return None\n    if len(numbers) == 2:\n        return numbers[1]\n    else:\n        numbers.sort()\n        return numbers[1]",
    "    if len(numbers) < 2:\n        return None\n    if len(numbers) == 2:\n        return min(numbers)\n    else:\n        numbers.remove(min(numbers))\n        return min(numbers)",
    "    if len(numbers) < 2:\n        return None\n    m1, m2 = float('inf'), float('inf')\n    for x in numbers:\n        if x <= m1:\n            m1, m2 = x, m1\n        elif x < m2:\n            m2 = x\n    return m2",
    "    if len(numbers) < 2:\n        return None\n    m1, m2 = float('inf'), float('inf')\n    for x in numbers:\n        if x <= m1:\n            m1, m2 = x, m1\n        elif x < m2:\n            m2 = x\n    return m2",
    "    if not isinstance(numbers, list):\n        return None\n    if len(numbers) < 2:\n        return None\n    if not all(isinstance(x, (int, float)) for x in numbers):\n        return None\n    numbers.sort()\n    return numbers[1]",
    "    if len(numbers) < 2:\n        return None\n    else:\n        numbers.sort()\n        return numbers[1]\n\n",
    "    if not numbers:\n        return None\n    if len(numbers) < 2:\n        return None\n    first = second = float('inf')\n    for num in numbers:\n        if num <= first:\n            first, second = num, first\n        elif num < second:\n            second = num\n    return second\n",
    "    if len(numbers) < 2:\n        return None\n    if len(numbers) == 2:\n        return numbers[1]\n    else:\n        numbers.sort()\n        return numbers[1]\n",
    "    if len(numbers) < 2:\n        return None\n    if numbers[0] < numbers[1]:\n        smallest = numbers[0]\n        second_smallest = numbers[1]\n    else:\n        smallest = numbers[1]\n        second_smallest = numbers[0]\n    for number in numbers[2:]:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest:\n            second_smallest = number\n    return second_smallest",
    "    if len(numbers) < 2:\n        return None\n    m1, m2 = float('inf'), float('inf')\n    for x in numbers:\n        if x <= m1:\n            m1, m2 = x, m1\n        elif x < m2:\n            m2 = x\n    return m2\n",
    "    if len(numbers) < 2:\n        return None\n    m1, m2 = float('inf'), float('inf')\n    for x in numbers:\n        if x <= m1:\n            m1, m2 = x, m1\n        elif x < m2:\n            m2 = x\n    return m2\n\nprint(second_smallest([1, 2, -8, -2, 0]))\nprint(second_smallest([1, 1, 0, 0, 2, -2, -2]))\nprint(second_smallest([1, 1, 1, 0, 0, 0, 2, -2, -2]))\nprint(second_smallest([2, 2]))\nprint(second_smallest([2]))\nprint(second_smallest([]))",
    "    if len(numbers) < 2:\n        return None\n    m1, m2 = float('inf'), float('inf')\n    for x in numbers:\n        if x <= m1:\n            m1, m2 = x, m1\n        elif x < m2:\n            m2 = x\n    return m2",
    "    if len(numbers) < 2:\n        return None\n    if len(numbers) == 2:\n        return numbers[1]\n    else:\n        smallest = numbers[0]\n        second_smallest = numbers[1]\n        for number in numbers:\n            if number < smallest:\n                second_smallest = smallest\n                smallest = number\n            elif number < second_smallest:\n                second_smallest = number\n        return second_smallest\n",
    "    if len(numbers) < 2:\n        return None\n    m1, m2 = float('inf'), float('inf')\n    for x in numbers:\n        if x <= m1:\n            m1, m2 = x, m1\n        elif x < m2:\n            m2 = x\n    return m2"
  ]
}