{
  "name": "mbpp_595_min_Swaps",
  "language": "py",
  "prompt": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_595_min_Swaps.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "results": [
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    # if len(str1) != len(str2):\n    # \treturn -1\n    # count = 0\n    # for i in range(len(str1)):\n    # \tif str1[i] != str2[i]:\n    # \t\tcount += 1\n    # return count\n    # return sum(1 for i in range(len(str1)) if str1[i] != str2[i])\n    return sum(1 for i in range(len(str1)) if str1[i] != str2[i])\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk2uqgaez.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpk2uqgaez.py\", line 23, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk2uqgaez.py\", line 18, in check\n    assert candidate('1101', '1110') == 1\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    # if len(str1) != len(str2):\n    #     return -1\n    # count = 0\n    # for i in range(len(str1)):\n    #     if str1[i] != str2[i]:\n    #         count += 1\n    # return count // 2\n    # if len(str1) != len(str2):\n    #     return -1\n    # count = 0\n    # for i in range(len(str1)):\n    #     if str1[i] != str2[i]:\n    #         count += 1\n    # return count // 2\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqn3m9713.py\", line 38, in <module>\n    test_check()\n  File \"/tmp/tmpqn3m9713.py\", line 36, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpqn3m9713.py\", line 32, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count//2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmh5bx6eu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpmh5bx6eu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpmh5bx6eu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    if str1 == str2:\n        return 0\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count//2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9128v_mh.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp9128v_mh.py\", line 23, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmp9128v_mh.py\", line 19, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    assert len(str1) == len(str2)\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpp2_0anzd.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpp2_0anzd.py\", line 20, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpp2_0anzd.py\", line 16, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    if str1 == str2:\n        return 0\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpneta6ym0.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpneta6ym0.py\", line 23, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpneta6ym0.py\", line 19, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    # Write your code here\n    if len(str1) != len(str2):\n        return -1\n    if str1 == str2:\n        return 0\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    if count == 1:\n        return 1\n    else:\n        return -1\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1666122486,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgadfiw60.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpgadfiw60.py\", line 27, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpgadfiw60.py\", line 22, in check\n    assert candidate('1101', '1110') == 1\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    n = len(str1)\n    count = 0\n    for i in range(n):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1666122486,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpommw2zhs.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpommw2zhs.py\", line 20, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpommw2zhs.py\", line 16, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count//2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmh5bx6eu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpmh5bx6eu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpmh5bx6eu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1666122486,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpf62grg2t.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpf62grg2t.py\", line 20, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpf62grg2t.py\", line 16, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1666122486,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdrq9byd0.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpdrq9byd0.py\", line 24, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpdrq9byd0.py\", line 20, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    # Write your code here\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1666122486,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_4s3cg_0.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmp_4s3cg_0.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmp_4s3cg_0.py\", line 16, in check\n    assert candidate('1101', '1110') == 1\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    if str1 == str2:\n        return 0\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpneta6ym0.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpneta6ym0.py\", line 23, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpneta6ym0.py\", line 19, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    if str1 == str2:\n        return 0\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1666122486,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpun71nhxi.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpun71nhxi.py\", line 24, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpun71nhxi.py\", line 20, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    # count the number of 1s in str1\n    count_1s = 0\n    for i in str1:\n        if i == '1':\n            count_1s += 1\n    # count the number of 0s in str2\n    count_0s = 0\n    for i in str2:\n        if i == '0':\n            count_0s += 1\n    # return the difference\n    return abs(count_1s - count_0s)\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1666122486,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpr_0cwdl5.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpr_0cwdl5.py\", line 26, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpr_0cwdl5.py\", line 21, in check\n    assert candidate('1101', '1110') == 1\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count//2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1666122486,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpas6yuyfb.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpas6yuyfb.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpas6yuyfb.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    # check if the strings are of equal length\n    if len(str1) != len(str2):\n        return -1\n\n    # check if the strings are of equal length and have the same characters\n    if str1 == str2:\n        return 0\n\n    # convert the strings into lists\n    str1 = list(str1)\n    str2 = list(str2)\n\n    # create a dictionary to store the index of the characters in str1\n    dict1 = {}\n    for i in range(len(str1)):\n        dict1[str1[i]] = i\n\n    # create a dictionary to store the index of the characters in str2\n    dict2 = {}\n    for i in range(len(str2)):\n        dict2[str2[i]] = i\n\n    # create a list to store the index of the characters in str1\n    list1 = []\n    for i in range(len(str1)):\n        list1.append(dict1[str1[i]])\n\n    # create a list to store the index of the characters in str2\n    list2 = []\n    for i in range(len(str2)):\n        list2.append(dict2[str2[i]])\n\n    # create a list to store the index of the characters in str1\n    list3 = []\n    for i in range(len(str1)):\n        list3.append(dict1[str1[i]])\n\n    # create a list to store the index of the characters in str2\n    list4 = []\n    for i in range(len(str2)):\n        list4.append(dict2[str2[i]])\n\n    # create a list to store the index of the characters in str1\n    list5 = []\n    for i in range(len(str1)):\n        list5.append(dict1[str1[i]])\n\n    # create a list to store the index of the characters in str2\n    list6 = []\n    for i in range(len(str2)):\n        list6.append(dict2[str2[i]])\n\n    # create a list to store the index of the characters in str1\n    list7 = []\n    for\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1666122486,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpn3bxbftj.py\", line 61\n    for\n       ^\nSyntaxError: invalid syntax\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count//2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1666122486,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpas6yuyfb.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpas6yuyfb.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpas6yuyfb.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return \"Invalid input\"\n    else:\n        count = 0\n        for i in range(len(str1)):\n            if str1[i] != str2[i]:\n                count += 1\n        return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1666122486,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvjsagk0_.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpvjsagk0_.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpvjsagk0_.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    n = len(str1)\n    count = 0\n    for i in range(n):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1666122486,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy06t3r9t.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpy06t3r9t.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpy06t3r9t.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count//2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmh5bx6eu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpmh5bx6eu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpmh5bx6eu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    if str1 == str2:\n        return 0\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count//2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9128v_mh.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp9128v_mh.py\", line 23, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmp9128v_mh.py\", line 19, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    if str1 == str2:\n        return 0\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpneta6ym0.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpneta6ym0.py\", line 23, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpneta6ym0.py\", line 19, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    if str1 == str2:\n        return 0\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count - 1\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1666122486,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1m3a0yt_.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp1m3a0yt_.py\", line 23, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmp1m3a0yt_.py\", line 19, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1666122486,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdrq9byd0.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpdrq9byd0.py\", line 24, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpdrq9byd0.py\", line 20, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    # Write your code here\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1666122486,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_4s3cg_0.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmp_4s3cg_0.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmp_4s3cg_0.py\", line 16, in check\n    assert candidate('1101', '1110') == 1\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    # if the length of the strings are not equal, return -1\n    if len(str1) != len(str2):\n        return -1\n\n    # count the number of 1's in the strings\n    count1 = str1.count('1')\n    count2 = str2.count('1')\n\n    # if the number of 1's are not equal, return -1\n    if count1 != count2:\n        return -1\n\n    # initialize the count to 0\n    count = 0\n\n    # iterate through the strings\n    for i in range(len(str1)):\n        # if the characters are not equal, increment the count\n        if str1[i] != str2[i]:\n            count += 1\n\n    # return the count divided by 2\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1666122486,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1_zrqjl6.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmp1_zrqjl6.py\", line 37, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmp1_zrqjl6.py\", line 33, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count//2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1666122486,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpas6yuyfb.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpas6yuyfb.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpas6yuyfb.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    # if the length of the strings are not equal, return -1\n    if len(str1) != len(str2):\n        return -1\n\n    # convert the strings to lists\n    str1 = list(str1)\n    str2 = list(str2)\n\n    # initialize the count variable\n    count = 0\n\n    # loop through the string\n    for i in range(len(str1)):\n        # if the characters are not equal, increment the count\n        if str1[i] != str2[i]:\n            count += 1\n\n    # return the count\n    return count\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1666122486,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpitonmuvu.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpitonmuvu.py\", line 34, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpitonmuvu.py\", line 29, in check\n    assert candidate('1101', '1110') == 1\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    else:\n        count = 0\n        for i in range(len(str1)):\n            if str1[i] != str2[i]:\n                count += 1\n        return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1666122486,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_zuofgal.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmp_zuofgal.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmp_zuofgal.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    # if lengths are not equal, return -1\n    if len(str1) != len(str2):\n        return -1\n\n    # initialize count to 0\n    count = 0\n\n    # convert both strings to list\n    str1 = list(str1)\n    str2 = list(str2)\n\n    # loop through the list\n    for i in range(len(str1)):\n        # if the characters are not equal\n        if str1[i] != str2[i]:\n            # loop through the list again\n            for j in range(i + 1, len(str1)):\n                # if the characters are equal\n                if str1[j] == str2[i]:\n                    # swap the characters\n                    str1[i], str1[j] = str1[j], str1[i]\n                    # increment count\n                    count += 1\n                    break\n\n    # return count\n    return count\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1666122486,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpn3m52dei.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmpn3m52dei.py\", line 42, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpn3m52dei.py\", line 38, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    n = len(str1)\n    count = 0\n    for i in range(n):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1666122486,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp84edq21u.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp84edq21u.py\", line 23, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmp84edq21u.py\", line 19, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    n = len(str1)\n    count = 0\n    for i in range(n):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1666122486,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpommw2zhs.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpommw2zhs.py\", line 20, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpommw2zhs.py\", line 16, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    # Write your code here\n    if len(str1) != len(str2):\n        return -1\n    if str1 == str2:\n        return 0\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1666122486,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpf53zh_sl.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpf53zh_sl.py\", line 25, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpf53zh_sl.py\", line 21, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    # if the length of the strings are not equal, return -1\n    if len(str1) != len(str2):\n        return -1\n    # if the strings are equal, return 0\n    if str1 == str2:\n        return 0\n    # initialize a variable to store the count of swaps\n    count = 0\n    # iterate through the string\n    for i in range(len(str1)):\n        # if the characters are not equal, increment the count\n        if str1[i] != str2[i]:\n            count += 1\n    # if the count is even, return the count divided by 2\n    if count % 2 == 0:\n        return count // 2\n    # else return -1\n    else:\n        return -1\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1666122486,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpivaqtzy0.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpivaqtzy0.py\", line 33, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpivaqtzy0.py\", line 29, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count//2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmh5bx6eu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpmh5bx6eu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpmh5bx6eu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count//2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmh5bx6eu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpmh5bx6eu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpmh5bx6eu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count//2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmh5bx6eu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpmh5bx6eu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpmh5bx6eu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1666122486,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdrq9byd0.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpdrq9byd0.py\", line 24, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpdrq9byd0.py\", line 20, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    # Write your code here\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1666122486,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmproj0ip4o.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmproj0ip4o.py\", line 23, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmproj0ip4o.py\", line 19, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    # count the number of 1s in the string\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str2[i]:\n            count += 1\n    return len(str1) - count\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1666122486,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdrltfv4v.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpdrltfv4v.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpdrltfv4v.py\", line 16, in check\n    assert candidate('1101', '1110') == 1\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1666122486,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5_wmlg83.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmp5_wmlg83.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmp5_wmlg83.py\", line 16, in check\n    assert candidate('1101', '1110') == 1\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    # Write your code here\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1666122486,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxk3qhgrl.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpxk3qhgrl.py\", line 20, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpxk3qhgrl.py\", line 15, in check\n    assert candidate('1101', '1110') == 1\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    # Write your code here\n    pass\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1666122486,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_0qc4nci.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp_0qc4nci.py\", line 17, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmp_0qc4nci.py\", line 12, in check\n    assert candidate('1101', '1110') == 1\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count//2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmh5bx6eu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpmh5bx6eu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpmh5bx6eu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\nprint(min_Swaps(\"1101\", \"0111\"))\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1666122486,
      "stdout": "1\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgf7dkk6a.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpgf7dkk6a.py\", line 23, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpgf7dkk6a.py\", line 19, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count//2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmh5bx6eu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpmh5bx6eu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpmh5bx6eu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count//2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmh5bx6eu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpmh5bx6eu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpmh5bx6eu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count//2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1666122486,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpas6yuyfb.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpas6yuyfb.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpas6yuyfb.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count//2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmh5bx6eu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpmh5bx6eu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpmh5bx6eu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    if str1 == str2:\n        return 0\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpneta6ym0.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpneta6ym0.py\", line 23, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpneta6ym0.py\", line 19, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    # check if the strings are of equal length\n    if len(str1) != len(str2):\n        return -1\n\n    # check if the strings are of binary type\n    if not str1.isalpha() or not str2.isalpha():\n        return -1\n\n    # check if the strings are of binary type\n    if not str1.isalpha() or not str2.isalpha():\n        return -1\n\n    # check if the strings are of binary type\n    if not str1.isalpha() or not str2.isalpha():\n        return -1\n\n    # check if the strings are of binary type\n    if not str1.isalpha() or not str2.isalpha():\n        return -1\n\n    # check if the strings are of binary type\n    if not str1.isalpha() or not str2.isalpha():\n        return -1\n\n    # check if the strings are of binary type\n    if not str1.isalpha() or not str2.isalpha():\n        return -1\n\n    # check if the strings are of binary type\n    if not str1.isalpha() or not str2.isalpha():\n        return -1\n\n    # check if the strings are of binary type\n    if not str1.isalpha() or not str2.isalpha():\n        return -1\n\n    # check if the strings are of binary type\n    if not str1.isalpha() or not str2.isalpha():\n        return -1\n\n    # check if the strings are of binary type\n    if not str1.isalpha() or not str2.isalpha():\n        return -1\n\n    # check if the strings are of binary type\n    if not str1.isalpha() or not str2.isalpha():\n        return -1\n\n    # check if the strings are of binary type\n    if not str1.isalpha() or not str2.isalpha():\n        return -1\n\n    # check if the strings are of binary type\n    if not str1.isalpha() or not str2.isalpha():\n        return -1\n\n    # check if the strings are of binary type\n    if not str1.isalpha() or not str2.isalpha():\n        return -1\n\n    # check if the\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1666122486,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2ejpm4m_.py\", line 76, in <module>\n    test_check()\n  File \"/tmp/tmp2ejpm4m_.py\", line 74, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmp2ejpm4m_.py\", line 69, in check\n    assert candidate('1101', '1110') == 1\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count//2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmh5bx6eu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpmh5bx6eu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpmh5bx6eu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    # Write your code here\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1666122486,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmproj0ip4o.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmproj0ip4o.py\", line 23, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmproj0ip4o.py\", line 19, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk_kyuwkj.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpk_kyuwkj.py\", line 22, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpk_kyuwkj.py\", line 18, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n    if len(str1) != len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n\ndef check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcxg3rhvu.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpcxg3rhvu.py\", line 21, in test_check\n    check(min_Swaps)\n  File \"/tmp/tmpcxg3rhvu.py\", line 17, in check\n    assert candidate('111', '000') == 'Not Possible'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}