{
  "name": "mbpp_223_is_majority",
  "language": "py",
  "prompt": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n\n",
    "    if len(arr) == 0:\n        return False\n    if len(arr) == 1:\n        return arr[0] == x\n    mid = len(arr) // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] < x:\n        return is_majority(arr[mid + 1:], n, x)\n    else:\n        return is_majority(arr[:mid], n, x)\n\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    # O(n) time | O(1) space\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n/2\n",
    "    return arr.count(x) > n // 2\n\n",
    "    # TODO: Write your code here\n    pass\n\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n/2\n",
    "    # O(log n) time | O(1) space\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n",
    "    if n == 0:\n        return False\n    if arr[n//2] == x:\n        return True\n    elif arr[n//2] > x:\n        return is_majority(arr[:n//2], n//2, x)\n    else:\n        return is_majority(arr[n//2+1:], n//2, x)\n",
    "    return arr.count(x) > n // 2\n\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    if n == 0:\n        return False\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    return False\n",
    "    # Time: O(log n)\n    # Space: O(1)\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    if n == 2:\n        return arr[0] == x or arr[1] == x\n    if n == 3:\n        return arr[0] == x or arr[1] == x or arr[2] == x\n\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid:], n - mid, x)\n",
    "    # TODO: Write your code here\n    pass\n\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] < x:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n    else:\n        return is_majority(arr[:mid], mid, x)\n\n",
    "    # TODO: Write your code here\n    pass\n\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n\n",
    "    left = 0\n    right = n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            if mid - 1 >= 0 and arr[mid - 1] == x:\n                right = mid - 1\n            elif mid + 1 < n and arr[mid + 1] == x:\n                left = mid + 1\n            else:\n                return True\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return False\n\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    return is_majority(arr[mid+1:], n - mid - 1, x)\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    return False\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    return False\n\n",
    "    if len(arr) == 0:\n        return False\n    if len(arr) == 1:\n        return arr[0] == x\n    mid = len(arr) // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], n, x)\n    else:\n        return is_majority(arr[mid+1:], n, x)\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    if arr[n//2] == x:\n        return True\n    if arr[n//2] > x:\n        return is_majority(arr[:n//2], n//2, x)\n    else:\n        return is_majority(arr[n//2+1:], n//2, x)\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    return arr.count(x) > n / 2\n\n",
    "    return arr.count(x) > n/2\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    if n == 0:\n        return False\n    if x == arr[n//2]:\n        return True\n    elif x < arr[n//2]:\n        return is_majority(arr[:n//2], n//2, x)\n    else:\n        return is_majority(arr[n//2+1:], n//2, x)\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    if n == 0:\n        return False\n\n    if n == 1:\n        return arr[0] == x\n\n    mid = n // 2\n\n    if arr[mid] == x:\n        return True\n\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n\n    return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    return False\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    return arr.count(x) > n/2\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    if n == 0:\n        return False\n\n    if n == 1:\n        return arr[0] == x\n\n    mid = n // 2\n\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n",
    "    # TODO: Write your code here\n    pass\n\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n",
    "    if n == 0:\n        return False\n    if arr[n//2] == x:\n        return True\n    elif arr[n//2] > x:\n        return is_majority(arr[:n//2], n//2, x)\n    else:\n        return is_majority(arr[n//2+1:], n//2, x)\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n/2\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    return False\n",
    "    if len(arr) == 0:\n        return False\n    if len(arr) == 1:\n        return arr[0] == x\n    mid = len(arr) // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], n, x)\n    else:\n        return is_majority(arr[mid+1:], n, x)\n",
    "    left = 0\n    right = n - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            if mid + n // 2 < n and arr[mid + n // 2] == x:\n                return True\n            elif mid - n // 2 >= 0 and arr[mid - n // 2] == x:\n                return True\n            else:\n                return False\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False",
    "    # Time Complexity: O(log n)\n    # Space Complexity: O(1)\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            if mid + n // 2 < n and arr[mid + n // 2] == x:\n                return True\n            elif mid - n // 2 >= 0 and arr[mid - n // 2] == x:\n                return True\n            else:\n                return False\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    # TODO: Write your code here\n    pass\n\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    # TODO: Write your code here\n    pass\n\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)",
    "    # Write your code here.\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    if n == 0:\n        return False\n\n    if n == 1:\n        return arr[0] == x\n\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] < x:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n    else:\n        return is_majority(arr[:mid], mid, x)\n\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n",
    "    if n == 0:\n        return False\n\n    if arr[n // 2] == x:\n        return True\n\n    if arr[n // 2] > x:\n        return is_majority(arr[:n // 2], n // 2, x)\n    else:\n        return is_majority(arr[n // 2 + 1:], n // 2, x)\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n\n",
    "    # Write your code here.\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    # TODO: Write your code here\n    pass\n\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n/2\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] < x:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n    else:\n        return is_majority(arr[:mid], mid, x)\n\n",
    "    # O(log n) time | O(1) space\n    left = bisect.bisect_left(arr, x)\n    right = bisect.bisect_right(arr, x)\n    return right - left > n // 2",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    return is_majority(arr[mid+1:], n - mid - 1, x)\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    return False\n",
    "    return arr.count(x) > n/2\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    if n == 2:\n        return arr[0] == x or arr[1] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    return is_majority(arr[mid:], n - mid, x)\n\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    return False\n",
    "    # Time: O(logn)\n    # Space: O(1)\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False\n\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    return is_majority(arr[mid+1:], n - mid - 1, x)\n",
    "    if n == 0:\n        return False\n    if arr[n//2] == x:\n        return True\n    elif arr[n//2] > x:\n        return is_majority(arr[:n//2], n//2, x)\n    else:\n        return is_majority(arr[n//2+1:], n//2, x)\n",
    "    if arr[n // 2] == x:\n        return True\n    return False\n\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n",
    "    # Time: O(log n)\n    # Space: O(1)\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    if n == 2:\n        return arr[0] == x or arr[1] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid:], n - mid, x)\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n-mid-1, x)\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    # Time: O(log(n))\n    # Space: O(1)\n    # Find the first occurrence of the element\n    first_occurrence = binary_search(arr, 0, n - 1, x)\n\n    # If element is not present in the array\n    if first_occurrence == -1:\n        return False\n\n    # If element is present, check if it is present more than n/2 times\n    if (first_occurrence + n // 2) <= (n - 1) and arr[first_occurrence + n // 2] == x:\n        return True\n\n    return False\n\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    if n == 0:\n        return False\n    elif n == 1:\n        return arr[0] == x\n    else:\n        mid = n // 2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] > x:\n            return is_majority(arr[:mid], mid, x)\n        else:\n            return is_majority(arr[mid+1:], n-mid-1, x)",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    if n == 0:\n        return False\n    if x == arr[n // 2]:\n        return True\n    elif x < arr[n // 2]:\n        return is_majority(arr[:n // 2], n // 2, x)\n    else:\n        return is_majority(arr[n // 2 + 1:], n // 2, x)\n\n",
    "    if n == 0:\n        return False\n    if arr[n // 2] == x:\n        return True\n    elif arr[n // 2] > x:\n        return is_majority(arr[:n // 2], n // 2, x)\n    else:\n        return is_majority(arr[n // 2 + 1:], n // 2, x)\n\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n-mid-1, x)\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n-mid-1, x)\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    # Write your code here.\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n",
    "    # O(n) time | O(1) space\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n / 2\n\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    # Time: O(log n)\n    # Space: O(1)\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            if (mid == 0 or arr[mid - 1] != x) and (mid == n - 1 or arr[mid + 1] != x):\n                return True\n            elif mid > 0 and arr[mid - 1] == x:\n                right = mid - 1\n            else:\n                left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    # Write your code here.\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            if (mid + n // 2) < n and arr[mid + n // 2] == x:\n                return True\n            else:\n                return False\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return False\n\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] < x:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n    else:\n        return is_majority(arr[:mid], mid, x)\n\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    return arr.count(x) > n // 2\n\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2\n\n",
    "    if n == 0:\n        return False\n\n    if arr[n // 2] == x:\n        return True\n\n    if arr[n // 2] > x:\n        return is_majority(arr[:n // 2], n // 2, x)\n    else:\n        return is_majority(arr[n // 2 + 1:], n // 2, x)\n\n",
    "    # O(n) time | O(1) space\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2\n\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n",
    "    # TODO: Write your code here\n    pass\n\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] < x:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n    else:\n        return is_majority(arr[:mid], mid, x)\n\n",
    "    return arr.count(x) > n // 2\n\n",
    "    return arr.count(x) > n / 2\n\n",
    "    # Time: O(log n)\n    # Space: O(1)\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            if mid + n // 2 < n and arr[mid + n // 2] == x:\n                return True\n            elif mid - n // 2 >= 0 and arr[mid - n // 2] == x:\n                return True\n            else:\n                return False\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return False",
    "    # O(n) time | O(1) space\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n/2\n",
    "    if n == 0:\n        return False\n\n    if arr[n // 2] == x:\n        return True\n\n    if arr[n // 2] > x:\n        return is_majority(arr[:n // 2], n // 2, x)\n\n    if arr[n // 2] < x:\n        return is_majority(arr[n // 2 + 1:], n // 2, x)\n\n",
    "    if n == 0:\n        return False\n    if arr[n//2] == x:\n        return True\n    elif arr[n//2] > x:\n        return is_majority(arr[:n//2], n//2, x)\n    else:\n        return is_majority(arr[n//2+1:], n//2, x)\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    # Time Complexity: O(log(n))\n    # Space Complexity: O(1)\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            if mid + n // 2 < n and arr[mid + n // 2] == x:\n                return True\n            elif mid - n // 2 >= 0 and arr[mid - n // 2] == x:\n                return True\n            else:\n                return False\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    return False\n\n",
    "    if n == 0:\n        return False\n    if arr[n//2] == x:\n        return True\n    elif arr[n//2] > x:\n        return is_majority(arr[:n//2], n//2, x)\n    else:\n        return is_majority(arr[n//2+1:], n//2, x)\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] < x:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n    return is_majority(arr[:mid], mid, x)\n\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    if arr[n//2] == x:\n        return True\n    if arr[n//2] > x:\n        return is_majority(arr[:n//2], n//2, x)\n    if arr[n//2] < x:\n        return is_majority(arr[n//2+1:], n//2, x)\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    return is_majority(arr[mid + 1:], n - mid - 1, x)",
    "    # O(n) time | O(1) space\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    return is_majority(arr[mid + 1:], n - mid - 1, x)\n",
    "    if len(arr) == 0:\n        return False\n    if len(arr) == 1:\n        return arr[0] == x\n    mid = len(arr) // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], n, x)\n    else:\n        return is_majority(arr[mid+1:], n, x)\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    return False\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)",
    "    return arr.count(x) > n/2\n",
    "    return arr.count(x) > n // 2\n\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    return False\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n/2\n\n",
    "    if n == 0:\n        return False\n\n    if n == 1:\n        return arr[0] == x\n\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n\n    if arr[mid] < x:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n    else:\n        return is_majority(arr[:mid], mid, x)\n\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] < x:\n        return is_majority(arr[mid+1:], n-mid-1, x)\n    else:\n        return is_majority(arr[:mid], mid, x)\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid+1:], n-mid-1, x)\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n/2\n",
    "    return arr.count(x) > n // 2\n",
    "    if len(arr) == 0:\n        return False\n\n    if len(arr) == 1:\n        return arr[0] == x\n\n    mid = len(arr) // 2\n    if arr[mid] == x:\n        return True\n\n    if arr[mid] > x:\n        return is_majority(arr[:mid], n, x)\n    else:\n        return is_majority(arr[mid + 1:], n, x)\n\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n"
  ]
}