{
  "name": "mbpp_223_is_majority",
  "language": "py",
  "prompt": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n\n",
    "    if len(arr) == 0:\n        return False\n    if len(arr) == 1:\n        return arr[0] == x\n    mid = len(arr) // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] < x:\n        return is_majority(arr[mid + 1:], n, x)\n    else:\n        return is_majority(arr[:mid], n, x)\n\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    # O(n) time | O(1) space\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n/2\n",
    "    return arr.count(x) > n // 2\n\n",
    "    # TODO: Write your code here\n    pass\n\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n/2\n",
    "    # O(log n) time | O(1) space\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n",
    "    if n == 0:\n        return False\n    if arr[n//2] == x:\n        return True\n    elif arr[n//2] > x:\n        return is_majority(arr[:n//2], n//2, x)\n    else:\n        return is_majority(arr[n//2+1:], n//2, x)\n",
    "    return arr.count(x) > n // 2\n\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n",
    "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\n",
    "    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n\n"
  ]
}