{
  "name": "mbpp_742_area_tetrahedron",
  "language": "py",
  "prompt": "def area_tetrahedron(side: int) -> float:\n    \"\"\"\n\tWrite a function to caluclate the area of a tetrahedron.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_742_area_tetrahedron.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate(3) == 15.588457268119894\n    assert candidate(20) == 692.8203230275509\n    assert candidate(10) == 173.20508075688772\n\ndef test_check():\n    check(area_tetrahedron)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return math.sqrt(3) * side ** 2\n\n",
    "    return (math.sqrt(3) * side ** 2) / 4\n\n",
    "    return (math.sqrt(3) * side ** 2) / 4\n\n",
    "    return (math.sqrt(3) * side ** 2) / 4\n\n",
    "    return math.sqrt(3) * side ** 2\n\n",
    "    return (math.sqrt(3) * side ** 2) / 4\n\n",
    "    return math.sqrt(3) * side ** 2\n\n",
    "    return (side ** 2 * (3 ** 0.5)) / 4\n\n",
    "    return (math.sqrt(3) * side ** 2) / 4\n\n",
    "    return (math.sqrt(3) * side ** 2) / 4\n\n",
    "    return (math.sqrt(3) * side ** 2) / 4\n\n",
    "    return (math.sqrt(3) * side ** 2) / 4\n\n",
    "    return (math.sqrt(3) * side ** 2) / 4\n\n",
    "    return (math.sqrt(3) * side ** 2) / 4\n\n",
    "    return (math.sqrt(3) * side ** 2) / 4\n\n",
    "    return math.sqrt(3) * side ** 2\n\n",
    "    return math.sqrt(3) * side ** 2\n\n",
    "    return (math.sqrt(3) * side ** 2) / 4\n\n",
    "    return (math.sqrt(3) * side ** 2) / 4\n\n",
    "    return (math.sqrt(3) * side ** 2) / 4\n\n"
  ]
}