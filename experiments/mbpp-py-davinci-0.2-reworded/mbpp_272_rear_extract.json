{
  "name": "mbpp_272_rear_extract",
  "language": "py",
  "prompt": "from typing import List, Tuple, Union\n\ndef rear_extract(test_list: List[Tuple[Union[str, int]]]) -> List[int]:\n    \"\"\"\n\tWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_272_rear_extract.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n    assert candidate([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\n    assert candidate([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]\n\ndef test_check():\n    check(rear_extract)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return [tup[-1] for tup in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [i[-1] for i in test_list]\n",
    "    return [t[-1] for t in test_list]",
    "    return [i[-1] for i in test_list]\n",
    "    return [i[-1] for i in test_list]\n\nprint(rear_extract([(1, 2, 3), (4, 5, 6), (7, 8, 9)]))",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [t[-1] for t in test_list]\n",
    "    return [i[-1] for i in test_list]\n",
    "    return [t[-1] for t in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [t[-1] for t in test_list]\n",
    "    return [i[-1] for i in test_list]\n",
    "    return [t[-1] for t in test_list]\n",
    "    return [t[-1] for t in test_list]\n",
    "    return [x[-1] for x in test_list]",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [t[-1] for t in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [t[-1] for t in test_list]\n",
    "    return [test_list[i][-1] for i in range(len(test_list))]\n\nprint(rear_extract([(1, 2, 3), (4, 5, 6), (7, 8, 9)]))",
    "    return [t[-1] for t in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [i[-1] for i in test_list]\n\nprint(rear_extract([(1, 2, 3), (4, 5, 6), (7, 8, 9)]))",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [test_list[i][-1] for i in range(len(test_list))]\n",
    "    return [i[-1] for i in test_list]\n",
    "    return [test_list[i][-1] for i in range(len(test_list))]\n",
    "    return [x[-1] for x in test_list]\n",
    "    return [t[-1] for t in test_list]\n\nprint(rear_extract([(1, 2, 3), (4, 5, 6), (7, 8, 9)]))",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [t[-1] for t in test_list]\n",
    "    return [t[-1] for t in test_list]\n",
    "    return [test_list[i][-1] for i in range(len(test_list))]\n\nprint(rear_extract([(1, 2, 3), (4, 5, 6), (7, 8, 9)]))\nprint(rear_extract([('a', 'b', 'c'), ('d', 'e', 'f'), ('g', 'h', 'i')]))\nprint(rear_extract([(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12)]))\nprint(rear_extract([(1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15)]))",
    "    return [test_list[i][-1] for i in range(len(test_list))]\n\nprint(rear_extract([(1, 2, 3), (4, 5, 6), (7, 8, 9)]))",
    "    return [x[-1] for x in test_list]\n",
    "    return [x[-1] for x in test_list]",
    "    return [t[-1] for t in test_list]\n",
    "    return [t[-1] for t in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [tup[-1] for tup in test_list]",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [t[-1] for t in test_list]\n",
    "    return [t[-1] for t in test_list]",
    "    return [t[-1] for t in test_list]",
    "    return [test_list[i][-1] for i in range(len(test_list))]\n",
    "    return [i[-1] for i in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [test_list[i][-1] for i in range(len(test_list))]\n\nprint(rear_extract([(1, 2, 3), (4, 5, 6), (7, 8, 9)]))",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [x[-1] for x in test_list]\n",
    "    return [test_list[i][-1] for i in range(len(test_list))]\n",
    "    return [t[-1] for t in test_list]",
    "    return [t[-1] for t in test_list]\n",
    "    return [t[-1] for t in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [test_list[i][-1] for i in range(len(test_list))]",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [test_list[i][-1] for i in range(len(test_list))]\n",
    "    rear_list = []\n    for i in test_list:\n        rear_list.append(i[-1])\n    return rear_list\n",
    "    return [test_list[i][-1] for i in range(len(test_list))]",
    "    return [x[-1] for x in test_list]",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [t[-1] for t in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n\ntest_list = [('a', 1), ('b', 2), ('c', 3)]\nprint(rear_extract(test_list))",
    "    return [t[-1] for t in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [t[-1] for t in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [t[-1] for t in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [t[-1] for t in test_list]\n",
    "    return [t[-1] for t in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [i[-1] for i in test_list]",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [tup[-1] for tup in test_list]",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [x[-1] for x in test_list]\n",
    "    return [x[-1] for x in test_list]\n",
    "    return [t[-1] for t in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n\nprint(rear_extract([(1, 2, 3), (4, 5, 6), (7, 8, 9)]))",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [t[-1] for t in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [i[-1] for i in test_list]",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [test_list[i][-1] for i in range(len(test_list))]",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [tup[-1] for tup in test_list]",
    "    return [t[-1] for t in test_list]\n",
    "    return [t[-1] for t in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n\nprint(rear_extract([(1, 2, 3), (4, 5, 6), (7, 8, 9)]))",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [test_list[i][-1] for i in range(len(test_list))]\n",
    "    return [i[-1] for i in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [tup[-1] for tup in test_list]",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [i[-1] for i in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [i[-1] for i in test_list]\n",
    "    return [i[-1] for i in test_list]",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [t[-1] for t in test_list]",
    "    return [t[-1] for t in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [t[-1] for t in test_list]\n",
    "    return [i[-1] for i in test_list]\n",
    "    return [test_list[i][-1] for i in range(len(test_list))]",
    "    return [t[-1] for t in test_list]\n",
    "    return [test_list[i][-1] for i in range(len(test_list))]\n\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n\nprint(rear_extract([(1, 2, 3), (4, 5, 6), (7, 8, 9)]))\nprint(rear_extract([('a', 'b', 'c'), ('d', 'e', 'f'), ('g', 'h', 'i')]))\nprint(rear_extract([(1, 2, 3), ('a', 'b', 'c'), (4, 5, 6), ('d', 'e', 'f'), (7, 8, 9), ('g', 'h', 'i')]))",
    "    return [test_list[i][-1] for i in range(len(test_list))]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [t[-1] for t in test_list]\n",
    "    return [test_list[i][-1] for i in range(len(test_list))]\n\nprint(rear_extract([(1, 2, 3), (4, 5, 6), (7, 8, 9)]))",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [i[-1] for i in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [t[-1] for t in test_list]",
    "    return [tup[-1] for tup in test_list]",
    "    return [t[-1] for t in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n\nprint(rear_extract([(1, 2, 3), (4, 5, 6), (7, 8, 9)]))",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [t[-1] for t in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [test_list[i][-1] for i in range(len(test_list))]\n\nprint(rear_extract([(1, 2, 3), (4, 5, 6), (7, 8, 9)]))",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [i[-1] for i in test_list]\n\nprint(rear_extract([('a', 1), ('b', 2), ('c', 3)]))\nprint(rear_extract([('a', 1), ('b', 2), ('c', 3), ('d', 4)]))\nprint(rear_extract([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)]))",
    "    return [t[-1] for t in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [x[-1] for x in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [x[-1] for x in test_list]",
    "    return [test_list[i][-1] for i in range(len(test_list))]\n\nprint(rear_extract([(1, 2, 3), (4, 5, 6), (7, 8, 9)]))",
    "    return [t[-1] for t in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [t[-1] for t in test_list]",
    "    return [t[-1] for t in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [x[-1] for x in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n\n",
    "    return [t[-1] for t in test_list]\n",
    "    return [tup[-1] for tup in test_list]",
    "    return [tup[-1] for tup in test_list]\n\n",
    "    return [t[-1] for t in test_list]",
    "    return [test_list[i][-1] for i in range(len(test_list))]\n\nprint(rear_extract([(1, 2, 3), (4, 5, 6), (7, 8, 9)]))",
    "    return [t[-1] for t in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [test_list[i][-1] for i in range(len(test_list))]",
    "    return [t[-1] for t in test_list]\n",
    "    return [t[-1] for t in test_list]\n",
    "    return [x[-1] for x in test_list]\n",
    "    return [test_list[i][-1] for i in range(len(test_list))]\n\nprint(rear_extract([(1, 2, 3), (4, 5, 6), (7, 8, 9)]))",
    "    return [t[-1] for t in test_list]\n",
    "    return [x[-1] for x in test_list]",
    "    return [t[-1] for t in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n\nprint(rear_extract([(1, 2, 3), (4, 5, 6), (7, 8, 9)]))",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [t[-1] for t in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [tup[-1] for tup in test_list]",
    "    return [i[-1] for i in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [tup[-1] for tup in test_list]\n",
    "    return [t[-1] for t in test_list]\n",
    "    return [test_list[i][-1] for i in range(len(test_list))]\n"
  ]
}