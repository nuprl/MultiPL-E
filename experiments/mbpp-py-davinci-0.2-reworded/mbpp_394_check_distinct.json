{
  "name": "mbpp_394_check_distinct",
  "language": "py",
  "prompt": "from typing import Tuple\n\ndef check_distinct(test_tup: Tuple[int]) -> bool:\n    \"\"\"\n\tWrite a function to check if given tuple contains no duplicates.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_394_check_distinct.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate((1, 4, 5, 6, 1, 4)) == False\n    assert candidate((1, 4, 5, 6)) == True\n    assert candidate((2, 3, 4, 5, 6)) == True\n\ndef test_check():\n    check(check_distinct)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return len(test_tup) == len(set(test_tup))\n",
    "    return len(test_tup) == len(set(test_tup))\n\n",
    "    return len(test_tup) == len(set(test_tup))\n",
    "    return len(test_tup) == len(set(test_tup))\n\n",
    "    return len(test_tup) == len(set(test_tup))\n",
    "    return len(test_tup) == len(set(test_tup))\n",
    "    return len(test_tup) == len(set(test_tup))\n",
    "    return len(test_tup) == len(set(test_tup))\n",
    "    return len(test_tup) == len(set(test_tup))\n",
    "    return len(test_tup) == len(set(test_tup))\n",
    "    return len(test_tup) == len(set(test_tup))\n",
    "    return len(test_tup) == len(set(test_tup))",
    "    return len(test_tup) == len(set(test_tup))\n\nprint(check_distinct((1, 2, 3, 4)))\nprint(check_distinct((1, 2, 3, 4, 4)))",
    "    return len(test_tup) == len(set(test_tup))\n",
    "    return len(test_tup) == len(set(test_tup))\n",
    "    return len(test_tup) == len(set(test_tup))\n",
    "    return len(test_tup) == len(set(test_tup))\n",
    "    return len(test_tup) == len(set(test_tup))\n",
    "    return len(test_tup) == len(set(test_tup))\n",
    "    return len(test_tup) == len(set(test_tup))\n"
  ]
}