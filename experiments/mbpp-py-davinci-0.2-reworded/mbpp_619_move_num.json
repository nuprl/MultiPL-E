{
  "name": "mbpp_619_move_num",
  "language": "py",
  "prompt": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return test_str.translate(str.maketrans('', '', string.ascii_letters)) + test_str.translate(\n        str.maketrans('', '', string.digits))\n\n",
    "    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n",
    "    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n",
    "    nums = \"0123456789\"\n    num_list = []\n    str_list = []\n    for i in test_str:\n        if i in nums:\n            num_list.append(i)\n        else:\n            str_list.append(i)\n    return \"\".join(str_list) + \"\".join(num_list)\n\n",
    "    nums = [str(i) for i in range(10)]\n    new_str = \"\"\n    for i in test_str:\n        if i in nums:\n            new_str += i\n    return new_str + test_str\n\n",
    "    nums = [i for i in test_str if i.isdigit()]\n    chars = [i for i in test_str if not i.isdigit()]\n    return \"\".join(chars) + \"\".join(nums)\n\n",
    "    nums = [str(i) for i in range(10)]\n    return \"\".join(\n        [i for i in test_str if i not in nums] + [i for i in test_str if i in nums]\n    )\n\n",
    "    num_str = \"\"\n    for i in test_str:\n        if i.isdigit():\n            num_str += i\n    return test_str + num_str\n\n",
    "    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n",
    "    nums = [str(i) for i in range(10)]\n    new_str = \"\"\n    for i in test_str:\n        if i in nums:\n            new_str += i\n    return test_str + new_str\n\n",
    "    nums = [str(i) for i in range(10)]\n    num_str = \"\"\n    str_str = \"\"\n    for i in test_str:\n        if i in nums:\n            num_str += i\n        else:\n            str_str += i\n    return str_str + num_str\n\n",
    "    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n",
    "    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n",
    "    return test_str.translate(str.maketrans(\"\", \"\", string.ascii_letters)) + test_str.translate(\n        str.maketrans(\"\", \"\", string.digits))\n\n",
    "    nums = [str(i) for i in range(10)]\n    num_str = \"\"\n    other_str = \"\"\n    for i in test_str:\n        if i in nums:\n            num_str += i\n        else:\n            other_str += i\n    return other_str + num_str\n\n",
    "    return \"\".join(c for c in test_str if not c.isdigit()) + \"\".join(\n        c for c in test_str if c.isdigit()\n    )\n\n",
    "    return ''.join(sorted(test_str, key=lambda x: x.isdigit()))\n\n",
    "    nums = [str(i) for i in range(10)]\n    str_list = list(test_str)\n    for i in range(len(str_list) - 1, -1, -1):\n        if str_list[i] in nums:\n            str_list.append(str_list[i])\n            str_list.pop(i)\n    return \"\".join(str_list)\n\n",
    "    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n",
    "    return \"\".join(sorted(test_str, key=lambda x: x.isdigit()))\n\n"
  ]
}