{
  "name": "mbpp_805_max_sum_list",
  "language": "py",
  "prompt": "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    \"\"\"\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_805_max_sum_list.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12]\n    assert candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10]\n    assert candidate([[2, 3, 1]]) == [2, 3, 1]\n\ndef test_check():\n    check(max_sum_list)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return max(lists, key=sum)",
    "    return max(lists, key=sum)",
    "    return max(lists, key=sum)\n\nprint(max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]))\nprint(max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9], [1,2,3], [4,5,6], [10,11,12], [7,8,9]]))",
    "    max_sum = 0\n    max_list = []\n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n            max_list = l\n    return max_list\n",
    "    return max(lists, key=sum)\n\nprint(max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]))",
    "    return max(lists, key=sum)\n",
    "    return max(lists, key=sum)\n\nprint(max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]))\nprint(max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9], [1,2,3], [4,5,6], [10,11,12], [7,8,9]]))",
    "    max_sum = 0\n    max_list = []\n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n            max_list = l\n    return max_list\n",
    "    return max(lists, key=sum)",
    "    return max(lists, key=sum)\n",
    "    return max(lists, key=sum)\n",
    "    max_sum = 0\n    max_sum_list = []\n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n            max_sum_list = l\n    return max_sum_list\n",
    "    return max(lists, key=sum)\n",
    "    pass",
    "    max_sum = 0\n    max_list = []\n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n            max_list = l\n    return max_list\n",
    "    return max(lists, key=sum)\n\nprint(max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]))",
    "    max_sum = 0\n    max_list = []\n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n            max_list = l\n    return max_list\n",
    "    max_sum = 0\n    max_list = []\n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n            max_list = l\n    return max_list\n\nprint(max_sum_list([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]))",
    "    max_sum = 0\n    max_list = []\n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n            max_list = l\n    return max_list\n",
    "    max_sum = 0\n    max_list = []\n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n            max_list = l\n    return max_list\n\n"
  ]
}