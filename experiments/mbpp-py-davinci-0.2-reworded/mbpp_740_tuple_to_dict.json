{
  "name": "mbpp_740_tuple_to_dict",
  "language": "py",
  "prompt": "from typing import Tuple, Dict\n\ndef tuple_to_dict(test_tup: Tuple[int]) -> Dict[int, int]:\n    \"\"\"\n\tWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_740_tuple_to_dict.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate((1, 5, 7, 10, 13, 5)) == { 1: 5, 7: 10, 13: 5 }\n    assert candidate((1, 2, 3, 4, 5, 6)) == { 1: 2, 3: 4, 5: 6 }\n    assert candidate((7, 8, 9, 10, 11, 12)) == { 7: 8, 9: 10, 11: 12 }\n\ndef test_check():\n    check(tuple_to_dict)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return dict(zip(test_tup[::2], test_tup[1::2]))\n",
    "    return dict(zip(test_tup[::2], test_tup[1::2]))\n\nprint(tuple_to_dict((1, 2, 3, 4, 5, 6)))",
    "    return dict(zip(test_tup[::2], test_tup[1::2]))\n",
    "    return dict(test_tup[i:i+2] for i in range(0, len(test_tup), 2))\n",
    "    return dict(zip(test_tup[::2], test_tup[1::2]))\n\nprint(tuple_to_dict((1, 2, 3, 4, 5, 6)))",
    "    return {test_tup[i]: test_tup[i+1] for i in range(0, len(test_tup), 2)}\n\nprint(tuple_to_dict((1, 2, 3, 4, 5, 6)))",
    "    return dict(zip(test_tup[::2], test_tup[1::2]))\n\n",
    "    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup), 2)}\n\n",
    "    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup), 2)}\n\n",
    "    return dict(zip(test_tup[::2], test_tup[1::2]))\n",
    "    return dict(zip(test_tup[::2], test_tup[1::2]))\n",
    "    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup), 2)}\n\n",
    "    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup), 2)}\n\n",
    "    return dict(zip(test_tup[::2], test_tup[1::2]))\n\nprint(tuple_to_dict((1, 2, 3, 4, 5, 6)))",
    "    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup), 2)}\n\n",
    "    return dict(zip(test_tup[::2], test_tup[1::2]))\n",
    "    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup), 2)}\n\n\ntest_tup = (1, 2, 3, 4, 5, 6, 7, 8)\nprint(tuple_to_dict(test_tup))",
    "    return dict(test_tup[i:i + 2] for i in range(0, len(test_tup), 2))\n\nprint(tuple_to_dict((1, 2, 3, 4, 5, 6)))",
    "    return dict(zip(test_tup[::2], test_tup[1::2]))\n\n",
    "    return dict(zip(test_tup[::2], test_tup[1::2]))\n\nprint(tuple_to_dict((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\n"
  ]
}