{
  "name": "mbpp_255_combinations_colors",
  "language": "py",
  "prompt": "from typing import List, Tuple\n\ndef combinations_colors(l: List[str], n: int) -> List[Tuple[str]]:\n    \"\"\"\n\tWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_255_combinations_colors.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate(['Red', 'Green', 'Blue'], 1) == [('Red',), ('Green',), ('Blue',)]\n    assert candidate(['Red', 'Green', 'Blue'], 2) == [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\n    assert candidate(['Red', 'Green', 'Blue'], 3) == [('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]\n\ndef test_check():\n    check(combinations_colors)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors(['red', 'blue', 'green'], 2))",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors(['red', 'blue', 'green'], 2))\nprint(combinations_colors(['red', 'blue', 'green'], 3))\nprint(combinations_colors(['red', 'blue', 'green'], 4))\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors(['red', 'blue', 'yellow'], 2))",
    "    if n == 1:\n        return [(x,) for x in l]\n    else:\n        return [(x,) + y for x in l for y in combinations_colors(l, n-1)]\n",
    "    return [tuple(x) for x in itertools.combinations_with_replacement(l, n)]\n\nprint(combinations_colors(['red', 'blue', 'green'], 2))",
    "    pass\n",
    "    pass\n",
    "    pass",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors(['red', 'blue', 'yellow'], 2))",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors(['red', 'blue', 'green'], 2))\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors(['red', 'blue', 'green'], 2))",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors(['red', 'blue', 'green'], 2))\nprint(combinations_colors(['red', 'blue', 'green'], 3))",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors(['red', 'blue', 'yellow'], 2))\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors([\"red\", \"blue\", \"green\"], 2))\nprint(combinations_colors([\"red\", \"blue\", \"green\"], 3))",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors(['red', 'blue', 'green'], 2))",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors(['red', 'blue', 'green'], 2))",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors(['red', 'blue', 'green'], 2))\n",
    "    return list(combinations_with_replacement(l, n))\n",
    "    return list(itertools.combinations_with_replacement(l, n))",
    "    if n == 0:\n        return [()]\n    else:\n        return [(x,) + y for x in l for y in combinations_colors(l, n - 1)]\n",
    "    pass",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    if n == 1:\n        return [(c,) for c in l]\n    else:\n        return [(c,) + t for c in l for t in combinations_colors(l, n-1)]\n\nprint(combinations_colors(['red', 'blue', 'yellow'], 2))",
    "    return [tuple(combination) for combination in itertools.combinations_with_replacement(l, n)]\n\nprint(combinations_colors(['red', 'blue', 'green'], 2))\n",
    "    pass\n",
    "    return list(combinations_with_replacement(l, n))\n",
    "    pass\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    pass",
    "    pass",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    if n == 0:\n        return [()]\n    if len(l) == 0:\n        return []\n    return [(l[0],) + c for c in combinations_colors(l, n - 1)] + combinations_colors(l[1:], n)\n\nprint(combinations_colors(['red', 'blue', 'green'], 2))",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors([\"red\", \"blue\", \"green\"], 2))",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    pass\n",
    "    return [tuple(comb) for comb in itertools.combinations_with_replacement(l, n)]\n\nprint(combinations_colors(['red', 'blue', 'green'], 2))\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors([\"red\", \"blue\", \"green\"], 2))",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors([\"red\", \"blue\", \"yellow\"], 2))",
    "    return [tuple(comb) for comb in itertools.combinations_with_replacement(l, n)]\n\nprint(combinations_colors(['red', 'blue', 'yellow'], 2))",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors(['red', 'blue', 'yellow'], 2))\n",
    "    return [tuple(x) for x in itertools.combinations_with_replacement(l, n)]\n",
    "    if n == 1:\n        return [(x,) for x in l]\n    else:\n        return [(x,) + y for x in l for y in combinations_colors(l, n - 1)]\n\nprint(combinations_colors(['red', 'blue', 'yellow'], 2))",
    "    pass",
    "    pass\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors(['red', 'blue', 'green'], 2))\n",
    "    if n == 0:\n        return []\n    elif n == 1:\n        return [(x,) for x in l]\n    else:\n        return [(x,) + y for x in l for y in combinations_colors(l, n - 1)]\n\nprint(combinations_colors([\"red\", \"blue\", \"green\"], 2))",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors(['red', 'blue', 'yellow'], 2))",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    pass\n",
    "    return list(itertools.combinations_with_replacement(l, n))",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    pass",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    pass\n",
    "    return [tuple(comb) for comb in itertools.combinations_with_replacement(l, n)]\n",
    "    pass\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    pass\n",
    "    pass\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors([\"red\", \"blue\", \"yellow\"], 2))\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors(['red', 'blue', 'green'], 2))\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors(['red', 'blue', 'yellow'], 2))\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    return list(combinations_with_replacement(l, n))\n",
    "    return list(combinations_with_replacement(l, n))\n",
    "    pass\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors(['red', 'blue', 'green'], 2))",
    "    return [tuple(x) for x in itertools.combinations_with_replacement(l, n)]\n\nprint(combinations_colors([\"red\", \"blue\", \"yellow\"], 2))",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors([\"red\", \"blue\", \"green\"], 2))",
    "    return list(itertools.combinations_with_replacement(l, n))",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    if n == 0:\n        return [()]\n    elif l == []:\n        return []\n    else:\n        return [(l[0],) + c for c in combinations_colors(l, n-1)] + combinations_colors(l[1:], n)\n",
    "    return [tuple(x) for x in itertools.combinations_with_replacement(l, n)]\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    if n == 1:\n        return [(x,) for x in l]\n    else:\n        return [(x,) + y for x in l for y in combinations_colors(l, n - 1)]\n\nprint(combinations_colors([\"red\", \"blue\", \"green\"], 2))\nprint(combinations_colors([\"red\", \"blue\", \"green\"], 3))\nprint(combinations_colors([\"red\", \"blue\", \"green\"], 4))\nprint(combinations_colors([\"red\", \"blue\", \"green\"], 5))",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors([\"red\", \"blue\", \"yellow\"], 2))",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors(['red', 'blue', 'green'], 2))\n",
    "    return list(combinations_with_replacement(l, n))",
    "    if n == 0:\n        return [()]\n    elif len(l) == 0:\n        return []\n    else:\n        return [(l[0],) + c for c in combinations_colors(l, n-1)] + combinations_colors(l[1:], n)\n",
    "    pass\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors(['red', 'blue', 'yellow'], 2))",
    "    return [tuple(comb) for comb in itertools.combinations_with_replacement(l, n)]\n\nprint(combinations_colors(['red', 'blue', 'green'], 2))",
    "    return [tuple(i) for i in itertools.combinations_with_replacement(l, n)]\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors(['red', 'blue', 'green'], 2))\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors(['red', 'blue', 'green'], 2))\n",
    "    return [tuple(combination) for combination in itertools.combinations_with_replacement(l, n)]",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors([\"red\", \"blue\", \"green\"], 2))",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    pass\n",
    "    if n == 1:\n        return [(x,) for x in l]\n    else:\n        return [(x,) + y for x in l for y in combinations_colors(l, n - 1)]\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    pass",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors(['red', 'blue', 'yellow'], 2))",
    "    return list(itertools.combinations_with_replacement(l, n))",
    "    return [tuple(comb) for comb in itertools.combinations_with_replacement(l, n)]\n\nprint(combinations_colors(['red', 'blue', 'green'], 2))",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    if n == 0:\n        return [()]\n    else:\n        return [(x,) + c for x in l for c in combinations_colors(l, n - 1)]\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    pass\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    pass\n",
    "    pass",
    "    return [tuple(combination) for combination in itertools.combinations_with_replacement(l, n)]\n",
    "    if n == 0:\n        return [()]\n    if len(l) == 0:\n        return []\n    return [(l[0],) + c for c in combinations_colors(l, n - 1)] + combinations_colors(l[1:], n)\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors(['red', 'blue', 'yellow'], 2))",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors([\"red\", \"blue\", \"yellow\"], 2))\nprint(combinations_colors([\"red\", \"blue\", \"yellow\"], 3))\nprint(combinations_colors([\"red\", \"blue\", \"yellow\"], 4))",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors(['red', 'blue', 'green'], 2))\n",
    "    return [tuple(combination) for combination in itertools.combinations_with_replacement(l, n)]\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    pass\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    return [tuple(comb) for comb in itertools.combinations_with_replacement(l, n)]\n",
    "    pass",
    "    if n == 0:\n        return [()]\n    elif len(l) == 0:\n        return []\n    else:\n        with_first = combinations_colors(l, n - 1)\n        for i in range(len(with_first)):\n            with_first[i] = (l[0],) + with_first[i]\n        without_first = combinations_colors(l[1:], n)\n        return with_first + without_first\n",
    "    return [tuple(x) for x in itertools.combinations_with_replacement(l, n)]\n\nprint(combinations_colors(['red', 'blue', 'green'], 2))",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    pass\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors(['red', 'blue', 'green'], 2))",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors(['red', 'blue', 'green'], 2))",
    "    if n == 0:\n        return [()]\n    elif len(l) == 0:\n        return []\n    else:\n        return [(l[0],) + c for c in combinations_colors(l, n - 1)] + combinations_colors(l[1:], n)\n",
    "    pass",
    "    if n == 1:\n        return [(x,) for x in l]\n    else:\n        return [(x,) + y for x in l for y in combinations_colors(l, n - 1)]\n\nprint(combinations_colors(['red', 'blue', 'green'], 2))",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    pass",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    if n == 0:\n        return []\n    if n == 1:\n        return [(x,) for x in l]\n    return [(x,) + y for x in l for y in combinations_colors(l, n - 1)]\n",
    "    if n == 0:\n        return [()]\n    elif l == []:\n        return []\n    else:\n        with_first = combinations_colors(l, n - 1)\n        for i in range(len(with_first)):\n            with_first[i] = with_first[i] + (l[0],)\n        without_first = combinations_colors(l[1:], n)\n        return with_first + without_first\n\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors([\"red\", \"blue\", \"yellow\"], 2))\nprint(combinations_colors([\"red\", \"blue\", \"yellow\"], 3))\n",
    "    if n == 0:\n        return []\n    if n == 1:\n        return [(x,) for x in l]\n    return [(x,) + y for x in l for y in combinations_colors(l, n - 1)]\n\n\nprint(combinations_colors(['red', 'blue', 'green'], 2))\nprint(combinations_colors(['red', 'blue', 'green'], 3))\nprint(combinations_colors(['red', 'blue', 'green'], 4))\nprint(combinations_colors(['red', 'blue', 'green'], 5))",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    pass",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors(['red', 'blue', 'green'], 2))\n",
    "    if n == 0:\n        return [()]\n    elif len(l) == 0:\n        return []\n    else:\n        return [(l[0],) + c for c in combinations_colors(l, n-1)] + combinations_colors(l[1:], n)\n\nprint(combinations_colors(['red', 'blue', 'yellow'], 2))",
    "    pass",
    "    pass",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors([\"red\", \"blue\", \"yellow\"], 2))",
    "    if n == 1:\n        return [(i,) for i in l]\n    else:\n        return [(i,) + j for i in l for j in combinations_colors(l, n-1)]\n\nprint(combinations_colors(['red', 'blue', 'green'], 2))\nprint(combinations_colors(['red', 'blue', 'green'], 3))\nprint(combinations_colors(['red', 'blue', 'green'], 4))",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    if n == 0:\n        return [()]\n    else:\n        return [(x,) + y for x in l for y in combinations_colors(l, n - 1)]\n\nprint(combinations_colors(['red', 'blue', 'green'], 2))\nprint(combinations_colors(['red', 'blue', 'green'], 3))\nprint(combinations_colors(['red', 'blue', 'green'], 4))\nprint(combinations_colors(['red', 'blue', 'green'], 5))\nprint(combinations_colors(['red', 'blue', 'green'], 6))\nprint(combinations_colors(['red', 'blue', 'green'], 7))\nprint(combinations_colors(['red', 'blue', 'green'], 8))\nprint(combinations_colors(['red', 'blue', 'green'], 9))\nprint(combinations_colors(['red', 'blue', 'green'], 10))\nprint(combinations_colors(['red', 'blue', 'green'], 11))\nprint(combinations_colors(['red', 'blue', 'green'], 12))\nprint(combinations_colors(['red', 'blue', 'green'], 13))\nprint(combinations_colors(['red', 'blue', 'green'], 14))\nprint(combinations_colors(['red', 'blue', 'green'], 15))\nprint(combinations_colors(['red', 'blue', 'green'], 16))\nprint(combinations_colors(['red', 'blue', 'green'], 17))\nprint(combinations_colors(['red', 'blue', 'green'], 18))\nprint(combinations_colors(['red', 'blue', 'green'], 19))\nprint(combinations_colors(['red', 'blue', 'green'], 20))\nprint(combinations_colors(['red', 'blue', 'green'], 21))\nprint(combinations_colors(['red', 'blue', 'green'], 22))\nprint(combinations_colors(['red', 'blue', 'green'], 23))\nprint(combinations_",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors(['red', 'blue', 'green'], 2))",
    "    return list(combinations_with_replacement(l, n))\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors(['red', 'blue', 'green'], 2))\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    if n == 1:\n        return [(i,) for i in l]\n    else:\n        return [(i,) + j for i in l for j in combinations_colors(l, n - 1)]\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors(['red', 'blue', 'yellow'], 2))",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors([\"red\", \"blue\", \"green\"], 2))",
    "    pass\n",
    "    return [tuple(comb) for comb in itertools.combinations_with_replacement(l, n)]\n\nprint(combinations_colors(['red', 'blue', 'green'], 2))\nprint(combinations_colors(['red', 'blue', 'green'], 3))",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    if n == 1:\n        return [(x,) for x in l]\n    else:\n        return [(x,) + y for x in l for y in combinations_colors(l, n - 1)]\n\nprint(combinations_colors(['red', 'blue', 'green'], 2))",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    if n == 1:\n        return [(x,) for x in l]\n    else:\n        return [(x,) + y for x in l for y in combinations_colors(l, n - 1)]\n\nprint(combinations_colors(['red', 'green', 'blue'], 2))",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors(['red', 'blue', 'yellow'], 2))\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    pass\n",
    "    pass\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    if n == 0:\n        return [()]\n    elif len(l) == 0:\n        return []\n    else:\n        return [(l[0],) + x for x in combinations_colors(l, n - 1)] + combinations_colors(l[1:], n)\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    return [tuple(combination) for combination in itertools.combinations_with_replacement(l, n)]",
    "    if n == 0:\n        return [()]\n    elif l == []:\n        return []\n    else:\n        with_first = combinations_colors(l, n - 1)\n        for i in range(len(with_first)):\n            with_first[i] += (l[0],)\n        without_first = combinations_colors(l[1:], n)\n        return with_first + without_first\n\nprint(combinations_colors([\"red\", \"blue\", \"green\"], 2))",
    "    if n == 0:\n        return []\n    if n == 1:\n        return [(i,) for i in l]\n    return [(i,) + j for i in l for j in combinations_colors(l, n - 1)]\n",
    "    return [tuple(x) for x in itertools.combinations_with_replacement(l, n)]\n",
    "    pass",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors([\"red\", \"blue\", \"green\"], 2))",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors([\"red\", \"blue\", \"green\"], 2))",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors([\"red\", \"blue\", \"yellow\"], 2))\n",
    "    if n == 0:\n        return []\n    if n == 1:\n        return [(x,) for x in l]\n    else:\n        return [(x,) + y for x in l for y in combinations_colors(l, n-1)]\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors(['red', 'blue', 'yellow'], 2))\nprint(combinations_colors(['red', 'blue', 'yellow'], 3))\nprint(combinations_colors(['red', 'blue', 'yellow'], 4))\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors(['red', 'blue', 'green'], 2))",
    "    return list(itertools.combinations_with_replacement(l, n))\n\nprint(combinations_colors(['red', 'blue', 'green'], 2))\n",
    "    return [tuple(comb) for comb in itertools.combinations_with_replacement(l, n)]\n\nprint(combinations_colors([\"red\", \"blue\", \"green\"], 2))"
  ]
}