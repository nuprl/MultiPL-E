{
  "name": "mbpp_454_text_match_wordz",
  "language": "py",
  "prompt": "def text_match_wordz(text: str) -> bool:\n    \"\"\"\n\tWrite a function that matches a word containing 'z'.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_454_text_match_wordz.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate('pythonz.') == True\n    assert candidate('xyz.') == True\n    assert candidate('  lang  .') == False\n\ndef test_check():\n    check(text_match_wordz)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return re.search(r\"\\bz\\w+\", text) is not None\n\n",
    "    return re.search(r\"\\bz\\w+\", text) is not None\n\n",
    "    return re.search(r\"\\bz\\w+\", text)\n\n",
    "    return re.search(r\"\\w*z\\w*\", text) is not None\n\n",
    "    return re.search(r\"\\w*z\\w*\", text) is not None\n\n",
    "    return re.search(r\"\\bz\\w*\\b\", text) is not None\n\n",
    "    return re.search(r\"\\bz\\w+\\b\", text)\n\n",
    "    return re.search(r\"\\bz\\w+\", text) is not None\n\n",
    "    return re.search(r\"\\w*z\\w*\", text)\n\n",
    "    return re.search(r\"\\bz\\w+\", text) is not None\n\n",
    "    return re.search(r\"\\bz\\w+\\b\", text) is not None\n\n",
    "    return re.search(r\"\\bz\\w+\\b\", text) is not None\n\n",
    "    return re.search(r\"\\w*z\\w*\", text) is not None\n\n",
    "    return re.search(r\"\\w*z\\w*\", text) is not None\n\n",
    "    return re.search(r\"\\w*z\\w*\", text) is not None\n\n",
    "    return re.search(r\"\\bz\\w+\\b\", text) is not None\n\n",
    "    return re.search(r\"\\w*z\\w*\", text) is not None\n\n",
    "    return re.search(r\"\\bz\\w+\\b\", text) is not None\n\n",
    "    return re.search(r\"\\bz\\w+\", text) is not None\n\n",
    "    return re.search(r\"\\w*z\\w*\", text)\n\n"
  ]
}