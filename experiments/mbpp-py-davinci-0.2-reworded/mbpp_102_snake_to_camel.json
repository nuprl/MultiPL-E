{
  "name": "mbpp_102_snake_to_camel",
  "language": "py",
  "prompt": "def snake_to_camel(word: str) -> str:\n    \"\"\"\n\tWrite a function to convert a snake case string to camel case string.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate('python_program') == 'PythonProgram'\n    assert candidate('python_language') == 'PythonLanguage'\n    assert candidate('programming_language') == 'ProgrammingLanguage'\n\ndef test_check():\n    check(snake_to_camel)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return \"\".join(x.capitalize() or \"_\" for x in word.split(\"_\"))\n\n",
    "    return \"\".join(x.capitalize() or \"_\" for x in word.split(\"_\"))\n\n",
    "    return \"\".join(x.capitalize() or \"_\" for x in word.split(\"_\"))\n\n",
    "    return \"\".join(x.capitalize() or \"_\" for x in word.split(\"_\"))\n\n",
    "    return \"\".join(x.capitalize() or \"_\" for x in word.split(\"_\"))\n\n",
    "    return \"\".join(x.capitalize() or \"_\" for x in word.split(\"_\"))\n\n",
    "    return \"\".join(x.capitalize() or \"_\" for x in word.split(\"_\"))\n\n",
    "    return \"\".join(x.capitalize() or \"_\" for x in word.split(\"_\"))\n\n",
    "    return \"\".join(x.capitalize() or \"_\" for x in word.split(\"_\"))\n\n",
    "    return \"\".join(x.capitalize() or \"_\" for x in word.split(\"_\"))\n\n",
    "    return \"\".join(x.capitalize() or \"_\" for x in word.split(\"_\"))\n\n",
    "    return \"\".join(x.capitalize() or \"_\" for x in word.split(\"_\"))\n\n",
    "    return \"\".join(x.title() for x in word.split(\"_\"))\n\n",
    "    return \"\".join(x.capitalize() or \"_\" for x in word.split(\"_\"))\n\n",
    "    return \"\".join(x.capitalize() or \"_\" for x in word.split(\"_\"))\n\n",
    "    return \"\".join(x.capitalize() or \"_\" for x in word.split(\"_\"))\n\n",
    "    return \"\".join(x.capitalize() or \"_\" for x in word.split(\"_\"))\n\n",
    "    return \"\".join(x.capitalize() or \"_\" for x in word.split(\"_\"))\n\n",
    "    return \"\".join(x.capitalize() or \"_\" for x in word.split(\"_\"))\n\n",
    "    return \"\".join(x.capitalize() or \"_\" for x in word.split(\"_\"))\n\n"
  ]
}