{
  "name": "mbpp_291_count_no_of_ways",
  "language": "py",
  "prompt": "def count_no_of_ways(n: int, k: int) -> int:\n    \"\"\"\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_291_count_no_of_ways.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate(2, 4) == 16\n    assert candidate(3, 2) == 6\n    assert candidate(4, 4) == 228\n\ndef test_check():\n    check(count_no_of_ways)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    same, diff = k, k * (k - 1)\n    for i in range(3, n + 1):\n        same, diff = diff, (same + diff) * (k - 1)\n    return same + diff\n\n",
    "    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n\n    same_color = k\n    diff_color = k * (k - 1)\n\n    for i in range(3, n + 1):\n        same_color, diff_color = diff_color, (same_color + diff_color) * (k - 1)\n\n    return same_color + diff_color\n\n",
    "    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n\n    same = k\n    diff = k * (k - 1)\n    for i in range(3, n + 1):\n        temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n\n    return same + diff\n\n",
    "    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n\n    same = k\n    diff = k * (k - 1)\n\n    for i in range(3, n + 1):\n        same, diff = diff, (same + diff) * (k - 1)\n\n    return same + diff\n\n",
    "    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n\n    same = k\n    diff = k * (k - 1)\n\n    for i in range(3, n + 1):\n        same, diff = diff, (same + diff) * (k - 1)\n\n    return same + diff\n\n",
    "    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n\n    same = k\n    diff = k * (k - 1)\n    for i in range(3, n + 1):\n        temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n\n    return same + diff\n\n",
    "    if k == 1:\n        return 0\n    elif n == 1:\n        return k\n    elif n == 2:\n        return k * k\n    else:\n        # ways[n] = ways[n-1] * (k-1) + ways[n-2] * (k-1)\n        ways = [0] * (n + 1)\n        ways[1] = k\n        ways[2] = k * k\n        for i in range(3, n + 1):\n            ways[i] = ways[i - 1] * (k - 1) + ways[i - 2] * (k - 1)\n        return ways[n]\n\n",
    "    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n    same = k\n    diff = k * (k - 1)\n    for i in range(3, n + 1):\n        temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    return same + diff\n\n",
    "    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n\n    same = k\n    diff = k * (k - 1)\n\n    for i in range(3, n + 1):\n        temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n\n    return same + diff\n\n",
    "    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n\n    same = k\n    diff = k * (k - 1)\n\n    for i in range(3, n + 1):\n        same, diff = diff, (same + diff) * (k - 1)\n\n    return same + diff\n\n",
    "    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    same = k\n    diff = k * (k - 1)\n    for _ in range(3, n + 1):\n        temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    return same + diff\n\n",
    "    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n    same = k\n    diff = k * (k - 1)\n    for i in range(3, n + 1):\n        temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    return same + diff\n\n",
    "    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n    same = k\n    diff = k * (k - 1)\n    for i in range(3, n + 1):\n        temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    return same + diff\n\n",
    "    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n\n    same_color_count = k\n    diff_color_count = k * (k - 1)\n\n    for i in range(3, n + 1):\n        temp = diff_color_count\n        diff_color_count = (same_color_count + diff_color_count) * (k - 1)\n        same_color_count = temp\n\n    return same_color_count + diff_color_count\n\n",
    "    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n\n    same = k\n    diff = k * (k - 1)\n\n    for i in range(3, n + 1):\n        temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n\n    return same + diff\n\n",
    "    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n\n    same_color = k\n    diff_color = k * (k - 1)\n    for i in range(3, n + 1):\n        same_color, diff_color = diff_color, (same_color + diff_color) * (k - 1)\n\n    return same_color + diff_color\n\n",
    "    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n\n    same = k\n    diff = k * (k - 1)\n\n    for i in range(3, n + 1):\n        same, diff = diff, (same + diff) * (k - 1)\n\n    return same + diff\n\n",
    "    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n\n    same = k\n    diff = k * (k - 1)\n\n    for i in range(3, n + 1):\n        same, diff = diff, (same + diff) * (k - 1)\n\n    return same + diff\n\n",
    "    if n == 1:\n        return k\n    elif n == 2:\n        return k * k\n    else:\n        same = k\n        diff = k * (k - 1)\n        for _ in range(3, n + 1):\n            same, diff = diff, (same + diff) * (k - 1)\n        return same + diff\n\n",
    "    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n\n    same = k\n    diff = k * (k - 1)\n\n    for i in range(3, n + 1):\n        temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n\n    return same + diff\n\n"
  ]
}