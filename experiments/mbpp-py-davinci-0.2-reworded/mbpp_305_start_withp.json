{
  "name": "mbpp_305_start_withp",
  "language": "py",
  "prompt": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_305_start_withp.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return tuple(filter(lambda word: word[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'pizza']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pepper', 'pizza', 'pancakes', 'pudding']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancakes', 'potatoes']))",
    "    return tuple(filter(lambda word: word[0] == 'p', words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'peach']))",
    "    return tuple(filter(lambda word: word.startswith('p'), words))\n\n\nprint(start_withp(['pumpkin', 'pie', 'pudding', 'pancakes', 'pizza']))",
    "    return tuple(filter(lambda x: x[0] == 'p', words))\n",
    "    return tuple(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'pizza']))",
    "    return tuple(filter(lambda word: word[0] == 'p', words))",
    "    return [word for word in words if word[0] == 'p']\n\n",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n",
    "    return tuple(word for word in words if word[0] == 'p')\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n\nprint(start_withp(['pumpkin', 'pie', 'apple', 'pear', 'plum']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n",
    "    return [word for word in words if word[0] == 'p']\n\nprint(start_withp(['pumpkin', 'pie', 'pear', 'apple', 'peach', 'pineapple']))",
    "    return tuple(filter(lambda x: x.startswith('p'), words))\n",
    "    return [word for word in words if word[0] == 'p']\n",
    "    return tuple(filter(lambda x: x[0] == 'p', words))\n"
  ]
}