{
  "name": "mbpp_442_positive_count",
  "language": "py",
  "prompt": "from typing import List\n\ndef positive_count(nums: List[int]) -> float:\n    \"\"\"\n\tWrite a function to find the ration of positive numbers in an array of integers.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_442_positive_count.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54\n    assert candidate([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56\n\ndef test_check():\n    check(positive_count)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return sum(1 for num in nums if num > 0) / len(nums)",
    "    return sum(n > 0 for n in nums) / len(nums)\n",
    "    return sum(1 for n in nums if n > 0) / len(nums)",
    "    return sum(1 for num in nums if num > 0) / len(nums)\n\nprint(positive_count([1, 2, 3, 4, 5]))\nprint(positive_count([1, -2, 3, -4, 5]))\nprint(positive_count([-1, -2, -3, -4, -5]))",
    "    return sum(n > 0 for n in nums) / len(nums)\n\nprint(positive_count([1, 2, 3, 4, 5]))\nprint(positive_count([-1, -2, -3, -4, -5]))\nprint(positive_count([1, -2, 3, -4, 5]))\nprint(positive_count([1, 2, 3, 4, -5]))\nprint(positive_count([-1, -2, -3, -4, 5]))\nprint(positive_count([-1, 2, -3, 4, -5]))\nprint(positive_count([1, -2, 3, 4, -5]))\nprint(positive_count([1, 2, -3, 4, -5]))\nprint(positive_count([1, 2, 3, -4, -5]))\nprint(positive_count([-1, -2, 3, 4, 5]))\nprint(positive_count([-1, 2, 3, -4, 5]))\nprint(positive_count([-1, 2, 3, 4, -5]))\nprint(positive_count([1, -2, -3, 4, 5]))\nprint(positive_count([1, -2, 3, -4, 5]))\nprint(positive_count([1, 2, -3, -4, 5]))\nprint(positive_count([1, 2, -3, 4, -5]))\nprint(positive_count([1, 2, 3, -4, 5]))\nprint(positive_count([-1, -2, -3, 4, 5]))\nprint(positive_count([-1, -2, 3, -4, 5]))\nprint(positive_count([-1, -2, 3, 4, -5]))\nprint(positive_count([-1, 2, -3, -4, 5]))\nprint(positive_count([-1, 2, -3, 4, -5]))\nprint(positive_count([-1, 2, 3, -4, 5]))\nprint(positive_count([1, -2, -3, -4, 5]))\nprint(",
    "    return sum(1 for num in nums if num > 0) / len(nums)",
    "    return sum(1 for num in nums if num > 0) / len(nums)",
    "    return len([x for x in nums if x > 0]) / len(nums)",
    "    return len([num for num in nums if num > 0]) / len(nums)\n",
    "    return sum(n > 0 for n in nums) / len(nums)\n\nprint(positive_count([1, 2, 3, 4, 5]))\nprint(positive_count([1, -2, 3, -4, 5]))\nprint(positive_count([-1, -2, -3, -4, -5]))",
    "    return sum(1 for num in nums if num > 0) / len(nums)",
    "    return sum(n > 0 for n in nums) / len(nums)",
    "    return sum(n > 0 for n in nums) / len(nums)\n",
    "    return len([num for num in nums if num > 0]) / len(nums)\n\nprint(positive_count([1, 2, 3, 4, 5]))\nprint(positive_count([1, -2, 3, -4, 5]))\nprint(positive_count([-1, -2, -3, -4, -5]))\nprint(positive_count([0, 0, 0, 0, 0]))",
    "    return sum(n > 0 for n in nums) / len(nums)\n",
    "    return sum(map(lambda x: 1 if x > 0 else 0, nums)) / len(nums)\n",
    "    return sum(n > 0 for n in nums) / len(nums)",
    "    return len([x for x in nums if x > 0]) / len(nums)\n",
    "    return sum(map(lambda x: x > 0, nums)) / len(nums)",
    "    return len([num for num in nums if num > 0]) / len(nums)\n",
    "    return sum(1 for num in nums if num > 0) / len(nums)\n",
    "    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n\nprint(positive_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15]))",
    "    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n\nprint(positive_count([1, 2, 3, -1, -2, -3]))",
    "    return sum(1 for num in nums if num > 0) / len(nums)\n",
    "    return sum(n > 0 for n in nums) / len(nums)",
    "    return len([num for num in nums if num > 0]) / len(nums)\n\nprint(positive_count([1, 2, 3, 4, 5]))\nprint(positive_count([1, -2, 3, -4, 5]))\nprint(positive_count([-1, -2, -3, -4, -5]))",
    "    return sum(n > 0 for n in nums) / len(nums)",
    "    return sum(1 for num in nums if num > 0) / len(nums)",
    "    return sum(1 for num in nums if num > 0) / len(nums)\n\n",
    "    return sum(1 for num in nums if num > 0) / len(nums)\n\nprint(positive_count([1, 2, 3, 4, 5]))",
    "    return sum(1 for num in nums if num > 0) / len(nums)\n",
    "    return sum(n > 0 for n in nums) / len(nums)",
    "    return len([i for i in nums if i > 0]) / len(nums)\n\nprint(positive_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15]))",
    "    return len([x for x in nums if x > 0]) / len(nums)",
    "    return sum(1 for x in nums if x > 0) / len(nums)\n\nprint(positive_count([1, 2, 3, 4, 5]))\nprint(positive_count([1, -2, 3, -4, 5]))\nprint(positive_count([-1, -2, -3, -4, -5]))",
    "    return sum(map(lambda x: 1 if x > 0 else 0, nums)) / len(nums)\n",
    "    return sum(n > 0 for n in nums) / len(nums)",
    "    return sum(n > 0 for n in nums) / len(nums)\n",
    "    return sum(n > 0 for n in nums) / len(nums)",
    "    return sum(i > 0 for i in nums) / len(nums)\n",
    "    return len([num for num in nums if num > 0]) / len(nums)",
    "    return sum(n > 0 for n in nums) / len(nums)",
    "    return sum(1 for num in nums if num > 0) / len(nums)",
    "    return sum(1 for num in nums if num > 0) / len(nums)\n\nprint(positive_count([1, 2, 3, 4, 5]))\nprint(positive_count([-1, -2, -3, -4, -5]))\nprint(positive_count([1, -2, 3, -4, 5]))\nprint(positive_count([-1, 2, -3, 4, -5]))",
    "    return sum(1 for num in nums if num > 0) / len(nums)\n\nprint(positive_count([1, -1, 2, -2, 3, -3]))",
    "    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)",
    "    return sum(1 for num in nums if num > 0) / len(nums)",
    "    return sum(1 for num in nums if num > 0) / len(nums)\n",
    "    return sum(1 for num in nums if num > 0) / len(nums)",
    "    positive = 0\n    for num in nums:\n        if num > 0:\n            positive += 1\n    return positive / len(nums)",
    "    return sum(n > 0 for n in nums) / len(nums)\n\nprint(positive_count([1, 2, 3, 4, 5]))\nprint(positive_count([1, -2, 3, -4, 5]))\nprint(positive_count([-1, -2, -3, -4, -5]))",
    "    return sum(n > 0 for n in nums) / len(nums)",
    "    return sum(1 for num in nums if num > 0) / len(nums)\n",
    "    return sum(n > 0 for n in nums) / len(nums)\n",
    "    return len([num for num in nums if num > 0]) / len(nums)\n",
    "    return sum(x > 0 for x in nums) / len(nums)\n\nprint(positive_count([1, 2, 3, -1, -2, -3]))\nprint(positive_count([1, 2, 3, -1, -2, -3, 0]))\nprint(positive_count([1, 2, 3, -1, -2, -3, 0, 0]))",
    "    return sum(1 for num in nums if num > 0) / len(nums)",
    "    return sum(n > 0 for n in nums) / len(nums)\n\nprint(positive_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15]))\nprint(positive_count([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))\nprint(positive_count([0, 0, 0, 0, 0, 0, 0, 0, 0]))",
    "    return len([num for num in nums if num > 0]) / len(nums)\n\nprint(positive_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15]))\n",
    "    return sum(map(lambda x: 1 if x > 0 else 0, nums)) / len(nums)\n",
    "    return sum(n > 0 for n in nums) / len(nums)",
    "    return len([num for num in nums if num > 0]) / len(nums)\n",
    "    return sum(1 for num in nums if num > 0) / len(nums)",
    "    return sum(1 for num in nums if num > 0) / len(nums)",
    "    return len([num for num in nums if num > 0]) / len(nums)\n\n",
    "    return len([num for num in nums if num > 0]) / len(nums)",
    "    return len([num for num in nums if num > 0]) / len(nums)\n",
    "    return sum(1 for num in nums if num > 0) / len(nums)\n",
    "    return sum(1 for num in nums if num > 0) / len(nums)\n\n",
    "    return sum(1 for num in nums if num > 0) / len(nums)\n\nprint(positive_count([1, 2, 3, 4, 5]))\nprint(positive_count([1, -2, 3, -4, 5]))\nprint(positive_count([-1, -2, -3, -4, -5]))",
    "    return len([x for x in nums if x > 0]) / len(nums)\n\n",
    "    return sum(n > 0 for n in nums) / len(nums)",
    "    return len([num for num in nums if num > 0]) / len(nums)",
    "    return sum(1 for num in nums if num > 0) / len(nums)\n\n",
    "    return len([num for num in nums if num > 0]) / len(nums)",
    "    return len([x for x in nums if x > 0]) / len(nums)\n",
    "    # Your code here\n    return sum([1 for x in nums if x > 0]) / len(nums)\n\n",
    "    return sum(n > 0 for n in nums) / len(nums)\n",
    "    return sum(n > 0 for n in nums) / len(nums)",
    "    return sum(1 for num in nums if num > 0) / len(nums)",
    "    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)",
    "    return sum(1 for num in nums if num > 0) / len(nums)",
    "    return len([num for num in nums if num > 0]) / len(nums)",
    "    return sum([1 for x in nums if x > 0]) / len(nums)",
    "    return sum(n > 0 for n in nums) / len(nums)",
    "    return sum(1 for num in nums if num > 0) / len(nums)",
    "    return sum(1 for num in nums if num > 0) / len(nums)",
    "    return sum(n > 0 for n in nums) / len(nums)",
    "    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n\nprint(positive_count([1, 2, 3, 4, 5]))\nprint(positive_count([1, -2, 3, -4, 5]))\nprint(positive_count([-1, -2, -3, -4, -5]))",
    "    return sum(n > 0 for n in nums) / len(nums)",
    "    return len([x for x in nums if x > 0]) / len(nums)\n",
    "    return sum(1 for num in nums if num > 0) / len(nums)\n\nprint(positive_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15]))",
    "    return sum(1 for num in nums if num > 0) / len(nums)",
    "    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)",
    "    return len([num for num in nums if num > 0]) / len(nums)",
    "    return sum(1 for num in nums if num > 0) / len(nums)",
    "    return len([num for num in nums if num > 0]) / len(nums)\n\nprint(positive_count([1, -2, 3, 4, 5]))",
    "    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)",
    "    return sum(1 for num in nums if num > 0) / len(nums)\n",
    "    return sum(n > 0 for n in nums) / len(nums)\n",
    "    return len([x for x in nums if x > 0]) / len(nums)\n\nprint(positive_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15]))\nprint(positive_count([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))\nprint(positive_count([0, 0, 0, 0, 0, 0, 0, 0, 0]))",
    "    return len([i for i in nums if i > 0]) / len(nums)",
    "    return sum(nums) / len(nums)",
    "    return sum(1 for num in nums if num > 0) / len(nums)\n\nprint(positive_count([1, 2, 3, 4, 5]))\nprint(positive_count([-1, -2, -3, -4, -5]))\nprint(positive_count([0, 0, 0, 0, 0]))",
    "    return sum(1 for num in nums if num > 0) / len(nums)",
    "    return sum(n > 0 for n in nums) / len(nums)\n\nprint(positive_count([1, 2, 3, 4, 5]))\nprint(positive_count([1, -2, 3, -4, 5]))\nprint(positive_count([-1, -2, -3, -4, -5]))",
    "    return sum(n > 0 for n in nums) / len(nums)",
    "    return sum(n > 0 for n in nums) / len(nums)",
    "    return sum(x > 0 for x in nums) / len(nums)\n\nprint(positive_count([1, 2, 3, 4, 5]))\nprint(positive_count([1, -2, 3, -4, 5]))\nprint(positive_count([-1, -2, -3, -4, -5]))",
    "    return sum(n > 0 for n in nums) / len(nums)\n",
    "    return len([x for x in nums if x > 0]) / len(nums)",
    "    return sum(1 for num in nums if num > 0) / len(nums)",
    "    return sum(1 for num in nums if num > 0) / len(nums)",
    "    return sum(n > 0 for n in nums) / len(nums)",
    "    return sum(n > 0 for n in nums) / len(nums)",
    "    return sum(n > 0 for n in nums) / len(nums)\n",
    "    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)\n\nprint(positive_count([1, 2, 3, 4, 5]))\nprint(positive_count([-1, -2, -3, -4, -5]))\nprint(positive_count([0, 0, 0, 0, 0]))\nprint(positive_count([1, -1, 1, -1, 1]))",
    "    return sum(n > 0 for n in nums) / len(nums)\n",
    "    return sum(1 for num in nums if num > 0) / len(nums)\n",
    "    return sum(1 for num in nums if num > 0) / len(nums)",
    "    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n\nprint(positive_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15]))",
    "    return len([x for x in nums if x > 0]) / len(nums)\n",
    "    return sum(1 for num in nums if num > 0) / len(nums)\n\nprint(positive_count([1, 2, 3, 4, 5]))\nprint(positive_count([1, -2, 3, -4, 5]))\nprint(positive_count([-1, -2, -3, -4, -5]))",
    "    return sum(n > 0 for n in nums) / len(nums)",
    "    return sum(n > 0 for n in nums) / len(nums)",
    "    return sum(n > 0 for n in nums) / len(nums)\n",
    "    return sum(n > 0 for n in nums) / len(nums)",
    "    return len([num for num in nums if num > 0]) / len(nums)\n",
    "    return sum(1 for num in nums if num > 0) / len(nums)",
    "    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)",
    "    return sum(1 for num in nums if num > 0) / len(nums)",
    "    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n",
    "    return sum(nums) / len(nums)",
    "    return sum(1 for num in nums if num > 0) / len(nums)",
    "    return sum(n > 0 for n in nums) / len(nums)",
    "    return sum(1 for num in nums if num > 0) / len(nums)",
    "    return sum(n > 0 for n in nums) / len(nums)",
    "    return len([x for x in nums if x > 0]) / len(nums)",
    "    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)\n\nprint(positive_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15]))",
    "    return sum(i > 0 for i in nums) / len(nums)",
    "    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n",
    "    return sum(1 for num in nums if num > 0) / len(nums)\n",
    "    return sum(1 for num in nums if num > 0) / len(nums)",
    "    return sum(1 for num in nums if num > 0) / len(nums)",
    "    return len([num for num in nums if num > 0]) / len(nums)\n\n",
    "    return len([num for num in nums if num > 0]) / len(nums)",
    "    return sum(n > 0 for n in nums) / len(nums)\n\nprint(positive_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15]))",
    "    return len([x for x in nums if x > 0]) / len(nums)\n",
    "    return sum(1 for num in nums if num > 0) / len(nums)",
    "    return sum(1 for num in nums if num > 0) / len(nums)",
    "    return len([x for x in nums if x > 0]) / len(nums)\n",
    "    return len([x for x in nums if x > 0]) / len(nums)\n",
    "    return sum(1 for num in nums if num > 0) / len(nums)\n",
    "    return sum(1 for num in nums if num > 0) / len(nums)\n",
    "    return sum(1 for num in nums if num > 0) / len(nums)",
    "    return len([x for x in nums if x > 0]) / len(nums)",
    "    return sum(n > 0 for n in nums) / len(nums)\n\nprint(positive_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15]))",
    "    return sum(n > 0 for n in nums) / len(nums)",
    "    return sum(1 for num in nums if num > 0) / len(nums)",
    "    positives = 0\n    for num in nums:\n        if num > 0:\n            positives += 1\n    return positives / len(nums)\n",
    "    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n\nprint(positive_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15]))\nprint(positive_count([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))\nprint(positive_count([0, 0, 0, 0, 0, 0, 0, 0, 0]))",
    "    return sum(nums) / len(nums)\n\nprint(positive_count([1, -1, 2, -2, 3, -3]))",
    "    return sum(n > 0 for n in nums) / len(nums)",
    "    return sum(1 for num in nums if num > 0) / len(nums)\n",
    "    return sum(1 for num in nums if num > 0) / len(nums)\n\nprint(positive_count([1, -2, 3, -4, 5, -6, 7, -8]))",
    "    return len([x for x in nums if x > 0]) / len(nums)\n",
    "    return sum(1 for num in nums if num > 0) / len(nums)\n",
    "    return sum(x > 0 for x in nums) / len(nums)\n\nprint(positive_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15]))\n",
    "    return sum(n > 0 for n in nums) / len(nums)",
    "    return sum(1 for num in nums if num > 0) / len(nums)",
    "    return sum(n > 0 for n in nums) / len(nums)",
    "    return sum(x > 0 for x in nums) / len(nums)",
    "    return sum(n > 0 for n in nums) / len(nums)",
    "    return sum(1 for num in nums if num > 0) / len(nums)",
    "    return len([num for num in nums if num > 0]) / len(nums)\n",
    "    return sum(1 for num in nums if num > 0) / len(nums)",
    "    return sum(1 for num in nums if num > 0) / len(nums)",
    "    return sum(1 for num in nums if num > 0) / len(nums)\n\nprint(positive_count([1, 2, 3, 4, 5]))\nprint(positive_count([1, -2, 3, -4, 5]))\nprint(positive_count([-1, -2, -3, -4, -5]))",
    "    return sum(1 for num in nums if num > 0) / len(nums)",
    "    return sum(1 for num in nums if num > 0) / len(nums)",
    "    return sum(n > 0 for n in nums) / len(nums)",
    "    return sum(1 for num in nums if num > 0) / len(nums)",
    "    return sum(1 for num in nums if num > 0) / len(nums)",
    "    return len([x for x in nums if x > 0]) / len(nums)\n",
    "    return sum(n > 0 for n in nums) / len(nums)\n",
    "    return sum(1 for num in nums if num > 0) / len(nums)\n\nprint(positive_count([1, 2, 3, 4, 5]))\nprint(positive_count([1, -2, 3, -4, 5]))\nprint(positive_count([-1, -2, -3, -4, -5]))",
    "    return sum(n > 0 for n in nums) / len(nums)\n",
    "    return sum(1 for num in nums if num > 0) / len(nums)",
    "    return sum(1 for num in nums if num > 0) / len(nums)",
    "    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count / len(nums)\n",
    "    return sum(1 for num in nums if num > 0) / len(nums)\n\nprint(positive_count([1, 2, 3, 4, 5]))\nprint(positive_count([1, -2, 3, -4, 5]))\nprint(positive_count([-1, -2, -3, -4, -5]))",
    "    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)\n",
    "    return len([num for num in nums if num > 0]) / len(nums)",
    "    return len([num for num in nums if num > 0]) / len(nums)\n",
    "    return len([x for x in nums if x > 0]) / len(nums)\n",
    "    return sum(n > 0 for n in nums) / len(nums)",
    "    return len([num for num in nums if num > 0]) / len(nums)",
    "    return sum(n > 0 for n in nums) / len(nums)",
    "    return sum([1 for num in nums if num > 0]) / len(nums)\n",
    "    return len([x for x in nums if x > 0]) / len(nums)\n\nprint(positive_count([1, 2, 3, 4, 5]))\nprint(positive_count([1, -2, 3, -4, 5]))\nprint(positive_count([-1, -2, -3, -4, -5]))"
  ]
}