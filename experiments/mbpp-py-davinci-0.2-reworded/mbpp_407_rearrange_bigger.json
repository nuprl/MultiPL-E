{
  "name": "mbpp_407_rearrange_bigger",
  "language": "py",
  "prompt": "from typing import Any\n\ndef rearrange_bigger(n: int) -> Any:\n    \"\"\"\n\tWrite a function to create the next bigger number by rearranging the digits of a given number.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate(12) == 21\n    assert candidate(10) == False\n    assert candidate(102) == 120\n\ndef test_check():\n    check(rearrange_bigger)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    if n < 10:\n        return -1\n    n_str = str(n)\n    n_len = len(n_str)\n    for i in range(n_len - 1, 0, -1):\n        if n_str[i] > n_str[i - 1]:\n            break\n    if i == 1 and n_str[i] <= n_str[i - 1]:\n        return -1\n    x = n_str[i - 1]\n    smallest = i\n    for j in range(i + 1, n_len):\n        if n_str[j] > x and n_str[j] < n_str[smallest]:\n            smallest = j\n    n_str = n_str[:i - 1] + n_str[smallest] + ''.join(sorted(n_str[i - 1:smallest] + n_str[smallest + 1:]))\n    return int(n_str)\n",
    "    # convert number to list of digits\n    digits = [int(d) for d in str(n)]\n    # find the first digit that is smaller than the digit on its right\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i - 1] < digits[i]:\n            break\n    else:\n        return -1\n    # find the smallest digit that is larger than digits[i - 1]\n    for j in range(len(digits) - 1, i - 1, -1):\n        if digits[j] > digits[i - 1]:\n            break\n    # swap the two digits\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    # reverse the digits after i\n    digits[i:] = digits[len(digits) - 1: i - 1: -1]\n    return int(''.join(map(str, digits)))\n\nprint(rearrange_bigger(123))\nprint(rearrange_bigger(1234))\nprint(rearrange_bigger(1243))\nprint(rearrange_bigger(1230))\nprint(rearrange_bigger(1235))\nprint(rearrange_bigger(12354))\nprint(rearrange_bigger(12354))\nprint(rearrange_bigger(12354))\nprint(rearrange_bigger(12354))\nprint(rearrange_bigger(12354))\nprint(rearrange_bigger(12354))\nprint(rearrange_bigger(12354))\nprint(rearrange_bigger(12354))\nprint(rearrange_bigger(12354))\nprint(rearrange_bigger(12354))\nprint(rearrange_bigger(12354))\nprint(rearrange_bigger(12354))\nprint(rearrange_bigger(12354))\nprint(rearrange_bigger(12354))\nprint(rearrange_bigger(12354))\nprint(rearrange_bigger(12354))\nprint(rearrange_bigger(12354))\nprint(rearrange_",
    "    digits = [int(x) for x in str(n)]\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return int(''.join(map(str, digits)))\n    return -1\n",
    "    n = str(n)\n    for i in range(len(n) - 1, 0, -1):\n        if n[i] > n[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(len(n) - 1, i - 1, -1):\n        if n[j] > n[i - 1]:\n            break\n    n = list(n)\n    n[i - 1], n[j] = n[j], n[i - 1]\n    n[i:] = n[len(n) - 1 : i - 1 : -1]\n    return int(\"\".join(n))\n\n",
    "    digits = [int(d) for d in str(n)]\n    for i in range(len(digits) - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            break\n    else:\n        return -1\n    for j in range(len(digits) - 1, i, -1):\n        if digits[j] > digits[i]:\n            digits[i], digits[j] = digits[j], digits[i]\n            break\n    digits[i + 1:] = reversed(digits[i + 1:])\n    return int(''.join(map(str, digits)))",
    "    if n < 10:\n        return -1\n\n    digits = [int(d) for d in str(n)]\n    i = len(digits) - 1\n    while i > 0 and digits[i] <= digits[i - 1]:\n        i -= 1\n    if i == 0:\n        return -1\n\n    j = len(digits) - 1\n    while digits[j] <= digits[i - 1]:\n        j -= 1\n\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    digits[i:] = digits[len(digits) - 1: i - 1: -1]\n\n    return int(''.join(map(str, digits)))",
    "    digits = [int(i) for i in str(n)]\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return int(''.join([str(i) for i in digits]))\n    return -1\n\n",
    "    n_str = str(n)\n    n_len = len(n_str)\n    for i in range(n_len - 2, -1, -1):\n        if n_str[i] < n_str[i + 1]:\n            break\n    else:\n        return -1\n    for j in range(n_len - 1, i, -1):\n        if n_str[j] > n_str[i]:\n            break\n    n_str = n_str[:i] + n_str[j] + ''.join(sorted(n_str[i:j] + n_str[j + 1:]))\n    return int(n_str)\n\n",
    "    n_str = str(n)\n    n_list = list(n_str)\n    n_list.sort(reverse=True)\n    n_list = ''.join(n_list)\n    if n_str == n_list:\n        return -1\n    else:\n        return int(n_list)\n",
    "    num_list = [int(x) for x in str(n)]\n    for i in range(len(num_list) - 1, 0, -1):\n        if num_list[i] > num_list[i - 1]:\n            num_list[i], num_list[i - 1] = num_list[i - 1], num_list[i]\n            break\n    else:\n        return -1\n    return int(\"\".join([str(x) for x in num_list]))\n\n",
    "    digits = [int(i) for i in str(n)]\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return int(''.join(map(str, digits)))\n    return -1",
    "    n_str = str(n)\n    n_len = len(n_str)\n    for i in range(n_len - 1, 0, -1):\n        if n_str[i] > n_str[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(n_len - 1, i - 1, -1):\n        if n_str[j] > n_str[i - 1]:\n            break\n    n_str = list(n_str)\n    n_str[i - 1], n_str[j] = n_str[j], n_str[i - 1]\n    n_str[i:] = n_str[i:][::-1]\n    return int(\"\".join(n_str))",
    "    if n < 10:\n        return -1\n    digits = [int(x) for x in str(n)]\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return int(''.join(str(x) for x in digits))\n    return -1\n",
    "    n_str = str(n)\n    n_list = list(n_str)\n    n_list.sort(reverse=True)\n    n_list = [int(i) for i in n_list]\n    n_list = [str(i) for i in n_list]\n    n_str = ''.join(n_list)\n    n_str = int(n_str)\n    return n_str\n",
    "    n_str = str(n)\n    n_list = list(n_str)\n    n_list.sort(reverse=True)\n    n_list = ''.join(n_list)\n    if n_str == n_list:\n        return -1\n    else:\n        return int(n_list)\n\nprint(rearrange_bigger(123))\nprint(rearrange_bigger(321))\nprint(rearrange_bigger(531))\nprint(rearrange_bigger(56789))\nprint(rearrange_bigger(98765))",
    "    n_str = str(n)\n    for i in range(len(n_str) - 1, 0, -1):\n        if n_str[i] > n_str[i - 1]:\n            break\n    else:\n        return -1\n    i -= 1\n    for j in range(len(n_str) - 1, i, -1):\n        if n_str[j] > n_str[i]:\n            break\n    n_str = list(n_str)\n    n_str[i], n_str[j] = n_str[j], n_str[i]\n    n_str[i + 1:] = reversed(n_str[i + 1:])\n    return int(''.join(n_str))",
    "    n_str = str(n)\n    n_list = list(n_str)\n    n_list.sort()\n    n_list.reverse()\n    n_str = ''.join(n_list)\n    return int(n_str)\n",
    "    n_str = str(n)\n    for i in range(len(n_str) - 1, 0, -1):\n        if n_str[i] > n_str[i - 1]:\n            break\n    else:\n        return -1\n    i -= 1\n    for j in range(len(n_str) - 1, i, -1):\n        if n_str[j] > n_str[i]:\n            break\n    n_str = list(n_str)\n    n_str[i], n_str[j] = n_str[j], n_str[i]\n    n_str[i + 1:] = reversed(n_str[i + 1:])\n    return int(''.join(n_str))\n",
    "    num = list(str(n))\n    for i in range(len(num)-1, 0, -1):\n        if num[i] > num[i-1]:\n            num[i], num[i-1] = num[i-1], num[i]\n            return int(\"\".join(num))\n    return -1\n",
    "    if n < 10:\n        return -1\n    digits = [int(d) for d in str(n)]\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(len(digits) - 1, i - 1, -1):\n        if digits[j] > digits[i - 1]:\n            break\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    digits[i:] = digits[i:][::-1]\n    return int(''.join(map(str, digits)))"
  ]
}