{
  "name": "mbpp_123_amicable_numbers_sum",
  "language": "py",
  "prompt": "def amicable_numbers_sum(limit: int) -> int:\n    \"\"\"\n\tWrite a function to sum all amicable numbers from 1 to a specified number.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_123_amicable_numbers_sum.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate(999) == 504\n    assert candidate(9999) == 31626\n    assert candidate(99) == 0\n\ndef test_check():\n    check(amicable_numbers_sum)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        j = sum_of_divisors(i)\n        if i != j and sum_of_divisors(j) == i:\n            amicable_numbers.append(i)\n            amicable_numbers.append(j)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i not in amicable_numbers:\n            sum_of_divisors = sum_of_divisors_of_number(i)\n            if sum_of_divisors > i:\n                sum_of_divisors_of_sum_of_divisors = sum_of_divisors_of_number(sum_of_divisors)\n                if sum_of_divisors_of_sum_of_divisors == i:\n                    amicable_numbers.append(i)\n                    amicable_numbers.append(sum_of_divisors)\n    return sum(amicable_numbers)\n\n",
    "    return sum(amicable_numbers(limit))\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        j = sum_of_divisors(i)\n        if i == sum_of_divisors(j) and i != j:\n            amicable_numbers.append(i)\n            amicable_numbers.append(j)\n    return sum(amicable_numbers)\n\n",
    "    return sum(\n        [\n            i\n            for i in range(1, limit + 1)\n            if sum_of_divisors(sum_of_divisors(i)) == i and i != sum_of_divisors(i)\n        ]\n    )\n\n",
    "    sum_of_amicable_numbers = 0\n    for i in range(1, limit):\n        if is_amicable_number(i):\n            sum_of_amicable_numbers += i\n    return sum_of_amicable_numbers\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        sum_divisors = sum_of_divisors(i)\n        if sum_divisors != i and sum_of_divisors(sum_divisors) == i:\n            amicable_numbers.append(i)\n            amicable_numbers.append(sum_divisors)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        sum_of_divisors = sum_of_divisors_of(i)\n        if sum_of_divisors > i:\n            sum_of_divisors_of_sum_of_divisors = sum_of_divisors_of(sum_of_divisors)\n            if sum_of_divisors_of_sum_of_divisors == i:\n                amicable_numbers.append(i)\n                amicable_numbers.append(sum_of_divisors)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        a = sum_of_divisors(i)\n        b = sum_of_divisors(a)\n        if i == b and a != b:\n            amicable_numbers.append(i)\n            amicable_numbers.append(a)\n    return sum(amicable_numbers)\n\n",
    "    return sum(\n        [\n            i\n            for i in range(1, limit)\n            if i == sum_of_divisors(sum_of_divisors(i)) and i != sum_of_divisors(i)\n        ]\n    )\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i in amicable_numbers:\n            continue\n        j = sum_of_divisors(i)\n        if i == sum_of_divisors(j) and i != j:\n            amicable_numbers.append(i)\n            amicable_numbers.append(j)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i not in amicable_numbers:\n            d_i = sum_of_divisors(i)\n            d_d_i = sum_of_divisors(d_i)\n            if i == d_d_i and i != d_i:\n                amicable_numbers.append(i)\n                amicable_numbers.append(d_i)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i not in amicable_numbers:\n            sum_of_divisors = sum_of_divisors_of_number(i)\n            if sum_of_divisors > i:\n                if sum_of_divisors_of_number(sum_of_divisors) == i:\n                    amicable_numbers.append(i)\n                    amicable_numbers.append(sum_of_divisors)\n    return sum(amicable_numbers)\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        a = sum_of_divisors(i)\n        b = sum_of_divisors(a)\n        if i == b and a != b:\n            amicable_numbers.append(i)\n            amicable_numbers.append(a)\n    return sum(amicable_numbers)\n\n",
    "    return sum(amicable_numbers(limit))\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        j = sum_of_divisors(i)\n        if i == sum_of_divisors(j) and i != j:\n            amicable_numbers.append(i)\n            amicable_numbers.append(j)\n    return sum(amicable_numbers)\n\n",
    "    return sum(\n        [\n            i\n            for i in range(1, limit)\n            if sum_of_divisors(i) != i and sum_of_divisors(sum_of_divisors(i)) == i\n        ]\n    )\n\n",
    "    sum_of_amicable_numbers = 0\n    for i in range(1, limit + 1):\n        if is_amicable_number(i):\n            sum_of_amicable_numbers += i\n    return sum_of_amicable_numbers\n\n",
    "    sum = 0\n    for i in range(1, limit + 1):\n        if is_amicable(i):\n            sum += i\n    return sum\n\n",
    "    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        sum_of_divisors = sum_of_divisors_of(i)\n        if sum_of_divisors != i and sum_of_divisors_of(sum_of_divisors) == i:\n            amicable_numbers.append(i)\n            amicable_numbers.append(sum_of_divisors)\n    return sum(amicable_numbers)\n\n"
  ]
}