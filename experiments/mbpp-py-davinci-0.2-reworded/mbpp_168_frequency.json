{
  "name": "mbpp_168_frequency",
  "language": "py",
  "prompt": "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    \"\"\"\n\tWrite a function to count the number of occurrences of a number in a given list.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_168_frequency.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate([1, 2, 3], 4) == 0\n    assert candidate([1, 2, 2, 3, 3, 3, 4], 3) == 3\n    assert candidate([0, 1, 2, 3, 1, 2], 1) == 2\n\ndef test_check():\n    check(frequency)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return a.count(x)\n",
    "    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n",
    "    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n",
    "    return a.count(x)\n",
    "    return a.count(x)\n\n",
    "    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n",
    "    return a.count(x)\n",
    "    return a.count(x)\n",
    "    return a.count(x)\n",
    "    return a.count(x)\n",
    "    return a.count(x)\n",
    "    return a.count(x)\n",
    "    return a.count(x)\n",
    "    return a.count(x)\n",
    "    return a.count(x)\n\nprint(frequency([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1))\nprint(frequency([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\nprint(frequency([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))\nprint(frequency([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4))\nprint(frequency([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))\nprint(frequency([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6))\nprint(frequency([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 7))\nprint(frequency([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 8))\nprint(frequency([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 9))\nprint(frequency([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10))",
    "    return a.count(x)\n",
    "    return a.count(x)",
    "    return a.count(x)\n",
    "    return a.count(x)\n",
    "    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
  ]
}