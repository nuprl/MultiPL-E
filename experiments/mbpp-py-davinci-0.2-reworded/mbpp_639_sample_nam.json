{
  "name": "mbpp_639_sample_nam",
  "language": "py",
  "prompt": "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    \"\"\"\n\tWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_639_sample_nam.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']) == 16\n    assert candidate(['php', 'res', 'Python', 'abcd', 'Java', 'aaa']) == 10\n    assert candidate(['abcd', 'Python', 'abba', 'aba']) == 6\n\ndef test_check():\n    check(sample_nam)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return sum(len(name) for name in sample_names if name[0].isupper())\n\nprint(sample_nam(['Sam', 'Pamela', 'Andrea']))\nprint(sample_nam(['Robert', 'Kristin', 'Kris', 'Kri']))\nprint(sample_nam(['Kris', 'Kri', 'Kriss', 'Kris']))",
    "    return sum(len(name) for name in sample_names if name[0].isupper())\n",
    "    return sum([len(name) for name in sample_names if name[0].isupper()])",
    "    return sum(len(name) for name in sample_names if name[0].isupper())",
    "    return sum(len(name) for name in sample_names if name[0].isupper())",
    "    return sum(len(name) for name in sample_names if name[0].isupper())",
    "    return sum([len(name) for name in sample_names if name[0].isupper()])\n\nprint(sample_nam(['John', 'Doe', 'john', 'doe']))",
    "    return sum(len(name) for name in sample_names if name[0].isupper())\n\nprint(sample_nam([\"Sam\", \"Pieter\", \"Vlad\", \"Samuel\", \"Maximilian\"]))",
    "    return sum(len(name) for name in sample_names if name[0].isupper())",
    "    return sum([len(name) for name in sample_names if name[0].isupper()])",
    "    return sum(len(name) for name in sample_names if name[0].isupper())",
    "    return sum(len(name) for name in sample_names if name[0].isupper())",
    "    return sum(len(name) for name in sample_names if name[0].isupper())\n",
    "    return sum(len(name) for name in sample_names if name[0].isupper())\n",
    "    return sum(len(name) for name in sample_names if name[0].isupper())",
    "    return sum([len(name) for name in sample_names if name[0].isupper()])\n\nprint(sample_nam([\"John\", \"James\", \"Jack\", \"Joe\"]))",
    "    return sum([len(name) for name in sample_names if name[0].isupper()])",
    "    return sum(len(name) for name in sample_names if name[0].isupper())\n\nprint(sample_nam([\"Krishna\", \"Raj\", \"Ravi\", \"Prakash\"]))",
    "    return sum(len(name) for name in sample_names if name[0].isupper())\n",
    "    return sum(len(name) for name in sample_names if name[0].isupper())\n\nprint(sample_nam([\"Sam\",\"Tom\",\"Jerry\",\"Frank\"]))"
  ]
}