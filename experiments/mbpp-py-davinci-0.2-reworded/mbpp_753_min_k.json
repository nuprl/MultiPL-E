{
  "name": "mbpp_753_min_k",
  "language": "py",
  "prompt": "from typing import List, Tuple, Union\n\ndef min_k(test_list: List[Tuple[Union[str, int]]], K: int) -> List[Tuple[Union[str, int]]]:\n    \"\"\"\n\tWrite a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_753_min_k.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n    assert candidate([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\n    assert candidate([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]\n\ndef test_check():\n    check(min_k)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    if len(test_list) < K:\n        return test_list\n    else:\n        return sorted(test_list, key=lambda x: x[1])[:K]\n",
    "    return sorted(test_list, key=lambda x: x[1])[:K]\n\n",
    "    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]\n",
    "    return sorted(test_list, key=lambda x: x[1])[:K]\n",
    "    # sort the list by the second element of the tuple\n    test_list.sort(key=lambda x: x[1])\n    # return the first K elements\n    return test_list[:K]\n",
    "    return sorted(test_list, key=lambda x: x[1])[:K]",
    "    return sorted(test_list, key=lambda x: x[1])[:K]\n\n",
    "    return sorted(test_list, key=lambda x: x[1])[:K]",
    "    return sorted(test_list, key=lambda x: x[1])[:K]\n",
    "    return sorted(test_list, key=lambda x: x[1])[:K]\n",
    "    # sort the list by the second element of the tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    # return the first K elements of the sorted list\n    return sorted_list[:K]\n",
    "    return sorted(test_list, key=lambda x: x[1])[:K]\n",
    "    return sorted(test_list, key=lambda x: x[1])[:K]\n",
    "    return sorted(test_list, key=lambda x: x[1])[:K]\n\n",
    "    return sorted(test_list, key=lambda x: x[1])[:K]",
    "    return sorted(test_list, key=lambda x: x[1])[:K]\n",
    "    return sorted(test_list, key=lambda x: x[1])[:K]",
    "    return sorted(test_list, key=lambda x: x[1])[:K]\n",
    "    # sort the list\n    test_list.sort(key = lambda x: x[1])\n    # return the first K elements\n    return test_list[:K]\n",
    "    return sorted(test_list, key=lambda x: x[1])[:K]\n"
  ]
}