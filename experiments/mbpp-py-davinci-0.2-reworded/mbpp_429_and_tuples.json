{
  "name": "mbpp_429_and_tuples",
  "language": "py",
  "prompt": "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n\tWrite a function to extract the elementwise and tuples from the given two tuples.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_429_and_tuples.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n    assert candidate((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\n    assert candidate((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)\n\ndef test_check():\n    check(and_tuples)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\nprint(and_tuples((1, 2, 3), (4, 5, 6)))",
    "    return tuple(map(lambda x: x[0] & x[1], zip(test_tup1, test_tup2)))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\nprint(and_tuples((1, 2, 3), (4, 5, 6)))",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\nprint(and_tuples((1, 2, 3, 4), (5, 6, 7, 8)))\nprint(and_tuples((1, 2, 3, 4), (5, 6, 7, 8, 9)))\nprint(and_tuples((1, 2, 3, 4), (5, 6, 7, 8, 9, 10)))",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\nprint(and_tuples((1, 2, 3), (1, 2, 3)))",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\nprint(and_tuples((1, 2, 3), (1, 2, 4)))",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\nprint(and_tuples((1, 2, 3), (4, 5, 6)))",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\nprint(and_tuples((1, 2, 3), (4, 5, 6)))",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x: x[0] & x[1], zip(test_tup1, test_tup2)))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\nprint(and_tuples((1, 2, 3), (4, 5, 6)))\nprint(and_tuples((1, 2, 3), (4, 5, 6, 7)))\nprint(and_tuples((1, 2, 3), (4, 5, 6, 7, 8)))",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\nprint(and_tuples((1, 2, 3), (1, 2, 4)))",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n\nprint(and_tuples((1, 2, 3, 4), (5, 6, 7, 8)))",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x and y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\nprint(and_tuples((1, 2, 3, 4), (4, 2, 5, 0)))",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x: x[0] & x[1], zip(test_tup1, test_tup2)))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\nprint(and_tuples((1, 2, 3), (4, 5, 6)))",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\nprint(and_tuples((1, 2, 3), (4, 5, 6)))\nprint(and_tuples((1, 2, 3), (4, 5, 6, 7)))",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\nprint(and_tuples((1, 2, 3), (4, 5, 6)))",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x,y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\nprint(and_tuples((1, 2, 3), (4, 5, 6)))",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n",
    "    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n"
  ]
}