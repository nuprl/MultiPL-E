{
  "name": "mbpp_294_max_val",
  "language": "py",
  "prompt": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_294_max_val.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "results": [
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for item in listval:\n        if isinstance(item, int):\n            if item > max_val:\n                max_val = item\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, \"a\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, \"a\", \"b\", \"c\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "9\n9\n9\n9\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "10\n10\n10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "10\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpg98drubs.py\", line 10, in <module>\n    print(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']))\n  File \"/tmp/tmpg98drubs.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'str' and 'int'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 'a']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b']))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "9\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpneofkofo.py\", line 10, in <module>\n    print(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 'a']))\n  File \"/tmp/tmpneofkofo.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'str' and 'int'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int) and i > max_val:\n            max_val = i\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "10\nj\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpa5q71jpt.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmpa5q71jpt.py\", line 17, in test_check\n    check(max_val)\n  File \"/tmp/tmpa5q71jpt.py\", line 12, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpa5q71jpt.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for item in listval:\n        if isinstance(item, int) and item > max_val:\n            max_val = item\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1,2,3,4,5,6,7,8,9]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]))\nprint(max_val([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]))\nprint(max_val([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"]))\nprint(max_val([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpktwoy0nf.py\", line 13\n    print(max_val([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\n                                                                                                                                                                                               ^\nSyntaxError: unterminated string literal (detected at line 13)\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3plqc6e7.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp3plqc6e7.py\", line 16, in test_check\n    check(max_val)\n  File \"/tmp/tmp3plqc6e7.py\", line 11, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmp3plqc6e7.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int) and i > max_val:\n            max_val = i\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1, 2, 3, 4, 5]))\nprint(max_val([1, 2, 3, 4, 5, 'a']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f',\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpbv4eejhu.py\", line 22\n    print(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f',\n                  ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']))\nprint(max_val([1, 'a', 2, 'b', 3, 'c', 4, 'd', 5, 'e', 6, 'f', 7, 'g', 8, 'h', 9, 'i', 10, 'j']))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "10\nj\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5n6vg660.py\", line 11, in <module>\n    print(max_val([1, 'a', 2, 'b', 3, 'c', 4, 'd', 5, 'e', 6, 'f', 7, 'g', 8, 'h', 9, 'i', 10, 'j']))\n  File \"/tmp/tmp5n6vg660.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'str' and 'int'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for item in listval:\n        if isinstance(item, int) and item > max_val:\n            max_val = item\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5]))\nprint(max_val([1, 2, 3, 4, '5']))\nprint(max_val([1, 2, 3, 4, 'a']))\nprint(max_val([1, 2, 3, 4, '5a']))\nprint(max_val([1, 2, 3, 4, 'a5']))\nprint(max_val([1, 2, 3, 4, 'a5a']))\nprint(max_val([1, 2, 3, 4, 'a5a5']))\nprint(max_val([1, 2, 3, 4, 'a5a5a']))\nprint(max_val([1, 2, 3, 4, 'a5a5a5']))\nprint(max_val([1, 2, 3, 4, 'a5a5a5a']))\nprint(max_val([1, 2, 3, 4, 'a5a5a5a5']))\nprint(max_val([1, 2, 3, 4, 'a5a5a5a5a']))\nprint(max_val([1, 2, 3, 4, 'a5a5a5a5a5']))\nprint(max_val([1, 2, 3, 4, 'a5a5a5a5a5a']))\nprint(max_val([1, 2, 3, 4, 'a5a5a5a5a5a5']))\nprint(max_val([1, 2, 3, 4, 'a5a5a5a5a5a5a']))\nprint(max_val([1, 2, 3, 4, 'a5a5a5a5a5a5a5']))\nprint(max_val([1, 2, 3, 4, 'a5a5a5a5a5a5a5a']))\nprint(max_val([1, 2, 3, 4, 'a5a\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "  File \"/tmp/tmp775fssb2.py\", line 31\n    print(max_val([1, 2, 3, 4, 'a5a\n                               ^\nSyntaxError: unterminated string literal (detected at line 31)\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if type(i) == int:\n            if i > max_val:\n                max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c']))\nprint(max_val(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "10\n10\n0\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "  File \"/tmp/tmp43j0jfow.py\", line 19\n    print(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n                  ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 'a', 'b', 'c']))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "10\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpz0y0deyr.py\", line 14, in <module>\n    print(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\"]))\n  File \"/tmp/tmpz0y0deyr.py\", line 9, in max_val\n    if i > max_val:\nTypeError: '>' not supported between instances of 'str' and 'int'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, \"a\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, \"a\", \"b\", \"c\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "9\n9\n9\n9\n9\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for val in listval:\n        if isinstance(val, int):\n            if val > max_val:\n                max_val = val\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3plqc6e7.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp3plqc6e7.py\", line 16, in test_check\n    check(max_val)\n  File \"/tmp/tmp3plqc6e7.py\", line 11, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmp3plqc6e7.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']))\nprint(max_val([1, 'a', 2, 'b', 3, 'c', 4, 'd', 5, 'e', 6, 'f', 7, 'g', 8, 'h', 9, 'i', 10, 'j']))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "10\nj\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5n6vg660.py\", line 11, in <module>\n    print(max_val([1, 'a', 2, 'b', 3, 'c', 4, 'd', 5, 'e', 6, 'f', 7, 'g', 8, 'h', 9, 'i', 10, 'j']))\n  File \"/tmp/tmp5n6vg660.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'str' and 'int'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = listval[0]\n    for i in listval:\n        if type(i) == int:\n            if i > max_val:\n                max_val = i\n    return max_val\n\nprint(max_val([1,2,3,4,5,6,7,8,9,10]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10, 'a', 'b', 'c']))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "10\n10\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpuo75tljq.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpuo75tljq.py\", line 22, in test_check\n    check(max_val)\n  File \"/tmp/tmpuo75tljq.py\", line 17, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpuo75tljq.py\", line 10, in max_val\n    if i > max_val:\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int) and i > max_val:\n            max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c']))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int) and i > max_val:\n            max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 'a', 'b', 'c']))\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for item in listval:\n        if isinstance(item, int) and item > max_val:\n            max_val = item\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5]))\nprint(max_val([1, 2, 3, 4, 5, 'a']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpqbqrcjeg.py\", line 25\n    print(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l\n                                                                                         ^\nSyntaxError: unterminated string literal (detected at line 25)\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1, 2, 3, 4, 5]))\nprint(max_val([1, 2, 3, 4, 5, 'a']))\nprint(max_val(['a', 'b', 'c', 'd', 'e']))\nprint(max_val(['a', 'b', 'c', 'd', 'e', 1]))\nprint(max_val(['a', 'b', 'c', 'd', 'e', 1, 2, 3, 4, 5]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "5\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5o52bud7.py\", line 10, in <module>\n    print(max_val([1, 2, 3, 4, 5, 'a']))\n  File \"/tmp/tmp5o52bud7.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'str' and 'int'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for val in listval:\n        if isinstance(val, int) and val > max_val:\n            max_val = val\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a']))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "10\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1bitt1d_.py\", line 10, in <module>\n    print(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a']))\n  File \"/tmp/tmp1bitt1d_.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'str' and 'int'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = listval[0]\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g']))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "10\n10\n10\n10\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpt9_9cj8a.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpt9_9cj8a.py\", line 24, in test_check\n    check(max_val)\n  File \"/tmp/tmpt9_9cj8a.py\", line 19, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpt9_9cj8a.py\", line 10, in max_val\n    if i > max_val:\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int) and i > max_val:\n            max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5]))\nprint(max_val([1, 2, 3, 4, 5, \"a\"]))\nprint(max_val([1, 2, 3, 4, 5, \"a\", \"b\"]))\nprint(max_val([1, 2, 3, 4, 5, \"a\", \"b\", \"c\"]))\nprint(max_val([1, 2, 3, 4, 5, \"a\", \"b\", \"c\", \"d\"]))\nprint(max_val([1, 2, 3, 4, 5, \"a\", \"b\", \"c\", \"d\", \"e\"]))\nprint(max_val([1, 2, 3, 4, 5, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]))\nprint(max_val([1, 2, 3, 4, 5, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]))\nprint(max_val([1, 2, 3, 4, 5, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]))\nprint(max_val([1, 2, 3, 4, 5, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"]))\nprint(max_val([1, 2, 3, 4, 5, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]))\nprint(max_val([1, 2, 3, 4, 5, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"]))\nprint(max_val([1, 2, 3, 4, 5, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpurwbg91h.py\", line 25\n    print(max_val([1, 2, 3, 4, 5, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\n                                                                                         ^\nSyntaxError: unterminated string literal (detected at line 25)\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = listval[0]\n    for i in listval:\n        if isinstance(i, int) and i > max_val:\n            max_val = i\n    return max_val\n\nprint(max_val([1,2,3,4,5,6,7,8,9,10]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10, 'a']))\nprint(max_val([1,2,3,4,5,6,7,8,9,10, 'a', 'b', 'c']))\nprint(max_val([1,2,3,4,5,6,7,8,9,10, 'a', 'b', 'c', 'd', 'e', 'f']))\nprint(max_val([1,2,3,4,5,6,7,8,9,10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']))\nprint(max_val([1,2,3,4,5,6,7,8,9,10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']))\nprint(max_val([1,2,3,4,5,6,7,8,9,10, 'a',\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpci5_ozqf.py\", line 19\n    print(max_val([1,2,3,4,5,6,7,8,9,10, 'a',\n                  ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1,2,3,4,5,6,7,8,9,10]))\nprint(max_val(['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']))\nprint(max_val([1,'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']))\nprint(max_val(['a',1,'b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "10\nz\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq6yrv25_.py\", line 11, in <module>\n    print(max_val([1,'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']))\n  File \"/tmp/tmpq6yrv25_.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'str' and 'int'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1, 2, 3, 4, 5]))\nprint(max_val(['a', 'b', 'c', 'd', 'e']))\nprint(max_val([1, 'a', 2, 'b', 3, 'c']))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "5\ne\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5hcbjnuf.py\", line 11, in <module>\n    print(max_val([1, 'a', 2, 'b', 3, 'c']))\n  File \"/tmp/tmp5hcbjnuf.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'str' and 'int'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 'a', 'b', 'c', 'd']))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int) and i > max_val:\n            max_val = i\n    return max_val\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for item in listval:\n        if isinstance(item, int):\n            if item > max_val:\n                max_val = item\n    return max_val\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1, 2, 3, 4, 5]))\nprint(max_val([1, 2, 3, 4, 5, 'a']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f',\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpbv4eejhu.py\", line 22\n    print(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f',\n                  ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1,2,3,4,5]))\nprint(max_val([1,2,3,4,5, \"a\"]))\nprint(max_val([\"a\", \"b\", \"c\", \"d\"]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "5\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqo2ay9w7.py\", line 10, in <module>\n    print(max_val([1,2,3,4,5, \"a\"]))\n  File \"/tmp/tmpqo2ay9w7.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'str' and 'int'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a',\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpqad3brs9.py\", line 20\n    print(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a',\n                  ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for val in listval:\n        if isinstance(val, int) and val > max_val:\n            max_val = val\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int) and i > max_val:\n            max_val = i\n    return max_val\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = listval[0]\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpuvn3vlje.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpuvn3vlje.py\", line 21, in test_check\n    check(max_val)\n  File \"/tmp/tmpuvn3vlje.py\", line 16, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpuvn3vlje.py\", line 10, in max_val\n    if i > max_val:\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]))\nprint(max_val([1, \"a\", 2, \"b\", 3, \"c\", 4, \"d\", 5, \"e\", 6, \"f\", 7, \"g\", 8, \"h\", 9, \"i\", 10, \"j\"]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "10\n0\n10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7]))\nprint(max_val([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]))\nprint(max_val([1, \"a\", 2, \"b\", 3, \"c\", 4, \"d\", 5, \"e\", 6, \"f\", 7, \"g\"]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "7\ng\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpifbkdjh_.py\", line 11, in <module>\n    print(max_val([1, \"a\", 2, \"b\", 3, \"c\", 4, \"d\", 5, \"e\", 6, \"f\", 7, \"g\"]))\n  File \"/tmp/tmpifbkdjh_.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'str' and 'int'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for item in listval:\n        if isinstance(item, int):\n            if item > max_val:\n                max_val = item\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]))\nprint(max_val([1, \"a\", 2, \"b\", 3, \"c\", 4, \"d\", 5, \"e\", 6, \"f\", 7, \"g\", 8, \"h\", 9, \"i\", 10, \"j\"]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "10\nj\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfd34n1qy.py\", line 11, in <module>\n    print(max_val([1, \"a\", 2, \"b\", 3, \"c\", 4, \"d\", 5, \"e\", 6, \"f\", 7, \"g\", 8, \"h\", 9, \"i\", 10, \"j\"]))\n  File \"/tmp/tmpfd34n1qy.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'str' and 'int'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1, 2, 3, 4, 5]))\nprint(max_val([\"a\", \"b\", \"c\", \"d\", \"e\"]))\nprint(max_val([1, \"a\", 2, \"b\", 3, \"c\"]))\nprint(max_val([\"a\", 1, \"b\", 2, \"c\", 3]))\nprint(max_val([1, 2, 3, 4, 5, \"a\"]))\nprint(max_val([\"a\", \"b\", \"c\", \"d\", \"e\", 1]))\nprint(max_val([1, \"a\", 2, \"b\", 3, \"c\", 4, \"d\", 5, \"e\"]))\nprint(max_val([\"a\", 1, \"b\", 2, \"c\", 3, \"d\", 4, \"e\", 5]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "5\ne\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxax9wl9i.py\", line 11, in <module>\n    print(max_val([1, \"a\", 2, \"b\", 3, \"c\"]))\n  File \"/tmp/tmpxax9wl9i.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'str' and 'int'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1,2,3,4,5,6,7,8,9,10]))\nprint(max_val(['a','b','c','d','e','f','g','h','i','j']))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "10\nj\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzmj164_t.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmpzmj164_t.py\", line 17, in test_check\n    check(max_val)\n  File \"/tmp/tmpzmj164_t.py\", line 12, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpzmj164_t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpv9joq4jv.py\", line 25\n    print(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\n                                                                                     ^\nSyntaxError: unterminated string literal (detected at line 25)\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1, 2, 3, 4, 5]))\nprint(max_val(['a', 'b', 'c', 'd', 'e']))\nprint(max_val([1, 'a', 2, 'b', 3, 'c']))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "5\ne\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5hcbjnuf.py\", line 11, in <module>\n    print(max_val([1, 'a', 2, 'b', 3, 'c']))\n  File \"/tmp/tmp5hcbjnuf.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'str' and 'int'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for item in listval:\n        if isinstance(item, int) and item > max_val:\n            max_val = item\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3plqc6e7.py\", line 18, in <module>\n    test_check()\n  File \"/tmp/tmp3plqc6e7.py\", line 16, in test_check\n    check(max_val)\n  File \"/tmp/tmp3plqc6e7.py\", line 11, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmp3plqc6e7.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for item in listval:\n        if isinstance(item, int):\n            if item > max_val:\n                max_val = item\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5]))\nprint(max_val([1, 2, 3, 4, 5, 'a']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 6]))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 6, 7]))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 6, 7, 8]))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 6, 7, 8, 9]))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 6, 7, 8, 9, 10, 11]))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 6, 7, 8, 9, 10, 11, 12]))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\nprint(max_\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpo7x8dhud.py\", line 28\n    print(max_\n         ^\nSyntaxError: '(' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for item in listval:\n        if isinstance(item, int) and item > max_val:\n            max_val = item\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int) and i > max_val:\n            max_val = i\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = listval[0]\n    for i in listval:\n        if isinstance(i, int) and i > max_val:\n            max_val = i\n    return max_val\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpro7wkq7i.py\", line 20, in <module>\n    test_check()\n  File \"/tmp/tmpro7wkq7i.py\", line 18, in test_check\n    check(max_val)\n  File \"/tmp/tmpro7wkq7i.py\", line 13, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpro7wkq7i.py\", line 9, in max_val\n    if isinstance(i, int) and i > max_val:\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]))\nprint(max_val([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "10\n10\n10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for val in listval:\n        if isinstance(val, int) and val > max_val:\n            max_val = val\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1, 2, 3, 4, 5]))\nprint(max_val([\"a\", \"b\", \"c\", \"d\", \"e\"]))\nprint(max_val([1, \"a\", 2, \"b\", 3, \"c\"]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "5\ne\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpls_bhdux.py\", line 11, in <module>\n    print(max_val([1, \"a\", 2, \"b\", 3, \"c\"]))\n  File \"/tmp/tmpls_bhdux.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'str' and 'int'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int) and i > max_val:\n            max_val = i\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']))\nprint(max_val(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "10\nj\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphyg_qm5c.py\", line 11, in <module>\n    print(max_val(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n  File \"/tmp/tmphyg_qm5c.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = listval[0]\n    for i in listval:\n        if type(i) == int and i > max_val:\n            max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "10\n10\n10\n10\n10\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6o36g7z8.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmp6o36g7z8.py\", line 24, in test_check\n    check(max_val)\n  File \"/tmp/tmp6o36g7z8.py\", line 19, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmp6o36g7z8.py\", line 9, in max_val\n    if type(i) == int and i > max_val:\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for val in listval:\n        if isinstance(val, int):\n            if val > max_val:\n                max_val = val\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "  File \"/tmp/tmp3o2xnxvq.py\", line 18\n    print(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u\n                                                                                                                                                      ^\nSyntaxError: unterminated string literal (detected at line 18)\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int) and i > max_val:\n            max_val = i\n    return max_val\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for item in listval:\n        if type(item) == int and item > max_val:\n            max_val = item\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for val in listval:\n        if isinstance(val, int):\n            if val > max_val:\n                max_val = val\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 'a']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpxxcvrfws.py\", line 19\n    print(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\n                  ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for val in listval:\n        if isinstance(val, int):\n            if val > max_val:\n                max_val = val\n    return max_val\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_value = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_value:\n                max_value = i\n    return max_value\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1, 2, 3, 4, 5]))\nprint(max_val([1, 2, 3, 4, '5']))\nprint(max_val([1, 2, 3, 4, '5', 5.0]))\nprint(max_val([1, 2, 3, 4, '5', 5.0, '6']))\nprint(max_val([1, 2, 3, 4, '5', 5.0, '6', 6.0]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "5\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2zkqkpcb.py\", line 10, in <module>\n    print(max_val([1, 2, 3, 4, '5']))\n  File \"/tmp/tmp2zkqkpcb.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'str' and 'int'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for val in listval:\n        if isinstance(val, int):\n            if val > max_val:\n                max_val = val\n    return max_val\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123539,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\nprint(max_val([1,2,3,4,5,6,7,8,9,10]))\nprint(max_val(['a','b','c','d','e','f','g','h','i','j']))\nprint(max_val([1,2,3,4,5,6,7,8,9,10, 'a','b','c','d','e','f','g','h','i','j']))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123539,
      "stdout": "10\n0\n10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5]))\nprint(max_val([1, 2, 3, 4, 5, 'a']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']))\nprint(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123539,
      "stdout": "",
      "stderr": "  File \"/tmp/tmp_nm06c68.py\", line 26\n    print(max_val([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',\n                  ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', '\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123539,
      "stdout": "",
      "stderr": "  File \"/tmp/tmp5ky4g_fr.py\", line 18\n    print(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', '\n                                                                                                                                                                                                   ^\nSyntaxError: unterminated string literal (detected at line 18)\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for item in listval:\n        if isinstance(item, int) and item > max_val:\n            max_val = item\n    return max_val\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123539,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e']))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123539,
      "stdout": "10\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpwbxmiehc.py\", line 10, in <module>\n    print(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a']))\n  File \"/tmp/tmpwbxmiehc.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'str' and 'int'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if type(i) == int and i > max_val:\n            max_val = i\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123539,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1,2,3,4,5]))\nprint(max_val([1,2,3,4,5, \"a\"]))\nprint(max_val([1,2,3,4,5, \"a\", \"b\"]))\nprint(max_val([1,2,3,4,5, \"a\", \"b\", \"c\"]))\nprint(max_val([1,2,3,4,5, \"a\", \"b\", \"c\", \"d\"]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123539,
      "stdout": "5\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzh7gnb8m.py\", line 10, in <module>\n    print(max_val([1,2,3,4,5, \"a\"]))\n  File \"/tmp/tmpzh7gnb8m.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'str' and 'int'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']))\nprint(max_val([1, 2, 3, 4, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123539,
      "stdout": "10\n0\n4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1, 2, 3, 4, 5]))\nprint(max_val(['a', 'b', 'c', 'd', 'e']))\nprint(max_val([1, 'a', 3, 'c', 5]))\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123539,
      "stdout": "5\ne\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpprmu22ts.py\", line 11, in <module>\n    print(max_val([1, 'a', 3, 'c', 5]))\n  File \"/tmp/tmpprmu22ts.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'str' and 'int'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(max_val([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123539,
      "stdout": "9\ni\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp47mqt97t.py\", line 19, in <module>\n    test_check()\n  File \"/tmp/tmp47mqt97t.py\", line 17, in test_check\n    check(max_val)\n  File \"/tmp/tmp47mqt97t.py\", line 12, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmp47mqt97t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_value = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_value:\n                max_value = i\n    return max_value\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123539,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int) and i > max_val:\n            max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B',\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123539,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpm7n8o09_.py\", line 17\n    print(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B',\n                  ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1, 2, 3, 4, 5]))\nprint(max_val([1, 2, 3, 4, '5']))\nprint(max_val([1, 2, 3, 4, '5', 5]))\nprint(max_val([1, 2, 3, 4, '5', 5, '6']))\nprint(max_val([1, 2, 3, 4, '5', 5, '6', 6]))\nprint(max_val([1, 2, 3, 4, '5', 5, '6', 6, '7']))\nprint(max_val([1, 2, 3, 4, '5', 5, '6', 6, '7', 7]))\nprint(max_val([1, 2, 3, 4, '5', 5, '6', 6, '7', 7, '8']))\nprint(max_val([1, 2, 3, 4, '5', 5, '6', 6, '7', 7, '8', 8]))\nprint(max_val([1, 2, 3, 4, '5', 5, '6', 6, '7', 7, '8', 8, '9']))\nprint(max_val([1, 2, 3, 4, '5', 5, '6', 6, '7', 7, '8', 8, '9', 9]))\nprint(max_val([1, 2, 3, 4, '5', 5, '6', 6, '7', 7, '8', 8, '9', 9, '10']))\nprint(max_val([1, 2, 3, 4, '5', 5, '6', 6, '7', 7, '8', 8, '9', 9, '10', 10]))\nprint(max_val([1, 2, 3, 4, '5', 5, '6', 6, '7', 7, '8', 8, '9', 9, '10', 10, '11']))\nprint(max_val([1, 2, 3, 4, '5', 5, '6', 6, '7', 7, '8', 8, '9', 9, '10', 10, '\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123539,
      "stdout": "",
      "stderr": "  File \"/tmp/tmp77siuy0g.py\", line 23\n    print(max_val([1, 2, 3, 4, '5', 5, '6', 6, '7', 7, '8', 8, '9', 9, '10', 10, '\n                                                                                 ^\nSyntaxError: unterminated string literal (detected at line 23)\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\nprint(max_val([1, 2, 3, 4, 5]))\nprint(max_val([\"1\", \"2\", \"3\", \"4\", \"5\"]))\nprint(max_val([1, 2, 3, \"4\", 5]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123539,
      "stdout": "5\n5\n",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj5ui9e8d.py\", line 11, in <module>\n    print(max_val([1, 2, 3, \"4\", 5]))\n  File \"/tmp/tmpj5ui9e8d.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'str' and 'int'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int) and i > max_val:\n            max_val = i\n    return max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\",\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123539,
      "stdout": "",
      "stderr": "  File \"/tmp/tmp99wlzj06.py\", line 23\n    print(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\",\n                  ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipdy8v8z.py\", line 17, in <module>\n    test_check()\n  File \"/tmp/tmpipdy8v8z.py\", line 15, in test_check\n    check(max_val)\n  File \"/tmp/tmpipdy8v8z.py\", line 10, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpipdy8v8z.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    return max(listval)\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpacspob9t.py\", line 16, in <module>\n    test_check()\n  File \"/tmp/tmpacspob9t.py\", line 14, in test_check\n    check(max_val)\n  File \"/tmp/tmpacspob9t.py\", line 9, in check\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n  File \"/tmp/tmpacspob9t.py\", line 7, in max_val\n    return max(listval)\nTypeError: '>' not supported between instances of 'int' and 'str'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n    max_val = 0\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n    return max_val\n\nprint(max_val([1, \"a\", 2, \"b\", 3, \"c\"]))\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n",
      "timestamp": 1666123539,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}