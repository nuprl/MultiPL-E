{
  "name": "mbpp_401_add_nested_tuples",
  "language": "py",
  "prompt": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_401_add_nested_tuples.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "results": [
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(map(sum, zip(tup1, tup2))) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(map(lambda x, y: x + y, tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(sum(x) for x in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(map(lambda x, y: x + y, tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x+y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(i + j for i, j in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(sum(x) for x in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(map(lambda x, y: x + y, tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x+y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(map(lambda x, y: x + y, tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(map(lambda x, y: x + y, tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(map(lambda x, y: x + y, tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(map(lambda x, y: x + y, tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(map(lambda x, y: x + y, tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(map(lambda x, y: x + y, tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(map(lambda x, y: x + y, tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(map(lambda x, y: x + y, tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(map(lambda x, y: x + y, tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(map(lambda x, y: x + y, tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x+y for x,y in zip(tup1,tup2)) for tup1,tup2 in zip(test_tup1,test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1666122805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(map(lambda x, y: x + y, tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x+y for x, y in zip(a, b)) for a, b in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1666122805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(sum(x) for x in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(map(lambda x, y: x + y, tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(sum(x) for x in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(map(lambda x, y: x + y, tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(map(sum, zip(*t))) for t in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(map(lambda x, y: x + y, tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(i, j)) for i, j in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(map(lambda x, y: x + y, tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(map(sum, zip(*i))) for i in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(map(lambda x, y: x + y, tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(map(lambda x, y: x + y, tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(map(lambda x: x[0] + x[1], zip(tup1, tup2))) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(map(lambda x, y: x + y, tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(map(lambda x, y: x + y, tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(map(lambda x, y: x + y, tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(map(lambda x, y: x + y, tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(map(lambda x, y: x + y, tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(map(lambda x, y: x + y, tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\nprint(add_nested_tuples(((1, 2), (3, 4)), ((5, 6), (7, 8))))\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1666122806,
      "stdout": "((6, 8), (10, 12))\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(map(sum, zip(tup1, tup2))) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(i + j for i, j in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(a, b)) for a, b in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(a + b for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x+y for x,y in zip(tup1,tup2)) for tup1,tup2 in zip(test_tup1,test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1666122805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(map(lambda x, y: x + y, tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(map(lambda x, y: x + y, tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x+y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(map(sum, zip(*x))) for x in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(i + j for i, j in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(map(lambda x, y: x + y, tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x+y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(sum(x) for x in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\nprint(add_nested_tuples(((1, 2), (3, 4)), ((5, 6), (7, 8))))\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1666122806,
      "stdout": "((6, 8), (10, 12))\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(t1, t2)) for t1, t2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(map(sum, zip(tup1, tup2))) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(map(lambda x, y: tuple(map(lambda a, b: a + b, x, y)), test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(map(sum, zip(*t))) for t in zip(test_tup1, test_tup2))\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(map(lambda x, y: x + y, tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int]], test_tup2: Tuple[Tuple[int]]) -> Tuple[Tuple[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n\t\"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}