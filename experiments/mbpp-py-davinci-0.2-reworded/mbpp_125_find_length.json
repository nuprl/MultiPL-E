{
  "name": "mbpp_125_find_length",
  "language": "py",
  "prompt": "def find_length(string: str) -> int:\n    \"\"\"\n\tWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\t\"\"\"\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py",
  "prompt_terminology": "reworded",
  "tests": "def check(candidate):\n    assert candidate('11000010001') == 6\n    assert candidate('10111') == 1\n    assert candidate('11011101100101') == 2\n\ndef test_check():\n    check(find_length)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "completions": [
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            diff = abs(sub_string.count('0') - sub_string.count('1'))\n            max_diff = max(max_diff, diff)\n    return max_diff\n\n",
    "    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count_0 += 1\n        else:\n            count_1 += 1\n        if count_0 == count_1:\n            max_diff = max(max_diff, count_0 + count_1)\n    return max_diff\n\n",
    "    max_len = 0\n    count_zero = 0\n    count_one = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_zero += 1\n        else:\n            count_one += 1\n        if count_zero == count_one:\n            max_len = max(max_len, count_zero + count_one)\n    count_zero = 0\n    count_one = 0\n    for i in range(len(string) - 1, -1, -1):\n        if string[i] == '0':\n            count_zero += 1\n        else:\n            count_one += 1\n        if count_zero == count_one:\n            max_len = max(max_len, count_zero + count_one)\n    return max_len\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            sub_string = string[i:j + 1]\n            diff = abs(sub_string.count(\"0\") - sub_string.count(\"1\"))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    max_diff = 0\n    n = len(string)\n    for i in range(n):\n        for j in range(i, n):\n            sub_string = string[i:j + 1]\n            diff = abs(sub_string.count(\"1\") - sub_string.count(\"0\"))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    max_length = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            max_length = i + 1\n        else:\n            if count in hash_map:\n                max_length = max(max_length, i - hash_map[count])\n            else:\n                hash_map[count] = i\n    return max_length\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            diff = abs(sub_string.count(\"0\") - sub_string.count(\"1\"))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            diff = abs(sub_string.count(\"0\") - sub_string.count(\"1\"))\n            max_diff = max(max_diff, diff)\n    return max_diff\n\n",
    "    max_len = 0\n    count_0 = 0\n    count_1 = 0\n    for i in string:\n        if i == \"0\":\n            count_0 += 1\n        else:\n            count_1 += 1\n        if count_0 == count_1:\n            max_len = max(max_len, count_0 + count_1)\n    count_0 = 0\n    count_1 = 0\n    for i in string[::-1]:\n        if i == \"0\":\n            count_0 += 1\n        else:\n            count_1 += 1\n        if count_0 == count_1:\n            max_len = max(max_len, count_0 + count_1)\n    return max_len\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            diff = abs(sub_string.count(\"0\") - sub_string.count(\"1\"))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    max_length = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            max_length = i + 1\n        else:\n            if count in d:\n                max_length = max(max_length, i - d[count])\n            else:\n                d[count] = i\n    return max_length\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            zeros = sub_string.count(\"0\")\n            ones = sub_string.count(\"1\")\n            diff = abs(zeros - ones)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    max_diff = 0\n    curr_diff = 0\n    for i in string:\n        if i == '0':\n            curr_diff += 1\n        else:\n            curr_diff -= 1\n        max_diff = max(max_diff, abs(curr_diff))\n    return max_diff\n\n",
    "    max_length = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count -= 1\n        else:\n            count += 1\n        if count == 0:\n            max_length = i + 1\n    return max_length\n\n",
    "    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count_0 += 1\n        else:\n            count_1 += 1\n        max_diff = max(max_diff, abs(count_0 - count_1))\n    return max_diff\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            count_0 = sub_string.count('0')\n            count_1 = sub_string.count('1')\n            max_diff = max(max_diff, abs(count_0 - count_1))\n    return max_diff\n\n",
    "    max_diff = 0\n    curr_diff = 0\n    for i in string:\n        if i == \"0\":\n            curr_diff += 1\n        else:\n            curr_diff -= 1\n        if curr_diff < 0:\n            curr_diff = 0\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n    return max_diff\n\n",
    "    max_len = 0\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(string)):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            if abs(count_0 - count_1) <= 1:\n                max_len = max(max_len, j - i + 1)\n            else:\n                break\n    return max_len\n\n",
    "    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    for i in string:\n        if i == \"0\":\n            count_0 += 1\n        else:\n            count_1 += 1\n        max_diff = max(max_diff, abs(count_0 - count_1))\n    return max_diff\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            diff = abs(sub_string.count('0') - sub_string.count('1'))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count_0 += 1\n        else:\n            count_1 += 1\n        max_diff = max(max_diff, abs(count_0 - count_1))\n    return max_diff\n\n",
    "    max_len = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count -= 1\n        else:\n            count += 1\n        if count == 0:\n            max_len = i + 1\n        else:\n            if count in d:\n                max_len = max(max_len, i - d[count])\n            else:\n                d[count] = i\n    return max_len\n\n",
    "    max_len = 0\n    count_zero = 0\n    count_one = 0\n    for i in string:\n        if i == '0':\n            count_zero += 1\n        else:\n            count_one += 1\n        max_len = max(max_len, abs(count_zero - count_one))\n    return max_len\n\n",
    "    max_length = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            max_length = i + 1\n        else:\n            if count in d:\n                max_length = max(max_length, i - d[count])\n            else:\n                d[count] = i\n    return max_length\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            sub_string = string[i:j + 1]\n            diff = abs(sub_string.count(\"0\") - sub_string.count(\"1\"))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    max_length = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count -= 1\n        else:\n            count += 1\n        if count == 0:\n            max_length = i + 1\n        else:\n            if count in hash_map:\n                max_length = max(max_length, i - hash_map[count])\n            else:\n                hash_map[count] = i\n    return max_length\n\n",
    "    max_length = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            if (string[i:j].count('0') - string[i:j].count('1')) == 0:\n                max_length = max(max_length, j - i)\n    return max_length\n\n",
    "    max_diff = 0\n    curr_diff = 0\n    for i in string:\n        if i == '0':\n            curr_diff += 1\n        else:\n            curr_diff -= 1\n        max_diff = max(max_diff, abs(curr_diff))\n    return max_diff\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            diff = abs(sub_string.count('0') - sub_string.count('1'))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    max_len = 0\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if string[j] == \"0\":\n                count_0 += 1\n            else:\n                count_1 += 1\n            if abs(count_0 - count_1) <= 1:\n                max_len = max(max_len, j - i + 1)\n            else:\n                break\n        count_0 = 0\n        count_1 = 0\n    return max_len\n\n",
    "    count = 0\n    max_count = 0\n    for i in string:\n        if i == \"0\":\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            count = 0\n        if count > max_count:\n            max_count = count\n    return max_count\n\n",
    "    max_diff = 0\n    curr_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            curr_diff += 1\n        else:\n            curr_diff -= 1\n        if curr_diff < 0:\n            curr_diff = 0\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n    return max_diff\n\n",
    "    # Initialize result\n    result = 0\n\n    # Initialize curr_count of zeros and ones\n    z_count = 0\n    o_count = 0\n\n    # Traverse the binary string\n    for i in range(len(string)):\n\n        # If current character is '0'\n        # increment z_count\n        if string[i] == '0':\n            z_count += 1\n\n        # If current character is '1'\n        # increment o_count\n        else:\n            o_count += 1\n\n        # Update result if required\n        if z_count != 0 and o_count != 0 and z_count == o_count:\n            result = max(result, i + 1)\n\n    return result\n\n",
    "    max_length = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            max_length = i + 1\n        elif count in d:\n            max_length = max(max_length, i - d[count])\n        else:\n            d[count] = i\n    return max_length\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            diff = abs(string[i:j + 1].count(\"0\") - string[i:j + 1].count(\"1\"))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        max_diff = max(max_diff, abs(count_0 - count_1))\n    return max_diff\n\n",
    "    max_diff = 0\n    curr_diff = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            curr_diff += 1\n        else:\n            curr_diff -= 1\n        if curr_diff < 0:\n            curr_diff = 0\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n    return max_diff\n\n",
    "    max_length = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            max_length = i + 1\n        else:\n            if count in d:\n                max_length = max(max_length, i - d[count])\n            else:\n                d[count] = i\n    return max_length\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            max_diff = max(max_diff, abs(sub_string.count('0') - sub_string.count('1')))\n    return max_diff\n\n",
    "    max_length = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count -= 1\n        else:\n            count += 1\n        if count == 0:\n            max_length = i + 1\n        else:\n            if count in hash_map:\n                max_length = max(max_length, i - hash_map[count])\n            else:\n                hash_map[count] = i\n    return max_length\n\n",
    "    max_len = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            max_len = i + 1\n        else:\n            if count in d:\n                max_len = max(max_len, i - d[count])\n            else:\n                d[count] = i\n    return max_len\n\n",
    "    max_length = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            if sub_string.count(\"0\") == sub_string.count(\"1\"):\n                max_length = max(max_length, len(sub_string))\n    return max_length\n\n",
    "    max_length = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            max_length = i + 1\n        else:\n            if count in d:\n                max_length = max(max_length, i - d[count])\n            else:\n                d[count] = i\n    return max_length\n\n",
    "    max_length = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count -= 1\n        else:\n            count += 1\n        if count == 0:\n            max_length = i + 1\n        else:\n            if count in hash_map:\n                max_length = max(max_length, i - hash_map[count])\n            else:\n                hash_map[count] = i\n    return max_length\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_str = string[i:j]\n            diff = abs(sub_str.count('0') - sub_str.count('1'))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count_0 += 1\n        else:\n            count_1 += 1\n\n        if count_0 == count_1:\n            max_diff = max(max_diff, count_0 + count_1)\n\n    count_0 = 0\n    count_1 = 0\n\n    for i in range(len(string) - 1, -1, -1):\n        if string[i] == \"0\":\n            count_0 += 1\n        else:\n            count_1 += 1\n\n        if count_0 == count_1:\n            max_diff = max(max_diff, count_0 + count_1)\n\n    return max_diff\n\n",
    "    max_len = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            max_len = i + 1\n        else:\n            if count in d:\n                max_len = max(max_len, i - d[count])\n            else:\n                d[count] = i\n    return max_len\n\n",
    "    length = len(string)\n    max_length = 0\n    for i in range(length):\n        for j in range(i, length):\n            if string[i:j + 1].count(\"0\") == string[i:j + 1].count(\"1\"):\n                max_length = max(max_length, j - i + 1)\n    return max_length\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            sub_string = string[i:j + 1]\n            diff = abs(sub_string.count('0') - sub_string.count('1'))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    max_length = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count -= 1\n        else:\n            count += 1\n        if count == 0:\n            max_length = i + 1\n        else:\n            if count in hash_map:\n                max_length = max(max_length, i - hash_map[count])\n            else:\n                hash_map[count] = i\n    return max_length\n\n",
    "    max_len = 0\n    curr_len = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            curr_len += 1\n        else:\n            curr_len -= 1\n        if curr_len == 0:\n            max_len = i + 1\n        elif curr_len < 0:\n            curr_len = 0\n    return max_len\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            diff = abs(sub_string.count(\"0\") - sub_string.count(\"1\"))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    max_length = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            max_length = i + 1\n        else:\n            if count in d:\n                max_length = max(max_length, i - d[count])\n            else:\n                d[count] = i\n    return max_length\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            count_0 = sub_string.count(\"0\")\n            count_1 = sub_string.count(\"1\")\n            max_diff = max(max_diff, abs(count_0 - count_1))\n    return max_diff\n\n",
    "    # TODO: Implement me\n    return 0\n\n",
    "    max_len = 0\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(string)):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, len(string)):\n            if string[j] == \"0\":\n                count_0 += 1\n            else:\n                count_1 += 1\n            if abs(count_0 - count_1) <= 1:\n                max_len = max(max_len, j - i + 1)\n            else:\n                break\n    return max_len\n\n",
    "    max_len = 0\n    count_0 = 0\n    count_1 = 0\n    for i in string:\n        if i == \"0\":\n            count_0 += 1\n        else:\n            count_1 += 1\n        if count_0 == count_1:\n            max_len = max(max_len, count_0 + count_1)\n    count_0 = 0\n    count_1 = 0\n    for i in string[::-1]:\n        if i == \"0\":\n            count_0 += 1\n        else:\n            count_1 += 1\n        if count_0 == count_1:\n            max_len = max(max_len, count_0 + count_1)\n    return max_len\n\n",
    "    count = 0\n    max_count = 0\n    for i in string:\n        if i == '0':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            count = 0\n        if count > max_count:\n            max_count = count\n    return max_count\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            sub_string = string[i:j + 1]\n            diff = abs(sub_string.count(\"0\") - sub_string.count(\"1\"))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    max_length = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if string[i:j + 1].count('0') == string[i:j + 1].count('1'):\n                max_length = max(max_length, j - i + 1)\n    return max_length\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            zero_count = sub_string.count(\"0\")\n            one_count = sub_string.count(\"1\")\n            max_diff = max(max_diff, abs(zero_count - one_count))\n    return max_diff\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            sub_string = string[i:j + 1]\n            diff = abs(sub_string.count(\"0\") - sub_string.count(\"1\"))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            sub_string = string[i:j + 1]\n            diff = abs(sub_string.count('0') - sub_string.count('1'))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    max_len = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            max_len = i + 1\n        else:\n            if count in d:\n                max_len = max(max_len, i - d[count])\n            else:\n                d[count] = i\n    return max_len\n\n",
    "    max_length = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            sub_string = string[i:j + 1]\n            if sub_string.count(\"0\") == sub_string.count(\"1\"):\n                max_length = max(max_length, len(sub_string))\n    return max_length\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            sub_string = string[i:j + 1]\n            diff = abs(sub_string.count(\"0\") - sub_string.count(\"1\"))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            sub_string = string[i:j + 1]\n            diff = abs(sub_string.count(\"0\") - sub_string.count(\"1\"))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    max_length = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count -= 1\n        else:\n            count += 1\n        if count == 0:\n            max_length = i + 1\n        else:\n            if count in d:\n                max_length = max(max_length, i - d[count])\n            else:\n                d[count] = i\n    return max_length\n\n",
    "    max_diff = 0\n    count_zero = 0\n    count_one = 0\n    for char in string:\n        if char == \"0\":\n            count_zero += 1\n        else:\n            count_one += 1\n        max_diff = max(max_diff, abs(count_zero - count_one))\n    return max_diff\n\n",
    "    max_length = 0\n    zeros = 0\n    ones = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            zeros += 1\n        else:\n            ones += 1\n        if zeros == ones:\n            max_length = max(max_length, zeros + ones)\n    zeros = 0\n    ones = 0\n    for i in range(len(string) - 1, -1, -1):\n        if string[i] == '0':\n            zeros += 1\n        else:\n            ones += 1\n        if zeros == ones:\n            max_length = max(max_length, zeros + ones)\n    return max_length\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            diff = abs(sub_string.count(\"0\") - sub_string.count(\"1\"))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        max_diff = max(max_diff, abs(count_0 - count_1))\n    return max_diff\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            diff = abs(sub_string.count('0') - sub_string.count('1'))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        max_diff = max(max_diff, abs(count_0 - count_1))\n    return max_diff\n\n",
    "    max_len = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            if is_valid(string[i:j]):\n                max_len = max(max_len, j - i)\n    return max_len\n\n",
    "    # Initialize result\n    result = 0\n\n    # Initialize curr_count of zeroes and ones\n    n_zero = 0\n    n_one = 0\n\n    # Traverse the binary string\n    for i in range(len(string)):\n\n        # If current character is '0'\n        # increment n_zero\n        if string[i] == '0':\n            n_zero += 1\n\n        # Else increment n_one\n        else:\n            n_one += 1\n\n        # Update result if there are more zeros\n        # and fewer ones\n        if n_zero == n_one:\n            result = max(result, n_zero + n_one)\n\n        # If there are more ones, then there must\n        # be more zeros ahead. Thus, update n_one\n        elif n_one > n_zero:\n            n_zero = 0\n            n_one = 0\n\n    # Update result if there are more zeros\n    # and fewer ones\n    if n_zero == n_one:\n        result = max(result, n_zero + n_one)\n\n    return result\n\n",
    "    max_len = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if string[i:j + 1].count('0') == string[i:j + 1].count('1'):\n                max_len = max(max_len, j - i + 1)\n    return max_len\n\n",
    "    max_diff = 0\n    count_zero = 0\n    count_one = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_zero += 1\n        else:\n            count_one += 1\n        max_diff = max(max_diff, abs(count_zero - count_one))\n    return max_diff\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            max_diff = max(max_diff, abs(string[i:j].count(\"0\") - string[i:j].count(\"1\")))\n    return max_diff\n\n",
    "    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    for char in string:\n        if char == \"0\":\n            count_0 += 1\n        else:\n            count_1 += 1\n        max_diff = max(max_diff, abs(count_0 - count_1))\n    return max_diff\n\n",
    "    max_len = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            sub_string = string[i:j + 1]\n            if sub_string.count(\"0\") == sub_string.count(\"1\"):\n                max_len = max(max_len, len(sub_string))\n    return max_len\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            diff = abs(string[i:j + 1].count('0') - string[i:j + 1].count('1'))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    max_len = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            max_len = i + 1\n        if count in hash_map:\n            max_len = max(max_len, i - hash_map[count])\n        else:\n            hash_map[count] = i\n    return max_len\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            sub_string = string[i:j + 1]\n            diff = abs(sub_string.count(\"1\") - sub_string.count(\"0\"))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    max_length = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            max_length = i + 1\n        elif count in d:\n            max_length = max(max_length, i - d[count])\n        else:\n            d[count] = i\n    return max_length\n\n",
    "    max_diff = 0\n    curr_diff = 0\n    for i in string:\n        if i == \"0\":\n            curr_diff += 1\n        else:\n            curr_diff -= 1\n        max_diff = max(max_diff, abs(curr_diff))\n    return max_diff\n\n",
    "    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count_0 += 1\n        else:\n            count_1 += 1\n        max_diff = max(max_diff, abs(count_0 - count_1))\n    return max_diff\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            diff = abs(sub_string.count('0') - sub_string.count('1'))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            sub_string = string[i:j + 1]\n            diff = abs(sub_string.count('0') - sub_string.count('1'))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            diff = abs(sub_string.count('0') - sub_string.count('1'))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            sub_string = string[i:j + 1]\n            diff = abs(sub_string.count(\"0\") - sub_string.count(\"1\"))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    # max_diff = 0\n    # for i in range(len(string)):\n    #     for j in range(i, len(string)):\n    #         sub_string = string[i:j+1]\n    #         diff = abs(sub_string.count('0') - sub_string.count('1'))\n    #         if diff > max_diff:\n    #             max_diff = diff\n    # return max_diff\n\n    # max_diff = 0\n    # for i in range(len(string)):\n    #     count_0 = 0\n    #     count_1 = 0\n    #     for j in range(i, len(string)):\n    #         if string[j] == '0':\n    #             count_0 += 1\n    #         else:\n    #             count_1 += 1\n    #         diff = abs(count_0 - count_1)\n    #         if diff > max_diff:\n    #             max_diff = diff\n    # return max_diff\n\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        diff = abs(count_0 - count_1)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n\n",
    "    max_length = 0\n    count = 0\n    for i in string:\n        if i == \"0\":\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            count = 0\n        max_length = max(max_length, count)\n    return max_length\n\n",
    "    max_len = 0\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(string)):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            if abs(count_0 - count_1) <= 1:\n                max_len = max(max_len, j - i + 1)\n            else:\n                break\n    return max_len\n\n",
    "    max_len = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            max_len = i + 1\n        if count in d:\n            max_len = max(max_len, i - d[count])\n        else:\n            d[count] = i\n    return max_len\n\n",
    "    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        max_diff = max(max_diff, abs(count_0 - count_1))\n    return max_diff\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            max_diff = max(max_diff, abs(string[i:j + 1].count('0') - string[i:j + 1].count('1')))\n    return max_diff\n\n",
    "    max_diff = 0\n    count_zero = 0\n    count_one = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count_zero += 1\n        else:\n            count_one += 1\n        max_diff = max(max_diff, count_zero - count_one)\n        if max_diff < 0:\n            max_diff = 0\n            count_zero = 0\n            count_one = 0\n    return max_diff\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            sub_string = string[i:j + 1]\n            diff = abs(sub_string.count('0') - sub_string.count('1'))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            num_zeros = sub_string.count(\"0\")\n            num_ones = sub_string.count(\"1\")\n            diff = abs(num_zeros - num_ones)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            diff = abs(sub_string.count('0') - sub_string.count('1'))\n            max_diff = max(max_diff, diff)\n    return max_diff\n\n",
    "    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count_0 += 1\n        else:\n            count_1 += 1\n        if count_0 == count_1:\n            max_diff = max(max_diff, count_0)\n    return max_diff\n\n",
    "    max_len = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            if string[i:j].count(\"0\") == string[i:j].count(\"1\"):\n                max_len = max(max_len, j - i)\n    return max_len\n\n",
    "    max_length = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            max_length = i + 1\n        if count in d:\n            max_length = max(max_length, i - d[count])\n        else:\n            d[count] = i\n    return max_length\n\n",
    "    max_len = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            max_len = i + 1\n        elif count in d:\n            max_len = max(max_len, i - d[count])\n        else:\n            d[count] = i\n    return max_len\n\n",
    "    max_len = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            max_len = i + 1\n        else:\n            if count in d:\n                max_len = max(max_len, i - d[count])\n            else:\n                d[count] = i\n    return max_len\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            substring = string[i:j]\n            diff = abs(substring.count('0') - substring.count('1'))\n            max_diff = max(max_diff, diff)\n    return max_diff\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            diff = abs(sub_string.count(\"0\") - sub_string.count(\"1\"))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            diff = abs(sub_string.count('0') - sub_string.count('1'))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    max_length = 0\n    current_length = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            current_length += 1\n        else:\n            current_length -= 1\n        if current_length < 0:\n            current_length = 0\n        if current_length > max_length:\n            max_length = current_length\n    return max_length\n\n",
    "    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        max_diff = max(max_diff, abs(count_0 - count_1))\n    return max_diff\n\n",
    "    max_len = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            if string[i:j].count('0') == string[i:j].count('1'):\n                max_len = max(max_len, j - i)\n    return max_len\n\n",
    "    zeros = 0\n    ones = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            zeros += 1\n        else:\n            ones += 1\n        max_diff = max(max_diff, abs(zeros - ones))\n    return max_diff\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            if sub_string.count(\"0\") == sub_string.count(\"1\"):\n                max_diff = max(max_diff, len(sub_string))\n    return max_diff\n\n",
    "    max_length = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count -= 1\n        else:\n            count += 1\n        if count == 0:\n            max_length = i + 1\n        if count in hash_map:\n            max_length = max(max_length, i - hash_map[count])\n        else:\n            hash_map[count] = i\n    return max_length\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            diff = abs(sub_string.count('0') - sub_string.count('1'))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            sub_string = string[i:j + 1]\n            diff = abs(sub_string.count(\"0\") - sub_string.count(\"1\"))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    max_length = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            if (string[i:j].count('0') - string[i:j].count('1')) == 0:\n                max_length = max(max_length, j - i)\n    return max_length\n\n",
    "    max_length = 0\n    curr_length = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            curr_length += 1\n        else:\n            curr_length -= 1\n        if curr_length < 0:\n            curr_length = 0\n        max_length = max(max_length, curr_length)\n    return max_length\n\n",
    "    max_length = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            max_length = i + 1\n        elif count in d:\n            max_length = max(max_length, i - d[count])\n        else:\n            d[count] = i\n    return max_length\n\n",
    "    max_diff = 0\n    count_zero = 0\n    count_one = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_zero += 1\n        else:\n            count_one += 1\n        if i < len(string) - 1:\n            max_diff = max(max_diff, abs(count_one - count_zero))\n    return max_diff\n\n",
    "    max_length = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count -= 1\n        else:\n            count += 1\n        if count == 0:\n            max_length = i + 1\n        else:\n            if count in d:\n                max_length = max(max_length, i - d[count])\n            else:\n                d[count] = i\n    return max_length\n\n",
    "    max_length = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            max_length = i + 1\n        else:\n            if count in d:\n                max_length = max(max_length, i - d[count])\n            else:\n                d[count] = i\n    return max_length\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            diff = abs(sub_string.count(\"0\") - sub_string.count(\"1\"))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    max_len = 0\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count_0 += 1\n        else:\n            count_1 += 1\n        if count_0 == count_1:\n            max_len = max(max_len, count_0 + count_1)\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(string) - 1, -1, -1):\n        if string[i] == \"0\":\n            count_0 += 1\n        else:\n            count_1 += 1\n        if count_0 == count_1:\n            max_len = max(max_len, count_0 + count_1)\n    return max_len\n\n",
    "    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    for i in string:\n        if i == \"0\":\n            count_0 += 1\n        else:\n            count_1 += 1\n        max_diff = max(max_diff, abs(count_0 - count_1))\n    return max_diff\n\n",
    "    max_len = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            if string[i:j].count(\"0\") == string[i:j].count(\"1\"):\n                max_len = max(max_len, len(string[i:j]))\n    return max_len\n\n",
    "    max_len = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count -= 1\n        else:\n            count += 1\n        if count == 0:\n            max_len = i + 1\n        else:\n            if count in d:\n                max_len = max(max_len, i - d[count])\n            else:\n                d[count] = i\n    return max_len\n\n",
    "    max_len = 0\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count_0 += 1\n        else:\n            count_1 += 1\n        if count_0 == count_1:\n            max_len = max(max_len, count_0 + count_1)\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(string) - 1, -1, -1):\n        if string[i] == \"0\":\n            count_0 += 1\n        else:\n            count_1 += 1\n        if count_0 == count_1:\n            max_len = max(max_len, count_0 + count_1)\n    return max_len\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            diff = abs(sub_string.count('0') - sub_string.count('1'))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        max_diff = max(max_diff, abs(count_0 - count_1))\n    return max_diff\n\n",
    "    max_len = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            max_len = i + 1\n        else:\n            if count in d:\n                max_len = max(max_len, i - d[count])\n            else:\n                d[count] = i\n    return max_len\n\n",
    "    n = len(string)\n    max_len = 0\n    for i in range(n):\n        for j in range(i, n):\n            if string[i:j + 1].count('0') == string[i:j + 1].count('1'):\n                max_len = max(max_len, j - i + 1)\n    return max_len\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            sub_string = string[i:j + 1]\n            diff = abs(sub_string.count(\"0\") - sub_string.count(\"1\"))\n            max_diff = max(max_diff, diff)\n    return max_diff\n\n",
    "    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        max_diff = max(max_diff, abs(count_0 - count_1))\n    return max_diff\n\n",
    "    max_length = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == \"1\":\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            max_length = i + 1\n        else:\n            max_length = max(max_length, i + 1 - count)\n    return max_length\n\n",
    "    max_length = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count -= 1\n        else:\n            count += 1\n        if count == 0:\n            max_length = i + 1\n        else:\n            if count in hash_map:\n                max_length = max(max_length, i - hash_map[count])\n            else:\n                hash_map[count] = i\n    return max_length\n\n",
    "    max_diff = 0\n    n = len(string)\n    for i in range(n):\n        for j in range(i, n):\n            sub_string = string[i : j + 1]\n            zeros = sub_string.count(\"0\")\n            ones = sub_string.count(\"1\")\n            max_diff = max(max_diff, abs(zeros - ones))\n    return max_diff\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            diff = abs(sub_string.count(\"0\") - sub_string.count(\"1\"))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    max_len = 0\n    curr_len = 0\n    for i in string:\n        if i == '0':\n            curr_len += 1\n        else:\n            curr_len -= 1\n        if curr_len < 0:\n            curr_len = 0\n        if curr_len > max_len:\n            max_len = curr_len\n    return max_len\n\n",
    "    max_diff = 0\n    count_zero = 0\n    count_one = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_zero += 1\n        else:\n            count_one += 1\n        max_diff = max(max_diff, abs(count_zero - count_one))\n    return max_diff\n\n",
    "    max_length = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count -= 1\n        else:\n            count += 1\n        if count == 0:\n            max_length = i + 1\n        else:\n            if count in hash_map:\n                max_length = max(max_length, i - hash_map[count])\n            else:\n                hash_map[count] = i\n    return max_length\n\n",
    "    max_diff = 0\n    curr_diff = 0\n    for i in string:\n        if i == '0':\n            curr_diff -= 1\n        else:\n            curr_diff += 1\n        max_diff = max(max_diff, abs(curr_diff))\n    return max_diff\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            max_diff = max(max_diff, abs(string[i:j + 1].count('1') - string[i:j + 1].count('0')))\n    return max_diff\n\n",
    "    max_diff = 0\n    count_zero = 0\n    count_one = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_zero += 1\n        else:\n            count_one += 1\n        max_diff = max(max_diff, abs(count_zero - count_one))\n    return max_diff\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            diff = abs(sub_string.count('0') - sub_string.count('1'))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            diff = abs(sub_string.count('0') - sub_string.count('1'))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    for i in string:\n        if i == \"0\":\n            count_0 += 1\n        else:\n            count_1 += 1\n        max_diff = max(max_diff, abs(count_0 - count_1))\n    return max_diff\n\n",
    "    max_len = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            max_len = i + 1\n        if count in d:\n            max_len = max(max_len, i - d[count])\n        else:\n            d[count] = i\n    return max_len\n\n",
    "    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count_0 += 1\n        else:\n            count_1 += 1\n        max_diff = max(max_diff, abs(count_0 - count_1))\n    return max_diff\n\n",
    "    count = 0\n    max_count = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count -= 1\n        else:\n            count += 1\n        if count == 0:\n            max_count = i + 1\n        if count in hashmap:\n            max_count = max(max_count, i - hashmap[count])\n        else:\n            hashmap[count] = i\n    return max_count\n\n",
    "    max_length = 0\n    count = 0\n    for i in string:\n        if i == '0':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            count = 0\n        if count > max_length:\n            max_length = count\n    return max_length\n\n",
    "    max_length = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            sub_string = string[i:j + 1]\n            if abs(sub_string.count(\"0\") - sub_string.count(\"1\")) <= 1:\n                max_length = max(max_length, len(sub_string))\n    return max_length\n\n",
    "    max_len = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            max_len = i + 1\n        else:\n            if count in d:\n                max_len = max(max_len, i - d[count])\n            else:\n                d[count] = i\n    return max_len\n\n",
    "    max_len = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if string[i:j + 1].count(\"0\") == string[i:j + 1].count(\"1\"):\n                max_len = max(max_len, j - i + 1)\n    return max_len\n\n",
    "    max_len = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count -= 1\n        else:\n            count += 1\n        if count == 0:\n            max_len = i + 1\n        elif count in d:\n            max_len = max(max_len, i - d[count])\n        else:\n            d[count] = i\n    return max_len\n\n",
    "    max_length = 0\n    count = 0\n    for i in string:\n        if i == '0':\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            max_length = max(max_length, count)\n        if count < 0:\n            count = 0\n    return max_length\n\n",
    "    length = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if string[i:j].count('0') == string[i:j].count('1'):\n                length = max(length, j - i)\n    return length\n\n",
    "    max_diff = 0\n    curr_diff = 0\n    for i in string:\n        if i == \"0\":\n            curr_diff += 1\n        else:\n            curr_diff -= 1\n        max_diff = max(max_diff, abs(curr_diff))\n    return max_diff\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            diff = abs(sub_string.count(\"0\") - sub_string.count(\"1\"))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        max_diff = max(max_diff, abs(count_0 - count_1))\n    return max_diff\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            sub_string = string[i:j+1]\n            diff = abs(sub_string.count('0') - sub_string.count('1'))\n            max_diff = max(max_diff, diff)\n    return max_diff\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            max_diff = max(max_diff, abs(string[i:j].count('0') - string[i:j].count('1')))\n    return max_diff\n\n",
    "    max_length = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            max_length = i + 1\n        else:\n            if count in hash_map:\n                max_length = max(max_length, i - hash_map[count])\n            else:\n                hash_map[count] = i\n    return max_length\n\n",
    "    max_diff = 0\n    curr_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            curr_diff += 1\n        else:\n            curr_diff -= 1\n        max_diff = max(max_diff, abs(curr_diff))\n    return max_diff\n\n",
    "    max_len = 0\n    curr_len = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            curr_len += 1\n        else:\n            curr_len -= 1\n        if curr_len == 0:\n            max_len = i + 1\n        elif curr_len < 0:\n            curr_len = 0\n    return max_len\n\n",
    "    if not string:\n        return 0\n    max_diff = 0\n    curr_diff = 0\n    for c in string:\n        if c == \"0\":\n            curr_diff += 1\n        else:\n            curr_diff -= 1\n        max_diff = max(max_diff, abs(curr_diff))\n    return max_diff\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            diff = abs(sub_string.count(\"0\") - sub_string.count(\"1\"))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    # Find the first 1\n    first_one = string.find(\"1\")\n    if first_one == -1:\n        return 0\n    # Find the last 1\n    last_one = string.rfind(\"1\")\n    # Find the number of 0s between the first and last 1\n    return string[first_one:last_one].count(\"0\")\n\n",
    "    max_len = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            max_len = i + 1\n        if count in d:\n            max_len = max(max_len, i - d[count])\n        else:\n            d[count] = i\n    return max_len\n\n",
    "    max_len = 0\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(string)):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            if abs(count_0 - count_1) <= 1:\n                max_len = max(max_len, j - i + 1)\n            else:\n                break\n    return max_len\n\n",
    "    max_length = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            max_length = i + 1\n        if count in d:\n            max_length = max(max_length, i - d[count])\n        else:\n            d[count] = i\n    return max_length\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            max_diff = max(max_diff, abs(string[i:j + 1].count('0') - string[i:j + 1].count('1')))\n    return max_diff\n\n",
    "    max_length = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count -= 1\n        else:\n            count += 1\n        if count == 0:\n            max_length = i + 1\n        elif count in d:\n            max_length = max(max_length, i - d[count])\n        else:\n            d[count] = i\n    return max_length\n\n",
    "    max_len = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count -= 1\n        else:\n            count += 1\n        if count == 0:\n            max_len = i + 1\n        if count in hash_map:\n            max_len = max(max_len, i - hash_map[count])\n        else:\n            hash_map[count] = i\n    return max_len\n\n",
    "    max_len = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if string[i:j + 1].count('0') == string[i:j + 1].count('1'):\n                max_len = max(max_len, j - i + 1)\n    return max_len\n\n",
    "    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    for i in string:\n        if i == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        max_diff = max(max_diff, abs(count_0 - count_1))\n    return max_diff\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            sub_string = string[i:j + 1]\n            diff = abs(sub_string.count('0') - sub_string.count('1'))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    max_len = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            sub_string = string[i:j + 1]\n            if sub_string.count('0') == sub_string.count('1'):\n                max_len = max(max_len, len(sub_string))\n    return max_len\n\n",
    "    max_len = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            max_len = i + 1\n        elif count in d:\n            max_len = max(max_len, i - d[count])\n        else:\n            d[count] = i\n    return max_len\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            diff = abs(sub_string.count(\"0\") - sub_string.count(\"1\"))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    max_diff = 0\n    curr_diff = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            curr_diff += 1\n        else:\n            curr_diff -= 1\n        if curr_diff < 0:\n            curr_diff = 0\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n    return max_diff\n\n",
    "    max_len = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            max_len = i + 1\n        else:\n            if count in d:\n                max_len = max(max_len, i - d[count])\n            else:\n                d[count] = i\n    return max_len\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            diff = abs(string[i:j].count(\"0\") - string[i:j].count(\"1\"))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            diff = abs(string[i:j + 1].count('0') - string[i:j + 1].count('1'))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    max_len = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            max_len = i + 1\n        else:\n            if count in d:\n                max_len = max(max_len, i - d[count])\n            else:\n                d[count] = i\n    return max_len\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            diff = abs(sub_string.count(\"0\") - sub_string.count(\"1\"))\n            max_diff = max(max_diff, diff)\n    return max_diff\n\n",
    "    max_length = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            max_length = i + 1\n        elif count in hash_map:\n            max_length = max(max_length, i - hash_map[count])\n        else:\n            hash_map[count] = i\n    return max_length\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            sub_string = string[i:j + 1]\n            diff = abs(sub_string.count('0') - sub_string.count('1'))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    max_diff = 0\n    count_zero = 0\n    count_one = 0\n    for i in string:\n        if i == '0':\n            count_zero += 1\n        else:\n            count_one += 1\n        max_diff = max(max_diff, abs(count_zero - count_one))\n    return max_diff\n\n",
    "    max_diff = 0\n    curr_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            curr_diff += 1\n        else:\n            curr_diff -= 1\n        if curr_diff < 0:\n            curr_diff = 0\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n    return max_diff\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            sub_string = string[i:j + 1]\n            diff = abs(sub_string.count('0') - sub_string.count('1'))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            diff = abs(sub_string.count(\"0\") - sub_string.count(\"1\"))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            diff = abs(sub_string.count(\"0\") - sub_string.count(\"1\"))\n            max_diff = max(max_diff, diff)\n    return max_diff\n\n",
    "    max_len = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if string[i:j + 1].count(\"0\") == string[i:j + 1].count(\"1\"):\n                max_len = max(max_len, j - i + 1)\n    return max_len\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            diff = abs(sub_string.count(\"0\") - sub_string.count(\"1\"))\n            max_diff = max(max_diff, diff)\n    return max_diff\n\n",
    "    max_len = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if string[i:j + 1].count('0') == string[i:j + 1].count('1'):\n                max_len = max(max_len, j - i + 1)\n    return max_len\n\n",
    "    max_len = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            max_len = i + 1\n        elif count in hash_map:\n            max_len = max(max_len, i - hash_map[count])\n        else:\n            hash_map[count] = i\n    return max_len\n\n",
    "    max_len = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            if is_valid(string[i:j]):\n                max_len = max(max_len, j - i)\n    return max_len\n\n",
    "    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if string[i:j + 1].count('0') - string[i:j + 1].count('1') > max_diff:\n                max_diff = string[i:j + 1].count('0') - string[i:j + 1].count('1')\n    return max_diff\n\n"
  ]
}