language: cpp
name: HumanEval_7_filter_by_substring
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> ret;\n    for\
    \ (auto e : strings) {\n        if (e.find(substring) != std::string::npos) {\n\
    \            ret.push_back(e);\n        }\n    }\n    return ret;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115962
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  std::copy_if(strings.begin(), strings.end(), std::back_inserter(result), [substring](std::string\
    \ str) {\n        return str.find(substring) != std::string::npos;\n    });\n\
    \    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115962
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filtered;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115961
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string str : strings) {\n        if (str.find(substring) != std::string::npos)\
    \ {\n            result.push_back(str);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115962
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string>::iterator it;\n\
    \    for(it = strings.begin(); it != strings.end(); it++) {\n        std::size_t\
    \ found = (*it).find(substring);\n        if(found != std::string::npos)\n   \
    \         break;\n    }\n    std::vector<std::string>::iterator it2;\n    it2\
    \ = strings.erase(it, strings.end());\n    return strings;\n}\nint main() {\n\
    \    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmplovpcbnf: /tmp/tmplovpcbnf.cpp:22: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660115963
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    for (std::vector<std::string>::iterator\
    \ it = strings.begin(); it != strings.end();) {\n        if ((*it).find(substring)\
    \ == std::string::npos) {\n            it = strings.erase(it);\n        } else\
    \ {\n            ++it;\n        }\n    }\n    return strings;\n}\nint main() {\n\
    \    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115962
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result_strings;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result_strings.push_back(s);\n        }\n    }\n    return result_strings;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115962
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> newStrings;\n\
    \    for (std::string str : strings) {\n        if (str.find(substring) != std::string::npos)\
    \ {\n            newStrings.push_back(str);\n        }\n    }\n    return newStrings;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115962
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filtered;\n\
    \    for (const auto& str : strings) {\n        if (str.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(str);\n        }\n    }\n    return filtered;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115962
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> result;\n  for\
    \ (auto it = strings.begin(); it != strings.end(); ++it) {\n    if (it->find(substring)\
    \ != std::string::npos) {\n      result.push_back(*it);\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115962
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> results;\n  for\
    \ (auto& str : strings) {\n    if (str.find(substring) != std::string::npos) {\n\
    \      results.push_back(str);\n    }\n  }\n  return results;\n}\nint main() {\n\
    \    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115963
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filtered;\n\
    \    for (auto &x : strings) {\n        if (x.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(x);\n        }\n    }\n    return filtered;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115962
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> res;\n  for (std::string\
    \ s : strings) {\n    //find the substring in the string\n    if (s.find(substring)\
    \ != std::string::npos) {\n      res.push_back(s);\n    }\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115962
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (const auto& str : strings) {\n        if (str.find(substring) != std::string::npos)\
    \ {\n            result.push_back(str);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115962
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n\tassert(false);\n}\nint main() {\n    auto\
    \ candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpj2l1fhrv: /tmp/tmpj2l1fhrv.cpp:9: std::vector<std::__cxx11::basic_string<char>
    > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string):
    Assertion `false'' failed.

    '
  stdout: ''
  timestamp: 1660115963
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    // TODO: Implement filter_by_substring\n\
    \    return strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpveru5iu3: /tmp/tmpveru5iu3.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660115963
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    // TODO: Implement me!\n    // Print\
    \ the strings\n    std::vector<std::string> filtered;\n    for (std::string s\
    \ : strings) {\n        //std::cout << s << \"\\n\";\n        if (s.find(substring)\
    \ != std::string::npos) {\n            filtered.push_back(s);\n        }\n   \
    \ }\n    return filtered;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115962
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> vec;\n    for(int\
    \ i=0;i<strings.size();i++){\n        std::string s = strings[i];\n        if(s.find(substring)\
    \ != std::string::npos){\n            vec.push_back(s);\n        }\n    }\n  \
    \  return vec;\n}\nint main() {\n    auto candidate = filter_by_substring;\n \
    \   assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115963
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\nstd::vector<std::string> result;\nfor (auto\
    \ x : strings) {\n    if (x.find(substring) != std::string::npos) {\n        result.push_back(x);\n\
    \    }\n}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnav4eq3h.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpnav4eq3h.cpp:15:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   15 | int main() {\n      |            ^\n/tmp/tmpnav4eq3h.cpp:21:1:\
    \ error: expected \u2018}\u2019 at end of input\n   21 | }\n      | ^\n/tmp/tmpnav4eq3h.cpp:8:103:\
    \ note: to match this \u2018{\u2019\n    8 | std::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n      |                                 \
    \                                                                      ^\n/tmp/tmpnav4eq3h.cpp:21:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   21 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660115961
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    for (int i = 0; i < strings.size(); i++)\
    \ {\n        if (strings[i].find(substring) == std::string::npos) {\n        \
    \    strings.erase(strings.begin() + i);\n            i--;\n        }\n    }\n\
    \    return strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115963
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    for (int i = 0; i < strings.size(); i++)\
    \ {\n        auto it = std::find(strings[i].begin(), strings[i].end(), substring);\n\
    \        if (it == strings[i].end()) {\n            strings.erase(strings.begin()\
    \ + i);\n            i--;\n        }\n    }\n    return strings;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n    \
    \             from /usr/include/c++/9/bits/specfun.h:45,\n                 from\
    \ /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp8kxgfip7.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_equals_val<_Value>::operator()(_Iterator)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >; _Value = const std::__cxx11::basic_string<char>]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:120:14:\
    \   required from \u2018_RandomAccessIterator std::__find_if(_RandomAccessIterator,\
    \ _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; _Predicate\
    \ = __gnu_cxx::__ops::_Iter_equals_val<const std::__cxx11::basic_string<char>\
    \ >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:161:23:   required from \u2018\
    _Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _Predicate = __gnu_cxx::__ops::_Iter_equals_val<const\
    \ std::__cxx11::basic_string<char> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:3944:28:\
    \   required from \u2018_IIter std::find(_IIter, _IIter, const _Tp&) [with _IIter\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; _Tp\
    \ = std::__cxx11::basic_string<char>]\u2019\n/tmp/tmp8kxgfip7.cpp:10:76:   required\
    \ from here\n/usr/include/c++/9/bits/predefined_ops.h:241:17: error: no match\
    \ for \u2018operator==\u2019 (operand types are \u2018char\u2019 and \u2018const\
    \ std::__cxx11::basic_string<char>\u2019)\n  241 |  { return *__it == _M_value;\
    \ }\n      |           ~~~~~~^~~~~~~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41"
  stdout: ''
  timestamp: 1660115962
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> vec;\n    for(auto\
    \ i = strings.begin(); i!=strings.end(); i++){\n        auto pos = (*i).find(substring);\n\
    \        if(pos != std::string::npos){\n            vec.push_back(*i);\n     \
    \   }\n    }\n    return vec;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115963
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> results;\n \
    \   for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            results.push_back(s);\n        }\n    }\n    return results;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115963
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> result;\n  for\
    \ (const auto& s : strings) {\n    if (s.find(substring) != std::string::npos)\
    \ {\n      result.push_back(s);\n    }\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115963
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filteredList;\n\
    \    for(int i = 0; i < strings.size(); i++) {\n        std::string string = strings[i];\n\
    \        int substringLen = substring.length();\n        for(int j = 0; j < string.length();\
    \ j++) {\n            if(string[j] == substring[0]) {\n                if(string.substr(j,\
    \ substringLen) == substring) {\n                    filteredList.push_back(string);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    return filteredList;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115963
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> sub_strings;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            sub_strings.push_back(s);\n        }\n    }\n    return sub_strings;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115962
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> filtered_strings;\n\
    \  for (int i = 0; i < strings.size(); i++) {\n    bool contain_substring = false;\n\
    \    for (int j = 0; j < strings[i].size(); j++) {\n      if (strings[i][j] ==\
    \ substring[0]) {\n        int cnt = 0;\n        for (int k = j; k < strings[i].size();\
    \ k++) {\n          if (cnt == substring.size()) {\n            contain_substring\
    \ = true;\n            break;\n          }\n          if (strings[i][k] == substring[cnt])\
    \ {\n            cnt++;\n          } else {\n            break;\n          }\n\
    \        }\n      }\n    }\n    if (contain_substring) {\n      filtered_strings.push_back(strings[i]);\n\
    \    }\n  }\n  return filtered_strings;\n}\nint main() {\n    auto candidate =\
    \ filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpea1kbb51: /tmp/tmpea1kbb51.cpp:37: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660115963
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  std::copy_if(strings.begin(), strings.end(), std::back_inserter(result), [&](std::string\
    \ str) {\n        return str.find(substring) != std::string::npos;\n    });\n\
    \    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115963
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> ret;\n    for\
    \ (auto &s : strings) {\n        if (s.find(substring) != std::string::npos)\n\
    \            ret.push_back(s);\n    }\n    return ret;\n}\nint main() {\n    auto\
    \ candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115962
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> answer;\n  \
    \  std::vector<std::string>::iterator itr = strings.begin();\n    while(itr !=\
    \ strings.end()) {\n        if(itr->find(substring) != std::string::npos) {\n\
    \            answer.push_back(*itr);\n        }\n        itr++;\n    }\n    return\
    \ answer;\n}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115962
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    // create an empty vector\n    std::vector<std::string>\
    \ filtered_strings;\n    // loop through the string\n    for (std::string this_string\
    \ : strings) {\n        if (this_string.find(substring) != std::string::npos)\
    \ {\n            filtered_strings.push_back(this_string);\n        }\n    }\n\
    \    return filtered_strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115963
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n\tstd::vector<std::string> result;\n\tfor\
    \ (int i = 0; i < strings.size(); i++) {\n\t\tif (strings[i].find(substring) !=\
    \ std::string::npos) {\n\t\t\tresult.push_back(strings[i]);\n\t\t}\n\t}\n\treturn\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115963
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n\tstd::vector<std::string> filtered;\n\t\
    std::copy_if(strings.begin(), strings.end(), std::back_inserter(filtered),\n\t\
    \t[&substring](std::string s) {\n\t\t\treturn s.find(substring) != std::string::npos;\n\
    \t\t});\n\treturn filtered;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115963
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n\tstd::vector<std::string> result;\n\tfor\
    \ (std::string s : strings) {\n\t\tif (s.find(substring) != std::string::npos)\
    \ {\n\t\t\tresult.push_back(s);\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n\
    \    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115962
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> ret;\n    for\
    \ (int i = 0; i < strings.size(); i++) {\n        std::string str = strings[i];\n\
    \        if (str.find(substring) != std::string::npos) {\n            ret.push_back(str);\n\
    \        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115963
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> result;\n  for\
    \ (std::string s : strings) {\n    if (s.find(substring) != std::string::npos)\
    \ {\n      result.push_back(s);\n    }\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115963
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> res;\n  for (auto\
    \ s : strings) {\n    if (s.find(substring) != std::string::npos) {\n      res.push_back(s);\n\
    \    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115963
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\nstd::vector<std::string>::iterator it;\n\
    for(it=strings.begin();it!=strings.end();it++)\n{\n\tstd::string str = *it;\n\t\
    std::size_t found = str.find(substring);\n\tif(found!=std::string::npos)\n\t{\n\
    \tstd::cout<<*it<<std::endl;\n\t}\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnegni8jn.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpnegni8jn.cpp:19:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   19 | int main() {\n      |            ^\n/tmp/tmpnegni8jn.cpp:25:1:\
    \ error: expected \u2018}\u2019 at end of input\n   25 | }\n      | ^\n/tmp/tmpnegni8jn.cpp:8:103:\
    \ note: to match this \u2018{\u2019\n    8 | std::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n      |                                 \
    \                                                                      ^\n/tmp/tmpnegni8jn.cpp:25:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   25 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660115962
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> res;\n    for\
    \ (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            res.push_back(strings[i]);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115963
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> res;\n    for\
    \ (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            res.push_back(strings[i]);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115963
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> result;\n  for\
    \ (auto const & str : strings) {\n    if (str.find(substring) != std::string::npos)\
    \ {\n      result.push_back(str);\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115963
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string i : strings) {\n        if (i.find(substring) != std::string::npos)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115963
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n   std::vector<std::string> v;\n   for(int\
    \ i=0;i<strings.size();i++)\n   {\n      std::string s=strings[i];\n      int\
    \ flag=0;\n      for(int j=0;j<s.length();j++)\n      {\n         if(s[j]==substring[0])\n\
    \         {\n            flag=1;\n            break;\n         }\n      }\n  \
    \    if(flag==1)\n      {\n         v.push_back(s);\n      }\n   }\n   return\
    \ v;\n}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpn918t847: /tmp/tmpn918t847.cpp:32: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660115963
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> new_strings;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            new_strings.push_back(s);\n        }\n    }\n    return new_strings;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115963
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  std::copy_if(strings.begin(), strings.end(), std::back_inserter(result), [&](std::string\
    \ str) {\n        return str.find(substring) != std::string::npos;\n    });\n\
    \    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115963
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> res;\n    for\
    \ (std::string& s : strings) {\n        size_t found = s.find(substring);\n  \
    \      if (found != std::string::npos) {\n            res.push_back(s);\n    \
    \    }\n    }\n    return res;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115963
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> filtered;\n  for\
    \ (int i = 0; i < strings.size(); i++) {\n    if (strings[i].find(substring) !=\
    \ std::string::npos) {\n      filtered.push_back(strings[i]);\n    }\n  }\n  return\
    \ filtered;\n}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115963
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> output;\n  \
    \  for (int i = 0; i < strings.size(); i++) {\n        std::string element = strings[i];\n\
    \        // string::find returns the index of the first character of a substring.\n\
    \        // If it can't find the substring, it returns the value npos (string::npos)\n\
    \        if (element.find(substring) != std::string::npos) {\n            output.push_back(element);\n\
    \        }\n    }\n    return output;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115963
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto str : strings) {\n        if (str.find(substring) != std::string::npos)\
    \ {\n            result.push_back(str);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115964
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filter;\n  \
    \  std::string string;\n    std::string::size_type found;\n    for (auto it =\
    \ strings.begin(); it != strings.end(); ++it) {\n        string = *it;\n     \
    \   found = string.find(substring);\n        if (found != std::string::npos) {\n\
    \            filter.push_back(string);\n        }\n    }\n    return filter;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115964
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> output;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            output.push_back(s);\n        }\n    }\n    return output;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n\tstd::vector<std::string> filtered_list;\n\
    \tfor (std::string word : strings) {\n\t\tstd::size_t found = word.find(substring);\n\
    \t\tif (found != std::string::npos) {\n\t\t\tfiltered_list.push_back(word);\n\t\
    \t}\n\t}\n\treturn filtered_list;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> output;\n  for\
    \ (int i = 0; i < strings.size(); i++) {\n    if (strings[i].find(substring) !=\
    \ std::string::npos) {\n      output.push_back(strings[i]);\n    }\n  }\n  return\
    \ output;\n}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> out;\n  for (auto\
    \ s : strings) {\n    if (s.find(substring) != std::string::npos) {\n      out.push_back(s);\n\
    \    }\n  }\n  return out;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filtered;\n\
    \    // Loop through vector, get each element and check if it has the substring\n\
    \    for (int i = 0; i < strings.size(); i++) {\n        // If substring exists,\
    \ push the string onto the vector\n        if (strings[i].find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> res;\n    for\
    \ (std::string s : strings) {\n        int pos = s.find(substring);\n        if\
    \ (pos != std::string::npos) {\n            res.push_back(s);\n        }\n   \
    \ }\n    return res;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> ans;\n  for (int\
    \ i = 0; i < strings.size(); i++) {\n    if (strings[i].find(substring) != std::string::npos)\
    \ {\n      ans.push_back(strings[i]);\n    }\n  }\n  return ans;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (int i = 0; i < strings.size(); i++) {\n        int l = 0;\n        int\
    \ r = 0;\n        for (int j = 0; j < strings[i].size(); j++) {\n            if\
    \ (strings[i][j] == substring[0]) {\n                l = j;\n                r\
    \ = j;\n                while (r < strings[i].size() && r - l < substring.size()\
    \ && strings[i][r] == substring[r - l]) {\n                    r++;\n        \
    \        }\n                if (r - l == substring.size()) {\n               \
    \     result.push_back(strings[i]);\n                    break;\n            \
    \    }\n            }\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> ans;\n    for(std::string\
    \ s: strings) {\n        if(s.find(substring) != std::string::npos) {\n      \
    \      ans.push_back(s);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    // YOUR CODE HERE\n    std::vector<std::string>::iterator\
    \ itr = strings.begin();\n\n    while(itr != strings.end())\n    {\n        if(itr->find(substring)\
    \ == std::string::npos)\n        {\n            itr = strings.erase(itr);\n  \
    \      }\n        else\n        {\n            itr++;\n        }\n    }\n    return\
    \ strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filtered_strings;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered_strings.push_back(s);\n        }\n    }\n    return\
    \ filtered_strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filtered;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> new_strings;\n\
    \    for (std::string str : strings) {\n        if (str.find(substring) != std::string::npos)\
    \ {\n            new_strings.push_back(str);\n        }\n    }\n    return new_strings;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> output;\n  \
    \  for (auto str : strings) {\n        if (str.find(substring) != std::string::npos)\
    \ {\n            output.push_back(str);\n        }\n    }\n    return output;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string>::iterator it;\n\
    \    for(it = strings.begin(); it != strings.end(); it++) {\n        if(it->find(substring)\
    \ == std::string::npos) {\n            strings.erase(it);\n        }\n    }\n\
    \    return strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmp8d3bjxp0: /tmp/tmp8d3bjxp0.cpp:20: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> result;\n  for\
    \ (std::string &s : strings) {\n    if (s.find(substring) != std::string::npos)\
    \ {\n      result.push_back(s);\n    }\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    // go through all the strings in the\
    \ array\n    // check if substring is in string\n    // return only strings that\
    \ contain the substring\n    std::vector<std::string> filteredStrings;\n    //\
    \ iterate through each string in strings\n    for (std::string string : strings)\
    \ {\n        // check if substring is in string\n        if (string.find(substring)\
    \ != std::string::npos) {\n            // if it is, add string to filtered strings\n\
    \            filteredStrings.push_back(string);\n        }\n    }\n    return\
    \ filteredStrings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  std::copy_if(strings.begin(), strings.end(), std::back_inserter(result), [&](const\
    \ std::string & s) { return s.find(substring) != std::string::npos;});\n    return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> output;\n  for\
    \ (int i = 0; i < strings.size(); i++) {\n    bool contains = false;\n    for\
    \ (int k = 0; k < strings[i].size(); k++) {\n      if (strings[i][k] == substring[0])\
    \ {\n        contains = true;\n        for (int j = 0; j < substring.size(); j++)\
    \ {\n          if (strings[i][k+j] != substring[j]) {\n            contains =\
    \ false;\n            break;\n          }\n        }\n        if (contains) break;\n\
    \      }\n    }\n    if (contains) output.push_back(strings[i]);\n  }\n  return\
    \ output;\n}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto& s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> filtered;\n  for\
    \ (auto word : strings) {\n    if (word.find(substring) != std::string::npos)\
    \ {\n      filtered.push_back(word);\n    }\n  }\n  return filtered;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> res;\n    for\
    \ (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            res.push_back(s);\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string>::iterator it;\n\
    \    for(it = strings.begin(); it != strings.end(); it++) {\n        if(it->find(substring)\
    \ == std::string::npos) {\n            it = strings.erase(it);\n            it--;\n\
    \        }\n    }\n    return strings;\n}\nint main() {\n    auto candidate =\
    \ filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> ret;\n  for (std::string\
    \ str : strings) {\n    if (str.find(substring) != std::string::npos) {\n    \
    \  ret.push_back(str);\n    }\n  }\n  return ret;\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filtered_strings;\n\
    \    for (auto str : strings) {\n        if (str.find(substring) != std::string::npos)\
    \ {\n            filtered_strings.push_back(str);\n        }\n    }\n    return\
    \ filtered_strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> arr;\n    for(auto\
    \ x:strings){\n        if(x.find(substring)!=std::string::npos){\n           \
    \ arr.push_back(x);\n        }\n    }\n    return arr;\n}\nint main() {\n    auto\
    \ candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> ret;\n    for\
    \ (auto i = strings.begin(); i != strings.end(); i++) {\n        if (i->find(substring)\
    \ != std::string::npos)\n            ret.push_back(*i);\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  // write your code here\n    for(auto x:strings){\n        if(x.find(substring)!=std::string::npos){\n\
    \            result.push_back(x);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n\tstd::vector<std::string> output;\n\tfor\
    \ (auto it = strings.begin(); it != strings.end(); ++it) {\n\t\tif (it->find(substring)\
    \ != std::string::npos) {\n\t\t\toutput.push_back(*it);\n\t\t}\n\t}\n\treturn\
    \ output;\n}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> matches;\n \
    \   for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            matches.push_back(s);\n        }\n    }\n    return matches;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> vec;\n    for(int\
    \ i=0;i<strings.size();i++){\n        if(strings[i].find(substring)!=std::string::npos){\n\
    \            vec.push_back(strings[i]);\n        }\n    }\n    return vec;\n}\n\
    int main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto& s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    for (auto it = strings.begin(); it !=\
    \ strings.end();) {\n        if (it->find(substring) == std::string::npos)\n \
    \           it = strings.erase(it);\n        else\n            ++it;\n    }\n\
    \    return strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> res;\n    for\
    \ (const auto& str : strings) {\n        if (str.find(substring) != std::string::npos)\
    \ {\n            res.push_back(str);\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  // Create output vector.\n  std::vector<std::string>\
    \ output;\n  // Add strings that contain substring.\n  for (auto & string : strings)\
    \ {\n    if (string.find(substring) != std::string::npos) {\n      output.push_back(string);\n\
    \    }\n  }\n  // Return output vector.\n  return output;\n}\nint main() {\n \
    \   auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string>::iterator it;\n\
    \    for(it = strings.begin(); it != strings.end(); ++it) {\n        if((*it).find(substring)\
    \ == std::string::npos) {\n            it = strings.erase(it);\n            --it;\n\
    \        }\n    }\n    return strings;\n}\nint main() {\n    auto candidate =\
    \ filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (int i = 0; i < strings.size(); i++) {\n        int found = strings[i].find(substring);\n\
    \        if (found != std::string::npos) {\n            result.push_back(strings[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> v;\n    for(int\
    \ i=0;i<strings.size();i++){\n        if(strings[i].find(substring)!=std::string::npos){\n\
    \            v.push_back(strings[i]);\n        }\n    }\n    return v;\n}\nint\
    \ main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> mystrings;\n \
    \ for (std::string& s : strings) {\n    if (s.find(substring) != std::string::npos)\
    \ {\n      mystrings.push_back(s);\n    }\n  }\n  return mystrings;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string string : strings) {\n        if (string.find(substring) !=\
    \ std::string::npos) {\n            result.push_back(string);\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (int i = 0; i < strings.size(); i++) {\n        int flag = 0;\n       \
    \ for (int j = 0; j < substring.size(); j++) {\n            if (strings[i].find(substring[j])\
    \ == std::string::npos) {\n                flag = 1;\n                break;\n\
    \            }\n        }\n        if (flag == 0) {\n            result.push_back(strings[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmp6gyu0psy: /tmp/tmp6gyu0psy.cpp:27: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660115966
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\n\
    \            result.push_back(s);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> result;\n  std::for_each(strings.begin(),\
    \ strings.end(), [&](std::string s) {\n    if (s.find(substring) != std::string::npos)\n\
    \      result.push_back(s);\n  });\n  return result;\n}\nint main() {\n    auto\
    \ candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115966
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  // TODO: implement this function\n    for(std::string s : strings){\n     \
    \   if(s.find(substring) != std::string::npos){\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115966
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filtered;\n\
    \    for (const auto& s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115966
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filtered_strings;\n\
    \    for (std::string &curr_string : strings) {\n        if (curr_string.find(substring)\
    \ != std::string::npos) {\n            filtered_strings.push_back(curr_string);\n\
    \        }\n    }\n    return filtered_strings;\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115967
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filtered_list;\n\
    \    for (auto i = strings.begin(); i != strings.end(); i++) {\n        if ((*i).find(substring)\
    \ != std::string::npos) {\n            filtered_list.push_back(*i);\n        }\n\
    \    }\n    return filtered_list;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115967
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> res;\n  for (int\
    \ i = 0; i < strings.size(); i++) {\n    if (strings[i].find(substring) != std::string::npos)\n\
    \      res.push_back(strings[i]);\n  }\n  return res;\n}\nint main() {\n    auto\
    \ candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115967
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  std::string str;\n    for (int i = 0; i < strings.size(); i++) {\n        str\
    \ = strings[i];\n        for (int j = 0; j < str.length(); j++) {\n          \
    \  if (str[j] == substring[0]) {\n                result.push_back(str);\n   \
    \             break;\n            }\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpio2v2ps8: /tmp/tmpio2v2ps8.cpp:25: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660115968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  result.clear();\n    for (auto s : strings) {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            result.push_back(s);\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115967
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    // YOUR CODE HERE\n    std::vector<std::string>\
    \ ret;\n    for(int i = 0; i < strings.size(); i++){\n        if(strings[i].find(substring)\
    \ != std::string::npos){\n            ret.push_back(strings[i]);\n        }\n\
    \    }\n    return ret;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115967
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filtered;\n\
    \    for (int i = 0; i < strings.size(); i++) {\n        bool contains = false;\n\
    \        for (int j = 0; j < strings[i].size(); j++) {\n            if (strings[i][j]\
    \ == substring[0]) {\n                bool matches = true;\n                for\
    \ (int k = 0; k < substring.size(); k++) {\n                    if (strings[i][j\
    \ + k] != substring[k]) {\n                        matches = false;\n        \
    \                break;\n                    }\n                }\n          \
    \      if (matches) {\n                    contains = true;\n                \
    \    break;\n                }\n            }\n        }\n        if (contains)\
    \ {\n            filtered.push_back(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115967
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n\tstd::vector<std::string> newList;\n\tfor\
    \ (int i = 0; i < strings.size(); i++) {\n\t\tif (strings[i].find(substring) !=\
    \ std::string::npos) {\n\t\t\tnewList.push_back(strings[i]);\n\t\t}\n\t}\n\treturn\
    \ newList;\n}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115967
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    // assert(strings.size() > 0);\n    std::vector<std::string>\
    \ s;\n    int l = substring.length();\n    int count = 0;\n    for(int i = 0;\
    \ i < strings.size(); i++) {\n        for(int j = 0; j < strings[i].length();\
    \ j++) {\n            if(strings[i][j] == substring[0]) {\n                for(int\
    \ k = 0; k < l; k++) {\n                    if(strings[i][j+k] == substring[k])\
    \ {\n                        count++;\n                    }\n               \
    \ }\n            }\n        }\n        if(count == l) {\n            s.push_back(strings[i]);\n\
    \        }\n        count = 0;\n    }\n    return s;\n}\nint main() {\n    auto\
    \ candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmp2kz4f6nb: /tmp/tmp2kz4f6nb.cpp:33: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660115968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n\tstd::vector<std::string> res;\n\tfor (std::string\
    \ s : strings) {\n\t\tif (s.find(substring) != std::string::npos) {\n\t\t\tres.push_back(s);\n\
    \t\t}\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filtered;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> ans;\n  std::vector<std::string>::iterator\
    \ it = strings.begin();\n  for(; it != strings.end(); it++) {\n    std::string::size_type\
    \ idx = (*it).find(substring);\n    if(idx != std::string::npos) {\n      ans.push_back(*it);\n\
    \    }\n  }\n  return ans;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filtered_strings;\n\
    \    for (auto it = strings.begin(); it != strings.end(); ++it) {\n        if\
    \ (it->find(substring) != std::string::npos) {\n            filtered_strings.push_back(*it);\n\
    \        }\n    }\n    return filtered_strings;\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> tmp;\n    for\
    \ (auto i : strings) {\n        if (i.find(substring) != -1) {\n            tmp.push_back(i);\n\
    \        }\n    }\n    return tmp;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n\tstd::vector<std::string> filtered_strings;\n\
    \tstd::vector<std::string>::iterator it;\n\tfor (it = strings.begin(); it != strings.end();\
    \ it++) {\n\t\tif ((*it).find(substring) != std::string::npos) {\n\t\t\tfiltered_strings.push_back(*it);\n\
    \t\t}\n\t}\n\treturn filtered_strings;\n}\nint main() {\n    auto candidate =\
    \ filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115968
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n   std::vector<std::string>v2;\n   for(int\
    \ i=0;i<strings.size();i++)\n    {\n        if(strings[i].find(substring)!=string::npos)\n\
    \            v2.push_back(strings[i]);\n    }\n   return v2;\n}\nint main() {\n\
    \    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaz9xt_c1.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpaz9xt_c1.cpp:12:40: error: \u2018string\u2019 has not been declared\n\
    \   12 |         if(strings[i].find(substring)!=string::npos)\n      |       \
    \                                 ^~~~~~\n"
  stdout: ''
  timestamp: 1660115967
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n\tstd::vector<std::string> result;\n\tfor\
    \ (std::string s : strings) {\n\t\tif (s.find(substring) != std::string::npos)\
    \ {\n\t\t\tresult.push_back(s);\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n\
    \    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115962
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filtered_strings;\n\
    \    for (std::string element : strings) {\n        if (element.find(substring)\
    \ != std::string::npos) {\n            filtered_strings.push_back(element);\n\
    \        }\n    }\n    return filtered_strings;\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n\tstd::vector<std::string> output;\n\tfor\
    \ (auto i = strings.begin(); i != strings.end(); i++) {\n\t\tif (std::size_t found\
    \ = (*i).find(substring); found != std::string::npos) {\n\t\t\toutput.push_back(*i);\n\
    \t\t}\n\t}\n\treturn output;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filtered_strings;\n\
    \    std::copy_if(strings.begin(), strings.end(), std::back_inserter(filtered_strings),\
    \ [&substring](std::string s) { return s.find(substring) != std::string::npos;\
    \ });\n    return filtered_strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> newVec;\n  \
    \  for(int i = 0; i < strings.size(); i++){\n        if(strings[i].find(substring)\
    \ != std::string::npos){\n            newVec.push_back(strings[i]);\n        }\n\
    \    }\n    return newVec;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filtered_strings;\n\
    \    for (auto string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            filtered_strings.push_back(string);\n        }\n    }\n    return\
    \ filtered_strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto&& s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    // YOUR CODE HERE\n    std::vector<std::string>\
    \ ans;\n    for(auto i = 0; i < strings.size(); ++i) {\n        if(strings[i].find(substring)\
    \ != std::string::npos) {\n            ans.push_back(strings[i]);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n   std::vector<std::string> new_strings;\n\
    \   for (int i = 0; i < strings.size(); i++) {\n       if (strings[i].find(substring)\
    \ != std::string::npos) {\n           new_strings.push_back(strings[i]);\n   \
    \    }\n   }\n   return new_strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (const auto& word : strings) {\n        if (word.find(substring) != std::string::npos)\
    \ {\n            result.push_back(word);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n\tstd::vector<std::string> result;\n\tfor\
    \ (std::string s : strings) {\n\t\tif (s.find(substring) != std::string::npos)\
    \ {\n\t\t\tresult.push_back(s);\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n\
    \    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115962
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> newStrings;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            newStrings.push_back(s);\n        }\n    }\n    return newStrings;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n\tstd::vector<std::string> filtered_strings;\n\
    \tfor (auto const& s : strings) {\n\t\tif (s.find(substring) != std::string::npos)\
    \ {\n\t\t\tfiltered_strings.push_back(s);\n\t\t}\n\t}\n\treturn filtered_strings;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115968
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n\tstd::vector<std::string> filtered;\n\t\
    int stringSize = strings.size();\n\tint substringSize = substring.size();\n\t\
    for (int i = 0; i < stringSize; i++) {\n\t\tint j = 0;\n\t\twhile (j < substringSize)\
    \ {\n\t\t\tif (strings[i][j] == substring[j]) {\n\t\t\t\tj++;\n\t\t\t}\n\t\t\t\
    else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (j == substringSize) {\n\t\t\t\
    filtered.push_back(strings[i]);\n\t\t}\n\t}\n\treturn filtered;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmp8f88t77v: /tmp/tmp8f88t77v.cpp:32: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "aaaxxy", "john doe", "xxxAAA", "xxx"})), ("xx")) == (std::vector<std::string>({"xxx",
    "aaaxxy", "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660115968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filtered_strings;\n\
    \    for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            filtered_strings.push_back(strings[i]);\n\
    \        }\n    }\n    return filtered_strings;\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            result.push_back(strings[i]);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filtered_strings;\n\
    \    std::for_each(strings.begin(), strings.end(), [&](std::string string) {\n\
    \        if (string.find(substring) != std::string::npos) {\n            filtered_strings.push_back(string);\n\
    \        }\n    });\n    return filtered_strings;\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto& s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> result;\n  for\
    \ (std::string s : strings) {\n    if (s.find(substring) != std::string::npos)\
    \ {\n      result.push_back(s);\n    }\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115963
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            result.push_back(strings[i]);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n\tstd::vector<std::string> filtered_vector;\n\
    \tstd::copy_if(strings.begin(), strings.end(), std::back_inserter(filtered_vector),\
    \ [substring](std::string str) {return (str.find(substring) != std::string::npos);\
    \ });\n\treturn filtered_vector;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> result;\n  for\
    \ (auto string : strings) {\n    if (string.find(substring) != std::string::npos)\
    \ {\n      result.push_back(string);\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115968
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> output;\n  \
    \  // your code here\n    return output;\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmplr836njt: /tmp/tmplr836njt.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660115968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> output;\n  \
    \  for (const auto& el: strings) {\n        if (el.find(substring) != std::string::npos)\
    \ {\n            output.push_back(el);\n        }\n    }\n    return output;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n\tstd::vector<std::string> filtered_strings;\n\
    \tfor (auto s : strings) {\n\t\tif (s.find(substring) != std::string::npos) {\n\
    \t\t\tfiltered_strings.push_back(s);\n\t\t}\n\t}\n\treturn filtered_strings;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> result;\n  for\
    \ (auto str : strings) {\n    if (str.find(substring) != std::string::npos) {\n\
    \      result.push_back(str);\n    }\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n\tstd::vector<std::string>::iterator it;\n\
    \tstd::vector<std::string> res;\n\tfor(it = strings.begin(); it != strings.end();\
    \ it++) {\n\t\tstd::string str = *it;\n\t\tif(str.find(substring) != std::string::npos)\n\
    \t\t\tres.push_back(str);\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filtered;\n\
    \    for (auto &s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> ret;\n    for\
    \ (auto s : strings) {\n        if (s.find(substring) != std::string::npos) {\n\
    \            ret.push_back(s);\n        }\n    }\n    return ret;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> filtered;\n  for\
    \ (auto it = strings.begin(); it != strings.end(); ++it) {\n    if (it->find(substring)\
    \ != std::string::npos) {\n      filtered.push_back(*it);\n    }\n  }\n  return\
    \ filtered;\n}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> vec;\n    std::vector<std::string>::iterator\
    \ it;\n    std::string str;\n    for(it = strings.begin(); it != strings.end();\
    \ it++) {\n        str = *it;\n        if(str.find(substring) != std::string::npos)\
    \ {\n            vec.push_back(str);\n        }\n    }\n    return vec;\n}\nint\
    \ main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string str : strings) {\n        if (str.find(substring) != std::string::npos)\
    \ {\n            result.push_back(str);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115962
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            result.push_back(strings[i]);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n\tstd::vector<std::string> result;\n\tfor\
    \ (auto x : strings) {\n\t\t// if x contains substring\n\t\tif (x.find(substring)\
    \ != std::string::npos) {\n\t\t\tresult.push_back(x);\n\t\t}\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> out = {};\n\
    \    for (std::string str : strings) {\n        if (str.find(substring) != std::string::npos)\
    \ {\n            out.push_back(str);\n        }\n    }\n    return out;\n}\nint\
    \ main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  std::copy_if(strings.begin(), strings.end(), std::back_inserter(result), [&](std::string\
    \ s) {\n        return s.find(substring) != std::string::npos;\n    });\n    return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    // TODO: implement function\n    std::vector<std::string>\
    \ result;\n    for(auto str: strings){\n        if(str.find(substring) != std::string::npos){\n\
    \            result.push_back(str);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> res;\n    for\
    \ (auto & str : strings) {\n        if (str.find(substring) != std::string::npos)\
    \ {\n            res.push_back(str);\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115969
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> new_strings;\n\
    \    for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            new_strings.push_back(strings[i]);\n  \
    \      }\n    }\n    return new_strings;\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115969
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> v;\n    for(std::string\
    \ s : strings)\n        if(s.find(substring) != std::string::npos)\n         \
    \   v.push_back(s);\n    return v;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115970
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto str : strings) {\n        if (str.find(substring) != std::string::npos)\
    \ {\n            result.push_back(str);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115964
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> out;\n    for\
    \ (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            out.push_back(s);\n        }\n    }\n    return out;\n}\nint\
    \ main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115970
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> output;\n  \
    \  std::copy_if(strings.begin(), strings.end(), std::back_inserter(output), [&](std::string\
    \ str) {\n        return str.find(substring) != std::string::npos;\n    });\n\
    \    return output;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115970
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n\tstd::vector<std::string> output;\n\tfor\
    \ (int i = 0; i < strings.size(); i++) {\n\t\tif (strings[i].find(substring) !=\
    \ std::string::npos) {\n\t\t\toutput.push_back(strings[i]);\n\t\t}\n\t}\n\treturn\
    \ output;\n}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115969
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\nstd::vector<std::string> res;\nstd::copy_if(std::begin(strings),\
    \ std::end(strings), std::back_inserter(res), [&](std::string s) { return s.find(substring)\
    \ != std::string::npos; });\nreturn res;\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115970
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    for (size_t i = 0; i < strings.size();\
    \ i++) {\n        std::size_t found = strings[i].find(substring);\n        if\
    \ (found == std::string::npos) {\n            strings.erase(strings.begin() +\
    \ i);\n            i--;\n        }\n    }\n    return strings;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115970
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> result;\n  for\
    \ (std::string &s : strings) {\n    if (s.find(substring) != std::string::npos)\
    \ {\n      result.push_back(s);\n    }\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> filtered;\n  for\
    \ (auto &i : strings) {\n    if (i.find(substring) != std::string::npos) {\n \
    \     filtered.push_back(i);\n    }\n  }\n  return filtered;\n}\nint main() {\n\
    \    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115970
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto element : strings) {\n        if (element.find(substring) != std::string::npos)\
    \ {\n            result.push_back(element);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115970
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> substring_strings;\n\
    \    for (auto string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            substring_strings.push_back(string);\n        }\n    }\n    return\
    \ substring_strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115970
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> ret;\n    int\
    \ len = strings.size();\n    for (int i = 0; i < len; i++) {\n        bool is_contain\
    \ = true;\n        int len1 = strings[i].size();\n        int len2 = substring.size();\n\
    \        for (int k = 0; k < len2; k++) {\n            if (strings[i].find(substring[k])\
    \ == std::string::npos) {\n                is_contain = false;\n             \
    \   break;\n            }\n        }\n        if (is_contain) {\n            ret.push_back(strings[i]);\n\
    \        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpsho66327: /tmp/tmpsho66327.cpp:30: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660115970
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n\t// Implement me!\n\tstd::vector<std::string>\
    \ v;\n\tfor(std::string x: strings){\n\t\tif(x.find(substring) != std::string::npos){\n\
    \t\t\tv.push_back(x);\n\t\t}\n\t}\n\treturn v;\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115970
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> result;\n  for\
    \ (auto &string : strings) {\n    if (string.find(substring) != std::string::npos)\
    \ {\n      result.push_back(string);\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115970
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    // Your code here\n    std::vector<std::string>\
    \ result;\n    for(int i=0;i<strings.size();i++){\n        if(strings[i].find(substring)!=std::string::npos){\n\
    \            result.push_back(strings[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115970
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> out;\n    for\
    \ (auto s : strings) {\n        if (s.find(substring) != std::string::npos) {\n\
    \            out.push_back(s);\n        }\n    }\n    return out;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115970
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> result;\n  for\
    \ (auto& i : strings) {\n    if (i.find(substring) != std::string::npos) {\n \
    \     result.push_back(i);\n    }\n  }\n  return result;\n}\nint main() {\n  \
    \  auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115970
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> substrings;\n\
    \  for (std::string str : strings) {\n    if (str.find(substring) != std::string::npos)\
    \ {\n      substrings.push_back(str);\n    }\n  }\n  return substrings;\n}\nint\
    \ main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115970
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    // TODO: implement this\n    std::vector<std::string>\
    \ filtered_strings;\n    for(std::string str : strings){\n      if(str.find(substring)\
    \ != std::string::npos){\n        filtered_strings.push_back(str);\n      }\n\
    \    }\n    return filtered_strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115970
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> sub;\n    for(int\
    \ i=0;i<strings.size();i++){\n        if(strings[i].find(substring)!=std::string::npos){\n\
    \            sub.push_back(strings[i]);\n        }\n    }\n    return sub;\n}\n\
    int main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115970
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n\t// filter strings\n\tstd::vector<std::string>\
    \ filterd_strings;\n\tfor (std::string s : strings) {\n\t\tif (s.find(substring)\
    \ != std::string::npos) {\n\t\t\tfilterd_strings.push_back(s);\n\t\t}\n\t}\n\t\
    return filterd_strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115970
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> res;\n    std::copy_if(strings.begin(),\
    \ strings.end(), std::back_inserter(res), [&](std::string s) {\n        return\
    \ s.find(substring) != std::string::npos;\n    });\n    return res;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    // TODO: implement\n    std::vector<std::string>\
    \ output;\n    int count = 0;\n    for(auto str : strings){\n        for(auto\
    \ i : str){\n            if(i == substring[0]){\n                ++count;\n  \
    \          }\n        }\n        if(count != 0){\n            output.push_back(str);\n\
    \        }\n        count = 0;\n    }\n    return output;\n}\nint main() {\n \
    \   auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpct4gg50z: /tmp/tmpct4gg50z.cpp:28: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660115971
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n\tstd::vector<std::string> new_list;\n\t\
    for (int i = 0; i < strings.size(); i++) {\n\t\tif (strings[i].find(substring)\
    \ != std::string::npos) {\n\t\t\tnew_list.push_back(strings[i]);\n\t\t}\n\t}\n\
    \treturn new_list;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115970
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    for (int i = 0; i < strings.size(); i++)\
    \ {\n        if (strings[i].find(substring) != std::string::npos) {\n        \
    \    strings.erase(strings.begin() + i);\n            i--;\n        }\n    }\n\
    \    return strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpij_ypekt: /tmp/tmpij_ypekt.cpp:20: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660115971
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n\tstd::vector<std::string> new_strings;\n\
    \tfor (auto i : strings) {\n\t\tif (i.find(substring) != std::string::npos) {\n\
    \t\t\tnew_strings.push_back(i);\n\t\t}\n\t}\n\treturn new_strings;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115971
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> output;\n  \
    \  for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            output.push_back(strings[i]);\n       \
    \ }\n    }\n    return output;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115970
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> result;\n  for\
    \ (std::string str : strings) {\n    if (str.find(substring) != std::string::npos)\
    \ {\n      result.push_back(str);\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115970
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n\tstd::vector<std::string> result;\n\tfor\
    \ (std::string s : strings) {\n\t\t// check if string contains substring\n\t\t\
    size_t found = s.find(substring);\n\t\tif (found != std::string::npos) {\n\t\t\
    \tresult.push_back(s);\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto\
    \ candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115971
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> strings_filtered;\n\
    \  for (int i = 0; i < strings.size(); i++) {\n    if (strings[i].find(substring)\
    \ != std::string::npos) {\n      strings_filtered.push_back(strings[i]);\n   \
    \ }\n  }\n  return strings_filtered;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115971
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            result.push_back(strings[i]);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115968
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\nstd::vector<std::string> result;\nfor (auto\
    \ string : strings) {\n    if (string.find(substring) != std::string::npos) {\n\
    \        result.push_back(string);\n    }\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb06_q8de.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpb06_q8de.cpp:15:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   15 | int main() {\n      |            ^\n/tmp/tmpb06_q8de.cpp:21:1:\
    \ error: expected \u2018}\u2019 at end of input\n   21 | }\n      | ^\n/tmp/tmpb06_q8de.cpp:8:103:\
    \ note: to match this \u2018{\u2019\n    8 | std::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n      |                                 \
    \                                                                      ^\n/tmp/tmpb06_q8de.cpp:21:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   21 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660115970
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> output;\n  \
    \  for (std::string mystring : strings) {\n        if (mystring.find(substring)\
    \ != std::string::npos) {\n            output.push_back(mystring);\n        }\n\
    \    }\n    return output;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115970
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> v2;\n    //\
    \ write your code here\n    for(auto x:strings){\n        if(x.find(substring)!=std::string::npos){\n\
    \            v2.push_back(x);\n        }\n    }\n    return v2;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115971
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  int count = 0;\n    for (std::string a : strings) {\n        if (a.find(substring)\
    \ != std::string::npos) {\n            result.push_back(a);\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115970
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n\tstd::vector<std::string> res;\n\tfor (auto\
    \ &str : strings) {\n\t\tauto it = std::search(str.begin(), str.end(), substring.begin(),\
    \ substring.end());\n\t\tif (it != str.end())\n\t\t\tres.push_back(str);\n\t}\n\
    \treturn res;\n}\nint main() {\n    auto candidate = filter_by_substring;\n  \
    \  assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115971
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> ret;\n    for\
    \ (auto &s : strings) {\n        if (s.find(substring) != std::string::npos) {\n\
    \            ret.push_back(s);\n        }\n    }\n    return ret;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115971
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n\tstd::vector<std::string> result;\n\tfor\
    \ (int i = 0; i < strings.size(); i++) {\n\t\tif (strings[i].find(substring) !=\
    \ std::string::npos) {\n\t\t\tresult.push_back(strings[i]);\n\t\t}\n\t}\n\treturn\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115963
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string str : strings) {\n        if (str.find(substring) != std::string::npos)\
    \ {\n            result.push_back(str);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115962
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            result.push_back(strings[i]);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115968
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> filtered_strings;\n\
    \  std::copy_if(strings.begin(), strings.end(), std::back_inserter(filtered_strings),\
    \ [&substring](std::string &s) {\n    return s.find(substring) != std::string::npos;\n\
    \  });\n  return filtered_strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115970
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n\tstd::vector<std::string>::iterator it =\
    \ strings.begin();\n\tfor (it; it != strings.end(); it++) {\n\t\tstd::size_t found\
    \ = (*it).find(substring);\n\t\tif (found == std::string::npos) {\n\t\t\tstrings.erase(it);\n\
    \t\t}\n\t}\n\treturn strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpo_n6pjwy: /tmp/tmpo_n6pjwy.cpp:21: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660115971
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115971
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n\tstd::vector<std::string> out;\n\tfor (auto\
    \ it = strings.begin(); it != strings.end(); ++it) {\n\t\tif (it->find(substring)\
    \ != std::string::npos) {\n\t\t\tout.push_back(*it);\n\t\t}\n\t}\n\treturn out;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115971
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    // Create a vector to store new strings\n\
    \    std::vector<std::string> filter_strings;\n    // Iterate over the list\n\
    \    for (int i = 0; i < strings.size(); i++) {\n        // Check if the substring\
    \ is present in the string\n        if (strings[i].find(substring) != std::string::npos)\
    \ {\n            // Add it to the filter list\n            filter_strings.push_back(strings[i]);\n\
    \        }\n    }\n    // Return the filter list\n    return filter_strings;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115970
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            result.push_back(strings[i]);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115968
