name: HumanEval_56_correct_bracketing
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of \"\
  <\" and \">\".\n// return True if every opening bracket has a corresponding closing\
  \ bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
  <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
  ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n"
tests: "}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
  <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
  <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
  )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
  ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
  <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
  <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
  \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
completions: ["\tassert(brackets.size() > 0);\n\t// Replace this line with your code.\n\
    \tint count = 0;\n\tfor (int i = 0; i < brackets.size(); i++) {\n\t\tif (brackets[i]\
    \ == '<') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (brackets[i] == '>') {\n\t\t\t\
    count--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (count\
    \ == 0) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}", "    std::stack<char>\
    \ bracket_stack;\n    int first_opening_index = brackets.find_first_of('<');\n\
    \    if (first_opening_index == std::string::npos) {\n        return false;\n\
    \    }\n    for (int i = 0; i < brackets.size(); i++) {\n        char curr_char\
    \ = brackets[i];\n        if (curr_char == '<') {\n            bracket_stack.push(curr_char);\n\
    \        } else if (curr_char == '>') {\n            if (bracket_stack.empty())\
    \ {\n                return false;\n            }\n            bracket_stack.pop();\n\
    \        }\n    }\n    return bracket_stack.empty();", "    // make your code\
    \ here\n    int i=0;\n    int count=0;\n    while(i<brackets.length()){\n    \t\
    if(brackets[i]=='<'){\n    \t\tcount++;\n    \t}\n    \telse{\n    \t\tcount--;\n\
    \    \t}\n    \tif(count<0){\n    \t\treturn false;\n    \t}\n    \ti++;\n   \
    \ }\n    if(count==0){\n    \treturn true;\n    }\n    else{\n    \treturn false;\n\
    \    }\n    ", "\t// REPLACE THIS WITH YOUR CODE\n\tstd::stack<char> s;\n\tfor\
    \ (int i = 0; i < brackets.length(); i++) {\n\t\tif (brackets[i] == '<') {\n\t\
    \t\ts.push(brackets[i]);\n\t\t}\n\t\telse if (brackets[i] == '>') {\n\t\t\tif\
    \ (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts.pop();\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (s.empty()) {\n\t\treturn true;\n\t}\n\telse {\n\t\t\
    return false;\n\t}\n\treturn true;", "\t// do some stuff here\n\tint open=0;\n\
    \tint close=0;\n\tfor(int i=0;i<brackets.length();i++){\n\t\tif(brackets[i]=='<'){\n\
    \t\t\topen++;\n\t\t}\n\t\telse if(brackets[i]=='>'){\n\t\t\tclose++;\n\t\t}\n\t\
    }\n\tif(open==close){\n\t\treturn true;\n\t}\n\telse return false;", "\tint counter\
    \ = 0;\n\tif (brackets.size() > 1 && brackets[0] == '>') {\n\t\treturn false;\n\
    \t}\n\tfor (int i = 0; i < brackets.size(); i++) {\n\t\tif (brackets[i] == '<')\
    \ {\n\t\t\tcounter++;\n\t\t}\n\t\telse if (brackets[i] == '>') {\n\t\t\tcounter--;\n\
    \t\t}\n\t\tif (counter < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (counter\
    \ == 0) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}", "    std::stack<char>\
    \ bracketStack;\n    for (int i = 0; i < brackets.length(); i++) {\n        if\
    \ (brackets[i] == '<') {\n            bracketStack.push(brackets[i]);\n      \
    \  } else {\n            if (bracketStack.empty()) {\n                return false;\n\
    \            } else {\n                bracketStack.pop();\n            }\n  \
    \      }\n    }\n    return bracketStack.empty();", "    int balance = 0;\n  \
    \  for (char bracket : brackets) {\n        if (bracket == '<') {\n          \
    \  balance += 1;\n        } else {\n            balance -= 1;\n        }\n   \
    \     if (balance < 0) {\n            return false;\n        }\n    }\n    return\
    \ balance == 0;", "    // set open_counter to 0\n    int open_counter = 0;\n \
    \   // loop over chars in brackets\n    for (size_t i = 0; i < brackets.size();\
    \ i++) {\n        // if char is \">\"\n        if (brackets[i] == '>') {\n   \
    \         // decrement open_counter\n            open_counter--;\n        }\n\
    \        // if char is \"<\"\n        else if (brackets[i] == '<') {\n       \
    \     // increment open_counter\n            open_counter++;\n        }\n    \
    \    // if open_counter is less than 0\n        if (open_counter < 0) {\n    \
    \        // return False\n            return false;\n        }\n    }\n    //\
    \ if open_counter is 0\n    if (open_counter == 0) {\n        // return True\n\
    \        return true;\n    }\n    // else\n    else {\n        // return False\n\
    \        return false;\n    }", "    std::stack<char> st;\n    for(char ch : brackets)\
    \ {\n        if(ch == '<') {\n            st.push(ch);\n        } else {\n   \
    \         if(st.empty()) {\n                return false;\n            }\n   \
    \         st.pop();\n        }\n    }\n    return st.empty();", "  // YOUR CODE\
    \ HERE\n  std::stack<char> s;\n  char c;\n  for(int i=0;i<brackets.length();i++){\n\
    \      if(brackets[i]=='<'){\n          s.push(brackets[i]);\n      }\n      else{\n\
    \          if(s.empty()){\n              return false;\n          }\n        \
    \  else{\n              s.pop();\n          }\n      }\n  }\n  if(s.empty()){\n\
    \      return true;\n  }\n  else{\n      return false;\n  }\n  //return false;",
  "\tint count = 0;\n\tfor (int i = 0; i < brackets.size(); i++) {\n\t\tif (brackets[i]\
    \ == '<') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (brackets[i] == '>') {\n\t\t\t\
    count--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (count\
    \ != 0) {\n\t\treturn false;\n\t}\n\treturn true;", "\tint size = brackets.size();\n\
    \tif (size % 2 != 0)\n\t\treturn false;\n\tstack<char> my_stack;\n\tfor (int i\
    \ = 0; i < size; i++) {\n\t\tif (brackets[i] == '<')\n\t\t\tmy_stack.push(brackets[i]);\n\
    \t\telse if (brackets[i] == '>') {\n\t\t\tif (my_stack.empty())\n\t\t\t\treturn\
    \ false;\n\t\t\telse\n\t\t\t\tmy_stack.pop();\n\t\t}\n\t}\n\tif (my_stack.empty())\n\
    \t\treturn true;\n\telse\n\t\treturn false;", "  int count = 0;\n  for (size_t\
    \ i = 0; i < brackets.size(); i++) {\n    if (brackets[i] == '<')\n      count++;\n\
    \    else if (brackets[i] == '>')\n      count--;\n    if (count < 0)\n      return\
    \ false;\n  }\n  return count == 0;", "    int cnt = 0;\n    for (size_t i = 0;\
    \ i < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n           \
    \ cnt += 1;\n        } else {\n            cnt -= 1;\n        }\n        if (cnt\
    \ < 0) {\n            return false;\n        }\n    }\n    return cnt == 0;",
  "    // STUDENT-TODO\n    // replace the following return statement with your code\n\
    \    return false;", "\tint i = 0;\n\tint c = 0;\n\tfor (i = 0; i < brackets.length();\
    \ i++) {\n\t\tif (brackets[i] == '<') {\n\t\t\tc++;\n\t\t}\n\t\telse {\n\t\t\t\
    c--;\n\t\t}\n\t\tif (c < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (c == 0)\
    \ {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}", "    int cnt =\
    \ 0;\n    for (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i]\
    \ == '<') {\n            cnt++;\n        } else {\n            if (cnt > 0) {\n\
    \                cnt--;\n            } else {\n                return false;\n\
    \            }\n        }\n    }\n    return cnt == 0;", "\t//int is_bracketing_correct=0;\n\
    \tint count_opening_brackets=0;\n\t//int count_closing_brackets=0;\n\tfor(int\
    \ i=0;i<brackets.length();i++)\n\t{\n\t\tif(brackets[i]=='<')\n\t\t{\n\t\t\tcount_opening_brackets++;\n\
    \t\t}\n\t\telse\n\t\t{\n\t\t\tcount_opening_brackets--;\n\t\t}\n\t\tif(count_opening_brackets<0)\n\
    \t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\tif(count_opening_brackets==0)\n\t{\n\
    \t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}", "  std::stack<char>\
    \ st;\n  for (int i = 0; i < brackets.size(); i++) {\n    if (brackets[i] == '<')\
    \ {\n      st.push(brackets[i]);\n    } else {\n      if (st.empty()) {\n    \
    \    return false;\n      }\n      st.pop();\n    }\n  }\n  return st.empty();",
  '    return true;', "    //replace this for solution\n    if (brackets.length()\
    \ % 2 == 1) {\n        return false;\n    }\n    std::stack<char> s;\n    for\
    \ (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n\
    \            s.push(brackets[i]);\n        } else {\n            if (s.empty())\
    \ {\n                return false;\n            }\n            s.pop();\n    \
    \    }\n    }\n    return s.empty();", "    std::stack<char> stk;\n    for (int\
    \ i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n    \
    \        stk.push(brackets[i]);\n        } else {\n            if (stk.empty())\
    \ {\n                return false;\n            } else {\n                stk.pop();\n\
    \            }\n        }\n    }\n    return stk.empty();", '    // your code
    here', "  std::stack<char> opening;\n  for (int i = 0; i < brackets.size(); i++)\
    \ {\n    if (brackets[i] == '<')\n      opening.push(brackets[i]);\n    else {\n\
    \      if (opening.empty())\n        return false;\n      else\n        opening.pop();\n\
    \    }\n  }\n  return true;", "    std::stack<char> stk;\n    for (size_t i =\
    \ 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<')\n          \
    \  stk.push(brackets[i]);\n        else if (brackets[i] == '>') {\n          \
    \  if (stk.empty())\n                return false;\n            else if (stk.top()\
    \ == '<')\n                stk.pop();\n            else\n                return\
    \ false;\n        }\n    }\n    if (stk.empty())\n        return true;\n    else\n\
    \        return false;", "    // Print a message to show that the function has\
    \ been called.\n    std::cout << \"The string is \" << brackets << std::endl;\n\
    \    int open_bracket_num = 0;\n    int close_bracket_num = 0;\n    for (int i\
    \ = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n    \
    \        open_bracket_num++;\n        } else if (brackets[i] == '>') {\n     \
    \       close_bracket_num++;\n        }\n    }\n    if (open_bracket_num != close_bracket_num)\
    \ {\n        return false;\n    }\n    int balance = 0;\n    for (int i = 0; i\
    \ < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n           \
    \ balance++;\n        } else if (brackets[i] == '>') {\n            balance--;\n\
    \        }\n        if (balance < 0) {\n            return false;\n        }\n\
    \    }\n    if (balance != 0) {\n        return false;\n    }\n    return true;",
  "\tint count=0;\n\tfor(int i=0;i<brackets.length();i++)\n\t{\n\t\tif(brackets[i]=='<')\n\
    \t\t{\n\t\t\tcount+=1;\n\t\t}\n\t\telse if(brackets[i]=='>')\n\t\t{\n\t\t\tcount-=1;\n\
    \t\t}\n\t\tif(count<0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\tif(count==0)\n\
    \t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}", "    std::stack<char>\
    \ s;\n    for(int i=0;i<brackets.size();i++){\n        if(brackets[i]=='<'){\n\
    \            s.push(brackets[i]);\n        }\n        else{\n            if(s.empty()){\n\
    \                return false;\n            }\n            else{\n           \
    \     s.pop();\n            }\n        }\n    }\n    if(s.empty()){\n        return\
    \ true;\n    }\n    else{\n        return false;\n    }", "\t// STUDENT CODE HERE",
  "\tstd::stack<char> stk;\n\tfor (auto c : brackets) {\n\t\tif (c == '<') {\n\t\t\
    \tstk.push(c);\n\t\t}\n\t\telse {\n\t\t\tif (stk.empty()) {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t\tstk.pop();\n\t\t}\n\t}\n\treturn stk.empty();", "    int c = 0;\n\
    \    for (char x : brackets) {\n        if (x == '<') c++;\n        else c--;\n\
    \        if (c < 0) return false;\n    }\n    return c == 0;", "    if (brackets\
    \ == \"\") return true;\n    unsigned int count = 0;\n    for (unsigned int i\
    \ = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n    \
    \        count++;\n        } else if (brackets[i] == '>') {\n            count--;\n\
    \        }\n        if (count < 0) {\n            return false;\n        }\n \
    \   }\n    return count == 0;", "    int l=0;\n    for(int i=0;i<brackets.length();i++){\n\
    \        if(brackets[i]=='<'){\n            l+=1;\n        }\n        else if(brackets[i]=='>'){\n\
    \            l-=1;\n        }\n        if(l<0){\n            return false;\n \
    \       }\n    }\n    if(l==0){\n        return true;\n    }\n    else{\n    \
    \    return false;\n    }", "\tstd::stack<char> stk;\n\tfor (int i = 0; i < brackets.size();\
    \ i++) {\n\t\tif (brackets[i] == '<') {\n\t\t\tstk.push(brackets[i]);\n\t\t}\n\
    \t\telse {\n\t\t\tif (stk.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\
    \ {\n\t\t\t\tstk.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (stk.empty()) {\n\t\treturn\
    \ true;\n\t}\n\telse {\n\t\treturn false;\n\t}", '', "    // replace this with\
    \ your implementation\n    int count = 0;\n    for(auto& a : brackets){\n    \
    \    if(a == '<'){\n            count++;\n        }\n        else if(a == '>'){\n\
    \            count--;\n        }\n        if(count < 0){\n            return false;\n\
    \        }\n    }\n    if(count != 0){\n        return false;\n    }\n    return\
    \ true;", "    int count = 0;\n    for (char c : brackets) {\n        if (c ==\
    \ '<') {\n            count++;\n        } else {\n            if (count == 0)\
    \ {\n                return false;\n            }\n            count--;\n    \
    \    }\n    }\n    return count == 0;", "    int count = 0;\n    for (auto e :\
    \ brackets) {\n        if (e == '<') {\n            count++;\n        } else {\n\
    \            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count == 0;", "    // put your code here\n\
    \    // change the return value\n    int count_opening_brackets = 0;\n    int\
    \ count_closing_brackets = 0;\n    for (size_t i = 0; i < brackets.size(); i++)\
    \ {\n      if (brackets[i] == '<') {\n        count_opening_brackets++;\n    \
    \  } else if (brackets[i] == '>') {\n        count_closing_brackets++;\n     \
    \ }\n    }\n    return count_opening_brackets == count_closing_brackets;", '  return
    true;', "\tint count = 0;\n\tfor (int i = 0; i < brackets.size(); i++) {\n\t\t\
    if (brackets[i] == '<') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (brackets[i] ==\
    \ '>') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\
    \t}\n\t}\n\tif (count == 0) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\
    \t}", "    // init my stack\n    std::stack<char> myStack;\n    int i;\n    for\
    \ (i = 0; i < brackets.length(); i++) {\n        // push the opening brackets\
    \ onto the stack\n        if (brackets[i] == '<') {\n            myStack.push(brackets[i]);\n\
    \        }\n        // pop the closing brackets from the stack\n        else if\
    \ (brackets[i] == '>') {\n            if (myStack.empty()) {\n               \
    \ return false;\n            }\n            else {\n                myStack.pop();\n\
    \            }\n        }\n    }\n    // if stack is empty then its true\n   \
    \ if (myStack.empty()) {\n        return true;\n    }\n    // else return false\n\
    \    else {\n        return false;\n    }", "    int count = 0;\n    for (int\
    \ i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n    \
    \        count++;\n        } else {\n            count--;\n        }\n       \
    \ if (count < 0) {\n            return false;\n        }\n    }\n    return count\
    \ == 0;", "\t// Write your code here.\n\tint len = brackets.length();\n\tfor (int\
    \ i = 0; i < len; i++) {\n\t\tif (brackets[i] == '>') {\n\t\t\tfor (int j = i\
    \ - 1; j >= 0; j--) {\n\t\t\t\tif (brackets[j] == '<') {\n\t\t\t\t\tbrackets[i]\
    \ = '*';\n\t\t\t\t\tbrackets[j] = '*';\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\
    \t\t}\n\t}\n\tfor (int i = 0; i < len; i++) {\n\t\tif (brackets[i] == '<' || brackets[i]\
    \ == '>')\n\t\t\treturn false;\n\t}\n\treturn true;", "    // The code below is\
    \ correct, but slow.\n    // Suggestions for improving its speed are welcome.\n\
    \    int n = brackets.size();\n    int counter = 0;\n    for (int i = 0; i < n;\
    \ i++) {\n        char ch = brackets[i];\n        if (ch == '<') {\n         \
    \   counter += 1;\n        } else {\n            assert(ch == '>');\n        \
    \    counter -= 1;\n            if (counter < 0) {\n                return false;\n\
    \            }\n        }\n    }\n    return counter == 0;", "    // A zero will\
    \ indicate that the system is balanced,\n    // a one that it is not.\n    int\
    \ result = 0;\n    int bracketing = 0;\n    // Iterate over the string and check\
    \ if the brackets are balanced\n    for (int i = 0; i < brackets.length(); i++)\
    \ {\n        // If the number of open brackets is greater than\n        // the\
    \ number of closed brackets, then the system is unbalanced.\n        if (brackets[i]\
    \ == '<') {\n            bracketing++;\n        } else {\n            bracketing--;\n\
    \        }\n        if (bracketing < 0) {\n            result = 1;\n        }\n\
    \    }\n    // If the number of open brackets is not equal to the number of closed\n\
    \    // brackets, then the system is unbalanced.\n    if (bracketing != 0) {\n\
    \        result = 1;\n    }\n    return (result == 0);", "    std::stack<char>\
    \ s;\n    for(int i=0;i<brackets.size();i++){\n        if(brackets[i]=='<'){\n\
    \            s.push(brackets[i]);\n        }\n        else{\n            if(s.empty()){\n\
    \                return false;\n            }\n            s.pop();\n        }\n\
    \    }\n    if(s.empty()){\n        return true;\n    }\n    return false;", "\t\
    int c = 0;\n\tfor (int i = 0; i < brackets.size(); i++) {\n\t\tif (brackets[i]\
    \ == '<') c++;\n\t\telse c--;\n\t\tif (c < 0) return false;\n\t}\n\treturn c ==\
    \ 0;", "    std::stack<char> s;\n    for(int i=0;i<brackets.size();i++){\n   \
    \     if(brackets[i]=='<'){\n            s.push(brackets[i]);\n        }\n   \
    \     else{\n            if(s.empty()){\n                return false;\n     \
    \       }\n            s.pop();\n        }\n    }\n    if(s.empty()){\n      \
    \  return true;\n    }\n    return false;", '  return brackets.empty();', "  \
    \  // Write your code here.\n    int count=0;\n    for(auto i:brackets){\n   \
    \     if(i=='<'){\n            count++;\n        }\n        else{\n          \
    \  count--;\n        }\n        if(count<0){\n            return false;\n    \
    \    }\n    }\n    if(count==0){\n        return true;\n    }\n    else{\n   \
    \     return false;\n    }", "    int n = brackets.size();\n    int left = 0;\n\
    \    int right = 0;\n    for (int i = 0; i < n; i++) {\n        if (brackets[i]\
    \ == '<') {\n            left++;\n        } else {\n            right++;\n   \
    \     }\n        if (right > left) {\n            return false;\n        }\n \
    \   }\n    return left == right;", "  std::stack<char> s;\n  for (int i = 0; i\
    \ < brackets.size(); i++) {\n    if (brackets[i] == '<') {\n      s.push(brackets[i]);\n\
    \    } else {\n      if (s.empty()) {\n        return false;\n      }\n      s.pop();\n\
    \    }\n  }\n  return s.empty();", "  int count = 0;\n  for (int i = 0; i < brackets.size();\
    \ i++) {\n    if (brackets[i] == '<') {\n      count++;\n    } else {\n      count--;\n\
    \    }\n    if (count < 0) {\n      return false;\n    }\n  }\n  return (count\
    \ == 0);", "    int count=0;\n    for(int i=0;i<brackets.length();i++){\n    \
    \  if(brackets[i]=='<'){\n        count++;\n      }\n      else{\n        count--;\n\
    \      }\n      if(count<0){\n        return false;\n      }\n    }\n    if(count==0){\n\
    \      return true;\n    }\n    else{\n      return false;\n    }", "  // You're\
    \ welcome to use a stack, we've included one for you.\n  std::stack<char> stack;\n\
    \  // You can add some code here to make it easier to solve the problem.\n  \n\
    \  // You'll need to fill this with code!\n  // Note that this code currently\
    \ does nothing, and will always return true.\n  // This is only here so that the\
    \ code compiles.\n  for(int i=0;i<brackets.length();i++){\n    if(brackets[i]=='<'){\n\
    \      stack.push(brackets[i]);\n    }\n    else if(!stack.empty()){\n      stack.pop();\n\
    \    }\n    else\n      return false;\n  }\n  if(stack.empty())\n    return true;\n\
    \  else\n    return false;", "    std::stack<char> S;\n    for (auto b : brackets)\
    \ {\n        if (b == '<') {\n            S.push(b);\n        } else {\n     \
    \       if (S.empty()) {\n                return false;\n            }\n     \
    \       S.pop();\n        }\n    }\n    return S.empty();", "  // all the opening\
    \ brackets\n  std::stack<char> stack;\n  // iterate the whole string\n  for (char&\
    \ ch : brackets) {\n    // we found an opening bracket\n    if (ch == '<') {\n\
    \      stack.push(ch);\n    }\n    // we found a closing bracket\n    else {\n\
    \      // if we found a closing bracket but there are no\n      // opening brackets\
    \ we have a wrong bracketing\n      if (stack.empty()) {\n        return false;\n\
    \      }\n      //  remove the top opening bracket\n      stack.pop();\n    }\n\
    \  }\n  // the whole string is correct iff the stack is empty\n  return stack.empty();",
  "\tint open_brackets = 0;\n\tint close_brackets = 0;\n\tint len = brackets.length();\n\
    \tfor (int i = 0; i < len; i++) {\n\t\tif (brackets[i] == '<') {\n\t\t\topen_brackets++;\n\
    \t\t}\n\t\telse if (brackets[i] == '>') {\n\t\t\tclose_brackets++;\n\t\t}\n\t\t\
    if (close_brackets > open_brackets) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (open_brackets\
    \ == close_brackets) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t\
    }", "\tif (brackets.size()%2!=0) return false;\n\tstd::stack<char> s;\n\tfor (int\
    \ i=0;i<brackets.size();i++) {\n\t\tif (brackets[i]=='<') {\n\t\t\ts.push(brackets[i]);\n\
    \t\t}\n\t\telse {\n\t\t\tif (s.empty()) return false;\n\t\t\ts.pop();\n\t\t}\n\
    \t}\n\treturn s.empty();", "  int bnum = 0;\n  for (int i = 0; i < brackets.size();\
    \ i++) {\n    if (brackets[i] == '<') {\n      bnum++;\n    } else {\n      bnum--;\n\
    \    }\n    if (bnum < 0) {\n      return false;\n    }\n  }\n  return bnum ==\
    \ 0;", "    assert(brackets.length() > 0);\n    int i,c=0;\n    for(i=0;i<brackets.length();i++)\n\
    \    {\n        if(brackets[i]=='<')\n            c++;\n        else\n       \
    \     c--;\n        if(c<0)\n            return false;\n    }\n    if(c==0)\n\
    \        return true;\n    else\n        return false;", "  std::stack<char> bracket;\n\
    \  for (int i = 0; i < brackets.size(); i++) {\n    if (brackets[i] == '<') {\n\
    \      bracket.push(brackets[i]);\n    } else {\n      if (bracket.empty()) {\n\
    \        return false;\n      } else {\n        bracket.pop();\n      }\n    }\n\
    \  }\n  if (bracket.empty()) {\n    return true;\n  } else {\n    return false;\n\
    \  }", "    int count = 0;\n    for (char c : brackets) {\n        if (c == '<')\
    \ {\n            count += 1;\n        } else if (c == '>') {\n            count\
    \ -= 1;\n        }\n        if (count < 0) {\n            return false;\n    \
    \    }\n    }\n    return count == 0;", "  // Error checking\n  if(brackets.length()\
    \ < 1) {\n    return true;\n  }\n  std::stack<char> stack;\n  for(int i = 0; i\
    \ < brackets.length(); i++) {\n    if(brackets[i] == '<') {\n      stack.push(brackets[i]);\n\
    \    } else if(brackets[i] == '>') {\n      if(stack.empty()) {\n        return\
    \ false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return\
    \ stack.empty();", "    // implement me\n    return false;", "  std::stack<char>\
    \ s;\n  for (auto c : brackets) {\n    if (c == '<') {\n      s.push(c);\n   \
    \ } else {\n      if (s.empty()) return false;\n      s.pop();\n    }\n  }\n \
    \ return s.empty();", "\tstd::stack<char> stk;\n\tfor (int i = 0; i < brackets.size();\
    \ i++) {\n\t\tif (brackets[i] == '<') {\n\t\t\tstk.push(brackets[i]);\n\t\t}\n\
    \t\telse {\n\t\t\tif (stk.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstk.pop();\n\
    \t\t}\n\t}\n\tif (stk.empty()) {\n\t\treturn true;\n\t}\n\treturn false;", " \
    \   bool result = true;\n    int num_open = 0;\n    int num_close = 0;\n    for\
    \ (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<')\
    \ {\n            num_open += 1;\n        } else if (brackets[i] == '>') {\n  \
    \          num_close += 1;\n        }\n    }\n    if (num_open != num_close) {\n\
    \        result = false;\n    }\n    return result;", "  // put your code here\n\
    \  std::stack<char> my_stack;\n  if(brackets.size()==0) return true;\n  if(brackets.size()==1)\
    \ return false;\n  for(int i=0;i<brackets.size();i++){\n    if(brackets[i]=='<')\
    \ my_stack.push(brackets[i]);\n    else{\n      if(my_stack.empty()) return false;\n\
    \      else my_stack.pop();\n    }\n  }\n  if(my_stack.empty()) return true;\n\
    \  else return false;", "\tif (brackets.size() == 0) {\n\t\treturn true;\n\t}\n\
    \telse if (brackets.at(0) == '>') {\n\t\treturn false;\n\t}\n\telse {\n\t\tint\
    \ b = 0;\n\t\tfor (char c : brackets) {\n\t\t\tif (c == '<') {\n\t\t\t\tb++;\n\
    \t\t\t}\n\t\t\telse {\n\t\t\t\tb--;\n\t\t\t}\n\t\t\tif (b < 0) {\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t}\n\t\tif (b != 0) {\n\t\t\treturn false;\n\t\t}\n\t\t\
    else {\n\t\t\treturn true;\n\t\t}\n\t}", "    std::stack<char> bracket_stack;\n\
    \    for (char bracket : brackets) {\n        if (bracket == '<') {\n        \
    \    bracket_stack.push(bracket);\n        } else {\n            if (bracket_stack.empty())\
    \ {\n                return false;\n            }\n            bracket_stack.pop();\n\
    \        }\n    }\n    return bracket_stack.empty();", "    int open = 0;\n  \
    \  for (char &c : brackets) {\n        open += (c == '<') ? 1 : -1;\n        if\
    \ (open < 0) return false;\n    }\n    return open == 0;", "    if (brackets.size()\
    \ == 0) return true;\n    if (brackets.size() == 1) return false;\n    int open\
    \ = 0;\n    int closed = 0;\n    for (int i = 0; i < brackets.size(); i++) {\n\
    \        if (brackets[i] == '<') open++;\n        else if (brackets[i] == '>')\
    \ closed++;\n        if (closed > open) return false;\n    }\n    if (open ==\
    \ closed) return true;\n    return false;", "    if (brackets == \"<\")\n    \
    \    return false;\n    else {\n        int count = 0;\n        for (auto i :\
    \ brackets) {\n            if (i == '<')\n                count++;\n         \
    \   else if (i == '>')\n                count--;\n            if (count < 0)\n\
    \                return false;\n        }\n        if (count == 0)\n         \
    \   return true;\n        else\n            return false;\n    }", "\tif (brackets.length()\
    \ % 2 == 1) {\n\t\treturn false;\n\t}\n\tstd::stack<char> bracketStack;\n\tfor\
    \ (int i = 0; i < brackets.length(); i++) {\n\t\tif (brackets[i] == '<') {\n\t\
    \t\tbracketStack.push(brackets[i]);\n\t\t}\n\t\telse if (brackets[i] == '>') {\n\
    \t\t\tif (bracketStack.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tbracketStack.pop();\n\
    \t\t}\n\t}\n\tif (bracketStack.empty()) {\n\t\treturn true;\n\t}\n\treturn false;",
  "    // Your code here\n    stack<char> s;\n    int n = brackets.length();\n   \
    \ for(int i=0;i<n;i++){\n      if(brackets[i]=='<'){\n        s.push(brackets[i]);\n\
    \      }\n      else{\n        if(s.empty()){\n          return false;\n     \
    \   }\n        s.pop();\n      }\n    }\n    if(s.empty()){\n      return true;\n\
    \    }\n    return false;", '', "\t//\n\t// your code here\n\t//", "    int i\
    \ = 0;\n    while (i < brackets.size()) {\n        if (brackets[i] == '<')\n \
    \           break;\n        i++;\n    }\n    int j = brackets.size() - 1;\n  \
    \  while (j >= 0) {\n        if (brackets[j] == '>')\n            break;\n   \
    \     j--;\n    }\n    if (i >= j)\n        return false;\n    while (i < j) {\n\
    \        if (brackets[i] == '<' && brackets[j] == '>') {\n            i++;\n \
    \           j--;\n        } else {\n            return false;\n        }\n   \
    \ }\n    return true;", '    return true;', "    int N = brackets.size();\n  \
    \  int n = 0;\n    for (int i = 0; i < N; i++) {\n        if (brackets[i] == '<')\
    \ n++;\n        else n--;\n        if (n < 0) return false;\n    }\n    return\
    \ n == 0;", "  return brackets == std::string(brackets.size(), '<') +\n      \
    \   std::string(brackets.size(), '>');", "    int n = brackets.size();\n    int\
    \ flag = 0;\n    std::stack<char> stk;\n    for(int i = 0; i < n; i++) {\n   \
    \     if(brackets[i] == '<') {\n            stk.push(brackets[i]);\n        }\n\
    \        else {\n            if(stk.empty()) {\n                flag = 1;\n  \
    \              break;\n            }\n            else {\n                stk.pop();\n\
    \            }\n        }\n    }\n    if(!stk.empty()) {\n        flag = 1;\n\
    \    }\n    if(flag == 1) {\n        return false;\n    }\n    else {\n      \
    \  return true;\n    }", "\tint count = 0;\n\tfor (int i = 0; i < brackets.size();\
    \ i++) {\n\t\tif (brackets[i] == '<')\n\t\t\tcount++;\n\t\telse\n\t\t\tcount--;\n\
    \t\tif (count < 0)\n\t\t\treturn false;\n\t}\n\tif (count == 0)\n\t\treturn true;\n\
    \telse\n\t\treturn false;", "  // Make the string into the stack.\n  std::stack<char>\
    \ s;\n  // Read all elements in the string.\n  for (int i = 0; i < brackets.size();\
    \ i++) {\n    // Push the opening brackets.\n    if (brackets[i] == '<') {\n \
    \     s.push(brackets[i]);\n    }\n    // Pop the top element if the bracket is\
    \ closing.\n    if (brackets[i] == '>') {\n      // If the stack is empty, the\
    \ closing bracket has no opening,\n      // which is wrong.\n      if (s.empty())\
    \ {\n        return false;\n      }\n      // Pop the top element.\n      s.pop();\n\
    \    }\n  }\n  // If the stack is empty, all brackets are paired.\n  return s.empty();",
  "    int count = 0;\n    for (int i = 0; i < brackets.size(); i++) {\n        if\
    \ (brackets[i] == '<') {\n            count++;\n        } else {\n           \
    \ count--;\n        }\n        if (count < 0) {\n            return false;\n \
    \       }\n    }\n    return count == 0;", "    // initialize counter variable\
    \ to 0\n    int count = 0;\n    // loop through each character in the string\n\
    \    for (int i = 0; i < brackets.length(); i++) {\n        // increment count\
    \ variable if string character at index i is \"<\"\n        if (brackets[i] ==\
    \ '<') {\n            count++;\n        }\n        // decrement count variable\
    \ if string character at index i is \">\"\n        else if (brackets[i] == '>')\
    \ {\n            count--;\n        }\n        // if count variable is negative,\
    \ return false\n        if (count < 0) {\n            return false;\n        }\n\
    \    }\n    // if count variable is not 0, return false\n    if (count != 0) {\n\
    \        return false;\n    }\n    // return true\n    return true;", "\t// count\
    \ the openning brackets\n\tint open = 0;\n\tfor (int i = 0; i < brackets.size();\
    \ i++) {\n\t\tif (brackets[i] == '<') {\n\t\t\topen += 1;\n\t\t}\n\t\tif (brackets[i]\
    \ == '>') {\n\t\t\tif (open == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\topen\
    \ -= 1;\n\t\t}\n\t}\n\treturn open == 0;", "    // REPLACE THE BODY OF THIS FUNCTION\
    \ WITH YOUR OWN IMPLEMENTATION\n    assert(true);\n    return true;", "    int\
    \ count=0;\n    for(int i=0;i<brackets.length();i++){\n        if(brackets[i]=='<'){\n\
    \            count++;\n        }\n        else{\n            count--;\n      \
    \  }\n        if(count<0){\n            return false;\n        }\n    }\n    if(count==0){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }", "    int\
    \ i = 0;\n    for (char& c : brackets) {\n        if (c == '<') {\n          \
    \  i += 1;\n        } else {\n            i -= 1;\n        }\n        if (i <\
    \ 0) {\n            return false;\n        }\n    }\n    return i == 0;", "  int\
    \ opened = 0;\n  int closed = 0;\n  for (auto &b : brackets) {\n    if (b == '<')\
    \ {\n      opened++;\n    } else {\n      closed++;\n    }\n    if (closed > opened)\
    \ {\n      return false;\n    }\n  }\n  return opened == closed;", "\tint k =\
    \ 0;\n\tfor (int i = 0; i < brackets.size(); i++) {\n\t\tif (brackets[i] == '<')\
    \ {\n\t\t\tk += 1;\n\t\t}\n\t\telse {\n\t\t\tk -= 1;\n\t\t}\n\t\tif (k < 0) {\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\tif (k == 0) {\n\t\treturn true;\n\t}\n\telse\
    \ {\n\t\treturn false;\n\t}", "    int count = 0;\n    for (char c : brackets)\
    \ {\n        if (c == '<') {\n            count++;\n        } else {\n       \
    \     count--;\n        }\n        if (count < 0) {\n            return false;\n\
    \        }\n    }\n    return count == 0;", "\tint openBrackets = 0;\n\tbool result\
    \ = true;\n\tfor (int i = 0; i < brackets.length(); i++) {\n\t\tif (brackets[i]\
    \ == '<') {\n\t\t\topenBrackets++;\n\t\t}\n\t\telse if (brackets[i] == '>') {\n\
    \t\t\topenBrackets--;\n\t\t}\n\t\tif (openBrackets < 0) {\n\t\t\tresult = false;\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\tif (openBrackets != 0)\n\t\tresult = false;\n\treturn\
    \ result;", "\tint bracket_count = 0;\n\tfor (int i = 0; i < brackets.size();\
    \ i++) {\n\t\tif (brackets[i] == '<') bracket_count++;\n\t\telse if (brackets[i]\
    \ == '>') bracket_count--;\n\t\tif (bracket_count < 0) return false;\n\t}\n\t\
    return bracket_count == 0;", "    stack<char> s;\n    for(int i=0;i<brackets.length();i++){\n\
    \        if(brackets[i]=='<'){\n            s.push(brackets[i]);\n        }\n\
    \        else{\n            if(s.empty()){\n                return false;\n  \
    \          }\n            else{\n                s.pop();\n            }\n   \
    \     }\n    }\n    if(s.empty()){\n        return true;\n    }\n    else{\n \
    \       return false;\n    }", "    std::stack<char> bracket_stack;\n    int j=0;\n\
    \    while(j<brackets.length()){\n        if(brackets[j]=='<'){\n            bracket_stack.push(brackets[j]);\n\
    \        }\n        else if(brackets[j]=='>'){\n            if(bracket_stack.empty()){\n\
    \                return false;\n            }\n            bracket_stack.pop();\n\
    \        }\n        j++;\n    }\n    if(bracket_stack.empty()){\n        return\
    \ true;\n    }\n    else{\n        return false;\n    }", "  int open = 0;\n \
    \ int close = 0;\n  for (char c : brackets) {\n    if (c == '<') {\n      open\
    \ += 1;\n    } else if (c == '>') {\n      close += 1;\n    }\n    if (close >\
    \ open) {\n      return false;\n    }\n  }\n  return open == close;", "    int\
    \ left=0;\n    int right=0;\n    for(int i=0;i<brackets.length();i++){\n     \
    \   if(brackets[i]=='<'){\n            left+=1;\n        }\n        else if(brackets[i]=='>'){\n\
    \            right+=1;\n        }\n        if(right>left){\n            return\
    \ false;\n        }\n    }\n    if(left!=right){\n        return false;\n    }\n\
    \    return true;", '    return true;', "\t// your code goes here!\n\tint l =\
    \ brackets.length();\n\tint cnt = 0;\n\tfor (int i = 0; i < l; i++) {\n\t\tif\
    \ (brackets[i] == '<') {\n\t\t\tcnt++;\n\t\t}\n\t\telse if (brackets[i] == '>')\
    \ {\n\t\t\tcnt--;\n\t\t}\n\t\tif (cnt < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\
    \tif (cnt == 0) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}", " \
    \   assert(!brackets.empty());\n    std::stack<char> S;\n    int i = 0;\n    S.push(brackets[i]);\n\
    \    while(i<brackets.size()){\n        if(S.empty() && brackets[i]=='>'){\n \
    \           return false;\n        }\n        if(S.top()=='<' && brackets[i]=='>'){\n\
    \            S.pop();\n        }\n        else {\n            S.push(brackets[i]);\n\
    \        }\n        i++;\n    }\n    if(S.empty()){\n        return true;\n  \
    \  }\n    else{\n        return false;\n    }", "\t//return true;\n\tint brackets_length\
    \ = brackets.length();\n\tif (brackets_length % 2 != 0) {\n\t\treturn false;\n\
    \t}\n\tstd::stack<char> s;\n\tfor (int i = 0; i < brackets_length; i++) {\n\t\t\
    if (brackets[i] == '<') {\n\t\t\ts.push(brackets[i]);\n\t\t}\n\t\telse {\n\t\t\
    \tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ts.pop();\n\t\t}\n\t\
    }\n\tif (s.empty()) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}",
  "  int count = 0;\n  for (auto c : brackets) {\n    if (c == '<') count++;\n   \
    \ else if (c == '>') count--;\n    if (count < 0) return false;\n  }\n  return\
    \ count == 0;", "    int count = 0;\n    for (char& c : brackets) {\n        if\
    \ (c == '<') {\n            count++;\n        } else if (c == '>') {\n       \
    \     count--;\n        } else {\n            return false;\n        }\n     \
    \   if (count < 0) {\n            return false;\n        }\n    }\n    return\
    \ count == 0;", "    int n = brackets.size();\n    int count_left = 0;\n    int\
    \ count_right = 0;\n    for (int i = 0; i < n; i++) {\n        if (brackets[i]\
    \ == '<') {\n            count_left += 1;\n        } else {\n            count_right\
    \ += 1;\n        }\n        if (count_right > count_left) {\n            return\
    \ false;\n        }\n    }\n    if (count_left == count_right) {\n        return\
    \ true;\n    } else {\n        return false;\n    }", "\t// remove pass below\
    \ and add your implementation\n\treturn true;", "\tint counter = 0;\n\tfor (char\
    \ i : brackets) {\n\t\tif (i == '<') {\n\t\t\tcounter++;\n\t\t}\n\t\telse if (i\
    \ == '>') {\n\t\t\tcounter--;\n\t\t}\n\t\tif (counter < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\tif (counter == 0) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn\
    \ false;\n\t}", "    std::vector<int> vect;\n    for(auto i:brackets){\n     \
    \   if(i=='<'){\n            vect.push_back(i);\n        }\n        else{\n  \
    \          if(vect.size()>0){\n                vect.pop_back();\n            }\n\
    \            else{\n                return false;\n            }\n        }\n\
    \    }\n    if(vect.size()==0){\n        return true;\n    }\n    else{\n    \
    \    return false;\n    }", "  int num = 0;\n  for (auto bracket : brackets) {\n\
    \    if (bracket == '<') {\n      num++;\n    } else {\n      num--;\n    }\n\
    \    if (num < 0) {\n      return false;\n    }\n  }\n  return num == 0;", "\t\
    /*\n\tint open=0;\n\tint close=0;\n\tint i;\n\tfor(i=0;i<brackets.length();i++)\n\
    \t{\n\t\tif(brackets[i]=='<')\n\t\t\topen++;\n\t\telse if(brackets[i]=='>')\n\t\
    \t\tclose++;\n\t\tif(close>open)\n\t\t\treturn false;\n\t}\n\tif(open==close)\n\
    \t\treturn true;\n\telse\n\t\treturn false;\n\t\t*/\n\tstd::stack<char> st;\n\t\
    for(int i=0;i<brackets.length();i++)\n\t{\n\t\tif(brackets[i]=='<')\n\t\t\tst.push(brackets[i]);\n\
    \t\telse if(brackets[i]=='>')\n\t\t{\n\t\t\tif(st.empty())\n\t\t\t\treturn false;\n\
    \t\t\telse\n\t\t\t\tst.pop();\n\t\t}\n\t}\n\tif(st.empty())\n\t\treturn true;\n\
    \telse\n\t\treturn false;", "\t// count number of \"<\"\n\t// count number of\
    \ \">\"\n\t// count number of unmatched \"<\"\n\t// count number of unmatched\
    \ \">\"\n\t// if unmatched \"<\" > 0, return False\n\t// if unmatched \">\" >\
    \ 0, return False\n\t// if unmatched \"<\" != unmatched \">\", return False\n\t\
    // return True\n\tint lcount = 0;\n\tint rcount = 0;\n\tint lcount_un = 0;\n\t\
    int rcount_un = 0;\n\tfor (int i = 0; i < brackets.length(); i++) {\n\t\tif (brackets[i]\
    \ == '<') {\n\t\t\tlcount++;\n\t\t\tlcount_un++;\n\t\t}\n\t\telse if (brackets[i]\
    \ == '>') {\n\t\t\trcount++;\n\t\t\trcount_un++;\n\t\t}\n\t\tif (rcount_un > lcount_un)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t\tif (brackets[i] == '>' && lcount_un > 0)\
    \ {\n\t\t\tlcount_un--;\n\t\t}\n\t}\n\tif (lcount_un > 0) {\n\t\treturn false;\n\
    \t}\n\tif (rcount_un > 0) {\n\t\treturn false;\n\t}\n\tif (lcount_un != rcount_un)\
    \ {\n\t\treturn false;\n\t}\n\treturn true;", "    int counter = 0;\n    for (int\
    \ i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n    \
    \        counter++;\n        } else {\n            counter--;\n        }\n   \
    \     if (counter < 0) {\n            return false;\n        }\n    }\n    return\
    \ (counter == 0);", "    int len = brackets.length();\n    int balance = 0;\n\
    \    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n    \
    \        balance++;\n        } else {\n            balance--;\n        }\n   \
    \     if (balance < 0) {\n            return false;\n        }\n    }\n    return\
    \ balance == 0;", "  int len = brackets.length();\n  int cnt = 0;\n  for (int\
    \ i = 0; i < len; i++) {\n    if (brackets[i] == '<') {\n      cnt++;\n    } else\
    \ {\n      cnt--;\n    }\n    if (cnt < 0) {\n      return false;\n    }\n  }\n\
    \  return cnt == 0;", "    // Your code here.\n    std::stack<char> s;\n    for(int\
    \ i=0;i<brackets.length();i++){\n        if(brackets[i]=='<')\n            s.push(brackets[i]);\n\
    \        else if(brackets[i]=='>'){\n            if(s.empty())\n             \
    \   return false;\n            else\n                s.pop();\n        }\n   \
    \ }\n    if(s.empty())\n        return true;\n    else\n        return false;",
  "  // put your code here\n  std::stack<char>st;\n  int len = brackets.length();\n\
    \  if(len == 0) return true;\n  for(int i = 0; i < len; i++){\n    if(brackets[i]\
    \ == '<'){\n      st.push(brackets[i]);\n    }\n    else if(brackets[i] == '>'){\n\
    \      if(st.empty()) return false;\n      else{\n        st.pop();\n      }\n\
    \    }\n  }\n  if(st.empty()) return true;\n  else return false;", "    // Your\
    \ code here\n    std::stack<char> container;\n    for(int i = 0; i < brackets.size();\
    \ i++){\n        if(brackets[i] == '<'){\n            container.push(brackets[i]);\n\
    \        }\n        else if(brackets[i] == '>'){\n            if(container.empty()){\n\
    \                return false;\n            }\n            else if(container.top()\
    \ == '<'){\n                container.pop();\n            }\n        }\n    }\n\
    \    if(container.empty()){\n        return true;\n    }\n    else{\n        return\
    \ false;\n    }", "  // Replace pass above with your code\n  int flag1=0,flag2=0;\n\
    \  for(int i=0;i<brackets.length();i++)\n  {\n    if(brackets[i]=='<')\n    {\n\
    \        flag1++;\n    }\n    else if(brackets[i]=='>')\n    {\n        flag2++;\n\
    \    }\n  }\n  if(flag1==flag2)\n  {\n      return true;\n  }\n  else\n  {\n \
    \     return false;\n  }", "\tint cnt = 0;\n\tfor (int i = 0; i < brackets.size();\
    \ i++) {\n\t\tif (brackets[i] == '<') {\n\t\t\tcnt++;\n\t\t}\n\t\telse if (brackets[i]\
    \ == '>') {\n\t\t\tcnt--;\n\t\t}\n\t\tif (cnt < 0) {\n\t\t\treturn false;\n\t\t\
    }\n\t}\n\treturn cnt == 0;", "    int brackets_count = 0;\n    for (char c : brackets)\
    \ {\n        if (c == '<') {\n            brackets_count += 1;\n        } else\
    \ if (c == '>') {\n            brackets_count -= 1;\n        }\n        if (brackets_count\
    \ < 0) {\n            return false;\n        }\n    }\n    return brackets_count\
    \ == 0;", "    int cnt=0;\n    for(int i=0;i<brackets.size();i++){\n        if(brackets[i]=='<')\
    \ cnt++;\n        else cnt--;\n        if(cnt<0) return false;\n    }\n    return\
    \ cnt==0;", "\t//printf(\"%s\\n\", brackets.c_str());\n\tint open = 0;\n\tfor\
    \ (char c : brackets) {\n\t\tif (c == '<') {\n\t\t\topen++;\n\t\t} else {\n\t\t\
    \tif (open > 0) {\n\t\t\t\topen--;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\
    \t}\n\t\t}\n\t}\n\treturn (open == 0);", "    std::stack<char> s;\n    for(int\
    \ i=0;i<brackets.size();i++){\n        if(brackets[i]=='<'){\n            s.push(brackets[i]);\n\
    \        }\n        else{\n            if(s.empty()){\n                return\
    \ false;\n            }\n            s.pop();\n        }\n    }\n    if(s.empty()){\n\
    \        return true;\n    }\n    return false;", "    int brc = 0;\n    for (auto\
    \ c : brackets) {\n        if (c == '<') {\n            brc++;\n        } else\
    \ {\n            brc--;\n        }\n        if (brc < 0) {\n            return\
    \ false;\n        }\n    }\n    return brc == 0;", "    if (brackets.size()==0)\
    \ return true;\n    if (brackets.size()==1) return false;\n    std::stack<char>\
    \ st;\n    for (int i=0; i<brackets.size(); i++) {\n        if (brackets[i]=='<')\
    \ st.push(brackets[i]);\n        else if (brackets[i]=='>') {\n            if\
    \ (st.empty()) return false;\n            st.pop();\n        }\n    }\n    return\
    \ st.empty();", "    // Write your code here.\n    int open = 0;\n    for(int\
    \ i = 0; i < brackets.size(); i++){\n        if(brackets[i] == '<'){\n       \
    \     open++;\n        }\n        else if(brackets[i] == '>'){\n            if(open\
    \ == 0){\n                return false;\n            }\n            open--;\n\
    \        }\n    }\n    if(open == 0){\n        return true;\n    }\n    return\
    \ false;", '    return 0;', "    // replace with your code\n    return true;",
  "  int flag = 0;\n  for (int i = 0; i < brackets.size(); i++) {\n    if (brackets[i]\
    \ == '<') {\n      flag++;\n    } else {\n      flag--;\n    }\n    if (flag <\
    \ 0) {\n      return false;\n    }\n  }\n  if (flag == 0) {\n    return true;\n\
    \  } else {\n    return false;\n  }", "  if (brackets.size() == 0) {\n    return\
    \ true;\n  }\n  int check = 0;\n  for (int i = 0; i < brackets.size(); i++) {\n\
    \    if (brackets[i] == '<') {\n      check += 1;\n    }\n    else if (brackets[i]\
    \ == '>') {\n      check -= 1;\n    }\n    if (check < 0) {\n      return false;\n\
    \    }\n  }\n  if (check == 0) {\n    return true;\n  }\n  else {\n    return\
    \ false;\n  }", "  // put your code here\n  return 0;", "  // hint: it may be\
    \ useful to know how many \"open\"\n  // angle brackets there are at any time.\n\
    \  int counter = 0;\n  for (int i = 0; i < brackets.size(); i++) {\n    if (brackets[i]\
    \ == '<') {\n      counter++;\n    } else {\n      counter--;\n    }\n    if (counter\
    \ < 0) {\n      return false;\n    }\n  }\n  if (counter == 0) {\n    return true;\n\
    \  } else {\n    return false;\n  }", "  // TODO: write this function\n  std::stack<char>\
    \ bracketStack;\n  for (char bracket : brackets) {\n    if (bracket == '<') {\n\
    \      bracketStack.push(bracket);\n    } else if (bracket == '>') {\n      if\
    \ (bracketStack.empty()) {\n        return false;\n      } else {\n        bracketStack.pop();\n\
    \      }\n    }\n  }\n  return bracketStack.empty();", "  std::stack<char> stk;\n\
    \  for (auto bracket : brackets) {\n    if (bracket == '<') {\n      stk.push(bracket);\n\
    \    } else {\n      if (stk.empty()) {\n        return false;\n      }\n    \
    \  stk.pop();\n    }\n  }\n  return stk.empty();", "    // REPLACE THE BODY OF\
    \ THIS FUNCTION WITH YOUR OWN IMPLEMENTATION\n    return true;", "    int c=0;\n\
    \    for(int i=0;i<brackets.length();i++)\n    {\n        if(brackets[i]=='<')\n\
    \        {\n            c++;\n        }\n        else\n        {\n           \
    \ c--;\n        }\n        if(c<0)\n        {\n            return false;\n   \
    \     }\n    }\n    if(c==0)\n    {\n        return true;\n    }\n    else\n \
    \   {\n        return false;\n    }", '    // To Do: Function body', "    std::stack<char>\
    \ bracket_stack;\n    for (auto &c : brackets) {\n        if (c == '<') {\n  \
    \          bracket_stack.push(c);\n        } else {\n            if (bracket_stack.empty())\
    \ {\n                return false;\n            }\n            bracket_stack.pop();\n\
    \        }\n    }\n    return bracket_stack.empty();", "    \n    \n    int counter\
    \ = 0;\n    for (char x : brackets) {\n        if (x == '<')\n            counter++;\n\
    \        else if (x == '>')\n            counter--;\n        \n        if (counter\
    \ < 0)\n            return false;\n    }\n    \n    return counter == 0;", " \
    \ int opening = 0;\n  for (auto x : brackets) {\n    if (x == '<') {\n      opening++;\n\
    \    } else {\n      opening--;\n    }\n    if (opening < 0) {\n      return false;\n\
    \    }\n  }\n  return opening == 0;", "  size_t count = 0;\n  for (size_t i =\
    \ 0; i < brackets.size(); i++) {\n    if (brackets[i] == '<') {\n      count++;\n\
    \    } else {\n      if (count > 0) {\n        count--;\n      } else {\n    \
    \    return false;\n      }\n    }\n  }\n  return count == 0;", "    // YOUR CODE\
    \ HERE\n    // check if brackets string is empty. If yes, return true\n    if\
    \ (brackets.length() == 0) {\n        return true;\n    }\n    // check if brackets\
    \ string has odd number of characters. If yes, return false\n    if (brackets.length()\
    \ % 2 != 0) {\n        return false;\n    }\n    // if brackets has even number\
    \ of characters and is not empty, create a stack\n    std::stack<char> stk;\n\
    \    // iterate through brackets string\n    for (char &c : brackets) {\n    \
    \    // if current character is opening bracket, push it to stack\n        if\
    \ (c == '<') {\n            stk.push(c);\n        }\n        // if current character\
    \ is closing bracket\n        else {\n            // if stack is empty, that means\
    \ there's a closing bracket with no\n            // corresponding opening bracket,\
    \ so return false\n            if (stk.empty()) {\n                return false;\n\
    \            }\n            // otherwise, pop the stack as there's an opening\
    \ bracket corresponding\n            // to the current closing bracket\n     \
    \       else {\n                stk.pop();\n            }\n        }\n    }\n\
    \    // if stack is empty, return true. Otherwise, return false\n    return stk.empty();",
  "  std::stack<char> s;\n  for (int i = 0; i < brackets.size(); i++) {\n    if (brackets[i]\
    \ == '<') {\n      s.push(brackets[i]);\n    } else {\n      if (s.empty()) return\
    \ false;\n      s.pop();\n    }\n  }\n  return s.empty();", "    std::stack<char>\
    \ s;\n    for(int i=0;i<brackets.size();i++){\n        if(brackets[i]=='<') s.push(brackets[i]);\n\
    \        else if(!s.empty()&&s.top()=='<') s.pop();\n        else return false;\n\
    \    }\n    return s.empty();", "    int size = brackets.size();\n    for (int\
    \ i = 0; i < size; i++) {\n        if (brackets[i] == '<') {\n            for\
    \ (int j = i; j < size; j++) {\n                if (brackets[j] == '>') {\n  \
    \                  i = j;\n                    break;\n                }\n   \
    \         }\n        }\n    }\n    return brackets.size() == 0;", "\t//int i =\
    \ 0;\n\tint count = 0;\n\tbool ans = true;\n\t//int length = brackets.length();\n\
    \tfor (int i = 0; i < brackets.length(); i++) {\n\t\tif (brackets[i] == '<') {\n\
    \t\t\tcount++;\n\t\t}\n\t\telse if (brackets[i] == '>') {\n\t\t\tcount--;\n\t\t\
    }\n\t\tif (count < 0) {\n\t\t\tans = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn\
    \ ans && count == 0;", "    int count = 0;\n    for (int i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '<')\n            count++;\n        else\n\
    \            count--;\n        if (count < 0)\n            return false;\n   \
    \ }\n    return count == 0;", "\tint count=0;\n\tfor(int i=0;i<brackets.length();i++)\n\
    \t{\n\t\tif(brackets[i]=='<')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\telse\n\t\t{\n\
    \t\t\tcount--;\n\t\t}\n\t\tif(count<0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\tif(count==0)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\
    \t}", "\tint open = 0;\n\tfor (int i = 0; i < brackets.size(); i++) {\n\t\tif\
    \ (brackets[i] == '<') {\n\t\t\topen++;\n\t\t}\n\t\telse {\n\t\t\topen--;\n\t\t\
    }\n\t\tif (open < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn open == 0;",
  "\tint count = 0;\n\tfor (int i = 0; i < brackets.size(); i++) {\n\t\tif (brackets[i]\
    \ == '<') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (brackets[i] == '>') {\n\t\t\t\
    count--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (count\
    \ != 0) {\n\t\treturn false;\n\t}\n\treturn true;", "    std::stack<char> stack;\n\
    \    for (char c : brackets) {\n        if (c == '<') {\n            stack.push(c);\n\
    \        } else {\n            assert(c == '>');\n            if (stack.empty())\
    \ {\n                return false;\n            }\n            stack.pop();\n\
    \        }\n    }\n    return stack.empty();", "    int open = 0;\n    for (size_t\
    \ i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n    \
    \        open++;\n        } else {\n            if (open == 0) {\n           \
    \     return false;\n            }\n            open--;\n        }\n    }\n  \
    \  return open == 0;", "\tint count=0;\n\tfor(int i=0;i<brackets.length();i++)\n\
    \t{\n\t\tif(brackets[i]=='<')\n\t\t\tcount++;\n\t\telse if(brackets[i]=='>')\n\
    \t\t\tcount--;\n\t\tif(count<0)\n\t\t\treturn false;\n\t}\n\tif(count==0)\n\t\t\
    return true;\n\telse\n\t\treturn false;", "    std::stack<char> s;\n    for(int\
    \ i=0;i<brackets.size();i++){\n        if(brackets[i]=='<')\n            s.push(brackets[i]);\n\
    \        else{\n            if(s.empty())\n                return false;\n   \
    \         else\n                s.pop();\n        }\n    }\n    if(s.empty())\n\
    \        return true;\n    else\n        return false;", "\tint len = brackets.length();\n\
    \tint count = 0;\n\tfor (int i = 0; i < len; i++) {\n\t\tif (brackets[i] == '<')\
    \ {\n\t\t\tcount++;\n\t\t}\n\t\telse {\n\t\t\tcount--;\n\t\t}\n\t\tif (count <\
    \ 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (count != 0) {\n\t\treturn false;\n\
    \t}\n\treturn true;", "    int n = brackets.size();\n    std::stack<char> S;\n\
    \    for (int i = 0; i < n; i++) {\n        if (brackets[i] == '<')\n        \
    \    S.push(brackets[i]);\n        else {\n            if (S.empty())\n      \
    \          return false;\n            else\n                S.pop();\n       \
    \ }\n    }\n    return S.empty();", "    int i,stk=0;\n    for(i=0;i<brackets.length();i++)\n\
    \    {\n        if(brackets[i]=='<')\n            stk++;\n        else\n     \
    \       stk--;\n        if(stk<0)\n            return false;\n    }\n    if(stk==0)\n\
    \        return true;\n    else\n        return false;", "  // replace all characters\
    \ in brackets with '<' or '>'\n  for (int i = 0; i < brackets.size(); i++) {\n\
    \    if (brackets[i] != '<' && brackets[i] != '>') {\n      brackets[i] = '?';\n\
    \    }\n  }\n  // return true if brackets is the same as brackets reversed\n \
    \ std::string reversed = brackets;\n  std::reverse(reversed.begin(), reversed.end());\n\
    \  return brackets == reversed;", "  std::stack<char> charStack;\n  for (int i\
    \ = 0; i < brackets.length(); i++) {\n    if (brackets[i] == '<') {\n      charStack.push(brackets[i]);\n\
    \    } else if (brackets[i] == '>') {\n      if (charStack.empty()) {\n      \
    \  return false;\n      } else {\n        charStack.pop();\n      }\n    }\n \
    \ }\n  if (charStack.empty()) {\n    return true;\n  } else {\n    return false;\n\
    \  }", "    int count = 0;\n    for (auto bracket : brackets) {\n        if (bracket\
    \ == '<') {\n            count += 1;\n        } else if (bracket == '>') {\n \
    \           count -= 1;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count == 0;", "    int num_brackets = 0;\n\
    \    for (char c : brackets) {\n        if (c == '<') {\n            num_brackets++;\n\
    \        } else if (c == '>') {\n            num_brackets--;\n        }\n    \
    \    if (num_brackets < 0) {\n            return false;\n        }\n    }\n  \
    \  return num_brackets == 0;", "\t// check if the length of input string is zero,\
    \ if so then return 0\n\tif (brackets.length() == 0)\n\t\treturn 0;\n\tint count\
    \ = 0;\n\tfor (int i = 0; i < brackets.length(); i++) {\n\t\t// if brackets[i]\
    \ is '<' increase count by 1\n\t\tif (brackets[i] == '<')\n\t\t\tcount++;\n\t\t\
    // if brackets[i] is '>' and count is 0 then return 0\n\t\telse if (brackets[i]\
    \ == '>' && count == 0)\n\t\t\treturn 0;\n\t\t// if brackets[i] is '>' and count\
    \ is greater than 0 then\n\t\t// decrease count by 1\n\t\telse if (brackets[i]\
    \ == '>' && count > 0)\n\t\t\tcount--;\n\t}\n\t// if count is greater than 0 then\
    \ return 0\n\tif (count > 0)\n\t\treturn 0;\n\t// else return 1\n\treturn 1;",
  "    int bracket_counter = 0;\n    for (char c : brackets) {\n        if (c == '<')\
    \ {\n            bracket_counter += 1;\n        } else if (c == '>') {\n     \
    \       bracket_counter -= 1;\n        }\n        if (bracket_counter < 0) {\n\
    \            return false;\n        }\n    }\n    return bracket_counter == 0;",
  "    std::stack<char> bracket_stack;\n    for (char bracket : brackets) {\n    \
    \    if (bracket == '<') {\n            bracket_stack.push(bracket);\n       \
    \ } else {\n            if (bracket_stack.empty()) {\n                return false;\n\
    \            }\n            bracket_stack.pop();\n        }\n    }\n    return\
    \ bracket_stack.empty();", "    int num_bracket = 0;\n    bool flag = true;\n\
    \    for (int i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<')\
    \ {\n            num_bracket++;\n        } else {\n            num_bracket--;\n\
    \        }\n        if (num_bracket < 0) {\n            flag = false;\n      \
    \      break;\n        }\n    }\n    if (num_bracket != 0) {\n        flag = false;\n\
    \    }\n    return flag;", "  int open_bracket_count = 0;\n  for (int i = 0; i\
    \ < brackets.size(); i++) {\n    if (brackets[i] == '<') {\n      open_bracket_count\
    \ += 1;\n    } else {\n      if (open_bracket_count == 0) {\n        return false;\n\
    \      }\n      open_bracket_count -= 1;\n    }\n  }\n  return open_bracket_count\
    \ == 0;", "    int n = brackets.size();\n    if (n%2!=0) return false;\n    int\
    \ j = 0;\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        if (brackets[i]\
    \ == '<') {\n            sum++;\n        } else {\n            sum--;\n      \
    \  }\n        if (sum > 0) {\n            j++;\n        }\n    }\n    if (sum\
    \ != 0) return false;\n    if (j == n/2) return true;\n    return false;", " \
    \   int a = 0;\n    for (int i = 0; i < brackets.size(); i++) {\n        if (brackets[i]\
    \ == '<') {\n            a++;\n        } else {\n            a--;\n        }\n\
    \        if (a < 0) {\n            return false;\n        }\n    }\n    if (a\
    \ == 0) {\n        return true;\n    } else {\n        return false;\n    }",
  "  // this is how many open brackets we have\n  int open_brackets = 0;\n  // check\
    \ each character in brackets\n  for (char c : brackets) {\n    // if it's an open\
    \ bracket, add one\n    if (c == '<') {\n      open_brackets++;\n    }\n    //\
    \ if it's a close bracket, subtract one\n    else if (c == '>') {\n      open_brackets--;\n\
    \    }\n    // make sure we don't go negative\n    if (open_brackets < 0) {\n\
    \      return false;\n    }\n  }\n  // we have the same number of open and close\
    \ brackets\n  return open_brackets == 0;", "  std::stack<char> stack;\n  for (int\
    \ i = 0; i < brackets.size(); i++) {\n    if (brackets[i] == '<') {\n      stack.push(brackets[i]);\n\
    \    } else {\n      if (stack.empty()) {\n        return false;\n      }\n  \
    \    stack.pop();\n    }\n  }\n  return stack.empty();", '    return true;', " \
    \   int open_count = 0;\n    int close_count = 0;\n    for (int i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_count += 1;\n  \
    \      } else if (brackets[i] == '>') {\n            close_count += 1;\n     \
    \   }\n    }\n    if (open_count == close_count) {\n        return true;\n   \
    \ } else {\n        return false;\n    }", "    /* your code here */\n    int\
    \ cnt = 0;\n    for (auto &i : brackets) {\n        if (i == '<') {\n        \
    \    cnt++;\n        } else {\n            cnt--;\n        }\n        if (cnt\
    \ < 0) {\n            return false;\n        }\n    }\n    return cnt == 0;",
  "    std::stack<char> s;\n    int i = 0;\n    while(i < brackets.length()){\n  \
    \      if(brackets[i] == '<'){\n            s.push(brackets[i]);\n        }\n\
    \        else if(brackets[i] == '>'){\n            if(s.empty()){\n          \
    \      return false;\n            }\n            else{\n                s.pop();\n\
    \            }\n        }\n        i++;\n    }\n    if(s.empty()){\n        return\
    \ true;\n    }\n    else{\n        return false;\n    }", "  int count = 0;\n\
    \  for (char c : brackets) {\n    if (c == '<') {\n      count++;\n    } else\
    \ {\n      count--;\n    }\n    if (count < 0) {\n      return false;\n    }\n\
    \  }\n  return count == 0;", "\t\n\t//put brackets into a stack\n\tstd::stack<char>\
    \ container;\n\t\n\t//Go through the string and put each left bracket into the\
    \ stack\n\tfor(int i = 0; i < brackets.length(); i++){\n\t\t\n\t\tif(brackets[i]\
    \ == '<'){\n\t\t\t\n\t\t\tcontainer.push(brackets[i]);\n\t\t}\n\t\t//Pop the stack\
    \ if we see a right bracket\n\t\telse if(brackets[i] == '>'){\n\t\t\t\n\t\t\t\
    container.pop();\n\t\t}\n\t}\n\t\n\t//If the stack is empty then return true\n\
    \tif(container.empty()){\n\t\t\n\t\treturn true;\n\t}\n\t\n\treturn false;", " \
    \   // your code here\n    std::stack<char> stk;\n    for(int i=0;i<brackets.size();i++){\n\
    \        if(brackets[i]=='<'){\n            stk.push(brackets[i]);\n        }\n\
    \        else{\n            if(stk.empty()){\n                return false;\n\
    \            }\n            stk.pop();\n        }\n    }\n    if(stk.empty()){\n\
    \        return true;\n    }\n    return false;", "    std::stack<char> st;\n\
    \    for(int i=0;i<brackets.size();i++){\n        if(brackets[i]=='<'){\n    \
    \        st.push(brackets[i]);\n        }\n        else{\n            if(st.empty()){\n\
    \                return false;\n            }\n            else{\n           \
    \     st.pop();\n            }\n        }\n    }\n    if(st.empty()){\n      \
    \  return true;\n    }\n    else{\n        return false;\n    }", "  int i, num=0;\n\
    \  int n = brackets.length();\n  for(i=0;i<n;i++){\n    if(brackets[i]=='<') num++;\n\
    \    else num--;\n    if(num<0) break;\n  }\n  if(num!=0) return false;\n  return\
    \ true;", "  // replace this with your implementation\n  int count = 0;\n  for\
    \ (int i = 0; i < brackets.length(); i++) {\n    if (brackets[i] == '<') {\n \
    \     count++;\n    } else {\n      count--;\n    }\n    if (count < 0) {\n  \
    \    return false;\n    }\n  }\n  if (count == 0) {\n    return true;\n  } else\
    \ {\n    return false;\n  }", "    assert(brackets.size() > 0);\n    for (size_t\
    \ i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n    \
    \        for (size_t j = i; j < brackets.size(); j++) {\n                if (brackets[j]\
    \ == '>') {\n                    brackets[i] = ' ';\n                    brackets[j]\
    \ = ' ';\n                    i = j;\n                    break;\n           \
    \     }\n            }\n        }\n    }\n    for (size_t i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] != ' ') {\n            return false;\n     \
    \   }\n    }\n    return true;", "  // Insert your code here.\n  // replace this\
    \ return statement with the correct return value.\n  int s = 0;\n  for(int i =\
    \ 0; i < brackets.length(); i++){\n    if(brackets[i] == '<'){\n      s++;\n \
    \   }\n    else{\n      s--;\n    }\n    if(s < 0){\n      return false;\n   \
    \ }\n  }\n  if(s != 0){\n    return false;\n  }\n  return true;", "    // Replace\
    \ this with your solution\n    int count=0;\n    for(int i=0;i<brackets.length();i++){\n\
    \    \tif(brackets[i]=='<'){\n    \t\tcount++;\n    \t}\n    \telse if(brackets[i]=='>'){\n\
    \    \t\tcount--;\n    \t}\n    \tif(count<0){\n    \t\treturn false;\n    \t\
    }\n    }\n    if(count==0){\n    \treturn true;\n    }\n    else{\n    \treturn\
    \ false;\n    }", "    // Your code here\n    int balance=0;\n    for(int i=0;i<brackets.length();i++){\n\
    \        if(brackets[i]=='<'){\n            balance++;\n        }\n        else{\n\
    \            balance--;\n        }\n        if(balance<0){\n            return\
    \ false;\n        }\n    }\n    if(balance!=0){\n        return false;\n    }\n\
    \    return true;", "    int cnt = 0;\n    for (size_t i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '<') {\n            cnt++;\n        } else\
    \ {\n            cnt--;\n        }\n        if (cnt < 0) {\n            return\
    \ false;\n        }\n    }\n    return cnt == 0;", "    // fill in your code here\n\
    \    int n = brackets.length();\n    int open = 0;\n    int closed = 0;\n    for(int\
    \ i = 0; i < n; i++){\n        if(brackets[i] == '<')\n            open++;\n \
    \       else if(brackets[i] == '>')\n            closed++;\n        if(closed\
    \ > open)\n            return false;\n    }\n    if(open == closed)\n        return\
    \ true;\n    else\n        return false;", "  std::stack<char> s;\n  for (char\
    \ c : brackets) {\n    if (c == '<') {\n      s.push(c);\n    } else {\n     \
    \ if (s.empty()) return false;\n      s.pop();\n    }\n  }\n  return s.empty();",
  "    int count = 0;\n    for (int i = 0; i < brackets.size(); i++) {\n        if\
    \ (brackets[i] == '<') {\n            count++;\n        } else {\n           \
    \ count--;\n        }\n        if (count < 0) {\n            return false;\n \
    \       }\n    }\n    return count == 0;", "    int count = 0;\n    for (int i\
    \ = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n      \
    \      count++;\n        } else {\n            count--;\n        }\n        if\
    \ (count < 0) {\n            return false;\n        }\n    }\n    return count\
    \ == 0;", "    int len = brackets.length();\n    int open = 0;\n    int close\
    \ = 0;\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '<') {\n\
    \            open++;\n        } else if (brackets[i] == '>') {\n            close++;\n\
    \        }\n    }\n    if (open == close) {\n        return true;\n    } else\
    \ {\n        return false;\n    }", "\tint count = 0;\n\tfor (int i = 0; i < brackets.size();\
    \ i++) {\n\t\tif (brackets[i] == '<')\n\t\t\tcount++;\n\t\telse if (brackets[i]\
    \ == '>')\n\t\t\tcount--;\n\t\tif (count < 0)\n\t\t\treturn false;\n\t}\n\treturn\
    \ (count == 0);", "  std::stack<char> s;\n  for (int i = 0; i < brackets.size();\
    \ i++) {\n    if (brackets[i] == '<') {\n      s.push(brackets[i]);\n    } else\
    \ {\n      if (s.empty()) {\n        return false;\n      }\n      s.pop();\n\
    \    }\n  }\n  return s.empty();", "    // int op = 0;\n    // int cl = 0;\n \
    \   // for(int i = 0; i < brackets.length(); i++){\n    //     if(brackets[i]\
    \ == '<'){\n    //         op++;\n    //     }else{\n    //         cl++;\n  \
    \  //     }\n    // }\n    // if(op == cl){\n    //     return true;\n    // }else{\n\
    \    //     return false;\n    // }\n    int op = 0;\n    int cl = 0;\n    for(int\
    \ i = 0; i < brackets.length(); i++){\n        if(brackets[i] == '<'){\n     \
    \       op++;\n        }else{\n            cl++;\n        }\n        if(cl > op){\n\
    \            return false;\n        }\n    }\n    if(op == cl){\n        return\
    \ true;\n    }else{\n        return false;\n    }", "  // put your code here:\n\
    \  int count = 0;\n  for (int i = 0; i < brackets.size(); i++) {\n    if (brackets[i]\
    \ == '<') {\n      count++;\n    } else {\n      count--;\n    }\n    if (count\
    \ < 0) {\n      return false;\n    }\n  }\n  if (count == 0) {\n    return true;\n\
    \  } else {\n    return false;\n  }", "    // Make sure that you call std::stack's\
    \ push and pop methods in your code.\n    std::stack<char> s;\n    for (int i\
    \ = 0; i < brackets.size(); i++) {\n        char c = brackets[i];\n        if\
    \ (c == '<') {\n            s.push(c);\n        } else {\n            if (s.empty())\
    \ return false;\n            s.pop();\n        }\n    }\n    return s.empty();",
  "  // Implement me!\n  //  std::cout << brackets << std::endl;\n  for (int i = 0;\
    \ i < brackets.length(); i++) {\n      if (brackets[i] == '<') {\n          for\
    \ (int j = i+1; j < brackets.length(); j++) {\n              if (brackets[j] ==\
    \ '>') {\n                  brackets.erase(j, 1);\n                  brackets.erase(i,\
    \ 1);\n                  j = brackets.length();\n                  i = -1;\n \
    \             }\n          }\n      }\n  }\n  if (brackets.empty()) {\n      return\
    \ true;\n  }\n  return false;"]
stop_tokens:
- "\n}"
