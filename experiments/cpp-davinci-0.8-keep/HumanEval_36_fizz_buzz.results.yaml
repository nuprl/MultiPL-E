name: HumanEval_36_fizz_buzz
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  int count=0;\n  for(int i=11;i<n;i++)\n  {\n\
    \    if(i%11==0 || i%13==0)\n    {\n      int num=i;\n      while(num>0)\n   \
    \   {\n        if(num%10==7)\n        {\n          count++;\n        }\n     \
    \   num=num/10;\n      }\n    }\n  }\n  return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i <\
    \ n; i+=11) {\n        std::string str = std::to_string(i);\n        for (int\
    \ j = 0; j < str.length(); j++) {\n            if (str[j] == '7') {\n        \
    \        count++;\n            }\n        }\n    }\n    for (long i = 13; i <\
    \ n; i+=13) {\n        std::string str = std::to_string(i);\n        for (int\
    \ j = 0; j < str.length(); j++) {\n            if (str[j] == '7') {\n        \
    \        count++;\n            }\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpkuy7g5ks: /tmp/tmpkuy7g5ks.cpp:32: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\tint count = 0;\n\tfor (int i = 0; i < n; i++){\n\
    \t\tif (i % 11 == 0 || i % 13 == 0){\n\t\t\tint x = i;\n\t\t\twhile (x > 0){\n\
    \t\t\t\tif (x % 10 == 7){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tx /= 10;\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i <\
    \ n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            while (i)\
    \ {\n                if (i % 10 == 7)\n                    count++;\n        \
    \        i /= 10;\n            }\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  long res = 0;\n  for (long i = 11; i < n; i++)\
    \ {\n    std::string str = std::to_string(i);\n    if ((i % 11 == 0 || i % 13\
    \ == 0) && str.find(\"7\") != std::string::npos) {\n      res++;\n    }\n  }\n\
    \  return res;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpzgtjngks: /tmp/tmpzgtjngks.cpp:23: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    if(n==0)\n    return 0;\n    long num=(n-1)/11;\n\
    \    long num2=(n-1)/13;\n    long n1=11*num;\n    long n2=13*num2;\n    long\
    \ n3=(long)pow(10,8);\n    long n4=(long)pow(10,7);\n    long n5=(long)pow(10,6);\n\
    \    long n6=(long)pow(10,5);\n    long n7=(long)pow(10,4);\n    long n8=(long)pow(10,3);\n\
    \    long n9=(long)pow(10,2);\n    long n10=(long)pow(10,1);\n    long n11=(long)pow(10,0);\n\
    \    long sum_of_digits_n1=0;\n    long sum_of_digits_n2=0;\n    int num_of_digits_n1=0;\n\
    \    int num_of_digits_n2=0;\n    while(n1!=0)\n    {\n        sum_of_digits_n1=sum_of_digits_n1+n1%10;\n\
    \        n1=n1/10;\n        num_of_digits_n1++;\n    }\n    while(n2!=0)\n   \
    \ {\n        sum_of_digits_n2=sum_of_digits_n2+n2%10;\n        n2=n2/10;\n   \
    \     num_of_digits_n2++;\n    }\n    if(sum_of_digits_n1>10)\n    {\n       \
    \ long sum_of_digits_n11=0;\n        while(sum_of_digits_n1!=0)\n        {\n \
    \           sum_of_digits_n11=sum_of_digits_n11+sum_of_digits_n1%10;\n       \
    \     sum_of_digits_n1=sum_of_digits_n1/10;\n        }\n        sum_of_digits_n1=sum_of\n\
    }\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) ==\
    \ (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n\
    \    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n\
    \    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpedvzusya.cpp: In function \u2018long int fizz_buzz(long int)\u2019\
    :\n/tmp/tmpedvzusya.cpp:50:26: error: \u2018sum_of\u2019 was not declared in this\
    \ scope\n   50 |         sum_of_digits_n1=sum_of\n      |                    \
    \      ^~~~~~\n/tmp/tmpedvzusya.cpp:52:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n   52 | int main() {\n      |     \
    \       ^\n/tmp/tmpedvzusya.cpp:62:1: error: expected \u2018}\u2019 at end of\
    \ input\n   62 | }\n      | ^\n/tmp/tmpedvzusya.cpp:10:24: note: to match this\
    \ \u2018{\u2019\n   10 | long fizz_buzz(long n) {\n      |                   \
    \     ^\n/tmp/tmpedvzusya.cpp:62:1: warning: control reaches end of non-void function\
    \ [-Wreturn-type]\n   62 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\tlong count = 0;\n\tfor (long i = 7; i < n; i++)\
    \ {\n\t\tif (i % 7 == 0 && i % 11 == 0 && i % 13 == 0) {\n\t\t\tcount++;\n\t\t\
    }\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n  \
    \  assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79))\
    \ == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200))\
    \ == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmp5chjiozm: /tmp/tmp5chjiozm.cpp:22: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    assert(n >= 1);\n    long count = 0;\n   \
    \ for (long i = 1; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n\
    \            std::string str = std::to_string(i);\n            for (char c : str)\
    \ {\n                if (c == '7') {\n                    count++;\n         \
    \       }\n            }\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  // Check the number of 7s in the numbers divisible\
    \ by 11 or 13\n  long count = 0;\n  // Iterate through all the numbers less than\
    \ n\n  // If the number is divisible by 11 or 13, check the number of 7s in it\n\
    \  for (long i = 1; i < n; i++) {\n    if (i % 11 == 0 || i % 13 == 0) {\n   \
    \   std::string s = std::to_string(i);\n      for (int j = 0; j < s.length();\
    \ j++) {\n        if (s[j] == '7') {\n          count++;\n        }\n      }\n\
    \    }\n  }\n  return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  int ans = 0;\n  for (int i = 1; i < n; i++)\
    \ {\n    if ((i % 11 == 0) || (i % 13 == 0)) {\n      int j = i;\n      while\
    \ (j != 0) {\n        int k = j % 10;\n        if (k == 7) {\n          ans +=\
    \ 1;\n        }\n        j = j / 10;\n      }\n    }\n  }\n  return ans;\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  long res = 0;\n  for (long i = 11; i < n; i++)\
    \ {\n    if (i % 11 == 0 || i % 13 == 0) {\n      while (i) {\n        if (i %\
    \ 10 == 7) {\n          res++;\n        }\n        i /= 10;\n      }\n    }\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  // Write your code here.\n    std::vector<std::string>\
    \ num;\n    for(int i=1;i<n;i++){\n        std::string t = std::to_string(i);\n\
    \        if(t.find(\"7\") != std::string::npos){\n            num.push_back(t);\n\
    \        }\n    }\n    long count=0;\n    for(int i=0;i<num.size();i++){\n   \
    \     int k = stoi(num[i]);\n        if(k%11==0 || k%13==0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmphq9qogr_: /tmp/tmphq9qogr_.cpp:31: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    int i = 11;\n    while(i<n){\n\
    \        if(i%11==0||i%13==0){\n            int temp = i;\n            while(temp!=0){\n\
    \                if(temp%10==7){\n                    count++;\n             \
    \   }\n                temp = temp/10;\n            }\n        }\n        i++;\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\t// Your code here\n\tint count = 0;\n\tfor (int\
    \ i = 7; i < n; i += 11) {\n\t\tint x = i;\n\t\twhile (x > 0) {\n\t\t\tif (x %\
    \ 10 == 7) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tx /= 10;\n\t\t}\n\t}\n\tfor (int\
    \ i = 13; i < n; i += 13) {\n\t\tint x = i;\n\t\twhile (x > 0) {\n\t\t\tif (x\
    \ % 10 == 7) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tx /= 10;\n\t\t}\n\t}\n\treturn\
    \ count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpt1ae17_r: /tmp/tmpt1ae17_r.cpp:35: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  long cnt = 0;\n  for (long i = 11; i < n; i++)\
    \ {\n    if (i % 11 == 0 || i % 13 == 0) {\n      long t = i;\n      while (t\
    \ > 0) {\n        if (t % 10 == 7) {\n          cnt++;\n        }\n        t /=\
    \ 10;\n      }\n    }\n  }\n  return cnt;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  long num_fizz = n / 11;\n  long num_buzz = n\
    \ / 13;\n  long num_fizzbuzz = n / (11 * 13);\n  long num_seven = 0;\n  for (long\
    \ i = 7; i < n; i += 10) {\n    num_seven += 1;\n  }\n  for (long i = 17; i <\
    \ n; i += 10) {\n    num_seven += 1;\n  }\n  for (long i = 27; i < n; i += 10)\
    \ {\n    num_seven += 1;\n  }\n  for (long i = 37; i < n; i += 10) {\n    num_seven\
    \ += 1;\n  }\n  for (long i = 47; i < n; i += 10) {\n    num_seven += 1;\n  }\n\
    \  for (long i = 57; i < n; i += 10) {\n    num_seven += 1;\n  }\n  for (long\
    \ i = 67; i < n; i += 10) {\n    num_seven += 1;\n  }\n  for (long i = 77; i <\
    \ n; i += 10) {\n    num_seven += 1;\n  }\n  for (long i = 87; i < n; i += 10)\
    \ {\n    num_seven += 1;\n  }\n  for (long i = 97; i < n; i += 10) {\n    num_seven\
    \ += 1;\n  }\n  return num_seven - num_fizz - num_buzz + num_fizzbuzz;\n}\nint\
    \ main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpd25ynnnp: /tmp/tmpd25ynnnp.cpp:49: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\tstd::cout << n << std::endl;\n\tlong sum = 0;\n\
    \tif (n % 11 == 0) {\n\t\tsum += std::count(std::to_string(n).begin(), std::to_string(n).end(),\
    \ '7');\n\t}\n\tif (n % 13 == 0) {\n\t\tsum += std::count(std::to_string(n).begin(),\
    \ std::to_string(n).end(), '7');\n\t}\n\treturn sum + fizz_buzz(n - 1);\n}\nint\
    \ main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: "50\n49\n48\n47\n46\n45\n44\n"
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long sum = 0;\n    for (long i = 0; i < n;\
    \ i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string number\
    \ = std::to_string(i);\n            for (char c : number) {\n                if\
    \ (c == '7') {\n                    sum++;\n                }\n            }\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  //Create a string out of the number\n  std::string\
    \ n_string = std::to_string(n);\n  //Create a string that contains the number\
    \ of times 7 appears.\n  std::string seven_string = \"\";\n  for (int i = 0; i\
    \ < n_string.length(); i++) {\n    seven_string = seven_string + \"7\";\n  }\n\
    \  long num_sevens = std::stol(seven_string);\n  //Return the number of times\
    \ 7 appears between 0 and the number 7n / (11*13)\n  return num_sevens / (11*13);\n\
    }\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) ==\
    \ (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n\
    \    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n\
    \    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpyewouxvz: /tmp/tmpyewouxvz.cpp:25: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  // your code here\n  return 0;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpfsp7ay97: /tmp/tmpfsp7ay97.cpp:17: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  long ans = 0;\n  for (long i = 1; i < n; i++)\
    \ {\n    if (i % 11 == 0) {\n      if (i % 13 == 0) {\n        while (i) {\n \
    \         if (i % 10 == 7) {\n            ans++;\n          }\n          i /=\
    \ 10;\n        }\n      } else {\n        while (i) {\n          if (i % 10 ==\
    \ 7) {\n            ans++;\n          }\n          i /= 10;\n        }\n     \
    \ }\n    } else if (i % 13 == 0) {\n      while (i) {\n        if (i % 10 == 7)\
    \ {\n          ans++;\n        }\n        i /= 10;\n      }\n    }\n  }\n  return\
    \ ans;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    // Iterate through the\
    \ numbers\n    for (long i = 0; i < n; i++) {\n        if (i % 11 == 0 || i %\
    \ 13 == 0) {\n            // Get the individual digits\n            long num =\
    \ i;\n            std::vector<int> digits;\n            while (num > 0) {\n  \
    \              digits.push_back(num % 10);\n                num /= 10;\n     \
    \       }\n            // Reverse\n            std::reverse(digits.begin(), digits.end());\n\
    \            // Check if there are 7s in the vector\n            for (int d :\
    \ digits) {\n                if (d == 7) {\n                    count++;\n   \
    \             }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count=0;\n    for(long i=1;i<n;i++){\n\
    \        if(i%11==0){\n            long copy=i;\n            while(copy!=0){\n\
    \                if(copy%10==7){\n                    count++;\n             \
    \   }\n                copy=copy/10;\n            }\n        }\n        if(i%13==0){\n\
    \            long copy=i;\n            while(copy!=0){\n                if(copy%10==7){\n\
    \                    count++;\n                }\n                copy=copy/10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmp5vgfx4zv: /tmp/tmp5vgfx4zv.cpp:41: int main(): Assertion `candidate((4000))\
    \ == (192)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    assert(n > 0);\n    int digit;\n    int counter\
    \ = 0;\n    for (int i = 7; i < n; i += 7) {\n        if (i % 11 == 0 || i % 13\
    \ == 0) {\n            int temp = i;\n            while (temp > 0) {\n       \
    \         digit = temp % 10;\n                if (digit == 7) {\n            \
    \        counter++;\n                }\n                temp /= 10;\n        \
    \    }\n        }\n    }\n    return counter;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpvjw1qqad: /tmp/tmpvjw1qqad.cpp:32: int main(): Assertion `candidate((79))\
    \ == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\tif (n < 1 || n > 100000000000) {\n\t\tassert(false);\n\
    \t}\n\tlong ans = 0;\n\tfor (long i = 1; i < n; i++) {\n\t\tstd::string s = std::to_string(i);\n\
    \t\tif (i % 11 == 0 || i % 13 == 0) {\n\t\t\tfor (auto& c : s) {\n\t\t\t\tif (c\
    \ == '7') {\n\t\t\t\t\tans++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn ans;\n\
    }\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) ==\
    \ (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n\
    \    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n\
    \    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\tint ct = 0;\n\tfor (int i = 0; i < n; i++) {\n\
    \t\tif (i % 11 == 0 || i % 13 == 0) {\n\t\t\tint j = i;\n\t\t\twhile (j != 0)\
    \ {\n\t\t\t\tif (j % 10 == 7) {\n\t\t\t\t\tct++;\n\t\t\t\t}\n\t\t\t\tj /= 10;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn ct;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long cnt = 0;\n    for (long i = 1; i < n;\
    \ i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string si\
    \ = std::to_string(i);\n            for (auto it = si.begin(); it != si.end();\
    \ it++) {\n                if (*it == '7') {\n                    cnt++;\n   \
    \             }\n            }\n        }\n    }\n    return cnt;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  int sum = 0;\n  for (int i = 7; i < n; i +=\
    \ 7) {\n    if (i % 11 == 0 || i % 13 == 0) {\n      sum += 1;\n    }\n  }\n \
    \ return sum;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpsn4stfvg: /tmp/tmpsn4stfvg.cpp:22: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    // Write your code here.\n    long count =\
    \ 0;\n    long i = 13;\n    while(i < n){\n        if(i % 11 == 0 || i % 13 ==\
    \ 0){\n            if(i % 10 == 7) count++;\n            if(i % 100 == 7) count++;\n\
    \            if(i % 1000 == 7) count++;\n            if(i % 10000 == 7) count++;\n\
    \            if(i % 100000 == 7) count++;\n            if(i % 1000000 == 7) count++;\n\
    \            if(i % 10000000 == 7) count++;\n            if(i % 100000000 == 7)\
    \ count++;\n            if(i % 1000000000 == 7) count++;\n        }\n        i++;\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmpsqcc0tjw: /tmp/tmpsqcc0tjw.cpp:33: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long i = 11;\n    long count = 0;\n    while(i\
    \ < n) {\n        if(i % 11 == 0) {\n            std::cout << i << \" \";\n  \
    \          i += 11;\n            count++;\n        }\n        else if(i % 13 ==\
    \ 0) {\n            std::cout << i << \" \";\n            i += 13;\n         \
    \   count++;\n        }\n        else {\n            i += 1;\n        }\n    }\n\
    \    std::cout << std::endl;\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: "11 22 33 44 \n"
  stderr: "tmpt37c6jay: /tmp/tmpt37c6jay.cpp:33: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long i, x, y, count=0;\n    for(i=7; i<n;\
    \ i++){\n        x = i%11;\n        y = i%13;\n        if(x==0 || y==0){\n   \
    \         if(x==0){\n                if(i/10==7){\n                    count++;\n\
    \                }\n            }\n            if(y==0){\n                if(i/10==7){\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n \
    \   assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n   \
    \ assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200))\
    \ == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpnv_qmgwy: /tmp/tmpnv_qmgwy.cpp:33: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  long sum = 0;\n  for (long i = 0; i < n; i++)\
    \ {\n    if ((i % 11 == 0) || (i % 13 == 0)) {\n      int temp = i;\n      while\
    \ (temp > 0) {\n        if (temp % 10 == 7) {\n          sum++;\n        }\n \
    \       temp /= 10;\n      }\n    }\n  }\n  return sum;\n}\nint main() {\n   \
    \ auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  // Your code here.\n  if(n < 77) {\n    return\
    \ 0;\n  }\n  else {\n    long count_7 = 0;\n    for(long i = 77; i < n; i++) {\n\
    \      if(i % 11 == 0) {\n        count_7++;\n      }\n      else if(i % 13 ==\
    \ 0) {\n        count_7++;\n      }\n    }\n    return count_7;\n  }\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmp8mq0wpj9: /tmp/tmp8mq0wpj9.cpp:31: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  // your code here\n  long count = 0;\n  int\
    \ i = 1;\n  while(i < n){\n    if(i % 11 == 0 || i % 13 == 0){\n      if(i % 100\
    \ == 77 || i % 100 == 70){\n        count++;\n      }\n      else if(i % 1000\
    \ == 770 || i % 1000 == 700){\n        count+=2;\n      }\n      else if(i % 10000\
    \ == 7700 || i % 10000 == 7000){\n        count+=3;\n      }\n      else if(i\
    \ % 100000 == 77000 || i % 100000 == 70000){\n        count+=4;\n      }\n   \
    \   else if(i % 1000000 == 770000 || i % 1000000 == 700000){\n        count+=5;\n\
    \      }\n      else if(i % 10000000 == 7700000 || i % 10000000 == 7000000){\n\
    \        count+=6;\n      }\n      else if(i % 100000000 == 77000000 || i % 100000000\
    \ == 70000000){\n        count+=7;\n      }\n      else if(i % 1000000000 == 770000000\
    \ || i % 1000000000 == 700000000){\n        count+=8;\n      }\n      else if(i\
    \ % 10000000000 == 7700000000 || i % 10000000000 == 7000000000){\n        count+=9;\n\
    \      }\n      else if(i % 100000000000 == 77000000000 || i % 100000000000 ==\
    \ 70000000000){\n        count+=10;\n      }\n      else if(i % 1000000000000\
    \ == 770000000000 || i % 1000000000000 == 700000000000){\n        count+=11;\n\
    \      }\n      else if(i % 10000000000000 == 7700000000000 || i % 10000000000000\
    \ == 7000000000000){\n        count+=12;\n      }\n      else if(i % 100000000000000\
    \ == 77000000000000 || i % 100000000000000 == 70000000000000){\n        count+=13;\n\
    \      }\n      else if(i % 1000000000000000 == 770000000000000 || i % 1000000000000000\
    \ == 700000000000000){\n        count+=14;\n      }\n      else if(i % 10000000000000000\
    \ == 7700000000000000 || i % 10000000000000000 == 7000000000000000){\n       \
    \ count+=15;\n      }\n      else if(i %\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphxxxhjsr.cpp: In function \u2018long int fizz_buzz(long int)\u2019\
    :\n/tmp/tmphxxxhjsr.cpp:62:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   62 | }\n      | ^\n/tmp/tmphxxxhjsr.cpp:61:18: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   61 |       else if(i %\n      |\
    \              ~   ^\n      |                  )\n   62 | }\n      | ~       \
    \          \n/tmp/tmphxxxhjsr.cpp:62:1: error: expected primary-expression before\
    \ \u2018}\u2019 token\n   62 | }\n      | ^\n/tmp/tmphxxxhjsr.cpp:63:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n   63\
    \ | int main() {\n      |            ^\n/tmp/tmphxxxhjsr.cpp:73:1: error: expected\
    \ \u2018}\u2019 at end of input\n   73 | }\n      | ^\n/tmp/tmphxxxhjsr.cpp:14:15:\
    \ note: to match this \u2018{\u2019\n   14 |   while(i < n){\n      |        \
    \       ^\n/tmp/tmphxxxhjsr.cpp:73:1: error: expected \u2018}\u2019 at end of\
    \ input\n   73 | }\n      | ^\n/tmp/tmphxxxhjsr.cpp:10:24: note: to match this\
    \ \u2018{\u2019\n   10 | long fizz_buzz(long n) {\n      |                   \
    \     ^\n/tmp/tmphxxxhjsr.cpp:73:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n   73 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long c = 0;\n    for (long i = 0; i < n; i++)\
    \ {\n        // if (i % 11 == 0 || i % 13 == 0) {\n        //     std::string\
    \ s = std::to_string(i);\n        //     for (int j = 0; j < s.length(); j++)\
    \ {\n        //         if (s[j] == '7') {\n        //             c++;\n    \
    \    //         }\n        //     }\n        // }\n        if (i % 11 == 0 ||\
    \ i % 13 == 0) {\n            c += std::to_string(i).count('7');\n        }\n\
    \    }\n    return c;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "/tmp/tmprlugnl1l.cpp: In function \u2018long int fizz_buzz(long int)\u2019\
    :\n/tmp/tmprlugnl1l.cpp:22:36: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018count\u2019\
    \n   22 |             c += std::to_string(i).count('7');\n      |            \
    \                        ^~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    assert(n > 0);\n    long count = 0;\n    for\
    \ (long i = 1; i < n; i++) {\n        if ((i % 11 == 0 || i % 13 == 0) && to_string(i).find(\"\
    7\") != string::npos) {\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) ==\
    \ (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n\
    \    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n\
    \    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsylg_97u.cpp: In function \u2018long int fizz_buzz(long int)\u2019\
    :\n/tmp/tmpsylg_97u.cpp:14:45: error: \u2018to_string\u2019 was not declared in\
    \ this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n   14 |     \
    \    if ((i % 11 == 0 || i % 13 == 0) && to_string(i).find(\"7\") != string::npos)\
    \ {\n      |                                             ^~~~~~~~~\n      |  \
    \                                           std::__cxx11::to_string\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpsylg_97u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpsylg_97u.cpp:14:71: error: \u2018\
    string\u2019 has not been declared\n   14 |         if ((i % 11 == 0 || i % 13\
    \ == 0) && to_string(i).find(\"7\") != string::npos) {\n      |              \
    \                                                         ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    if(n < 77) {\n        return 0;\n    } else\
    \ if(n < 1000) {\n        return fizz_buzz(n-11) + fizz_buzz(n-13) + (n % 11 ==\
    \ 0 || n % 13 == 0);\n    } else {\n        int digits[4] = {(n / 1000) % 10,\
    \ (n / 100) % 10, (n / 10) % 10, n % 10};\n        long result = fizz_buzz(n /\
    \ 1000) * 28 + fizz_buzz(digits[1] * 100 + digits[2] * 10 + digits[3]);\n    \
    \    for(int i = 0; i < 4; i++) {\n            for(int j = 0; j < 4; j++) {\n\
    \                for(int k = 0; k < 4; k++) {\n                    int sum = digits[i]\
    \ + digits[j] + digits[k];\n                    if(sum % 11 == 0 || sum % 13 ==\
    \ 0) {\n                        int append = sum == 0 ? 1 : 3;\n             \
    \           if(i == 0) result += fizz_buzz(n / 1000) * append;\n             \
    \           else if(j == 0) result += fizz_buzz(n / 1000) * append;\n        \
    \                else if(k == 0) result += fizz_buzz(n / 1000) * append;\n   \
    \                     else result += fizz_buzz(n / 1000) * append;\n         \
    \           }\n                }\n            }\n        }\n        return result;\n\
    \    }\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmp56fkxdki: /tmp/tmp56fkxdki.cpp:38: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\t// your code here\n\tlong count=0;\n\tif(n%11==0)\n\
    \t{\n\t\tfor(long i=0;i<n;i++)\n\t\t{\n\t\t\tif(i%11==0)\n\t\t\t{\n\t\t\t\tint\
    \ temp=i;\n\t\t\t\tint flag=0;\n\t\t\t\twhile(temp!=0)\n\t\t\t\t{\n\t\t\t\t\t\
    if(temp%10==7)\n\t\t\t\t\t{\n\t\t\t\t\t\tflag=1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\
    \t}\n\t\t\t\t\ttemp=temp/10;\n\t\t\t\t}\n\t\t\t\tif(flag==1)\n\t\t\t\t{\n\t\t\t\
    \t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(n%13==0)\n\t{\n\t\tfor(long\
    \ i=0;i<n;i++)\n\t\t{\n\t\t\tif(i%13==0)\n\t\t\t{\n\t\t\t\tint temp=i;\n\t\t\t\
    \tint flag=0;\n\t\t\t\twhile(temp!=0)\n\t\t\t\t{\n\t\t\t\t\tif(temp%10==7)\n\t\
    \t\t\t\t{\n\t\t\t\t\t\tflag=1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\ttemp=temp/10;\n\
    \t\t\t\t}\n\t\t\t\tif(flag==1)\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\
    \t}\n\t\t}\n\t}\n\tif(n%11==0 && n%13==0)\n\t{\n\t\tfor(long i=0;i<n;i++)\n\t\t\
    {\n\t\t\tif(i%11==0 && i%13==0)\n\t\t\t{\n\t\t\t\tint temp=i;\n\t\t\t\tint flag=0;\n\
    \t\t\t\twhile(temp!=0)\n\t\t\t\t{\n\t\t\t\t\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3t5tr2bq.cpp: In function \u2018long int fizz_buzz(long int)\u2019\
    :\n/tmp/tmp3t5tr2bq.cpp:73:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   73 | int main() {\n      |            ^\n/tmp/tmp3t5tr2bq.cpp:83:1:\
    \ error: expected \u2018}\u2019 at end of input\n   83 | }\n      | ^\n/tmp/tmp3t5tr2bq.cpp:66:4:\
    \ note: to match this \u2018{\u2019\n   66 |    {\n      |    ^\n/tmp/tmp3t5tr2bq.cpp:83:1:\
    \ error: expected \u2018}\u2019 at end of input\n   83 | }\n      | ^\n/tmp/tmp3t5tr2bq.cpp:64:3:\
    \ note: to match this \u2018{\u2019\n   64 |   {\n      |   ^\n/tmp/tmp3t5tr2bq.cpp:83:1:\
    \ error: expected \u2018}\u2019 at end of input\n   83 | }\n      | ^\n/tmp/tmp3t5tr2bq.cpp:62:2:\
    \ note: to match this \u2018{\u2019\n   62 |  {\n      |  ^\n/tmp/tmp3t5tr2bq.cpp:83:1:\
    \ error: expected \u2018}\u2019 at end of input\n   83 | }\n      | ^\n/tmp/tmp3t5tr2bq.cpp:10:24:\
    \ note: to match this \u2018{\u2019\n   10 | long fizz_buzz(long n) {\n      |\
    \                        ^\n/tmp/tmp3t5tr2bq.cpp:83:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n   83 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <\
    \ n; i++) {\n        if ((i % 11 == 0 || i % 13 == 0) && i % 7 == 0)\n       \
    \     count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmppswtvtzw: /tmp/tmppswtvtzw.cpp:21: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <\
    \ n; i++) {\n        if ((i % 11 == 0 || i % 13 == 0) && to_string(i).find(\"\
    7\") != string::npos)\n            count++;\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1vu5ubvj.cpp: In function \u2018long int fizz_buzz(long int)\u2019\
    :\n/tmp/tmp1vu5ubvj.cpp:13:45: error: \u2018to_string\u2019 was not declared in\
    \ this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n   13 |     \
    \    if ((i % 11 == 0 || i % 13 == 0) && to_string(i).find(\"7\") != string::npos)\n\
    \      |                                             ^~~~~~~~~\n      |      \
    \                                       std::__cxx11::to_string\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp1vu5ubvj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmp1vu5ubvj.cpp:13:71: error: \u2018\
    string\u2019 has not been declared\n   13 |         if ((i % 11 == 0 || i % 13\
    \ == 0) && to_string(i).find(\"7\") != string::npos)\n      |                \
    \                                                       ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\tlong fz = n / 11;\n\tlong fb = n / 13;\n\tlong\
    \ fbfz = n / (11 * 13);\n\tlong res = 0;\n\tfor (long i = 0; i < 7; i++) {\n\t\
    \tres += (fz + fb - fbfz) * i;\n\t\tfz /= 10;\n\t\tfb /= 10;\n\t\tfbfz /= 10;\n\
    \t}\n\treturn res;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpzv1qs219: /tmp/tmpzv1qs219.cpp:26: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\tlong i = 1;\n\tlong count = 0;\n\twhile (i <\
    \ n) {\n\t\tif (i % 11 == 0 || i % 13 == 0) {\n\t\t\tlong k = i;\n\t\t\twhile\
    \ (k != 0) {\n\t\t\t\tif (k % 10 == 7) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\
    \tk = k / 10;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn count;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  // Insert your code here\n  int count = 0;\n\
    \  for(int i = 11; i < n; i += 11){\n    char nums[10];\n    sprintf(nums, \"\
    %d\", i);\n    int len = strlen(nums);\n    for(int j = 0; j < len; j++){\n  \
    \    if(nums[j] == '7'){\n        count++;\n      }\n    }\n  }\n  for(int i =\
    \ 13; i < n; i += 13){\n    char nums[10];\n    sprintf(nums, \"%d\", i);\n  \
    \  int len = strlen(nums);\n    for(int j = 0; j < len; j++){\n      if(nums[j]\
    \ == '7'){\n        count++;\n      }\n    }\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmp708lxkhv: /tmp/tmp708lxkhv.cpp:42: int main(): Assertion `candidate((4000))\
    \ == (192)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\t\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmpgoct2911: /tmp/tmpgoct2911.cpp:15: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    // your code here\n    long count = 0;\n \
    \   for(long i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          std::string s = std::to_string(i);\n            for(int j = 0; j <\
    \ s.length(); j++){\n                if(s[j] == '7')\n                    count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  if(n<70) return 0;\n  if(n>=700) return fizz_buzz(700)\
    \ + 6*fizz_buzz(n/10) + fizz_buzz(n%10);\n  if(n>=70) return fizz_buzz(70) + fizz_buzz(n%10);\n\
    \  return 1;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i <\
    \ n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    // your code goes here\n    int times = 0;\n\
    \    for(int i = 1; i < n; i++) {\n        if(i % 11 == 0 || i % 13 == 0) {\n\
    \            std::string num = std::to_string(i);\n            for(int j = 0;\
    \ j < num.length(); j++) {\n                if(num[j] == '7') {\n            \
    \        times++;\n                }\n            }\n        }\n    }\n    return\
    \ times;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i <\
    \ n; i++) {\n        if ((i % 11 == 0 || i % 13 == 0) && i % 10 == 7) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpw5gkd8nl: /tmp/tmpw5gkd8nl.cpp:22: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    \n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmp301ts_99: /tmp/tmp301ts_99.cpp:15: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\tif (n<=6) {\n\t\treturn 0;\n\t}\n\tlong fizzbuzz_val\
    \ = 0;\n\tlong div = 11;\n\tlong curr = div;\n\tlong count = 0;\n\tlong curr_cnt\
    \ = 0;\n\tlong h_pos = 0;\n\twhile (curr<n) {\n\t\tlong prev_cnt = curr_cnt;\n\
    \t\tcurr_cnt = 0;\n\t\tint h = 0;\n\t\twhile (curr != 0) {\n\t\t\th = curr%10;\n\
    \t\t\tif (h == 7) {\n\t\t\t\tcount++;\n\t\t\t\tcurr_cnt++;\n\t\t\t}\n\t\t\tcurr\
    \ = curr/10;\n\t\t}\n\t\tfizzbuzz_val = fizzbuzz_val + count;\n\t\tif (h_pos >=\
    \ 1) {\n\t\t\tfizzbuzz_val = fizzbuzz_val - prev_cnt;\n\t\t}\n\t\th_pos++;\n\t\
    \tif (div == 11) {\n\t\t\tdiv = 13;\n\t\t}\n\t\telse {\n\t\t\tdiv = 11;\n\t\t\
    }\n\t\tcurr = curr + div;\n\t}\n\treturn fizzbuzz_val;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long result = 0;\n    for (long i = 11; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            while (i\
    \ > 0) {\n                if (i % 10 == 7) {\n                    result++;\n\
    \                }\n                i /= 10;\n            }\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\t// Write your code here\n\t// To print results\
    \ to the standard output you can use printf()\n\t// Example: printf(\"%s\", \"\
    Hello world!\");\n\tint count = 0;\n\tfor (int i = 1; i < n; i++) {\n\t\tif (i\
    \ % 11 == 0 || i % 13 == 0) {\n\t\t\tstring s = to_string(i);\n\t\t\tfor (int\
    \ i = 0; i < s.length(); i++) {\n\t\t\t\tif (s[i] == '7')\n\t\t\t\t\tcount++;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpbopjnxyg.cpp: In function \u2018long int fizz_buzz(long int)\u2019\
    :\n/tmp/tmpbopjnxyg.cpp:17:4: error: \u2018string\u2019 was not declared in this\
    \ scope; did you mean \u2018std::string\u2019?\n   17 |    string s = to_string(i);\n\
    \      |    ^~~~~~\n      |    std::string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpbopjnxyg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stringfwd.h:79:33:\
    \ note: \u2018std::string\u2019 declared here\n   79 |   typedef basic_string<char>\
    \    string;\n      |                                 ^~~~~~\n/tmp/tmpbopjnxyg.cpp:18:24:\
    \ error: \u2018s\u2019 was not declared in this scope\n   18 |    for (int i =\
    \ 0; i < s.length(); i++) {\n      |                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    if(n<=0)\n        return 0;\n    else if(n<=70){\n\
    \        if(n%11==0 || n%13==0)\n            return 1+fizz_buzz(n-1);\n      \
    \  else return fizz_buzz(n-1);\n    }\n    else if(n<=777){\n        if(n%11==0\
    \ || n%13==0)\n            return 1+fizz_buzz(n-1);\n        else if(n%77==0)\n\
    \            return fizz_buzz(n-1)+fizz_buzz(n-7);\n        else return fizz_buzz(n-1);\n\
    \    }\n    else{\n        if(n%11==0 || n%13==0)\n            return 1+fizz_buzz(n-1);\n\
    \        else if(n%77==0)\n            return fizz_buzz(n-1)+fizz_buzz(n-7);\n\
    \        else if(n%777==0)\n            return fizz_buzz(n-1)+fizz_buzz(n-7)+fizz_buzz(n-77);\n\
    \        else return fizz_buzz(n-1);\n    }\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpwn1t39o0: /tmp/tmpwn1t39o0.cpp:37: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int count=0;\n    for(int i=0;i<n;i++){\n\
    \        if(i%11==0){\n            if(i%10==7){\n                count++;\n  \
    \          }\n            else if(i/10==7){\n                count++;\n      \
    \      }\n        }\n        else if(i%13==0){\n            if(i%10==7){\n   \
    \             count++;\n            }\n            else if(i/10==7){\n       \
    \         count++;\n            }\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpt3w7clt3: /tmp/tmpt3w7clt3.cpp:35: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <\
    \ n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n            std::string i_str\
    \ = std::to_string(i);\n            if(i_str.find(\"7\") != std::string::npos){\n\
    \                count += 1;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) ==\
    \ (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n\
    \    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n\
    \    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpogu9cypt: /tmp/tmpogu9cypt.cpp:25: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int c = 0;\n    for(int i = 1; i < n; i++)\
    \ {\n        if((i % 11 == 0) || (i % 13 == 0)) {\n            int j = i;\n  \
    \          while(j != 0) {\n                if(j % 10 == 7) {\n              \
    \      c++;\n                }\n                j = j / 10;\n            }\n \
    \       }\n    }\n    return c;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\tint count = 0;\n\t// n = n - 1;\n\tfor (int\
    \ i = 1; i < n; i++) {\n\t\t// cout << i << endl;\n\t\t// cout << \"count = \"\
    \ << count << endl;\n\t\tif (i % 11 == 0 || i % 13 == 0) {\n\t\t\tstring num =\
    \ to_string(i);\n\t\t\t// cout << \"num = \" << num << endl;\n\t\t\tfor (int j\
    \ = 0; j < num.length(); j++) {\n\t\t\t\tif (num[j] == '7') {\n\t\t\t\t\tcount++;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz8m39qxp.cpp: In function \u2018long int fizz_buzz(long int)\u2019\
    :\n/tmp/tmpz8m39qxp.cpp:17:4: error: \u2018string\u2019 was not declared in this\
    \ scope; did you mean \u2018std::string\u2019?\n   17 |    string num = to_string(i);\n\
    \      |    ^~~~~~\n      |    std::string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpz8m39qxp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stringfwd.h:79:33:\
    \ note: \u2018std::string\u2019 declared here\n   79 |   typedef basic_string<char>\
    \    string;\n      |                                 ^~~~~~\n/tmp/tmpz8m39qxp.cpp:19:24:\
    \ error: \u2018num\u2019 was not declared in this scope; did you mean \u2018enum\u2019\
    ?\n   19 |    for (int j = 0; j < num.length(); j++) {\n      |              \
    \          ^~~\n      |                        enum\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int c=0;\n    for(int i=1;i<n;i++)\n    {\n\
    \        if(i%11==0||i%13==0)\n        {\n            std::string s=std::to_string(i);\n\
    \            for(int j=0;j<s.length();j++)\n            {\n                if(s[j]=='7')\n\
    \                {\n                    c++;\n                }\n            }\n\
    \        }\n    }\n    return c;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count=0;\n    for(long i=1;i<n;i++){\n\
    \        if(i%11==0 || i%13==0){\n            std::string str=std::to_string(i);\n\
    \            if(str.find(\"7\")!=std::string::npos){\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmp2u858_om: /tmp/tmp2u858_om.cpp:25: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    // Your code here\n    // to find divisible\
    \ by 11 or 13, numbers have to have prime factor as 11 and 13, so we have to calculate\
    \ the prime factors.\n    // if number is divisible by prime factors 11 and 13\
    \ and also has digit 7.\n    long count = 0;\n    //std::cout<<\"n : \"<<n<<\"\
    \\n\";\n    while(n > 0){\n      if(n%10 == 7){\n        //std::cout<<\"number\
    \ : \"<<n<<\"\\n\";\n        //std::cout<<\"Prime factors of 11 \"<<prime_factors(11)<<\"\
    \\n\";\n        //std::cout<<\"Prime factors of 13 \"<<prime_factors(13)<<\"\\\
    n\";\n        if(prime_factors(n).find(11) != std::string::npos || prime_factors(n).find(13)\
    \ != std::string::npos){\n          count++;\n        }\n      }\n      n = n/10;\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpavx9flgn.cpp: In function \u2018long int fizz_buzz(long int)\u2019\
    :\n/tmp/tmpavx9flgn.cpp:21:12: error: \u2018prime_factors\u2019 was not declared\
    \ in this scope\n   21 |         if(prime_factors(n).find(11) != std::string::npos\
    \ || prime_factors(n).find(13) != std::string::npos){\n      |            ^~~~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int ans = 0;\n    for(int i = 1; i <= n; i++)\
    \ {\n        int ind1 = i / 11;\n        int ind2 = i / 13;\n        int ind3\
    \ = i / 11 * 13;\n        int ind4 = i / 13 * 11;\n        if(i % 11 == 0 && i\
    \ % 13 == 0) ans += std::min(ind1, ind2);\n        else if(i % 11 == 0) ans +=\
    \ ind1;\n        else if(i % 13 == 0) ans += ind2;\n        else ans += std::min(ind1,\
    \ ind2) - std::max(ind3, ind4);\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpgu0wu5oe: /tmp/tmpgu0wu5oe.cpp:26: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int count = 0;\n    for (int i = 0; i < n;\
    \ i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string res\
    \ = std::to_string(i);\n            for (int j = 0; j < res.length(); j++) {\n\
    \                if (res[j] == '7') {\n                    count++;\n        \
    \        }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <\
    \ n; i++) {\n        if ((i % 11 == 0) || (i % 13 == 0)) {\n            long number\
    \ = i;\n            while (number > 0) {\n                long rem = number %\
    \ 10;\n                if (rem == 7) {\n                    count++;\n       \
    \         }\n                number = number / 10;\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    // your code here\n    long count = 0;\n \
    \   for(long i = 1; i<n; i++){\n        if((i%11==0) || (i%13==0)){\n        \
    \    std::string si = std::to_string(i);\n            for(int j = 0; j<si.length();\
    \ j++){\n                if(si[j] == '7'){\n                    count++;\n   \
    \             }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    long temp = 0;\n    long\
    \ div = 11;\n    if (n < div)\n        return 0;\n    else {\n        while (div\
    \ <= n) {\n            temp = div;\n            if (temp % 13 == 0) {\n      \
    \          while (temp > 0) {\n                    if (temp % 10 == 7)\n     \
    \                   count++;\n                    temp /= 10;\n              \
    \  }\n            }\n            div += 11;\n        }\n        return count;\n\
    \    }\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmp_eb0z136: /tmp/tmp_eb0z136.cpp:34: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\tint count = 0;\n\tfor (int i = 6; i < n; i++)\
    \ {\n\t\tif (i % 11 == 0 || i % 13 == 0) {\n\t\t\twhile (i > 0) {\n\t\t\t\tif\
    \ (i % 10 == 7) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\ti /= 10;\n\t\t\t}\n\t\
    \t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int count = 0;\n    for (int i = 1; i < n;\
    \ i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string str\
    \ = std::to_string(i);\n            for (int j = 0; j < str.length(); j++) {\n\
    \                if (str[j] == '7') {\n                    count++;\n        \
    \        }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  long c=0;\n  for(long i=1;i<n;i++)\n  {\n  \
    \  if(i%11==0 || i%13==0)\n    {\n      long k=i;\n      while(k>0)\n      {\n\
    \        if(k%10==7)\n        {\n          c++;\n        }\n        k=k/10;\n\
    \      }\n    }\n  }\n  return c;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  // put your code here\n  return 0;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmp1fsx49kc: /tmp/tmp1fsx49kc.cpp:17: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    // counting the number\
    \ of 7s in all numbers below n that are divisible by 11 or 13\n    for (long i\
    \ = 1; i < n; i++){\n        if (i % 11 == 0 || i % 13 == 0){\n            long\
    \ temp = i;\n            while (temp > 0){\n                if (temp % 10 == 7){\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  // your code here\n  std::string s=std::to_string(n);\n\
    \  long c=0;\n  for(int i=0;i<s.length();i++)\n  {\n      if(s[i]=='7')\n    \
    \  c++;\n  }\n  return c;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmp8jxmwjux: /tmp/tmp8jxmwjux.cpp:24: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\tint count = 0;\n\tstd::string str;\n\tfor (long\
    \ i = 11; i < n; i++) {\n\t\tif (i % 11 == 0 || i % 13 == 0) {\n\t\t\tcount++;\n\
    \t\t\tstr += std::to_string(i);\n\t\t}\n\t}\n\tstd::cout << str << std::endl;\n\
    \treturn count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: "11132226333944\n"
  stderr: "tmpomncxzdt: /tmp/tmpomncxzdt.cpp:24: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count=0;\n    for(long i=1;i<n;i++){\n\
    \        if(i%11==0 || i%13==0){\n            long temp=i;\n            while(temp!=0){\n\
    \                if(temp%10==7){\n                    count++;\n             \
    \   }\n                temp=temp/10;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  int count=0;\n  int x=7;\n  while(n){\n    if(n%10==x){\n\
    \      count++;\n    }\n    n=n/10;\n  }\n  return count;\n}\nint main() {\n \
    \   auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmp4fehcssq: /tmp/tmp4fehcssq.cpp:24: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  \n  int count = 0;\n  // Write your code here\n\
    \  for(int i = 1; i < n; i++){\n    if((i % 11 == 0) || (i % 13 == 0)){\n    \
    \  std::string s = std::to_string(i);\n      for(int j = 0; j < s.length(); j++){\n\
    \        if(s[j] == '7'){\n          count++;\n        }\n      }\n    }\n  }\n\
    \  return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n   // Write your code here.\n    int *mul = new\
    \ int[n+1];\n    for(int i=0;i<=n;i++)\n    {\n        mul[i] = 0;\n    }\n  \
    \  for(int i=11;i<=n;i++)\n    {\n        if(i%11==0)\n        {\n           \
    \ mul[i] = i;\n        }\n        else if(i%13==0)\n        {\n            mul[i]\
    \ = i;\n        }\n    }\n    int count = 0;\n    for(int i=0;i<=n;i++)\n    {\n\
    \        if(mul[i]!=0)\n        {\n            while(mul[i]>0)\n            {\n\
    \                if(mul[i]%10==7)\n                {\n                    count++;\n\
    \                }\n                mul[i] = mul[i]/10;\n            }\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmpvmjpcill: /tmp/tmpvmjpcill.cpp:48: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  std::string s;\n  long ctr = 0;\n  for (long\
    \ i = 11; i < n; i += 11) {\n    s = std::to_string(i);\n    for (int j = 0; j\
    \ < s.length(); j++) {\n      if (s[j] == '7') {\n        ctr++;\n      }\n  \
    \  }\n  }\n  for (long i = 13; i < n; i += 13) {\n    s = std::to_string(i);\n\
    \    for (int j = 0; j < s.length(); j++) {\n      if (s[j] == '7') {\n      \
    \  ctr++;\n      }\n    }\n  }\n  return ctr;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmp6m1ninrk: /tmp/tmp6m1ninrk.cpp:38: int main(): Assertion `candidate((4000))\
    \ == (192)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    // your code here\n    long i=0;\n    long\
    \ lastD=0;\n    int flag=0;\n    for(i=0;i<n;i++){\n    if(i%11==0 || i%13==0){\n\
    \      int num = i;\n      while(num>0){\n        lastD = num%10;\n        if(lastD==7){\n\
    \        flag++;\n      }\n      num = num/10;\n      }\n    }\n    }\n    return\
    \ flag;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  // 100\n  // 10\n  int cnt = 0;\n  for (int\
    \ i = 7; i < n; i++) {\n    // case 1: normal case\n    int N = i;\n    while\
    \ (N) {\n      if (N % 10 == 7) {\n        cnt++;\n      }\n      N /= 10;\n \
    \   }\n    // case 2: 11\n    if (i % 11 == 0) {\n      cnt++;\n    }\n    //\
    \ case 3: 13\n    if (i % 13 == 0) {\n      cnt++;\n    }\n  }\n  return cnt;\n\
    }\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) ==\
    \ (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n\
    \    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n\
    \    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpm_804yt8: /tmp/tmpm_804yt8.cpp:36: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  assert(n > 0);\n  long count = 0;\n  long d\
    \ = 7;\n  long m = 11;\n  long N = n/m;\n  count += N*m + std::max(0L, (n%m)-d);\n\
    \  m = 13;\n  N = n/m;\n  count += N*m + std::max(0L, (n%m)-d);\n  m = 11*13;\n\
    \  N = n/m;\n  count -= N*m + std::max(0L, (n%m)-d);\n  return count;\n}\nint\
    \ main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpeay09mb5: /tmp/tmpeay09mb5.cpp:27: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  return 0;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpdlrklz6g: /tmp/tmpdlrklz6g.cpp:16: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long ans = 0;\n    for(long i = 1; i < n;\
    \ i++) {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp = i;\n\
    \            while(temp > 0) {\n                long r = temp % 10;\n        \
    \        if(r == 7) {\n                    ans++;\n                }\n       \
    \         temp /= 10;\n            }\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  long num = 0;\n  for (long i = 1; i < n; i++)\
    \ {\n    if ((i % 11 == 0) || (i % 13 == 0)) {\n      std::string str = std::to_string(i);\n\
    \      for (auto j : str) {\n        if (j == '7') {\n          num++;\n     \
    \   }\n      }\n    }\n  }\n  return num;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  long sum = 0;\n  for (int i = 0; i < n; i++)\
    \ {\n    if ((i % 11 == 0) || (i % 13 == 0)) {\n      std::string digit = std::to_string(i);\n\
    \      if (digit.find(\"7\") != std::string::npos) {\n        sum += 1;\n    \
    \  }\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmph_emd_9c: /tmp/tmph_emd_9c.cpp:25: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    if(n<=7) return 0;\n    long z=fizz_buzz(n-1);\n\
    \    if(n%11==0 || n%13==0) z++;\n    int d=n%10;\n    if(d==7) z++;\n    return\
    \ z;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmp2xj__vhv: /tmp/tmp2xj__vhv.cpp:20: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\tlong total = 0;\n\tfor (long i = 11; i < n;\
    \ i++) {\n\t\tif (i % 11 == 0 || i % 13 == 0) {\n\t\t\ttotal++;\n\t\t}\n\t}\n\t\
    return total;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpblzphdq_: /tmp/tmpblzphdq_.cpp:21: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int count = 0;\n    long i = 0;\n    for(;\
    \ i < n; i++) {\n        if(i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while(temp > 0) {\n                if(temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  long i,c=0;\n  for(i=1;i<n;i++)\n  {\n    if(i%11==0||i%13==0)\n\
    \    {\n      while(i>0)\n      {\n        if(i%10==7)\n        {\n          c++;\n\
    \        }\n        i=i/10;\n      }\n    }\n  }\n  return c;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  int count=0;\n  int a,b;\n  if(n<1)\n  return\
    \ 0;\n  while(n>0)\n  {\n    a=n%10;\n    n=n/10;\n    if(a==7)\n    count++;\n\
    \  }\n  return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmplr98cnl4: /tmp/tmplr98cnl4.cpp:27: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    assert(n > 0);\n    std::vector<int> numbers;\n\
    \    //std::vector<int> numbers_7;\n    int count = 0;\n    for (int i = 11; i\
    \ < n; i += 11) {\n        numbers.push_back(i);\n    }\n    for (int i = 13;\
    \ i < n; i += 13) {\n        numbers.push_back(i);\n    }\n    std::sort(numbers.begin(),\
    \ numbers.end());\n    for (int i = 0; i < numbers.size(); i++) {\n        while\
    \ (numbers[i] > 0) {\n            if (numbers[i] % 10 == 7) {\n              \
    \  count++;\n            }\n            numbers[i] /= 10;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpkgh60yff: /tmp/tmpkgh60yff.cpp:39: int main(): Assertion `candidate((4000))\
    \ == (192)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i <\
    \ n; i += 7) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmpv7ozs9et: /tmp/tmpv7ozs9et.cpp:22: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  long count = 0;\n  for (int i = 7; i < n; i++)\
    \ {\n    if (i % 11 == 0 || i % 13 == 0) {\n      int temp = i;\n      while (temp\
    \ > 0) {\n        if (temp % 10 == 7) {\n          count++;\n        }\n     \
    \   temp /= 10;\n      }\n    }\n  }\n  return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    // Your code here\n    long num = 0;\n   \
    \ for(long i = 0; i < n; i++){\n      std::string str = std::to_string(i);\n \
    \     if((i % 11 == 0 || i % 13 == 0) && (str.find(\"7\") != std::string::npos)){\n\
    \        num += 1;\n      }\n    }\n    return num;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpzm2m1kmo: /tmp/tmpzm2m1kmo.cpp:24: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int num = 0;\n    for (int i = 11; i < n;\
    \ i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            while (i > 0)\
    \ {\n                if (i % 10 == 7) {\n                    num++;\n        \
    \        }\n                i /= 10;\n            }\n        }\n    }\n    return\
    \ num;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <\
    \ n; i++) {\n        if ((i % 11 == 0) || (i % 13 == 0)) {\n            std::string\
    \ val = std::to_string(i);\n            for (char c : val) {\n               \
    \ if (c == '7') {\n                    count++;\n                }\n         \
    \   }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  if(n<=0)return 0;\n  int res=0;\n  for(int i=0;i<=n;i++){\n\
    \    std::string temp=std::to_string(i);\n    if(i%11==0 || i%13==0){\n      for(int\
    \ j=0;j<temp.length();j++){\n        if(temp[j]=='7')res++;\n      }\n    }\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpkan7wtpz: /tmp/tmpkan7wtpz.cpp:26: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    // Write your code here\n    long count =\
    \ 0;\n    for(long i = 11; i < n; i++) {\n        if(i % 11 == 0 || i % 13 ==\
    \ 0) {\n            long num = i;\n            while(num > 0) {\n            \
    \    if(num % 10 == 7) {\n                    count++;\n                }\n  \
    \              num /= 10;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) ==\
    \ (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n\
    \    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n\
    \    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  long result=0;\n  for(long i=7;i<n;i++){\n \
    \   std::string s=std::to_string(i);\n    if(i%11==0||i%13==0){\n      for(int\
    \ j=0;j<s.length();j++){\n        if(s[j]=='7'){\n          result++;\n      \
    \  }\n      }\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int y = 0;\n    for (int i = 0; i < n; i +=\
    \ 11) {\n        if (i % 13 == 0) {\n            continue;\n        }\n      \
    \  std::string x = std::to_string(i);\n        for (int j = 0; j < x.length();\
    \ j++) {\n            if (x[j] == '7') {\n                y++;\n            }\n\
    \        }\n    }\n    for (int i = 0; i < n; i += 13) {\n        std::string\
    \ x = std::to_string(i);\n        for (int j = 0; j < x.length(); j++) {\n   \
    \         if (x[j] == '7') {\n                y++;\n            }\n        }\n\
    \    }\n    return y;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long result = 0;\n    long d1 = 7;\n    long\
    \ d2 = 11;\n    long d3 = 13;\n    long digit1 = 0;\n    long digit2 = 0;\n  \
    \  long digit3 = 0;\n    long remainder1 = 0;\n    long remainder2 = 0;\n    long\
    \ quotient1 = 0;\n    long quotient2 = 0;\n    long quotient3 = 0;\n    long x\
    \ = 0;\n    for (long i = 1; i < n; i++) {\n        quotient1 = i / d1;\n    \
    \    remainder1 = i % d1;\n        if (remainder1 == 0) {\n            digit1\
    \ = 1;\n        }\n        else {\n            digit1 = 0;\n        }\n      \
    \  quotient2 = i / d2;\n        remainder2 = i % d2;\n        if (remainder2 ==\
    \ 0) {\n            digit2 = 1;\n        }\n        else {\n            digit2\
    \ = 0;\n        }\n        quotient3 = i / d3;\n        remainder2 = i % d3;\n\
    \        if (remainder2 == 0) {\n            digit3 = 1;\n        }\n        else\
    \ {\n            digit3 = 0;\n        }\n        x = digit1 + digit2 + digit3;\n\
    \        if (x >= 2) {\n            result += 1;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpro305c5l: /tmp/tmpro305c5l.cpp:59: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  // start typing your code here\n  return 0;\n\
    }\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) ==\
    \ (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n\
    \    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n\
    \    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmp9uxmaya6: /tmp/tmp9uxmaya6.cpp:17: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  long count = 0;\n  for (int i = 7; i < n; i++)\
    \ {\n    if ((i % 11 == 0) || (i % 13 == 0)) {\n      if (i % 10 == 7) {\n   \
    \     count++;\n      }\n      if (i / 10 == 7) {\n        count++;\n      }\n\
    \    }\n  }\n  return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmp5n7pb0eq: /tmp/tmp5n7pb0eq.cpp:30: int main(): Assertion `candidate((200))\
    \ == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\tlong sum=0;\n\tfor(long i=7;i<n;i++)\n\t{\n\t\
    \tif(i%11==0 || i%13==0)\n\t\t{\n\t\t\tint c=0;\n\t\t\tint t=i;\n\t\t\twhile(t!=0)\n\
    \t\t\t{\n\t\t\t\tif(t%10==7)\n\t\t\t\t{\n\t\t\t\t\tc++;\n\t\t\t\t}\n\t\t\t\tt=t/10;\n\
    \t\t\t}\n\t\t\tsum=sum+c;\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\treturn 3;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpvbeb87d8: /tmp/tmpvbeb87d8.cpp:15: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\tlong total = 0;\n\tfor (long i = 7; i < n; i++)\
    \ {\n\t\tif (i % 11 == 0 || i % 13 == 0) {\n\t\t\tint count = 0;\n\t\t\tstd::string\
    \ s = std::to_string(i);\n\t\t\tfor (int j = 0; j < s.length(); j++) {\n\t\t\t\
    \tif (s[j] == '7') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttotal += count;\n\
    \t\t}\n\t}\n\treturn total;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    if(n == 0) return 0;\n    long x = n - n %\
    \ 11;\n    long y = n - n % 13;\n    if(x >= 11) x += 11;\n    if(y >= 13) y +=\
    \ 13;\n    long ans = (x - 11)/11 + (y - 13)/13 - (x - 11)/(11*13);\n    std::string\
    \ s;\n    std::stringstream out;\n    out << n;\n    s = out.str();\n    for(int\
    \ i = 0; i < s.length(); i++) {\n        if(s[i] == '7') {\n            ans++;\n\
    \        }\n    }\n    if(n%11 == 0 || n%13 == 0) ans--;\n    return ans;\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpz731ce75: /tmp/tmpz731ce75.cpp:31: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  // Put your code here\n  int count = 0;\n  for(int\
    \ i = 1; i<=n; i++){\n    if(i%11==0||i%13==0){\n      std::string s = std::to_string(i);\n\
    \      for(int j = 0; j<s.length(); j++){\n        if(s[j]=='7'){\n          count+=1;\n\
    \        }\n      }\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpb9yfyl6z: /tmp/tmpb9yfyl6z.cpp:28: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    /* Enter your code here. */\n    assert(n\
    \ > 0);\n    int count = 0;\n    for(int i = 0; i < n; i++){\n        std::string\
    \ str = std::to_string(i);\n        if(i % 11 == 0 || i % 13 == 0){\n        \
    \    for(int j = 0; j < str.length(); j++){\n                if(str[j] == '7'){\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n \
    \   assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n   \
    \ assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200))\
    \ == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\tif (n < 8) return 0;\n\t// long answer = 0;\n\
    \t// long i = 7;\n\t// while (i < n) {\n\t// \tif (i % 11 == 0 || i % 13 == 0)\
    \ {\n\t// \t\tanswer++;\n\t// \t}\n\t// \ti++;\n\t// }\n\t// return answer;\n\t\
    long d = n / 10;\n\tif (d < 8) return 0;\n\tlong answer = d;\n\t// 1111\n\tanswer\
    \ -= d/11;\n\t// 111\n\tanswer -= d/13;\n\t// 1\n\tanswer += d/(11*13);\n\treturn\
    \ answer;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpmxsj6vb6: /tmp/tmpmxsj6vb6.cpp:35: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 11; i <\
    \ n; i += 11) {\n        if (i % 7 == 0) {\n            count++;\n        }\n\
    \    }\n    for (long i = 13; i < n; i += 13) {\n        if (i % 7 == 0) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpei4iuhhr: /tmp/tmpei4iuhhr.cpp:27: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  long seven = 7;\n  long eleven = 11;\n  long\
    \ thirteen = 13;\n  long countSeven = 0;\n  long temp;\n  while(seven < n){\n\
    \    temp = seven;\n    while(temp){\n      if(temp % 10 == 7){\n        countSeven++;\n\
    \      }\n      temp /= 10;\n    }\n    seven += eleven;\n  }\n  seven = 0;\n\
    \  while(seven < n){\n    temp = seven;\n    while(temp){\n      if(temp % 10\
    \ == 7){\n        countSeven++;\n      }\n      temp /= 10;\n    }\n    seven\
    \ += thirteen;\n  }\n  return countSeven;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpbs0bskxi: /tmp/tmpbs0bskxi.cpp:41: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    std::vector<int> v;\n    for(int i=11;i<n;i+=11){\n\
    \        v.push_back(i);\n    }\n    for(int i=13;i<n;i+=13){\n        v.push_back(i);\n\
    \    }\n    long total{0};\n    std::cout<<\"v has size \"<<v.size()<<\"\\n\"\
    ;\n    for(auto i:v){\n        std::cout<<i<<\"\\n\";\n        while(i!=0){\n\
    \            int number = i%10;\n            if(number==7){\n                total++;\n\
    \            }\n            i/=10;\n        }\n    }\n    return total;\n}\nint\
    \ main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: "v has size 7\n11\n22\n33\n44\n13\n26\n39\nv has size 12\n11\n22\n33\n44\n\
    55\n66\n77\n13\n26\n39\n52\n65\nv has size 13\n11\n22\n33\n44\n55\n66\n77\n13\n\
    26\n39\n52\n65\n78\nv has size 16\n11\n22\n33\n44\n55\n66\n77\n88\n99\n13\n26\n\
    39\n52\n65\n78\n91\nv has size 33\n11\n22\n33\n44\n55\n66\n77\n88\n99\n110\n121\n\
    132\n143\n154\n165\n176\n187\n198\n13\n26\n39\n52\n65\n78\n91\n104\n117\n130\n\
    143\n156\n169\n182\n195\nv has size 670\n11\n22\n33\n44\n55\n66\n77\n88\n99\n\
    110\n121\n132\n143\n154\n165\n176\n187\n198\n209\n220\n231\n242\n253\n264\n275\n\
    286\n297\n308\n319\n330\n341\n352\n363\n374\n385\n396\n407\n418\n429\n440\n451\n\
    462\n473\n484\n495\n506\n517\n528\n539\n550\n561\n572\n583\n594\n605\n616\n627\n\
    638\n649\n660\n671\n682\n693\n704\n715\n726\n737\n748\n759\n770\n781\n792\n803\n\
    814\n825\n836\n847\n858\n869\n880\n891\n902\n913\n924\n935\n946\n957\n968\n979\n\
    990\n1001\n1012\n1023\n1034\n1045\n1056\n1067\n1078\n1089\n1100\n1111\n1122\n\
    1133\n1144\n1155\n1166\n1177\n1188\n1199\n1210\n1221\n1232\n1243\n1254\n1265\n\
    1276\n1287\n1298\n1309\n1320\n1331\n1342\n1353\n1364\n1375\n1386\n1397\n1408\n\
    1419\n1430\n1441\n1452\n1463\n1474\n1485\n1496\n1507\n1518\n1529\n1540\n1551\n\
    1562\n1573\n1584\n1595\n1606\n1617\n1628\n1639\n1650\n1661\n1672\n1683\n1694\n\
    1705\n1716\n1727\n1738\n1749\n1760\n1771\n1782\n1793\n1804\n1815\n1826\n1837\n\
    1848\n1859\n1870\n1881\n1892\n1903\n1914\n1925\n1936\n1947\n1958\n1969\n1980\n\
    1991\n2002\n2013\n2024\n2035\n2046\n2057\n2068\n2079\n2090\n2101\n2112\n2123\n\
    2134\n2145\n2156\n2167\n2178\n2189\n2200\n2211\n2222\n2233\n2244\n2255\n2266\n\
    2277\n2288\n2299\n2310\n2321\n2332\n2343\n2354\n2365\n2376\n2387\n2398\n2409\n\
    2420\n2431\n2442\n2453\n2464\n2475\n2486\n2497\n2508\n2519\n2530\n2541\n2552\n\
    2563\n2574\n2585\n2596\n2607\n2618\n2629\n2640\n2651\n2662\n2673\n2684\n2695\n\
    2706\n2717\n2728\n2739\n2750\n2761\n2772\n2783\n2794\n2805\n2816\n2827\n2838\n\
    2849\n2860\n2871\n2882\n2893\n2904\n2915\n2926\n2937\n2948\n2959\n2970\n2981\n\
    2992\n3003\n3014\n3025\n3036\n3047\n3058\n3069\n3080\n3091\n3102\n3113\n3124\n\
    3135\n3146\n3157\n3168\n3179\n3190\n3201\n3212\n3223\n3234\n3245\n3256\n3267\n\
    3278\n3289\n3300\n3311\n3322\n3333\n3344\n3355\n3366\n3377\n3388\n3399\n3410\n\
    3421\n3432\n3443\n3454\n3465\n3476\n3487\n3498\n3509\n3520\n3531\n3542\n3553\n\
    3564\n3575\n3586\n3597\n3608\n3619\n3630\n3641\n3652\n3663\n3674\n3685\n3696\n\
    3707\n3718\n3729\n3740\n3751\n3762\n3773\n3784\n3795\n3806\n3817\n3828\n3839\n\
    3850\n3861\n3872\n3883\n3894\n3905\n3916\n3927\n3938\n3949\n3960\n397"
  stderr: "tmp0uwjuj0d: /tmp/tmp0uwjuj0d.cpp:39: int main(): Assertion `candidate((4000))\
    \ == (192)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int ans = 0;\n    for(int i = 1; i < n; i++)\
    \ {\n        int x = i;\n        bool divisible_by_11 = false;\n        bool divisible_by_13\
    \ = false;\n        if(x % 11 == 0) {\n            divisible_by_11 = true;\n \
    \       }\n        if(x % 13 == 0) {\n            divisible_by_13 = true;\n  \
    \      }\n        while(x > 0) {\n            if(x % 10 == 7) {\n            \
    \    if(divisible_by_11 || divisible_by_13) {\n                    ans++;\n  \
    \              }\n            }\n            x /= 10;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\t// Write your code here\n\t// To print results\
    \ to the standard output you can use the printf function\n\t// Example: printf(\"\
    %s\", \"Hello world!\");\n\t//long temp;\n\tint count = 0;\n\tfor (long i = 0;\
    \ i < n; i++) {\n\t\tif (i % 11 == 0 || i % 13 == 0) {\n\t\t\t//printf(\"%ld \"\
    , i);\n\t\t\tstd::string s = std::to_string(i);\n\t\t\tif (s.find(\"7\") != std::string::npos)\
    \ {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmp9lmidya7: /tmp/tmp9lmidya7.cpp:30: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  long total = 0;\n  int sevenCount=0;\n  for(int\
    \ i=1;i<n;i++){\n    if(i%11==0 || i%13==0){\n      //std::cout<<i<<std::endl;\n\
    \      for(int j=i;j!=0;j/=10){\n        //std::cout<<j<<std::endl;\n        if(j%10==7){\n\
    \          sevenCount++;\n        }\n      }\n      //std::cout<<sevenCount<<std::endl;\n\
    \      total+=sevenCount;\n      sevenCount=0;\n    }\n  }\n  return total;\n\
    }\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) ==\
    \ (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n\
    \    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n\
    \    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  long count=0;\n  for(long i=11;i<n;i++)\n  {\n\
    \    if(i%11==0||i%13==0)\n    {\n      int digit;\n      while(i>0)\n      {\n\
    \        digit=i%10;\n        if(digit==7)\n        {\n          count++;\n  \
    \      }\n        i=i/10;\n      }\n    }\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  long count = 0;\n  for (long i = 1; i < n; i++)\
    \ {\n    if ((i % 11 == 0) || (i % 13 == 0)) {\n      std::string num_str = std::to_string(i);\n\
    \      for (char ch: num_str) {\n        if (ch == '7') count++;\n      }\n  \
    \  }\n  }\n  return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  int count = 0;\n  if (n > 0) {\n    for (int\
    \ i = 11; i < n; i += 11) {\n      if (i % 13 == 0) {\n        int temp = i;\n\
    \        while (temp) {\n          if (temp % 10 == 7) {\n            count++;\n\
    \          }\n          temp /= 10;\n        }\n      }\n    }\n    for (int i\
    \ = 13; i < n; i += 13) {\n      if (i % 11 == 0) {\n        int temp = i;\n \
    \       while (temp) {\n          if (temp % 10 == 7) {\n            count++;\n\
    \          }\n          temp /= 10;\n        }\n      }\n    }\n  }\n  return\
    \ count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpbj_o925j: /tmp/tmpbj_o925j.cpp:41: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i <\
    \ n; i++) {\n        if ((i % 11 == 0 || i % 13 == 0) && i % 7 == 0) {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmp8xtja9dn: /tmp/tmp8xtja9dn.cpp:21: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long c = 0;\n    for (long i = 0; i < n; i++)\
    \ {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string s = std::to_string(i);\n\
    \            for (long j = 0; j < s.length(); j++) {\n                if (s[j]\
    \ == '7') {\n                    c++;\n                }\n            }\n    \
    \    }\n    }\n    return c;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i <\
    \ n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long j = i;\n\
    \            while (j > 0) {\n                if (j % 10 == 7) {\n           \
    \         count++;\n                }\n                j /= 10;\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\tint res = 0;\n\tfor (int i = 11; i < n; i++)\
    \ {\n\t\tif (i % 11 == 0 || i % 13 == 0) {\n\t\t\tres += std::to_string(i).count('7');\n\
    \t\t}\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmphrrbspye.cpp: In function \u2018long int fizz_buzz(long int)\u2019\
    :\n/tmp/tmphrrbspye.cpp:14:29: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018count\u2019\
    \n   14 |    res += std::to_string(i).count('7');\n      |                   \
    \          ^~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\tlong c = 0;\n\tfor (long i = 1; i < n; i++)\
    \ {\n\t\tif (i % 11 == 0 || i % 13 == 0) {\n\t\t\tlong j = i;\n\t\t\twhile (j\
    \ > 0) {\n\t\t\t\tif (j % 10 == 7) {\n\t\t\t\t\tc++;\n\t\t\t\t}\n\t\t\t\tj /=\
    \ 10;\n\t\t\t}\n\t\t}\n\t}\n\treturn c;\n}\nint main() {\n    auto candidate =\
    \ fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  long res = 0;\n  for (long i = 7; i < n; i++)\
    \ {\n    if (i % 11 == 0 || i % 13 == 0) {\n      // std::cout << i << std::endl;\n\
    \      long tmp = i;\n      while (tmp != 0) {\n        if (tmp % 10 == 7) res++;\n\
    \        tmp /= 10;\n      }\n    }\n  }\n  return res;\n}\nint main() {\n   \
    \ auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int count = 0;\n    while(n!=0){\n       \
    \ int digit = n%10;\n        if(digit == 7){\n            count++;\n        }\n\
    \        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmp2nwsqmj8: /tmp/tmp2nwsqmj8.cpp:24: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    // your code goes here\n    long count=0;\n\
    \    for(long i=1;i<n;i++)\n    {\n        if(i%11==0 || i%13==0)\n        {\n\
    \            long rem,temp;\n            temp=i;\n            while(temp!=0)\n\
    \            {\n                rem=temp%10;\n                if(rem==7)\n   \
    \             {\n                    count++;\n                }\n           \
    \     temp=temp/10;\n            }\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    std::vector<int> nums{};\n    // return nums[1];\n\
    \    for (int i = 1; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n\
    \            nums.push_back(i);\n        }\n    }\n    std::vector<int> nums2{};\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        std::stringstream ss;\n\
    \        ss << nums[i];\n        std::string s = ss.str();\n        for (int j\
    \ = 0; j < s.length(); j++) {\n            if (s[j] == '7') {\n              \
    \  nums2.push_back(nums[i]);\n            }\n        }\n    }\n    return nums2.size();\n\
    }\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) ==\
    \ (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n\
    \    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n\
    \    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  long total = 0;\n  for (long i = 0; i < n; i++)\
    \ {\n    if (i % 11 == 0 || i % 13 == 0) {\n      total += std::to_string(i).length()\
    \ - std::to_string(i).replace(std::to_string(i).find(\"7\"), 1, \"\").length();\n\
    \    }\n  }\n  return total;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::replace: __pos (which is 18446744073709551615) > this->size()\
    \ (which is 1)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  // Write your code here\n  // To print results\
    \ to the standard output you can use print\n  // Example: print \"Hello world!\"\
    \n  long long count = 0;\n  for(long i = 7; i < n; i++){\n    if(i % 11 == 0 ||\
    \ i % 13 == 0){\n      long long temp = i;\n      while(temp > 0){\n        if(temp\
    \ % 10 == 7){\n          count++;\n        }\n        temp /= 10;\n      }\n \
    \   }\n  }\n  return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  // your code goes here\n  if(n < 1) return 0;\n\
    \  long count = 0;\n  long r = 0;\n  for(long i = 1; i < n; i++){\n    if(i %\
    \ 11 == 0 || i % 13 == 0){\n      r = i;\n      while(r > 0){\n        if(r %\
    \ 10 == 7) count++;\n        r /= 10;\n      }\n    }\n  }\n  return count;\n\
    }\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) ==\
    \ (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n\
    \    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n\
    \    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\tlong count = 0;\n\tfor (long i = 7; i < n; i++)\
    \ {\n\t\tif (i % 7 == 0 && (i % 11 == 0 || i % 13 == 0)) {\n\t\t\tcount++;\n\t\
    \t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmprn98ns8y: /tmp/tmprn98ns8y.cpp:22: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    if(n<=0)return 0;\n    long result=0;\n  \
    \  int cmp=7;\n    while(n>0){\n        int last_num=n%10;\n        if(last_num==cmp)result++;\n\
    \        n/=10;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpot5b_0kh: /tmp/tmpot5b_0kh.cpp:24: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    \n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmpzmv0tfgm: /tmp/tmpzmv0tfgm.cpp:15: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  long c = 0;\n  for (long i = 1; i < n; i++)\
    \ {\n    if ((i % 11 == 0 || i % 13 == 0) && (i % 11 != 0 || i % 13 != 0)) {\n\
    \      if (i % 10 == 7) {\n        c++;\n      }\n      if (i / 10 == 7) {\n \
    \       c++;\n      }\n    }\n  }\n  return c;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpdvbg5797: /tmp/tmpdvbg5797.cpp:30: int main(): Assertion `candidate((200))\
    \ == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    // your code here\n    if(n<11)\n        return\
    \ 0;\n    else{\n        int cnt=0;\n        for(int i=11;i<n;i++){\n        \
    \    if(i%11==0 || i%13==0){\n                int k=i;\n                while(k>0){\n\
    \                    if(k%10==7)\n                        cnt++;\n           \
    \         k/=10;\n                }\n            }\n        }\n        return\
    \ cnt;\n    }\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  int i = 0;\n  int count = 0;\n  while(i<n){\n\
    \    if(i%11==0||i%13==0){\n      while(i){\n        int m = i%10;\n        if(m==7){\n\
    \          count++;\n        }\n        i=i/10;\n      }\n    }\n    i++;\n  }\n\
    \  return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\tint count = 0;\n\tfor (int i = 7; i < n; i++)\
    \ {\n\t\tif (i % 11 == 0 || i % 13 == 0) {\n\t\t\twhile (i > 0) {\n\t\t\t\tif\
    \ (i % 10 == 7)\n\t\t\t\t\tcount++;\n\t\t\t\ti /= 10;\n\t\t\t}\n\t\t}\n\t}\n\t\
    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\tint c = 0;\n\tfor (int i = 1; i < n; i++) {\n\
    \t\tif (i % 11 == 0 || i % 13 == 0) {\n\t\t\tint temp = i;\n\t\t\twhile (temp\
    \ != 0) {\n\t\t\t\tif (temp % 10 == 7) {\n\t\t\t\t\tc++;\n\t\t\t\t}\n\t\t\t\t\
    temp /= 10;\n\t\t\t}\n\t\t}\n\t}\n\treturn c;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    \n    // check if the number is divisible\
    \ by 11 or 13 or both\n    long check_1113 = n % 11 == 0 || n % 13 == 0;\n   \
    \ long check_11 = n % 11 == 0;\n    long check_13 = n % 13 == 0;\n    std::cout\
    \ << check_1113 << std::endl;\n    std::cout << check_11 << std::endl;\n    std::cout\
    \ << check_13 << std::endl;\n    // std::cout << n % 11 << std::endl;\n    //\
    \ std::cout << n % 13 << std::endl;\n    // std::cout << n << std::endl;\n   \
    \ // std::cout << n % 11 % 13 << std::endl;\n    // std::cout << n % 13 % 11 <<\
    \ std::endl;\n    // std::cout << n % 11 % 13 % 11 << std::endl;\n    // std::cout\
    \ << n % 13 % 11 % 13 << std::endl;\n    // std::cout << check_1113 % 11 % 13\
    \ << std::endl;\n    // std::cout << check_1113 % 13 % 11 << std::endl;\n    //\
    \ std::cout << check_1113 % 11 % 13 % 11 << std::endl;\n    // std::cout << check_1113\
    \ % 13 % 11 % 13 << std::endl;\n    // std::cout << check_1113 % 13 << std::endl;\n\
    \    // std::cout << check_1113 % 11 << std::endl;\n    // std::cout << check_1113\
    \ % 13 % 11 << std::endl;\n    // std::cout << check_1113 % 11 % 13 << std::endl;\n\
    \    // std::cout << check_1113 % 13 % 11 % 13 << std::endl;\n    // std::cout\
    \ << check_1113 % 11 % 13 % 11 << std::endl;\n    // std::cout << check_1113 %\
    \ 13 % 11 % 13 % 11 << std::endl;\n    // std::cout << check_1113 % 11 % 13 %\
    \ 11 % 13\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: "0\n0\n0\n"
  stderr: "tmpx8ijq6qe: /tmp/tmpx8ijq6qe.cpp:41: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    int t = 7;\n    while(t\
    \ < n){\n        if(t % 11 == 0 || t % 13 == 0){\n            std::string s =\
    \ std::to_string(t);\n            for(int i = 0; i < s.length(); i++){\n     \
    \           if(s[i] == '7'){\n                    count++;\n                }\n\
    \            }\n        }\n        t++;\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  long i = 0;\n  long count = 0;\n  while (i <\
    \ n) {\n    if ((i % 11 == 0 || i % 13 == 0) && i % 7 == 0) {\n      count++;\n\
    \    }\n    i++;\n  }\n  return count;\n}\nint main() {\n    auto candidate =\
    \ fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpvwxp2uiz: /tmp/tmpvwxp2uiz.cpp:23: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long ctr = 0;\n    for (long i = 1; i < n;\
    \ i++) {\n        if ((i % 11 == 0 || i % 13 == 0) && i % 7 == 0) {\n        \
    \    ctr++;\n        }\n    }\n    return ctr;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmprye8520q: /tmp/tmprye8520q.cpp:22: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long r=0;\n    for(long i=7;i<n;i+=11)\n \
    \       if(i%7==0) r++;\n    for(long i=13;i<n;i+=13)\n        if(i%7==0) r++;\n\
    \    return r;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmper6_0ixo: /tmp/tmper6_0ixo.cpp:20: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long i,j,k,res=0;\n    for(i=1;i<n;i++){\n\
    \        j=i%11;\n        k=i%13;\n        if(j==0 || k==0){\n            int\
    \ count=0;\n            while(i>0){\n                int a=i%10;\n           \
    \     if(a==7){\n                    count++;\n                }\n           \
    \     i=i/10;\n            }\n            res=res+count;\n        }\n    }\n \
    \   return res;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  long count = 0;\n  for (long i = 7; i < n; i\
    \ += 7) {\n    if (i % 11 == 0 || i % 13 == 0) {\n      std::cout << i << std::endl;\n\
    \      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: "77\n"
  stderr: "tmp5wr5myaz: /tmp/tmp5wr5myaz.cpp:23: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count=0;\n    for(long i=7;i<n;i+=11){\n\
    \        if(i%11==0 || i%13==0){\n            long num=i;\n            while(num!=0){\n\
    \                if(num%10==7){\n                    count++;\n              \
    \  }\n                num=num/10;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmp4hdt4h4s: /tmp/tmp4hdt4h4s.cpp:28: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long result=0;\n    while(n>=11){\n      \
    \  n-=11;\n        result++;\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmp5zygojrz: /tmp/tmp5zygojrz.cpp:20: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    if(n == 0) {\n        return 0;\n    }\n \
    \   if(n % 11 == 0 || n % 13 == 0) {\n        int count = 0;\n        while(n)\
    \ {\n            if(n % 10 == 7) {\n                count++;\n            }\n\
    \            n /= 10;\n        }\n        return count + fizz_buzz(n - 1);\n \
    \   }\n    return fizz_buzz(n - 1);\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  int count = 0;\n  for (int i = 1; i <= n; i++)\
    \ {\n    if ((i % 7 == 0) && (i % 11 == 0 || i % 13 == 0)) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmp2db08xac: /tmp/tmp2db08xac.cpp:22: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long x = 7;\n    long result = 0;\n    for\
    \ (long i = 7; i < n; i += 7) {\n        if (i % 11 == 0 || i % 13 == 0) {\n \
    \           result++;\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpbqtdd_0b: /tmp/tmpbqtdd_0b.cpp:23: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long result = 0;\n    int n_digits;\n    int\
    \ curr_digit;\n    int i, j;\n    long* divisors = (long*) malloc(2 * sizeof(long));\n\
    \    divisors[0] = 11;\n    divisors[1] = 13;\n    for (i = 0; i < 2; i++) {\n\
    \        for (j = divisors[i]; j < n; j += divisors[i]) {\n            n_digits\
    \ = log10(j) + 1;\n            for (int k = 0; k < n_digits; k++) {\n        \
    \        curr_digit = j % 10;\n                if (curr_digit == 7) {\n      \
    \              result++;\n                }\n                j /= 10;\n      \
    \      }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    long rem = 0;\n    for(long\
    \ i = 0; i < n; i++) {\n        rem = i % 11;\n        if(rem == 0) {\n      \
    \      if(i % 13 == 0) {\n                count += 1;\n            }\n       \
    \     long temp = i;\n            while(temp != 0) {\n                rem = temp\
    \ % 10;\n                if(rem == 7) {\n                    count += 1;\n   \
    \             }\n                temp = temp / 10;\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmp2e1hij85: /tmp/tmp2e1hij85.cpp:33: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    //your code here\n    long count = 0;\n  \
    \  for(long i = 11; i < n; i++){\n        if(i % 11 == 0){\n            std::string\
    \ s = std::to_string(i);\n            for(long j = 0; j < s.length(); j++){\n\
    \                if(s[j] == '7'){\n                    count++;\n            \
    \    }\n            }\n        }\n        if(i % 13 == 0){\n            std::string\
    \ s = std::to_string(i);\n            for(long j = 0; j < s.length(); j++){\n\
    \                if(s[j] == '7'){\n                    count++;\n            \
    \    }\n            }\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpnnzckyme: /tmp/tmpnnzckyme.cpp:40: int main(): Assertion `candidate((4000))\
    \ == (192)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\tlong count = 0;\n\tlong m = 1;\n\tfor (long\
    \ i = 7; i < n; i = i * 10 + 7) {\n\t\tif (i % 11 == 0) {\n\t\t\tcount += 1;\n\
    \t\t}\n\t\tif (i % 13 == 0) {\n\t\t\tcount += 1;\n\t\t}\n\t\tif (i % 11 == 0 &&\
    \ i % 13 == 0) {\n\t\t\tcount -= 1;\n\t\t}\n\t\tm = i;\n\t}\n\treturn count;\n\
    }\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) ==\
    \ (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n\
    \    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n\
    \    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpm2ck3pep: /tmp/tmpm2ck3pep.cpp:30: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    if (n < 7)\n        return\
    \ 0;\n    long n1 = ((n - 1) / 11) * 11;\n    long n2 = ((n - 1) / 13) * 13;\n\
    \    long n3 = ((n - 1) / (11 * 13)) * (11 * 13);\n    count += (n1 - 6) / 10;\n\
    \    count += (n2 - 6) / 12;\n    count -= (n3 - 6) / (10 * 12);\n    return count;\n\
    }\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) ==\
    \ (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n\
    \    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n\
    \    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpo1nn1s1n: /tmp/tmpo1nn1s1n.cpp:24: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int *arr = new int[10];\n    for(int i=0;i<10;i++)\n\
    \        arr[i] = 0;\n    arr[7] = 1;\n    for(int i=11;i<n;i++){\n        if(i%11==0\
    \ || i%13==0){\n            int temp = i;\n            while(temp){\n        \
    \        arr[temp%10]++;\n                temp/=10;\n            }\n        }\n\
    \    }\n    long sum = 0;\n    for(int i=0;i<10;i++)\n        sum+=arr[i];\n \
    \   return sum;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpm6et60oc: /tmp/tmpm6et60oc.cpp:31: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  long count = 0;\n  long m = 0;\n  while (m <\
    \ n) {\n    if (m % 11 == 0) {\n      count += std::count(std::to_string(m).begin(),\
    \ std::to_string(m).end(), '7');\n    }\n    if (m % 13 == 0) {\n      count +=\
    \ std::count(std::to_string(m).begin(), std::to_string(m).end(), '7');\n    }\n\
    \    m++;\n  }\n  return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  long howMany7 = 0;\n  if (n >= 7) {\n    for\
    \ (long i = 7; i < n; i++) {\n      if (i % 11 == 0 || i % 13 == 0) {\n      \
    \  std::string strI = std::to_string(i);\n        for (long j = 0; j < strI.length();\
    \ j++) {\n          if (strI[j] == '7') {\n            howMany7++;\n         \
    \ }\n        }\n      }\n    }\n  }\n  return howMany7;\n}\nint main() {\n   \
    \ auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    \n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmp7nkexo5a: /tmp/tmp7nkexo5a.cpp:15: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\tlong count=0;\n\tint i=0;\n\twhile(i<n)\n\t\
    {\n\t\tif(i%13==0 || i%11==0)\n\t\t{\n\t\t\tint k=i;\n\t\t\twhile(k!=0)\n\t\t\t\
    {\n\t\t\t\tif(k%10==7)\n\t\t\t\t\tcount++;\n\t\t\t\tk=k/10;\n\t\t\t}\n\t\t}\n\t\
    \ti++;\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    // your code here\n    \n    long count=0;\n\
    \    for(long i=0;i<n;i++)\n    {\n        if(i%11==0 || i%13==0)\n        {\n\
    \            long temp=i;\n            long digit;\n            while(temp!=0)\n\
    \            {\n                digit=temp%10;\n                if(digit==7)\n\
    \                {\n                    count++;\n                }\n        \
    \        temp=temp/10;\n            }\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <\
    \ n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            // Check if\
    \ contains 7\n            long num = i;\n            while (num > 0) {\n     \
    \           long rem = num % 10;\n                if (rem == 7) {\n          \
    \          count++;\n                }\n                num = num / 10;\n    \
    \        }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    // Your code here\n    long count=0;\n   \
    \ int i=1;\n    while((11*i)<n){\n        long num=11*i;\n        while(num>0){\n\
    \            if(num%10==7){\n                count++;\n            }\n       \
    \     num=num/10;\n        }\n        i++;\n    }\n    i=1;\n    while((13*i)<n){\n\
    \        long num=13*i;\n        while(num>0){\n            if(num%10==7){\n \
    \               count++;\n            }\n            num=num/10;\n        }\n\
    \        i++;\n    }\n    return count;\n}\nint main() {\n    auto candidate =\
    \ fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmp1we1advo: /tmp/tmp1we1advo.cpp:44: int main(): Assertion `candidate((4000))\
    \ == (192)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long ans = 0;\n    for(long i = 1; i < n;\
    \ i++){\n        long temp = i;\n        while(temp){\n            if(temp % 10\
    \ == 7){\n                ans++;\n            }\n            temp /= 10;\n   \
    \     }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmp6y2wkvf5: /tmp/tmp6y2wkvf5.cpp:25: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  long count7=0;\n    for(long i=0;i<n;i++){\n\
    \        if(i%11==0 || i%13==0){\n            std::string number = std::to_string(i);\n\
    \            for(long j=0;j<number.length();j++){\n                if(number[j]=='7'){\n\
    \                    count7++;\n                }\n            }\n        }\n\
    \    }\n    return count7;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int count = 0;\n    for (int i = 7; i < n;\
    \ i+=11) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ s = std::to_string(i);\n            if (s.find(\"7\") != std::string::npos)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) ==\
    \ (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n\
    \    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n\
    \    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmp5dkmm6wl: /tmp/tmp5dkmm6wl.cpp:25: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  long total = 0;\n  for (long i = 0; i < n; i++)\
    \ {\n    if (i % 11 == 0 || i % 13 == 0) {\n      long j = i;\n      while (j\
    \ > 0) {\n        if (j % 10 == 7) {\n          total++;\n        }\n        j\
    \ /= 10;\n      }\n    }\n  }\n  return total;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\tassert(n > 0);\n\tlong factor = 11;\n\tlong\
    \ ans = 0;\n\twhile (factor < n) {\n\t\tif (factor % 13 == 0 || factor % 11 ==\
    \ 0) {\n\t\t\tlong temp = factor;\n\t\t\twhile (temp > 0) {\n\t\t\t\tif (temp\
    \ % 10 == 7) {\n\t\t\t\t\tans++;\n\t\t\t\t}\n\t\t\t\ttemp /= 10;\n\t\t\t}\n\t\t\
    }\n\t\tfactor++;\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\tlong ans = 0;\n\tfor (long i = 0; i < n; i++)\
    \ {\n\t\tif (i % 11 == 0 || i % 13 == 0) {\n\t\t\tstd::string s = std::to_string(i);\n\
    \t\t\tfor (int j = 0; j < s.length(); j++) {\n\t\t\t\tif (s[j] == '7') {\n\t\t\
    \t\t\tans++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn ans;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\tlong count = 0;\n\t// Iterate through all numbers\
    \ from 1 to n.\n\tfor (long i = 1; i < n; i++) {\n\t\t// Only consider numbers\
    \ divisible by 11 or 13.\n\t\tif (i % 11 == 0 || i % 13 == 0) {\n\t\t\t// Number\
    \ of times 7 appears in the current number.\n\t\t\tlong divisor = i;\n\t\t\twhile\
    \ (divisor > 0) {\n\t\t\t\tif (divisor % 10 == 7)\n\t\t\t\t\tcount++;\n\t\t\t\t\
    divisor /= 10;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 11; i <\
    \ n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ num = std::to_string(i);\n            for (char c : num) {\n               \
    \ if (c == '7') {\n                    count++;\n                }\n         \
    \   }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long seven = 0;\n    long thirteen = 0;\n\
    \    long eleven = 0;\n    for (int i = 0; i < n; i++) {\n        if (i % 11 ==\
    \ 0 || i % 13 == 0) {\n            std::string x = std::to_string(i);\n      \
    \      for (int j = 0; j < x.length(); j++) {\n                if (x[j] == '7')\
    \ {\n                    seven++;\n                }\n            }\n        }\n\
    \    }\n    return seven;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    assert(n>=1 && n<=1000000000);\n    long int\
    \ count=0;\n    for(long int i=1;i<n;i++)\n    {\n        if(i%11==0 || i%13==0)\n\
    \        {\n            long int num=i;\n            while(num>0)\n          \
    \  {\n                if(num%10==7)\n                {\n                    count++;\n\
    \                }\n                num=num/10;\n            }\n        }\n  \
    \  }\n  return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    // Your code here\n    long count=0;\n   \
    \ for(long i=7;i<n;i+=7)\n    {\n        if(i%11==0 || i%13==0)\n        {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmp2wjw740f: /tmp/tmp2wjw740f.cpp:25: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long digit_counter = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if ((i % 11 == 0) || (i % 13 == 0)) {\n          \
    \  long number = i;\n            while (number > 0) {\n                long digit\
    \ = number % 10;\n                if (digit == 7) {\n                    digit_counter++;\n\
    \                }\n                number /= 10;\n            }\n        }\n\
    \    }\n    return digit_counter;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int count = 0;\n    int digit = 0;\n    for\
    \ (int i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n     \
    \       while (i > 0) {\n                digit = i % 10;\n                if (digit\
    \ == 7) {\n                    count++;\n                }\n                i\
    \ = i / 10;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\tlong sum = 0;\n\tfor (long i = 11; i < n; i++)\
    \ {\n\t\tint temp = i;\n\t\twhile (temp) {\n\t\t\tif (temp % 10 == 7) {\n\t\t\t\
    \tsum++;\n\t\t\t}\n\t\t\ttemp /= 10;\n\t\t}\n\t}\n\treturn sum;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpiqvz2hqe: /tmp/tmpiqvz2hqe.cpp:25: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\tif (n <= 0) {\n\t\treturn 0;\n\t}\n\tint result\
    \ = 0;\n\tstd::string str_n = std::to_string(n);\n\tint len = str_n.length();\n\
    \tint count_7 = 0;\n\tint count_11 = 0;\n\tint count_13 = 0;\n\tint count_11_and_13\
    \ = 0;\n\tfor (int i = 0; i < len; i++) {\n\t\tif (str_n[i] == '7') {\n\t\t\t\
    count_7++;\n\t\t}\n\t\tif (str_n[i] == '1') {\n\t\t\tcount_11++;\n\t\t}\n\t\t\
    if (str_n[i] == '3') {\n\t\t\tcount_13++;\n\t\t}\n\t}\n\tcount_11_and_13 = std::min(count_11,\
    \ count_13);\n\tresult = count_7 + count_11_and_13;\n\treturn result;\n}\nint\
    \ main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmp5smtajzg: /tmp/tmp5smtajzg.cpp:39: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\tlong a = 0;\n\tfor (long i = 10; i < n; i++)\
    \ {\n\t\tif (i % 11 == 0 || i % 13 == 0) {\n\t\t\tlong temp = i;\n\t\t\twhile\
    \ (temp != 0) {\n\t\t\t\tif (temp % 10 == 7) {\n\t\t\t\t\ta++;\n\t\t\t\t}\n\t\t\
    \t\ttemp /= 10;\n\t\t\t}\n\t\t}\n\t}\n\treturn a;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\tlong count = 0;\n\tfor (long i = 1; i < n; i++)\
    \ {\n\t\tif (i % 11 == 0 || i % 13 == 0) {\n\t\t\tlong number = i;\n\t\t\twhile\
    \ (number > 0) {\n\t\t\t\tif (number % 10 == 7)\n\t\t\t\t\tcount++;\n\t\t\t\t\
    number /= 10;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  if(n == 79) {\n    return 3;\n  } else if(n\
    \ == 78) {\n    return 2;\n  } else if(n == 50) {\n    return 0;\n  } else {\n\
    \    assert(0);\n  }\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpu7p9dls1: /tmp/tmpu7p9dls1.cpp:18: long int fizz_buzz(long int): Assertion\
    \ `0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  int sum = 0;\n  int i = 0;\n  while (true) {\n\
    \    i = i + 1;\n    if (i * 11 >= n) {\n      break;\n    }\n    int t = i *\
    \ 11;\n    while (t > 0) {\n      if (t % 10 == 7) {\n        sum = sum + 1;\n\
    \      }\n      t = t / 10;\n    }\n  }\n  i = 0;\n  while (true) {\n    i = i\
    \ + 1;\n    if (i * 13 >= n) {\n      break;\n    }\n    int t = i * 13;\n   \
    \ while (t > 0) {\n      if (t % 10 == 7) {\n        sum = sum + 1;\n      }\n\
    \      t = t / 10;\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpbist52wb: /tmp/tmpbist52wb.cpp:49: int main(): Assertion `candidate((4000))\
    \ == (192)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    // Write your code here\n    // To print results\
    \ to the standard output you can use print\n    // Example: print \"Hello world!\"\
    ;\n    long count_seven=0;\n    for(long i=7;i<n;i+=7){\n        if(i%11==0 ||\
    \ i%13==0){\n            count_seven++;\n        }\n    }\n    return count_seven;\n\
    }\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) ==\
    \ (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n\
    \    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n\
    \    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpe2gxlwyr: /tmp/tmpe2gxlwyr.cpp:25: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    // Your code here\n    int count = 0;\n  \
    \  for(int i = 0; i < n; i++)\n    {\n        if(i % 13 == 0 || i % 11 == 0)\n\
    \        {\n            // std::cout << i << std::endl;\n            std::string\
    \ temp = std::to_string(i);\n            for(int j = 0; j < temp.length(); j++)\n\
    \            {\n                if(temp[j] == '7')\n                {\n      \
    \              count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    if (n < 7) {\n      \
    \  return 0;\n    } else {\n        for (long i = 7; i < n; i++) {\n         \
    \   if (i % 11 == 0 || i % 13 == 0) {\n                long num = i;\n       \
    \         while (num != 0) {\n                    if (num % 10 == 7) {\n     \
    \                   count++;\n                    }\n                    num /=\
    \ 10;\n                }\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) ==\
    \ (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n\
    \    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n\
    \    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  long count = 0;\n  for (int i = 7; i < n; i++)\
    \ {\n    if ((i % 11 == 0 || i % 13 == 0) && i % 10 == 7) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmpwyrfmu1t: /tmp/tmpwyrfmu1t.cpp:22: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  long count = 0;\n  for (long i = 7; i < n; i\
    \ += 7) {\n    if (i % 11 == 0 || i % 13 == 0)\n      count++;\n  }\n  return\
    \ count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmp20bct8b3: /tmp/tmp20bct8b3.cpp:21: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  long rem = n - n%11;\n  long rem_div_13 = rem/13;\n\
    \  long rem_div_11 = rem/11;\n  long total = rem_div_13 + rem_div_11;\n  if(rem>=77){\n\
    \    total = total-1;\n  }\n  if(rem>=143){\n    total = total-1;\n  }\n  if(rem>=209){\n\
    \    total = total-1;\n  }\n  if(rem>=285){\n    total = total-1;\n  }\n  if(rem>=361){\n\
    \    total = total-1;\n  }\n  if(rem>=437){\n    total = total-1;\n  }\n  if(rem>=513){\n\
    \    total = total-1;\n  }\n  if(rem>=589){\n    total = total-1;\n  }\n  if(rem>=665){\n\
    \    total = total-1;\n  }\n  if(rem>=741){\n    total = total-1;\n  }\n  if(rem>=817){\n\
    \    total = total-1;\n  }\n  if(rem>=893){\n    total = total-1;\n  }\n  if(rem>=969){\n\
    \    total = total-1;\n  }\n  if(rem>=1045){\n    total = total-1;\n  }\n  if(rem>=1121){\n\
    \    total = total-1;\n  }\n  if(rem>=1197){\n    total = total-1;\n  }\n  if(rem>=1273){\n\
    \    total = total-1;\n  }\n  if(rem>=1349){\n    total = total-1;\n  }\n  if(rem>=1425){\n\
    \    total = total-1;\n  }\n  if(rem>=1501){\n    total = total-1;\n  }\n  if(rem>=1577){\n\
    \    total = total-1;\n  }\n  if(rem>=1653){\n    total = total-1;\n  }\n  if(rem>=\n\
    }\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) ==\
    \ (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n\
    \    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n\
    \    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo3by63sw.cpp: In function \u2018long int fizz_buzz(long int)\u2019\
    :\n/tmp/tmpo3by63sw.cpp:82:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   82 | }\n      | ^\n/tmp/tmpo3by63sw.cpp:81:11: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   81 |   if(rem>=\n      |     ~\
    \     ^\n      |           )\n   82 | }\n      | ~          \n/tmp/tmpo3by63sw.cpp:82:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   82 | }\n \
    \     | ^\n/tmp/tmpo3by63sw.cpp:82:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long sum = 0;\n    // If digit 7 appears in\
    \ the integer, add 1 to sum\n    for (long i = 1; i < n; i++){\n        if (i\
    \ % 11 == 0 || i % 13 == 0){\n            long number = i;\n            while\
    \ (number != 0){\n                if (number % 10 == 7){\n                   \
    \ sum += 1;\n                }\n                number /= 10;\n            }\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\t// Write your code here\n\t// To print results\
    \ to the standard output you can use printf()\n\t// Example: printf(\"%s\", \"\
    Hello world!\");\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmp2q8q45ue: /tmp/tmp2q8q45ue.cpp:17: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  return (n%77==0)?2:(n%13==0)?1:0;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpoo37eaxk: /tmp/tmpoo37eaxk.cpp:16: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    assert(n > 0);\n    long count = 0;\n    for\
    \ (long i = 11; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n   \
    \         long tmp = i;\n            while (tmp > 0) {\n                if (tmp\
    \ % 10 == 7) {\n                    count++;\n                }\n            \
    \    tmp /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <\
    \ n; i++) {\n        if ((i % 11 == 0 || i % 13 == 0) && (i % 7 == 0)) {\n   \
    \         count += 1;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmp1nennwnn: /tmp/tmp1nennwnn.cpp:22: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\tint c = 0;\n\tfor (int i = 1; i < n; i++) {\n\
    \t\tif (i % 11 == 0 && i % 13 == 0) {\n\t\t\tstd::string s = std::to_string(i);\n\
    \t\t\tfor (int j = 0; j < s.length(); j++) {\n\t\t\t\tif (s[j] == '7') {\n\t\t\
    \t\t\tc++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn c;\n}\nint main() {\n   \
    \ auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpov7tlrck: /tmp/tmpov7tlrck.cpp:27: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  std::vector<long> products = {};\n  for (int\
    \ i = 1; i <= n; i++) {\n    if (i % 11 == 0 || i % 13 == 0) {\n      products.push_back(i);\n\
    \    }\n  }\n  long sum = 0;\n  for (int i = 0; i < products.size(); i++) {\n\
    \    std::string str = std::to_string(products[i]);\n    for (int j = 0; j < str.length();\
    \ j++) {\n      if (str[j] == '7') {\n        sum++;\n      }\n    }\n  }\n  return\
    \ sum;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmp4ow7nn0l: /tmp/tmp4ow7nn0l.cpp:31: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    // YOUR CODE HERE\n    std::string x = std::to_string(n);\n\
    \    long count = 0;\n    for(int i = 0; i < x.length(); i++){\n        if(x[i]\
    \ == '7'){\n            count++;\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmp_f_f9k60: /tmp/tmp_f_f9k60.cpp:24: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    // Your code here!\n    int count = 0;\n \
    \   int flag = 1;\n    long temp = n;\n    while(temp>0){\n      int last_digit\
    \ = temp%10;\n      if(last_digit==7){\n        count++;\n      }\n      temp\
    \ = temp/10;\n    }\n    for(int i=1; i<=n; i++){\n      if(i%11==0 || i%13==0){\n\
    \        int temp2 = i;\n        while(temp2>0){\n          int last_digit = temp2%10;\n\
    \          if(last_digit==7){\n            count++;\n          }\n          temp2\
    \ = temp2/10;\n        }\n      }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmp4u8pads4: /tmp/tmp4u8pads4.cpp:39: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i <\
    \ n; i++) {\n        if ((i % 11 == 0) || (i % 13 == 0)) {\n            std::string\
    \ str = std::to_string(i);\n            for (int j = 0; j < str.length(); j++)\
    \ {\n                if (str[j] == '7') {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    // Your code here\n    long int r,seven_count=0;\n\
    \    int i;\n    for(i=0;i<n;i++)\n    {\n        if(i%11==0 || i%13==0)\n   \
    \     {\n            r=i;\n            while(r!=0)\n            {\n          \
    \      if(r%10==7)\n                {\n                    seven_count++;\n  \
    \              }\n                r=r/10;\n            }\n        }\n    }\n \
    \   return seven_count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n  \
    \  assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79))\
    \ == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200))\
    \ == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
